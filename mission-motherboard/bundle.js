!function(t){function e(e){for(var n,a,r=e[0],h=e[1],u=e[2],c=0,d=[];c<r.length;c++)a=r[c],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&d.push(o[a][0]),o[a]=0;for(n in h)Object.prototype.hasOwnProperty.call(h,n)&&(t[n]=h[n]);for(l&&l(e);d.length;)d.shift()();return s.push.apply(s,u||[]),i()}function i(){for(var t,e=0;e<s.length;e++){for(var i=s[e],n=!0,r=1;r<i.length;r++){var h=i[r];0!==o[h]&&(n=!1)}n&&(s.splice(e--,1),t=a(a.s=i[0]))}return t}var n={},o={0:0},s=[];function a(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=t,a.c=n,a.d=function(t,e,i){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)a.d(i,n,function(e){return t[e]}.bind(null,n));return i},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="";var r=window.webpackJsonp=window.webpackJsonp||[],h=r.push.bind(r);r.push=e,r=r.slice();for(var u=0;u<r.length;u++)e(r[u]);var l=h;s.push([294,1]),i()}({189:function(t,e,i){"use strict";i.d(e,"a",(function(){return f}));var n=i(2),o=i.n(n),s=i(5),a=i.n(s),r=i(4),h=i.n(r),u=i(1),l=i.n(u),c=i(6),d=i.n(c),p=i(0),v=i.n(p),f=function(t){function e(t,i,n){var s;return o()(this,e),s=a()(this,h()(e).call(this,t,i.dialogue,i.vo)),v()(l()(s),"choices",void 0),s.choices=n,s}return d()(e,t),e}(i(71).a)},190:function(t,e,i){"use strict";i.d(e,"a",(function(){return r}));var n=i(2),o=i.n(n),s=i(0),a=i.n(s),r=function t(e,i){o()(this,t),a()(this,"text",void 0),a()(this,"gotoIdx",void 0),this.text=e,this.gotoIdx=i}},290:function(t,e){var i,n,o,s,a,r,h,u;i=include("framework.ViewScript"),n=include("framework.WindowUtils"),o=include("framework.Vector"),s=include("framework.ViewTransformer"),a=include("framework.PositionViewTransformer"),r=function(t){var e=Object.extend({dragStartedCallback:function(t,e){},dragMovedCallback:function(t,e){},dragEndedCallback:function(t,e){},stopPropagation:!0,viewDragRescale:1,viewTransformer:null,sourceView:null},t);if(i.call(this,e),this._dragStartedCallback=e.dragStartedCallback,this._dragMovedCallback=e.dragMovedCallback,this._dragEndedCallback=e.dragEndedCallback,this._stopPropagation=e.stopPropagation,this._viewDragRescale=e.viewDragRescale,this._sourceView=e.sourceView?e.sourceView:this.view,this._viewInitiallyInteractive=this._sourceView.interactive,this._viewIsSelected=!1,this._mouseOffsetVec=o.create(0,0),this._lastMousePosition=o.create(0,0),this._pointerID=0,this._viewTransformer=null,e.viewTransformer){if(!instanceOf(e.viewTransformer,s))throw"DragViewScript: viewTransformerClass must be an instance of ViewTransformer.";this._viewTransformer=e.viewTransformer}else this._viewTransformer=new a(Object.extend({helper:this,view:this._view}));this._viewTransformer.helper=this._viewTransformer.helper||this,this._viewTransformer.view=this._viewTransformer.view||this._view,this._onViewMouseDown=this._onViewMouseDown.bind(this),this._onViewMouseUp=this._onViewMouseUp.bind(this),this._onViewMouseUpOutside=this._onViewMouseUpOutside.bind(this),this._onViewMouseMove=this._onViewMouseMove.bind(this),this._onViewMouseMoveOutOfWindow=this._onViewMouseMoveOutOfWindow.bind(this)},h=i.prototype,u=extend(r,i),Object.defineProperty(u,"isActive",{set:function(t){this._setActive(t)},get:function(){return this._isActive}}),Object.defineProperty(u,"view",{set:function(t){this._setView(t)},get:function(){return this._view}}),Object.defineProperty(u,"dragStartedCallback",{set:function(t){this._dragStartedCallback=t},get:function(){return this._dragStartedCallback}}),Object.defineProperty(u,"dragMovedCallback",{set:function(t){this._dragMovedCallback=t},get:function(){return this._dragMovedCallback}}),Object.defineProperty(u,"dragEndedCallback",{set:function(t){this._dragEndedCallback=t},get:function(){return this._dragEndedCallback}}),Object.defineProperty(u,"stopPropagation",{set:function(t){this._stopPropagation=t},get:function(){return this._stopPropagation}}),Object.defineProperty(u,"viewDragRescale",{set:function(t){this._viewDragRescale=t},get:function(){return this._viewDragRescale}}),Object.defineProperty(u,"viewTransformer",{get:function(){return this._viewTransformer}}),Object.defineProperty(u,"mouseOffsetVec",{get:function(){return this._mouseOffsetVec}}),u.init=function(){h.init.call(this),this._sourceView.interactive=!0,this._registerInteractionEvents()},u.deinit=function(){this._viewIsSelected&&this._endDrag(null),this._deregisterInteractionEvents(),this._sourceView.interactive=this._viewInitiallyInteractive,h.deinit.call(this)},u._updateImpl=function(t){this._viewIsSelected&&this._viewTransformer.updateState(t)},u.startDrag=function(t){this._onViewMouseDown(t)},u.stopDrag=function(t){this._onViewMouseUp(t)},u.getLocalMousePosition=function(){var t=this._viewTransformer.view.parent||this._view.parent||this._view;return o.transformGlobalToChild(this._lastMousePosition,t)},u._setActive=function(t){this._isActive=t,this._isActive||this._endDrag(null)},u._setView=function(t){this._view=t,this._viewTransformer&&(this._viewTransformer.view=t)},u._registerInteractionEvents=function(){this._sourceView.on("mousedown",this._onViewMouseDown),this._sourceView.on("touchstart",this._onViewMouseDown),this._sourceView.on("mouseup",this._onViewMouseUp),this._sourceView.on("touchend",this._onViewMouseUp),this._sourceView.on("mouseupoutside",this._onViewMouseUpOutside),this._sourceView.on("touchendoutside",this._onViewMouseUpOutside),this._sourceView.on("mousemove",this._onViewMouseMove),this._sourceView.on("touchmove",this._onViewMouseMove),n.registerMouseOut(this._onViewMouseMoveOutOfWindow)},u._deregisterInteractionEvents=function(){n.deregisterMouseOut(this._onViewMouseMoveOutOfWindow),this._sourceView.removeListener("touchmove",this._onViewMouseMove),this._sourceView.removeListener("mousemove",this._onViewMouseMove),this._sourceView.removeListener("touchendoutside",this._onViewMouseUpOutside),this._sourceView.removeListener("mouseupoutside",this._onViewMouseUpOutside),this._sourceView.removeListener("touchend",this._onViewMouseUp),this._sourceView.removeListener("mouseup",this._onViewMouseUp),this._sourceView.removeListener("touchstart",this._onViewMouseDown),this._sourceView.removeListener("mousedown",this._onViewMouseDown)},u._onViewMouseDown=function(t){this.isActive&&this._beginDrag(t)},u._onViewMouseUp=function(t){this.isActive&&this._endDrag(t)},u._onViewMouseUpOutside=function(t){this.isActive&&this._endDrag(t)},u._onViewMouseMove=function(t){this.isActive&&this._dragMove(t)},u._onViewMouseMoveOutOfWindow=function(t){this.isActive&&this._endDrag(t)},u._beginDrag=function(t){if(!this._viewIsSelected){this._pointerID=t.data.identifier,this._viewIsSelected=!0,this._lastMousePosition=t.data.global;var e=this.getLocalMousePosition();this._mouseOffsetVec=o.sub(e,this._viewTransformer.view.position),this._view.scale.x*=this._viewDragRescale,this._view.scale.y*=this._viewDragRescale,this._viewTransformer.captureState(),this._viewTransformer.updateState(0),this._dragStartedCallback&&this._dragStartedCallback(t,this._view),this._stopPropagation&&t.stopPropagation()}},u._dragMove=function(t){this._viewIsSelected&&t.data.identifier===this._pointerID&&(this._lastMousePosition=t.data.global,this._dragMovedCallback&&this._dragMovedCallback(t,this._view))},u._endDrag=function(t){this._viewIsSelected&&(this._viewIsSelected=!1,this._view.scale.x/=this._viewDragRescale,this._view.scale.y/=this._viewDragRescale,this._viewTransformer.restoreState(),this._dragEndedCallback&&this._dragEndedCallback(t,this._view),this._stopPropagation&&t&&t.stopPropagation())},namespace("framework").DragViewScript=r},294:function(t,e,i){i(191),t.exports=i(666)},47:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return ConversationChoice})),__webpack_require__.d(__webpack_exports__,"b",(function(){return ConversationContext}));var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(24),core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_0__),core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(39),core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_1__),core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(51),core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_2__),core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(25),core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_3__),_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(2),_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__),_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(3),_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(0),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__),_models_ChoiceDialogueModel__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(189),_models_DialogueModel__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(71),_models_ChoiceModel__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(190),_StateContext__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(70),_services_DIService__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(9),ConversationChoice;!function(t){t[t.STOP=-1]="STOP",t[t.PLAY_QUIZ=100]="PLAY_QUIZ",t[t.CONTINUE_QUIZ=101]="CONTINUE_QUIZ",t[t.PLAY_MULTIPLE_CHOICE=200]="PLAY_MULTIPLE_CHOICE",t[t.QUIZ_INCORRECT=201]="QUIZ_INCORRECT",t[t.QUIZ_CORRECT=202]="QUIZ_CORRECT",t[t.ZOO_GAME=301]="ZOO_GAME",t[t.BATS_GAME=401]="BATS_GAME",t[t.SAM_TRADE=501]="SAM_TRADE"}(ConversationChoice||(ConversationChoice={}));var ConversationContext=function(){function ConversationContext(t,e,i,n){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4___default()(this,ConversationContext),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"answerState",null),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"choiceState",null),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"stateMachine",new _StateContext__WEBPACK_IMPORTED_MODULE_10__.a),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"conversation",null),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"quizDialogues",null),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"quizIdx",0),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"numCorrectQuizAnswers",0),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"listeners",[]),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"walletService",void 0),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(this,"voPlayerDelegate",void 0),this.answerState=t,this.choiceState=e,this.walletService=i.get(_services_DIService__WEBPACK_IMPORTED_MODULE_11__.b.WalletService),this.voPlayerDelegate=n}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default()(ConversationContext,[{key:"setConversationListener",value:function(t){this.listeners.push(t)}},{key:"playConversation",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.conversation=t,this.playDialogue(t.choiceDialogues[e])}},{key:"stopConversation",value:function(){this.voPlayerDelegate.stopVO()}},{key:"playDialogue",value:function(t){switch(t.type){case"quiz":this.playQuizDialogue(t);break;case"choice":default:this.playChoiceDialogue(t)}}},{key:"playQuiz",value:function(){for(var t=this.conversation.quizQuestions,e=t.length-1;e>0;e--){var i=Math.floor(Math.random()*(e+1)),n=[t[i],t[e]];t[e]=n[0],t[i]=n[1]}this.quizDialogues=t,this.quizIdx=0,this.numCorrectQuizAnswers=0;var o=this.quizDialogues[this.quizIdx];this.playQuizDialogue(o)}},{key:"continueQuiz",value:function(){if(++this.quizIdx<this.conversation.questionAmount)if(this.conversation.quizQuestions.length>0){var t=this.quizDialogues[this.quizIdx];this.playQuizDialogue(t)}else if(this.conversation.multipleChoiceQuestions.length>0){var e=this.quizDialogues[this.quizIdx];this.playMultipleChoiceDialogue(e)}else console.log("Quiz exited prematurely, check your configuration"),this.finishQuiz();else this.finishQuiz()}},{key:"playMultipleChoice",value:function(){for(var t=this.conversation.multipleChoiceQuestions,e=t.length-1;e>0;e--){var i=Math.floor(Math.random()*(e+1)),n=[t[i],t[e]];t[e]=n[0],t[i]=n[1]}this.quizDialogues=t,this.quizIdx=0,this.numCorrectQuizAnswers=0;var o=this.quizDialogues[this.quizIdx];this.playMultipleChoiceDialogue(o)}},{key:"finishQuiz",value:function finishQuiz(){for(var numCorrectAnswers=this.numCorrectQuizAnswers,i=0;i<this.conversation.quizResultDialogues.length;i++){var quizResultDialogue=this.conversation.quizResultDialogues[i],queryExpression=numCorrectAnswers.toString()+quizResultDialogue.query,queryResult=eval(queryExpression);if(1==queryResult)return void this.playQuizResultDialogue(quizResultDialogue)}}},{key:"playChoiceDialogue",value:function(t){this.voPlayerDelegate.playVO(_models_DialogueModel__WEBPACK_IMPORTED_MODULE_8__.a.voId(t.vo)),this.choiceState.init(t,this),this.stateMachine.currentState=this.choiceState}},{key:"playQuizDialogue",value:function(t){this.voPlayerDelegate.playVO(_models_DialogueModel__WEBPACK_IMPORTED_MODULE_8__.a.voId(t.vo)),this.answerState.init(t,this),this.stateMachine.currentState=this.answerState}},{key:"playMultipleChoiceDialogue",value:function(t){this.voPlayerDelegate.playVO(_models_DialogueModel__WEBPACK_IMPORTED_MODULE_8__.a.voId(t.vo)),this.choiceState.init(t,this),this.stateMachine.currentState=this.choiceState}},{key:"playQuizResultDialogue",value:function(t){1==t.bonus&&this.walletService.credit(this.conversation.quizBonus,"Scored a quiz bonus."),this.playChoiceDialogue(t)}},{key:"onChoice",value:function(t){this.listeners.forEach((function(e){e.onChoice(t)}));var e=t.gotoIdx,i=[];i[ConversationChoice.STOP]=this.stopConversation.bind(this),i[ConversationChoice.PLAY_QUIZ]=this.playQuiz.bind(this),i[ConversationChoice.CONTINUE_QUIZ]=this.continueQuiz.bind(this),i[ConversationChoice.PLAY_MULTIPLE_CHOICE]=this.playMultipleChoice.bind(this),i[ConversationChoice.QUIZ_CORRECT]=this.playQuizCorrect.bind(this),i[ConversationChoice.QUIZ_INCORRECT]=this.playQuizIncorrect.bind(this),i[ConversationChoice.SAM_TRADE]=this.stopConversation.bind(this);var n=i[e];n?n():e>=this.conversation.choiceDialogues.length?this.stopConversation():this.playChoiceDialogue(this.conversation.choiceDialogues[e])}},{key:"playQuizCorrect",value:function(){if(this.numCorrectQuizAnswers++,this.conversation.quizCorrectResponses&&this.conversation.quizCorrectResponses.length>0){this.walletService.credit(this.conversation.quizAmount,"Answered a quiz correctly.");var t=this.conversation.quizCorrectResponses[Math.floor(Math.random()*this.conversation.quizCorrectResponses.length)];this.playChoiceDialogue(new _models_ChoiceDialogueModel__WEBPACK_IMPORTED_MODULE_7__.a("choice",t,[new _models_ChoiceModel__WEBPACK_IMPORTED_MODULE_9__.a("Ok",ConversationChoice.CONTINUE_QUIZ)]))}else this.finishQuiz()}},{key:"playQuizIncorrect",value:function(){if(this.conversation.quizWrongResponses&&this.conversation.quizWrongResponses.length>0){var t=this.conversation.quizWrongResponses[Math.floor(Math.random()*this.conversation.quizWrongResponses.length)];this.playChoiceDialogue(new _models_ChoiceDialogueModel__WEBPACK_IMPORTED_MODULE_7__.a("choice",t,[new _models_ChoiceModel__WEBPACK_IMPORTED_MODULE_9__.a("Ok",ConversationChoice.CONTINUE_QUIZ)]))}else this.finishQuiz()}},{key:"onAnswer",value:function(t){this.listeners.forEach((function(e){e.onAnswer(t)})),t?this.playQuizCorrect():this.playQuizIncorrect()}}]),ConversationContext}()},588:function(t,e){[Element.prototype,Document.prototype,DocumentFragment.prototype].forEach((function(t){t.hasOwnProperty("append")||Object.defineProperty(t,"append",{configurable:!0,enumerable:!0,writable:!0,value:function(){var t=Array.prototype.slice.call(arguments),e=document.createDocumentFragment();t.forEach((function(t){var i=t instanceof Node;e.appendChild(i?t:document.createTextNode(String(t)))})),this.appendChild(e)}})}))},589:function(t,e){!function(t,e,i){var n=function(e){return e&&e.constructor===t};i.isArray=n;var o=function(t){return n(t)?t:[t]};i.arrayify=o,e.defineProperty(t.prototype,"clone",{enumerable:!1,writable:!1,value:function(t){if(t){var i=[];return this.forEach((function(t){i.push(e.clone(t,!0))})),i}return this.slice()}});var s=function(e,i){if(isFunction(t.prototype.indexOf)){var n=e.indexOf(i);return n>-1?e.splice(n,1)[0]:void 0}};e.defineProperty(t.prototype,"remove",{enumerable:!1,writable:!1,value:function(t){if(n(t)){var e=[],i=this;return t.forEach((function(t){var n=s(i,t);n&&e.push(n)})),e}return s(this,t)}}),e.defineProperty(t.prototype,"clear",{enumerable:!1,writable:!1,value:function(){this.splice(0,this.length)}}),t.prototype.hasItems||e.defineProperty(t.prototype,"hasItems",{get:function(){return this.length>0}}),t.prototype.append||e.defineProperty(t.prototype,"append",{enumerable:!1,writable:!1,value:function(t){this.push.apply(this,o(t))}}),t.prototype.shuffle||e.defineProperty(t.prototype,"shuffle",{enumerable:!1,writable:!1,value:function(){for(var t,e,i=this.length;i;t=Math.floor(Math.random()*i),e=this[--i],this[i]=this[t],this[t]=e);return this}}),t.prototype.random||e.defineProperty(t.prototype,"random",{enumerable:!1,writable:!1,value:function(){return this[Math.floor(Math.random()*this.length)]}}),t.prototype.first||e.defineProperty(t.prototype,"first",{enumerable:!1,writable:!1,value:function(){return this[0]}}),t.prototype.middle||e.defineProperty(t.prototype,"middle",{enumerable:!1,writable:!1,value:function(){return this[this.middleIndex]}}),t.prototype.last||e.defineProperty(t.prototype,"last",{enumerable:!1,writable:!1,value:function(){return this[this.length-1]}}),t.prototype.wrapIndex||e.defineProperty(t.prototype,"wrapIndex",{enumerable:!1,writable:!1,value:function(t,e,i){return e=e||0,i=i||this.length,Math.wrap(t,e,i)}}),t.prototype.clampIndex||e.defineProperty(t.prototype,"clampIndex",{enumerable:!1,writable:!1,value:function(t,e,i){return e=e||0,i=i||this.length-1,Math.clamp(t,e,i)}}),t.prototype.middleIndex||e.defineProperty(t.prototype,"middleIndex",{get:function(){return Math.max(Math.ceil(.5*this.length-1),0)}}),t.prototype.lastIndex||e.defineProperty(t.prototype,"lastIndex",{get:function(){return this.length-1}}),t.prototype.containsIndex||e.defineProperty(t.prototype,"containsIndex",{enumerable:!1,writable:!1,value:function(t){return Math.isInRange(t,0,this.length-1)}}),t.prototype.randomIndex||e.defineProperty(t.prototype,"randomIndex",{enumerable:!1,writable:!1,value:function(t){if(0===this.length)return-1;var e,i=!1;void 0!==t&&t>=0&&t<this.length&&(i=!0);do{e=Math.floor(Math.random()*this.length)}while(i&&e===t);return e}}),t.prototype.count||e.defineProperty(t.prototype,"count",{value:function(t,e){if(t){e||(e=this);for(var i=0,n=0;n<this.length;n++)t.call(this,this[n],n,this)&&i++;return i}}}),t.prototype.find||e.defineProperty(t.prototype,"find",{value:function(t){if(null===this)throw new TypeError('"this" is null or not defined');var i=e(this),n=i.length>>>0;if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var o=arguments[1],s=0;s<n;){var a=i[s];if(t.call(o,a,s,i))return a;s++}}}),t.prototype.findIndex||e.defineProperty(t.prototype,"findIndex",{value:function(t){if(null===this)throw new TypeError('"this" is null or not defined');var i=e(this),n=i.length>>>0;if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var o=arguments[1],s=0;s<n;){var a=i[s];if(t.call(o,a,s,i))return s;s++}return-1}}),t.prototype.indexOf||(t.prototype.indexOf=function(t,i){var n;if(null===this)throw new TypeError('"this" is null or not defined');var o=e(this),s=o.length>>>0;if(0===s)return-1;var a=0|i;if(a>=s)return-1;for(n=Math.max(a>=0?a:s-Math.abs(a),0);n<s;){if(n in o&&o[n]===t)return n;n++}return-1}),t.prototype.contains||e.defineProperty(t.prototype,"contains",{value:function(t){for(var e=0;e<this.length;e++)if(this[e]===t)return!0;return!1}}),t.prototype.reverseForEach||e.defineProperty(t.prototype,"reverseForEach",{value:function(t,e){if(t){e||(e=this);for(var i=this.length-1;i>=0;i--)t.call(e,this[i],i,this)}}}),t.prototype.filterOutDuplicates||e.defineProperty(t.prototype,"filterOutDuplicates",{value:function(){return this.filter((function(t,e,i){return i.indexOf(t)==e}))}}),t.prototype.filterOutNulls||e.defineProperty(t.prototype,"filterOutNulls",{value:function(){return this.filter((function(t,e,i){return!!t}))}}),t.prototype.filterOutItems||e.defineProperty(t.prototype,"filterOutItems",{value:function(t){return t=o(t),this.filter((function(e,i,n){return!t.contains(e)}))}})}(Array,Object,window)},590:function(t,e){!function(t){t.toSignedInt||(t.toSignedInt=function(t){return t?1:-1}),t.toUnsignedInt||(t.toUnsignedInt=function(t){return t?1:0})}(Boolean)},591:function(t,e){HTMLAudioElement,HTMLAudioElement.prototype.stop||Object.defineProperty(HTMLAudioElement.prototype,"stop",{value:function(){this.pause(),this.currentTime=0,this.src=""}})},592:function(t,e){HTMLCanvasElement.prototype.toBlob||Object.defineProperty(HTMLCanvasElement.prototype,"toBlob",{value:function(t,e,i){var n=this;setTimeout((function(){for(var o=atob(n.toDataURL(e,i).split(",")[1]),s=o.length,a=new Uint8Array(s),r=0;r<s;r++)a[r]=o.charCodeAt(r);t(new Blob([a],{type:e||"image/png"}))}))}})},593:function(t,e){!function(t){window.MathExt=t;var e=180/t.PI,i=t.PI/180;t.QUARTER_PI=.25*t.PI,t.HALF_PI=.5*t.PI,t.TWO_PI=2*t.PI,t.toDegrees=function(t){return t*e},t.toRadians=function(t){return t*i},t.lerp=function(t,e,i){return(1-i)*t+i*e},t.inverseLerp=function(t,e,i){return(i-t)/(e-t)},t.wrap=function(e,i,n){var o=t.min(i,n),s=t.max(i,n),a=t.abs(s-o);if(a<1e-4)return o;var r=(e-o)/a;return r=o+(r-=t.floor(r))*a},t.clamp=function(e,i,n){return t.min(t.max(e,i),n)},t.saturate=function(e){return t.clamp(e,0,1)},t.isInRange=function(t,e,i){return void 0===i&&(i=e,e=0),t<=i&&t>=e},t.mapValueToRange=function(e,i,n,o,s){var a=t.inverseLerp(i,n,e);return t.lerp(o,s,a)},t.sign||(t.sign=function(t){return(t>0)-(t<0)||+t}),t.randomInt=function(e,i){return void 0===i&&(i=e,e=0),t.floor(t.random()*(i-e+1))+e},t.randomFloat=function(e,i){return void 0===i&&(i=e,e=0),t.random()*(i-e)+e}}(Math)},594:function(t,e){!function(t){t.isInteger=t.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},t.isZero=function(e,i){return t.isInteger(e)?0===e:(isDefined(i)||(i=1e-4),Math.abs(e)<i)},t.equals=function(e,i,n){return t.isInteger(e)&&t.isInteger(i)?e===i:(isDefined(n)||(n=1e-4),t.isZero(Math.abs(e-i),n))},t.isEven=function(t){return t%2==0},t.isOdd=function(e){return!t.isEven(e)},t.prototype.mod=function(t){return(this%t+t)%t}}(Number)},595:function(t,e){!function(t){t.extend=function(e,i){var n,o,s;"boolean"==typeof i?(n=2,s=i):(n=1,s=!0),e=e||{},o=Array.prototype.slice.call(arguments,n);for(var a=0;a<o.length;a++){var r=o[a];if(r)for(var h in r)s?r[h]&&r[h].constructor===t?e[h]&&e[h].constructor!==t?e[h]=r[h]:(e[h]=e[h]||{},t.extend(e[h],s,r[h])):(isArray(r[h]),e[h]=r[h]):isArray(r[h])?e[h]=r[h].clone():e[h]=r[h]}return e},t.clone=function(e,i){return t.extend({},i,e)},t.values=function(e){var i=[];if(e=e||{},t.keys){for(var n=t.keys(e),o=0;o<n.length;o++)i.push(e[n[o]]);return i}for(var s in e)i.push(e[s]);return i},t.omitProperties=function(t,e){var i={},n=e||[];if(n.constructor!==Array)return i;for(var o in t=t||{})-1==n.indexOf(o)&&(i[o]=t[o]);return i},t.defineProperty(t.prototype,"forIn",{enumerable:!1,writable:!0,value:function(t,e){if(t)for(var i in e||(e=this),this)t.call(e,this[i],i)}}),t.defineProperty(t.prototype,"reverseForIn",{enumerable:!1,writable:!0,value:function(t,e){if(t){var i;e||(e=this);var n=[];for(i in this)n.push(i);for(var o=n.length-1;o>=0;o--)i=n[o],t.call(e,this[i],i)}}}),t.defineProperty(t.prototype,"arrayify",{enumerable:!1,writable:!0,value:function(){return t.keys(this).map((function(t){return this[t]}),this)}}),t.defineProperty(t.prototype,"map",{enumerable:!1,writable:!0,value:function(e,i){if(!e)return t.clone(this,!0);i||(i=this);var n={};for(var o in this)n[o]=e.call(i,this[o],o);return n}})}(Object)},596:function(t,e){!function(t){t.prototype.padStart||(t.prototype.padStart=function(e,i){return e>>=0,i=t(i||" "),this.length>e?t(this):((e-=this.length)>i.length&&(i+=i.repeat(e/i.length)),i.slice(0,e)+t(this))}),t.prototype.padEnd||(t.prototype.padEnd=function(e,i){return e>>=0,i=t(i||" "),this.length>e?t(this):((e-=this.length)>i.length&&(i+=i.repeat(e/i.length)),t(this)+i.slice(0,e))})}(String)},597:function(t,e){var i,n;(n=(i=function(){this._creators={}}).prototype).registerCreator=function(t,e){this._creators[t]=e},n.registerCreators=function(t){var e=this;(t=t||[]).forEach((function(t){e._creators[t.creatorKey]=t.creatorFunc}))},n.deregisterCreator=function(t){delete this._creators[t]},n.deregisterCreators=function(){this._creators={}},n.defaultCreator=function(t){return function(e,i){return new t(e)}},namespace("framework").BaseFactory=i},598:function(t,e){var i,n;n=function(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t},(i={colourToNumber:function(t){return 3==(t=t.replace("#","")).length&&(t=t.charAt(0)+t.charAt(0)+t.charAt(1)+t.charAt(1)+t.charAt(2)+t.charAt(2)),parseInt(t,16)},numberToColour:function(t){return"#"+t.toString(16)},rgbToHex:function(t){return parseInt(("0"+t.r.toString(16)).slice(-2)+("0"+t.g.toString(16)).slice(-2)+("0"+t.b.toString(16)).slice(-2),16)},hexToRGB:function(t){return{r:(t>>16&255)/255,g:(t>>8&255)/255,b:(255&t)/255}},cssColourToRGB:function(t){var e={r:0,g:0,b:0,a:1},i=/^rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d+(?:\.\d+)?))?\s*\)$/.exec(t);return i&&(e.r=parseInt(i[1],10),e.g=parseInt(i[2],10),e.b=parseInt(i[3],10),e.a=void 0!==i[4]?parseFloat(i[4]):1),e},rgbFloatToHex:function(t,e,n){var o={r:t,g:e,b:n};if(isDefined(t)){isDefined(e)||isDefined(n)||(o={r:t.r,g:t.g,b:t.b}),o.r=Math.floor(255*o.r),o.g=Math.floor(255*o.g),o.b=Math.floor(255*o.b);var s=o.r.toString(16).padStart(2,"0")+o.g.toString(16).padStart(2,"0")+o.b.toString(16).padStart(2,"0");return i.colourToNumber(s)}},rgbHexToFloat:function(t){return isDefined(t)?{r:(t>>16&&255)/255,g:(t>>8&&255)/255,b:(t&&255)/255}:null}}).hslToRgb=function(t,e,i){isDefined(i)||(i=.5),isDefined(e)||(e=1);var o={r:0,g:0,b:0};if(e>1e-4){var s=i<.5?i*(1+e):i+e-i*e,a=2*i-s;o.r=n(a,s,t+1/3),o.g=n(a,s,t),o.b=n(a,s,t-1/3)}else red=i,green=i,blue=i;return o},i.biasHueAngle=function(t){t-=1/12;var e=.5*Math.cos(6*t*Math.PI)+.5;return e*=1/12,t+(e+=1/12*.5)},i.lerp=function(t,e,n){return i.lerpArray([t,e],n)},i.lerpArray=function(t,e){if(!isArray(t)||!t.hasItems)return null;if(1==t.length||e<=0)return t[0];if(e>=1)return t.last();var n=t.length-1,o=Math.floor(e*n),s=o+1,a=i.hexToRGB(t[o]),r=i.hexToRGB(t[s]),h=o/n,u=s/n,l=Math.inverseLerp(h,u,e),c={r:Math.lerp(a.r,r.r,l),g:Math.lerp(a.g,r.g,l),b:Math.lerp(a.b,r.b,l)};return i.rgbFloatToHex(c)},namespace("framework").ColourUtils=i},599:function(t,e){var i;i={},Object.defineProperty(i,"isTouchDevice",{get:function(){return"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0}}),Object.defineProperty(i,"isDesktop",{get:function(){return!i.isTouchDevice}}),Object.defineProperty(i,"isWindowsPhone",{get:function(){var t=navigator.userAgent;return/Windows Phone/i.test(t)||/IEMobile/i.test(t)}}),Object.defineProperty(i,"isChrome",{get:function(){var t=navigator.userAgent;return/Chrome\/(\d+)/.test(t)&&!i.isWindowsPhone}}),Object.defineProperty(i,"isIE11",{get:function(){return navigator.userAgent.indexOf("Trident/7.0")>0}}),namespace("framework").DeviceUtils=i},600:function(t,e){var i,n;n=0,(i={}).generateGUID=function(){return n++},i.generateGUIDString=function(){return""+n++},namespace("framework").GeneralUtils=i},601:function(t,e){!function(){var t,e,i=navigator.userAgent;t=i.indexOf("Safari")>=0?"Safari":i.indexOf("Firefox")>=0?"Firefox":i.indexOf("IE")>=0||i.indexOf("Edge")?"IE":"Chrome";var n,o={cancel:3,backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":"Mac"==(e=i.indexOf("Windows")>=0?"Windows":i.indexOf("Mac")>=0?"Mac":i.indexOf("iOS")>=0||i.indexOf("iPhone")>=0||i.indexOf("iPad")>=0?"Mac":"Linux")&&"Firefox"!=t?126:19,caps_lock:20,esc:27,spacebar:32,pageup:33,pagedown:34,end:35,home:36,arrow_left:37,arrow_up:38,arrow_right:39,arrow_down:40,print_screen:"Linux"==e?42:"Mac"==e&&"Firefox"!=t?124:44,insert:45,delete:46,scroll_lock:"Mac"==e&&"Firefox"!=t?125:145,OS:"Firefox"==t?"Mac"==e?224:91:[91,"Mac"==e?93:92],context_menu:"Mac"==e?0:93,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"\\":220,"[":219,"]":221,"'":222,"num_*":106,"num_+":107,num_enter:108,"num_-":109,"num_.":110,"num_/":111,num_lock:"Mac"==e?12:144,clear:"Mac"==e?12:144};for(n=65;n<=90;++n)o[String.fromCharCode(n+32)]=n;for(n=48;n<=57;++n)o[String.fromCharCode(n)]=n;for(n=96;n<=105;++n)o["num_"+(n-96)]=n;for(n=112;n<=123;++n)o["F"+(n-111)]=n;"Mac"==e?o.meta=o.command=o.OS:(o.meta=o.ctrl,o.command=0),namespace("framework").USLocale=o}(),function(){var t=include("framework.USLocale"),e=function(e){var i=t;this._onFocusLost=this._onFocusLost.bind(this),this._onPaused=this._onPaused.bind(this),this._onResumed=this._onResumed.bind(this),this._update=this._update.bind(this),this._keyDown=this._keyDown.bind(this),this._keyUp=this._keyUp.bind(this),this.target=e,e.addEventListener("onblur",this._onFocusLost);var n=this._keysByCode={},s=this._keysByName={};for(var a in this._activeCombos=[],this._updatedKeys=[],this.detectKeyCallback=null,this.detectCancelKey=null,this.detectModifiers=!1,this.modifiers=["ctrl","alt","shift","command"],this.scrollKeys=["arrow_down","arrow_up","arrow_left","arrow_right","spacebar"],i){var r=i[a];Array.isArray(r)||(r=[r]);var h,u=null;for(h=0;h<r.length;++h)if(n[r[h]]){u=n[r[h]];break}for(u||(u=new o),u.addName(a),u.addCode(r),s[a]=u,h=0;h<r.length;++h)n[r[h]]=u}this.enabled=!0,app.onPaused(this._onPaused),app.onResumed(this._onResumed)},n=e.prototype;n.addKeyDown=function(t,e,i){if(Array.isArray(t))for(var n=0;n<t.length;++n)this.addKeyDown(t[n],e,i);else{var o=this._keysByName[t];o&&o.addListener(e,1,t,!!i)}},n.removeKeyDown=function(t,e,i){if(Array.isArray(t))for(var n=0;n<t.length;++n)this.removeKeyDown(t[n],e,i);else{var o=this._keysByName[t];o&&o.removeListener(e,1)}},n.addKeyRepeat=function(t,e,i){if(Array.isArray(t))for(var n=0;n<t.length;++n)this.addKeyRepeat(t[n],e,i);else{var o=this._keysByName[t];o&&o.addListener(e,2,t,!!i)}},n.removeKeyRepeat=function(t,e){if(Array.isArray(t))for(var i=0;i<t.length;++i)this.removeKeyRepeat(t[i],e,preventDefault);else{var n=this._keysByName[t];n&&n.removeListener(e,2)}},n.addKeyUp=function(t,e,i){if(Array.isArray(t))for(var n=0;n<t.length;++n)this.addKeyUp(t[n],e,i);else{var o=this._keysByName[t];o&&o.addListener(e,3,t,!!i)}},n.removeKeyUp=function(t,e){if(Array.isArray(t))for(var i=0;i<t.length;++i)this.removeKeyUp(t[i],e,preventDefault);else{var n=this._keysByName[t];n&&n.removeListener(e,3)}},n.setPreventDefaultOnKey=function(t,e){if(Array.isArray(t))for(var i=0;i<t.length;++i)this.setPreventDefaultOnKey(t[i],e);else{var n=this._keysByName[t];n&&n.setManualPreventDefault(e)}},n.addCombo=function(t,e,i){!1!==i&&(i=!0);for(var n,o=this._activeCombos,a=o.length-1;a>=0;--a)if(o[a].name==t&&o[a].preventDefault==i){n=o[a];break}n||(n=new s(t,i,this._keysByName),o.push(n)),n.addListener(e)},n.removeCombo=function(t,e){for(var i=this._activeCombos,n=i.length-1;n>=0;--n)i[n].name==t&&i[n].removeListener(e)&&(n==i.length-1?i.pop():i.splice(n,1))},n.detectNextKey=function(t,e,i){void 0===e?e=this._keysByName.esc:e&&(e=this._keysByName[e]),this.detectKeyCallback=t,this.detectCancelKey=e||null,this.detectModifiers=!!i},n.stopDetecting=function(){this.detectKeyCallback=null,this.detectCancelKey=null},n.justPressed=function(t){var e=this._keysByName[t];return!!e&&e.justDown},n.isDown=function(t){var e=this._keysByName[t];return!!e&&e.isDown},n.justReleased=function(t){var e=this._keysByName[t];return!!e&&e.justUp},Object.defineProperty(n,"enabled",{get:function(){return this._enabled},set:function(t){this._enabled=t;var e=this.target;e.removeEventListener("keydown",this._keyDown,!0),e.removeEventListener("keyup",this._keyUp,!0),app.offUpdate(this._update),t?(e.addEventListener("keydown",this._keyDown,!0),e.addEventListener("keyup",this._keyUp,!0),app.onUpdate(this._update)):this.clearKeys()}}),n.clearKeys=function(){var t=this._keysByCode;if(t)for(var e in t){var i=t[e];i.isDown=i.justDown=i.justUp=!1}},n._onFocusLost=function(t){this.clearKeys()},n._onPaused=function(){this.enabled=!1},n._onResumed=function(){this.enabled=!0;var t=this.target;t&&t.focus&&t.focus()},n._update=function(t){var e=this._updatedKeys;if(e&&e.length){for(var i=e.length-1;i>=0;--i){var n=e[i];n.justDown=n.justUp=!1}e.length=0}},n._keyDown=function(t){var e,i=this._keysByCode[t.keyCode];if(this.detectKeyCallback){var n=this.detectKeyCallback;if(i&&i==this.detectCancelKey)this.detectKeyCallback=null,n(null);else{var s=!1,a=this.modifiers;if(this.detectModifiers)for(e=0;e<a.length;++e)if(i===this._keysByName[a[e]]){s=!0;break}if(!s){this.detectKeyCallback=null,i||(i=new o(t.keyCode,"key_"+t.keyCode),this._keysByCode[t.keyCode]=i,this._keysByName[i.name]=i);var r=i.preferredName;if(this.detectModifiers)for(e=0;e<a.length;++e)this._keysByName[a[e]].isDown&&(r=a[e]+" + "+r);n(r)}}}if(i){var h=!1;if(i.isDown)i.trigger(2);else for(i.isDown=i.justDown=!0,-1==this._updatedKeys.indexOf(i)&&this._updatedKeys.push(i),i.trigger(1),e=this._activeCombos.length-1;e>=0;--e)this._activeCombos[e].testKeyDown(t.keyCode)&&(h=!0);if(i.shouldPreventDefault||h)return t.preventDefault(),!0}},n._keyUp=function(t){var e=this._keysByCode[t.keyCode];if(e){var i=!1;if(e.isDown){e.isDown=!1,e.justUp=!0,-1==this._updatedKeys.indexOf(e)&&this._updatedKeys.push(e),e.trigger(3);for(var n=this._activeCombos.length-1;n>=0;--n)this._activeCombos[n].testKeyUp(t.keyCode)&&(i=!0)}if(e.shouldPreventDefault||i)return t.preventDefault(),!0}},n.destroy=function(){var t;for(t in this.enabled=!1,app&&(app.offPaused(this._onPaused),app.offResumed(this._onResumed)),this.target.removeEventListener("onblur",this._onFocusLost),this._keysByCode)this._keysByCode[t].destroy();for(t=this._activeCombos.length-1;t>=0;--t)this._activeCombos[t].destroy();this._keysByCode=this._keysByName=this._updatedKeys=this._activeCombos=this.target=null,this._update=this._keyDown=this._keyUp=this._onResumed=this._onPaused=this._onFocusLost=null},namespace("framework").Keyboard=e;var o=function(){this.codes=[],this.names=[],this.preferredName=null,this.upListeners=[],this.repeatListeners=[],this.downListeners=[],this.manualPreventDefault=!1,this.shouldPreventDefault=!1,this.isDown=!1,this.justDown=!1,this.justUp=!1};(n=o.prototype).addCode=function(t){if(Array.isArray(t))for(var e=0;e<t.length;++e)this.codes.push(t[e]);else this.codes.push(t)},n.addName=function(t){this.names.length||(this.preferredName=t),this.names.push(t)},n.setManualPreventDefault=function(t){if(this.manualPreventDefault=t,t)this.shouldPreventDefault=!0;else{t=!1;for(var e=[this.downListeners,this.repeatListeners,this.upListeners],i=0;i<e.length&&!t;++i)for(var n=e[i],o=n.length-1;o>=0;--o)if(n[o]&&n[o].preventDefault){t=!0;break}this.shouldPreventDefault=t}},n.addListener=function(t,e,i,n){var o;switch(e){case 1:o=this.downListeners;break;case 2:o=this.repeatListeners;break;case 3:o=this.upListeners}-1==o.indexOf(t)&&o.push(t),this.preferredName!=i&&(this.preferredName=i),t.preventDefault=n,n&&(this.shouldPreventDefault=!0)},n.removeListener=function(t,e){var i;switch(e){case 1:i=this.downListeners;break;case 2:i=this.repeatListeners;break;case 3:i=this.upListeners}var n=i.indexOf(t);n>=0&&(n<1?i.shift():i.splice(n,1)),this.setManualPreventDefault(this.manualPreventDefault)},n.trigger=function(t){var e;switch(t){case 1:e=this.downListeners;break;case 2:e=this.repeatListeners;break;case 3:e=this.upListeners}for(var i=0;i<e.length;++i)e[i](this.preferredName)},n.destroy=function(){this.codes=this.names=this.upListeners=this.repeatListeners=this.downListeners=null};var s=function(t,e,i){this.name=t,this.listeners=[],this.steps=[],this.currentStep=0,this.preventDefault=e;for(var n=t.split(/\s+>\s+/g),o=0;o<n.length;++o){for(var s=n[o].split(/\s+\+\s+/g),a=[],r=0;r<s.length;++r){var h=s[r];"\\>"==h?h=">":"\\+"==h&&(h="+");var u=i[h];u&&a.push({sated:!1,released:!1,codes:u.codes})}a.length&&this.steps.push(a)}};(n=s.prototype).testKeyDown=function(t){var e,i,n=this.steps[this.currentStep],o=!1;for(e=0;e<n.length;++e)if((i=n[e]).codes.indexOf(t)>=0){if(i.sated)break;i.sated=!0,o=!0;break}if(!o)return this.resetStep(),this.currentStep=0,!1;var s=!0;for(e=0;e<n.length;++e)if(!(i=n[e]).sated){s=!1;break}return s&&this.currentStep+1==this.steps.length&&(this.trigger(),this.resetStep(),this.currentStep=0),this.preventDefault},n.testKeyUp=function(t){var e,i,n=this.steps[this.currentStep],o=!1;for(e=0;e<n.length;++e)if((i=n[e]).sated&&i.codes.indexOf(t)>=0){i.released=!0,o=!0;break}if(o){var s=!0;for(e=0;e<n.length;++e)if(!n[e].released){s=!1;break}s&&(this.resetStep(),++this.currentStep)}return o&&this.preventDefault},n.resetStep=function(){var t=this.steps[this.currentStep];for(i=0;i<t.length;++i)key=t[i],key.sated=key.released=!1},n.trigger=function(){for(var t=this.listeners,e=0;e<t.length;++e)t[e](this.name)},n.addListener=function(t){var e=this.listeners;-1==e.indexOf(t)&&e.push(t)},n.removeListener=function(t){var e=this.listeners,i=e.indexOf(t);return i>=0&&(i<1?e.shift():e.splice(i,1)),e.length<1},n.destroy=function(){this.listeners=this.steps=null}}()},602:function(t,e){var i,n;(n=(i=function(t){var e=Object.extend({createFunc:function(t,e){return{}},destroyFunc:null,initFunc:null,deinitFunc:null,createArgs:{},destroyArgs:{},initArgs:{},deinitArgs:{},capacity:5},t);if(!e.createFunc)throw"ObjectPool: createFunc is null.";this._defaultGrowCapacity=e.capacity,this._createFunc=e.createFunc,this._destroyFunc=e.destroyFunc,this._initFunc=e.initFunc,this._deinitFunc=e.deinitFunc,this._createArgs=e.createArgs,this._destroyArgs=e.destroyArgs,this._initArgs=e.initArgs,this._deinitArgs=e.deinitArgs,this._objs=[],this._usedIndices=[],this.grow(this._defaultGrowCapacity)}).prototype).destroy=function(){this.clear(),this._objs=null,this._usedIndices=null,this._createFunc=null,this._destroyFunc=null,this._initFunc=null,this._deinitFunc=null,this._createArgs=null,this._destroyArgs=null,this._initArgs=null,this._deinitArgs=null},n.get=function(t){if(t=t||this._initArgs,this.isAtFullCapacity()){var e=this.capacity()||this._defaultGrowCapacity;this.grow(e)}var i=this.getNextAvailableIndex();this._usedIndices.push(i),this._usedIndices.sort((function(t,e){return t-e}));var n=this._objs[i];return this._initFunc&&this._initFunc(n,t,i),n},n.release=function(t,e){e=e||this._deinitArgs;var i=this._objs.indexOf(t),n=this._usedIndices.indexOf(i);-1!=n&&(this._deinitFunc&&this._deinitFunc(t,e,n),this._usedIndices.splice(n,1))},n.grow=function(t){if((t=t||this.capacity())>0){var e=this.capacity();this._objs.length+=Number(t);for(var i=e;i<this.capacity();i++)this._objs[i]=this._createFunc(this._createArgs,i)}return this.capacity()},n.clear=function(){this._usedIndices.reverseForEach((function(t){var e=this._objs[t];this.release(e)}),this),this._usedIndices=[],this._destroyFunc&&this._objs.reverseForEach((function(t,e){this._destroyFunc(t,this._destroyArgs,e)}),this),this._objs=[]},n.numUsed=function(){return this._usedIndices.length},n.capacity=function(){return this._objs.length},n.isAtFullCapacity=function(){return this.numUsed()==this.capacity()},n.getNextAvailableIndex=function(){var t=this,e=0;return this.isAtFullCapacity()?e=-1:this._usedIndices.hasItems&&(e=1+this._usedIndices.find((function(e,i,n){return(i==n.lastIndex?t._objs.lastIndex+1:n[i+1])-e>1}))),e},namespace("framework").ObjectPool=i},603:function(t,e){var i;i={registerMouseOut:function(t){document.addEventListener("mouseout",t,!1)},deregisterMouseOut:function(t){document.removeEventListener("mouseout",t,!1)}},namespace("framework").WindowUtils=i},604:function(t,e){var i,n;i=include("framework.DeviceUtils"),n={getRandomisedVO:function(t,e,n){isDefined(e)||(e=Math.randomInt(Math.max(t.length-1,0))),isDefined(n)||(n=1);var o=t[e].name;return o&&t[e].platformSpecific&&(o+=i.isDesktop?"-desktop":"-mobile"),n<1&&(o=Math.random()<n?o:null),o}},namespace("framework").AudioUtils=n},605:function(t,e){var i;(i=function(){this.x=0,this.y=0}).create=function(t,e){return{x:t=t||0,y:e=e||(0!==e?t:0)}},i.createFromPoints=function(t,e){return i.sub(e,t)},i.createFromRotation=function(t,e,n){e=e||i.create(1,0);var o=i.normalise(e),s=i.rotate(o,t);return isDefined(n)&&(s=i.mult(s,n)),s},i.createFromIndex=function(t,e){var n=t%e,o=Math.floor(t/e);return i.create(n,o)},i.convertToIndex=function(t,e){return t.y*e+t.x},i.clone=function(t){return{x:t.x,y:t.y}},i.isVector=function(t){return isDefined(t.x)&&isDefined(t.y)},i.setEqual=function(t,e){t.x=e.x,t.y=e.y},i.magnitude=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},i.magnitudeSquared=function(t){return t.x*t.x+t.y*t.y},i.setMagnitude=function(t,e){var n=i.magnitude(t);return 0===n?i.create(0,0):i.mult(t,e/n)},i.setMagnitudeSquared=function(t,e){var n=i.magnitudeSquared(t);return 0===n?i.create(0,0):i.mult(t,Math.sqrt(e/n))},i.rotate=function(t,e){var i=Math.cos(e),n=Math.sin(e);return{x:t.x*i-t.y*n,y:t.x*n+t.y*i}},i.rotateAbout=function(t,e,n,o){var s=Math.cos(e),a=Math.sin(e);n||(n=i.create(0,0)),o||(o={});var r=n.x+((t.x-n.x)*s-(t.y-n.y)*a);return o.y=n.y+((t.x-n.x)*a+(t.y-n.y)*s),o.x=r,o},i.normalise=function(t){var e=i.magnitude(t);return 0===e?{x:0,y:0}:{x:t.x/e,y:t.y/e}},i.dot=function(t,e){return t.x*e.x+t.y*e.y},i.cross=function(t,e){return t.x*e.y-t.y*e.x},i.cross3=function(t,e,i){return(e.x-t.x)*(i.y-t.y)-(e.y-t.y)*(i.x-t.x)},i.lerp=function(t,e,n){return i.create(Math.lerp(t.x,e.x,n),Math.lerp(t.y,e.y,n))},i.inverseLerp=function(t,e,i){var n=Number.equals(t.x,e.x)?1/0:Math.inverseLerp(t.x,e.x,lerpVector.x),o=Number.equals(t.y,e.y)?1/0:Math.inverseLerp(t.y,e.y,lerpVector.y);return Math.max(n,o)},i.add=function(t,e,i){return i||(i={}),i.x=t.x+e.x,i.y=t.y+e.y,i},i.sub=function(t,e,i){return i||(i={}),i.x=t.x-e.x,i.y=t.y-e.y,i},i.mult=function(t,e){return{x:t.x*e,y:t.y*e}},i.componentMult=function(t,e){return{x:t.x*e.x,y:t.y*e.y}},i.div=function(t,e){return{x:t.x/e,y:t.y/e}},i.componentDiv=function(t,e){return{x:t.x/e.x,y:t.y/e.y}},i.perp=function(t,e){return{x:(e=!0===e?-1:1)*-t.y,y:e*t.x}},i.neg=function(t){return{x:-t.x,y:-t.y}},i.angle=function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)},i.angleBetween=function(t,e){var i=Math.atan2(t.y,t.x),n=Math.atan2(e.y,e.x)-i;return n>Math.PI?n-=Math.TWO_PI:n<-Math.PI&&(n+=Math.TWO_PI),n},i.toAngle=function(t){return Math.atan2(t.y,t.x)},i.rotateAroundPoint=function(t,e,n){var o=i.sub(t,e),s=i.rotate(o,n);return i.add(e,s)},i.scalarProjectOntoLine=function(t,e,n){var o=i.sub(e,t),s=i.normalise(o),a=i.sub(n,t);return i.dot(s,a)},i.scalarProjectOntoNormal=function(t,e){return i.dot(e,t)},i.vectorProjectOntoNormal=function(t,e){return i.mult(e,i.scalarProjectOntoNormal(t,e))},i.progressAlongLine=function(t,e,n){var o=i.sub(e,t),s=i.magnitude(o),a=i.normalise(o),r=i.sub(n,t);return i.dot(a,r)/s},i.closestPointToLine=function(t,e,n){var o=i.sub(e,t),s=i.magnitude(o),a=i.div(o,s),r=i.sub(n,t),h=i.dot(a,r);return h<0&&(h=0),h>s&&(h=s),i.add(t,i.mult(a,h))},i.distanceFromLine=function(t,e,n){var o=i.closestPointToLine(t,e,n);return i.magnitude(i.sub(n,o))},i.distanceFromLineSquared=function(t,e,n){var o=i.closestPointToLine(t,e,n);return i.magnitudeSquared(i.sub(n,o))},i.reflect=function(t,e){return i.sub(t,i.mult(i.mult(e,i.dot(t,e)),2))},i.floor=function(t){return i.create(Math.floor(t.x),Math.floor(t.y))},i.ceil=function(t){return i.create(Math.ceil(t.x),Math.ceil(t.y))},i.abs=function(t){return i.create(Math.abs(t.x),Math.abs(t.y))},i.equalTo=function(t,e,i){return Number.equals(t.x,e.x,i)&&Number.equals(t.y,e.y,i)},i.lessThan=function(t,e){return t.x<e.x&&e.y<e.y},i.lessEqualTo=function(t,e){return t.x<=e.x&&e.y<=e.y},i.greaterThan=function(t,e){return t.x>e.x&&e.y>e.y},i.greaterEqualTo=function(t,e){return t.x>=e.x&&e.y>=e.y},i.addTo=function(t,e){t.x+=e.x,t.y+=e.y},i.subtractFrom=function(t,e){t.x-=e.x,t.y-=e.y},i.getGlobalPos=function(t){return t?t.toGlobal(new PIXI.Point(0,0)):null},i.transformGlobalToChild=function(t,e){return t&&e?e.toLocal(t):t},i.transformTo=function(t,e){var n=i.getGlobalPos(t);return i.transformGlobalToChild(n,e)},i.Zero=i.create(0,0),i.Up=i.create(0,-1),i.Down=i.create(0,1),i.Left=i.create(-1,0),i.Right=i.create(1,0),namespace("framework").Vector=i},606:function(t,e){var i,n;n=(i=function(t){this._points=isDefined(t)?arrayify(t):[],this.isValid()||console.warn("BezierCurve: point list is invalid.")}).prototype,Object.defineProperty(n,"points",{set:function(t){this._points=isDefined(points)?arrayify(points):[],this.isValid()||console.warn("BezierCurve: provided point list is invalid.")},get:function(){return this._points}}),Object.defineProperty(n,"segmentCount",{get:function(){return this.isValid()?Math.floor(this._points.length/3):0}}),n.getPositionAt=function(t){if(!this.isValid())return null;if(t<=0)return this._points.first();if(t>=this.segmentCount)return this._points.last();var e=3*Math.floor(t),i=t-Math.floor(t),n=this._points[e],o=this._points[e+1],s=this._points[e+2],a=this._points[e+3],r=this._solve(n.x,o.x,s.x,a.x,i),h=this._solve(n.y,o.y,s.y,a.y,i);return isDefined(r)&&isDefined(h)?{x:r,y:h}:null},n.getPositionAtUnit=function(t){return this.getPositionAt(t*this.segmentCount)},n.getXAt=function(t,e){},n.getYAt=function(t,e){},n.isValid=function(){return this._points.length>=4&&this._points.length%3==1},n._solve=function(t,e,i,n,o){if(this.isValid()&&Math.isInRange(o,0,1)){var s=o*(n-3*i+3*e-t);return s+=3*i-6*e+3*t,s*=o,s+=3*e-3*t,t+(s*=o)}},namespace("framework").BezierCurve=i},607:function(t,e){var i,n,o;i=include("framework.BezierCurve"),n=function(t,e){i.call(this,t),this._subdivisionsPerSegment=e||20,this._precomputedLUT=[],this._precomputedRanges=[],this._createLUT()},i.prototype,o=extend(n,i),Object.defineProperty(o,"points",{set:function(t){this._points=isDefined(points)?arrayify(points):[],this.isValid()||console.warn("BezierCurve: provided point list is invalid."),this._createLUT()},get:function(){return this._points}}),Object.defineProperty(o,"precomputedLUT",{get:function(){return this._precomputedLUT}}),o.getXAt=function(t,e){if(this.isValid()){isDefined(e)||(e=!1);var i,n=-1,o={segmentIndex:-1,value:Number.POSITIVE_INFINITY},s={segmentIndex:-1,value:Number.NEGATIVE_INFINITY};for(i=0;i<this.segmentCount;i++){var a=this._getSegmentBounds(i);if(a&&(a.minY<o.value&&(o.segmentIndex=i,o.value=a.minY),a.maxY>s.value&&(s.segmentIndex=i,s.value=a.maxY),Math.isInRange(t,a.minY,a.maxY))){n=i;break}}-1===n&&(t<o.value?(n=o.segmentIndex,t=o.value):t>s.value&&(n=s.segmentIndex,t=s.value));var r=n*this._subdivisionsPerSegment,h=[];for(i=0;i<this._subdivisionsPerSegment;i++){var u=r+i,l=this._precomputedLUT[u],c=this._precomputedLUT[u+1],d=Math.inverseLerp(l.y,c.y,t);if(Math.isInRange(d,0,1)){var p=l.x+d*(c.x-l.x);if(e)return p;h.push(p)}}return h}},o.getYAt=function(t,e){if(this.isValid()){isDefined(e)||(e=!1);var i,n=-1,o={segmentIndex:-1,value:Number.POSITIVE_INFINITY},s={segmentIndex:-1,value:Number.NEGATIVE_INFINITY};for(i=0;i<this.segmentCount;i++){var a=this._getSegmentBounds(i);if(a&&(a.minX<o.value&&(o.segmentIndex=i,o.value=a.minX),a.maxX>s.value&&(s.segmentIndex=i,s.value=a.maxX),Math.isInRange(t,a.minX,a.maxX))){n=i;break}}-1===n&&(t<o.value?(n=o.segmentIndex,t=o.value):t>s.value&&(n=s.segmentIndex,t=s.value));var r=n*this._subdivisionsPerSegment,h=[];for(i=0;i<this._subdivisionsPerSegment;i++){var u=r+i,l=this._precomputedLUT[u],c=this._precomputedLUT[u+1],d=Math.inverseLerp(l.x,c.x,t);if(Math.isInRange(d,0,1)){var p=l.y+d*(c.y-l.y);if(e)return p;h.push(p)}}return h}},o._createLUT=function(){this._precomputedLUT.clear(),this._precomputedRanges.clear(),this._precomputedLUT.push(this.getPositionAt(0));for(var t=0;t<this.segmentCount;t++){for(var e=1;e<=this._subdivisionsPerSegment;e++){var i=t+e/this._subdivisionsPerSegment,n=this.getPositionAt(i);n?this._precomputedLUT.push(n):console.warn("Calculated curve position is invalid.")}var o=this._subdivisionsPerSegment*t,s=this._precomputedLUT.length,a=this._precomputedLUT.slice(o,s),r=this._createRangeFromPoints(a);this._precomputedRanges.push(r)}},o._getSegmentBounds=function(t){return Math.isInRange(t,0,this.segmentCount-1)?this._precomputedRanges[t]:null},o._createRangeFromPoints=function(t){return{minX:t.map((function(t){return t.x})).reduce((function(t,e){return Math.min(t,e)})),maxX:t.map((function(t){return t.x})).reduce((function(t,e){return Math.max(t,e)})),minY:t.map((function(t){return t.y})).reduce((function(t,e){return Math.min(t,e)})),maxY:t.map((function(t){return t.y})).reduce((function(t,e){return Math.max(t,e)}))}},namespace("framework").BezierCurveApprox=n},608:function(t,e){var i,n;n=(i=function(t,e){this._points=isDefined(t)?arrayify(t):[],this._precomputedRanges=[],this._usePrecomputedRanges=!!e,this.isValid()||console.warn("LinearCurve: point list is invalid."),this._usePrecomputedRanges&&this._precomputeRanges()}).prototype,Object.defineProperty(n,"points",{set:function(t){this._points=isDefined(points)?arrayify(points):[],this.isValid()||console.warn("LinearCurve: provided point list is invalid."),this._usePrecomputedRanges&&this._precomputeRanges()},get:function(){return this._points}}),Object.defineProperty(n,"segmentCount",{get:function(){return this.isValid()?this._points.length-1:0}}),n.getPositionAt=function(t){if(!this.isValid())return null;if(t<=0)return this._points.first();if(t>=this.segmentCount)return this._points.last();var e=Math.floor(t),i=t-Math.floor(t),n=this._points[e],o=this._points[e+1],s=this._solve(n.x,o.x,i),a=this._solve(n.y,o.y,i);return isDefined(s)&&isDefined(a)?{x:s,y:a}:null},n.getPositionAtUnit=function(t){return this.getPositionAt(t*this.segmentCount)},n.getXAt=function(t){if(this.isValid()){var e,i=-1,n={segmentIndex:-1,value:Number.POSITIVE_INFINITY},o={segmentIndex:-1,value:Number.NEGATIVE_INFINITY};for(e=0;e<this.segmentCount;e++){var s=this._getSegmentBounds(e);if(s&&(s.minY<n.value&&(n.segmentIndex=e,n.value=s.minY),s.maxY>o.value&&(o.segmentIndex=e,o.value=s.maxY),Math.isInRange(t,s.minY,s.maxY))){i=e;break}}-1===i&&(t<n.value?(i=n.segmentIndex,t=n.value):t>o.value&&(i=o.segmentIndex,t=o.value));var a=this._points[i],r=this._points[i+1],h=Math.inverseLerp(a.y,r.y,t);return a.x+h*(r.x-a.x)}},n.getYAt=function(t){if(this.isValid()){var e,i=-1,n={segmentIndex:-1,value:Number.POSITIVE_INFINITY},o={segmentIndex:-1,value:Number.NEGATIVE_INFINITY};for(e=0;e<this.segmentCount;e++){var s=this._getSegmentBounds(e);if(s&&(s.minX<n.value&&(n.segmentIndex=e,n.value=s.minX),s.maxX>o.value&&(o.segmentIndex=e,o.value=s.maxX),Math.isInRange(t,s.minX,s.maxX))){i=e;break}}-1===i&&(t<n.value?(i=n.segmentIndex,t=n.value):t>o.value&&(i=o.segmentIndex,t=o.value));var a=this._points[i],r=this._points[i+1],h=Math.inverseLerp(a.x,r.x,t);return a.y+h*(r.y-a.y)}},n.isValid=function(){return this._points.length>=2},n._solve=function(t,e,i){if(this.isValid()&&Math.isInRange(i,0,1))return Math.lerp(t,e,i)},n._precomputeRanges=function(){this._precomputedRanges.clear();for(var t=0;t<this.segmentCount;t++){var e=[this._points[t],this._points[t+1]],i=this._createRangeFromPoints(e);this._precomputedRanges.push(i)}},n._getSegmentBounds=function(t){return Math.isInRange(t,0,this.segmentCount-1)?this._usePrecomputedRanges?this._precomputedRanges[t]:this._createRangeFromPoints([this._points[t],this._points[t+1]]):null},n._createRangeFromPoints=function(t){return{minX:t.map((function(t){return t.x})).reduce((function(t,e){return Math.min(t,e)})),maxX:t.map((function(t){return t.x})).reduce((function(t,e){return Math.max(t,e)})),minY:t.map((function(t){return t.y})).reduce((function(t,e){return Math.min(t,e)})),maxY:t.map((function(t){return t.y})).reduce((function(t,e){return Math.max(t,e)}))}},namespace("framework").LinearCurve=i},609:function(t,e){var i,n,o;i=include("framework.Vector"),o=(n=function(t,e){this.min=t||0,this.max=e||0}).prototype,n.from=function(t){return t=t||new n(0,0),new n(t.min,t.max)},o.toVector=function(){return i.create(this.min,this.max)},o.lerp=function(t){return Math.lerp(this.min,this.max,t)},o.inverseLerp=function(t){return Math.inverseLerp(this.min,this.max,t)},o.wrap=function(t){return Math.wrap(t,this.min,this.max)},o.clamp=function(t){return Math.clamp(t,this.min,this.max)},o.isInRange=function(t){return Math.isInRange(t,this.min,this.max)},o.mapFrom=function(t,e,i){return Math.mapValueToRange(t,e,i,this.min,this.max)},o.mapFromOther=function(t,e){return e=e||new n(0,0),this.mapFrom(t,e.min,e.max)},namespace("framework").MinMax=n},610:function(t,e){var i,n;(n=(i=function(){}).prototype).reset=function(){},n.update=function(t,e){},namespace("framework").Action=i},611:function(t,e){var i;(i=i||{}).register=function(t,e){t&&e&&(isDefined(i[t])&&console.warn("Overriding Actions."+t+" factory method."),i[t]=e)},namespace("framework").Actions=i},612:function(t,e){var i,n,o,s;i=include("framework.Action"),n=include("framework.Actions"),o=function(t,e){i.call(this),this.func=t||function(t,e,i){t.finish()},this.loop=e,this.reset()},i.prototype,(s=extend(o,i)).reset=function(){this._hasExecutedOnce=!1,this._finished=!1},s.update=function(t,e){return this._finished?(this.reset(),!0):(!this.loop&&this._hasExecutedOnce||(this.func(this,t,e),this._hasExecutedOnce=!0),!1)},s.finish=function(){this._finished=!0},n.register("BlockingFunc",(function(t,e){return new o(t,e)})),namespace("framework").BlockingFuncAction=o},613:function(t,e){var i,n,o,s;i=include("framework.Action"),n=include("framework.Actions"),o=function(t){i.call(this),this.time=t,this.reset()},i.prototype,(s=extend(o,i)).reset=function(){this._time=this.time},s.update=function(t,e){return this._time-=t,this._time<=0&&(this.reset(),!0)},n.register("Delay",(function(t){return new o(t)})),namespace("framework").DelayAction=o},614:function(t,e){var i,n,o,s,a;i=include("framework.BlockingFuncAction"),n=include("framework.Actions"),o=function(t){this._voName=t,this._isPlaying=!1,i.call(this,this._playVO.bind(this),!1)},s=i.prototype,(a=extend(o,i)).reset=function(){s.reset.call(this),this._stopVO()},a._playVO=function(t,e,i){this._stopVO(),this._voName&&app.canPlayVO()?(this._isPlaying=!0,app.playVO(this._voName,function(){this._isPlaying=!1,t.finish()}.bind(this),!0)):t.finish()},a._stopVO=function(){this._thisVOIsPlaying()&&(app.stopVO(),this._isPlaying=!1)},a._thisVOIsPlaying=function(){return this._isPlaying&&app.canPlayVO()&&app.isPlayingVO(this._voName)},n.register("VO",(function(t){return new o(t)})),namespace("framework").VOAction=o},615:function(t,e){var i,n,o,s,a,r,h,u;i=include("framework.BlockingFuncAction"),n=include("framework.Actions"),o=include("TWEEN.Tween"),s=include("TWEEN.Easing"),a=include("TWEEN.Interpolation"),r=function(t,e){if(e=Object.extend({from:{},to:{},duration:1,easing:s.Linear.None,delayTime:void 0,repeat:void 0,repeatDelayTime:void 0,yoyo:!1,interpolationFunc:a.Linear,onStart:null,onUpdate:null,onComplete:null,onStop:null,endOnCancel:!1,resetValuesOnStop:!1},e),!t)throw"TweenAction: obj is null.";this._obj=t,this._tweenParams=e,this._tween=null,i.call(this,this._startTween.bind(this),!1)},h=i.prototype,u=extend(r,i),Object.defineProperty(u,"tween",{get:function(){return this._tween}}),u.reset=function(){h.reset.call(this),this._stopTween()},u._startTween=function(t,e,i){var n=this._tweenParams;this._stopTween(),this._tween=new o(this._obj),Object.extend(this._obj,n.from),this._tween.to(n.to,1e3*n.duration),this._tween.easing(n.easing).interpolation(n.interpolationFunc).onStop(function(e){this._tween=null,t.finish(),n.resetValuesOnStop&&Object.extend(this._obj,n.from),n.onStop&&n.onStop(e)}.bind(this)).onComplete(function(t){this._tween.stop(),n.onComplete&&n.onComplete(t)}.bind(this)),isDefined(n.delayTime)&&this._tween.delay(1e3*n.delayTime),isDefined(n.repeat)&&this._tween.repeat(n.repeat),isDefined(n.repeatDelayTime)&&this._tween.repeatDelay(1e3*n.repeatDelayTime),n.yoyo&&this._tween.yoyo(n.yoyo),n.onStart&&this._tween.onStart(n.onStart),n.onUpdate&&this._tween.onUpdate(n.onUpdate),this._tween.start()},u._stopTween=function(){this._tween&&(this._tweenParams.endOnCancel?this._tween.end():this._tween.stop())},n.register("Tween",(function(t,e){return new r(t,e)})),namespace("framework").TweenAction=r},616:function(t,e){var i,n,o,s,a;i=include("framework.BlockingFuncAction"),n=include("framework.Actions"),o=function(t,e,n){this._animatedSprite=t,this._animationName=e,this._params=n,this._isPlaying=!1,i.call(this,this._playAnimation.bind(this),!1)},s=i.prototype,(a=extend(o,i)).reset=function(){s.reset.call(this),this._stopAnimation()},a._playAnimation=function(t,e,i){this._stopAnimation(),this._animatedSprite&&this._animationName&&(this._isPlaying=!0,this._animatedSprite.play(this._animationName,this._params,function(){t.finish()}.bind(this)))},a._stopAnimation=function(){this._isPlaying&&this._animatedSprite&&(this._animatedSprite.stop(),this._animatedSprite.gotoAndStop(0),this._isPlaying=!1)},n.register("AnimateSprite",(function(t,e,i){return new o(t,e,i)})),namespace("framework").AnimateSpriteAction=o},617:function(t,e){var i,n,o,s;i=include("framework.Action"),n=include("framework.Actions"),o=function(t,e){i.call(this),this.action=t,this.loop=e,this.reset()},i.prototype,(s=extend(o,i)).reset=function(){this._hasExecutedOnce=!1,this._finished=!1},s.update=function(t,e){return!this.loop&&this._hasExecutedOnce||this.action.update(t,e)&&(this._hasExecutedOnce=!0,this.action.reset()),!!this._finished&&(this.reset(),!0)},s.finish=function(){this._finished=!0},n.register("Blocking",(function(t,e){return new o(t,e)})),namespace("framework").BlockingAction=o},618:function(t,e){var i,n,o,s,a;i=include("framework.Action"),n=include("framework.Actions"),o=include("framework.TweenAction"),s=function(t,e,n,s,a){if(i.call(this),!s)throw"CounterAction: onUpdate(val: number) callback is null.";this._startNum=t,this._endNum=e,this._duration=n,this.onUpdate=s;var r=this._createTweenParams(a);this._dummyObj={val:0},this._tweenAction=new o(this._dummyObj,r),this.reset()},i.prototype,a=extend(s,i),Object.defineProperty(a,"startNum",{get:function(){return this._startNum}}),Object.defineProperty(a,"endNum",{get:function(){return this._endNum}}),Object.defineProperty(a,"duration",{get:function(){return this._duration}}),Object.defineProperty(a,"tweenAction",{get:function(){return this._tweenAction}}),a.reset=function(){this.tweenAction.reset()},a.update=function(t,e){return!!this.tweenAction.update(t,e)&&(this.reset(),!0)},a._createTweenParams=function(t){var e=Object.extend({},t),i=e.onUpdate;return Object.extend(e,{from:{val:this._startNum},to:{val:this._endNum},duration:this._duration,onUpdate:function(t){i&&i(t),this.onUpdate&&this.onUpdate(t.val)}.bind(this)})},n.register("Counter",(function(t,e,i,n,o){return new s(t,e,i,n,o)})),namespace("framework").CounterAction=s},619:function(t,e){var i,n,o,s;i=include("framework.Action"),n=include("framework.Actions"),o=function(t){i.call(this),this.func=t||function(){},this.reset()},i.prototype,(s=extend(o,i)).reset=function(){},s.update=function(t,e){return this.func(),this.reset(),!0},n.register("Func",(function(t){return new o(t)})),namespace("framework").FuncAction=o},620:function(t,e){var i,n,o,s;i=include("framework.Action"),n=include("framework.Actions"),o=function(t,e){i.call(this),this.actions=t,this.endOnNextAction=e,this._endOnFirstComplete=e,this._originalActions=[],this._cacheActions(),this.reset()},i.prototype,(s=extend(o,i)).reset=function(){this.actions=this._originalActions.slice();for(var t=0;t<this.actions.length;t++)this.actions[t].reset();this.endOnNextAction=this._endOnFirstComplete},s.update=function(t,e){if(!this.actions||!this.actions.length)return!0;for(var i=!0,n=this.actions.length-1;n>=0;n--){var o=this.actions[n];if(o.update(t,e)){if(o.reset(),this.actions.splice(n,1),this.endOnNextAction)return!0}else i=!1}return i},s._cacheActions=function(){var t=this.actions||[];this._originalActions=t.slice()},n.register("Parallel",(function(t,e){return new o(t,e)})),namespace("framework").ParallelAction=o},621:function(t,e){var i,n,o,s;i=include("framework.Action"),n=include("framework.Actions"),o=function(t){if(i.call(this),!t)throw"ParticlesAction: particlesView is null.";this.particles=t,this._started=!1,this.reset()},i.prototype,(s=extend(o,i)).reset=function(){this.particles.enable=!1,this.particles.clear(),this._started=!1},s.update=function(t,e){return this._started||(this.particles.enable=!0,this._started=!0),this.particles.update(t),!!this._particlesFinished()&&(this.reset(),!0)},s._particlesFinished=function(){return!this._emitterIsActive()&&!this._hasActiveParticles()},s._emitterIsActive=function(){return this.particles.enable},s._hasActiveParticles=function(){return this.particles.emitter.particleCount>0},n.register("Particles",(function(t){return new o(t)})),namespace("framework").ParticlesAction=o},622:function(t,e){var i,n,o,s;i=include("framework.Action"),n=include("framework.Actions"),o=function(t,e,n){i.call(this),this.action=t,this.count=e,this.onLoopFinished=n||function(t){},this.reset()},i.prototype,(s=extend(o,i)).reset=function(){this._count=this.count,this._count||(this._count=1/0),this.action.reset()},s.update=function(t,e){return this.action.update(t,e)&&(this.action.reset(),this._count=this._count-1,this.onLoopFinished&&this.onLoopFinished(this._count)),this._count<=0&&(this.reset(),!0)},n.register("Repeat",(function(t,e,i){return new o(t,e,i)})),namespace("framework").RepeatAction=o},623:function(t,e){var i,n,o,s;i=include("framework.Action"),n=include("framework.Actions"),o=function(t){i.call(this),this.actions=t,this.reset()},i.prototype,(s=extend(o,i)).reset=function(){this._index=0;for(var t=0;t<this.actions.length;t++)this.actions[t].reset()},s.update=function(t,e){if(this._index>=this.actions.length)return!0;var i=this.actions[this._index];return i.update(t,e)&&(i.reset(),this._index++),!1},n.register("Sequence",(function(t){return new o(t)})),namespace("framework").SequenceAction=o},624:function(t,e){var i,n,o,s;i=include("framework.DelayAction"),n=include("framework.Actions"),o=function(t,e){i.call(this,0),this.minTime=t,this.maxTime=e,this.reset()},s=i.prototype,extend(o,i).reset=function(){var t=Math.randomFloat(0,1);this.time=Math.lerp(this.minTime,this.maxTime,t),s.reset.call(this)},n.register("RandomDelay",(function(t,e){return new o(t,e)})),namespace("framework").RandomDelayAction=o},625:function(t,e){var i,n,o,s;i=include("framework.Action"),n=include("framework.Actions"),o=function(t,e,n){var o=Object.extend({loop:!1,trackIndex:0,endOnCancel:!1,resetValuesOnStop:!1},n);if(i.call(this),!t)throw"SpineAction: spine is null.";this.spine=t,this.animName=e,this.loop=o.loop,this.trackIndex=o.trackIndex,this.endOnCancel=o.endOnCancel,this.resetValuesOnStop=o.resetValuesOnStop,this.running=!1,this._action=this._createAction(),this.reset()},i.prototype,(s=extend(o,i)).reset=function(){this._action.reset(),this._stopAnimation()},s.update=function(t,e){return this.running||(this.running=!0),!!this._action.update(t,e)&&(this._finished(),!0)},s._createAction=function(){var t=null;if(this.loop)t=n.Repeat(n.Func());else{var e=this.spine.state.data.skeletonData.findAnimation(this.animName);if(!e)throw"SpineAction: could not find animation for animName '"+this.animName+"'.";var i=e.duration;t=n.Delay(i)}return n.Parallel([n.Func(this._playAnimation.bind(this)),t])},s._playAnimation=function(){this.spine.state.setAnimation(this.trackIndex,this.animName,this.loop),this.running=!0},s._stopAnimation=function(){this.running&&(this.endOnCancel?this._endAnimation():this.resetValuesOnStop?this._resetAnimation():this._pauseAnimation(),this.running=!1)},s._endAnimation=function(){var t=this.spine.state.expandToIndex(this.trackIndex);t&&(t.trackTime=t.trackEnd,this.spine.update(0))},s._resetAnimation=function(){this.spine.state.setAnimation(this.trackIndex,this.animName,!1),this.spine.update(0),this.spine.state.clearTrack(this.trackIndex)},s._pauseAnimation=function(){this.spine.state.clearTrack(this.trackIndex)},s._finished=function(){this.running=!1,this._action.reset()},n.register("Spine",(function(t,e,i){return new o(t,e,i)})),namespace("framework").SpineAction=o},626:function(t,e){var i,n,o,s;i=include("PIXI.utils.EventEmitter"),n=include("framework.GeneralUtils"),o=function(t,e){i.call(this),this._id=n.generateGUIDString(),this.action=t,this._isCritical=e,this.reset()},i.prototype,(s=extend(o,i)).reset=function(){this._started=!1,this._ended=!1,this._active=!1,this._accumulatedDelta=0,this._accumulatedDeltaMS=0},s.update=function(t,e){if(this._started||(this.emit("start"),this._started=!0,this._active=!0),this._accumulatedDelta+=t,this._accumulatedDeltaMS+=e,this._isCritical||window.app.isPerformant()||!window.app.isAcceptablePerformanceDelay(this._accumulatedDeltaMS)){var i=this.action.update(this._accumulatedDelta,this._accumulatedDeltaMS);this._accumulatedDelta=0,this._accumulatedDeltaMS=0,i&&this._active&&this.end()}},s.end=function(){this._ended||(this._finish(),this.emit("end"))},s.cancel=function(){this._ended||(this._finish(),this.action.reset(),this.emit("cancel"))},s.isEnded=function(){return this._ended},s._finish=function(){this.reset(),this._ended=!0},namespace("framework").ActionInstance=o},627:function(t,e){var i,n,o;i=include("framework.ActionInstance"),(o=(n=function(){this.actions={},this._actionsToDelete=[],this._last=0}).prototype).update=function(t){var e;for(var i in t||0===t?e=1e3*t:t=(e=this._getDeltaMS())/1e3,this.actions)if(Object.prototype.hasOwnProperty.call(this.actions,i)){var n=this.actions[i];if(this._isQueuedForDeletion(n))continue;n.update(t,e),n.isEnded()&&this._actionsToDelete.push(n)}if(this._actionsToDelete.length){for(var o=0;o<this._actionsToDelete.length;o++)this._deleteAction(this._actionsToDelete[o]);this._actionsToDelete.length=0}},o.runAction=function(t,e){var n=new i(t,e);return n.update(0,0),this.actions[n._id]=n,n},o.cancelAction=function(t){t&&(t.cancel(),this._deleteAction(t))},o._getDeltaMS=function(){0===this._last&&(this._last=Date.now());var t=Date.now(),e=t-this._last;return this._last=t,e},o._isQueuedForDeletion=function(t){return-1!==this._actionsToDelete.indexOf(t)},o._deleteAction=function(t){t&&this.actions[t._id]&&delete this.actions[t._id]},namespace("framework").ActionManager=n},628:function(t,e){include("PIXI.Rectangle").prototype.overlapsRect=function(t){return!(this.right<t.left||t.right<this.left||this.bottom<t.top||t.bottom<this.top)}},629:function(t,e){var i,n;(n=(i=function(t,e){if(!t)throw"TransparencyHitArea: sprite is null.";this.sprite=t,this.alphaThreshold=isDefined(e)?e:2,this.textureData=null,this._init()}).prototype).contains=function(t,e){return 0!==Math.abs(this.sprite.width)&&0!==Math.abs(this.sprite.height)&&(t=this._translateXForAnchor(this.sprite,t,this.sprite.scale.x),e=this._translateYForAnchor(this.sprite,e,this.sprite.scale.y),!!this._isInRenderedBounds(t,e,this.sprite)&&!this.isTextureTransparentAt(Math.round(t),Math.round(e),this.sprite))},n.clone=function(){return new i(this.sprite)},n.isTextureTransparentAt=function(t,e,i){var n=4*(t+e*i.texture.width)+3;return this.textureData[n]<this.alphaThreshold},n.getTexture=function(){return this.sprite?this.sprite.texture.baseTexture.source:null},n._init=function(){if(!this.textureData){var t=this.getTexture();this.textureData=this._createTextureData(t)}},n._translateXForAnchor=function(t,e,i){return e+t.texture.width*t.anchor.x},n._translateYForAnchor=function(t,e,i){return e+t.texture.height*t.anchor.y},n._isInRenderedBounds=function(t,e,i){var n=Math.round(t),o=Math.round(e),s=i.texture.width,a=i.texture.height;return n>=0&&n<=s&&o>=0&&o<=a},n._createTextureData=function(t){var e=document.createElement("canvas"),i=this.sprite.texture,n=i.orig.x,o=i.orig.y,s=i.orig.width,a=i.orig.height;e.width=s,e.height=a;var r=e.getContext("2d");return r.clearRect(0,0,s,a),r.drawImage(t,n,o,s,a,0,0,s,a),r.getImageData(0,0,s,a).data},namespace("framework").TransparencyHitArea=i},630:function(t,e){!function(){var t=t||{};t.convertViewToBase64PNG=function(e,i){return t.convertViewToCanvas(e).toDataURL("image/png",i)},t.convertViewToBase64JPEG=function(e,i){return t.convertViewToCanvas(e).toDataURL("image/jpeg",i)},t.convertViewToImage=function(t){return app.getRenderer().extract.image(t)},t.convertViewToCanvas=function(t){return console.warn("ViewUtils.convertViewToCanvas() does not work in canvas mode."),app.getRenderer().extract.canvas(t)},t.getTextureDataFromView=function(t){return console.warn("ViewUtils.getTextureDataFromView() does not work in both WebGL and canvas mode."),app.getRenderer().extract.pixels(t)},t.downloadViewAsPNG=function(t,i,n,o){e(t,i=i||"output.png",n,o,"image/png")},t.downloadViewAsJPEG=function(t,i,n,o){e(t,i=i||"output.jpeg",n,o,"image/jpeg")};var e=function(e,i,n,o,s){t.convertViewToCanvas(e).toBlob((function(t){var o=document.createElement("a");document.body.append(o),o.download=i,o.href=URL.createObjectURL(t),o.click(),o.remove(),n&&n(e,i)}),s,o)};namespace("framework").ViewUtils=t}()},631:function(t,e){var i,n,o,s;i=include("PIXI.Container"),n=function(t){var e=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,predicate:this._sortZIndexAsc.bind(this)},t);if(i.call(this),this.name=e.name,this.position.x=e.position.x,this.position.y=e.position.y,this.rotation=e.rotation,this.scale.x=e.scale.x,this.scale.y=e.scale.y,this.pivot.x=e.pivot.x,this.pivot.y=e.pivot.y,this.alpha=e.alpha,this.interactive=e.isInteractive,this.visible=e.isVisible,this.zIndex=e.zIndex,this.predicate=e.predicate,e.mask){var n=app.createView(e.mask,null);n&&(this.addChild(n),this.mask=n)}this.viewConfig=e},o=i.prototype,(s=extend(n,i)).postInit=function(){this._postInitHelper(this)},s.getChildByName=function(t){return n.getChildByNameRecursive(this,t)},s.clear=function(){this.removeChildren()},s.addChild=function(t){var e=[].slice.call(arguments);e.forEach((function(t){var e=this.computeOrderedIndex(t);o.addChildAt.call(this,t,e)}),this)},s.addChildAt=function(t,e){if(!(!t||e<0||e>this.children.length)){var i=0;if(this.children.length>0){var n=Math.clamp(e-1,0,this.children.length-1),s=Math.clamp(e,0,this.children.length-1),a=this._getZIndex(this.children[n]),r=this._getZIndex(this.children[s])-a;i=Math.floor(a+.5*r)}t.zIndex=i,o.addChildAt.call(this,t,e)}},s.refreshOrder=function(){this.children.sort(this.predicate)},s.computeOrderedIndex=function(t){for(var e=0;e<this.children.length&&this.predicate(t,this.children[e])>=0;)e++;return e},s._postInitImpl=function(){},s._postInitHelper=function(t){if(t.children&&t.children.length&&t.children.length>0)for(var e=0;e<t.children.length;e++)this._postInitHelper(t.children[e]);"function"==typeof t._postInitImpl&&t._postInitImpl()},n.getChildByNameRecursive=function(t,e){if(t.children&&t.children.length&&t.children.length>0)for(var i=0;i<t.children.length;i++){var o=n.getChildByNameRecursive(t.children[i],e);if(o)return o}return t.name&&t.name===e?t:null},n.visibleChildren=function(t,e){if(t.children&&t.children.length&&t.children.length>0)for(var i=0;i<t.children.length;i++)t.children[i].visible=e,n.visibleChildren(t.children[i],e)},s._sortZIndexAsc=function(t,e){return this._getZIndex(t)-this._getZIndex(e)},s._getZIndex=function(t){return t&&t.zIndex?t.zIndex:0},namespace("framework").ContainerView=n},632:function(t,e){!function(){var t=include("PIXI.Graphics"),e=include("framework.ColourUtils"),i=function(i){var n=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",width:0,height:0},i);if(t.call(this),this.name=n.name,this.position.x=n.position.x,this.position.y=n.position.y,this.rotation=n.rotation,this.scale.x=n.scale.x,this.scale.y=n.scale.y,this.pivot.x=n.pivot.x,this.pivot.y=n.pivot.y,this.alpha=n.alpha,this.interactive=n.isInteractive,this.visible=n.isVisible,this.zIndex=n.zIndex,this.tint=e.colourToNumber(n.colourTint),this.width=n.width,this.height=n.height,n.mask){var o=app.createView(n.mask,null);o&&(this.addChild(o),this.mask=o)}this.viewConfig=n};t.prototype,extend(i,t);namespace("framework").GraphicsView=i}()},633:function(t,e){var i,n,o,s,a,r,h;i=include("PIXI.Sprite"),n=include("PIXI.Rectangle"),o=include("PIXI.BLEND_MODES"),s=include("framework.ColourUtils"),a=function(t){var e=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",textureName:null,texture:null,anchor:{x:0,y:0},skew:{x:0,y:0},blendMode:"NORMAL"},t),n=e.textureName?app.getCache(e.textureName):e.texture;if(i.call(this,n),this.name=e.name,this.position.x=e.position.x,this.position.y=e.position.y,this.rotation=e.rotation,this.scale.x=e.scale.x,this.scale.y=e.scale.y,this.pivot.x=e.pivot.x,this.pivot.y=e.pivot.y,this.alpha=e.alpha,this.interactive=e.isInteractive,this.visible=e.isVisible,this.zIndex=e.zIndex,this.tint=s.colourToNumber(e.colourTint),this.anchor.x=e.anchor.x,this.anchor.y=e.anchor.y,this.skew.x=e.skew.x,this.skew.y=e.skew.y,this.blendMode=o[e.blendMode],this.viewConfig=e,e.mask){var a=app.createView(e.mask,null);a&&(this.addChild(a),this.mask=a)}},r=i.prototype,(h=extend(a,i)).updateTexture=function(t){this.texture=t?app.getCache(t):null},h.postInit=function(){this._postInitImpl()},h.getLocalBounds=function(t){return t=t||new n,r.getLocalBounds.call(this,t),0===this.children.length&&(this._bounds.minY=this._texture.orig.height*-this._anchor._y,this._bounds.maxY=this._texture.orig.height*(1-this._anchor._y),t.height=this._bounds.maxY-this._bounds.minY),t},h._postInitImpl=function(){},namespace("framework").SpriteView=a},634:function(t,e){var i,n,o;i=include("framework.SpriteView"),n=function(t){var e=Object.extend({textureName:null,enabledTextureName:null,initiallyEnabled:!1},t);i.call(this,t),this._offTexture=e.textureName?app.getCache(e.textureName):null,this._onTexture=e.enabledTextureName?app.getCache(e.enabledTextureName):null,this._isOn=e.initiallyEnabled,this.texture=this._isOn?this._onTexture:this._offTexture},i.prototype,o=extend(n,i),Object.defineProperty(o,"enable",{set:function(t){this.texture=t?this._onTexture:this._offTexture,this._isOn=t},get:function(){return this._isOn}}),Object.defineProperty(o,"offTexture",{set:function(t){this._offTexture=t?app.getCache(t):null}}),Object.defineProperty(o,"onTexture",{set:function(t){this._onTexture=t?app.getCache(t):null}}),namespace("framework").BinarySpriteView=n},635:function(t,e){var i,n,o,s;i=include("framework.SpriteView"),include("framework.ColourUtils"),n=function(t){var e=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!0,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",textureName:null,texture:null,anchor:{x:0,y:0},blendMode:"NORMAL",labelTextView:null,isEnabled:!0,imageFrameNames:{up:"",over:"",down:"",disabled:""},transitionColorTints:null,clickSoundName:null},t);if(this.finalConfig=e,this._hasSprite()&&(this.imageFrames={up:app.getCache(e.imageFrameNames.up),over:app.getCache(e.imageFrameNames.over),down:app.getCache(e.imageFrameNames.down),disabled:app.getCache(e.imageFrameNames.disabled)}),this.transitionColorTints=e.transitionColorTints,i.call(this,e),this.buttonMode=!0,this._isEnabled=e.isEnabled,e.anchor&&this._hasSprite()){var n=this.imageFrames.up;this.texture=n}this.clickSoundName=e.clickSoundName,!this.clickSoundName||void 0!==this.clickSoundName.length&&0!==this.clickSoundName.length||(this.clickSoundName=null),this.on("pointerdown",this._onDown.bind(this)),this.on("pointerup",this._onUp.bind(this)),this.on("pointerover",this._onHover.bind(this)),this.on("pointerleave",this._onLeave.bind(this)),this.on("pointerout",this._onUpOutside.bind(this)),this.on("pointercancel",this._onUpOutside.bind(this))},o=i.prototype,s=extend(n,i),Object.defineProperty(s,"isEnabled",{set:function(t){this._isEnabled=t,this._hasSprite()&&(this.texture=t?this.imageFrames.up:this.imageFrames.disabled),this._isTransitionColor()&&(this.tint=t?this.transitionColorTints.up:this.transitionColorTints.disabled)},get:function(){return this._isEnabled}}),s._hasSprite=function(){return!!this.finalConfig.imageFrameNames.up},s._isTransitionColor=function(){return!!this.transitionColorTints},s._onUp=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.up),this._isTransitionColor()&&(this.tint=this.transitionColorTints.up),this.clickSoundName&&app.playSound()(this.clickSoundName))},s._onDown=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.down),this._isTransitionColor()&&(this.tint=this.transitionColorTints.down))},s._onUpOutside=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.up),this._isTransitionColor()&&(this.tint=this.transitionColorTints.up))},s._onHover=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.over),this._isTransitionColor()&&(this.tint=this.transitionColorTints.over))},s._onLeave=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.up),this._isTransitionColor()&&(this.tint=this.transitionColorTints.up))},s.destroy=function(){this.off("pointerdown",this._onDown),this.off("pointerup",this._onUp),this.off("pointerover",this._onHover),this.off("pointerleave",this._onLeave),this.off("pointerout",this._onUpOutside),this.off("pointercancel",this._onUpOutside),o.destroy.call(this,!1)},namespace("framework").ButtonView=n},636:function(t,e){var i,n,o,s;i=include("framework.GraphicsView"),n=include("framework.ColourUtils"),o=function(t){var e=Object.extend({fillColour:"#ffffff",fillAlpha:1,lineWidth:1,lineColour:"#ffffff",lineAlpha:1,isWireframe:!1,radius:10},t);i.call(this,e),this.fillColour=n.colourToNumber(e.fillColour),this.fillAlpha=e.fillAlpha,this.lineWidth=e.lineWidth,this.lineColour=n.colourToNumber(e.lineColour),this.lineAlpha=e.lineAlpha,this.isWireframe=e.isWireframe,this.radius=e.radius,this._fillCircle()},i.prototype,(s=extend(o,i))._fillCircle=function(){var t=this.isWireframe?0:this.fillColour,e=this.isWireframe?0:this.fillAlpha;this.clear().beginFill(t,e).lineStyle(this.lineWidth,this.lineColour,this.lineAlpha).drawCircle(0,0,this.radius).endFill()},s.setColor=function(t){this.fillColour=n.colourToNumber(t),this.lineColour=n.colourToNumber(t),this._fillCircle()},namespace("framework").CircleView=o},637:function(t,e){var i,n,o,s;i=include("PIXI.Graphics"),n=include("framework.ColourUtils"),o=function(t){var e=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",curveColour:"#ffffff",curveAlpha:1,curveWidth:1,curveIsVisible:!0,approximatedPointsColour:"#00ff00",approximatedPointsAlpha:1,approximatedPointsRadius:10,approximatedPointsAreVisible:!1,controlPointColour:"#ff0000",controlPointAlpha:1,controlPointRadius:10,controlPointsAreVisible:!1,tangentColour:"#0000ff",tangentAlpha:1,tangentWidth:1,tangentsAreVisible:!1,vertexList:[],precomputedLUT:[]},t);if(i.call(this),this.name=e.name,this.position.x=e.position.x,this.position.y=e.position.y,this.rotation=e.rotation,this.scale.x=e.scale.x,this.scale.y=e.scale.y,this.pivot.x=e.pivot.x,this.pivot.y=e.pivot.y,this.alpha=e.alpha,this.interactive=e.isInteractive,this.visible=e.isVisible,this.zIndex=e.zIndex,this.tint=n.colourToNumber(e.colourTint),this.curveColour=n.colourToNumber(e.curveColour),this.curveAlpha=e.curveAlpha,this.curveWidth=e.curveWidth,this.curveIsVisible=e.curveIsVisible,this.approximatedPointsColour=n.colourToNumber(e.approximatedPointsColour),this.approximatedPointsAlpha=e.approximatedPointsAlpha,this.approximatedPointsRadius=e.approximatedPointsRadius,this.approximatedPointsAreVisible=e.approximatedPointsAreVisible,this.controlPointColour=n.colourToNumber(e.controlPointColour),this.controlPointAlpha=e.controlPointAlpha,this.controlPointRadius=e.controlPointRadius,this.controlPointsAreVisible=e.controlPointsAreVisible,this.tangentColour=n.colourToNumber(e.tangentColour),this.tangentAlpha=e.tangentAlpha,this.tangentWidth=e.tangentWidth,this.tangentsAreVisible=e.tangentsAreVisible,this._curve=new i,this._approximatedPoints=new i,this._controlPoints=new i,this._tangents=new i,this._curve.visible=this.curveIsVisible,this._approximatedPoints.visible=this.approximatedPointsAreVisible,this._controlPoints.visible=this.controlPointsAreVisible,this._tangents.visible=this.tangentsAreVisible,this.addChild(this._curve),this.addChild(this._tangents),this.addChild(this._approximatedPoints),this.addChild(this._controlPoints),this._vertexList=e.vertexList,this._precomputedLUT=e.precomputedLUT,this._refreshCanvas(),e.mask){var o=app.createView(e.mask,null);o&&(this.addChild(o),this.mask=o)}},i.prototype,s=extend(o,i),Object.defineProperty(s,"vertexList",{set:function(t){this._vertexList=t,this._refreshCanvas()},get:function(){return this._vertexList}}),Object.defineProperty(s,"precomputedLUT",{set:function(t){this._precomputedLUT=t,this._refreshCanvas()},get:function(){return this._precomputedLUT}}),s._refreshCanvas=function(){if(this._curve.clear(),this._approximatedPoints.clear(),this._controlPoints.clear(),this._tangents.clear(),this._vertexList&&this._vertexList.length&&!(this._vertexList.length<4)&&this._vertexList.length%3==1){var t,e,i,n,o,s=Math.floor(this._vertexList.length/3);for(this._curve.lineStyle(this.curveWidth,this.curveColour,this.curveAlpha),this._curve.moveTo(this._vertexList[0].x,this._vertexList[0].y),t=0;t<s;t++)e=3*t,i=this._vertexList[e+1],n=this._vertexList[e+2],o=this._vertexList[e+3],this._curve.bezierCurveTo(i.x,i.y,n.x,n.y,o.x,o.y);if(this._precomputedLUT){for(this._approximatedPoints.beginFill(this.approximatedPointsColour,this.approximatedPointsAlpha),this._approximatedPoints.lineStyle(1,this.approximatedPointsColour,this.approximatedPointsAlpha),t=0;t<this._precomputedLUT.length;t++)this._approximatedPoints.drawCircle(this._precomputedLUT[t].x,this._precomputedLUT[t].y,this.approximatedPointsRadius);this._approximatedPoints.endFill()}for(this._tangents.lineStyle(this.tangentWidth,this.tangentColour,this.tangentAlpha),t=0;t<s;t++){e=3*t;var a=this._vertexList[e];i=this._vertexList[e+1],n=this._vertexList[e+2],o=this._vertexList[e+3],this._tangents.moveTo(a.x,a.y),this._tangents.lineTo(i.x,i.y),this._tangents.moveTo(n.x,n.y),this._tangents.lineTo(o.x,o.y)}for(this._controlPoints.beginFill(this.controlPointColour,this.controlPointAlpha),this._controlPoints.lineStyle(1,this.controlPointColour,this.controlPointAlpha),t=0;t<this._vertexList.length;t++)this._controlPoints.drawCircle(this._vertexList[t].x,this._vertexList[t].y,this.controlPointRadius);this._controlPoints.endFill()}},namespace("framework").CurveView=o},638:function(t,e){var i,n,o;i=include("framework.ContainerView"),n=function(t){var e=Object.extend({initiallyEnabled:!1},t);i.call(this,t),this.initiallyEnabled=e.initiallyEnabled},i.prototype,o=extend(n,i),Object.defineProperty(o,"enable",{set:function(t){this.front.visible=t},get:function(){return this.front.visible}}),o._postInitImpl=function(){if(this.back=this.getChildByName("back"),this.front=this.getChildByName("front"),!this.back)throw"DualSpriteView: could not find 'back' child.";if(!this.front)throw"DualSpriteView: could not find 'front' child.";this.back.visible=!0,this.front.visible=this.initiallyEnabled},namespace("framework").DualSpriteView=n},639:function(t,e){var i,n,o,s,a;i=include("framework.ContainerView"),n=include("PIXI.Rectangle"),o=include("PIXI.Sprite"),s=function(t){var e=Object.extend({kind:"",value:""},t);i.call(this,e),this._kind=e.kind,this._value=e.value,this._buildView(e)},i.prototype,a=extend(s,i),Object.defineProperty(a,"kind",{get:function(){return this._kind}}),Object.defineProperty(a,"value",{get:function(){return this._value}}),a.setHighlighted=function(t){this.children.forEach((function(e){e.setHighlighted(t)}))},a._buildView=function(t){switch(t.kind){case"alpha":this._buildTextButton(t,70,80,40);break;case"backspace":this._buildBackspaceButton(t,110,80);break;case"enter":case"done":this._buildTextButton(t,110,80,35);break;case"spacebar":this._buildTextButton(t,360,80,35);break;case"goToPunc":case"goToAlpha":this._buildTextButton(t,110,80,35);break;case"shiftOn":this._buildShiftButton(t,110,80,!0);break;case"shiftOff":this._buildShiftButton(t,110,80,!1);break;case"punc1":case"punc2":this._buildTextButton(t,110,80,35)}},a._buildTextButton=function(t,e,i,n){this.addChild(this._createShadowView(e,25,30)),this.addChild(this._createBackView(e,i)),this.addChild(this._createFrontTextView(t.value,n)),this.hitArea=this._createHitArea(e,i,10)},a._buildShiftButton=function(t,e,i,n){this.addChild(this._createShadowView(e,25,30)),this.addChild(this._createBackView(e,i)),this.addChild(this._createShiftView(n)),this.hitArea=this._createHitArea(e,i,10)},a._buildBackspaceButton=function(t,e,i){this.addChild(this._createShadowView(e,25,30)),this.addChild(this._createBackView(e,i)),this.addChild(this._createBackspaceView()),this.addChild(this._createFrontTextView("X",20,{x:10,y:0})),this.hitArea=this._createHitArea(e,i,10)},a._createShadowView=function(t,e,i){var n=app.createView({type:"rectangle",position:{x:0,y:i},fillColour:"#aaaaaa",lineWidth:0,width:t,height:e,cornerRadius:12.5});return n.setHighlighted=function(t){},n},a._createBackView=function(t,e){var i="#999999",n="#ffffff",o=function(i,n){return{type:"rectangle",isVisible:n,fillColour:i,lineWidth:0,width:t,height:e,cornerRadius:12.5}},s=app.createView(o(i,!1)),a=app.createView(o(n,!0)),r=app.createView({type:"container"});return r.addChild(s),r.addChild(a),r.setHighlighted=function(t){s.visible=t,a.visible=!t},r},a._createFrontTextView=function(t,e,i){var n="#ffffff",o="#444444";i=i||{x:0,y:0};var s=function(i){return{type:"text",initialText:t,style:{fontSize:e,fill:i,align:"center"}}},a=app.createView(s(n)),r=app.createView(s(o)),h=this._convertTextToSprite(a,!1),u=this._convertTextToSprite(r,!0),l=app.createView({type:"container"});return l.position.copy(i),l.addChild(h),l.addChild(u),a.destroy(!0),r.destroy(!0),l.setHighlighted=function(t){h.visible=t,u.visible=!t},l},a._createShiftView=function(t){var e=function(t,e,i){return{type:"primitive",isVisible:i,fillColour:t,lineColour:t,lineWidth:4,isWireframe:e,vertexList:[{x:0,y:-20},{x:20,y:0},{x:10,y:0},{x:10,y:20},{x:-10,y:20},{x:-10,y:0},{x:-20,y:0}]}},i=e("#444444",!1,t),n=e("#444444",!0,!0),o=i,s=t?i:n,a=app.createView(o),r=app.createView(s),h=app.createView({type:"container"});return h.addChild(a),h.addChild(r),h.setHighlighted=function(t){a.visible=t,r.visible=!t},h},a._createBackspaceView=function(){var t=function(t,e,i){return{type:"primitive",isVisible:i,fillColour:t,lineColour:t,lineWidth:4,isWireframe:e,vertexList:[{x:-30,y:0},{x:-10,y:-15},{x:30,y:-15},{x:30,y:15},{x:-10,y:15}]}},e=app.createView(t("#444444",!1,!1)),i=app.createView(t("#444444",!0,!0)),n=app.createView({type:"container"});return n.addChild(e),n.addChild(i),n.setHighlighted=function(t){e.visible=t,i.visible=!t},n},a._createHitArea=function(t,e,i){return new n(.5*-t-i,.5*-e-i,t+2*i,e+2*i)},a._convertTextToSprite=function(t,e){var i=app.getRenderer().generateTexture(t),n=new o(i);return n.anchor.set(.5),n.visible=e,n},namespace("framework").KeyboardKeyView=s},640:function(t,e){var n,o,s,a;n=include("PIXI.Graphics"),o=include("framework.ColourUtils"),s=function(t){var e=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",lineColour:"#ffffff",lineAlpha:1,lineWidth:1,lineIsVisible:!0,pointsColour:"#00ff00",pointsAlpha:1,pointsRadius:10,pointsAreVisible:!1,vertexList:[]},t);if(n.call(this),this.name=e.name,this.position.x=e.position.x,this.position.y=e.position.y,this.rotation=e.rotation,this.scale.x=e.scale.x,this.scale.y=e.scale.y,this.pivot.x=e.pivot.x,this.pivot.y=e.pivot.y,this.alpha=e.alpha,this.interactive=e.isInteractive,this.visible=e.isVisible,this.zIndex=e.zIndex,this.tint=o.colourToNumber(e.colourTint),this.lineColour=o.colourToNumber(e.lineColour),this.lineAlpha=e.lineAlpha,this.lineWidth=e.lineWidth,this.lineIsVisible=e.lineIsVisible,this.pointsColour=o.colourToNumber(e.pointsColour),this.pointsAlpha=e.pointsAlpha,this.pointsRadius=e.pointsRadius,this.pointsAreVisible=e.pointsAreVisible,this._line=new n,this._points=new n,this._line.visible=this.lineIsVisible,this._points.visible=this.pointsAreVisible,this.addChild(this._line),this.addChild(this._points),this._vertexList=e.vertexList,this._refreshCanvas(),e.mask){var i=app.createView(e.mask,null);i&&(this.addChild(i),this.mask=i)}},n.prototype,a=extend(s,n),Object.defineProperty(a,"vertexList",{set:function(t){this._vertexList=t,this._refreshCanvas()},get:function(){return this._vertexList}}),a._refreshCanvas=function(){if(this._line.clear(),this._points.clear(),this._vertexList&&this._vertexList.length&&!(this._vertexList.length<2)){for(this._line.lineStyle(this.lineWidth,this.lineColour,this.lineAlpha),this._line.moveTo(this._vertexList[0].x,this._vertexList[0].y),i=1;i<this._vertexList.length;i++)this._line.lineTo(this._vertexList[i].x,this._vertexList[i].y);for(this._points.beginFill(this.pointsColour,this.pointsAlpha),this._points.lineStyle(1,this.pointsColour,this.pointsAlpha),i=0;i<this._vertexList.length;i++)this._points.drawCircle(this._vertexList[i].x,this._vertexList[i].y,this.pointsRadius);this._points.endFill()}},namespace("framework").LineView=s},641:function(t,e){var i,n,o,s;i=include("framework.ContainerView"),n=function(t){var e=Object.extend({textureNames:[],config:null,configProp:"",initiallyEnabled:!1},t);i.call(this,t);var n=e.textureNames.map((function(t){return app.getCache(t)}));if(!ParticlesEmitter)throw"ParticlesView: need to include 'pixi-particles' library to use this class.";var o=e.config;o||(o=this._getEmitterConfig(e.configProp)),this._emitter=new ParticlesEmitter(this,n,o),this._emitter.emit=e.initiallyEnabled,this._emitter.autoUpdate=e.initiallyEnabled},o=i.prototype,(s=extend(n,i)).destroy=function(t){app.isWebGL()&&(app.getRenderer().plugins.sprite.sprites.length=0),o.destroy.call(this,t)},Object.defineProperty(s,"emitter",{get:function(){return this._emitter}}),Object.defineProperty(s,"enable",{set:function(t){this._emitter.emit=t},get:function(){return this._emitter.emit}}),s.update=function(t){this._emitter.update(t)},s.clear=function(){this._emitter.cleanup()},s._getEmitterConfig=function(t){return PIXI.loader.resources[t].data},namespace("framework").ParticlesView=n},642:function(t,e){var i,n,o;i=include("framework.ContainerView"),n=function(t){var e=Object.extend({front:{},back:null,radius:10,startAngle:0,anticlockwise:!1,fillInverse:!1,initialProgress:0},t);if(i.call(this,t),this._maskView=app.createView({type:"graphics"}),this._maskHolderView=app.createView({type:"container"}),this._frontView=app.createView(e.front),this._backView=e.back?app.createView(e.back):null,!this._maskView)throw"PieView: maskView is null.";if(!this._frontView)throw"PieView: frontView is null.";this._maskHolderView.scale.x*=Boolean.toSignedInt(!e.anticlockwise),this._maskView.rotation=-Math.HALF_PI+e.startAngle,this._radius=e.radius,this._startAngle=e.startAngle,this._fillInverse=e.fillInverse,this._frontView.mask=this._maskView,this._maskHolderView.addChild(this._maskView),this._backView&&this.addChild(this._backView),this.addChild(this._frontView),this.addChild(this._maskHolderView),this._updateProgress(e.initialProgress)},i.prototype,o=extend(n,i),Object.defineProperty(o,"progress",{set:function(t){this._updateProgress(t)},get:function(){return this._progress}}),Object.defineProperty(o,"mask",{get:function(){return this._maskView}}),Object.defineProperty(o,"front",{get:function(){return this._frontView}}),Object.defineProperty(o,"back",{get:function(){return this._backView}}),o._updateProgress=function(t){this._progress=Math.clamp(t,0,1);var e=this._progress*Math.TWO_PI;this._maskView.clear().beginFill(16777215,1).moveTo(0,0).arc(0,0,this._radius,0,e,this._fillInverse).closePath().endFill()},namespace("framework").PieView=n},643:function(t,e){var i,n,o,s;i=include("framework.GraphicsView"),n=include("framework.ColourUtils"),o=function(t){var e=Object.extend({fillColour:"#ffffff",fillAlpha:1,lineWidth:1,lineColour:"#ffffff",lineAlpha:1,isWireframe:!1,vertexList:[]},t);i.call(this,e),this.fillColour=n.colourToNumber(e.fillColour),this.fillAlpha=e.fillAlpha,this._lineWidth=e.lineWidth,this.lineColour=n.colourToNumber(e.lineColour),this.lineAlpha=e.lineAlpha,this.isWireframe=e.isWireframe,this._vertexList=e.vertexList,this._fillPrimitive()},i.prototype,s=extend(o,i),Object.defineProperty(s,"vertexList",{set:function(t){this._vertexList=t,this._fillPrimitive()},get:function(){return this._vertexList}}),s._fillPrimitive=function(){if(this.clear(),this._vertexList&&this._vertexList.length&&!(this._vertexList.length<3)){var t=this.isWireframe?0:this.fillColour,e=this.isWireframe?0:this.fillAlpha;this.beginFill(t,e),this.lineStyle(this._lineWidth,this.lineColour,this.lineAlpha),this.moveTo(this._vertexList[0].x,this._vertexList[0].y);for(var i=1;i<this._vertexList.length;i++)this.lineTo(this._vertexList[i].x,this._vertexList[i].y);this.lineTo(this._vertexList[0].x,this._vertexList[0].y),this.endFill()}},namespace("framework").PrimitiveView=o},644:function(t,e){!function(){var t=include("framework.GraphicsView"),e=include("framework.ColourUtils"),i=function(i){var n=Object.extend({anchor:{x:0,y:0},fillColour:"#ffffff",fillAlpha:1,lineWidth:0,lineColour:"#ffffff",lineAlpha:1,isWireframe:!1,width:10,height:10,cornerRadius:0},i);t.call(this,n),this._anchor={x:n.anchor.x,y:n.anchor.y},this.fillColour=e.colourToNumber(n.fillColour),this.fillAlpha=n.fillAlpha,this.lineWidth=n.lineWidth,this.lineColour=e.colourToNumber(n.lineColour),this.lineAlpha=n.lineAlpha,this.isWireframe=n.isWireframe,this.rectWidth=n.width,this.rectHeight=n.height,this.cornerRadius=n.cornerRadius,this._fillRoundedRect()};t.prototype;extend(i,t)._fillRoundedRect=function(){var t=this.isWireframe?0:this.fillColour,e=this.isWireframe?0:this.fillAlpha,i=-this.rectWidth*this._anchor.x,n=-this.rectHeight*this._anchor.y;this.clear().beginFill(t,e).lineStyle(this.lineWidth,this.lineColour,this.lineAlpha).drawRoundedRect(i,n,this.rectWidth,this.rectHeight,this.cornerRadius).endFill()},namespace("framework").RectangleView=i}()},645:function(t,e){!function(){var t=include("framework.SpriteView"),e=include("PIXI.RenderTexture"),i=function(i){i&&i.textureName&&(i.textureName,i.textureName=null);var n=Object.extend({width:512,height:512},i);t.call(this,i),this.width=n.width,this.height=n.height,this._renderTexture=e.create(this.width,this.height),this.texture=this._renderTexture};t.prototype;extend(i,t).takeScreenshot=function(t){app.getRenderer().render(t,this._renderTexture)},namespace("framework").ScreenshotView=i}()},646:function(t,e){var i,n,o,s;i=include("PIXI.spine.Spine",!1),n=include("framework.ColourUtils"),o=function(t){var e=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",spineName:null,spineData:null,skew:{x:0,y:0},autoUpdate:!0,skinName:null,attachments:[],animations:[]},t);if(!(o=e.spineData))var o=e.spineName?this._getCachedResource(e.spineName):null;if(i.call(this,o),this.name=e.name,this.position.x=e.position.x,this.position.y=e.position.y,this.rotation=e.rotation,this.scale.x=e.scale.x,this.scale.y=e.scale.y,this.pivot.x=e.pivot.x,this.pivot.y=e.pivot.y,this.alpha=e.alpha,this.interactive=e.isInteractive,this.visible=e.isVisible,this.zIndex=e.zIndex,this.tint=n.colourToNumber(e.colourTint),this.skew.x=e.skew.x,this.skew.y=e.skew.y,this.autoUpdate=e.autoUpdate,this.viewConfig=e,e.mask){var s=app.createView(e.mask,null);s&&(this.addChild(s),this.mask=s)}e.skinName&&this.skeleton.setSkinByName(e.skinName),isArray(e.attachments)&&e.attachments.forEach(function(t){this.skeleton.setAttachment(t.slotName,t.attachmentName)}.bind(this)),isArray(e.animations)&&e.animations.forEach(function(t,e){var i=0,n=t,o=!1,s=0;isObject(t)&&(i=t.trackIndex||e,n=t.animationName||"",o=t.loop||!1,s=t.startTime||0),this.state.setAnimation(i,n,o),this.state.tracks[i]&&s>0&&(this.state.tracks[i].trackTime=s)}.bind(this)),this.autoUpdate||this.update(0),this._accumulatedDeltaMS=0,this._internalUpdate=this.update,this.update=function(t){this._accumulatedDeltaMS+=t,(this.interactive||window.app.isPerformant()||!window.app.isAcceptablePerformanceDelay(this._accumulatedDeltaMS))&&(this._internalUpdate(this._accumulatedDeltaMS),this._accumulatedDeltaMS=0)}},i.prototype,(s=extend(o,i))._getCachedResource=function(t){var e=PIXI.loader.resources[t];if(e)return e.spineData;throw"no spine data available in default PIXI.loader.resources, please pass in spineData directly"},s.postInit=function(){this._postInitImpl()},s._postInitImpl=function(){},namespace("framework").SpineView=o},647:function(t,e){var i,n,o;i=include("framework.SpriteView"),n=function(t){var e=null,n=Object.extend({startingFrameName:null},t);n.textureName&&(e=t.textureName,n.textureName=null),i.call(this,n),this.spriteSheet=null,this.updateTexture(e),this.updateFrame(n.startingFrameName)},i.prototype,(o=extend(n,i)).updateTexture=function(t){this.spriteSheet=t?app.getCache(t):null},o.updateFrame=function(t){if(this.spriteSheet){var e=this.spriteSheet.getFrame(t);e&&(this.texture=e)}},namespace("framework").SpriteSheetView=n},648:function(t,e){var i,n,o,s;i=include("PIXI.Text"),n=include("framework.ColourUtils"),o=function(t){var e=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",anchor:{x:0,y:0},initialText:"",style:{fill:"#ffffff"}},t);if(isDefined(e.canvasModeColour)&&!app.isWebGL()&&(e.style.fill=e.canvasModeColour),i.call(this,e.initialText,e.style),this.name=e.name,this.position.x=e.position.x,this.position.y=e.position.y,this.rotation=e.rotation,this.scale.x=e.scale.x,this.scale.y=e.scale.y,this.pivot.x=e.pivot.x,this.pivot.y=e.pivot.y,this.alpha=e.alpha,this.interactive=e.isInteractive,this.visible=e.isVisible,this.zIndex=e.zIndex,this.tint=n.colourToNumber(e.colourTint),this.anchor.x=e.anchor.x,this.anchor.y=e.anchor.y,e.mask){var o=app.createView(e.mask,null);o&&(this.addChild(o),this.mask=o)}},s=i.prototype,extend(o,i).destroy=function(t){s.destroy.call(this,!0)},namespace("framework").TextView=o},649:function(t,e){!function(){var t=include("PIXI.extras.TilingSprite"),e=function(e){var i=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,textureName:null,anchor:{x:0,y:0},tileSize:{width:100,height:100},tilePosition:{x:0,y:0},tileScale:{x:1,y:1}},e),n=i.textureName?app.getCache(e.textureName):null;if(t.call(this,n,i.tileSize.width,i.tileSize.height),this.name=i.name,this.position.x=i.position.x,this.position.y=i.position.y,this.rotation=i.rotation,this.scale.x=i.scale.x,this.scale.y=i.scale.y,this.pivot.x=i.pivot.x,this.pivot.y=i.pivot.y,this.alpha=i.alpha,this.interactive=i.isInteractive,this.visible=i.isVisible,this.zIndex=i.zIndex,this.anchor.x=i.anchor.x,this.anchor.y=i.anchor.y,this.tilePosition.x=i.tilePosition.x,this.tilePosition.y=i.tilePosition.y,this.tileScale.x=i.tileScale.x,this.tileScale.y=i.tileScale.y,i.mask){var o=app.createView(i.mask,null);o&&(this.addChild(o),this.mask=o)}};t.prototype;extend(e,t).setMask=function(t){t&&(this.mask&&this.removeChild(this.mask),this.mask=t,this.addChild(this.mask))},namespace("framework").TileSpriteView=e}()},652:function(t,e){var i,n;n=(i=function(t){var e=Object.extend({isActive:!0},t);this._isActive=e.isActive,this._isInitialised=!1}).prototype,Object.defineProperty(n,"isActive",{set:function(t){this._isActive=t},get:function(){return this._isActive}}),Object.defineProperty(n,"isInitialised",{set:function(t){this._isInitialised=t},get:function(){return this._isInitialised}}),n.init=function(){this._isInitialised=!0},n.deinit=function(){this._isInitialised=!1},n.update=function(t){this._isActive&&this._updateImpl(t)},n._updateImpl=function(t){},namespace("framework").Script=i},653:function(t,e){var i,n,o,s;i=include("framework.Script"),n=function(t){var e=Object.extend({scripts:[],skipInitScripts:!1,initiallyIsRecursive:!0},t);i.call(this,e),this._scripts=[],this.addScripts(e.scripts.slice(),e.skipInitScripts),this.enable(this._isActive,e.initiallyIsRecursive)},o=i.prototype,s=extend(n,i),Object.defineProperty(s,"isActive",{set:function(t){this.enable(t,!0,!0)},get:function(){return this._isActive}}),Object.defineProperty(s,"scripts",{get:function(){return this._scripts}}),s.init=function(){o.init.call(this),this._scripts.forEach((function(t){t&&!t.isInitialised&&t.init()}),this)},s.deinit=function(){this.removeScripts(),o.deinit.call(this)},s.update=function(t){o.update.call(this,t),this._isActive&&this._scripts.forEach((function(e){e&&e.update(t)}),this)},s.enable=function(t,e,i){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),i&&(this._isActive=t),this._scripts.forEach((function(i){i&&(i.isActive=t,e&&isFunction(i.enable)&&i.enable(t,!0,!1))}),this)},s.addScript=function(t,e){this.addScripts(t,e)},s.addScripts=function(t,e){arrayify(t).filter((function(t){return!!t}),this).forEach((function(t){e||t.isInitialised||t.init(),this._scripts.contains(t)||this._scripts.push(t)}),this)},s.removeScript=function(t,e){this.removeScripts(t,e)},s.removeScripts=function(t,e){var i=t?arrayify(t):this._scripts;this._scripts.filter((function(t){return i.contains(t)}),this).forEach((function(t){!e&&t.isInitialised&&t.deinit(),this._scripts.remove(t)}),this)},s.addDebugScript=function(t,e){this.addDebugScripts(t,e)},s.addDebugScripts=function(t,e){app.isDebugMode()&&this.addScripts(t,e)},s.removeDebugScript=function(t,e){this.removeDebugScripts(t,e)},s.removeDebugScripts=function(t,e){app.isDebugMode()&&this.removeScripts(t,e)},namespace("framework").CompositeScript=n},654:function(t,e){var i,n;n=(i=function(t){var e=Object.extend({helper:null,view:null},t);this._helper=e.helper,this._view=e.view}).prototype,Object.defineProperty(n,"helper",{set:function(t){this._helper=t},get:function(){return this._helper}}),Object.defineProperty(n,"view",{set:function(t){this._view=t},get:function(){return this._view}}),n.captureState=function(){},n.updateState=function(t){},n.restoreState=function(){},namespace("framework").ViewTransformer=i},655:function(t,e){var i,n,o,s,a;i=include("framework.ViewTransformer"),n=include("framework.Vector"),o=include("framework.MinMax"),s=function(t){var e=Object.extend({clampXMovement:!1,clampYMovement:!1,xRange:null,yRange:null,returnToOldPosOnDrop:!1,onUpdateCallback:function(t,e){}},t);i.call(this,e),this._xMovementScale=e.clampXMovement?0:1,this._yMovementScale=e.clampYMovement?0:1,this._xRange=e.xRange?o.from(e.xRange):null,this._yRange=e.yRange?o.from(e.yRange):null,this._returnToOldPosOnDrop=e.returnToOldPosOnDrop,this._onUpdateCallback=e.onUpdateCallback,this._viewOldPosition=n.create(0,0)},i.prototype,a=extend(s,i),Object.defineProperty(a,"viewInitialPosition",{get:function(){return n.clone(this._viewOldPosition)}}),a.captureState=function(){this._viewOldPosition=n.clone(this._view.position)},a.updateState=function(t){var e=this._helper.getLocalMousePosition();e=n.sub(e,this._helper.mouseOffsetVec);var i=n.clone(this._view.position);this._view.position.x=Math.lerp(i.x,e.x,this._xMovementScale),this._view.position.y=Math.lerp(i.y,e.y,this._yMovementScale),this._xRange&&(this._view.position.x=this._xRange.clamp(this._view.position.x)),this._yRange&&(this._view.position.y=this._yRange.clamp(this._view.position.y)),this._onUpdateCallback&&this._onUpdateCallback(this._view,t)},a.restoreState=function(){this._returnToOldPosOnDrop&&(this._view.x=this._viewOldPosition.x,this._view.y=this._viewOldPosition.y)},namespace("framework").PositionViewTransformer=s},656:function(t,e){var i,n,o,s;i=include("framework.ViewTransformer"),n=include("framework.Vector"),o=function(t){var e=Object.extend({step:0,applyStepOnEndOnly:!1,onUpdateCallback:function(t,e){}},t);i.call(this,e),this._oldRotation=0,this._step=Math.abs(e.step),this._applyStepOnEndOnly=e.applyStepOnEndOnly,this._onUpdateCallback=e.onUpdateCallback},i.prototype,(s=extend(o,i)).captureState=function(){this._oldRotation=this._view.rotation,this._startAngle=n.toAngle(this._helper.mouseOffsetVec)},s.updateState=function(t){var e=this._view.position,i=this._helper.getLocalMousePosition(),o=n.sub(i,e),s=n.toAngle(o),a=this._oldRotation+(s-this._startAngle);a=this._applyModifiersToRotation(a,this._applyStepOnEndOnly),this._view.rotation=a,this._onUpdateCallback&&this._onUpdateCallback(this._view,t)},s.restoreState=function(){if(this._applyStepOnEndOnly){var t=this._applyModifiersToRotation(this._view.rotation);this._view.rotation=t}},s._applyModifiersToRotation=function(t,e){return this._step>0&&!e&&(t=t/this._step*this._step),t=Math.wrap(t,-Math.PI,Math.PI)},namespace("framework").RotationViewTransformer=o},657:function(t,e){!function(){var t=include("framework.ViewTransformer"),e=function(){t.call(this,{})};t.prototype,extend(e,t);namespace("framework").NullViewTransformer=e}()},658:function(t,e){var i,n,o;i=include("framework.CompositeScript"),n=function(t){var e=Object.extend({view:null},t);i.call(this,e),this._view=e.view},i.prototype,o=extend(n,i),Object.defineProperty(o,"view",{set:function(t){this._view=t},get:function(){return this._view}}),o.update=function(t){this._isActive&&(this._view&&this._updateImpl(t),this._scripts.forEach((function(e){e&&e.update(t)}),this))},namespace("framework").ViewScript=n},659:function(t,e){var i,n,o,s,a;i=include("framework.ViewScript"),n=include("framework.Vector"),o=function t(e){var o=Object.extend({horizontalAlignment:t.Alignment.NONE,verticalAlignment:t.Alignment.NONE},e);i.call(this,o),this._horizontalAlignment=o.horizontalAlignment,this._verticalAlignment=o.verticalAlignment,this._view&&(this._originalViewPos=n.clone(this._view.position))},s=i.prototype,a=extend(o,i),o.Alignment={NONE:"NONE",CENTRE:"CENTRE",LEFT:"LEFT",RIGHT:"RIGHT",TOP:"TOP",BOTTOM:"BOTTOM"},Object.defineProperty(a,"view",{set:function(t){this._view=t,this._view&&(this._originalViewPos=n.clone(this._view.position))},get:function(){return this._view}}),a.init=function(){s.init.call(this),this._windowResized()},a.deinit=function(){this._view&&this._view.transform&&(this._view.position.x=this._originalViewPos.x,this._view.position.y=this._originalViewPos.y),s.deinit.call(this)},a._updateImpl=function(t){this._windowResized()},a._windowResized=function(){this._view&&(this._alignX(),this._alignY())},a._alignX=function(){var t;this._horizontalAlignment==o.Alignment.LEFT?t=0:this._horizontalAlignment==o.Alignment.CENTRE?t=.5*app.getCanvasWidth():this._horizontalAlignment==o.Alignment.RIGHT&&(t=app.getCanvasWidth()),isDefined(t)&&(t=(this._view.parent||this._view).worldTransform.applyInverse({x:t,y:0}).x,this._view.position.x=t+this._originalViewPos.x)},a._alignY=function(){var t;this._verticalAlignment==o.Alignment.TOP?t=0:this._verticalAlignment==o.Alignment.CENTRE?t=.5*app.getCanvasHeight():this._verticalAlignment==o.Alignment.BOTTOM&&(t=app.getCanvasHeight()),isDefined(t)&&(t=(this._view.parent||this._view).worldTransform.applyInverse({x:0,y:t}).y,this._view.position.y=t+this._originalViewPos.y)},namespace("framework").AlignViewScript=o},660:function(t,e){var i,n,o,s;i=include("framework.ViewScript"),n=function t(e){var n=Object.extend({otherView:null,overlapTestFunc:null,overlapResultCallback:function(t,e,i,n){},isOverlappingCallback:function(t,e,i){},isNotOverlappingCallback:function(t,e,i){},overlapStartedCallback:function(t,e,i){},overlapEndedCallback:function(t,e,i){}},e);i.call(this,n),this._otherView=n.otherView,this._overlapTestFunc=n.overlapTestFunc||t.defaultOverlapTest,this._overlapResultCallback=n.overlapResultCallback,this._isOverlappingCallback=n.isOverlappingCallback,this._isNotOverlappingCallback=n.isNotOverlappingCallback,this._overlapStartedCallback=n.overlapStartedCallback,this._overlapEndedCallback=n.overlapEndedCallback},o=i.prototype,s=extend(n,i),Object.defineProperty(s,"isActive",{set:function(t){this._setActive(t)},get:function(){return this._isActive}}),Object.defineProperty(s,"otherView",{set:function(t){this._otherView=t},get:function(){return this._otherView}}),Object.defineProperty(s,"overlapTestFunc",{set:function(t){this._overlapTestFunc=t||n.defaultOverlapTest},get:function(){return this._overlapTestFunc}}),Object.defineProperty(s,"overlapResultCallback",{set:function(t){this._overlapResultCallback=t},get:function(){return this._overlapResultCallback}}),Object.defineProperty(s,"isOverlappingCallback",{set:function(t){this._isOverlappingCallback=t},get:function(){return this._isOverlappingCallback}}),Object.defineProperty(s,"isNotOverlappingCallback",{set:function(t){this._isNotOverlappingCallback=t},get:function(){return this._isNotOverlappingCallback}}),Object.defineProperty(s,"overlapStartedCallback",{set:function(t){this._overlapStartedCallback=t},get:function(){return this._overlapStartedCallback}}),Object.defineProperty(s,"overlapEndedCallback",{set:function(t){this._overlapEndedCallback=t},get:function(){return this._overlapEndedCallback}}),Object.defineProperty(s,"isOverlapping",{get:function(){return this._isOverlapping}}),n.defaultOverlapTest=function(t,e,i){var n=t.getBounds(),o=e.getBounds(),s=n.right>o.x&&n.x<o.right,a=n.bottom>o.y&&n.y<o.bottom;return s&&a},s.init=function(){o.init.call(this),this._isOverlapping=!1},s.deinit=function(){this._isOverlapping=!1,o.deinit.call(this)},s._updateImpl=function(t){if(this._otherView){var e={},i=this._testOverlap(this._view,this._otherView,e);this._updateOverlapState(i,e)}},s._setActive=function(t){this._isActive=t,this._isActive||this._updateOverlapState(!1,{})},s._testOverlap=function(t,e,i){var n=!1;return t&&e&&(n=this._overlapTestFunc(t,e,i)),n},s._updateOverlapState=function(t,e){this._isOverlapping!==t&&(this._isOverlapping=t,this._isOverlapping&&this._overlapStartedCallback?this._overlapStartedCallback(this._view,this._otherView,e):!this._isOverlapping&&this._overlapEndedCallback&&this._overlapEndedCallback(this._view,this._otherView,e)),t&&this._isOverlappingCallback?this._isOverlappingCallback(this._view,this._otherView,e):!t&&this._isNotOverlappingCallback&&this._isNotOverlappingCallback(this._view,this._otherView,e),this._overlapResultCallback&&this._overlapResultCallback(this._view,this._otherView,t,e)},namespace("framework").BoundsOverlapScript=n},661:function(t,e){var i,n,o,s;i=include("framework.ViewScript"),n=include("PIXI.Rectangle"),o=function(t){var e={x:480,y:360},o={x:-160,y:0},s=1280,a=720,r=Object.extend({worldView:null,playerView:null,playerRect:{x:e.x-10,y:e.y-10,width:20,bottom:20},cameraRect:{x:o.x,y:o.y,width:s,bottom:a},worldRect:{x:o.x,y:o.y,width:s,bottom:a}},t);if(r.view=r.playerView,i.call(this,r),!r.worldView)throw"CameraScript: worldView is null.";if(!r.playerView)throw"CameraScript: playerView is null.";this._worldView=r.worldView,this._playerView=this._view,this._playerRect=new n(r.playerRect),this._cameraRect=new n(r.cameraRect),this._worldRect=new n(r.worldRect)},i.prototype,s=extend(o,i),Object.defineProperty(s,"playerRect",{set:function(t){this._playerRect=new n(t)},get:function(t){return this._playerRect}}),Object.defineProperty(s,"cameraRect",{set:function(t){this._cameraRect=new n(t)},get:function(t){return this._cameraRect}}),Object.defineProperty(s,"worldRect",{set:function(t){this._worldRect=new n(t)},get:function(t){return this._worldRect}}),s._updateImpl=function(t){var e={left:this._playerView.position.x-this._playerRect.x,right:this._playerView.position.x-this._playerRect.right,top:this._playerView.position.y-this._playerRect.y,bottom:this._playerView.position.y-this._playerRect.bottom};if(this._worldView.pivot.x>e.left&&(this._worldView.pivot.x=e.left),this._worldView.pivot.x<e.right&&(this._worldView.pivot.x=e.right),this._worldView.pivot.y>e.top&&(this._worldView.pivot.y=e.top),this._worldView.pivot.y<e.bottom&&(this._worldView.pivot.y=e.bottom),this._worldRect){var i={left:this._worldRect.x-this._cameraRect.x,right:this._worldRect.right-this._cameraRect.right,top:this._worldRect.y-this._cameraRect.y,bottom:this._worldRect.bottom-this._cameraRect.bottom};this._worldView.pivot.x<i.left&&(this._worldView.pivot.x=i.left),this._worldView.pivot.x>i.right&&(this._worldView.pivot.x=i.right),this._worldView.pivot.y<i.top&&(this._worldView.pivot.y=i.top),this._worldView.pivot.y>i.bottom&&(this._worldView.pivot.y=i.bottom)}},namespace("framework").CameraScript=o},662:function(t,e){var i,n,o,s;i=include("framework.ViewScript"),n=function(t){var e=Object.extend({clickStartCallback:null,clickEndCallback:null,clickEndOutsideCallback:null,stopPropagation:!0,clickSoundName:null,allowAllClickEndEvents:!1},t);i.call(this,e),this._clickStartCallback=e.clickStartCallback,this._clickEndCallback=e.clickEndCallback,this._clickEndOutsideCallback=e.clickEndOutsideCallback,this._stopPropagation=e.stopPropagation,this._clickSoundName=e.clickSoundName,!this._clickSoundName||void 0!==this._clickSoundName.length&&0!==this._clickSoundName.length||(this._clickSoundName=null),this._viewInitiallyInteractive=this._view.interactive,this._onClickStartInternal=this._onClickStart.bind(this),this._onClickEndInternal=this._onClickEnd.bind(this),this._onClickEndOutsideInternal=this._onClickEndOutside.bind(this),this._isSelected=!1,this._allowAllClickEndEvents=e.allowAllClickEndEvents},o=i.prototype,s=extend(n,i),Object.defineProperty(s,"isActive",{set:function(t){this.enable(t,!0,!0),this._view&&(this._view.interactive=t,this._updateCursor())},get:function(){return this._isActive}}),Object.defineProperty(s,"isClickable",{set:function(t){this._isClickable=t},get:function(){return this._isClickable}}),Object.defineProperty(s,"isSelected",{get:function(){return this._isSelected}}),s.init=function(){o.init.call(this),this._view.interactive=this.isActive,this._isSelected=!1,this._isClickable=this.isActive,this._updateCursor(),this._view.on("mousedown",this._onClickStartInternal),this._view.on("touchstart",this._onClickStartInternal),this._view.on("touchend",this._onClickEndInternal),this._view.on("mouseup",this._onClickEndInternal),this._view.on("mouseupoutside",this._onClickEndOutsideInternal),this._view.on("touchendoutside",this._onClickEndOutsideInternal)},s._updateCursor=function(){null!=this._view.buttonMode?this._view.buttonMode=this.isActive:this._view.hasOwnProperty("cursor")&&(this._view.cursor=this.isActive?"pointer":null)},s.deinit=function(){this._view.removeListener("touchendoutside",this._onClickEndOutsideInternal),this._view.removeListener("mouseupoutside",this._onClickEndOutsideInternal),this._view.removeListener("mouseup",this._onClickEndInternal),this._view.removeListener("touchend",this._onClickEndInternal),this._view.removeListener("touchstart",this._onClickStartInternal),this._view.removeListener("mousedown",this._onClickStartInternal),this._isClickable=!1,this._isSelected=!1,this._view.interactive=this._viewInitiallyInteractive,this._updateCursor(),o.deinit.call(this)},s._onClickStart=function(t){this.isActive&&this.isClickable&&(this._isSelected=!0,this._clickStartCallback&&this._clickStartCallback(t,this._view),this._stopPropagation&&t.stopPropagation())},s._onClickEnd=function(t){this.isActive&&this.isClickable&&(this._isSelected||this._allowAllClickEndEvents)&&(this._isSelected=!1,this._clickSoundName&&app.playSound(this._clickSoundName),this._stopPropagation&&t.stopPropagation(),this._clickEndCallback&&this._clickEndCallback(t,this._view))},s._onClickEndOutside=function(t){this.isActive&&this.isClickable&&(this._isSelected=!1,this._clickEndOutsideCallback&&this._clickEndOutsideCallback(t,this._view),this._stopPropagation&&t.stopPropagation())},namespace("framework").ClickScript=n},663:function(t,e){var i,n,o,s;i=include("framework.ViewScript"),n=include("framework.Vector"),o=function(t){var e=Object.extend({targetView:null},t);i.call(this,e),this._targetView=e.targetView},i.prototype,s=extend(o,i),Object.defineProperty(s,"targetView",{set:function(t){this._targetView=t},get:function(){return this._targetView}}),s._updateImpl=function(t){if(this._targetView){var e=n.transformTo(this._targetView,this._view.parent),i=n.createFromPoints(this._view.position,e);this._view.rotation=n.toAngle(i)}},namespace("framework").FaceViewScript=o},664:function(t,e){var i,n,o,s;i=include("framework.ViewScript"),n=function(t){var e=Object.extend({hoverStartCallback:null,hoverEndCallback:null,hoverCallback:null,stopPropagation:!0},t);i.call(this,e),this._hoverStartCallback=e.hoverStartCallback,this._hoverEndCallback=e.hoverEndCallback,this._hoverCallback=e.hoverCallback,this._stopPropagation=e.stopPropagation,this._viewInitiallyInteractive=this._view.interactive,this._onHoverStartInternal=this._onHoverStart.bind(this),this._onHoverEndInternal=this._onHoverEnd.bind(this)},o=i.prototype,(s=extend(n,i)).init=function(){o.init.call(this),this._view.interactive=!0,this._view.on("mouseover",this._onHoverStartInternal),this._view.on("mouseout",this._onHoverEndInternal)},s.deinit=function(){this._view.removeListener("mouseout",this._onHoverEndInternal),this._view.removeListener("mouseover",this._onHoverStartInternal),this._view.interactive=this._viewInitiallyInteractive,o.deinit.call(this)},s._onHoverStart=function(t){this.isActive&&(this._hoverStartCallback&&this._hoverStartCallback(t,this._view),this._hoverCallback&&this._hoverCallback(t,this._view,!0),this._stopPropagation&&t.stopPropagation())},s._onHoverEnd=function(t){this.isActive&&(this._hoverEndCallback&&this._hoverEndCallback(t,this._view),this._hoverCallback&&this._hoverCallback(t,this._view,!1),this._stopPropagation&&t.stopPropagation())},namespace("framework").HoverScript=n},665:function(t,e){var i,n,o,s,a;i=include("framework.DragViewScript"),include("framework.WindowUtils"),n=include("framework.Vector"),o=function(t){var e=Object.extend({shouldSnap:!1},t);i.call(this,e),this._shouldSnap=e.shouldSnap,this._firstClickOccurring=!1},s=i.prototype,(a=extend(o,i)).init=function(){s.init.call(this),this._firstClickOccurring=!1},a.deinit=function(){s.deinit.call(this)},a.startDrag=function(t){this._viewIsSelected=!1,this._onViewMouseUp(t)},a.stopDrag=function(t){this._viewIsSelected=!0,this._onViewMouseUp(t)},a._onViewMouseDown=function(t){this.isActive&&console.log("Mouse down.")},a._onViewMouseUp=function(t){if(this.isActive)if(console.log("Mouse up."),this._viewIsSelected)this._endDrag(t);else{if(this._shouldSnap){var e=n.transformGlobalToChild(t.data.global,this._view.parent);this._view.position.x=e.x,this._view.position.y=e.y}this._beginDrag(t)}},a._onViewMouseUpOutside=function(t){this.isActive&&(console.log("Mouse up outside."),this._viewIsSelected&&this._endDrag(t))},a._onViewMouseMove=function(t){this.isActive&&this._viewIsSelected&&this._dragMove(t)},a._onViewMouseMoveOutOfWindow=function(t){this.isActive&&this._viewIsSelected&&console.log("Mouse up outside of window.")},namespace("framework").StickyDragViewScript=o},666:function(t,e,i){"use strict";i.r(e);i(191);var n=i(12),o=i(139),s=(i(587),i(291));window.PIXI=n,window.TWEEN=o,window.Spine=n.spine.Spine,window.ParticlesEmitter=s.a;i(588),i(589),i(590),i(591),i(592),i(593);var a=i(140),r=i.n(a);!function(t){t.extend=function(e,i){if(i){"string"==typeof i&&(i=t.include(i));var n=i.prototype;e.prototype=Object.create(n),Object.defineProperty(e.prototype,"__parent",{configurable:!0,writable:!0,value:n})}return Object.defineProperty(e.prototype,"constructor",{configurable:!0,writable:!0,value:e}),e.extend=function(i){return t.extend(i,e)},e.prototype};t.mixin=function(e,i){if(!i)throw"Did not supply a valid mixin class";if("string"==typeof i&&(i=t.include(i)),!i.prototype)throw"The mixin class does not have a valid protoype";var n=i.prototype;for(var o in n){var s=Object.getOwnPropertyDescriptor(n,o);s?Object.defineProperty(e,o,s):e[o]=n[o]}return i.apply(e,Array.prototype.slice.call(arguments,2)),e};t.include=function(e,i){var n=e.split("."),o=t,s="";i=void 0===i||!!i;for(var a=0,r=n.length;a<r;a++){if(!o[s=n[a]]){if(!i)return null;throw"Unable to include '"+e+"' because the code is not included or the class needs to loaded sooner."}o=o[s]}return o};t.namespace=function(e){for(var i=e.split("."),n=t,o="",s=0,a=i.length;s<a;s++)n[o=i[s]]=n[o]||{},n=n[o];return n};t.instanceOf=function(t,e){if(!t)return!1;if(t instanceof e)return!0;var i,n=!0,o=t.constructor.prototype,s=e.prototype;for(i in s)n=n&&i in o;return!!i&&n};t.isDefined=function(t){return void 0!==t};t.isFunction=function(t){return"function"===r()(t)};t.isNumber=function(t){return"number"==typeof t};t.isString=function(t){return"string"==typeof t};t.isBoolean=function(t){return"boolean"==typeof t};t.isObject=function(t){return null!==t&&"object"===r()(t)};var e=function(t){return t||null};t.nullify=e;t.getProperty=function(t,i,n){n=!!n;var o="Cannot get property '"+i+"'.",s=t;if(s)for(var a=i?i.split("."):[],r=0;r<a.length;r++){var h=a[r];if(!(s=h?s[h]:null))break}if(!s&&n)throw o;return e(s)},t.EmptyFunction=function(){},t.TrueFunction=function(){return!0},t.FalseFunction=function(){return!1},t.NullFunction=function(){return null}}(window);i(594),i(595),i(596),i(597),i(598),i(599),i(600),i(601),i(602),i(603),i(604),i(605),i(606),i(607),i(608),i(609),i(610),i(611),i(612),i(613),i(614),i(615),i(616),i(617),i(618),i(619),i(620),i(621),i(622),i(623),i(624),i(625),i(626),i(627),i(628),i(629),i(630),i(631),i(632),i(633),i(634),i(635),i(636),i(637),i(638),i(639),i(640),i(641),i(642),i(643),i(644),i(645),i(646),i(647),i(648),i(649),i(85);var h,u,l,c,d,p,v,f,m,y,g,w,b,k,S,_,C,P,x,B,I,A,T,N=i(2),L=i.n(N),M=i(3),D=i.n(M),V=i(5),O=i.n(V),E=i(1),R=i.n(E),F=i(4),U=i.n(F),H=i(8),W=i.n(H),q=i(6),K=i.n(q),G=i(0),j=i.n(G),z=(i(24),i(28),i(25),function(t){function e(t){var i;return L()(this,e),i=O()(this,U()(e).call(this,PIXI.utils.TextureCache[t.textureName],t.insetLeft,t.insetTop,t.insetRight,t.insetBottom)),j()(R()(i),"anchor",new n.Point(0,0)),j()(R()(i),"name",""),i.name=t.name,i.position=t.position,i.anchor=t.anchor,t.anchor&&t.height&&(i.position.x=i.position.x-t.width*t.anchor.x,i.position.y=i.position.y-t.height*t.anchor.y),i.width=t.width,i.height=t.height,i}return K()(e,t),D()(e,[{key:"getCache",value:function(t){return PIXI.utils.TextureCache[t]}},{key:"centerChildren",value:function(t){var e=this,i=t||this;i.children&&i.children.forEach((function(t){var i=t.anchor;i&&(t.position.x=t.position.x+t.parent.width*i.x,t.position.y=t.position.y+t.parent.height*i.y,e.centerChildren(t))}))}}]),e}(PIXI.mesh.NineSlicePlane)),X=function(t){function e(t){var i;return L()(this,e),i=O()(this,U()(e).call(this,t)),j()(R()(i),"imageFrames",{}),j()(R()(i),"transitionColorTints",{}),j()(R()(i),"anchor",new n.Point(0,0)),j()(R()(i),"isTransitionColor",(function(){return!!this.transitionColorTints})),i.imageFrames={up:i.getCache(t.imageFrameNames.up),over:i.getCache(t.imageFrameNames.over),down:i.getCache(t.imageFrameNames.down),disabled:i.getCache(t.imageFrameNames.disabled)},i.transitionColorTints=t.transitionColorTints,i.interactive=!0,i.buttonMode=!0,i.texture=i.imageFrames.up,t.anchor&&(i.anchor=t.anchor),i.on("pointerdown",i.onDown.bind(R()(i))),i.on("pointerup",i.onUp.bind(R()(i))),i.on("pointerover",i.onHover.bind(R()(i))),i.on("pointerleave",i.onLeave.bind(R()(i))),i.on("pointerout",i.onUpOutside.bind(R()(i))),i.on("pointercancel",i.onUpOutside.bind(R()(i))),i}return K()(e,t),D()(e,[{key:"hasSprite",value:function(){return!!this.imageFrames.up}},{key:"onUp",value:function(t){this.isEnabled&&(this.hasSprite()&&(this.texture=this.imageFrames.up),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.up)))}},{key:"onDown",value:function(t){this.isEnabled&&(this.hasSprite()&&(this.texture=this.imageFrames.down),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.down)))}},{key:"onUpOutside",value:function(t){this.isEnabled&&(this.hasSprite()&&(this.texture=this.imageFrames.up),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.up)))}},{key:"onHover",value:function(t){this.isEnabled&&(this.hasSprite()&&(this.texture=this.imageFrames.over),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.over)))}},{key:"onLeave",value:function(t){this.isEnabled&&(this.hasSprite()&&(this.texture=this.imageFrames.up),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.up)))}},{key:"destroy",value:function(){this.off("pointerdown",this.onDown),this.off("pointerup",this.onUp),this.off("pointerover",this.onHover),this.off("pointerleave",this.onLeave),this.off("pointerout",this.onUpOutside),this.off("pointercancel",this.onUpOutside),W()(U()(e.prototype),"destroy",this).call(this,!1)}},{key:"isEnabled",get:function(){return this.buttonMode},set:function(t){this.buttonMode=t}}]),e}(z),Y=function(t){function e(t){var i;return L()(this,e),i=O()(this,U()(e).call(this,t.text,t.font)),j()(R()(i),"anchor",new n.Point(0,0)),j()(R()(i),"name",""),j()(R()(i),"viewConfig",void 0),i.viewConfig=t,i.name=t.name,i.position=t.position,i.anchor=t.anchor,i.maxWidth=t.maxWidth,i}return K()(e,t),D()(e,[{key:"centerInParent",value:function(){this.anchor&&(this.position.x=this.parent.width*this.anchor.x,this.position.y=this.parent.height*this.anchor.y)}},{key:"string",get:function(){return this.text},set:function(t){this.text=t}},{key:"node",get:function(){return this}}]),e}(PIXI.extras.BitmapText);h=include("framework.BaseFactory"),u=include("framework.ContainerView"),l=include("framework.SpriteView"),c=include("framework.SpriteSheetView"),d=include("framework.ParticlesView"),p=include("framework.SpineView"),v=include("framework.TileSpriteView"),f=include("framework.ScreenshotView"),m=include("framework.ButtonView"),y=include("framework.GraphicsView"),g=include("framework.PrimitiveView"),w=include("framework.CircleView"),b=include("framework.RectangleView"),k=include("framework.LineView"),S=include("framework.CurveView"),_=include("framework.BinarySpriteView"),C=include("framework.DualSpriteView"),P=include("framework.PieView"),x=include("framework.KeyboardKeyView"),B=include("framework.ColourUtils"),I=include("PIXI.Graphics"),A=function(){h.call(this),this.registerCreators([{creatorKey:"container",creatorFunc:this.defaultTreeCreator(u).bind(this)},{creatorKey:"sprite",creatorFunc:this.defaultTreeCreator(l).bind(this)},{creatorKey:"sliceSprite",creatorFunc:this._createSliceSprite().bind(this)},{creatorKey:"spriteSheet",creatorFunc:this.defaultTreeCreator(c).bind(this)},{creatorKey:"particles",creatorFunc:this.defaultTreeCreator(d).bind(this)},{creatorKey:"spine",creatorFunc:this.defaultTreeCreator(p).bind(this)},{creatorKey:"tileSprite",creatorFunc:this.defaultTreeCreator(v).bind(this)},{creatorKey:"screenshot",creatorFunc:this.defaultTreeCreator(f).bind(this)},{creatorKey:"text",creatorFunc:this._createBitmapText().bind(this)},{creatorKey:"button",creatorFunc:this.defaultTreeCreator(m).bind(this)},{creatorKey:"sliceButton",creatorFunc:this._createSliceButton().bind(this)},{creatorKey:"graphics",creatorFunc:this.defaultTreeCreator(y).bind(this)},{creatorKey:"primitive",creatorFunc:this.defaultTreeCreator(g).bind(this)},{creatorKey:"circle",creatorFunc:this.defaultTreeCreator(w).bind(this)},{creatorKey:"rectangle",creatorFunc:this.defaultTreeCreator(b).bind(this)},{creatorKey:"line",creatorFunc:this.defaultTreeCreator(k).bind(this)},{creatorKey:"curve",creatorFunc:this.defaultTreeCreator(S).bind(this)},{creatorKey:"binarySprite",creatorFunc:this.defaultTreeCreator(_).bind(this)},{creatorKey:"dualSprite",creatorFunc:this.defaultTreeCreator(C).bind(this)},{creatorKey:"pie",creatorFunc:this.defaultTreeCreator(P).bind(this)},{creatorKey:"keyboardKey",creatorFunc:this.defaultTreeCreator(x).bind(this)},{creatorKey:"circleMask",creatorFunc:this._circleMaskViewCreator.bind(this)},{creatorKey:"polygonMask",creatorFunc:this._polygonMaskViewCreator.bind(this)},{creatorKey:"polygonCollider",creatorFunc:this._polygonViewCreator().bind(this)},{creatorKey:"circleCollider",creatorFunc:this._circleViewCreator().bind(this)},{creatorKey:"boxCollider",creatorFunc:this._boxViewCreator().bind(this)},{creatorKey:"prefab",creatorFunc:this._prefabViewCreator.bind(this)}])},h.prototype,(T=extend(A,h)).create=function(t){var e=null;if(t&&isObject(t)&&t.type){var i=this._creators[t.type];if(i){if(t.viewConfig)throw"ViewFactory: 'viewConfig' property of config is deprecated (just remove it).";e=i(t,this.create.bind(this))}}return e&&isFunction(e.postInit)&&e.postInit(),e},T.createChildren=function(t,e,i){if(t){var n=Object.values(t).filter((function(t){return t&&(i||!t.ignore)}),this).map((function(t){return this.create(t)}),this).filter((function(t){return!!t}));return e&&e.addChild.apply(e,n),n}},T.createViewFromConfig=function(t,e){throw"ViewFactory: createViewFromConfig() is deprecated. Use create() instead."},T.traverseChildren=function(t,e,i,n){t&&e&&e.children&&e.children.length&&e.children.length>0&&e.children.forEach((function(e){var o=i(e,n);o&&t.addChild(o)}))},T.defaultTreeCreator=function(t){return function(e,i,n){var o=new t(e);return this.traverseChildren(o,e,i,n),o}},T._circleMaskViewCreator=function(t,e){if(!t)return null;var i=(new I).beginFill(0,1).drawCircle(t.x,t.y,t.radius);return i.name=t.name||"",i},T._polygonMaskViewCreator=function(t,e){if(!t||!t.pointNumberList)return null;var i=(new I).beginFill(0,1).drawPolygon(t.pointNumberList);return i.name=t.name||"",i},T._polygonViewCreator=function(){return function(t,e,i){if(!t||!t.points)return null;var n=t.points.map((function(t){return new PIXI.Point(t.x,-1*t.y)})),o=new PIXI.Polygon(n),s=new y(t).beginFill(16711680,.3).drawPolygon(o).endFill();return s.hitArea=o,s.name=t.name||"",s.alpha=0,this.traverseChildren(s,t,e,i),s}},T._boxViewCreator=function(){return function(t,e,i){if(!t||!t.size)return null;var n=new PIXI.Rectangle(0,0,t.size.width,t.size.height),o=new y(t).beginFill(16711680,.3).drawRect(n.x,n.y,n.width,n.height).endFill();return o.hitArea=n,o.alpha=0,o.name=t.name||"",this.traverseChildren(o,t,e,i),o}},T._circleViewCreator=function(){return function(t,e,i){if(!t||!t.radius)return null;var n=new y(t).beginFill(16711680,.3).drawCircle(t.position.x,t.position.y,t.radius).endFill();return n.hitArea=new PIXI.Circle(t.position.x,t.position.y,t.radius),n.name=t.name||"",n.alpha=0,this.traverseChildren(n,t,e,i),n}},T._createBitmapText=function(){return function(t,e,i){if(!(t&&t.position&&t.anchor&&null!=t.text&&t.fontName&&t.fontSize))return console.error("requires: viewConfig.position, viewConfig.anchor, viewConfig.text, viewConfig.fontName, viewConfig.fontSize"),null;var n={name:t.fontName,size:t.fontSize},o=t.align?t.align:"left",s=B.colourToNumber(t.tint?t.tint:"#FFFFFF");t.font={font:n,align:o,tint:s};var a=new Y(t);return this.traverseChildren(a,t,e,i),a}},T._createSliceButton=function(){return function(t,e,i){if(!t)return console.error("requires: viewConfig.leftWidth, viewConfig.topHeight, viewConfig.rightWidth, viewConfig.bottomHeight, viewConfig.imageFrameNames"),null;var n=new X({textureName:t.imageFrameNames.up,insetLeft:t.insetLeft,insetTop:t.insetTop,insetRight:t.insetRight,insetBottom:t.insetBottom,imageFrameNames:t.imageFrameNames,transitionColorTints:t.transitionColorTints,anchor:t.anchor,position:t.position,width:t.width,height:t.height,name:t.name});return this.traverseChildren(n,t,e,i),n}},T._createSliceSprite=function(){return function(t,e,i){if(!t)return console.error("requires: viewConfig.leftWidth, viewConfig.topHeight, viewConfig.rightWidth, viewConfig.bottomHeight, viewConfig.imageFrameNames"),null;var n=new z({textureName:t.textureName,insetLeft:t.insetLeft,insetTop:t.insetTop,insetRight:t.insetRight,insetBottom:t.insetBottom,imageFrameNames:t.imageFrameNames,anchor:t.anchor,position:t.position,width:t.width,height:t.height,name:t.name});return this.traverseChildren(n,t,e,i),n}},A.viewConfigSuffix="ViewConfig",T._prefabViewCreator=function(t,e){var i=t.name+A.viewConfigSuffix,n=PIXI.loader.resources[i].data[t.name];return this.create(n)},namespace("framework").ViewFactory=A;i(652),i(653),i(654),i(655),i(656),i(657),i(658),i(290),i(659),i(660),i(661),i(662),i(663),i(664),i(665);var Z,Q,J=function(){function t(e){var i=e.width,n=e.height,o=e.safeWidth,s=void 0===o?1/0:o,a=e.safeHeight,r=void 0===a?1/0:a,h=e.callback;L()(this,t),this.gameWidth=i,this.gameHeight=n,this.safeWidth=s<=i?s:i,this.safeHeight=r<=n?r:n,this.callback=h,this.onResize=this.onResize.bind(this),this.entities=[],h instanceof Function&&this.enable(h)}return D()(t,[{key:"onResize",value:function(t){var e=this,i=function(){var i=t.target.innerWidth,n=t.target.innerHeight,o=Math.min(i/e.safeWidth,n/e.safeHeight),s=Math.max(0,Math.min(e.gameWidth*o,i)),a=Math.max(0,Math.min(e.gameHeight*o,n)),r={x:e.gameWidth/s*o,y:e.gameHeight/a*o},h=e.calcOffset(r),u={x:e.gameWidth,y:e.gameHeight};e.resizeEventData=Object.freeze({scale:r,offset:h,gameSize:u}),e.callback({width:s,height:a,scale:r});for(var l=0,c=e.entities.length;l<c;l++){e.entities[l].onResize(e.resizeEventData)}};i(),setTimeout(i,500)}},{key:"calcOffset",value:function(t){var e=this.gameWidth/this.safeWidth,i=this.gameHeight/this.safeHeight,n=(t.x-1)/(e-1),o=(t.y-1)/(i-1);return n=Number.isFinite(n)?n:0,o=Number.isFinite(o)?o:0,{x:(this.gameWidth-this.safeWidth)*n*.5,y:(this.gameHeight-this.safeHeight)*o*.5}}},{key:"addEntity",value:function(t){this.entities.includes(t)||(this.resizeEventData&&t.onResize(this.resizeEventData),this.entities.push(t))}},{key:"removeEntity",value:function(t){this.entities=this.entities.filter((function(e){return e!==t}))}},{key:"enable",value:function(t){var e;t instanceof Function?("function"==typeof Event?e=new Event("resize"):(e=document.createEvent("Event")).initEvent("resize",!0,!0),this.callback=t,window.addEventListener("resize",this.onResize),window.dispatchEvent(e)):Debugger.warn("Scale Manager was not passed a function")}},{key:"disable",value:function(){window.removeEventListener("resize",this.onResize)}}]),t}(),$=i(292),tt=(i(81),i(82),i(77),i(154),function(){function t(e){var i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];L()(this,t),j()(this,"destroyView",void 0),j()(this,"_view",void 0),j()(this,"_children",void 0),j()(this,"_parent",void 0),j()(this,"isActive",void 0),j()(this,"_uniqueAction",void 0),j()(this,"_scripts",void 0),j()(this,"_actionManager",void 0),this._view=e,this.destroyView=i,this._children=[],this._parent=null,this.isActive=!0,this._actionManager=new framework.ActionManager,this._scripts=new framework.CompositeScript,this._scripts.init(),this._uniqueAction=null}return D()(t,[{key:"view",get:function(){return this._view}},{key:"children",get:function(){return this._children}},{key:"parent",get:function(){return this._parent}},{key:"scripts",get:function(){return this._scripts}},{key:"actionManager",get:function(){return this._actionManager}}]),D()(t,[{key:"update",value:function(t){this.isActive&&(this._actionManager&&this._actionManager.update(t),this._scripts&&this._scripts.update(t),this._children.forEach((function(e){e.update(t)})))}},{key:"destroy",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.isActive=!1,this.deinitActions(),this._scripts&&(this._scripts.deinit(),this._scripts=null),this._actionManager&&(this._actionManager=null),this._parent&&this._parent.removeChild(this),this.destroyChildren(),this._children=[],this._view&&(this.destroyView&&this._view.destroy({children:!0,texture:t,baseTexture:t}),this._view=null)}},{key:"sendToParent",value:function(t,e,i){this._parent&&(i||(i=this),this._parent.handleChildMessage(t,e,i))}},{key:"handleChildMessage",value:function(t,e,i){this.sendToParent(t,e,i)}},{key:"addChild",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;t&&!this._children.contains(t)&&(e||(e=this._view),t._parent&&t._parent.removeChild(t),t._parent=this,this._children.push(t),e.addChild(t.view))}},{key:"addChildren",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;t.forEach((function(t){e.addChild(t,i)}))}},{key:"removeChild",value:function(t){t&&this._children.contains(t)&&(t.view&&t.view.parent&&t.view.parent.removeChild(t.view),t._parent=null,this._children.remove(t))}},{key:"removeChildren",value:function(t){var e=this;t||(t=this._children),t.reverseForEach((function(t){e.removeChild(t)}))}},{key:"destroyChild",value:function(t){this.removeChild(t),t&&t.destroy()}},{key:"destroyChildren",value:function(t){var e=this;t||(t=this._children),t.reverseForEach((function(t){e.destroyChild(t)}))}},{key:"swapChild",value:function(t,e){if(e!=t){var i=null,n=-1,o=-1;t&&(o=this._children.indexOf(t),t.view&&t.view.parent&&(n=(i=t.view.parent).getChildIndex(t.view)),this.removeChild(t)),e&&(i=i||this.view,o=-1==o?this.children.length:o,n=-1==n?i.children.length:n,this.addChildAt(e,i,o,n))}}},{key:"addChildAt",value:function(t,e,i,n){t&&!this._children.contains(t)&&(t._parent&&t._parent.removeChild(t),t._parent=this,this._children.splice(i,0,t),e.addChildAt(t.view,n))}},{key:"runAction",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];this.startAction(t,e,i)}},{key:"runUniqueAction",value:function(t,e){this.startUniqueAction(t,e)}},{key:"cancelAction",value:function(t){var e=[t];this.cancelActions(e)}},{key:"cancelUniqueAction",value:function(){this._uniqueAction&&(this.cancelAction(this._uniqueAction),this._uniqueAction=null)}},{key:"cancelActions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=Object.values(this._actionManager.actions);t&&(t=t.filter((function(t){return!!t})),e=e.filter((function(e){return!!e&&t.contains(e.action)}))),this.cancelActionInstances(e)}},{key:"startUniqueAction",value:function(t,e){this.cancelUniqueAction(),this._uniqueAction=t,this.startAction(t,e,!0)}},{key:"startAction",value:function(t,e,i){if(t){e=this.createCallbacksConfig(e),t.reset();var n=this._actionManager.runAction(t,i);e.startedCallback&&n.once("start",e.startedCallback),e.finishedCallback&&n.once("end",e.finishedCallback),e.cancelledCallback&&n.once("cancel",e.cancelledCallback)}}},{key:"createCallbacksConfig",value:function(t){return isFunction(t)&&(t={finishedCallback:t,cancelledCallback:t}),t=Object.extend({startedCallback:null,finishedCallback:null,cancelledCallback:null},t)}},{key:"cancelActionInstances",value:function(t){var e=this;t.filter((function(t){return!!t})).forEach((function(t){e._actionManager.cancelAction(t)}))}},{key:"deinitActions",value:function(){this.cancelActions(),this._uniqueAction=null}}]),t}()),et=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),e}(tt),it=(i(11),i(157),i(60),i(88),i(39),i(78),i(89),i(44),i(210),i(113));!function(t){t[t.ALL=-1]="ALL",t[t.G1=0]="G1",t[t.G2=1]="G2",t[t.DEFAULT=2]="DEFAULT",t[t.C1=3]="C1",t[t.C2=4]="C2",t[t.C3=5]="C3",t[t.COUNT=6]="COUNT"}(Z||(Z={})),function(t){t[t.vo=1]="vo",t[t.music=.3]="music",t[t.sfx=.4]="sfx",t[t.muted=0]="muted"}(Q||(Q={}));var nt=function(){function t(){L()(this,t),j()(this,"currentSoundChannels",new Array(Z.COUNT).fill(null)),j()(this,"currentMusic",null),j()(this,"currentMusicId",null),j()(this,"currentVO",null),j()(this,"currentSoundVolume",1),j()(this,"isMuted",!1)}return D()(t,[{key:"preloadSFX",value:function(t,e){new it.Howl({src:t,volume:Q.sfx*this.currentSoundVolume,preload:!0,mute:this.isMuted,onload:e})}},{key:"playSound",value:function(e){var i=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Z.DEFAULT,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];n==Z.ALL&&(n=Z.DEFAULT),this.stopSoundChannel(n);var a=new it.Howl({src:[t.soundsPath+e],volume:Q.sfx*this.currentSoundVolume,loop:s,mute:this.isMuted,onstop:function(){a==i.currentSoundChannels[n]&&i.stopSoundChannel(n),o()}});return this.currentSoundChannels[n]=a,a.play(),n}},{key:"playMusic",value:function(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};if(e!==this.currentMusicId){this.stopMusic();var n=new it.Howl({src:[t.soundsPath+e],volume:Q.music*this.currentSoundVolume,loop:!0,html5:!0,mute:this.isMuted,onstop:i});this.currentMusic=n,this.currentMusicId=e,n.play()}}},{key:"playVo",value:function(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};if(!e)return console.log("no vo id provided"),void i();this.stopVo();var n=new it.Howl({src:[t.soundsPath+e],volume:Q.vo*this.currentSoundVolume,html5:!0,mute:this.isMuted,onstop:i});this.currentVO=n,n.play()}},{key:"stopAll",value:function(){this.stopSound(),this.stopVo(),this.stopMusic()}},{key:"stopSound",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Z.ALL,e=0;e<this.currentSoundChannels.length;e++)t!=Z.ALL&&t!=e||this.stopSoundChannel(e)}},{key:"stopSoundChannel",value:function(t){var e=this.currentSoundChannels[t];null!=e&&(e.playing()&&e.stop(),this.currentSoundChannels[t]=null)}},{key:"stopVo",value:function(){this.currentVO&&this.currentVO.stop()}},{key:"stopMusic",value:function(){this.currentMusic&&(this.currentMusic.stop(),this.currentMusicId=null)}},{key:"setSoundVolume",value:function(t){this.currentSoundVolume=t,this.updateForCurrentSoundVolume()}},{key:"setMuted",value:function(t){this.isMuted=t,this.updateForIsMuted()}},{key:"updateForIsMuted",value:function(){var t=this;this.currentSoundChannels.forEach((function(e){e&&e.mute(t.isMuted)})),this.currentMusic&&this.currentMusic.mute(this.isMuted),this.currentVO&&this.currentVO.mute(this.isMuted)}},{key:"updateForCurrentSoundVolume",value:function(){var t=this;this.currentSoundChannels.forEach((function(e){e&&e.volume(Q.sfx*t.currentSoundVolume)})),this.currentMusic&&this.currentMusic.volume(Q.music*this.currentSoundVolume),this.currentVO&&this.currentVO.volume(Q.vo*this.currentSoundVolume)}}]),t}();j()(nt,"soundsPath","./sounds/");var ot,st=i(9),at=function(){function t(){L()(this,t)}return D()(t,[{key:"createArrowAnimation",value:function(t,e){if(t instanceof framework.ButtonView){var i,n;switch(e){case ot.southWest:i=-20,n=-10;break;case ot.southEast:i=20,n=-10;break;case ot.northWest:i=-20,n=10;break;case ot.northEast:i=20,n=10}return framework.Actions.Tween(t,{from:{x:t.x,y:t.y},to:{x:t.x+i,y:t.y-n},repeat:1/0,yoyo:!0,duration:.3,resetValuesOnStop:!0})}}},{key:"createRainAnimation",value:function(t,e){if(t instanceof framework.SpriteView&&e instanceof framework.SpriteView)return framework.Actions.Parallel([framework.Actions.Tween(t,{from:{y:t.y},to:{y:1400},repeat:1/0,duration:.65}),framework.Actions.Tween(e,{from:{y:-2e3},to:{y:-400},repeat:1/0,duration:.65})])}}]),t}();!function(t){t.northEast="northEast",t.northWest="northWest",t.southEast="southEast",t.southWest="southWest"}(ot||(ot={}));i(158),i(168),i(123),i(86);var rt=function(){function t(){L()(this,t)}return D()(t,null,[{key:"pointInPolygon",value:function(t,e){return e.hitArea.contains(t.x,t.y)}}]),t}(),ht=function(){function t(e,i){L()(this,t),j()(this,"node",void 0),j()(this,"gridSize",40),j()(this,"nodePoints",[]),j()(this,"collider",null),j()(this,"clickIdx",-1),j()(this,"cardinals",new Array),j()(this,"isDebugging",!1),j()(this,"debugCircles",[]),this.node=e,this.collider=i,this.nodePoints=this.createNodesArray()}return D()(t,[{key:"createNodesArray",value:function(){for(var t=new Array,e=this.gridSize/2,i=.5*window.app.getCanvasHeight(),n=-i,o=.5*window.app.getCanvasWidth(),s=-o,a=n+e;a<i;a+=this.gridSize)for(var r=s+e;r<o;r+=this.gridSize){var h=new PIXI.Point(r,a);t.push(h)}return t}},{key:"init",value:function(){this.initDebugCircles(),this.findClosestNode(new PIXI.Point(0,0))}},{key:"initDebugCircles",value:function(){if(this.isDebugging)for(var t=0;t<this.nodePoints.length;t++){var e=this.nodePoints[t];this.createCircle(new PIXI.Point(e.x,e.y),!0)}}},{key:"createCircle",value:function(t,e,i){var n=Object.extend({type:"circle",position:t,fillColour:"#000ff0",radius:.3*this.gridSize},i),o=window.app.createView(n);this.node.addChild(o),e&&this.debugCircles.push(o)}},{key:"findClosestNode",value:function(t){this.clickIdx=this.findClosestIndexToPoint(t),this.cardinals=this.getCardinalIndices(this.clickIdx);var e=this.nodePoints[this.clickIdx];return this.updateDebugCircles(),e}},{key:"findClosestIndexToPoint",value:function(t){var e=this.gridSize,i=(t.x+window.app.getCanvasWidth()/2)/e,n=(t.y+window.app.getCanvasHeight()/2)/e;return(i=Math.floor(i))+(n=Math.floor(n))*(window.app.getCanvasWidth()/this.gridSize)}},{key:"getCardinalIndices",value:function(t){var e=Math.floor(window.app.getCanvasWidth()/this.gridSize);t=Math.abs(t);var i=new Array,n=t+e;n<this.nodePoints.length&&i.push(n);var o=t-e;o>=0&&i.push(o);var s=n+1;s<this.nodePoints.length&&s%e!=0&&s<this.nodePoints.length&&i.push(s);var a=o+1;a>=0&&a%e!=0&&a<this.nodePoints.length&&i.push(a);var r=t+1;r<this.nodePoints.length&&r%e!=0&&r<this.nodePoints.length&&i.push(r);var h=n-1;h<this.nodePoints.length&&t%e!=0&&h>=0&&i.push(h);var u=o-1;t%e!=0&&u>=0&&i.push(u);var l=t-1;return t%e!=0&&l>=0&&i.push(l),i}},{key:"updateDebugCircles",value:function(){if(this.isDebugging)for(var t=0;t<this.debugCircles.length;t++){var e=this.debugCircles[t];t==this.clickIdx?e.setColor("#00ff00"):this.cardinals.includes(t)?e.setColor("#ff0000"):this.nodePoints[t]&&this.nodePoints[t]&&rt.pointInPolygon(this.collider.toLocal(this.nodePoints[t],this.node),this.collider)?e.setColor("#000ff0"):e.setColor("#939393")}}},{key:"findPathIndicesToPoint",value:function(t,e){var i=this.findClosestIndexToPoint(t),n=this.findClosestIndexToPoint(e),o=new Array;o.push(i);var s=this.generateDijkstraGraph(n),a=this.getCardinalIndices(i),r=o[o.length-1],h=Number.MAX_VALUE;do{for(var u=0;u<a.length;u++){var l=a[u];if(s[l]<s[r]){var c=this.nodePoints[l],d=framework.Vector.create(c.x,c.y),p=framework.Vector.sub(e,d);r=l,h=framework.Vector.magnitudeSquared(p)}else if(s[l]==s[r]){var v=this.nodePoints[l],f=framework.Vector.create(v.x,v.y),m=framework.Vector.sub(e,f),y=framework.Vector.magnitudeSquared(m);y<h&&(r=l,h=y)}}a.length=0,r!=o[o.length-1]&&(o.push(r),a=this.getCardinalIndices(r))}while(s[r]>0&&a.length>0);return o}},{key:"generateDijkstraGraph",value:function(t){for(var e=new Array(this.nodePoints.length),i=0;i<this.nodePoints.length;i++)e[i]=Number.MAX_VALUE;var n=0;e[t]=0;var o=this.getCardinalIndices(t);do{n++;for(var s=new Array,a=0;a<o.length;a++){var r=o[a],h=this.nodePoints[r];if(h){var u=this.collider.toLocal(h,this.node);if(rt.pointInPolygon(u,this.collider)&&e[r]>n){e[r]=n;var l=this.getCardinalIndices(r);s=s.concat(l)}}}o.length=0,o=s}while(o.length>0);return e}}]),t}(),ut=function(){function t(e,i,n,o,s,a,r){var h=this;L()(this,t),j()(this,"node",null),j()(this,"collider",null),j()(this,"inputNode",null),j()(this,"mover",null),j()(this,"agent",null),j()(this,"hitLabel",null),j()(this,"debugPointer",null),j()(this,"doDebugDraw",!1),this.node=e,this.collider=i,this.mover=n,this.agent=o,this.hitLabel=s,this.debugPointer=a,null===this.debugPointer||this.doDebugDraw||(this.debugPointer.visible=!1),this.inputNode=new framework.GraphicsView,this.inputNode.beginFill(16711680),this.inputNode.drawRect(-this.node.width/2,-this.node.height/2,this.node.width,this.node.height),this.node.addChildAt(this.inputNode,0);var u=new framework.ClickScript({view:this.inputNode,stopPropagation:!1,clickEndCallback:function(t,e){h.onTouch(h.inputNode.toLocal(t.data.global))},clickEndOutsideCallback:null});r.scripts.addScripts(u)}return D()(t,[{key:"onTouch",value:function(t){this.agent.nodeGraph.findClosestNode(t),rt.pointInPolygon(this.collider.toLocal(t,this.inputNode),this.collider)?(this.agent.findPathTo(t),null!==this.hitLabel&&this.doDebugDraw&&(this.hitLabel.string="Hit")):null!==this.hitLabel&&this.doDebugDraw&&(this.hitLabel.string="Miss"),null!==this.debugPointer&&(this.debugPointer.position=t)}}]),t}(),lt=function(t){function e(t,i){var n;return L()(this,e),n=O()(this,U()(e).call(this)),j()(R()(n),"MIN_SQR_MAG",5),j()(R()(n),"node",null),j()(R()(n),"collider",null),j()(R()(n),"destination",new PIXI.Point(0,0)),j()(R()(n),"direction",framework.Vector.Zero),j()(R()(n),"radius",20),j()(R()(n),"speed",.3),j()(R()(n),"startPosition",new PIXI.Point(0,0)),n.node=t,n.node.texture=null,n.collider=i,n}return K()(e,t),D()(e,[{key:"init",value:function(){this.destination=this.startPosition}},{key:"setDestination",value:function(t){this.destination=t}},{key:"update",value:function(t){var e=framework.Vector.create(this.destination.x,this.destination.y),i=framework.Vector.sub(e,this.node.position);i=framework.Vector.normalise(i),i=framework.Vector.mult(i,this.speed*t*1e3),this.direction=i;var n=framework.Vector.add(this.node.position,i),o=framework.Vector.sub(e,n);framework.Vector.magnitudeSquared(o)<100&&(n=e),this.node.zIndex=n.y,this.node.position=new PIXI.Point(n.x,n.y)}}]),e}(framework.Script),ct=function(t){function e(t,i,n){var o;return L()(this,e),o=O()(this,U()(e).call(this)),j()(R()(o),"node",null),j()(R()(o),"mover",null),j()(R()(o),"nodeGraph",null),j()(R()(o),"pathIdx",0),j()(R()(o),"agentPath",[]),j()(R()(o),"destination",void 0),j()(R()(o),"onComplete",void 0),o.node=t,o.nodeGraph=n,o.mover=i,o}return K()(e,t),D()(e,[{key:"init",value:function(){this.destination=this.mover.node.position}},{key:"directlyPathTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.agentPath=[],this.destination=t,this.onComplete=e}},{key:"findPathTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.destination=t,this.onComplete=e;var i=this.mover.node.position,n=this.nodeGraph.findPathIndicesToPoint(i,t);this.pathIdx=0,this.agentPath=new Array(n.length);for(var o=0;o<n.length;o++){var s=n[o];this.agentPath[o]=this.nodeGraph.nodePoints[s]}}},{key:"update",value:function(t){if(this.pathIdx<this.agentPath.length){var e=this.agentPath[this.pathIdx],i=framework.Vector.create(e.x,e.y),n=this.mover.node.position,o=framework.Vector.sub(i,n),s=framework.Vector.magnitudeSquared(o);e=new PIXI.Point(i.x,i.y),s<this.nodeGraph.gridSize*this.nodeGraph.gridSize*1.5&&this.pathIdx++,this.mover.setDestination(e)}else{this.mover.setDestination(this.destination);var a=this.destination,r=framework.Vector.sub(a,this.mover.node.position),h=framework.Vector.magnitudeSquared(r);if(this.onComplete&&h<this.mover.MIN_SQR_MAG){var u=this.onComplete;this.onComplete=null,u()}}}}]),e}(framework.Script),dt=(i(160),i(67),i(106),function(){function t(){L()(this,t)}return D()(t,null,[{key:"testiOS",value:function(){if(t.WEB_STORAGE_SUPPORT)try{localStorage.setItem("LS_TEST","test"),localStorage.removeItem("LS_TEST")}catch(e){t.WEB_STORAGE_SUPPORT=!1}}},{key:"remove",value:function(e){t.WEB_STORAGE_SUPPORT?(localStorage.removeItem(e),sessionStorage.removeItem(e)):t.write(e,"",t.ERASE_COOKIE)}},{key:"write",value:function(e,i){var n,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;t.WEB_STORAGE_SUPPORT?o?sessionStorage.setItem(e,JSON.stringify(i)):localStorage.setItem(e,JSON.stringify(i)):(n=o?o!==t.ERASE_COOKIE?"":"; expires=Thu, 01 Jan 1970 00:00:00 GMT":"; expires="+new Date(2147483646e3).toUTCString(),document.cookie=e+"="+escape(JSON.stringify(i))+n+"; path=/")}},{key:"read",value:function(e){if(t.WEB_STORAGE_SUPPORT){var i=localStorage.getItem(e)||sessionStorage.getItem(e);return i?JSON.parse(i):null}var n,o,s=e+"=",a=document.cookie.split(";"),r=0;for(r=0,o=a.length;r<o;r++){for(n=a[r];" "==n.charAt(0);)n=n.substring(1,n.length);if(0===n.indexOf(s))return JSON.parse(unescape(n.substring(s.length,n.length)))}return null}}]),t}());j()(dt,"WEB_STORAGE_SUPPORT",void 0!==window.Storage),j()(dt,"ERASE_COOKIE",-1);i(153),i(51),i(217),i(218);var pt,vt=function(t){function e(t,i){var n;return L()(this,e),n=O()(this,U()(e).call(this)),j()(R()(n),"mover",null),j()(R()(n),"characterFront",null),j()(R()(n),"characterBack",null),j()(R()(n),"_xFacing",1),j()(R()(n),"_yFacing",-1),j()(R()(n),"_isWalking",!1),n.characterFront=t,n.characterBack=i,n.characterBack.visible=!1,n.updateAnimation(),n}return K()(e,t),D()(e,[{key:"xFacing",set:function(t){this._xFacing!=t&&(this._xFacing=t,this.updateXFacing())}},{key:"yFacing",set:function(t){this._yFacing!=t&&(this._yFacing=t,this.updateYFacing())}},{key:"isWalking",set:function(t){this._isWalking!=t&&(this._isWalking=t,this.updateAnimation())}}]),D()(e,[{key:"updateAnimation",value:function(){this.characterBack.state.setAnimation(0,1==this._isWalking?"walk":"idle",!0),this.characterFront.state.setAnimation(0,1==this._isWalking?"walk":"idle",!0)}},{key:"updateXFacing",value:function(){this.characterBack.skeleton.findBone("root").scaleX=this._xFacing,this.characterFront.skeleton.findBone("root").scaleX=this._xFacing;var t=this.characterFront.skeleton.findBone("flip");t&&(t.scaleY=this._xFacing)}},{key:"updateYFacing",value:function(){var t=this._yFacing;this.characterFront.visible=t>0,this.characterBack.visible=t<0}},{key:"setMover",value:function(t){this.mover=t,this.mover.node.addChild(this.characterFront),this.mover.node.addChild(this.characterBack)}},{key:"update",value:function(t){null!=this.mover&&(this.isWalking=framework.Vector.magnitudeSquared(this.mover.direction)>this.mover.MIN_SQR_MAG,this._isWalking?(this.yFacing=this.mover.direction.y>0?1:-1,this.xFacing=this.mover.direction.x>0?-1:1):(this.yFacing=1,this.xFacing=-1))}}]),e}(framework.Script),ft=function(){function t(e){L()(this,t),j()(this,"characterAnimator",void 0),j()(this,"diService",void 0),this.diService=e}return D()(t,[{key:"loadCharacter",value:function(e){var i=this,n=Ct.getCharacter();if(null==n)e();else{var o=wt[n],s=this.diService.getDataByKey(st.a.CharacterConfig).data[o];PIXI.loader.resources[s.frontSpine.spineName]||PIXI.loader.add(s.frontSpine.spineName,window.app.devpath(s.frontSpine.pathName)),PIXI.loader.resources[s.backSpine.spineName]||PIXI.loader.add(s.backSpine.spineName,window.app.devpath(s.backSpine.pathName)),PIXI.loader.load((function(n,o){var a=t.createSpineView(s.backSpine),r=t.createSpineView(s.frontSpine);i.characterAnimator=new vt(r,a);var h=Ct.getCharacterAnimationProfile();null!=h?h.applyTo(r,a):console.warn("Character profile does not have any customisation!"),e()}))}}},{key:"getCharacterForDialogueUi",value:function(){var t=new framework.SpineView(this.characterAnimator.characterFront.viewConfig);Ct.getCharacterAnimationProfile().applyTo(t,null),t.skeleton.findBone("root").scaleX=-1;var e=t.skeleton.findBone("flip");return e&&(e.scaleY=-1),t.position=bt[Ct.getCharacter()],t.scale=kt[Ct.getCharacter()],t.state.setAnimation(0,"idle",!0),t}}],[{key:"createSpineView",value:function(t){var e={"gigabyte-back":new PIXI.Point(1,1),gigabyte:new PIXI.Point(1,1),"poddle-female-back":new PIXI.Point(.6,.6),"poddle-female":new PIXI.Point(.6,.6),"poddle-male-back":new PIXI.Point(.6,.6),"poddle-male":new PIXI.Point(.6,.6),"pomp-female-back":new PIXI.Point(.25,.25),"pomp-female":new PIXI.Point(.25,.25),"pomp-male-back":new PIXI.Point(.5,.5),"pomp-male":new PIXI.Point(.5,.5),"skateboarder-back":new PIXI.Point(.75,.75),skateboarder:new PIXI.Point(.75,.75),"radster-back":new PIXI.Point(.5,.5),radster:new PIXI.Point(.5,.5),"vampira-back":new PIXI.Point(.3,.3),vampira:new PIXI.Point(.3,.3)},i=new framework.SpineView({name:t.spineName,type:"spine",alpha:1,isVisible:!0,spineName:t.spineName,autoUpdate:!0,anchor:new PIXI.Point(0,0),scale:e[t.spineName]});return window.spineView=i,i}},{key:"getNodeNameFor",value:function(t){return null!=t?yt[t]:""}},{key:"getAssetNameForSelected",value:function(){return t.getNodeNameFor(Ct.getCharacter())}},{key:"getUiNameFor",value:function(t){return null!=t?gt[t]:""}},{key:"getUiNameForSelected",value:function(){return t.getUiNameFor(Ct.getCharacter())}},{key:"getAnimationProfileForSelected",value:function(){return Ct.getCharacterAnimationProfile()}},{key:"getUserNameForSelected",value:function(){return Ct.getCharacterName()}}]),t}();!function(t){t[t.gigabyte=0]="gigabyte",t[t.poddle_f=1]="poddle_f",t[t.poddle_m=2]="poddle_m",t[t.pomp_f=3]="pomp_f",t[t.pomp_m=4]="pomp_m",t[t.radster_f=5]="radster_f",t[t.radster_m=6]="radster_m",t[t.vampira=7]="vampira"}(pt||(pt={}));var mt=Object.keys(pt).map((function(t){return pt[t]})).filter((function(t){return"number"==typeof t})),yt=mt.map((function(t){return pt[t].toString().replace("_","-")})),gt=["Gigabyte","Poddle","Poddle","Pompadorian","Pompadorian","Radster Skate","Radster Blade","Vampira"],wt=["gigabyte","poddle_f","poddle_m","pomp_f","pomp_m","radster_f","radster_m","vampira"],bt=[new PIXI.Point(-400,450),new PIXI.Point(-380,400),new PIXI.Point(-380,400),new PIXI.Point(-380,400),new PIXI.Point(-380,350),new PIXI.Point(-360,400),new PIXI.Point(-360,580),new PIXI.Point(-380,660)],kt=[new PIXI.Point(1.3,1.3),new PIXI.Point(1,1),new PIXI.Point(1,1),new PIXI.Point(.4,.4),new PIXI.Point(.6,.6),new PIXI.Point(1,1),new PIXI.Point(1,1),new PIXI.Point(.6,.6)],St=function(){function t(e){L()(this,t),j()(this,"skin",0),j()(this,"skins",[]),j()(this,"outfit",0),j()(this,"outfits",[]),j()(this,"other",0),j()(this,"others",[]),this.skins=e.skeleton.data.skins.filter((function(t){return"skin"==t.name.substring(0,"skin".length)})).map((function(t){return t.name}));var i=e.skeleton.data.slots.filter((function(t){return"outfit"==t.name.substring(0,"outfit".length)}));this.outfits=i.map((function(t){var i=e.skeleton.data.defaultSkin.attachments[t.index];return Object.keys(i).map((function(t){})),{name:t.name,attachment:Object.keys(i)}}));var n=e.skeleton.data.slots.filter((function(t){return"other"==t.name.substring(0,"other".length)}));this.others=n.map((function(t){var i=e.skeleton.data.defaultSkin.attachments[t.index];return{name:t.name,attachment:Object.keys(i)}}))}return D()(t,[{key:"nextSkin",value:function(){this.skin=(this.skin+1)%this.skins.length}},{key:"nextOutfit",value:function(){var t=Math.min.apply(null,this.outfits.map((function(t){return t.attachment.length})));this.outfit=(this.outfit+1)%t}},{key:"nextOther",value:function(){var t=Math.min.apply(null,this.others.map((function(t){return t.attachment.length})));this.other=(this.other+1)%t}},{key:"getSkin",value:function(){return this.skin<this.skins.length?this.skins[this.skin]:null}},{key:"getOutfits",value:function(){var t=this.outfit;return this.outfits.map((function(e){return{slot:e.name,attachment:t<e.attachment.length?e.attachment[t]:null}}))}},{key:"getOthers",value:function(){var t=this.other;return this.others.map((function(e){return{slot:e.name,attachment:t<e.attachment.length?e.attachment[t]:null}}))}},{key:"getProfile",value:function(){var t=this.getSkin(),e=[];return e.append(this.getOutfits()),e.append(this.getOthers()),new _t(t,e)}}]),t}(),_t=function(){function t(e,i){L()(this,t),j()(this,"skin",void 0),j()(this,"attachment",[]),this.skin=e,this.attachment=i}return D()(t,[{key:"applyTo",value:function(t,e){t&&this.applyToSpine(t),e&&this.applyToSpine(e)}},{key:"applyToSpine",value:function(t){this.skin&&t&&t.skeleton.setSkinByName(this.skin),this.attachment.forEach((function(e){t.skeleton.slots.filter((function(t){return t.data.name.startsWith(e.slot)})).forEach((function(i){var n=t.skeleton.getAttachmentByName(i.data.name,e.attachment);null==n&&(n=t.skeleton.getAttachmentByName(i.data.name,"back"+e.attachment)),i.setAttachment(n)}))}))}}]),t}(),Ct=function(){function t(){L()(this,t)}return D()(t,null,[{key:"setUserDataProfile",value:function(e){t.userDataKey=e;var i=t.getUserDataProfiles();if(!i.contains(e)){var n=i.concat(e);dt.write(t.profilesKey,n)}}},{key:"getUserDataProfiles",value:function(){var e=dt.read(t.profilesKey);return e||(e=[]),e}},{key:"deleteUserDataProfile",value:function(e){var i=t.getUserDataProfiles();i.contains(e)&&(dt.write(t.profilesKey,i.filter((function(t){return t!==e}))),dt.remove(e))}},{key:"getCurrentUserDataProfile",value:function(){return t.userDataKey}},{key:"getWalletBalance",value:function(){return t.getItem(t.walletKey)}},{key:"setWalletBalance",value:function(e){t.setItem(t.walletKey,e)}},{key:"getTransactions",value:function(){return t.getItem(t.transactionLogKey)}},{key:"setTransactions",value:function(e){t.setItem(t.transactionLogKey,e)}},{key:"getTickets",value:function(){return t.getItem(t.ticketsKey)||[]}},{key:"updateTickets",value:function(e){t.setItem(t.ticketsKey,e)}},{key:"getInventoryItems",value:function(){return t.getItem(t.inventoryItemsKey)||[]}},{key:"saveInventoryItems",value:function(e){t.setItem(t.inventoryItemsKey,e)}},{key:"getPurchasedItems",value:function(){return t.getItem(t.purchasedItemsKey)||{}}},{key:"updatePurchasedItems",value:function(e){t.setItem(t.purchasedItemsKey,e)}},{key:"getTradedItems",value:function(){return t.getItem(t.tradedItemsKey)||{}}},{key:"updateTradedItems",value:function(e){t.setItem(t.tradedItemsKey,e)}},{key:"savePickedUpItems",value:function(e){t.setItem(t.pickedUpKey,e)}},{key:"getPickedUpItems",value:function(){return t.getItem(t.pickedUpKey)||[]}},{key:"saveCurrentSceneName",value:function(e){t.setItem(t.currentSceneKey,e)}},{key:"getCurrentSceneName",value:function(){return t.getItem(t.currentSceneKey)}},{key:"savePreviousSceneName",value:function(e){t.setItem(t.previousSceneKey,e)}},{key:"getPreviousSceneName",value:function(){return t.getItem(t.previousSceneKey)}},{key:"getItem",value:function(e){var i=dt.read(t.getCurrentUserDataProfile());return i||(i={}),i[e]}},{key:"setItem",value:function(e,i){var n=dt.read(t.getCurrentUserDataProfile());return n||(n={}),n[e]=i,dt.write(t.getCurrentUserDataProfile(),n)}},{key:"setCharacter",value:function(e,i,n){t.setItem(t.characterKey,{character:e,profile:i,name:n})}},{key:"getCharacter",value:function(){var e=t.getItem(t.characterKey);return e?e.character:null}},{key:"getCharacterAnimationProfile",value:function(){var e=t.getItem(t.characterKey);return null!=e&&null!=e.profile?new _t(e.profile.skin,e.profile.attachment):null}},{key:"getCharacterName",value:function(){var e=t.getItem(t.characterKey);return e?e.name:""}},{key:"getDialogueCondition",value:function(e){var i=!1;if(e){var n=t.getItem(t.dialogueKey);if(n){var o=n[e];"boolean"==typeof o&&(i=o)}}return i}},{key:"setDialogueCondition",value:function(e){var i=t.getItem(t.dialogueKey);i||(i={}),i[e]=!0,t.setItem(t.dialogueKey,i)}}]),t}();j()(Ct,"isIntroVideoViewedKey","isIntroVideoViewed"),j()(Ct,"walletKey","snelfus"),j()(Ct,"transactionLogKey","transactions"),j()(Ct,"ticketsKey","tickets"),j()(Ct,"characterKey","character"),j()(Ct,"purchasedItemsKey","purchasedItems"),j()(Ct,"tradedItemsKey","tradedItems"),j()(Ct,"inventoryItemsKey","inventoryItems"),j()(Ct,"previousSceneKey","previousScene"),j()(Ct,"currentSceneKey","currentScene"),j()(Ct,"profilesKey","profilesKey"),j()(Ct,"userDataKey","userDataKey"),j()(Ct,"pickedUpKey","pickedUpKey"),j()(Ct,"dialogueKey","dialogue");var Pt,xt=function t(e,i){L()(this,t),j()(this,"name",void 0),j()(this,"count",void 0),this.name=e,this.count=i},Bt=function t(){L()(this,t)};j()(Bt,"getQuestItemList",(function(){return[new xt("memory-integrator",1),new xt("cube-of-wig-gel",5),new xt("kappatron",1),new xt("chocoberry-chillers",1),new xt("container-of-cryoxide",2)]})),j()(Bt,"getUnacquiredQuestItemList",(function(){var t={};return Ct.getInventoryItems().forEach((function(e){t[e]=(t[e]||0)+1})),Bt.getQuestItemList().reduce((function(e,i){var n=t[i.name]||0;return i.count>n&&e.push(new xt(i.name,i.count-n)),e}),[])})),function(t){t[t.north=0]="north",t[t.south=1]="south",t[t.east=2]="east",t[t.west=3]="west"}(Pt||(Pt={}));var It=function(t){function e(t,i){var n;return L()(this,e),n=O()(this,U()(e).call(this,t)),j()(R()(n),"navMesh",null),j()(R()(n),"nodeGraph",null),j()(R()(n),"interactables",[]),j()(R()(n),"navigationService",void 0),j()(R()(n),"soundService",void 0),j()(R()(n),"animationService",void 0),j()(R()(n),"frameService",void 0),j()(R()(n),"walletService",void 0),j()(R()(n),"characterService",void 0),j()(R()(n),"diService",void 0),j()(R()(n),"squakPadButton",void 0),j()(R()(n),"manualSpines",[]),j()(R()(n),"setButtonPressedListenerKey","setButtonPressedListener"),j()(R()(n),"setButtonHoverListenerKey","setButtonHoverListener"),j()(R()(n),"zSortObj",void 0),j()(R()(n),"arrowDirectionToAnimationPosition",[ot.northWest,ot.southEast,ot.northEast,ot.southWest]),n.zSortObj=n.view.getChildByName("Zsorting"),n.diService=i,n.soundService=n.diService.get(st.b.SoundService),n.navigationService=n.diService.get(st.b.NavigationService),n.animationService=n.diService.get(st.b.AnimationService),n.walletService=n.diService.get(st.b.WalletService),n.frameService=n.diService.get(st.b.FrameService),n.characterService=n.diService.get(st.b.CharacterService),n}return K()(e,t),D()(e,[{key:"init",value:function(){this.soundService.stopSound(Z.ALL);var t=framework.ContainerView.getChildByNameRecursive(this.view,"frame");t&&(this.frameService.init(t,this.diService,this),this.checkGameComplete()),this.createNavigationAgent()}},{key:"update",value:function(t){W()(U()(e.prototype),"update",this).call(this,t),this.zSortObj&&this.zSortObj.refreshOrder(),this.manualSpines.forEach((function(e){return e.update(t)}))}},{key:"navigateOnSpineComplete",value:function(t,e,i){var n=this;this.deactivateAllButtons();var o=framework.ContainerView.getChildByNameRecursive(this.view,t);o.autoUpdate=!1,o.state.setAnimation(0,e,!1),o.state.addListener({complete:function(){n.navigationService.goToScene(i)}}),this.manualSpines.push(o)}},{key:"setButtonPressedListener",value:function(t,e){var i=this,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=new framework.ClickScript({view:t,stopPropagation:n,clickStartCallback:function(t,e){i.deactivateOtherButtons(e)},clickEndCallback:function(){i.activateAllButtons(),e()},clickEndOutsideCallback:this.activateAllButtons.bind(this)});t[this.setButtonPressedListenerKey]=o,this.scripts.addScript(o),this.setUniversalHoverSFX(t)}},{key:"setUniversalHoverSFX",value:function(t){var i=this,n=new framework.HoverScript({view:t,stopPropagation:!1,hoverStartCallback:function(t,e){i.soundService.playSound("sfx-hover-con-character.mp3",Z.G1)}});t[e.hoverSFXscriptKey]=n,this.scripts.addScript(n)}},{key:"removeButtonPressedListener",value:function(t){var e=t[this.setButtonPressedListenerKey];e&&(e.isActive=!1,this.scripts.removeScript(e)),this.removeUniversalHoverSFX(t)}},{key:"removeUniversalHoverSFX",value:function(t){var i=t[e.hoverSFXscriptKey];i&&(i.isActive=!1)}},{key:"deactivateOtherButtons",value:function(t){this.setClickable(t,!1)}},{key:"activateAllButtons",value:function(){this.setClickable(null,!0)}},{key:"deactivateAllButtons",value:function(){this.setClickable(null,!1)}},{key:"setClickable",value:function(t,e){this.scripts&&this.scripts.scripts.forEach((function(i){i instanceof framework.ClickScript&&(i.view!=t&&(i.isClickable=e))}))}},{key:"setButtonHoverListener",value:function(t,e,i){var n=new framework.HoverScript({view:t,stopPropagation:!1,hoverStartCallback:function(t,i){e()},hoverEndCallback:function(){i()}});t[this.setButtonHoverListenerKey]=n,this.scripts.addScript(n),this.setUniversalHoverSFX(t)}},{key:"removeButtonHoverListener",value:function(t){var e=t[this.setButtonHoverListenerKey];e&&(e.isActive=!1,this.scripts.removeScript(e)),this.removeUniversalHoverSFX(t)}},{key:"setupNavigationArrowAnimation",value:function(t,e){this.setupNavigationArrow(t,this.animationService.createArrowAnimation(t,this.arrowDirectionToAnimationPosition[e]))}},{key:"setupNavigationArrow",value:function(t,e){var i=this;if(t instanceof framework.ButtonView){var n=new framework.HoverScript({view:t,hoverStartCallback:function(){i.runAction(e,void 0,!1)},hoverEndCallback:function(){i.cancelAction(e)}});this.scripts.addScript(n)}}},{key:"createNavigationAgent",value:function(){var t=this.view,e=this.view.getChildByName("_navMesh");if(null!=e){var i=new ht(t,e);this.nodeGraph=i,this.nodeGraph.init();var n=this.view.getChildByName("_mover"),o=new lt(n,e),s=new ct(n,o,i);this.characterService.characterAnimator.setMover(o),this.scripts.addScript(this.characterService.characterAnimator);this.navMesh=new ut(t,e,o,s,null,null,this),this.scripts.addScript(o),this.scripts.addScript(s)}}},{key:"exitOffscreen",value:function(t,e,i){var n=this;this.navMesh.agent.findPathTo(t.position,(function(){n.deactivateAllButtons(),n.navMesh.agent.directlyPathTo(e,(function(){n.navigationService.goToScene(i)}))}))}},{key:"enterViaSpine",value:function(t,e,i){var n=this;this.deactivateAllButtons();var o=framework.ContainerView.getChildByNameRecursive(this.view,e);o.state.setAnimationByName(0,"idle-open",!0),this.navMesh.agent.directlyPathTo(t,(function(){o.state.setAnimationByName(0,"close",!1),n.activateAllButtons()}))}},{key:"exitViaSpine",value:function(t,e,i,n,o){var s=this,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null;this.navMesh.agent.findPathTo(t.position,(function(){s.deactivateAllButtons(),a&&s.soundService.playSound(a,Z.C2),s.doAfterSpineComplete(i,n,(function(){s.navMesh.agent.directlyPathTo(e,(function(){s.navigationService.goToScene(o)}))}))}))}},{key:"exitViaCyberbus",value:function(t,e,i){var n=this;this.navMesh.agent.findPathTo(t,(function(){n.deactivateAllButtons(),n.soundService.playSound("sfx-cyberbus-sound-when-arriving.mp3",Z.G2);var t=framework.ContainerView.getChildByNameRecursive(n.view,e);t.visible=!0,t.state.addListener({start:function(){n.runAction(framework.Actions.Sequence([framework.Actions.Delay(1.25),framework.Actions.Func((function(){n.navMesh.mover.node.visible=!1}))]),void 0,!1)},complete:function(){n.runAction(framework.Actions.Sequence([framework.Actions.Delay(.01),framework.Actions.Func((function(){n.navigationService.goToScene(an.grandCyberStation)}))]))}}),t.state.setAnimation(0,i,!1),t.visible=!0,t.autoUpdate=!0}))}},{key:"enterViaCyberbus",value:function(t,e){var i=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.deactivateAllButtons(),this.navMesh.mover.node.visible=!1,this.soundService.playSound("sfx-cyberbus-sound-when-arriving.mp3",Z.G2);var o=framework.ContainerView.getChildByNameRecursive(this.view,t);o.state.addListener({start:function(){i.runAction(framework.Actions.Sequence([framework.Actions.Delay(1.25),framework.Actions.Func((function(){i.navMesh.mover.node.visible=!0})),framework.Actions.Delay(1.75),framework.Actions.Func((function(){n&&i.navMesh.agent.directlyPathTo(n,(function(){i.activateAllButtons()}))}))]))}}),o.state.setAnimation(0,e,!1),o.visible=!0,o.autoUpdate=!0}},{key:"doAfterSpineComplete",value:function(t,e,i){var n=framework.ContainerView.getChildByNameRecursive(this.view,t);n.state.addListener({complete:i}),n.state.setAnimation(0,e,!1)}},{key:"checkGameComplete",value:function(){null==this.diService.getDataByKey(st.a.PlayerNotifiedFinishedGame)&&0==Bt.getUnacquiredQuestItemList().length&&(this.diService.setDataWithKey(st.a.PlayerNotifiedFinishedGame,!0),this.frameService.popupDialog.setText("Wow! You collected all the Quest items for Motherboard, hurry back to Cyberhome and activate the teleporter under Motherboard's screen!"),this.frameService.popupDialog.showYesOnly())}},{key:"destroy",value:function(){this.soundService.stopVo(),W()(U()(e.prototype),"destroy",this).call(this)}},{key:"addChildAsPopUp",value:function(t){var e=framework.ContainerView.getChildByNameRecursive(this.view,"Main Camera");if(e){var i=this.view.getChildIndex(e);this.addChildAt(t,this.view,this.children.length,i)}}}]),e}(tt);j()(It,"hoverSFXscriptKey","hoverSFXscriptKey");var At,Tt,Nt=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"state",At.start),j()(R()(i),"title",void 0),j()(R()(i),"select",void 0),j()(R()(i),"characterButton",void 0),j()(R()(i),"config",void 0),j()(R()(i),"configSkinButton",void 0),j()(R()(i),"configOutfitButton",void 0),j()(R()(i),"configOtherButton",void 0),j()(R()(i),"command",void 0),j()(R()(i),"confirmButton",void 0),j()(R()(i),"cancelButton",void 0),j()(R()(i),"mirrorFrame",void 0),j()(R()(i),"mirrorGlass",void 0),j()(R()(i),"reflectionAnim",void 0),j()(R()(i),"stage",void 0),j()(R()(i),"characterAnim",void 0),j()(R()(i),"beamAnim",void 0),j()(R()(i),"stageNameText",void 0),j()(R()(i),"robotAnim",void 0),j()(R()(i),"robot",void 0),j()(R()(i),"profile",void 0),j()(R()(i),"characterNameText",void 0),j()(R()(i),"nameButton",void 0),j()(R()(i),"backButton",void 0),j()(R()(i),"saveButton",void 0),j()(R()(i),"alert",void 0),j()(R()(i),"character",void 0),j()(R()(i),"characterConfig",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-character-select.mp3"),this.initTitle(),this.initSelectPanel(),this.initConfigPanel(),this.initCommandPanel(),this.initReflections(),this.initMirror();var t=this.initStage();this.initCharacters(t),this.initBeam(),this.initRobot(),this.initProfilePanel(),this.initAlert(),this.transitState(At.select),this.initFrame()}},{key:"initTitle",value:function(){var t=this.view.getChildByName("title-panel");this.title=new Lt(t,{hide:new PIXI.Point(t.position.x,t.position.y-t.height),show:t.position.clone()},1)}},{key:"initSelectPanel",value:function(){var t=this.view.getChildByName("select-panel");this.select=new Lt(t,{hide:new PIXI.Point(t.position.x-t.width,t.y),show:t.position.clone()},1),this.characterButton=mt.map((function(e){return t.getChildByName(ft.getNodeNameFor(e))}))}},{key:"initConfigPanel",value:function(){var t=this.view.getChildByName("config-panel");this.config=new Lt(t,{hide:new PIXI.Point(t.position.x-t.width,t.y),show:t.position.clone()},1),this.configSkinButton=t.getChildByName("skin-button"),this.configOutfitButton=t.getChildByName("outfit-button"),this.configOtherButton=t.getChildByName("other-button")}},{key:"setConfigButtons",value:function(t){this.setButtonPressedListener(this.configSkinButton,t.skin),this.setButtonPressedListener(this.configOutfitButton,t.outfit),this.setButtonPressedListener(this.configOtherButton,t.other)}},{key:"clearConfigButtons",value:function(){var t=this;[this.configSkinButton,this.configOutfitButton,this.configOtherButton].forEach((function(e){return t.removeButtonPressedListener(e)}))}},{key:"initCommandPanel",value:function(){var t=this.view.getChildByName("command-panel");this.confirmButton=t.getChildByName("ok-button"),this.cancelButton=t.getChildByName("cancel-button"),this.command=new Lt(t,{hide:new PIXI.Point(t.position.x,t.position.y+t.height+this.confirmButton.height),show:t.position.clone()},1)}},{key:"setCommandButtons",value:function(t){this.setButtonPressedListener(this.confirmButton,t.confirm),this.setButtonPressedListener(this.cancelButton,t.cancel)}},{key:"clearCommandButtons",value:function(){var t=this;[this.cancelButton,this.confirmButton].forEach((function(e){return t.removeButtonPressedListener(e)}))}},{key:"initReflections",value:function(){var t=this.view.getChildByName("reflection");this.reflectionAnim=mt.map((function(e){return t.getChildByName(ft.getNodeNameFor(e))})),this.reflectionAnim.forEach((function(t){t.position.set(0,0)}))}},{key:"hideReflections",value:function(t){var e=this.reflectionAnim;e&&e.forEach((function(t,e){t.visible=!1}))}},{key:"initMirror",value:function(){var t=this.view.getChildByName("mirror-frame");this.mirrorFrame=new Lt(t,{hide:new PIXI.Point(t.position.x,t.position.y-t.height),show:t.position.clone()},1);var e=this.view.getChildByName("mirror-glass");this.mirrorGlass=new Lt(e,{hide:new PIXI.Point(e.position.x,e.position.y-t.height),show:e.position.clone()},1)}},{key:"initStage",value:function(){var t=this.view.getChildByName("stage");return this.stage=new Lt(t,{hide:new PIXI.Point(t.position.x,t.position.y+t.height),show:t.position.clone(),final:new PIXI.Point(-290,315)},1),this.stageNameText=t.getChildByName("name-text"),t}},{key:"initCharacters",value:function(t){var e=t.getChildByName("oval");this.characterAnim=mt.map((function(t){return e.getChildByName(ft.getNodeNameFor(t))})),this.characterAnim.forEach((function(t){t.position.set(0,0)}))}},{key:"hideCharacters",value:function(t){var e=this.characterAnim;e&&e.forEach((function(e,i){e.visible=i==t}))}},{key:"updateSelectedCharacter",value:function(){var t=this.character;this.updateCharacter(t),this.hideCharacters(t),this.hideReflections(t),this.stageNameText.text=null!=t?ft.getUiNameFor(t):""}},{key:"updateCharacter",value:function(t){null!=t&&this.characterConfig.getProfile().applyTo(this.characterAnim[t],this.reflectionAnim[t])}},{key:"initBeam",value:function(){this.beamAnim=this.view.getChildByName("beam")}},{key:"animateBeam",value:function(){var t=this;this.beamAnim.state.setAnimation(0,"appear",!1),this.beamAnim.state.onEvent=function(e,i){"spawnplayer"==i.data.name&&(t.beamAnim.state.onEvent=function(){},t.updateSelectedCharacter())},this.beamAnim.visible=!0}},{key:"resetConfig",value:function(){var t=null,e=this.character;if(null!=e){var i=this.characterAnim[e];i&&(t=new St(i))}this.characterConfig=t}},{key:"initRobot",value:function(){var t=this.view.getChildByName("robot");this.robot=new Lt(t,{hide:new PIXI.Point(t.position.x,t.position.y-1.5*t.height),show:t.position.clone()},1),this.robotAnim=t.getChildByName("spider")}},{key:"animateRobot",value:function(){var t=this;this.robotAnim.state.setAnimation(0,"firelaser",!1),this.robotAnim.state.onComplete=function(){t.robotAnim.state.onComplete=function(){},t.robotAnim.state.setAnimation(0,"idle",!0)}}},{key:"initProfilePanel",value:function(){var t=this.view.getChildByName("profile-panel");this.profile=new Lt(t,{hide:new PIXI.Point(t.position.x,t.position.y+t.height),show:t.position.clone()},1),this.characterNameText=t.getChildByName("name-text"),this.characterNameText.text=Mt(),this.backButton=t.getChildByName("back-button"),this.saveButton=t.getChildByName("save-button"),this.nameButton=t.getChildByName("name-button")}},{key:"initAlert",value:function(){var t=this.view.getChildByName("alert");this.alert=new Lt(t,{hide:new PIXI.Point(t.position.x,t.position.y-1.5*t.height),show:t.position.clone()},1)}},{key:"setProfileButtons",value:function(t){t.name&&this.setButtonPressedListener(this.nameButton,t.name),t.back&&this.setButtonPressedListener(this.backButton,t.back),t.save&&this.setButtonPressedListener(this.saveButton,t.save)}},{key:"clearProfileButtons",value:function(){var t=this;[this.nameButton,this.backButton,this.saveButton].forEach((function(e){return t.removeButtonPressedListener(e)}))}},{key:"clearScene",value:function(t){var e=this;t.append(framework.Actions.Func((function(){[e.title,e.select,e.config,e.command,e.mirrorFrame,e.mirrorGlass,e.stage,e.robot,e.profile,e.alert].forEach((function(t){return t.hide()})),e.beamAnim.visible=!1,e.updateSelectedCharacter()})))}},{key:"transitState",value:function(t){var e=this,i=[],n=this.state;switch(this.state=null,n){case At.start:this.clearScene(i);break;case At.select:break;case At.confirm:this.transitFromConfirm(t,i);break;case At.config:this.transitFromConfig(t,i);break;case At.name:this.transitFromName(i)}switch(t){case At.select:this.transitToSelect(n,i);break;case At.confirm:this.transitToConfirm(n,i);break;case At.config:this.transitToConfig(n,i);break;case At.name:this.transitToName(i);break;case At.end:i.append(framework.Actions.Func((function(){e.navigationService.goToScene(an.cyberhome)})))}i.append(framework.Actions.Func((function(){e.state=t}))),this.runAction(framework.Actions.Sequence(i))}},{key:"transitToSelect",value:function(t,e){var i=this;t==At.start&&e.append([framework.Actions.Parallel([this.title,this.select,this.stage,this.mirrorFrame,this.mirrorGlass].map((function(t){return t.showAction()}))),framework.Actions.Func((function(){i.characterButton.forEach((function(t,e){i.setButtonPressedListener(t,(function(){i.character=e,i.soundService.playSound("sfx-character-selection.mp3",Z.C1),i.transitState(At.confirm)}))}))}))])}},{key:"transitFromConfirm",value:function(t,e){var i=this;t==At.select?(this.clearCommandButtons(),this.character=null,this.resetConfig(),e.append(framework.Actions.Parallel([framework.Actions.Func((function(){i.soundService.playSound("sfx-cancel-character-selection.mp3",Z.C1),i.animateBeam()})),this.command.hideAction()]))):t==At.config&&(this.clearCommandButtons(),e.append(framework.Actions.Parallel([framework.Actions.Func((function(){return i.soundService.playSound("sfx-press-ok-after-selecting-a-character.mp3",Z.C1)})),this.select.hideAction()])))}},{key:"transitToConfirm",value:function(t,e){var i=this,n=[],o=!1,s=!1;switch(t){case At.select:n.append(this.command.showAction()),s=!0;case At.confirm:o=!0;break;case At.config:n.append(this.select.showAction()),s=!0}this.resetConfig(),o&&n.append(framework.Actions.Func((function(){i.animateBeam()}))),0<n.length&&e.append(framework.Actions.Parallel(n)),s&&e.append(framework.Actions.Func((function(){i.setCommandButtons({cancel:function(){i.transitState(At.select)},confirm:function(){i.transitState(At.config)}})})))}},{key:"transitFromConfig",value:function(t,e){var i=this;if(t!=At.config){this.clearCommandButtons(),this.clearConfigButtons();var n=[this.config,this.robot];t!=At.confirm&&n.append(this.command),e.append(framework.Actions.Parallel(n.map((function(t){return t.hideAction()})).concat(framework.Actions.Func((function(){return i.soundService.playSound("sfx-press-ok-after-selecting-a-character.mp3",Z.C1)})))))}}},{key:"transitToConfig",value:function(t,e){var i=this;if(t!=At.config){var n=[this.config,this.robot];t==At.name&&n.append(this.command),e.append(framework.Actions.Parallel(n.map((function(t){return t.showAction()}))))}e.append(framework.Actions.Func((function(){t==At.config?(i.soundService.playSound("sfx-click-on-customization-option.mp3",Z.C2),i.animateRobot(),i.updateCharacter(i.character)):(i.setConfigButtons({skin:function(){i.characterConfig.nextSkin(),i.transitState(At.config)},outfit:function(){i.characterConfig.nextOutfit(),i.transitState(At.config)},other:function(){i.characterConfig.nextOther(),i.transitState(At.config)}}),i.setCommandButtons({cancel:function(){i.transitState(At.confirm)},confirm:function(){i.transitState(At.name)}}))})))}},{key:"transitFromName",value:function(t){var e=this;this.clearProfileButtons(),t.append(framework.Actions.Parallel([framework.Actions.Func((function(){return e.soundService.playSound("sfx-press-ok-after-selecting-a-character.mp3",Z.C1)})),this.profile.hideAction(),this.stage.action(this.stage.points.final,this.stage.points.show)]))}},{key:"transitToName",value:function(t){var e=this;t.append(framework.Actions.Parallel([this.profile.showAction(),this.stage.action(this.stage.points.show,this.stage.points.final)])),t.append(framework.Actions.Func((function(){e.setProfileButtons({name:function(){e.characterNameText.text=Mt()},back:function(){e.transitState(At.config)},save:function(){Ct.setUserDataProfile(e.characterNameText.text),Ct.setCharacter(e.character,e.characterConfig.getProfile(),e.characterNameText.text),e.transitState(At.end)}})})))}},{key:"initFrame",value:function(){this.frameService.hideCharacterInfo()}},{key:"destroy",value:function(){this.frameService.showCharacterInfo(),W()(U()(e.prototype),"destroy",this).call(this)}}]),e}(It);(Tt=At||(At={}))[Tt.start=0]="start",Tt[Tt.select=1]="select",Tt[Tt.confirm=2]="confirm",Tt[Tt.config=3]="config",Tt[Tt.name=4]="name",Tt[Tt.end=5]="end";var Lt=function(){function t(e,i,n){L()(this,t),this.view=e,this.points=i,this.duration=n}return D()(t,[{key:"translateTo",value:function(t){this.view.position.set(t.x,t.y)}},{key:"action",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.duration;return framework.Actions.Tween(this.view,{from:{x:t.x,y:t.y},to:{x:e.x,y:e.y},duration:i})}},{key:"hide",value:function(){this.translateTo(this.points.hide)}},{key:"hideAction",value:function(){return this.action(this.points.show,this.points.hide)}},{key:"show",value:function(){this.translateTo(this.points.show)}},{key:"showAction",value:function(){return this.action(this.points.hide,this.points.show)}}]),t}();function Mt(){var t,e=Ct.getUserDataProfiles();do{t=Vt[Math.floor(Math.random()*Vt.length)]+" "+Ot[Math.floor(Math.random()*Ot.length)]}while(e.contains(t));return t}var Dt,Vt=["Cyber","Rad","Funny","Creepy","Silly","Clever","Awesome","Dastardly","Wacky","Brainy","Gigantic","Tiny","Speedy","Blue","Purple","Green","Orange","Red","Yellow","Cool","Smart","Fantastic","Super","Magic","Perfect","Positive","True","Solid","Liquid","Whole","Half","Cosmic","Spacy","Solar","Powerful"],Ot=["Boss","Pal","Hero","Creature","Dude","Pacer","Touchdown","Player","Shape","Angle","Circle","Sphere","Square","Cube","Pattern","Rectangle","Triangle","Number","Wheels","Blazer","Bot","Solver","Genius","Skwaker","Racer","Expert","Puzzler","Ruler","Borg","Numeral","Thinker","Array","Sequence","Fraction","Star"],Et=(i(159),i(120),i(293));!function(t){t[t.NONE=-1]="NONE",t[t.INTRO=0]="INTRO",t[t.OUTRO=1]="OUTRO"}(Dt||(Dt={}));var Rt=function t(e,i){L()(this,t),j()(this,"path",void 0),j()(this,"duration",void 0),this.path=e,this.duration=i},Ft=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"device",new Et.DetectUA),j()(R()(i),"eastArrow",void 0),j()(R()(i),"monitor",void 0),j()(R()(i),"monitorOriginParams",void 0),j()(R()(i),"background",void 0),j()(R()(i),"backgroundAlpha",.8),j()(R()(i),"video",null),j()(R()(i),"skipVideoButton",void 0),j()(R()(i),"videoId",Dt.NONE),j()(R()(i),"tryFinishQuest",(function(){var t=Bt.getUnacquiredQuestItemList();0==t.length?i.playVideo(Dt.OUTRO,(function(){i.teardownVideo(),i.navigationService.goToScene(an.splash)})):(i.frameService.popupDialog.setText(t.reduce((function(t,e){return t+" "+e.count+"x "+e.name.split("-").join(" ")+","}),"This is the transporter. Once you have everything needed for MB's upgrade, click here to send them to her. You still need:").slice(0,-1)+".",.7),i.frameService.popupDialog.showYesOnly())})),j()(R()(i),"monitorDownAnim",(function(){return i.monitorOriginParams={pos:{x:i.monitor.x,y:i.monitor.y},scale:{x:i.monitor.scale.x,y:i.monitor.scale.y},skew:{x:i.monitor.skew.x,y:i.monitor.skew.y}},framework.Actions.Sequence([framework.Actions.Func((function(){return i.soundService.playSound("sfx-sound-that-starts-before-motherboard-video.mp3",Z.C2)})),framework.Actions.Tween(i.monitor,{from:{y:i.monitor.y},to:{y:-137},duration:.5}),framework.Actions.Parallel([framework.Actions.Tween(i.monitor.scale,{from:{x:i.monitor.scale.x,y:i.monitor.scale.y},to:{x:4,y:4},duration:.2}),framework.Actions.Tween(i.monitor.skew,{from:{y:i.monitor.skew.y},to:{y:.4},duration:.2}),framework.Actions.Tween(i.monitor,{from:{x:i.monitor.x},to:{x:-24},duration:.2})])])})),j()(R()(i),"monitorUpAnim",(function(){return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Tween(i.monitor.scale,{from:{x:i.monitor.scale.x,y:i.monitor.scale.y},to:{x:i.monitorOriginParams.scale.x,y:i.monitorOriginParams.scale.y},duration:.2}),framework.Actions.Tween(i.monitor.skew,{from:{y:i.monitor.skew.y},to:{y:i.monitorOriginParams.skew.y},duration:.2}),framework.Actions.Tween(i.monitor,{from:{x:i.monitor.x},to:{x:i.monitorOriginParams.pos.x},duration:.2})]),framework.Actions.Tween(i.monitor,{from:{y:i.monitor.y},to:{y:i.monitorOriginParams.pos.y},duration:.5}),framework.Actions.Func((function(){return i.soundService.playSound("sfx-tv-static-that-keeps-playing.mp3",Z.C2,(function(){}),!0)}))])})),j()(R()(i),"playVideo",(function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};i.videoId=t;var o=e.VideoAssets[i.videoId];i.view.interactive=!1,i.view.interactiveChildren=!1,i.background.visible=!0,i.background.alpha=0,i.runAction(framework.Actions.Sequence([i.monitorDownAnim(),i.showView(i.background,i.backgroundAlpha),framework.Actions.Func((function(){i.setupVideo(o.path),i.video.onended=n,i.video.onclose=n,i.skipVideoButton.addEventListener("mouseup",n),i.skipVideoButton.addEventListener("touchend",n)})),framework.Actions.Func((function(){i.monitor.visible=!1}))]))})),j()(R()(i),"stopVideo",(function(t){i.videoId==t&&i.runAction(framework.Actions.Sequence([framework.Actions.Func(i.teardownVideo),i.hideView(i.background),framework.Actions.Func((function(){i.monitor.visible=!0})),i.monitorUpAnim(),framework.Actions.Func((function(){i.view.interactive=!0,i.view.interactiveChildren=!0,i.background.visible=!1}))]))})),j()(R()(i),"setupVideo",(function(t){i.soundService.stopMusic(),i.video=document.createElement("video"),i.video.crossOrigin="anonymous",i.video.src=t,i.video.preload="auto",i.video.controls=!0;var e=i.device.browser.name;i.device.isiOS?i.video.autoplay=!1:i.video.autoplay=!e||"Safari"!==e,window.app.canvas.parentElement.appendChild(i.video),i.skipVideoButton=document.createElement("BUTTON"),i.skipVideoButton.id="cyberchase-skip",window.app.canvas.parentElement.appendChild(i.skipVideoButton),i.onResize(),window.addEventListener("resize",i.onResize)})),j()(R()(i),"teardownVideo",(function(){window.removeEventListener("resize",i.onResize),i.video&&(i.video.pause(),i.video.onended=function(){},i.video.onclose=function(){},window.app.canvas.parentElement.removeChild(i.video),i.video=null,i.videoId=Dt.NONE),i.skipVideoButton&&(window.app.canvas.parentElement.removeChild(i.skipVideoButton),i.skipVideoButton=null),Ct.setItem(Ct.isIntroVideoViewedKey,!0),i.soundService.playMusic("music-cyberstation-loop.mp3")})),j()(R()(i),"onResize",(function(){i.video&&(i.video.style.width=window.app.canvas.style.width,i.video.style.height=window.app.canvas.style.height)})),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-cyberstation-loop.mp3");var i=this.view.getChildByName("upperSpawnPoint").position,n=this.view.getChildByName("exitButtonNorth");this.setButtonPressedListener(n,(function(){t.soundService.playSound("sfx-door-close-opens-to-2nd-floor-and-cyberstation.mp3",Z.C1),t.exitViaSpine(n,i,"2nd-floordoor","open",an.cyberhomeSecondFloor)})),this.setupNavigationArrow(n,this.animationService.createArrowAnimation(n,ot.northWest)),this.eastArrow=this.view.getChildByName("exitButtonEast"),this.setButtonPressedListener(this.eastArrow,this.navigateToCyberStation.bind(this)),this.setupNavigationArrow(this.eastArrow,this.animationService.createArrowAnimation(this.eastArrow,ot.northEast)),this.soundService.playSound("sfx-tv-static-that-keeps-playing.mp3",Z.C2,(function(){}),!0),this.createBackground(),this.initEndQuestListener(),this.interactables.push(n),this.interactables.push(this.eastArrow),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){if(Ct.getPreviousSceneName()==an.grandCyberStation){var t=this.view.getChildByName("stationSpawnPoint").position,e=this.view.getChildByName("stationSpawnTarget").position;this.navMesh.mover.node.position=t,this.enterViaSpine(e,"cyberstation-doors","close")}else{var i=this.view.getChildByName("upperSpawnPoint").position,n=this.view.getChildByName("upperSpawnTarget").position;this.navMesh.mover.node.position=i,this.enterViaSpine(n,"2nd-floordoor","close")}}},{key:"navigateToCyberStation",value:function(){if(Ct.getItem(Ct.isIntroVideoViewedKey)||!1){var t=this.view.getChildByName("stationSpawnPoint").position;this.soundService.playSound("sfx-door-close-opens-to-2nd-floor-and-cyberstation.mp3",Z.C1),this.exitViaSpine(this.eastArrow,t,"cyberstation-doors","open",an.grandCyberStation)}else this.frameService.popupDialog.setText("Before you leave, click on the TV with Motherboard on it to get your mission!"),this.frameService.popupDialog.showYesOnly()}},{key:"createBackground",value:function(){var t=this.view.parent.width,e=this.view.parent.height;this.background||(this.background=new framework.GraphicsView,this.background.beginFill(0),this.background.drawRect(-t/2,-e/2,t,e),this.background.interactive=!1,this.background.alpha=.1,this.background.visible=!1,this.view.addChild(this.background),this.view.interactive=!0)}},{key:"initEndQuestListener",value:function(){this.monitor=this.view.getChildByName("monitor"),this.monitor.state.setAnimation(0,"idle",!0),this.setButtonPressedListener(this.monitor,this.playVideo.bind(this,Dt.INTRO,this.stopVideo.bind(this,Dt.INTRO)));var t=this.view.getChildByName("transporterObject");t.state.setAnimationByName(0,"idle",!0),t.interactive=!0,this.setButtonHoverListener(t,(function(){return t.state.setAnimationByName(0,"open",!1)}),(function(){return t.state.setAnimationByName(0,"idle",!0)})),this.setButtonPressedListener(t,this.tryFinishQuest.bind(this))}},{key:"showView",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return framework.Actions.Tween(t,{to:{alpha:e},duration:.3})}},{key:"hideView",value:function(t){return framework.Actions.Tween(t,{to:{alpha:0},duration:.3})}}]),e}(It);j()(Ft,"VideoAssets",[new Rt("./assets/videos/intro.mp4",69),new Rt("./assets/videos/outro.mp4",31)]);i(29),i(30);var Ut=function t(e,i,n,o,s){var a=arguments.length>5&&void 0!==arguments[5]&&arguments[5];L()(this,t),j()(this,"id",void 0),j()(this,"name",void 0),j()(this,"title",void 0),j()(this,"description",void 0),j()(this,"path",void 0),j()(this,"isDecoration",void 0),this.id=e,this.name=i,this.title=n,this.description=o,this.path=s,this.isDecoration=a},Ht=function(){function t(){L()(this,t)}return D()(t,null,[{key:"getInventoryItems",value:function(t){var e=Ct.getInventoryItems();return this.parseInventoryItems(t,e)}},{key:"parseInventoryItems",value:function(t,e){return e.map((function(e,i,n){var o=t[e];return o?new Ut(o.id,o.imageName,o.title,o.description,o.path,o.isDecor):null}))}},{key:"hasItemInInventory",value:function(t){return Ct.getInventoryItems().indexOf(t)>-1}},{key:"removeInventoryItem",value:function(t){var e=Ct.getInventoryItems(),i=e.indexOf(t);return i>-1&&null!=e.splice(i,1)&&(Ct.saveInventoryItems(e),!0)}},{key:"addItemToInventory",value:function(t){var e=Ct.getInventoryItems();e.push(t),Ct.saveInventoryItems(e)}}]),t}(),Wt=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"lamp",void 0),j()(R()(i),"ancientCatVase",void 0),j()(R()(i),"fishbowl",void 0),j()(R()(i),"cyberHousePlant",void 0),j()(R()(i),"choocrocaDoll",void 0),j()(R()(i),"exitButtonRight",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.soundService.playMusic("music-cyberstation-loop.mp3"),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint0,an.cyberhome)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.southEast));var i=this.view.getChildByName("longfish");this.runAction(framework.Actions.Tween(i,{from:{x:i.x},to:{x:-1e3},duration:15}),void 0,!1),this.cyberHousePlant=this.view.getChildByName("cyberHousePlant"),this.cyberHousePlant.visible=Ht.hasItemInInventory("cyber-house-plant"),1==this.cyberHousePlant.visible&&(this.cyberHousePlant=this.view.getChildByName("cyberHousePlant"),this.setButtonPressedListener(this.cyberHousePlant,this.cyberHousePlantClick.bind(this))),this.view.getChildByName("boombox").visible=Ht.hasItemInInventory("boom-box"),this.view.getChildByName("candle").visible=Ht.hasItemInInventory("candle"),this.view.getChildByName("egyptianStatue").visible=Ht.hasItemInInventory("egyptian-statue"),this.ancientCatVase=this.view.getChildByName("ancientCatVase"),this.ancientCatVase.visible=Ht.hasItemInInventory("ancient-cat-vase"),1==this.ancientCatVase.visible&&(this.ancientCatVase=this.view.getChildByName("ancientCatVase"),this.setButtonPressedListener(this.ancientCatVase,this.onVaseClick.bind(this))),this.view.getChildByName("curvyLamp").visible=Ht.hasItemInInventory("curvy-lamp"),this.fishbowl=this.view.getChildByName("fishbowl"),this.fishbowl.visible=Ht.hasItemInInventory("fishbowl"),1==this.fishbowl.visible&&(this.fishbowl=this.view.getChildByName("fishbowl"),this.setButtonPressedListener(this.fishbowl,this.onFishbowlClick.bind(this))),this.view.getChildByName("jarOfBats").visible=Ht.hasItemInInventory("jar-of-bats"),this.view.getChildByName("discoBall").visible=Ht.hasItemInInventory("disco-ball"),this.view.getChildByName("hackerPoster").visible=Ht.hasItemInInventory("hacker-poster"),this.view.getChildByName("tikivillePoster").visible=Ht.hasItemInInventory("tikkiville-poster"),this.choocrocaDoll=this.view.getChildByName("choocrocaDoll"),this.choocrocaDoll.visible=Ht.hasItemInInventory("choocroca-doll"),1==this.choocrocaDoll.visible&&(this.choocrocaDoll=this.view.getChildByName("choocrocaDoll"),this.setButtonPressedListener(this.choocrocaDoll,this.choocrocaDollClick.bind(this))),this.view.getChildByName("lavaLamp").visible=Ht.hasItemInInventory("lava-lamp"),this.view.getChildByName("gollywoodTourBusToy").visible=Ht.hasItemInInventory("gollywood-tour-bus-toy"),this.view.getChildByName("wholesomeTwinsDolls").visible=Ht.hasItemInInventory("wholesome-twins-dolls"),this.walletService.balance<10&&(console.log("low snelfus"),this.lamp=this.view.getChildByName("lamp-anim"),this.setButtonPressedListener(this.lamp,this.onLampClick.bind(this))),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.cyberhome&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}},{key:"onLampClick",value:function(){this.soundService.playSound("sfx-free-snelfus-under-lamp.mp3",Z.C2),this.removeButtonPressedListener(this.lamp),this.lamp.state.setAnimation(0,"action",!1),this.walletService.credit(20,"Found spare snelfus.")}},{key:"onVaseClick",value:function(){var t=this;this.soundService.playSound("sfx-snake-popup-from-vase.mp3",Z.C1),this.removeButtonPressedListener(this.ancientCatVase),this.ancientCatVase.interactive=!1,this.ancientCatVase.state.setAnimation(0,"action",!1),this.ancientCatVase.state.addListener({complete:function(){t.setButtonPressedListener(t.ancientCatVase,t.onVaseClick.bind(t)),t.ancientCatVase.state.setAnimationByName(0,"idle",!0),t.ancientCatVase.interactive=!0}})}},{key:"onFishbowlClick",value:function(){var t=this;this.soundService.playSound("sfx-fish-jump-in-fishbowl.mp3",Z.C2),this.removeButtonPressedListener(this.fishbowl),this.fishbowl.state.setAnimation(0,"action",!1),this.fishbowl.state.addListener({complete:function(){t.setButtonPressedListener(t.fishbowl,t.onFishbowlClick.bind(t)),t.fishbowl.state.setAnimationByName(0,"idle",!0)}})}},{key:"cyberHousePlantClick",value:function(){this.soundService.playSound("sfx-flowers-blooming-in-pot.mp3",Z.C3),this.removeButtonPressedListener(this.cyberHousePlant),this.cyberHousePlant.state.setAnimation(0,"action",!1),this.cyberHousePlant.interactive=!1}},{key:"choocrocaDollClick",value:function(){var t=this;this.soundService.playSound("sfx-choocroca-doll-roar.mp3",Z.C1),this.removeButtonPressedListener(this.choocrocaDoll),this.choocrocaDoll.state.setAnimation(0,"action",!1),this.choocrocaDoll.state.addListener({complete:function(){t.setButtonPressedListener(t.choocrocaDoll,t.choocrocaDollClick.bind(t)),t.choocrocaDoll.state.setAnimationByName(0,"idle",!0)}})}}]),e}(It),qt=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"background",null),j()(R()(i),"popUpDialogHiddenY",1e3),j()(R()(i),"popUpDialogShownY",150),j()(R()(i),"backgroundAlpha",.4),j()(R()(i),"rootView",null),j()(R()(i),"anchorViewIndex",0),i}return K()(e,t),D()(e,[{key:"init",value:function(){for(var t=this.view;t.parent;)t=t.parent;this.rootView=t;var e=framework.ContainerView.getChildByNameRecursive(this.rootView,"Canvas");e?this.rootView=e:console.error("Canvas node not found"),this.createBackground()}},{key:"getAnchorView",value:function(){return this.rootView.children.indexOf(this.view)}},{key:"createBackground",value:function(){this.background||(this.background=new framework.GraphicsView,this.background.name="BackgroundedPopOverBackground",this.background.beginFill(0),this.background.drawRect(-700,-400,1400,800),this.background.interactive=!0,this.setButtonPressedListener(this.background,(function(){}),!0),this.background.alpha=0,this.view.interactive=!0)}},{key:"addBackground",value:function(){this.rootView.addChildAt(this.background,this.getAnchorView())}},{key:"removeBackground",value:function(){this.rootView.removeChild(this.background)}},{key:"shouldUnlockSwakpad",value:function(){var t=framework.ContainerView.getChildByNameRecursive(this.rootView,e.backgroundName);return null==t||null==t}},{key:"show",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.beforeShow(),this.frameService.lockSkwakPad(),this.view.visible=!0,this.addBackground(),this.runUniqueAction(framework.Actions.Sequence([framework.Actions.Func(t),framework.Actions.Parallel([this.customShowAction(),framework.Actions.Tween(this.background,{to:{alpha:this.backgroundAlpha},duration:.1})])]))}},{key:"beforeShow",value:function(){}},{key:"customShowAction",value:function(){return framework.Actions.Tween(this.view,{to:{alpha:1},duration:.3})}},{key:"hide",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.runUniqueAction(framework.Actions.Sequence([framework.Actions.Parallel([this.customHideAction(),framework.Actions.Tween(this.background,{to:{alpha:0},duration:.1})]),framework.Actions.Func((function(){t.removeBackground(),t.view.visible=!1,t.shouldUnlockSwakpad()&&t.frameService.unlockSkwakPad(),e()}))]))}},{key:"customHideAction",value:function(){return framework.Actions.Tween(this.view,{to:{alpha:0},duration:.3})}}]),e}(It);j()(qt,"backgroundName","BackgroundedPopOverBackground");var Kt=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"dialogLabel",null),j()(R()(i),"buttonsYesNo",null),j()(R()(i),"buttonsYesOnly",null),j()(R()(i),"noButton",null),j()(R()(i),"yesButton",null),i}return K()(e,t),D()(e,[{key:"init",value:function(){W()(U()(e.prototype),"init",this).call(this),this.dialogLabel=framework.ContainerView.getChildByNameRecursive(this.view,"dialog-text"),this.buttonsYesNo=framework.ContainerView.getChildByNameRecursive(this.view,"buttons-yes-no"),this.noButton=framework.ContainerView.getChildByNameRecursive(this.buttonsYesNo,"dialog-modal-button-no"),this.buttonsYesOnly=framework.ContainerView.getChildByNameRecursive(this.view,"buttons-yes-only")}},{key:"setText",value:function(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.REF_SCALE;if(this.dialogLabel.scale=new PIXI.Point(e.REF_SCALE,e.REF_SCALE),this.dialogLabel.maxWidth=e.REF_MAX_WIDTH,this.dialogLabel.text=t,this.dialogLabel.maxWidth=e.REF_MAX_WIDTH/i,this.dialogLabel.scale=new PIXI.Point(i,i),e.REF_HEIGHT<this.dialogLabel.height){var n=e.REF_HEIGHT/this.dialogLabel.height;this.dialogLabel.maxWidth=e.REF_MAX_WIDTH/n,this.dialogLabel.scale=new PIXI.Point(n,n)}}},{key:"showYesNo",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){};this.buttonsYesOnly.visible=!1,this.buttonsYesNo.visible=!0,framework.ContainerView.visibleChildren(this.buttonsYesNo,!0),this.yesButton=framework.ContainerView.getChildByNameRecursive(this.buttonsYesNo,"dialog-modal-button-yes");var i=function(i){t.removeButtonPressedListener(t.yesButton),t.removeButtonPressedListener(t.noButton),t.removeButtonPressedListener(t.background),t.hide((function(){return e(i)}))};this.setButtonPressedListener(this.yesButton,(function(){return i(!0)})),this.setButtonPressedListener(this.noButton,(function(){return i(!1)})),this.setButtonPressedListener(this.background,(function(){return i(!1)})),this.show()}},{key:"showYesOnly",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.buttonsYesNo.visible=!1,this.buttonsYesOnly.visible=!0,framework.ContainerView.visibleChildren(this.buttonsYesOnly,!0),this.yesButton=framework.ContainerView.getChildByNameRecursive(this.buttonsYesOnly,"dialog-modal-button-yes");var i=function(){t.removeButtonPressedListener(t.yesButton),t.removeButtonPressedListener(t.background),t.hide(e)};this.setButtonPressedListener(this.yesButton,i),this.setButtonPressedListener(this.background,i),this.show()}},{key:"customShowAction",value:function(){var t=this;return framework.Actions.Parallel([framework.Actions.Func((function(){return t.soundService.playSound("sfx-when-message-is-shown.mp3",Z.G2)})),framework.Actions.Tween(this.view,{to:{y:this.popUpDialogShownY},duration:.7})])}},{key:"customHideAction",value:function(){var t=this;return framework.Actions.Parallel([framework.Actions.Func((function(){return t.soundService.playSound("sfx-door-close-opens-to-2nd-floor-and-cyberstation.mp3",Z.G2)})),framework.Actions.Tween(this.view,{to:{y:this.popUpDialogHiddenY},duration:.7})])}}]),e}(qt);j()(Kt,"REF_SCALE",1),j()(Kt,"REF_HEIGHT",330),j()(Kt,"REF_MAX_WIDTH",680);var Gt=function(){function t(e,i,n){var o=this;L()(this,t),j()(this,"view",void 0),j()(this,"highlight",void 0),j()(this,"label",void 0),this.view=e;var s=this.view.getChildByName("Background");this.highlight=s.getChildByName("Highlight"),this.label=s.getChildByName("Label"),i.setButtonPressedListener(this.view,(function(){n.onProfileSelected(o)})),this.emptyEntry()}return D()(t,[{key:"enableHighlight",value:function(t){this.highlight.visible=t}},{key:"emptyEntry",value:function(){this.label.text=t.EMPTY_NAME,this.view.interactive=this.view.isEnabled=!1,this.enableHighlight(!1)}},{key:"isEmpty",value:function(){return!this.view.isEnabled}},{key:"setName",value:function(t){this.label.text=t,this.view.interactive=this.view.isEnabled=!0}},{key:"getName",value:function(){return this.isEmpty()?null:this.label.text}}]),t}();j()(Gt,"EMPTY_NAME","EMPTY SLOT");var jt=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"startGame",i.view.getChildByName("playGameButton")),j()(R()(i),"profileScreen",i.view.getChildByName("ProfileSelect")),j()(R()(i),"profileList",i.profileScreen.getChildByName("ProfileList")),j()(R()(i),"playButton",i.profileScreen.getChildByName("playButton")),j()(R()(i),"newProfileButton",i.profileScreen.getChildByName("newCharacter")),j()(R()(i),"deleteButton",i.profileScreen.getChildByName("deleteButton")),j()(R()(i),"aboutButton",i.profileScreen.getChildByName("aboutGame")),j()(R()(i),"popupDialog",i.view.getChildByName("popupDialog")),j()(R()(i),"profiles",[]),j()(R()(i),"selectedProfile",null),j()(R()(i),"popup",null),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.profileScreen.visible=!1,this.startGame.interactive=this.startGame.isEnabled=this.startGame.visible=!0;var i=new framework.ClickScript({view:this.startGame,stopPropagation:!0,clickEndCallback:function(){t.showProfileScreen()}});this.startGame[this.setButtonPressedListenerKey]=i,this.scripts.addScript(i),this.setButtonPressedListener(this.playButton,this.playGame.bind(this)),this.setButtonPressedListener(this.newProfileButton,this.createProfile.bind(this)),this.setButtonPressedListener(this.deleteButton,this.deleteProfile.bind(this)),this.setButtonPressedListener(this.aboutButton,this.showAbout.bind(this)),this.popup=new Kt(this.popupDialog,this.diService),this.popup.init(),this.addChild(this.popup)}},{key:"onProfileSelected",value:function(t){this.soundService.playSound("sfx-press-trade-buy-option-button-on-the-shop.mp3",Z.DEFAULT),this.selectedProfile=t,this.profiles.forEach((function(t){t.enableHighlight(!1)})),this.selectedProfile.enableHighlight(!0),this.playButton.interactive=this.playButton.isEnabled=!0,this.deleteButton.interactive=this.deleteButton.isEnabled=!0}},{key:"enumerateProfiles",value:function(){for(var t=Ct.getUserDataProfiles(),e=0;e<this.profileList.children.length;e++){var i=new Gt(this.profileList.getChildAt(e),this,this);e<t.length&&i.setName(t[e]),this.profiles.push(i)}}},{key:"showProfileScreen",value:function(){this.soundService.playMusic("music-splash.mp3"),this.soundService.playSound("sfx-sound-that-starts-before-motherboard-video.mp3",Z.DEFAULT),this.profileScreen.visible=!0,framework.ContainerView.visibleChildren(this.profileScreen,!0),this.startGame.interactive=this.startGame.isEnabled=this.startGame.visible=!1,this.enumerateProfiles(),this.updateCreateDeleteButtons(),this.onNoProfileSelected()}},{key:"playGame",value:function(){if(this.soundService.playSound("sfx-select-bat.mp3",Z.DEFAULT),this.selectedProfile){Ct.setUserDataProfile(this.selectedProfile.getName());var t=Ct.getCurrentSceneName();null==t?this.navigationService.goToScene(an.cyberhome):this.navigationService.goToScene(t)}else this.navigationService.goToScene(an.characterSelect)}},{key:"createProfile",value:function(){this.profiles.find((function(t){return t.isEmpty()}))&&(this.onNoProfileSelected(),this.playGame())}},{key:"deleteProfile",value:function(){var t=this;this.selectedProfile&&(this.popup.setText("Are you sure you want to delete \n'"+this.selectedProfile.getName()+"'\n forever?"),this.popup.showYesNo((function(e){e&&(t.soundService.playSound("sfx-press-main-menu-button-when-browsing.mp3",Z.DEFAULT),Ct.deleteUserDataProfile(t.selectedProfile.getName()),t.selectedProfile.emptyEntry(),t.updateCreateDeleteButtons(),t.onNoProfileSelected())})))}},{key:"onNoProfileSelected",value:function(){this.selectedProfile=null,this.profiles.forEach((function(t){t.enableHighlight(!1)})),this.playButton.interactive=this.playButton.isEnabled=!1,this.deleteButton.interactive=this.deleteButton.isEnabled=!1}},{key:"updateCreateDeleteButtons",value:function(){var t=this.profiles.count((function(t){return!t.isEmpty()}));this.deleteButton.interactive=this.deleteButton.isEnabled=t>0,this.newProfileButton.interactive=this.newProfileButton.isEnabled=t<e.MAX_PROFILE_COUNT}},{key:"showAbout",value:function(){var t=this,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;i>=e.aboutText.length||(this.popup.setText(e.aboutText[i],e.aboutTextScale[i]),this.popup.showYesOnly((function(){t.showAbout(i+1)})),this.soundService.playVo(e.aboutVO[i]))}}]),e}(It);j()(jt,"MAX_PROFILE_COUNT",5),j()(jt,"aboutText",["Welcome to Cyberspace! We're so glad you're here to help us stop Hacker.","Here's how it works. Motherboard will contact you with a quest. She'll tell you what Hacker is up to, and how you can stop him. You'll have to go from cybersite to cybersite to find everything you need.","The first thing to do is choose a character to play as. Then you'll be sent to your cyberhome. It's inside Motherboard Control Central.","Besides helping Mother-B, as you travel around Cyberspace, you'll be able to buy or trade for cool stuff to decorate your room.","You can get help anytime by clicking on your Skwakpad. And watch out for Hacker, Buzz and Delete, too. You might see them around trying to mess things up.","One last thing. If you have to leave Cyberspace before you complete your quest, don't worry. Your character will be right there waiting for you to come back. Just click on your character's name the next time you sign on, and you'll start where you left off the last time you played. All your stuff will be right where you left it too."]),j()(jt,"aboutTextScale",[1,.75,.9,.9,.85,.6]),j()(jt,"aboutVO",["VOs/about_1.mp3","VOs/about_2.mp3","VOs/about_3.mp3","VOs/about_4.mp3","VOs/about_5.mp3","VOs/about_6.mp3"]);var zt,Xt=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),e}(It),Yt=i(47),Zt=function t(){L()(this,t),j()(this,"context",null)},Qt=function(){function t(e,i){L()(this,t),j()(this,"view",null),j()(this,"buttonHandler",null),j()(this,"label",null),j()(this,"selectChoiceDelegate",null),j()(this,"choiceModel",null),this.view=e,this.buttonHandler=i,this.label=framework.ContainerView.getChildByNameRecursive(this.view,"Label"),this.buttonHandler.setButtonPressedListener(this.view,this.onButtonPress.bind(this))}return D()(t,[{key:"init",value:function(t,e){this.choiceModel=t,this.label.text=t.text.capitalise(),this.selectChoiceDelegate=e}},{key:"onButtonPress",value:function(){this.selectChoiceDelegate.onChoice(this.choiceModel)}},{key:"destroy",value:function(){this.view.destroy(),this.buttonHandler.removeButtonPressedListener(this.view)}}]),t}(),Jt=i(71),$t=function(t){function e(t,i,n,o){var s;return L()(this,e),s=O()(this,U()(e).call(this)),j()(R()(s),"topNode",null),j()(R()(s),"botNode",null),j()(R()(s),"dialogueText",null),j()(R()(s),"buttonHandler",null),j()(R()(s),"choiceTemplate",null),j()(R()(s),"ySpacing",49.5),j()(R()(s),"choiceButtons",[]),j()(R()(s),"voPlayerDelegate",void 0),s.topNode=t,s.botNode=i,s.voPlayerDelegate=o,s.dialogueText=s.topNode.getChildByName("dialog-text"),s.buttonHandler=n,s.choiceTemplate=un.getLoadedAsset("choice-buttonViewConfig"),s.onDeinit(),s}return K()(e,t),D()(e,[{key:"onInit",value:function(){this.topNode.visible=!0,this.botNode.visible=!0}},{key:"onDeinit",value:function(){this.topNode.visible=!1,this.botNode.visible=!1}},{key:"init",value:function(t,e){this.dialogueText.text=t.dialogue,this.voPlayerDelegate.playVO(Jt.a.voId(t.vo)),this.choiceButtons.forEach((function(t){return t.destroy()})),this.choiceButtons.length=0;for(var i=0;i<t.choices.length;i++){var n=window.app.createChildViews(this.choiceTemplate,this.botNode)[0];n.position.y=n.position.y+this.ySpacing*i;var o=new Qt(n,this.buttonHandler);o.init(t.choices[i],e),this.choiceButtons.push(o)}}}]),e}(Zt),te=(i(214),i(219),function(t){function e(t,i,n,o){var s;L()(this,e),s=O()(this,U()(e).call(this)),j()(R()(s),"topNode",null),j()(R()(s),"botNode",null),j()(R()(s),"dialogueText",null),j()(R()(s),"buttonHandler",null),j()(R()(s),"carat",null),j()(R()(s),"characterLabels",[]),j()(R()(s),"soundService",null),j()(R()(s),"inputButtonContainers",[]),j()(R()(s),"inputButtons",[]),j()(R()(s),"inputKeyTemplate",null),j()(R()(s),"caratIdx",0),j()(R()(s),"dialogueModel",void 0),j()(R()(s),"selectChoiceDelegate",null),j()(R()(s),"maxCharacters",7),s.topNode=t,s.botNode=i,s.buttonHandler=n,s.soundService=o.get(st.b.SoundService),s.dialogueText=s.topNode.getChildByName("dialog-text"),s.inputKeyTemplate=un.getLoadedAsset("input-buttonViewConfig"),framework.ContainerView.getChildByNameRecursive(s.botNode,"input-button").destroy();for(var a=0;a<s.maxCharacters;a++){var r=t.getChildByName("letter-"+a);r.string="",s.characterLabels.push(r)}for(var h=0;h<s.maxCharacters;h++){var u=i.getChildByName("input-button-"+h);s.inputButtonContainers.push(u)}s.carat=s.topNode.getChildByName("letter-highlight-on"),s.carat.position=s.characterLabels[0].position;var l=s.botNode.getChildByName("erase-button");s.buttonHandler.setButtonPressedListener(l,s.erase.bind(R()(s)));var c=s.botNode.getChildByName("ok-button");return s.buttonHandler.setButtonPressedListener(c,s.confirmAnswer.bind(R()(s))),s.onDeinit(),s}return K()(e,t),D()(e,[{key:"onInit",value:function(){this.topNode.visible=!0,this.botNode.visible=!0}},{key:"onDeinit",value:function(){this.topNode.visible=!1,this.botNode.visible=!1}},{key:"init",value:function(t,e){this.dialogueText.text=t.dialogue,this.dialogueModel=t,this.selectChoiceDelegate=e,this.erase()}},{key:"inputKeypress",value:function(t,e){(t.isEnabled=!1,this.soundService.playSound("sfx-when-answering-questions.mp3",Z.G2),this.buttonHandler.removeButtonPressedListener(t),this.caratIdx<this.characterLabels.length)&&(this.characterLabels[this.caratIdx].string=e.toUpperCase());this.caratIdx=Math.min(this.caratIdx+1,this.characterLabels.length),this.updateCaratPos()}},{key:"deleteKeypress",value:function(){this.soundService.playSound("sfx-when-answering-questions.mp3",Z.G2),this.caratIdx=Math.max(this.caratIdx-1,0);for(var t=this.caratIdx;t<this.characterLabels.length;t++){this.characterLabels[t].string=""}this.updateCaratPos()}},{key:"erase",value:function(){this.soundService.playSound("sfx-when-answering-questions.mp3",Z.G2);for(var t=0;t<this.characterLabels.length;t++){this.characterLabels[t].string=""}this.caratIdx=0,this.updateCaratPos(),this.resetInputButtons()}},{key:"resetInputButtons",value:function(){for(var t=this,e=this.inputButtons.length-1;e>=0;e--){this.inputButtons.pop().destroy()}for(var i=this.shuffledAnswer(),n=function(e){var n=i.charAt(e),o=window.app.createChildViews(t.inputKeyTemplate,t.inputButtonContainers[e])[0];framework.ContainerView.getChildByNameRecursive(o,"label").string=n,t.buttonHandler.setButtonPressedListener(o,(function(){t.inputKeypress(o,n)})),t.inputButtons.push(o)},o=0;o<i.length;o++)n(o)}},{key:"shuffledAnswer",value:function(){for(var t=this.dialogueModel.answer;0==t.localeCompare(this.dialogueModel.answer);)t=this.dialogueModel.answer.split("").sort((function(){return.5-Math.random()})).join("");return t}},{key:"confirmAnswer",value:function(){for(var t="",e=0;e<this.characterLabels.length;e++){t+=this.characterLabels[e].text}var i=t.trim().toLowerCase()==this.dialogueModel.answer.toLowerCase();this.selectChoiceDelegate.onAnswer(i)}},{key:"updateCaratPos",value:function(){var t=Math.min(this.caratIdx,this.characterLabels.length-1);this.carat.position=this.characterLabels[t].node.position}}]),e}(Zt)),ee=function(t){function e(t,i,n){var o;L()(this,e),o=O()(this,U()(e).call(this,t,n)),j()(R()(o),"conversationService",void 0),j()(R()(o),"characterHeadMask",void 0),j()(R()(o),"characterHead",void 0),j()(R()(o),"playerHeadMask",void 0),j()(R()(o),"playerHead",void 0),j()(R()(o),"topDialogueBox",void 0),j()(R()(o),"botDialogueBox",void 0),j()(R()(o),"topChoiceState",void 0),j()(R()(o),"botChoiceState",void 0),j()(R()(o),"topAnswerState",void 0),j()(R()(o),"botAnswerState",void 0),j()(R()(o),"topDialogueBoxY",void 0),j()(R()(o),"botDialogueBoxY",void 0),o.view.interactive=!0,o.view.visible=!1,o.topDialogueBox=o.view.getChildByName("top-dialog"),o.botDialogueBox=o.view.getChildByName("bottom-dialog"),o.topChoiceState=o.topDialogueBox.getChildByName("choice-state"),o.botChoiceState=o.botDialogueBox.getChildByName("choice-state");var s=new $t(o.topChoiceState,o.botChoiceState,i,R()(o));o.topAnswerState=o.topDialogueBox.getChildByName("answer-state"),o.botAnswerState=o.botDialogueBox.getChildByName("answer-state");var a=new te(o.topAnswerState,o.botAnswerState,i,o.diService);return o.topDialogueBoxY=o.topDialogueBox.y,o.botDialogueBoxY=o.botDialogueBox.y,o.characterHeadMask=o.view.getChildByName("character-mask"),o.playerHeadMask=o.view.getChildByName("player-mask"),o.conversationService=new Yt.b(a,s,n,R()(o)),o.conversationService.setConversationListener(R()(o)),o.init(),o}return K()(e,t),D()(e,[{key:"showConversation",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.soundService.playSound("sfx-when-message-is-shown.mp3",Z.G2),this.characterHead=new framework.SpineView({name:t.myName,type:"spine",alpha:1,isVisible:!0,spineName:t.myName,autoUpdate:!0,scale:new PIXI.Point(t.scale,t.scale),position:new PIXI.Point(t.offset[0],t.offset[1])}),this.characterHead.state.hasAnimationByName("idle")?this.characterHead.state.setAnimation(0,"idle",!0):this.characterHead.state.setAnimationWith(0,this.characterHead.state.data.skeletonData.animations[0],!0),this.characterHead.mask=this.characterHeadMask,this.playerHead=this.diService.get(st.b.CharacterService).getCharacterForDialogueUi(),this.playerHead.mask=this.playerHeadMask,this.conversationService.playConversation(t,e),this.show()}},{key:"customShowAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Tween(this.topDialogueBox,{from:{y:this.topDialogueBoxY-500},to:{y:this.topDialogueBoxY-40},duration:.75}),framework.Actions.Tween(this.botDialogueBox,{from:{y:this.botDialogueBoxY+500},to:{y:this.botDialogueBoxY-40},duration:.75})]),framework.Actions.Func((function(){t.view.addChild(t.characterHead),t.view.addChild(t.playerHead)}))])}},{key:"hideConversation",value:function(){this.soundService.playSound("sfx-door-close-opens-to-2nd-floor-and-cyberstation.mp3",Z.G2),this.hide()}},{key:"customHideAction",value:function(){var t=this;return framework.Actions.Parallel([framework.Actions.Func((function(){t.view.removeChild(t.characterHead),t.view.removeChild(t.playerHead)})),framework.Actions.Tween(this.topDialogueBox,{from:{y:this.topDialogueBoxY-40},to:{y:this.topDialogueBoxY-500},duration:.75}),framework.Actions.Tween(this.botDialogueBox,{from:{y:this.botDialogueBoxY-40},to:{y:this.botDialogueBoxY+500},duration:.75})])}},{key:"onAnswer",value:function(t){this.soundService.playSound("sfx-when-answering-questions.mp3",Z.G2)}},{key:"onChoice",value:function(t){t.gotoIdx==Yt.a.STOP||t.gotoIdx==Yt.a.SAM_TRADE?(this.soundService.playSound("sfx-when-answering-questions.mp3",Z.G2),this.hideConversation()):this.soundService.playSound("sfx-when-answering-questions.mp3",Z.G2)}},{key:"playVO",value:function(t){this.soundService.playVo(t)}},{key:"stopVO",value:function(){this.soundService.stopVo()}}]),e}(qt),ie=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"dialogueUiMediator",null),i}return K()(e,t),D()(e,[{key:"init",value:function(){W()(U()(e.prototype),"init",this).call(this),this.view.interactive=!0;var t=this.view.getChildByName("dialogue-ui");this.dialogueUiMediator=new ee(t,this,this.diService),this.addChildAsPopUp(this.dialogueUiMediator);var i=un.getLoadedAsset("vampireConversation");this.dialogueUiMediator.showConversation(i)}}]),e}(It);!function(t){t.browse_1="browse_1",t.browse_2="browse_2",t.trade_1="trade_1",t.purchase_1="purchase_1",t.purchase_2="purchase_2",t.trade_2="trade_2",t.summary_1="summary_1",t.summary_2="summary_2",t.summary_4="summary_4",t.summary_3="summary_3",t.main_1="main_1",t.trade_3="trade_3",t.trade_4="trade_4",t.trade_5="trade_5"}(zt||(zt={}));var ne=function(){function t(){L()(this,t),j()(this,"currentMerchant",""),j()(this,"dialogues",new Map([[zt.browse_1,"We're all out of items! Sorry!"],[zt.browse_2,"Learn more about an item by clicking on it."],[zt.trade_1,"Click on an item to see what I'll trade for it."],[zt.purchase_1,"Your item is being shipped to your CyberHome now!"],[zt.purchase_2,"You can view your new purchase in your skwak pad."],[zt.trade_2,"You can view your new trade in your skwak pad."],[zt.summary_1,"That's a lovely item!"],[zt.summary_2,"Oh, nice choice."],[zt.summary_4,"That's a pretty good price."],[zt.summary_3,"Here's the item you selected."],[zt.main_1,"Hi! Welcome to my shop."],[zt.trade_3,"Here are the things I'll trade for this item."],[zt.trade_4,"Let's make sure you want to make this trade."],[zt.trade_5,"Our Chocoberry Chillers are second to none."]])),j()(this,"binkyDialogue",new Map([[zt.browse_1,"binky_2.mp3"],[zt.browse_2,"binky_3.mp3"],[zt.trade_1,"binky_4.mp3"],[zt.purchase_1,"binky_5.mp3"],[zt.purchase_2,"binky_6.mp3"],[zt.trade_2,"binky_7.mp3"],[zt.summary_1,"binky_8.mp3"],[zt.summary_2,"binky_9.mp3"],[zt.summary_4,"binky_10.mp3"],[zt.summary_3,"binky_11.mp3"],[zt.main_1,"binky_12.mp3"],[zt.trade_3,"binky_13.mp3"],[zt.trade_4,"binky_14.mp3"]])),j()(this,"wickedDialogue",new Map([[zt.browse_1,"wicked_2.mp3"],[zt.browse_2,"wicked_3.mp3"],[zt.trade_1,"wicked_4.mp3"],[zt.purchase_1,"wicked_5.mp3"],[zt.purchase_2,"wicked_6.mp3"],[zt.trade_2,"wicked_7.mp3"],[zt.summary_1,"wicked_8.mp3"],[zt.summary_2,"wicked_9.mp3"],[zt.summary_4,"wicked_10.mp3"],[zt.summary_3,"wicked_11.mp3"],[zt.main_1,"wicked_12.mp3"],[zt.trade_3,"wicked_13.mp3"],[zt.trade_4,"wicked_14.mp3"]])),j()(this,"zDialogue",new Map([[zt.browse_1,"z_2.mp3"],[zt.browse_2,"z_3.mp3"],[zt.trade_1,"z_4.mp3"],[zt.purchase_1,"z_5.mp3"],[zt.purchase_2,"z_6.mp3"],[zt.trade_2,"z_7.mp3"],[zt.summary_1,"z_8.mp3"],[zt.summary_2,"z_9.mp3"],[zt.summary_4,"z_10.mp3"],[zt.summary_3,"z_11.mp3"],[zt.main_1,"z_12.mp3"],[zt.trade_3,"z_13.mp3"],[zt.trade_4,"z_14.mp3"]])),j()(this,"creechDialogue",new Map([[zt.browse_1,"creech_2.mp3"],[zt.browse_2,"creech_3.mp3"],[zt.trade_1,"creech_4.mp3"],[zt.purchase_1,"creech_5.mp3"],[zt.purchase_2,"creech_6.mp3"],[zt.trade_2,"creech_7.mp3"],[zt.summary_1,"creech_8.mp3"],[zt.summary_2,"creech_9.mp3"],[zt.summary_4,"creech_10.mp3"],[zt.summary_3,"creech_11.mp3"],[zt.main_1,"creech_12.mp3"],[zt.trade_3,"creech_13.mp3"],[zt.trade_4,"creech_14.mp3"]])),j()(this,"bunnyDialogue",new Map([[zt.browse_1,"bunny_2.mp3"],[zt.browse_2,"bunny_3.mp3"],[zt.trade_1,"bunny_4.mp3"],[zt.purchase_1,"bunny_5.mp3"],[zt.purchase_2,"bunny_6.mp3"],[zt.trade_2,"bunny_7.mp3"],[zt.summary_1,"bunny_8.mp3"],[zt.summary_2,"bunny_9.mp3"],[zt.summary_4,"bunny_10.mp3"],[zt.summary_3,"bunny_11.mp3"],[zt.main_1,"bunny_12.mp3"],[zt.trade_3,"bunny_13.mp3"],[zt.trade_4,"bunny_14.mp3"],[zt.trade_5,"bunny_1.mp3"]])),j()(this,"grubbyDialogue",new Map([[zt.browse_1,"grubby_1.mp3"],[zt.browse_2,"grubby_2.mp3"],[zt.trade_1,"grubby_3.mp3"]])),j()(this,"dialoguesMap",new Map([[an.shopBinky,this.binkyDialogue],[an.shopWicked,this.wickedDialogue],[an.shopGollywood,this.zDialogue],[an.shopCreech,this.creechDialogue],[an.rfairDonutStore,this.bunnyDialogue],[an.rfairLostAndFoundShop,this.grubbyDialogue]]))}return D()(t,[{key:"getCurrentMerchant",value:function(){return this.currentMerchant.toString()}},{key:"setCurrentMerchant",value:function(t){t&&(this.currentMerchant=t)}},{key:"getVo",value:function(t){return"VOs/"+this.dialoguesMap.get(this.getCurrentMerchant()).get(t)}},{key:"getDialogue",value:function(t){return this.dialogues.get(t)}}]),t}(),oe=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnPoint2",void 0),j()(R()(i),"spawnPoint3",void 0),j()(R()(i),"spawnPoint4",void 0),j()(R()(i),"shopTargets",{}),j()(R()(i),"teleporterButton",void 0),j()(R()(i),"cybermallState",new ne),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-shops-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnPoint2=this.view.getChildByName("spawnPoint2").position,this.spawnPoint3=this.view.getChildByName("spawnPoint3").position,this.spawnPoint4=this.view.getChildByName("spawnPoint4").position;var i=[an.shopBinky,an.shopWicked,an.shopGollywood,an.shopCreech];this.shopTargets[an.shopBinky]=this.spawnPoint1,this.shopTargets[an.shopWicked]=this.spawnPoint2,this.shopTargets[an.shopGollywood]=this.spawnPoint3,this.shopTargets[an.shopCreech]=this.spawnPoint4,i.forEach((function(e){t.initShopButtons(e)})),this.diService.setDataWithKey(st.a.CyberMallState,this.cybermallState),this.teleporterButton=this.view.getChildByName("telepad"),this.setButtonPressedListener(this.teleporterButton,(function(){t.exitViaCyberbus(t.spawnPoint0,"cyberbus","arriveSE")})),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){if(Ct.getPreviousSceneName()==an.grandCyberStation)return this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnPoint0),void this.enterViaCyberbus("cyberbus","arriveSE",this.spawnTarget0);framework.ContainerView.getChildByNameRecursive(this.view,"cyberbus").state.clearTrack(0),Ct.getPreviousSceneName()!=an.shopBinky?Ct.getPreviousSceneName()!=an.shopWicked?Ct.getPreviousSceneName()!=an.shopGollywood?Ct.getPreviousSceneName()!=an.shopCreech||(this.navMesh.mover.node.position=this.spawnPoint4):this.navMesh.mover.node.position=this.spawnPoint3:this.navMesh.mover.node.position=this.spawnPoint2:this.navMesh.mover.node.position=this.spawnPoint1}},{key:"initShopButtons",value:function(t){var e=this.view.getChildByName(t);this.setButtonPressedListener(e,this.goToShop.bind(this,t))}},{key:"goToShop",value:function(t){var e=this,i=this.shopTargets[t];this.navMesh.agent.findPathTo(i,(function(){e.deactivateAllButtons(),e.cybermallState.setCurrentMerchant(t),e.navigationService.goToScene(t)}))}}]),e}(It),se=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"cybermallState",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-shops-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position;var i=this.view.getChildByName("exitButtonLeft");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint0,an.cybermall)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.northEast));var n=this.view.getChildByName("wallsCollider");this.setButtonPressedListener(n,this.navigationService.goToScene.bind(this.navigationService,an.shop));var o=this.view.getChildByName("bolt");this.runAction(framework.Actions.Tween(o,{from:{rotation:0},to:{rotation:6.28},repeat:1/0,duration:10}),void 0,!1),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.cybermall&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}}]),e}(It),ae=function(t){function e(t,i,o){var s;return L()(this,e),s=O()(this,U()(e).call(this)),j()(R()(s),"speechBubbleLabel",null),j()(R()(s),"panel",null),j()(R()(s),"mainState",null),j()(R()(s),"buttonHandler",void 0),j()(R()(s),"frameService",void 0),j()(R()(s),"soundService",void 0),j()(R()(s),"walletService",void 0),j()(R()(s),"spritePosition",new n.Point(0,0)),j()(R()(s),"placeholderParent",null),j()(R()(s),"cybermallState",void 0),j()(R()(s),"diService",void 0),s.panel=t,s.buttonHandler=i,s.diService=o,s.frameService=o.get(st.b.FrameService),s.soundService=o.get(st.b.SoundService),s.walletService=o.get(st.b.WalletService),s.cybermallState=o.getDataByKey(st.a.CyberMallState),s}return K()(e,t),D()(e,[{key:"onInit",value:function(){this.panel.visible=!0,framework.ContainerView.visibleChildren(this.panel,!0),this.updateSpeechBubble()}},{key:"goToMenu",value:function(){this.soundService.playSound("sfx-press-main-menu-button-when-browsing.mp3",Z.DEFAULT),this.context.currentState=this.mainState}},{key:"onDeinit",value:function(){this.panel.visible=!1,this.soundService.stopVo()}},{key:"updateSpeechBubble",value:function(){}},{key:"getHomeButton",value:function(){return this.panel.getChildByName("homeButton")}},{key:"getBuyButton",value:function(){return framework.ContainerView.getChildByNameRecursive(this.panel,"nextButton")}},{key:"getCancelButton",value:function(){return framework.ContainerView.getChildByNameRecursive(this.panel,"previousButton")}},{key:"createItemDisplay",value:function(t){var e=window.app.createView(t);return e.position=this.spritePosition,this.placeholderParent.addChild(e),this.setButtonEventOnSpine(e),e}},{key:"setButtonEventOnSpine",value:function(t){this.buttonHandler.setButtonPressedListener(t,(function(){if(t instanceof framework.SpineView&&t.spineData.animations.length>=1){t.autoUpdate=!0;var e=t.spineData.animations[0];t.state.setAnimation(0,e.name,!1)}}))}}]),e}(Zt),re=function(t){function e(t,i,n,o,s){var a;return L()(this,e),a=O()(this,U()(e).call(this,t,i,n)),j()(R()(a),"browseState",null),j()(R()(a),"tradeState",null),a.panel=t,a.buttonHandler=i,a.browseState=o,a.tradeState=s,a.buttonHandler.setButtonPressedListener(a.getBuyButton(),(function(){a.soundService.playSound("sfx-press-trade-buy-option-button-on-the-shop.mp3",Z.DEFAULT),a.goToBrowse()})),a.buttonHandler.setButtonPressedListener(a.getTradeButton(),(function(){a.soundService.playSound("sfx-press-trade-buy-option-button-on-the-shop.mp3",Z.DEFAULT),a.goToTrade()})),a}return K()(e,t),D()(e,[{key:"getBuyButton",value:function(){return this.panel.getChildByName("buyButton")}},{key:"getTradeButton",value:function(){return this.panel.getChildByName("tradeButton")}},{key:"goToBrowse",value:function(){this.context.currentState=this.browseState}},{key:"goToTrade",value:function(){this.context.currentState=this.tradeState}},{key:"updateSpeechBubble",value:function(){this.speechBubbleLabel.text=this.cybermallState.getDialogue(zt.main_1),this.soundService.playSound(this.cybermallState.getVo(zt.main_1))}}]),e}(ae),he=function(){function t(e,i,n,o){L()(this,t),j()(this,"layout",null),j()(this,"itemBoxPrefab",null),j()(this,"nbOfItemsPerPage",6),j()(this,"columns",3),j()(this,"previousButton",null),j()(this,"nextButton",null),j()(this,"items",[]),j()(this,"currentPage",0),j()(this,"xSpacing",16),j()(this,"ySpacing",3),j()(this,"leftPadding",0),j()(this,"topPadding",0),j()(this,"layoutHeight",300),j()(this,"layoutWidth",550),j()(this,"layoutAnchorX",.5),j()(this,"layoutAnchorY",.5),j()(this,"loader",void 0),j()(this,"buttonHandler",void 0),j()(this,"diService",void 0),j()(this,"soundService",void 0),j()(this,"itemTemplates",[]),j()(this,"delegate",null),this.buttonHandler=e,this.diService=i,this.soundService=i.get(st.b.SoundService),this.delegate=n,this.loader=o}return D()(t,[{key:"reloadData",value:function(){var t=this.currentPage*this.nbOfItemsPerPage,e=t+this.nbOfItemsPerPage;this.loadItems(t,e),this.udpateButtonsState()}},{key:"loadItems",value:function(t,e){var i=this;this.layout.removeChildren();for(var n=0;n<this.itemTemplates.length;n++){this.itemTemplates[n].deinit()}this.itemTemplates.clear(),this.getSpriteFrames(t,e,(function(t){t?t.forEach(i.createItemSlot.bind(i)):console.error("no items to display")}))}},{key:"getSpriteFrames",value:function(t,e,i){var n=this,o=this.items.slice(t,e),s=this.prepareItemArray(o),a=[];s.forEach((function(t){n.loader.resources[t.id]||n.loader.add(t.id,window.app.devpath(t.path))})),this.loader.load((function(t,e){o.forEach((function(t){e[t.id]&&a.push({item:t})})),i(a)}))}},{key:"prepareItemArray",value:function(t){var e={};return t.forEach((function(t){e.hasOwnProperty(t.name)||(e[t.name]=t)})),Object.values(e).map((function(t){return{path:t.path,id:t.id}}))}},{key:"createItemSlot",value:function(t){var e=window.app.createChildViews(this.itemBoxPrefab)[0];if(e){var i=this.getInitialisedItemTemplate(e,t.item);this.itemTemplates.push(i),e.position=this.computePosition(e),this.layout.addChild(e)}}},{key:"computePosition",value:function(t){for(var e=0;e<this.columns;e++){var i=this.layout.children.length,n=this.columns*e+this.columns,o=this.columns*e;if(i<n&&i>=o)return this.getCenteredPosition(t,i,o,e)}}},{key:"getCenteredPosition",value:function(t,e,i,o){var s=this.leftPadding+(e-i)*(t.width+this.xSpacing),a=this.topPadding+o*(t.height+this.ySpacing);return s=s-this.layoutWidth*this.layoutAnchorX+t.width*t.anchor.x,a=a-this.layoutHeight*this.layoutAnchorY+t.height*t.anchor.y,new n.Point(s,a)}},{key:"nextPage",value:function(){this.currentPage<this.getLimit()&&(this.soundService.playSound("sfx-press-trade-buy-option-button-on-the-shop.mp3",Z.G2),this.currentPage++,this.reloadData()),this.udpateButtonsState()}},{key:"previousPage",value:function(){this.currentPage>0&&(this.soundService.playSound("sfx-press-trade-buy-option-button-on-the-shop.mp3",Z.G2),this.currentPage--,this.reloadData()),this.udpateButtonsState()}},{key:"getLimit",value:function(){return Math.ceil(this.items.length/this.nbOfItemsPerPage)-1}},{key:"udpateButtonsState",value:function(){this.previousButton&&(this.previousButton.visible=this.currentPage>0),this.nextButton&&(this.nextButton.visible=this.currentPage<this.getLimit())}}]),t}(),ue=function(){function t(e,i,n,o,s,a){L()(this,t),j()(this,"item",null),j()(this,"itemSize",170),j()(this,"view",null),j()(this,"sprite",null),j()(this,"button",null),j()(this,"spine",null),j()(this,"buttonHandler",null),j()(this,"soundService",null),j()(this,"viewConfig",null),j()(this,"resources",null),j()(this,"itemSelectedSetup",!1),j()(this,"delegate",null),this.buttonHandler=e,this.soundService=i.get(st.b.SoundService),this.resources=n,this.view=o,this.item=s,this.delegate=a,this.init()}return D()(t,[{key:"init",value:function(){this.sprite=this.view.getChildByName("sprite");var t=this.sprite.parent,e=this.view.getChildByName("Background");this.button=e,this.view.anchor||(this.view.anchor=this.button.anchor);var i=this.resources[this.item.id];this.isSpine(i)?(this.createSpine(i,t),this.viewConfig=this.spine.viewConfig):(this.sprite.texture=this.resources[this.item.id].texture,this.viewConfig=this.sprite.viewConfig,this.viewConfig.texture=this.sprite.texture,this.viewConfig.textureName=null),this.populateView()}},{key:"createSpine",value:function(t,e){this.spine=new framework.SpineView({name:this.item.name,type:"spine",alpha:1,isVisible:!0,spineData:t.spineData,autoUpdate:!1,anchor:this.sprite.anchor,position:this.sprite.position}),e.removeChild(this.sprite),this.sprite.destroy(),this.sprite=null,e.addChildAt(this.spine,1)}},{key:"populateView",value:function(){this.itemSelectedSetup=!0,this.buttonHandler.setButtonPressedListener(this.view,this.onSelected.bind(this))}},{key:"onSelected",value:function(){this.delegate&&(this.soundService.playSound("sfx-press-trade-buy-option-button-on-the-shop.mp3",Z.G2),this.delegate.onItemInteracted(this.item,this.viewConfig))}},{key:"isSpine",value:function(t){return t&&null!=t.spineData}},{key:"getWidth",value:function(){return this.itemSize}},{key:"getHeight",value:function(){return this.itemSize}},{key:"deinit",value:function(){this.itemSelectedSetup&&this.buttonHandler.removeButtonPressedListener(this.view)}}]),t}(),le=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"priceLabel",null),i}return K()(e,t),D()(e,[{key:"populateView",value:function(){W()(U()(e.prototype),"populateView",this).call(this),this.priceLabel=framework.ContainerView.getChildByNameRecursive(this.view,"price"),this.priceLabel.text=this.item.price.toString(),this.priceLabel.centerInParent()}},{key:"getItemName",value:function(){return this.item.name}}]),e}(ue),ce=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),D()(e,[{key:"getInitialisedItemTemplate",value:function(t,e){return new le(this.buttonHandler,this.diService,this.loader.resources,t,e,this.delegate)}}]),e}(he),de=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"gameItemsJson",null),j()(R()(i),"shopItemsJson",null),i}return K()(e,t),D()(e,[{key:"onInit",value:function(){W()(U()(e.prototype),"onInit",this).call(this),this.refreshItems(),this.delayedSpeechDialogue()}},{key:"refreshItems",value:function(){}}]),e}(ae),pe=function(t){function e(t,i,n,o,s){var a;return L()(this,e),a=O()(this,U()(e).call(this,t,i,n)),j()(R()(a),"nextState",null),j()(R()(a),"shopItemService",null),j()(R()(a),"shopItemLayout",null),j()(R()(a),"shopItems",[]),j()(R()(a),"clerkLines",{noItems:zt.browse_1,hasItems:zt.browse_2}),a.panel=t,a.buttonHandler=i,a.shopItemService=s,a.initItemLayout(n,o),a.initLayout(),a}return K()(e,t),D()(e,[{key:"initItemLayout",value:function(t,e){this.shopItemLayout=new ce(this.buttonHandler,t,this,e)}},{key:"initLayout",value:function(){this.shopItemLayout.layout=this.panel.getChildByName("layout"),this.shopItemLayout.previousButton=this.panel.getChildByName("previousButton"),this.shopItemLayout.nextButton=this.panel.getChildByName("nextButton"),this.shopItemLayout.itemBoxPrefab=un.getLoadedAsset("itemBoxViewConfig"),this.buttonHandler.setButtonPressedListener(this.getHomeButton(),this.goToMenu.bind(this)),this.buttonHandler.setButtonPressedListener(this.shopItemLayout.previousButton,this.shopItemLayout.previousPage.bind(this.shopItemLayout)),this.buttonHandler.setButtonPressedListener(this.shopItemLayout.nextButton,this.shopItemLayout.nextPage.bind(this.shopItemLayout))}},{key:"onInit",value:function(){this.shopItemLayout.delegate=this,W()(U()(e.prototype),"onInit",this).call(this)}},{key:"refreshItems",value:function(){var t=un.getLoadedAsset("gameShopItems"),e=un.getLoadedAsset("gameItems");this.shopItems=this.shopItemService.getAvailableShopItems(t,e),this.updateSpeechBubble(),this.shopItemLayout.items=this.shopItems,this.shopItemLayout.reloadData()}},{key:"delayedSpeechDialogue",value:function(){var t=this.clerkLines.noItems;this.shopItems.length>0&&(t=this.clerkLines.hasItems),this.speechBubbleLabel.text=this.cybermallState.getDialogue(t),this.soundService.playVo(this.cybermallState.getVo(t))}},{key:"onItemInteracted",value:function(t,e){this.nextState.init(t,e),this.context.currentState=this.nextState}}]),e}(de),ve=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),D()(e,[{key:"getItemName",value:function(){return this.item.name}}]),e}(ue),fe=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),D()(e,[{key:"getInitialisedItemTemplate",value:function(t,e){return new ve(this.buttonHandler,this.diService,this.loader.resources,t,e,this.delegate)}}]),e}(he),me=function(t){function e(t,i,n,o,s){var a;L()(this,e),a=O()(this,U()(e).call(this,t,i,n)),j()(R()(a),"nextState",null),j()(R()(a),"tradeItemService",null),j()(R()(a),"tradeItemLayout",null),j()(R()(a),"shopItems",[]),a.panel=t,a.buttonHandler=i;var r=new fe(a.buttonHandler,n,R()(a),o);return r.layout=a.panel.getChildByName("layout"),r.previousButton=a.panel.getChildByName("previousButton"),r.nextButton=a.panel.getChildByName("nextButton"),r.itemBoxPrefab=un.getLoadedAsset("tradeBoxViewConfig"),a.tradeItemLayout=r,a.tradeItemService=s,a.buttonHandler.setButtonPressedListener(a.getHomeButton(),a.goToMenu.bind(R()(a))),a.buttonHandler.setButtonPressedListener(r.previousButton,r.previousPage.bind(r)),a.buttonHandler.setButtonPressedListener(r.nextButton,r.nextPage.bind(r)),a}return K()(e,t),D()(e,[{key:"onLoad",value:function(){this.tradeItemLayout.delegate=this}},{key:"refreshItems",value:function(){var t=un.getLoadedAsset("gameShopTradeItems"),e=un.getLoadedAsset("gameItems");this.shopItems=this.tradeItemService.getAvailableShopTradeItems(t,e),this.tradeItemLayout.items=this.shopItems,this.tradeItemLayout.reloadData()}},{key:"delayedSpeechDialogue",value:function(){var t=zt.browse_1;this.shopItems.length>0&&(t=zt.trade_1),this.speechBubbleLabel.text=this.cybermallState.getDialogue(t),this.soundService.playSound(this.cybermallState.getVo(t))}},{key:"onItemInteracted",value:function(t,e){this.nextState.init(t,e),this.context.currentState=this.nextState}}]),e}(de),ye=function(t){function e(t,i,n,o,s){var a;return L()(this,e),a=O()(this,U()(e).call(this,t,i,n)),j()(R()(a),"nextState",null),j()(R()(a),"browseState",null),j()(R()(a),"shopItemService",null),j()(R()(a),"sprite",null),j()(R()(a),"userSnelfusAmount",null),j()(R()(a),"itemCost",null),j()(R()(a),"finalAmount",null),j()(R()(a),"itemView",null),j()(R()(a),"viewConfig",null),j()(R()(a),"newSnelfusAmout",0),j()(R()(a),"shopItem",null),j()(R()(a),"noSnelfusMessage","Whoops! You don't have enough snelfus to buy that."),a.panel=t,a.buttonHandler=i,a.browseState=o,a.shopItemService=s,a.initLayout(),a}return K()(e,t),D()(e,[{key:"initLayout",value:function(){var t=this;this.buttonHandler.setButtonPressedListener(this.getHomeButton(),this.goToMenu.bind(this)),this.buttonHandler.setButtonPressedListener(this.getCancelButton(),(function(){t.soundService.playSound("sfx-buy-button-pressed.mp3",Z.DEFAULT),t.cancel()})),this.buttonHandler.setButtonPressedListener(this.getBuyButton(),(function(){t.soundService.playSound("sfx-buy-button-pressed.mp3",Z.DEFAULT),t.buy()})),this.sprite=framework.ContainerView.getChildByNameRecursive(this.panel,"sprite"),this.spritePosition=this.sprite.position,this.placeholderParent=this.sprite.parent,this.placeholderParent.removeChild(this.sprite),this.userSnelfusAmount=framework.ContainerView.getChildByNameRecursive(this.panel,"userSnelfus"),this.itemCost=framework.ContainerView.getChildByNameRecursive(this.panel,"itemPrice"),this.finalAmount=framework.ContainerView.getChildByNameRecursive(this.panel,"finalPrice")}},{key:"init",value:function(t,e){this.shopItem=t,this.viewConfig=e,this.itemView=this.createItemDisplay(this.viewConfig);var i=this.walletService.balance;this.userSnelfusAmount.text=i.toString(),this.itemCost.text="-"+t.price.toString(),this.newSnelfusAmout=i-t.price,this.finalAmount.text=this.newSnelfusAmout.toString()}},{key:"buy",value:function(){this.newSnelfusAmout<0?(this.frameService.popupDialog.setText(this.noSnelfusMessage),this.frameService.popupDialog.showYesOnly()):(this.walletService.debit(this.shopItem.price,"Bought a "+this.shopItem.title+"."),this.shopItemService.updatePurchasesForMerchant(this.shopItem.shopItemId,this.shopItemService.getMerchantName()),Ht.addItemToInventory(this.shopItem.id),this.nextState.init(this.shopItem,this.viewConfig),this.context.currentState=this.nextState)}},{key:"cancel",value:function(){this.context.currentState=this.browseState}},{key:"onDeinit",value:function(){this.placeholderParent.removeChild(this.itemView),this.buttonHandler.removeButtonPressedListener(this.itemView),this.itemView.destroy(),W()(U()(e.prototype),"onDeinit",this).call(this)}}]),e}(ae),ge=function(t){function e(t,i,n,o,s,a,r){var h,u=arguments.length>7&&void 0!==arguments[7]&&arguments[7];return L()(this,e),h=O()(this,U()(e).call(this,t,i,n,o,r,u)),j()(R()(h),"tradableItemIds",void 0),j()(R()(h),"tradeId",void 0),h.tradableItemIds=s,h.tradeId=a,h}return K()(e,t),e}(Ut),we=function(t){function e(t,i,n,o){var s;return L()(this,e),s=O()(this,U()(e).call(this,t,i,n)),j()(R()(s),"browseState",null),j()(R()(s),"sprite",null),j()(R()(s),"description",null),j()(R()(s),"itemView",null),j()(R()(s),"viewConfig",null),s.panel=t,s.buttonHandler=i,s.browseState=o,s.buttonHandler.setButtonPressedListener(s.getHomeButton(),s.goToMenu.bind(R()(s))),s.buttonHandler.setButtonPressedListener(s.getBuyButton(),s.goToBrowse.bind(R()(s))),s.sprite=framework.ContainerView.getChildByNameRecursive(s.panel,"sprite"),s.spritePosition=s.sprite.position,s.placeholderParent=s.sprite.parent,s.placeholderParent.removeChild(s.sprite),s.description=framework.ContainerView.getChildByNameRecursive(s.panel,"shopBoxDescription"),s}return K()(e,t),D()(e,[{key:"init",value:function(t,e){this.viewConfig=e,this.itemView=this.createItemDisplay(this.viewConfig),this.setDescription(t)}},{key:"setDescription",value:function(t){var e=zt.purchase_1;t.isDecoration||(e=t instanceof ge?zt.trade_2:zt.purchase_2),this.description.text=this.cybermallState.getDialogue(e),this.speechBubbleLabel.text=this.cybermallState.getDialogue(e),this.soundService.playSound(this.cybermallState.getVo(e))}},{key:"goToBrowse",value:function(){this.soundService.playSound("sfx-press-main-menu-button-when-browsing.mp3",Z.DEFAULT),this.context.currentState=this.browseState}},{key:"onDeinit",value:function(){this.placeholderParent.removeChild(this.itemView),this.buttonHandler.removeButtonPressedListener(this.itemView),this.itemView.destroy(),W()(U()(e.prototype),"onDeinit",this).call(this)}}]),e}(ae),be=function(t){function e(t,i,n,o){var s;return L()(this,e),(s=O()(this,U()(e).call(this,t,i,n,o))).panel=t,s.buttonHandler=i,s.buttonHandler.setButtonPressedListener(s.getHomeButton(),s.goToMenu.bind(R()(s))),s.buttonHandler.setButtonPressedListener(s.getBuyButton(),s.goToBrowse.bind(R()(s))),s}return K()(e,t),e}(we),ke=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"nbOfItemsPerPage",2),j()(R()(i),"columns",2),j()(R()(i),"leftPadding",35),j()(R()(i),"xSpacing",50),j()(R()(i),"layoutWidth",350),j()(R()(i),"layoutHeight",130),i}return K()(e,t),D()(e,[{key:"getInitialisedItemTemplate",value:function(t,e){return new ve(this.buttonHandler,this.diService,this.loader.resources,t,e,this.delegate)}}]),e}(he);String.prototype.capitalise=function(){return this[0].toUpperCase()+this.slice(1)};var Se,_e=function(t){function e(t,i,n,o,s,a){var r;L()(this,e),r=O()(this,U()(e).call(this,t,i,n)),j()(R()(r),"nextState",null),j()(R()(r),"browseState",null),j()(R()(r),"tradeItemService",null),j()(R()(r),"layout",null),j()(R()(r),"sprite",null),j()(R()(r),"tradeItem",null),j()(R()(r),"viewConfig",null),j()(R()(r),"itemView",null),r.panel=t,r.buttonHandler=i,r.tradeItemService=a,r.browseState=o;var h=new ke(r.buttonHandler,r.diService,R()(r),s);return h.layout=framework.ContainerView.getChildByNameRecursive(r.panel,"tradesLayout"),h.itemBoxPrefab=un.getLoadedAsset("tradableBoxViewConfig"),r.layout=h,r.buttonHandler.setButtonPressedListener(r.getHomeButton(),r.goToMenu.bind(R()(r))),r.buttonHandler.setButtonPressedListener(r.getCancelButton(),(function(){r.soundService.playSound("sfx-buy-button-pressed.mp3",Z.DEFAULT),r.cancel()})),r.sprite=framework.ContainerView.getChildByNameRecursive(r.panel,"sprite"),r.spritePosition=r.sprite.position,r.placeholderParent=r.sprite.parent,r.placeholderParent.removeChild(r.sprite),r}return K()(e,t),D()(e,[{key:"init",value:function(t,e){this.tradeItem=t,this.viewConfig=e}},{key:"onInit",value:function(){W()(U()(e.prototype),"onInit",this).call(this),this.itemView=this.createItemDisplay(this.viewConfig),framework.ContainerView.getChildByNameRecursive(this.panel,"shopBoxTitle").text=this.tradeItem.title.capitalise();var t=un.getLoadedAsset("gameItems"),i=this.tradeItemService.getTradableItems(this.tradeItem,t);this.layout.delegate=this,this.layout.items=i,this.layout.reloadData()}},{key:"updateSpeechBubble",value:function(){this.speechBubbleLabel.text=this.cybermallState.getDialogue(zt.trade_3),this.soundService.playSound(this.cybermallState.getVo(zt.trade_3))}},{key:"cancel",value:function(){this.context.currentState=this.browseState}},{key:"onItemInteracted",value:function(t,e){Ht.hasItemInInventory(t.id)?(this.nextState.init(this.tradeItem,t,this.viewConfig),this.context.currentState=this.nextState):(this.frameService.popupDialog.setText("Sorry, you don't own a "+t.title+" to trade."),this.frameService.popupDialog.showYesOnly())}},{key:"onDeinit",value:function(){this.placeholderParent.removeChild(this.itemView),this.buttonHandler.removeButtonPressedListener(this.itemView),this.itemView.destroy(),W()(U()(e.prototype),"onDeinit",this).call(this)}}]),e}(ae),Ce=function(t){function e(t,i,n,o,s){var a;return L()(this,e),a=O()(this,U()(e).call(this,t,i,n)),j()(R()(a),"nextState",null),j()(R()(a),"browseState",null),j()(R()(a),"tradeItemService",null),j()(R()(a),"sprite",null),j()(R()(a),"title",null),j()(R()(a),"description",null),j()(R()(a),"tradeItem",null),j()(R()(a),"userTradableItem",null),j()(R()(a),"viewConfig",null),j()(R()(a),"itemView",null),a.panel=t,a.buttonHandler=i,a.browseState=o,a.tradeItemService=s,a.buttonHandler.setButtonPressedListener(a.getHomeButton(),a.goToMenu.bind(R()(a))),a.buttonHandler.setButtonPressedListener(a.getCancelButton(),(function(){a.soundService.playSound("sfx-buy-button-pressed.mp3",Z.DEFAULT),a.cancel()})),a.buttonHandler.setButtonPressedListener(a.getBuyButton(),(function(){a.soundService.playSound("sfx-buy-button-pressed.mp3",Z.DEFAULT),a.trade()})),a.sprite=framework.ContainerView.getChildByNameRecursive(a.panel,"sprite"),a.spritePosition=a.sprite.position,a.placeholderParent=a.sprite.parent,a.placeholderParent.removeChild(a.sprite),a.title=framework.ContainerView.getChildByNameRecursive(a.panel,"shopBoxTitle"),a.description=framework.ContainerView.getChildByNameRecursive(a.panel,"shopBoxDescription"),a}return K()(e,t),D()(e,[{key:"init",value:function(t,e,i){this.tradeItem=t,this.userTradableItem=e,this.viewConfig=i}},{key:"onInit",value:function(){W()(U()(e.prototype),"onInit",this).call(this),this.itemView=this.createItemDisplay(this.viewConfig),this.title.text=this.tradeItem.title.capitalise();var t="You will trade your "+this.userTradableItem.title+" for my "+this.tradeItem.title;this.description.text=t}},{key:"updateSpeechBubble",value:function(){this.speechBubbleLabel.text=this.cybermallState.getDialogue(zt.trade_4),this.soundService.playSound(this.cybermallState.getVo(zt.trade_4))}},{key:"trade",value:function(){this.tradeItemService.updateTradedForMerchant(this.tradeItem.tradeId,this.tradeItemService.getMerchantName()),Ht.removeInventoryItem(this.userTradableItem.id),Ht.addItemToInventory(this.tradeItem.id),this.nextState.init(this.tradeItem,this.viewConfig),this.context.currentState=this.nextState}},{key:"cancel",value:function(){this.context.currentState=this.browseState}},{key:"onDeinit",value:function(){this.placeholderParent.removeChild(this.itemView),this.buttonHandler.removeButtonPressedListener(this.itemView),this.itemView.destroy(),W()(U()(e.prototype),"onDeinit",this).call(this)}}]),e}(ae),Pe=function(t){function e(t,i,n,o){var s;return L()(this,e),s=O()(this,U()(e).call(this,t,i,n)),j()(R()(s),"nextState",null),j()(R()(s),"browseState",null),j()(R()(s),"sprite",null),j()(R()(s),"titleLabel",null),j()(R()(s),"descriptionLabel",null),j()(R()(s),"priceLabel",null),j()(R()(s),"shopItem",null),j()(R()(s),"viewConfig",null),j()(R()(s),"itemView",null),j()(R()(s),"clerkLines",[zt.summary_1,zt.summary_2,zt.summary_4,zt.summary_3]),s.panel=t,s.buttonHandler=i,s.browseState=o,s.initCommonLayout(),s.initLayout(),s}return K()(e,t),D()(e,[{key:"initCommonLayout",value:function(){this.buttonHandler.setButtonPressedListener(this.getHomeButton(),this.goToMenu.bind(this)),this.buttonHandler.setButtonPressedListener(this.getCancelButton(),this.cancel.bind(this)),this.buttonHandler.setButtonPressedListener(this.getBuyButton(),this.buy.bind(this)),this.sprite=framework.ContainerView.getChildByNameRecursive(this.panel,"sprite"),this.spritePosition=this.sprite.position,this.placeholderParent=this.sprite.parent,this.placeholderParent.removeChild(this.sprite)}},{key:"initLayout",value:function(){this.titleLabel=framework.ContainerView.getChildByNameRecursive(this.panel,"shopBoxTitle"),this.priceLabel=framework.ContainerView.getChildByNameRecursive(this.panel,"price"),this.descriptionLabel=framework.ContainerView.getChildByNameRecursive(this.panel,"shopBoxDescription")}},{key:"init",value:function(t,e){this.shopItem=t,this.viewConfig=e,this.itemView=this.createItemDisplay(this.viewConfig),this.titleLabel.text=t.title,this.priceLabel.text=t.price.toString(),this.positionSnuffleSymbol(),this.descriptionLabel.text=t.description}},{key:"setNextState",value:function(t){if(!(t instanceof ye))throw"expect PurchaseSummaryShopState";this.nextState=t}},{key:"positionSnuffleSymbol",value:function(){framework.ContainerView.getChildByNameRecursive(this.panel,"sufflesSymbol").x=this.priceLabel.x-this.priceLabel.width-20}},{key:"updateSpeechBubble",value:function(){var t=Math.floor(Math.random()*this.clerkLines.length);this.speechBubbleLabel.text=this.cybermallState.getDialogue(this.clerkLines[t]),this.soundService.playSound(this.cybermallState.getVo(this.clerkLines[t]))}},{key:"buy",value:function(){this.soundService.playSound("sfx-buy-button-pressed.mp3",Z.DEFAULT),this.nextState.init(this.shopItem,this.viewConfig),this.context.currentState=this.nextState}},{key:"cancel",value:function(){this.soundService.playSound("sfx-buy-button-pressed.mp3",Z.DEFAULT),this.context.currentState=this.browseState}},{key:"onDeinit",value:function(){this.placeholderParent.removeChild(this.itemView),this.buttonHandler.removeButtonPressedListener(this.itemView),this.itemView.destroy(),this.itemView=null,W()(U()(e.prototype),"onDeinit",this).call(this)}}]),e}(ae),xe=i(70),Be=function(){function t(){L()(this,t),j()(this,"backgroundSprite",null),j()(this,"startShopState",null),j()(this,"binky",null),j()(this,"creech",null),j()(this,"witch",null),j()(this,"mrZ",null),j()(this,"merchantName",null),j()(this,"context",new xe.a),j()(this,"cybermallState",void 0)}return D()(t,[{key:"onLoad",value:function(){this.merchantName=this.cybermallState.getCurrentMerchant(),this.context.currentState=this.startShopState,this.updateMerchantAnim()}},{key:"updateMerchantAnim",value:function(){switch(this.merchantName){case"binky":this.binky.visible=!0,this.witch.visible=!1,this.creech.visible=!1,this.mrZ.visible=!1;break;case"creech":this.binky.visible=!1,this.witch.visible=!1,this.creech.visible=!0,this.mrZ.visible=!1;break;case"wicked":this.binky.visible=!1,this.witch.visible=!0,this.creech.visible=!1,this.mrZ.visible=!1;break;case"mr-z":this.binky.visible=!1,this.witch.visible=!1,this.creech.visible=!1,this.mrZ.visible=!0}}}]),t}(),Ie=function(t){function e(t,i,n,o,s,a,r){var h,u=arguments.length>7&&void 0!==arguments[7]&&arguments[7];return L()(this,e),h=O()(this,U()(e).call(this,t,i,n,o,r,u)),j()(R()(h),"shopItemId",void 0),j()(R()(h),"price",void 0),h.shopItemId=s,h.price=a,h}return K()(e,t),e}(Ut),Ae=function(){function t(){L()(this,t),j()(this,"cybermallState",void 0)}return D()(t,[{key:"getAvailableShopItems",value:function(t,e){var i=this.getMerchantName(),n=t[i],o=Ct.getPurchasedItems()[i],s=this.removePurchasedItems(n,o);return this.parseShopItems(s,e)}},{key:"getMerchantName",value:function(){var t=this.cybermallState.getCurrentMerchant();return t||(console.warn("no marchant name defaulting to creech"),t="shopCreech"),t}},{key:"removePurchasedItems",value:function(t,e){if(!e)return t;for(var i=0;i<e.length;i++)for(var n=e[i],o=0;o<t.length;o++){if(t[o].id===n){t.splice(o,1);break}}return t}},{key:"parseShopItems",value:function(t,e){return t.map((function(t){var i=e[t.itemId];return new Ie(i.id,i.imageName,i.title,i.description,t.id,t.price,i.path,i.isDecor)}))}},{key:"updatePurchasesForMerchant",value:function(t,e){var i=Ct.getPurchasedItems(),n=i[e];n||(n=[]),n.push(t),i[e]=n,Ct.updatePurchasedItems(i)}}]),t}(),Te=function(){function t(){L()(this,t),j()(this,"cybermallState",void 0)}return D()(t,[{key:"getAvailableShopTradeItems",value:function(t,e){var i=this.getMerchantName(),n=t[i],o=Ct.getTradedItems()[i],s=this.removeTradedItems(n,o);return this.parseTradeItems(s,e)}},{key:"getMerchantName",value:function(){var t=this.cybermallState.getCurrentMerchant();return t||(console.warn("no marchant name defaulting to creech"),t="creech"),t}},{key:"removeTradedItems",value:function(t,e){if(!e)return t;for(var i=0;i<e.length;i++)for(var n=e[i],o=0;o<t.length;o++){if(t[o].id===n){t.splice(o,1);break}}return t}},{key:"parseTradeItems",value:function(t,e){return t.map((function(t){var i=e[t.itemId];return new ge(i.id,i.imageName,i.title,i.description,t.trades,t.id,i.path,i.isDecor)}))}},{key:"updateTradedForMerchant",value:function(t,e){var i=Ct.getTradedItems(),n=i[e];n||(n=[]),n.push(t),i[e]=n,Ct.updateTradedItems(i)}},{key:"getTradableItems",value:function(t,e){return e?t.tradableItemIds.map((function(t){var i=e[t];return new Ut(i.id,i.imageName,i.title,i.description,i.path)})):[]}}]),t}(),Ne=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"cybermallState",void 0),j()(R()(i),"shopService",new Be),j()(R()(i),"shopItemService",new Ae),j()(R()(i),"tradeItemService",new Te),j()(R()(i),"states",void 0),j()(R()(i),"browseState",void 0),j()(R()(i),"itemSummaryShopState",void 0),j()(R()(i),"browseTradeState",void 0),j()(R()(i),"mainMenuShopState",void 0),j()(R()(i),"purchaseSummaryShopState",void 0),j()(R()(i),"finalPurchaseShopState",void 0),j()(R()(i),"tradeOptionShopState",void 0),j()(R()(i),"tradeSummaryShopState",void 0),j()(R()(i),"finalTradeShopState",void 0),j()(R()(i),"loader",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-shops-loop.mp3");var i=this.view.getChildByName("exitButton");this.loader=new PIXI.loaders.Loader,this.cybermallState=this.diService.getDataByKey(st.a.CyberMallState),this.cybermallState||(console.warn("cybermallState not found, defaulting to mock"),this.cybermallState=new ne,this.cybermallState.setCurrentMerchant(an.shopBinky)),this.shopService.cybermallState=this.cybermallState,this.shopItemService.cybermallState=this.cybermallState,this.tradeItemService.cybermallState=this.cybermallState,this.setButtonPressedListener(i,(function(){t.soundService.playSound("sfx-press-main-menu-button-when-browsing.mp3",Z.DEFAULT),t.navigationService.goToScene(t.cybermallState.getCurrentMerchant())})),this.setupClerk(),this.initStates(),this.shopService.startShopState=this.mainMenuShopState,this.setupStateNavigation(),this.initBubbleSpeechForAllStates(),this.shopService.onLoad()}},{key:"setupClerk",value:function(){var t=new Map([[an.shopBinky,"binkyUI"],[an.shopWicked,"wickyUI"],[an.shopGollywood,"MrZ-anim"],[an.shopCreech,"creech"]]);framework.ContainerView.getChildByNameRecursive(this.view,t.get(this.cybermallState.getCurrentMerchant())).visible=!0}},{key:"initStates",value:function(){this.browseState=this.createBrowseShopState(),this.itemSummaryShopState=this.createItemSummaryState(),this.purchaseSummaryShopState=this.createPurchaseSummaryState(),this.finalPurchaseShopState=this.createFinalPurchaseState(),this.browseTradeState=this.createBrowseTradeShopState(),this.tradeOptionShopState=this.createTradeOptionsShopState(),this.tradeSummaryShopState=this.createTradeSummaryShopState(),this.finalTradeShopState=this.createFinalTradeShopState(),this.mainMenuShopState=this.createMainMenuState(),this.states=[this.mainMenuShopState,this.browseState,this.browseTradeState,this.itemSummaryShopState,this.purchaseSummaryShopState,this.finalPurchaseShopState,this.tradeOptionShopState,this.tradeSummaryShopState,this.finalTradeShopState]}},{key:"createBrowseShopState",value:function(){return new pe(this.view.getChildByName("browsePanel"),this,this.diService,this.loader,this.shopItemService)}},{key:"createItemSummaryState",value:function(){return new Pe(this.view.getChildByName("ItemSummary"),this,this.diService,this.browseState)}},{key:"createPurchaseSummaryState",value:function(){return new ye(this.view.getChildByName("ItemPurchaseSummary"),this,this.diService,this.browseState,this.shopItemService)}},{key:"createFinalPurchaseState",value:function(){return new we(this.view.getChildByName("finalPurchaseScreen"),this,this.diService,this.browseState)}},{key:"createBrowseTradeShopState",value:function(){return new me(this.view.getChildByName("browseTradePanel"),this,this.diService,this.loader,this.tradeItemService)}},{key:"createTradeOptionsShopState",value:function(){return new _e(this.view.getChildByName("ItemTradeOptions"),this,this.diService,this.browseTradeState,this.loader,this.tradeItemService)}},{key:"createTradeSummaryShopState",value:function(){return new Ce(this.view.getChildByName("ItemTradeSummary"),this,this.diService,this.browseTradeState,this.tradeItemService)}},{key:"createFinalTradeShopState",value:function(){return new be(this.view.getChildByName("finalTradeScreen"),this,this.diService,this.browseTradeState)}},{key:"createMainMenuState",value:function(){return new re(this.view.getChildByName("mainMenuPanel"),this,this.diService,this.browseState,this.browseTradeState)}},{key:"setupStateNavigation",value:function(){var t=this;this.states.forEach((function(e){e.mainState=t.mainMenuShopState})),this.browseState.nextState=this.itemSummaryShopState,this.itemSummaryShopState.nextState=this.purchaseSummaryShopState,this.purchaseSummaryShopState.nextState=this.finalPurchaseShopState,this.browseTradeState.nextState=this.tradeOptionShopState,this.tradeSummaryShopState.nextState=this.finalTradeShopState,this.tradeOptionShopState.nextState=this.tradeSummaryShopState}},{key:"initBubbleSpeechForAllStates",value:function(){var t=this.view.getChildByName("speechWindow").children[0];this.states.forEach((function(e){e.speechBubbleLabel=t}))}},{key:"destroy",value:function(){this.loader.reset(),W()(U()(e.prototype),"destroy",this).call(this)}}]),e}(It),Le=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"cybermallState",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-shops-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position;var i=this.view.getChildByName("exitButton");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint0,an.cybermall)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.northEast));var n=this.view.getChildByName("wallsCollider");this.setButtonPressedListener(n,this.navigationService.goToScene.bind(this.navigationService,an.shop)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.cybermall&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.findPathTo(this.spawnTarget0))}}]),e}(It),Me=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"cybermallState",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-shops-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position;var i=this.view.getChildByName("exitButtonLeft");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint0,an.cybermall)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.northEast));var n=this.view.getChildByName("wallsCollider");this.setButtonPressedListener(n,this.navigationService.goToScene.bind(this.navigationService,an.shop)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.cybermall&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}}]),e}(It),De=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"cybermallState",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-shops-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position;var i=this.view.getChildByName("exitButton");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint0,an.cybermall)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.northWest));var n=this.view.getChildByName("wallsCollider");this.setButtonPressedListener(n,this.navigationService.goToScene.bind(this.navigationService,an.shop)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.cybermall&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.findPathTo(this.spawnTarget0))}}]),e}(It),Ve=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"exitButtonLeft",null),j()(R()(i),"exitButtonRight",null),j()(R()(i),"exitButtonBottom",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget1",void 0),j()(R()(i),"spawnPoint2",void 0),j()(R()(i),"spawnTarget2",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnPoint2=this.view.getChildByName("spawnPoint2").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.spawnTarget2=this.view.getChildByName("spawnTarget2").position,this.soundService.playMusic("music-aquari-yum-loop.mp3"),this.exitButtonLeft=this.view.getChildByName("exitButtonLeft"),this.setButtonPressedListener(this.exitButtonLeft,(function(){t.exitViaSpine(t.exitButtonLeft,t.spawnPoint1,"throne-room-door","open",an.aquariyumThroneRoom,"sfx-sound-when-door-opens-closes-including-the-crab-prince-and-throne-room.mp3")})),this.setupNavigationArrow(this.exitButtonLeft,this.animationService.createArrowAnimation(this.exitButtonLeft,ot.northWest)),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitViaSpine(t.exitButtonRight,t.spawnPoint2,"prince-room-door","open",an.aquariyumPrinceRoom,"sfx-sound-when-door-opens-closes-including-the-crab-prince-and-throne-room.mp3")})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.northEast)),this.exitButtonBottom=this.view.getChildByName("exitButtonBottom"),this.setButtonPressedListener(this.exitButtonBottom,(function(){t.exitOffscreen(t.exitButtonBottom,t.spawnPoint0,an.aquariyumCastle)})),this.setupNavigationArrow(this.exitButtonBottom,this.animationService.createArrowAnimation(this.exitButtonBottom,ot.southEast)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.aquariyumCastle&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.aquariyumThroneRoom&&(this.navMesh.mover.node.position=this.spawnPoint1,this.enterViaSpine(this.spawnTarget1,"throne-room-door","close")),Ct.getPreviousSceneName()==an.aquariyumPrinceRoom&&(this.navMesh.mover.node.position=this.spawnPoint2,this.enterViaSpine(this.spawnTarget2,"prince-room-door","close"))}}]),e}(It),Oe=function(){function t(e,i){L()(this,t),j()(this,"itemPickUpDelegate",null),j()(this,"buttonHandler",null),j()(this,"pickUpItemMap",{}),this.itemPickUpDelegate=e,this.buttonHandler=i,this.pickUpItemMap=this.itemPickUpDelegate.getPickUpItems(),this.init()}return D()(t,[{key:"getPickUpItem",value:function(t){return this.pickUpItemMap[t]}}]),D()(t,[{key:"init",value:function(){for(var t in this.pickUpItemMap)if(this.pickUpItemMap.hasOwnProperty(t)&&this.pickUpItemMap[t].view){var e=this.pickUpItemMap[t].view;e.interactive=!1,e.visible=!1}}},{key:"pickUpActive",value:function(t,e){if(this.isPickUpAllowed(t)){var i=this.pickUpItemMap[t].view;if(i){i.visible=!0;var n=e||this.defaultOnItemPickedUp.bind(this,t);this.buttonHandler.setButtonPressedListener(i,n)}}}},{key:"defaultOnItemPickedUp",value:function(t){if(this.isPickUpAllowed(t)){var e=this.pickUpItemMap[t].view;e&&(this.buttonHandler.removeButtonPressedListener(e),e.visible=!1,this.savePickedUpItem(t),this.itemPickUpDelegate.didPickUpItem(t))}}},{key:"isPickUpAllowed",value:function(t){return!Ct.getPickedUpItems().contains(t)}},{key:"savePickedUpItem",value:function(t){if(this.pickUpItemMap[t]&&this.pickUpItemMap[t].pickUpItemName){Ht.addItemToInventory(this.pickUpItemMap[t].pickUpItemName);var e=Ct.getPickedUpItems();e.contains(t)||(e.push(t),Ct.savePickedUpItems(e))}}}]),t}(),Ee=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"itemPickUpService",null),j()(R()(i),"pickupItemKey",null),j()(R()(i),"pickupItemViewName",null),i}return K()(e,t),D()(e,[{key:"init",value:function(){W()(U()(e.prototype),"init",this).call(this),this.itemPickUpService=new Oe(this,this)}},{key:"getPickUpItems",value:function(){var t={};return t[this.pickupItemKey]={pickUpItemName:this.pickupItemKey,view:this.view.getChildByName(this.pickupItemViewName)},t}},{key:"showPopup",value:function(t){var e=un.getLoadedAsset("gameItems")[this.itemPickUpService.getPickUpItem(t).pickUpItemName].title,i="You've found "+("euioa".includes(e.charAt(0).toLowerCase())?"an":"a")+" "+e+"!";this.frameService.popupDialog.setText(i),this.frameService.popupDialog.showYesOnly()}},{key:"didPickUpItem",value:function(t){this.showPopup(t)}}]),e}(It),Re=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"pickUpItemInfo",null),i}return K()(e,t),D()(e,[{key:"init",value:function(){for(var t in W()(U()(e.prototype),"init",this).call(this),this.pickUpItemInfo)if(this.pickUpItemInfo.hasOwnProperty(t)){var i=this.pickUpItemInfo[t];i&&i.view&&this.setupPickUpItem(t,i.view)}}},{key:"setupPickUpItem",value:function(t,e){this.itemPickUpService.isPickUpAllowed(t)?(this.itemPickUpService.pickUpActive(t,this.progressTreeAnimation.bind(this,t)),e.interactive=!0,this.progressTreeAnimation(t)):(e.visible=!0,e.state.setAnimation(0,"idle3",!0))}},{key:"setupMix",value:function(t){t.stateData.setMix("idle0","drop1",.2),t.stateData.setMix("drop1","idle1",.2),t.stateData.setMix("idle1","drop2",.2),t.stateData.setMix("drop2","idle2",.2),t.stateData.setMix("idle2","drop3",.2),t.stateData.setMix("drop3","collect",.2),t.stateData.setMix("collect","collected",.2),t.stateData.setMix("collected","idle3",.2)}},{key:"progressTreeAnimation",value:function(t){var e=this,i=["idle0","drop1","idle1","drop2","idle2","drop3","collect","collected","idle3"],n=[null,framework.Actions.Sequence([framework.Actions.Func((function(){return e.soundService.playSound("sfx-rustling-cyberries-tree.mp3",Z.C1)})),framework.Actions.Delay(2),framework.Actions.Func((function(){return e.soundService.playSound("sfx-2-cyberries-drop.mp3",Z.C2)}))]),null,framework.Actions.Sequence([framework.Actions.Func((function(){return e.soundService.playSound("sfx-rustling-cyberries-tree.mp3",Z.C1)})),framework.Actions.Delay(1),framework.Actions.Func((function(){return e.soundService.playSound("sfx-2-cyberries-drop.mp3",Z.C2)}))]),null,framework.Actions.Sequence([framework.Actions.Func((function(){return e.soundService.playSound("sfx-rustling-cyberries-tree.mp3",Z.C1)})),framework.Actions.Delay(.7),framework.Actions.Func((function(){return e.soundService.playSound("sfx-2-cyberries-drop.mp3",Z.C2)})),framework.Actions.Delay(.8),framework.Actions.Func((function(){return e.soundService.playSound("sfx-2-cyberries-drop.mp3",Z.C2)})),framework.Actions.Delay(1.5),framework.Actions.Func((function(){return e.soundService.playSound("sfx-cyberries-awaiting-collection.mp3",Z.C3,(function(){}),!0)}))]),null,framework.Actions.Func((function(){return e.soundService.stopSound(Z.C3)})),null],o=this.pickUpItemInfo[t]?this.pickUpItemInfo[t].view:null,s=this.pickUpItemInfo[t]?this.pickUpItemInfo[t].animIndex:0;if(!(s>=i.length)&&o){var a=i.length-2,r=i.length-1;if(s>0&&s<r){var h=n[s];null!=h&&this.runAction(h,void 0,!1);var u={start:function(t){o.interactive=!1},complete:function(n){o.state.removeListener(u),o.state.setAnimation(0,i[s++],!0),e.pickUpItemInfo[t].animIndex=s,o.interactive=!0}};o.state.addListener(u)}s==a&&this.saveProgress(t);var l=0==s||s==r;o.state.setAnimation(0,i[s++],l),this.pickUpItemInfo[t].animIndex=s}}},{key:"saveProgress",value:function(t){this.itemPickUpService.savePickedUpItem(t),this.didPickUpItem(t)}},{key:"destroy",value:function(){W()(U()(e.prototype),"destroy",this).call(this),this.soundService.stopSound(Z.C3)}},{key:"getPickUpItems",value:function(){throw"must be overriden"}}]),e}(Ee),Fe=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"exitButtonTop",null),j()(R()(i),"exitButtonRight",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget1",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.soundService.playMusic("music-aquari-yum-loop.mp3"),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint0,an.aquariyumMuffin)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.southEast)),this.exitButtonTop=this.view.getChildByName("exitButtonTop"),this.setButtonPressedListener(this.exitButtonTop,(function(){t.exitViaSpine(t.exitButtonTop,t.spawnPoint1,"castledoor","open",an.aquariyumCastleInt,"sfx-sound-when-door-opens-closes-including-the-crab-prince-and-throne-room.mp3")})),this.setupNavigationArrow(this.exitButtonTop,this.animationService.createArrowAnimation(this.exitButtonTop,ot.northWest)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.aquariyumMuffin&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.aquariyumCastleInt&&(this.navMesh.mover.node.position=this.spawnPoint1,this.enterViaSpine(this.spawnTarget1,"castledoor","close"))}},{key:"getPickUpItems",value:function(){return this.pickUpItemInfo||(this.pickUpItemInfo={},this.pickUpItemInfo["aquarium-tree-1"]={pickUpItemName:"basket-of-10-cyberries",view:this.view.getChildByName("tree"),animIndex:0},this.pickUpItemInfo["aquarium-tree-2"]={pickUpItemName:"basket-of-10-cyberries",view:this.view.getChildByName("tree copy"),animIndex:0}),this.pickUpItemInfo}}]),e}(Re),Ue=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"exitButtonTop",null),j()(R()(i),"exitButtonBottom",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget1",void 0),j()(R()(i),"spawnPoint2",void 0),j()(R()(i),"spawnTarget2",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnPoint2=this.view.getChildByName("spawnPoint2").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.spawnTarget2=this.view.getChildByName("spawnTarget2").position,this.soundService.playMusic("music-aquari-yum-loop.mp3"),this.exitButtonTop=this.view.getChildByName("exitButtonTop"),this.setButtonPressedListener(this.exitButtonTop,(function(){t.exitOffscreen(t.exitButtonTop,t.spawnPoint2,an.aquariyumManitee)})),this.setupNavigationArrow(this.exitButtonTop,this.animationService.createArrowAnimation(this.exitButtonTop,ot.northWest)),this.exitButtonBottom=this.view.getChildByName("exitButtonBottom"),this.setButtonPressedListener(this.exitButtonBottom,(function(){t.exitOffscreen(t.exitButtonBottom,t.spawnPoint1,an.aquariyumMuffin)})),this.setupNavigationArrow(this.exitButtonBottom,this.animationService.createArrowAnimation(this.exitButtonBottom,ot.southWest));var i=this.view.getChildByName("bluefish");this.runAction(framework.Actions.Parallel([framework.Actions.Sequence([framework.Actions.Delay(5),framework.Actions.Func((function(){return t.soundService.playSound("sfx-shark-swim-by.mp3",Z.C3,(function(){}),!0)}))]),framework.Actions.Sequence([framework.Actions.Tween(i,{from:{x:i.x},to:{x:-950},duration:14}),framework.Actions.Func((function(){return t.soundService.stopSound(Z.C3)}))])]),void 0,!1);var n=this.view.getChildByName("teleExitButton");this.setButtonPressedListener(n,(function(){var e=t.view.getChildByName("spawnPoint0").position;t.exitViaCyberbus(e,"cyberbus","arriveSW")})),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){return Ct.getPreviousSceneName()==an.grandCyberStation?(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnPoint0),void this.enterViaCyberbus("cyberbus","arriveSW",this.spawnTarget0)):(framework.ContainerView.getChildByNameRecursive(this.view,"cyberbus").state.clearTrack(0),Ct.getPreviousSceneName()==an.aquariyumManitee?(this.navMesh.mover.node.position=this.spawnPoint2,void this.navMesh.agent.directlyPathTo(this.spawnTarget2)):Ct.getPreviousSceneName()==an.aquariyumMuffin?(this.navMesh.mover.node.position=this.spawnPoint1,void this.navMesh.agent.directlyPathTo(this.spawnTarget1)):void 0)}}]),e}(It),He=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"manny",i.view.getChildByName("manny")),j()(R()(i),"dialogueUiMediator",null),j()(R()(i),"exitButtonRight",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.soundService.playMusic("music-aquari-yum-loop.mp3"),this.soundService.playSound("sfx-many-snoring-when-at-this-screen.mp3",Z.C2,(function(){}),!0),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint0,an.aquariyumTownCenter)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.southEast));var i=this.view.getChildByName("pinkfish");this.runAction(framework.Actions.Parallel([framework.Actions.Func((function(){return t.soundService.playSound("sfx-fish-swim-past-manny.mp3",Z.C3)})),framework.Actions.Tween(i,{from:{x:i.x},to:{x:750,y:500},duration:12})]),void 0,!1);var n=this.view.getChildByName("dialogue-ui");this.dialogueUiMediator=new ee(n,this,this.diService),this.addChildAsPopUp(this.dialogueUiMediator),this.manny.state.setAnimationByName(0,"sleeping",!0),this.setButtonPressedListener(this.manny,this.startConversation.bind(this)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.aquariyumTownCenter&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}},{key:"startConversation",value:function(){this.soundService.stopSound(Z.C2),this.manny.state.setAnimationByName(0,"wake",!0);var t=un.getLoadedAsset("mannyConversation");this.dialogueUiMediator.showConversation(t),this.dialogueUiMediator.conversationService.setConversationListener(this)}},{key:"onChoice",value:function(t){-1==t.gotoIdx&&(this.soundService.playSound("sfx-many-snoring-when-at-this-screen.mp3",Z.C2,(function(){}),!0),this.manny.state.setAnimationByName(0,"sleeping",!0))}},{key:"onAnswer",value:function(t){}}]),e}(It),We=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"leftMuffin",null),j()(R()(i),"rightMuffin",null),j()(R()(i),"exitButtonLeft",null),j()(R()(i),"exitButtonRight",null),j()(R()(i),"pickupItemKey","egyptianEye"),j()(R()(i),"pickupItemViewName","egyptianEye"),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget1",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.soundService.playMusic("music-aquari-yum-loop.mp3"),this.exitButtonLeft=this.view.getChildByName("exitButtonLeft"),this.setButtonPressedListener(this.exitButtonLeft,(function(){t.exitOffscreen(t.exitButtonLeft,t.spawnPoint1,an.aquariyumCastle)})),this.setupNavigationArrow(this.exitButtonLeft,this.animationService.createArrowAnimation(this.exitButtonLeft,ot.northWest)),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint0,an.aquariyumTownCenter)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.northEast)),this.leftMuffin=this.view.getChildByName("cupcake-anim"),this.setButtonPressedListener(this.leftMuffin,this.animateLeftMuffin.bind(this)),this.rightMuffin=this.view.getChildByName("cupcake-open-anim"),this.setButtonPressedListener(this.rightMuffin,this.animateRightMuffin.bind(this)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.aquariyumTownCenter&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.aquariyumCastle&&(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget1))}},{key:"animateLeftMuffin",value:function(){var t=this;this.soundService.playSound("sfx-water-sound-when-tapping-on-cherry-cupcake.mp3",Z.C2),this.removeButtonPressedListener(this.leftMuffin);var e={start:function(e){setTimeout((function(){t.itemPickUpService.pickUpActive(t.pickupItemKey)}),4)}};this.playAnimation(this.leftMuffin,e)}},{key:"animateRightMuffin",value:function(){var t=this;this.soundService.playSound("sfx-water-sound-when-tapping-on-fish-in-cupcake.mp3",Z.C2);var e={start:function(e){t.rightMuffin.interactive=!1},complete:function(e){t.rightMuffin.interactive=!0}};this.playAnimation(this.rightMuffin,e)}},{key:"playAnimation",value:function(t,e){t.state.addListener(e),t.state.setAnimation(0,"action",!1)}}]),e}(Ee),qe=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"pickupItemKey","eye-of-rom"),j()(R()(i),"pickupItemViewName","eyeRom"),j()(R()(i),"exitButtonRight",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.soundService.playMusic("music-aquari-yum-loop.mp3"),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint0,an.aquariyumCastleInt)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.southEast)),this.itemPickUpService.pickUpActive(this.pickupItemKey),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.aquariyumCastleInt&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}}]),e}(Ee),Ke=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"dialogueUiMediator",null),j()(R()(i),"exitButtonBottom",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.soundService.playMusic("music-aquari-yum-loop.mp3"),this.exitButtonBottom=this.view.getChildByName("exitButtonBottom"),this.setButtonPressedListener(this.exitButtonBottom,(function(){t.exitOffscreen(t.exitButtonBottom,t.spawnPoint0,an.aquariyumCastleInt)})),this.setupNavigationArrow(this.exitButtonBottom,this.animationService.createArrowAnimation(this.exitButtonBottom,ot.southWest));var i=this.view.getChildByName("dialogue-ui");this.dialogueUiMediator=new ee(i,this,this.diService),this.addChildAsPopUp(this.dialogueUiMediator);var n=this.view.getChildByName("crabprince");this.setButtonPressedListener(n,this.startConversation.bind(this)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.aquariyumCastleInt&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}},{key:"startConversation",value:function(){var t=un.getLoadedAsset("crabPrinceConversation");this.dialogueUiMediator.showConversation(t)}}]),e}(It),Ge=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget1",void 0),j()(R()(i),"bats",void 0),j()(R()(i),"chestButton",void 0),j()(R()(i),"pickupItemKey","electro-flying-broom"),j()(R()(i),"pickupItemViewName","broom"),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-castleblanca-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position;var i=this.view.getChildByName("exitButtonRight");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint0,an.castleGnomeWalkway)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.southEast));var n=this.view.getChildByName("exitButtonTop");this.setButtonPressedListener(n,(function(){t.exitOffscreen(n,t.spawnPoint1,an.castleInnEntrance)})),this.setupNavigationArrow(n,this.animationService.createArrowAnimation(n,ot.northWest));var o=this.view.getChildByName("tick");this.chestButton=this.view.getChildByName("chest"),this.setButtonPressedListener(this.chestButton,this.chestExplodeAnim.bind(this)),this.bats=[this.view.getChildByName("bat1"),this.view.getChildByName("bat2"),this.view.getChildByName("bat3"),this.view.getChildByName("bat4")],this.bats.forEach((function(t){t.visible=!1})),this.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return t.soundService.playSound("sfx-insect-crawling.mp3",Z.C3,(function(){}),!0)})),framework.Actions.Tween(o,{from:{x:o.x},to:{x:750},duration:10}),framework.Actions.Func((function(){return t.soundService.stopSound(Z.C3)}))]),void 0,!1),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.castleGnomeWalkway&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.castleInnEntrance&&(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget1))}},{key:"animateChest",value:function(){this.soundService.playSound("sfx-chest-with-bats-opens.mp3",Z.C2),this.view.getChildByName("chest").state.setAnimation(0,"open",!1)}},{key:"chestExplodeAnim",value:function(){var t=this;this.removeButtonPressedListener(this.chestButton),this.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){t.animateChest()})),framework.Actions.Delay(1.25),framework.Actions.Func((function(){t.animateBats(),t.itemPickUpService.pickUpActive(t.pickupItemKey)}))]))}},{key:"animateBats",value:function(){this.bats.forEach((function(t,e){var i="flyaway"+(e+1);t.visible=!0,t.state.setAnimation(0,i,!1)}))}}]),e}(Ee),je=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-castleblanca-loop.mp3"),this.soundService.playSound("sfx-vampire-playing-organ.mp3",Z.C1,(function(){}),!0),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position;var i=this.view.getChildByName("exitButtonBottom");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint1,an.castleTownCenter)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.southWest));var n=this.view.getChildByName("teleExitButton");this.setButtonPressedListener(n,(function(){t.exitViaCyberbus(t.spawnPoint0,"cyberbus","arriveSE")})),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){if(Ct.getPreviousSceneName()==an.grandCyberStation)return this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnPoint0),void this.enterViaCyberbus("cyberbus","arriveSE",this.spawnTarget0);framework.ContainerView.getChildByNameRecursive(this.view,"cyberbus").state.clearTrack(0),Ct.getPreviousSceneName()==an.castleTownCenter&&(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}}]),e}(It),ze=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-castleblanca-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position;var i=this.view.getChildByName("exitButtonRight");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint0,an.castleChestRoom)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.southEast));var n=this.view.getChildByName("castledoor-button");this.setButtonPressedListener(n,(function(){t.navMesh.agent.findPathTo(t.spawnPoint1,(function(){t.deactivateAllButtons(),t.navigationService.goToScene(an.castleInnLobby)}))}));var o=this.view.getChildByName("m-rain"),s=this.view.getChildByName("m-rain copy"),a=this.view.getChildByName("m-floor3");a.alpha=1,this.soundService.playSound("sfx-rain-while-on-the-outside-of-the-inn.mp3",Z.C2,(function(){}),!0),this.runAction(this.animationService.createRainAnimation(o,s),void 0,!1),this.runAction(framework.Actions.Repeat(framework.Actions.Sequence([framework.Actions.Delay(1),framework.Actions.Tween(a,{from:{alpha:1},to:{alpha:0},duration:.05}),framework.Actions.Delay(.05),framework.Actions.Tween(a,{from:{alpha:0},to:{alpha:1},duration:.05}),framework.Actions.Delay(4.5),framework.Actions.Tween(a,{from:{alpha:1},to:{alpha:0},duration:.05}),framework.Actions.Delay(.05),framework.Actions.Tween(a,{from:{alpha:0},to:{alpha:1},duration:.05}),framework.Actions.Delay(1)])),void 0,!1),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.castleChestRoom&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.castleInnLobby&&(this.navMesh.mover.node.position=this.spawnPoint1)}}]),e}(It),Xe=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"dialogueUiMediator",null),j()(R()(i),"pickupItemKey","blueberry-pie"),j()(R()(i),"pickupItemViewName","blueberryPie"),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-castleblanca-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position;var i=this.view.getChildByName("exitButtonRight");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint0,an.castleInnEntrance)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.southEast));var n=this.view.getChildByName("dialogue-ui");this.dialogueUiMediator=new ee(n,this,this.diService),this.addChildAsPopUp(this.dialogueUiMediator),this.dialogueUiMediator.conversationService.setConversationListener(this);var o=this.view.getChildByName("innkeeper");this.setButtonPressedListener(o,this.startConversation.bind(this));var s=this.view.getChildByName("m-rain"),a=this.view.getChildByName("m-rain copy"),r=this.view.getChildByName("g-lightning1"),h=this.view.getChildByName("g-lightning2"),u=this.view.getChildByName("g-lightning3");r.alpha=0,h.alpha=0,u.alpha=0,this.itemPickUpService.pickUpActive(this.pickupItemKey),this.runAction(this.animationService.createRainAnimation(s,a),void 0,!1),this.runAction(this.createLightningAnimation(r,h,u),void 0,!1),this.spawnPlayer()}},{key:"createLightningAnimation",value:function(t,e,i){return framework.Actions.Repeat(framework.Actions.Sequence([framework.Actions.Delay(4),framework.Actions.Func((function(){t.alpha=1,e.alpha=1,i.alpha=1})),framework.Actions.Delay(.5),framework.Actions.Parallel([framework.Actions.Tween(t,{from:{alpha:1},to:{alpha:0},duration:.75}),framework.Actions.Tween(e,{from:{alpha:1},to:{alpha:0},duration:.75}),framework.Actions.Tween(i,{from:{alpha:1},to:{alpha:0},duration:.75})]),framework.Actions.Delay(4.25)]))}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.castleInnEntrance&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}},{key:"startConversation",value:function(){var t=un.getLoadedAsset("grizeldaConversation");this.dialogueUiMediator.showConversation(t)}},{key:"onChoice",value:function(t){t.gotoIdx==Yt.a.BATS_GAME&&this.navigationService.goToScene(an.batSortingMinigame)}},{key:"onAnswer",value:function(t){}}]),e}(Ee),Ye=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"dialogueUiMediator",null),j()(R()(i),"gnome",null),j()(R()(i),"explosion",null),j()(R()(i),"exitButtonTop",null),j()(R()(i),"didAnswerCorrect",!1),j()(R()(i),"navMeshOffsetX",1400),j()(R()(i),"navMeshOffsetY",700),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget1",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.soundService.playMusic("music-castleblanca-loop.mp3"),this.exitButtonTop=this.view.getChildByName("exitButtonTop"),this.setButtonPressedListener(this.exitButtonTop,(function(){t.exitOffscreen(t.exitButtonTop,t.spawnPoint1,an.castleChestRoom)})),this.setupNavigationArrow(this.exitButtonTop,this.animationService.createArrowAnimation(this.exitButtonTop,ot.northWest)),this.exitButtonTop.visible=!1;var i=this.view.getChildByName("exitButtonRight");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint0,an.castleTownCenter)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.southEast)),this.explosion=this.view.getChildByName("explosion"),this.explosion.alpha=0,this.gnome=this.view.getChildByName("gnome"),this.gnome.visible=!1,this.setButtonPressedListener(this.gnome,this.startConversation.bind(this));var n=this.view.getChildByName("dialogue-ui");this.dialogueUiMediator=new ee(n,this,this.diService),this.addChildAsPopUp(this.dialogueUiMediator),this.dialogueUiMediator.conversationService.setConversationListener(this),this.spawnPlayer(),this.spawnGnome()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.castleTownCenter&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.castleChestRoom&&(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget1))}},{key:"spawnGnome",value:function(){var t=this;Ct.getPreviousSceneName()==an.castleTownCenter&&(this.navMesh.collider.position.x=this.navMeshOffsetX,this.navMesh.collider.position.y=this.navMeshOffsetY,this.explosion.state.addListener({start:function(){t.soundService.playSound("sfx-explosion-sound-when-efl-appears-on-way-to-eerie-inn.mp3",Z.C1),t.explosion.alpha=1,t.gnome.visible=!0},complete:function(){t.explosion.alpha=0}}),this.explosion.state.setAnimation(0,"animation",!1)),Ct.getPreviousSceneName()==an.castleChestRoom&&(this.navMesh.collider.position.x=0,this.navMesh.collider.position.y=0,this.exitButtonTop.visible=!0)}},{key:"walkTo",value:function(t,e){this.navMesh.agent.findPathTo(t,e)}},{key:"fadeInArrow",value:function(){var t=this;this.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){t.exitButtonTop.visible=!0})),framework.Actions.Tween(this.exitButtonTop,{from:{alpha:0},to:{alpha:1},duration:3})]))}},{key:"startConversation",value:function(){var t=un.getLoadedAsset("guardianConversation");this.dialogueUiMediator.showConversation(t)}},{key:"onChoice",value:function(t){var e=this;t.gotoIdx==Yt.a.QUIZ_CORRECT&&(this.didAnswerCorrect=!0),t.gotoIdx==Yt.a.STOP&&1==this.didAnswerCorrect&&this.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){e.gnomeDisappear(),e.fadeInArrow()}))]))}},{key:"gnomeDisappear",value:function(){var t=this;this.runAction(framework.Actions.Sequence([framework.Actions.Delay(1.25),framework.Actions.Func((function(){t.explosion.state.clearTrack(0),t.explosion.alpha=1,t.explosion.state.setAnimation(0,"animation",!1),t.gnome.visible=!1,t.navMesh.collider.position.x=0,t.navMesh.collider.position.y=0}))]),void 0,!1)}},{key:"onAnswer",value:function(t){}}]),e}(It),Ze=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"dialogueUiMediator",null),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-castleblanca-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position;var i=this.view.getChildByName("exitButtonTop");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint0,an.castleTownCenter)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.northEast));var n=this.view.getChildByName("dialogue-ui");this.dialogueUiMediator=new ee(n,this,this.diService),this.addChildAsPopUp(this.dialogueUiMediator),this.dialogueUiMediator.conversationService.setConversationListener(this);var o=this.view.getChildByName("twins");this.setButtonPressedListener(o,(function(){Ct.getDialogueCondition(Qe)?(t.frameService.popupDialog.setText("Sam is busy choosing which head gets the first sip of Chocoberry Chiller."),t.frameService.popupDialog.showYesOnly()):t.startConversation()}));var s=this.view.getChildByName("m-ripple1"),a=this.view.getChildByName("m-ripple2"),r=this.view.getChildByName("m-swamp2");r instanceof framework.SpriteView&&(r.tint=65433,this.runAction(framework.Actions.Tween(r,{from:{alpha:1},to:{alpha:0},duration:1.5,repeat:1/0,yoyo:!0}),void 0,!1)),this.runAction(framework.Actions.Parallel([framework.Actions.Tween(s.scale,{from:{x:s.scale.x},to:{x:.63},repeat:1/0,duration:2,yoyo:!0}),framework.Actions.Tween(a.scale,{from:{x:a.scale.x},to:{x:.63},repeat:1/0,duration:2,yoyo:!0})]),void 0,!1),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.castleTownCenter&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}},{key:"startConversation",value:function(){var t=un.getLoadedAsset("twoHeadedSamConversation");this.dialogueUiMediator.showConversation(t)}},{key:"onChoice",value:function(t){if(t.gotoIdx==Yt.a.SAM_TRADE){var e=null;1==Ht.hasItemInInventory("chocoberry-chillers")?(Ht.removeInventoryItem("chocoberry-chillers"),Ht.addItemToInventory("container-of-cryoxide"),Ct.setDialogueCondition(Qe),e="You got a container of Cryoxide"):e="You need to get a Chocoberry Chiller first",this.frameService.popupDialog.setText(e),this.frameService.popupDialog.showYesOnly()}}},{key:"onAnswer",value:function(t){}}]),e}(It),Qe="tradedWithTwoHead",Je=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget1",void 0),j()(R()(i),"spawnPoint2",void 0),j()(R()(i),"spawnTarget2",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-castleblanca-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.spawnPoint2=this.view.getChildByName("spawnPoint2").position,this.spawnTarget2=this.view.getChildByName("spawnTarget2").position;var i=this.view.getChildByName("exitButtonBottom");this.setButtonPressedListener(i,(function(){t.exitOffscreen(i,t.spawnPoint1,an.castleHauntedHangout)})),this.setupNavigationArrow(i,this.animationService.createArrowAnimation(i,ot.southWest));var n=this.view.getChildByName("exitButtonTopLeft");this.setButtonPressedListener(n,(function(){t.exitOffscreen(n,t.spawnPoint2,an.castleGnomeWalkway)})),this.setupNavigationArrow(n,this.animationService.createArrowAnimation(n,ot.northWest));var o=this.view.getChildByName("exitButtonTopRight");this.setButtonPressedListener(o,(function(){t.exitOffscreen(o,t.spawnPoint0,an.castleCybercoupe)})),this.setupNavigationArrow(o,this.animationService.createArrowAnimation(o,ot.northEast)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.castleCybercoupe&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.castleHauntedHangout&&(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget1)),Ct.getPreviousSceneName()==an.castleGnomeWalkway&&(this.navMesh.mover.node.position=this.spawnPoint2,this.navMesh.agent.directlyPathTo(this.spawnTarget2))}}]),e}(It),$e=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"exitButtonBottom",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-r-fair-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.exitButtonBottom=this.view.getChildByName("exitButtonBottom"),this.setButtonPressedListener(this.exitButtonBottom,(function(){t.exitOffscreen(t.exitButtonBottom,t.spawnPoint1,an.rfairTintersection)})),this.setupNavigationArrow(this.exitButtonBottom,this.animationService.createArrowAnimation(this.exitButtonBottom,ot.southWest));var i=this.view.getChildByName("teleExitButton");this.setButtonPressedListener(i,(function(){var e=t.view.getChildByName("spawnPoint0").position;t.exitViaCyberbus(e,"cyberbus","arriveSE")})),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){return Ct.getPreviousSceneName()==an.grandCyberStation?(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnPoint0),void this.enterViaCyberbus("cyberbus","arriveSE",this.spawnTarget0)):(framework.ContainerView.getChildByNameRecursive(this.view,"cyberbus").state.clearTrack(0),Ct.getPreviousSceneName()==an.rfairTintersection?(this.navMesh.mover.node.position=this.spawnPoint1,void this.navMesh.agent.directlyPathTo(this.spawnTarget0)):void 0)}}]),e}(It),ti=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"exitButtonTop",null),j()(R()(i),"exitButtonRight",null),j()(R()(i),"exitButtonBottom",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnPoint2",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnTarget1",void 0),j()(R()(i),"spawnTarget2",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnPoint2=this.view.getChildByName("spawnPoint2").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.spawnTarget2=this.view.getChildByName("spawnTarget2").position,this.soundService.playMusic("music-r-fair-loop.mp3"),this.exitButtonTop=this.view.getChildByName("exitButtonTop"),this.setButtonPressedListener(this.exitButtonTop,(function(){t.exitOffscreen(t.exitButtonTop,t.spawnPoint2,an.rfairLostAndFound)})),this.setupNavigationArrow(this.exitButtonTop,this.animationService.createArrowAnimation(this.exitButtonTop,ot.northWest)),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint0,an.rfairTintersection)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.northEast)),this.exitButtonBottom=this.view.getChildByName("exitButtonBottom"),this.setButtonPressedListener(this.exitButtonBottom,(function(){t.exitOffscreen(t.exitButtonBottom,t.spawnPoint1,an.rfairFountainRoom)})),this.setupNavigationArrow(this.exitButtonBottom,this.animationService.createArrowAnimation(this.exitButtonBottom,ot.southWest)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.rfairTintersection&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.rfairFountainRoom&&(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget1)),Ct.getPreviousSceneName()==an.rfairLostAndFound&&(this.navMesh.mover.node.position=this.spawnPoint2,this.navMesh.agent.directlyPathTo(this.spawnTarget2))}}]),e}(It),ei=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-r-fair-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position;var i=this.view.getChildByName("m-hut1"),n=this.view.getChildByName("exitButtonRight");this.setButtonPressedListener(n,(function(){t.exitOffscreen(n,t.spawnPoint0,an.rfairTownCenter)})),this.setButtonPressedListener(i,this.navigationService.goToScene.bind(this.navigationService,an.rfairLostAndFoundShop)),this.setupNavigationArrow(n,this.animationService.createArrowAnimation(n,ot.southEast)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.rfairTownCenter&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}}]),e}(It);!function(t){t[t.FIRST_REQUEST=0]="FIRST_REQUEST",t[t.REPEAT_REQUEST=5]="REPEAT_REQUEST",t[t.NOT_NEEDED=6]="NOT_NEEDED"}(Se||(Se={}));var ii,ni=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"dialogueUiMediator",null),j()(R()(i),"exitButtonRight",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.soundService.playMusic("music-r-fair-loop.mp3"),null==this.diService.getDataByKey(st.a.LogicZooMinigameQuestConvoState)&&this.diService.setDataWithKey(st.a.LogicZooMinigameQuestConvoState,Se.FIRST_REQUEST),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint0,an.rfairFountainRoom)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.southEast));var i=this.view.getChildByName("dialogue-ui");this.dialogueUiMediator=new ee(i,this,this.diService),this.addChildAsPopUp(this.dialogueUiMediator),this.dialogueUiMediator.conversationService.setConversationListener(this);var n=this.view.getChildByName("glowla");this.setButtonPressedListener(n,this.startConversation.bind(this)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.rfairFountainRoom&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}},{key:"startConversation",value:function(){var t=this.diService.getDataByKey(st.a.LogicZooMinigameQuestConvoState);t==Se.FIRST_REQUEST&&this.diService.setDataWithKey(st.a.LogicZooMinigameQuestConvoState,Se.REPEAT_REQUEST);var e=un.getLoadedAsset("glowlaConversation");this.dialogueUiMediator.showConversation(e,t)}},{key:"onChoice",value:function(t){t.gotoIdx==Yt.a.ZOO_GAME&&this.navigationService.goToScene(an.rfairLogicZooMinigame)}},{key:"onAnswer",value:function(t){}}]),e}(It),oi=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"pickupItemKey","yo-yo"),j()(R()(i),"pickupItemViewName","yoyo"),j()(R()(i),"exitButtonLeft",null),j()(R()(i),"exitButtonRight",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnTarget1",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.soundService.playMusic("music-r-fair-loop.mp3"),this.diService.setDataWithKey("LogicZooMinigameQuestConvoState",Se.FIRST_REQUEST),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint0,an.rfairTownCenter)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.northEast)),this.exitButtonLeft=this.view.getChildByName("exitButtonLeft"),this.setButtonPressedListener(this.exitButtonLeft,(function(){t.exitOffscreen(t.exitButtonLeft,t.spawnPoint1,an.rfairLogicZoo)})),this.setupNavigationArrow(this.exitButtonLeft,this.animationService.createArrowAnimation(this.exitButtonLeft,ot.northWest)),this.itemPickUpService.pickUpActive(this.pickupItemKey),this.soundService.playSound("sfx-fish-in-fountain.mp3",Z.C1,(function(){}),!0),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.rfairTownCenter&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.rfairLogicZoo&&(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget1))}}]),e}(Ee);i(209);!function(t){t[t.FIRST=0]="FIRST",t[t.SECOND=1]="SECOND",t[t.BOTH=2]="BOTH",t[t.NEITHER=3]="NEITHER",t[t.UNPLACED=4]="UNPLACED"}(ii||(ii={}));var si=function t(e,i,n,o){var s=this;L()(this,t),j()(this,"wonAndDone",(function(){s.startButton.isEnabled=!1,s.startButton.interactive=!1,s.won=!0})),j()(this,"startButton",void 0),j()(this,"animalTargets",void 0),j()(this,"gameMapView",void 0),j()(this,"polys",void 0),j()(this,"animalAreas",void 0),j()(this,"won",void 0),this.startButton=e,this.animalTargets=i,this.gameMapView=this.animalTargets.getChildByName("targets-image"),this.polys=n,this.animalAreas=o,this.won=!1},ai=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"exitButton",i.view.getChildByName("exitButton")),j()(R()(i),"introductionNode",i.view.getChildByName("Introduction")),j()(R()(i),"introStep3",i.introductionNode.getChildByName("Intro3")),j()(R()(i),"gameNode",i.view.getChildByName("Game")),j()(R()(i),"gameMaps",i.view.getChildByName("animal-targets")),j()(R()(i),"finishPopupNode",i.view.getChildByName("FinishPopup")),j()(R()(i),"finishPopupText",i.finishPopupNode.getChildByName("reward-description")),j()(R()(i),"finishPopupNextButton",i.finishPopupNode.getChildByName("reward-next-button")),j()(R()(i),"gameWinState",[!1,!1,!1,!1,!1,!1]),j()(R()(i),"animalImages",[]),j()(R()(i),"animalInitPositions",[]),j()(R()(i),"gameMapStates",[null,null,null,null]),j()(R()(i),"allAnimalAttributes",[]),j()(R()(i),"animalsSelection",void 0),j()(R()(i),"currentGameMap",null),j()(R()(i),"resetAnimals",(function(){for(var t=0;t<i.animalImages.length;t++)i.animalImages[t].position=new PIXI.Point(i.animalInitPositions[t].x,i.animalInitPositions[t].y),i.animalImages[t].interactive=!0,i.gameWinState[t]=!1})),j()(R()(i),"initAnimalSelection",(function(){i.animalsSelection=i.gameNode.getChildByName("animal-selection");for(var t=i.animalsSelection.getChildByName("animal-background").getBounds().left,e=i.gameNode.getChildByName("animal-buttons"),n=function(n){var o=e.getChildAt(n),s=o.getChildByName("animal-button"),a=o.getChildByName("animal-image");i.animalImages.push(a),i.setButtonHoverListener(a,(function(){return i.soundService.playSound("sfx-hover-con-character.mp3",Z.C1)}),(function(){})),i.animalImages[n].interactive=!0,i.animalInitPositions.push(framework.Vector.clone(i.animalImages[n].position));var r=function(t,e){var i=framework.Vector.transformGlobalToChild(t.data.global,e.parent);e.position=i},h=new framework.DragViewScript({view:i.animalImages[n],dragStartedCallback:function(t,e){i.soundService.playSound("sfx-dragging-animal.mp3",Z.C3,(function(){}),!0),i.hideAnimalAttributes(),u.visible=!0,r(t,e)},dragMovedCallback:r,dragEndedCallback:function(e,o){var s=ii.UNPLACED,a=o.getBounds();a.right<t&&(s=i.calculateAnimalArea(new PIXI.Rectangle(a.x/o.scale.x,a.y/o.scale.y-a.height/o.scale.y,a.width/o.scale.x,a.height/o.scale.y))),i.gameWinState[n]=s==i.currentGameMap.animalAreas[n],i.gameWinState[n]?(i.soundService.playSound("sfx-animal-in-correct-location.mp3",Z.C3),o.interactive=!1,i.gameWinState.every((function(t){return t}))&&i.gameWon()):i.animateAnimalBackToInitPosition(o,i.animalInitPositions[n])}});i.scripts.addScript(h);var u=o.getChildByName("animal-attributes");i.setButtonPressedListener(s,(function(){i.hideAnimalAttributes(),u.visible=!0})),i.allAnimalAttributes.push(u)},o=0;o<e.children.length;++o)n(o)})),j()(R()(i),"initGameMaps",(function(t,n){for(var o=function(o){i.gameMapStates[o]=new si(t[o],n[o],e.gameMapPolys[o],e.gameMapTargetStates[o]),i.setButtonPressedListener(t[o],(function(){i.startGame(i.gameMapStates[o])}))},s=0;s<i.gameMapStates.length;s++)o(s)})),j()(R()(i),"animateAnimalBackToInitPosition",(function(t,e){t.interactive=!1,i.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return i.soundService.playSound("sfx-animal-in-wrong-location.mp3",Z.C3)})),framework.Actions.Tween(t,{to:{rotation:6.28},duration:.5}),framework.Actions.Tween(t.position,{to:e,duration:1}),framework.Actions.Func((function(){t.rotation=0,t.interactive=!0}))]))})),j()(R()(i),"hideAnimalAttributes",(function(){for(var t=i.allAnimalAttributes.length-1;t>=0;t--)i.allAnimalAttributes[t].visible=!1})),j()(R()(i),"startGame",(function(t){i.soundService.playSound("sfx-select-a-plan.mp3",Z.C2),i.resetAnimals(),i.introductionNode.visible=!1,i.gameNode.visible=!0,i.animalsSelection.visible=!0,framework.ContainerView.visibleChildren(i.animalsSelection,!0),i.hideAnimalAttributes(),i.gameMaps.visible=!0,i.currentGameMap=t,i.currentGameMap.animalTargets.visible=!0,framework.ContainerView.visibleChildren(i.currentGameMap.animalTargets,!0)})),j()(R()(i),"gameWon",(function(){i.soundService.playSound("sfx-completed-a-plan-music.mp3",Z.C1),i.finishPopupNode.visible=!0,framework.ContainerView.visibleChildren(i.finishPopupNode,!0),i.currentGameMap.wonAndDone();i.walletService.credit(100,"Won a Logic Zoo game.")})),j()(R()(i),"exitGame",(function(){i.soundService.playSound("sfx-tap-ok-button.mp3",Z.G2),i.navigationService.goToScene(an.rfairLogicZoo)})),j()(R()(i),"exitGameMap",(function(){if(i.soundService.playSound("sfx-tap-ok-button.mp3",Z.G2),i.gameMapStates.every((function(t){return t.won}))){i.diService.setDataWithKey(st.a.LogicZooMinigameQuestConvoState,Se.NOT_NEEDED),i.diService.deleteDataWithKey(st.a.LogicZooMinigameQuestProgress),i.finishPopupText.text="You get 100 Snelfu bonus for fixing the whole zoo!",i.setButtonPressedListener(i.finishPopupNextButton,i.exitGame);i.walletService.credit(100,"Won all Logic Zoo games.")}else i.diService.setDataWithKey(st.a.LogicZooMinigameQuestProgress,i.gameMapStates.map((function(t){return t.won}))),i.finishPopupNode.visible=!1,i.gameNode.visible=!1,i.currentGameMap.animalTargets.visible=!1,i.introductionNode.visible=!0,i.introStep3.visible=!0})),j()(R()(i),"calculateAnimalArea",(function(t){var e=i.currentGameMap.polys[0].contains(t.left+.5*t.width,t.top+.5*t.height),n=i.currentGameMap.polys[1].contains(t.left+.5*t.width,t.top+.5*t.height);return e&&n?ii.BOTH:e?ii.FIRST:n?ii.SECOND:ii.NEITHER})),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-r-fair-loop.mp3"),this.initGameMaps([this.introStep3.getChildByName("Brown-2Legs-button"),this.introStep3.getChildByName("LongEars-Pink-button"),this.introStep3.getChildByName("Fur-4Legs-button"),this.introStep3.getChildByName("Walks-ShortEars-button")],[this.gameMaps.getChildByName("Brown-2Legs"),this.gameMaps.getChildByName("LongEars-Pink"),this.gameMaps.getChildByName("Fur-4Legs"),this.gameMaps.getChildByName("Walks-ShortEars")]),this.initAnimalSelection();var i=function(e,i,n){t.soundService.playSound("sfx-tap-ok-button.mp3",Z.G2),e.visible=!1,i.visible=!0,framework.ContainerView.visibleChildren(i,!0),n?t.soundService.playVo(n):t.soundService.stopVo()},n=this.introductionNode.getChildByName("Intro1"),o=n.getChildByName("intro1-next-button"),s=this.introductionNode.getChildByName("Intro2"),a=s.getChildByName("intro2-next-button");this.setButtonPressedListener(o,(function(){return i(n,s,"VOs/logic_2.mp3")})),this.setButtonPressedListener(a,(function(){return i(s,t.introStep3,null)})),this.setupExitButton(),this.setButtonPressedListener(this.finishPopupNextButton,this.exitGameMap);var r=this.diService.getDataByKey(st.a.LogicZooMinigameQuestProgress);if(null!=r){for(var h=0;h<this.gameMapStates.length;h++)r[h]&&this.gameMapStates[h].wonAndDone();i(n,this.introStep3,null)}else this.diService.setDataWithKey(st.a.LogicZooMinigameQuestProgress,this.gameMapStates.map((function(t){return t.won})));this.soundService.playVo("VOs/logic_1.mp3")}},{key:"setupExitButton",value:function(){var t=this;this.frameService.popupDialog.setText("Are you sure you want to leave Logic Zoo?"),this.setButtonPressedListener(this.exitButton,(function(){t.frameService.popupDialog.showYesNo((function(e){e&&t.exitGame()}))}))}}]),e}(It);j()(ai,"parseSVGpath",(function(t){var e=t.substring(1,t.length-1).split("L"),i=[];return e.forEach((function(t){var e=t.split(" ");i.push(new PIXI.Point(Number(e[0]),Number(e[1])))})),i})),j()(ai,"buildGamePolys",(function(t,e){var i=ai.parseSVGpath(t),n=ai.parseSVGpath(e);return[new PIXI.Polygon(i),new PIXI.Polygon(n)]})),j()(ai,"gameBrown2LegsPolys",ai.buildGamePolys("M263.73 199.24L410.81 247.85L499.46 355.2L648.55 438.25L727.12 488.89L835.92 650.93L882.26 869.68L835.92 956.78L676.75 932.48L505.5 987.17L285.9 1013.5L138.82 940.58L42.11 488.89L68.3 332.92L128.75 235.69L263.73 199.24Z","M638.83 235.94L788.27 189.26L988.18 189.26L1147.71 260.29L1188.1 414.55L1272.91 652.02L1311.28 765.68L1311.28 869.19L1180.02 930.08L887.22 887.46L566.14 765.68L556.04 712.91L657.01 442.96L624.7 290.74L638.83 235.94Z")),j()(ai,"gameBrown2LegsTargetState",[ii.NEITHER,ii.BOTH,ii.NEITHER,ii.BOTH,ii.NEITHER,ii.NEITHER]),j()(ai,"gameLongEarsPinkPolys",ai.buildGamePolys("M438.76 279.96L670 421.12L828.8 660.71L864.09 950.46L750.79 1032.18L366.33 1019.18L141.59 946.74L136.02 879.88L184.31 792.58L126.73 577.13L121.16 393.26L136.02 322.68L253.03 242.81L438.76 279.96Z","M1239.27 471.27L1311.71 670L1289.42 801.87L583.63 679.29L412.76 597.56L375.61 476.84L392.33 274.39L457.34 209.38L849.23 226.1L1124.12 324.54L1239.27 471.27Z")),j()(ai,"gameLongEarsPinkTargetState",[ii.BOTH,ii.NEITHER,ii.BOTH,ii.NEITHER,ii.SECOND,ii.FIRST]),j()(ai,"gameFur4LegsPolys",ai.buildGamePolys("M76.58 214.95L175.02 166.66L412.76 205.67L654.21 315.25L797.23 487.98L817.66 584.56L773.08 735.01L659.78 889.17L397.9 982.03L182.45 907.74L22.72 333.82L76.58 214.95Z","M249.31 294.82L321.75 428.55L509.34 591.99L760.08 699.72L1120.4 720.15L1293.14 658.86L1319.14 508.41L1233.7 359.83L1203.98 226.1L1138.98 175.95L238.17 172.23L249.31 294.82Z")),j()(ai,"gameFur4LegsTargetState",[ii.SECOND,ii.FIRST,ii.BOTH,ii.FIRST,ii.BOTH,ii.BOTH]),j()(ai,"gameWalksShortEarsPolys",ai.buildGamePolys("M195.45 166.66L336.61 179.66L644.93 248.38L856.66 352.4L940.24 447.12L925.38 532.56L596.64 857.59L292.03 1037.75L232.6 1015.46L182.45 454.55L134.16 200.09L195.45 166.66Z","M1125.98 229.81L1181.7 454.55L1194.7 783.3L1161.27 1037.75L1112.97 1065.61L825.09 982.03L492.62 816.73L394.19 716.43L394.19 670L773.08 324.54L904.95 240.96L1062.83 198.24L1125.98 229.81Z")),j()(ai,"gameWalksShortEarsTargetState",[ii.FIRST,ii.BOTH,ii.NEITHER,ii.SECOND,ii.BOTH,ii.FIRST]),j()(ai,"gameMapPolys",[ai.gameBrown2LegsPolys,ai.gameLongEarsPinkPolys,ai.gameFur4LegsPolys,ai.gameWalksShortEarsPolys]),j()(ai,"gameMapTargetStates",[ai.gameBrown2LegsTargetState,ai.gameLongEarsPinkTargetState,ai.gameFur4LegsTargetState,ai.gameWalksShortEarsTargetState]);var ri,hi=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"exitButtonBottom",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.soundService.playMusic("music-r-fair-loop.mp3"),this.exitButtonBottom=this.view.getChildByName("exitButtonBottom"),this.setButtonPressedListener(this.exitButtonBottom,(function(){t.exitOffscreen(t.exitButtonBottom,t.spawnPoint0,an.rfairDonutMuseum)})),this.setupNavigationArrow(this.exitButtonBottom,this.animationService.createArrowAnimation(this.exitButtonBottom,ot.southWest)),[this.view.getChildByName("m-flatscreen-normal"),this.view.getChildByName("bunny"),this.view.getChildByName("storeClickArea"),this.view.getChildByName("shakemachine")].forEach((function(e){t.setButtonPressedListener(e,t.navigationService.goToScene.bind(t.navigationService,an.rfairShop))})),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.rfairDonutMuseum&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0))}}]),e}(It),ui=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"exitButtonTop",null),j()(R()(i),"exitButtonRight",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget1",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.soundService.playMusic("music-r-fair-loop.mp3"),this.exitButtonTop=this.view.getChildByName("exitButtonTop"),this.setButtonPressedListener(this.exitButtonTop,(function(){t.exitOffscreen(t.exitButtonTop,t.spawnPoint0,an.rfairTintersection)})),this.setupNavigationArrow(this.exitButtonTop,this.animationService.createArrowAnimation(this.exitButtonTop,ot.northWest)),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint1,an.rfairDonutStore)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.northEast)),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.rfairTintersection&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.rfairDonutStore&&(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget1))}}]),e}(It),li=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"dialogueUiMediator",null),j()(R()(i),"exitButtonTop",null),j()(R()(i),"exitButtonRight",null),j()(R()(i),"exitButtonBottom",null),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnPoint2",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnTarget1",void 0),j()(R()(i),"spawnTarget2",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-r-fair-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnPoint2=this.view.getChildByName("spawnPoint2").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.spawnTarget2=this.view.getChildByName("spawnTarget2").position,this.exitButtonTop=this.view.getChildByName("exitButtonTop"),this.setButtonPressedListener(this.exitButtonTop,(function(){t.exitOffscreen(t.exitButtonTop,t.spawnPoint0,an.rfairCyberBus)})),this.setupNavigationArrow(this.exitButtonTop,this.animationService.createArrowAnimation(this.exitButtonTop,ot.northEast)),this.exitButtonRight=this.view.getChildByName("exitButtonRight"),this.setButtonPressedListener(this.exitButtonRight,(function(){t.exitOffscreen(t.exitButtonRight,t.spawnPoint1,an.rfairDonutMuseum)})),this.setupNavigationArrow(this.exitButtonRight,this.animationService.createArrowAnimation(this.exitButtonRight,ot.southEast)),this.exitButtonBottom=this.view.getChildByName("exitButtonBottom"),this.setButtonPressedListener(this.exitButtonBottom,(function(){t.exitOffscreen(t.exitButtonBottom,t.spawnPoint2,an.rfairTownCenter)})),this.setupNavigationArrow(this.exitButtonBottom,this.animationService.createArrowAnimation(this.exitButtonBottom,ot.southWest));var i=this.view.getChildByName("dialogue-ui");this.dialogueUiMediator=new ee(i,this,this.diService),this.addChildAsPopUp(this.dialogueUiMediator);var n=this.view.getChildByName("erica");this.setButtonPressedListener(n,this.startConversation.bind(this)),this.spawnPlayer()}},{key:"startConversation",value:function(){var t=un.getLoadedAsset("ericaRamConversation");this.dialogueUiMediator.showConversation(t)}},{key:"getPickUpItems",value:function(){if(!this.pickUpItemInfo){this.pickUpItemInfo={},this.pickUpItemInfo["t-intersection-tree"]={pickUpItemName:"basket-of-10-cyberries",view:this.view.getChildByName("tree"),animIndex:0}}return this.pickUpItemInfo}},{key:"spawnPlayer",value:function(){Ct.getPreviousSceneName()==an.rfairCyberBus&&(this.navMesh.mover.node.position=this.spawnPoint0,this.navMesh.agent.directlyPathTo(this.spawnTarget0)),Ct.getPreviousSceneName()==an.rfairDonutMuseum&&(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget1)),Ct.getPreviousSceneName()==an.rfairTownCenter&&(this.navMesh.mover.node.position=this.spawnPoint2,this.navMesh.agent.directlyPathTo(this.spawnTarget2))}}]),e}(Re);!function(t){t[t.green=0]="green",t[t.red=1]="red",t[t.blue=2]="blue",t[t.brown=3]="brown"}(ri||(ri={}));var ci,di=Object.keys(ri).map((function(t){return ri[t]})).filter((function(t){return"number"==typeof t})),pi=function(){function t(){L()(this,t)}return D()(t,null,[{key:"getTickets",value:function(){var t=Ct.getTickets();return t||[!1,!1,!1,!1]}},{key:"updateTickets",value:function(t){Ct.updateTickets(t)}},{key:"setTicket",value:function(t,e){var i=Ct.getTickets();i[t]=e,this.updateTickets(i)}},{key:"addTicket",value:function(t){this.setTicket(t,!0)}},{key:"removeTicket",value:function(t){this.setTicket(t,!1)}},{key:"hasTicket",value:function(t){return!0===this.getTickets()[t]}}]),t}(),vi=function(t){function e(t,i){var n;return L()(this,e),n=O()(this,U()(e).call(this,t,i)),j()(R()(n),"originalYPos",void 0),n.view.visible=!1,framework.ContainerView.visibleChildren(n.view,!0),n.init(),n}return K()(e,t),D()(e,[{key:"showOver",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};this.view.visible=!0;var n=function(){t.removeButtonPressedListener(t.background),t.hide(i)};this.setButtonPressedListener(this.background,n),this.show(e)}},{key:"hide",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};W()(U()(e.prototype),"hide",this).call(this,t)}},{key:"beforeShow",value:function(){this.originalYPos=this.view.y}},{key:"customShowAction",value:function(){return framework.Actions.Tween(this.view,{to:{y:0},duration:.3})}},{key:"customHideAction",value:function(){return framework.Actions.Tween(this.view,{to:{y:this.originalYPos},duration:.3})}}]),e}(qt),fi=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"spawnPoint0",void 0),j()(R()(i),"spawnTarget0",void 0),j()(R()(i),"spawnPoint1",void 0),j()(R()(i),"spawnTarget1",void 0),j()(R()(i),"spawnPoint2",void 0),j()(R()(i),"exitWestButton",void 0),j()(R()(i),"exitEastButton",void 0),j()(R()(i),"useTicketDialog",void 0),j()(R()(i),"useTicketButton",void 0),j()(R()(i),"ticketLineToUseTicketButtonMap",["cybermallButton","rfairButton","aquariyumButton","castleblancaButton"]),j()(R()(i),"ticketLineToDestinationMap",[an.cybermall,an.rfairCyberBus,an.aquariyumTownCenter,an.castleCybercoupe]),j()(R()(i),"useTicketPopOver",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-cyberstation-loop.mp3"),this.spawnPoint0=this.view.getChildByName("spawnPoint0").position,this.spawnTarget0=this.view.getChildByName("spawnTarget0").position,this.spawnPoint1=this.view.getChildByName("spawnPoint1").position,this.spawnTarget1=this.view.getChildByName("spawnTarget1").position,this.spawnPoint2=this.view.getChildByName("spawnPoint2").position,this.exitWestButton=this.view.getChildByName("exitButtonWest"),this.setButtonPressedListener(this.exitWestButton,(function(){t.exitOffscreen(t.exitWestButton,t.spawnPoint0,an.cyberhome)})),this.setupNavigationArrowAnimation(this.exitWestButton,Pt.west),this.exitEastButton=this.view.getChildByName("exitButtonTop"),this.setButtonPressedListener(this.exitEastButton,(function(){t.rideTheBus()})),this.setupNavigationArrowAnimation(this.exitEastButton,Pt.east),this.useTicketDialog=this.view.getChildByName("ticketSelectBackground"),this.useTicketButton=di.map((function(e){return t.view.getChildByName(t.ticketLineToUseTicketButtonMap[e])})),this.useTicketPopOver=new vi(this.useTicketDialog,this.diService),this.addChildAsPopUp(this.useTicketPopOver);var i=this.view.getChildByName("TicketMachineButton");i.interactive=!0,this.setButtonPressedListener(i,(function(){t.navMesh.agent.findPathTo(t.spawnPoint2,(function(){t.deactivateAllButtons(),t.navigationService.goToScene(an.grandTicketScreen)}))})),this.spawnPlayer()}},{key:"spawnPlayer",value:function(){if(Ct.getPreviousSceneName()==an.cyberhome)return this.navMesh.mover.node.position=this.spawnPoint0,void this.navMesh.agent.directlyPathTo(this.spawnTarget0);Ct.getPreviousSceneName()!=an.grandTicketScreen?(this.navMesh.mover.node.position=this.spawnPoint1,this.navMesh.agent.directlyPathTo(this.spawnTarget1)):this.navMesh.mover.node.position=this.spawnPoint2}},{key:"rideTheBus",value:function(){var t=di.filter((function(t){return pi.hasTicket(t)}));0==t.length?(this.frameService.popupDialog.setText("Woah there! You need to buy a ticket before you go to the Cybercoupes."),this.frameService.popupDialog.showYesOnly()):1==t.length?this.useTicket(t[0]):this.showUseTicketDialog()}},{key:"showUseTicketDialog",value:function(){var t=this;this.useTicketPopOver.showOver((function(){di.forEach((function(e){var i=t.useTicketButton[e],n=pi.hasTicket(e);i.alpha=n?1:.3,i.isEnabled=n,n&&t.setButtonPressedListener(i,t.useTicket.bind(t,e))}))}))}},{key:"useTicket",value:function(t){pi.hasTicket(t)?(pi.removeTicket(t),this.exitOffscreen(this.exitEastButton,this.spawnPoint1,this.ticketLineToDestinationMap[t]),this.useTicketPopOver.hide()):(this.frameService.popupDialog.setText("You don't have a ticket for the "+ri[t]+" line."),this.frameService.popupDialog.showYesOnly())}}]),e}(It),mi=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"ticketsControls",i.view.getChildByName("cyber-station-ticket-counter")),j()(R()(i),"backButton",i.ticketsControls.getChildByName("backButton")),j()(R()(i),"lineButtons",di.map((function(t){return i.ticketsControls.getChildByName(ri[t]+"LineButton")}))),j()(R()(i),"buyDialog",i.view.getChildByName("purchase-screen")),j()(R()(i),"buyDialogHiddenX",-1500),j()(R()(i),"buyDialogShowX",i.buyDialog.position.x),j()(R()(i),"buyBalanceText",i.buyDialog.getChildByName("num-snelfus")),j()(R()(i),"buyCostText",i.buyDialog.getChildByName("num-minus")),j()(R()(i),"buyResultText",i.buyDialog.getChildByName("num-result")),j()(R()(i),"buyConfirmControls",i.buyDialog.getChildByName("purchaseButtons")),j()(R()(i),"buyCancelButton",i.buyConfirmControls.getChildByName("cancel-button")),j()(R()(i),"buyConfirmButton",i.buyConfirmControls.getChildByName("purchase-button")),j()(R()(i),"buyCompleteControls",i.buyDialog.getChildByName("purchaseCompleteButtons")),j()(R()(i),"buyBackButton",i.buyCompleteControls.getChildByName("back-button")),j()(R()(i),"tint",i.view.getChildByName("counter-dark-overlay")),j()(R()(i),"ticketLineToCost",new Map([[ri.green,5],[ri.red,20],[ri.blue,10],[ri.brown,30]])),j()(R()(i),"selectedLine",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-cyberstation-loop.mp3"),this.soundService.playVo("VOs/ticket_1.mp3"),this.setButtonPressedListener(this.backButton,(function(){t.soundService.playSound("sfx-press-main-menu-button-when-browsing.mp3",Z.DEFAULT),t.navigationService.goToScene(an.grandCyberStation)})),di.forEach((function(e){return t.setButtonPressedListener(t.lineButtons[e],(function(){t.requestTicket(e)}))})),this.setButtonPressedListener(this.buyCancelButton,(function(){t.soundService.playSound("sfx-cancel-button-pressed.mp3",Z.C2),t.hideBuyDialog()})),this.tint.visible=!1,this.setButtonPressedListener(this.buyConfirmButton,(function(){t.soundService.playSound("sfx-buy-button-pressed.mp3",Z.C2),t.hideBuyConfirmControls(),t.buyTicket(),t.showBuyCompleteControls()})),this.setButtonPressedListener(this.buyBackButton,(function(){t.soundService.playSound("sfx-press-main-menu-button-when-browsing.mp3",Z.DEFAULT),t.hideBuyCompleteControls(),t.hideBuyDialog()})),this.hideBuyCompleteControls(),this.hideBuyConfirmControls(),this.showLineSelectControls()}},{key:"showLineSelectControls",value:function(){this.lineButtons.forEach((function(t){return t.interactive=!0}))}},{key:"hideLineSelectControls",value:function(){this.lineButtons.forEach((function(t){return t.interactive=!1}))}},{key:"setBuyConfirmControlsVisible",value:function(t){this.buyConfirmButton.visible=this.buyCancelButton.visible=this.buyConfirmControls.visible=t}},{key:"showBuyConfirmControls",value:function(t){this.buyBackButton.buttonMode=!0,this.setBuyConfirmControlsVisible(!0),this.selectedLine=t}},{key:"hideBuyConfirmControls",value:function(){this.setBuyConfirmControlsVisible(!1),this.backButton.interactive=!0}},{key:"setBuyCompleteControlsVisible",value:function(t){this.buyCompleteControls.visible=t}},{key:"showBuyCompleteControls",value:function(){this.setBuyCompleteControlsVisible(!0)}},{key:"hideBuyCompleteControls",value:function(){this.buyBackButton.buttonMode=!1,this.setBuyCompleteControlsVisible(!1)}},{key:"requestTicket",value:function(t){var e=ri[t];if(pi.hasTicket(t))return this.frameService.popupDialog.setText("You already have a "+e+" line ticket!"),void this.frameService.popupDialog.showYesOnly();var i=this.walletService.balance;if(i<this.ticketLineToCost.get(t)){var n="You need more snelfus to buy a "+e+" line ticket!";return i<10&&(n+=" Have you tried looking around your room?"),this.frameService.popupDialog.setText(n),void this.frameService.popupDialog.showYesOnly()}this.showBuyDialog(t)}},{key:"buyTicket",value:function(){var t=this.ticketLineToCost.get(this.selectedLine);pi.addTicket(this.selectedLine),this.walletService.debit(t,"Bought a "+ri[this.selectedLine]+" line ticket.")}},{key:"tintActivate",value:function(){var t=this,e=this.tint;this.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){t.tint.visible=!0})),framework.Actions.Tween(e,{from:{alpha:0},to:{alpha:1},duration:1.5})]))}},{key:"tintDeActivate",value:function(){var t=this,e=this.tint;this.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){t.tint.visible=!0})),framework.Actions.Tween(e,{from:{alpha:1},to:{alpha:0},duration:1})]))}},{key:"showBuyDialog",value:function(t){var e=this,i=this.walletService.balance,n=this.ticketLineToCost.get(t),o=i-n,s=this.buyDialog;s.visible=!0,this.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){e.soundService.playSound("sfx-ticket-selected.mp3",Z.C2),e.backButton.buttonMode=!1,e.hideLineSelectControls(),e.tintActivate(),s.alpha=1,e.showBuyConfirmControls(t),e.buyBalanceText.text=i.toString(),e.buyCostText.text="-"+n.toString(),e.buyResultText.text=o.toString()})),framework.Actions.Tween(s,{from:{x:this.buyDialogHiddenX},to:{x:this.buyDialogShowX},duration:.5})]))}},{key:"hideBuyDialog",value:function(){var t=this,e=this.buyDialog;this.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){t.backButton.buttonMode=!0,t.backButton.interactive=!0,t.tintDeActivate()})),framework.Actions.Tween(e,{from:{x:this.buyDialogShowX},to:{x:this.buyDialogHiddenX},duration:.5}),framework.Actions.Func((function(){t.showLineSelectControls(),t.hideBuyConfirmControls()}))]))}}]),e}(It),yi=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),D()(e,[{key:"onHoverStart",value:function(){this.delegate&&this.delegate.onHoverStart(this.item,this.view)}},{key:"onHoverStop",value:function(){this.delegate&&this.delegate.onHoverStop(this.item)}},{key:"populateView",value:function(){this.buttonHandler.setButtonHoverListener(this.view,this.onHoverStart.bind(this),this.onHoverStop.bind(this))}},{key:"getItemName",value:function(){return this.item.name}},{key:"getPath",value:function(){return this.item.path}},{key:"getViewConfig",value:function(){return this.viewConfig}},{key:"deinit",value:function(){this.buttonHandler.removeButtonHoverListener(this.view)}}]),e}(ue),gi=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"inventoryItemDelegate",null),i}return K()(e,t),D()(e,[{key:"getInitialisedItemTemplate",value:function(t,e){return new yi(this.buttonHandler,this.diService,this.loader.resources,t,e,this.inventoryItemDelegate)}}]),e}(he),wi=function(){function t(e){L()(this,t),j()(this,"node",null),j()(this,"title",null),j()(this,"description",null),this.node=e,this.title=framework.ContainerView.getChildByNameRecursive(this.node,"title"),this.description=framework.ContainerView.getChildByNameRecursive(this.node,"description")}return D()(t,[{key:"updateInfo",value:function(t,e){this.title.text=t,this.description.text=e}},{key:"visible",set:function(t){this.node.visible=t}}]),t}(),bi=function(){function t(e){L()(this,t),this.frameService=e,j()(this,"_log",[]);var i=Ct.getTransactions();i?this._log.append(i):Ct.setTransactions(this._log)}return D()(t,[{key:"credit",value:function(t,e){this.transact(t,e)}},{key:"debit",value:function(t,e){this.transact(-t,e)}},{key:"transact",value:function(t,e){var i=Math.max(ki,this.balance+t);for(Ct.setWalletBalance(i),this.frameService.updateSnelfus(i.toString()),this._log.append(new Ci(t,e));_i<this._log.length;)this._log.shift();Ct.setTransactions(this._log)}},{key:"balance",get:function(){var t=Ct.getWalletBalance();return isNumber(t)?t:(t=Si,Ct.setWalletBalance(t),t)}},{key:"log",get:function(){return this._log.clone(!0)}}]),t}(),ki=0,Si=100,_i=3,Ci=function t(e,i){L()(this,t),this.amount=e,this.description=i},Pi=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"itemLayout",null),j()(R()(i),"descriptionBox",null),j()(R()(i),"loader",null),j()(R()(i),"inventoryContainer",void 0),j()(R()(i),"questItemContainer",void 0),j()(R()(i),"walletContainer",void 0),j()(R()(i),"containers",{}),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this);var i=this.view.getChildByName("exitButton");this.setButtonPressedListener(i,(function(){t.soundService.playSound("sfx-click-tap-on-pad.mp3",Z.G2),t.navigationService.goToScene(Ct.getPreviousSceneName())})),this.descriptionBox=new wi(this.view.getChildByName("descriptionBoxContainer")),this.descriptionBox.visible=!1,this.loader=new PIXI.loaders.Loader,this.setupInventoryLayout(),this.setupQuestLayout(),this.setupWalletLayout(),this.togglePanel("questItemContainer")}},{key:"setupInventoryLayout",value:function(){var t=un.getLoadedAsset("gameItems"),e=Ht.getInventoryItems(t);this.inventoryContainer=framework.ContainerView.getChildByNameRecursive(this.view,"inventoryGridContainer"),this.containers.inventoryGridContainer=this.inventoryContainer;var i=this.view.getChildByName("inventoryButton");this.setButtonPressedListener(i,this.togglePanel.bind(this,this.inventoryContainer.name)),this.view.getChildByName("inventoryBox").visible=!1,this.itemLayout=new gi(this,this.diService,this,this.loader),this.itemLayout.layout=this.view.getChildByName("inventoryGrid"),this.itemLayout.items=e,this.itemLayout.columns=5,this.itemLayout.nbOfItemsPerPage=10,this.itemLayout.xSpacing=24,this.itemLayout.ySpacing=24,this.itemLayout.layoutWidth=836,this.itemLayout.layoutHeight=270,this.itemLayout.inventoryItemDelegate=this,this.itemLayout.previousButton=framework.ContainerView.getChildByNameRecursive(this.view,"prevButton"),this.itemLayout.nextButton=framework.ContainerView.getChildByNameRecursive(this.view,"nextButton"),this.itemLayout.itemBoxPrefab=un.getLoadedAsset("inventoryBoxViewConfig"),this.setButtonPressedListener(this.itemLayout.nextButton,this.itemLayout.nextPage.bind(this.itemLayout)),this.setButtonPressedListener(this.itemLayout.previousButton,this.itemLayout.previousPage.bind(this.itemLayout)),this.itemLayout.reloadData()}},{key:"setupQuestLayout",value:function(){var t=this.view.getChildByName("questButton");this.questItemContainer=framework.ContainerView.getChildByNameRecursive(this.view,"questItemContainer"),this.questItemContainer.visible=!0,this.containers.questItemContainer=this.questItemContainer,this.setButtonPressedListener(t,this.togglePanel.bind(this,this.questItemContainer.name)),this.checkQuestItems()}},{key:"setupWalletLayout",value:function(){var t=this;this.walletContainer=this.view.getChildByName("walletContainer"),this.walletContainer.visible=!1,this.containers[this.walletContainer.name]=this.walletContainer;var e=this.view.getChildByName("walletButton");this.setButtonPressedListener(e,(function(){t.togglePanel(t.walletContainer.name)}));for(var i=[],n=0;n<_i;n++)i.append({description:this.walletContainer.getChildByName("log-desc-"+n),amount:this.walletContainer.getChildByName("log-amount-"+n)}),i[n].description.text="",i[n].amount.text="";this.walletService.log.forEach((function(t,e){i[e].description.text=t.description,i[e].amount.text=t.amount.toString()})),this.walletContainer.getChildByName("balance-amount").text=this.walletService.balance.toString()}},{key:"checkQuestItems",value:function(){for(var t=["questCardMemoryIntegrator","questCardCubeGel","questCardKappatron","questCardChocolateChiller","questCardCans"],e=Bt.getUnacquiredQuestItemList().map((function(t){return t.name})),i=Bt.getQuestItemList().map((function(t){return!e.includes(t.name)})),n=0;n<t.length;n++)this.updateQuestItem(t[n],i[n])}},{key:"updateQuestItem",value:function(t,e){var i=framework.ContainerView.getChildByNameRecursive(this.view,t);framework.ContainerView.getChildByNameRecursive(i,"Card_Complete").visible=e,framework.ContainerView.getChildByNameRecursive(i,"Card_Incomplete").visible=!e,framework.ContainerView.getChildByNameRecursive(i,"checkbox").visible=e}},{key:"togglePanel",value:function(t){for(var e in this.containers){if(this.containers.hasOwnProperty(e))this.containers[e].visible=!1}t in this.containers&&(this.containers[t].visible=!0)}},{key:"onHoverStart",value:function(t,e){this.descriptionBox.visible=!0,this.descriptionBox.updateInfo(t.title,t.description);var i=framework.Vector.getGlobalPos(e),n=framework.Vector.transformGlobalToChild(i,this.descriptionBox.node.parent);n.x=e.x+.5*this.descriptionBox.node.width-66,n.y=e.y+.5*this.descriptionBox.node.height,this.descriptionBox.node.position.x=n.x,this.descriptionBox.node.position.y=n.y}},{key:"onHoverStop",value:function(t){this.descriptionBox.visible=!1}},{key:"onItemInteracted",value:function(t,e){}}]),e}(It),xi=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),D()(e,[{key:"initLayout",value:function(){this.shopItemLayout.layout=this.panel.getChildByName("layout"),this.shopItemLayout.previousButton=this.panel.getChildByName("previousButton"),this.shopItemLayout.nextButton=this.panel.getChildByName("nextButton"),this.shopItemLayout.itemBoxPrefab=un.getLoadedAsset("itemBoxViewConfig"),this.buttonHandler.setButtonPressedListener(this.getHomeButton(),this.goToMenu.bind(this)),this.buttonHandler.setButtonPressedListener(this.shopItemLayout.previousButton,this.shopItemLayout.previousPage.bind(this.shopItemLayout)),this.buttonHandler.setButtonPressedListener(this.shopItemLayout.nextButton,this.shopItemLayout.nextPage.bind(this.shopItemLayout))}},{key:"refreshItems",value:function(){var t=un.getLoadedAsset("gameShopItems"),e=un.getLoadedAsset("gameItems");this.shopItems=this.shopItemService.getAvailableShopItems(t,e),this.shopItemLayout.items=this.shopItems,this.shopItemLayout.reloadData()}}]),e}(pe),Bi=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),D()(e,[{key:"initLayout",value:function(){this.descriptionLabel=framework.ContainerView.getChildByNameRecursive(this.panel,"shopBoxDescription")}},{key:"init",value:function(t,e){this.shopItem=t,this.viewConfig=e,this.itemView=this.createItemDisplay(this.viewConfig),this.descriptionLabel.text=t.description}}]),e}(Pe),Ii=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),e}(ye),Ai=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),D()(e,[{key:"updateSpeechBubble",value:function(){this.description.text="Enjoy that donut!"}}]),e}(we),Ti=function(t){function e(t,i,n,o){var s;return L()(this,e),(s=O()(this,U()(e).call(this,t,i,n,o))).buttonHandler.setButtonPressedListener(s.getBuyButton(),s.goToMenu.bind(R()(s))),s}return K()(e,t),D()(e,[{key:"updateSpeechBubble",value:function(){this.description.text="One fresh Chocoberry Chiller!"}}]),e}(we),Ni=function(t){function e(t,i,n,o,s){var a;L()(this,e),a=O()(this,U()(e).call(this,t,i,n,o)),j()(R()(a),"finalState",void 0),j()(R()(a),"gameItemsJson",null),j()(R()(a),"expectedNbOfRequiredItems",4),j()(R()(a),"expectedRequiredItemId","basket-of-10-cyberries"),j()(R()(a),"shakeItemId","chocoberry-chillers"),j()(R()(a),"notEnoughItemMessage","Sorry, you don't have enough cyberries to make the shake."),j()(R()(a),"notEnoughMoneyMessage","Sorry, you don't have enough snelfus to make the shake."),a.gameItemsJson=un.getLoadedAsset("gameItems");var r=a.gameItemsJson[a.shakeItemId],h=new Ie(r.id,r.imageName,r.title,r.description,r.id,10,r.path,r.isDecor),u=window.app.createChildViews(un.getLoadedAsset("itemBoxViewConfig"))[0];return s.resources[r.id]||(s.add(r.id,window.app.devpath(r.path)),s.load((function(t,e){var i=new yi(a.buttonHandler,n,t.resources,u,r,null);a.init(h,i.getViewConfig())}))),a}return K()(e,t),D()(e,[{key:"initLayout",value:function(){this.titleLabel=framework.ContainerView.getChildByNameRecursive(this.panel,"shopBoxTitle"),this.descriptionLabel=framework.ContainerView.getChildByNameRecursive(this.panel,"shopBoxDescription")}},{key:"onInit",value:function(){W()(U()(e.prototype),"onInit",this).call(this),this.shopItem&&this.viewConfig&&!this.itemView&&(this.itemView=this.createItemDisplay(this.viewConfig))}},{key:"init",value:function(t,e){this.shopItem=t,this.viewConfig=e,this.itemView=this.createItemDisplay(this.viewConfig)}},{key:"setNextState",value:function(t){if(!(t instanceof Ti))throw"expect FinalShakeShopState";this.finalState=t}},{key:"buy",value:function(){this.hasUserEnoughMoney()?this.hasUserEnoughItems()?(this.pay(),this.finalState.init(this.shopItem,this.viewConfig),this.context.currentState=this.finalState):(this.frameService.popupDialog.setText(this.notEnoughItemMessage),this.frameService.popupDialog.showYesOnly()):(this.frameService.popupDialog.setText(this.notEnoughMoneyMessage),this.frameService.popupDialog.showYesOnly())}},{key:"cancel",value:function(){this.soundService.playSound("sfx-buy-button-pressed.mp3",Z.DEFAULT),this.context.currentState=this.mainState}},{key:"updateSpeechBubble",value:function(){this.speechBubbleLabel.text=this.cybermallState.getDialogue(zt.trade_5),this.soundService.playSound(this.cybermallState.getVo(zt.trade_5))}},{key:"pay",value:function(){this.walletService.debit(this.shopItem.price,"Bought "+this.shopItem.title+".");for(var t=0;t<this.expectedNbOfRequiredItems;t++)Ht.removeInventoryItem(this.expectedRequiredItemId);Ht.addItemToInventory(this.shopItem.id)}},{key:"hasUserEnoughMoney",value:function(){return this.walletService.balance>=this.shopItem.price}},{key:"hasUserEnoughItems",value:function(){var t=this;return Ht.getInventoryItems(this.gameItemsJson).count((function(e){return e.id==t.expectedRequiredItemId}))>=this.expectedNbOfRequiredItems}}]),e}(Pe),Li=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"loader",void 0),j()(R()(i),"cybermallState",void 0),j()(R()(i),"shopItemService",new Ae),j()(R()(i),"browseState",void 0),j()(R()(i),"donutSummaryShopState",void 0),j()(R()(i),"donutPurchaseSummaryShopState",void 0),j()(R()(i),"donutFinalPurchaseShopState",void 0),j()(R()(i),"shakeSummaryShopState",void 0),j()(R()(i),"finalShakeShopState",void 0),j()(R()(i),"mainMenuShopState",void 0),j()(R()(i),"context",new xe.a),j()(R()(i),"states",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-r-fair-loop.mp3"),this.loader=new PIXI.loaders.Loader;var i=this.view.getChildByName("exitButton");this.setButtonPressedListener(i,(function(){t.soundService.playSound("sfx-press-main-menu-button-when-browsing.mp3",Z.DEFAULT),t.navigationService.goToScene(an.rfairDonutStore)})),this.cybermallState=this.diService.getDataByKey(st.a.CyberMallState),this.cybermallState||(console.warn("cybermallState not found, defaulting to mock"),this.cybermallState=new ne,this.cybermallState.setCurrentMerchant(an.rfairDonutStore)),this.cybermallState.setCurrentMerchant(an.rfairDonutStore),this.diService.setDataWithKey(st.a.CyberMallState,this.cybermallState),this.shopItemService.cybermallState=this.cybermallState,this.setupClerk(),this.initStates(),this.setupStateNavigation(),this.initBubbleSpeechForAllStates(),this.context.currentState=this.mainMenuShopState}},{key:"setupClerk",value:function(){framework.ContainerView.getChildByNameRecursive(this.view,"bunny").visible=!0}},{key:"initStates",value:function(){this.browseState=this.createDonutBrowseShopState(),this.donutSummaryShopState=this.createDonutSummaryState(),this.donutPurchaseSummaryShopState=this.createPurchaseDonutSummaryState(),this.donutFinalPurchaseShopState=this.createFinalDonutPurchaseState(),this.shakeSummaryShopState=this.createShakeSummaryShopState(),this.finalShakeShopState=this.createFinalShakeShopState(),this.mainMenuShopState=this.createMainMenuState(),this.states=[this.browseState,this.donutSummaryShopState,this.donutPurchaseSummaryShopState,this.donutFinalPurchaseShopState,this.shakeSummaryShopState,this.finalShakeShopState,this.mainMenuShopState]}},{key:"createDonutBrowseShopState",value:function(){return new xi(this.view.getChildByName("browsePanel"),this,this.diService,this.loader,this.shopItemService)}},{key:"createDonutSummaryState",value:function(){return new Bi(this.view.getChildByName("ItemSummary"),this,this.diService,this.browseState)}},{key:"createPurchaseDonutSummaryState",value:function(){return new Ii(this.view.getChildByName("ItemPurchaseSummary"),this,this.diService,this.browseState,this.shopItemService)}},{key:"createFinalDonutPurchaseState",value:function(){return new Ai(this.view.getChildByName("finalPurchaseScreen"),this,this.diService,this.browseState)}},{key:"createShakeSummaryShopState",value:function(){return new Ni(this.view.getChildByName("shakeSummary"),this,this.diService,this.browseState,this.loader)}},{key:"createFinalShakeShopState",value:function(){return new Ti(this.view.getChildByName("finalShakeScreen"),this,this.diService,this.browseState)}},{key:"createMainMenuState",value:function(){return new re(this.view.getChildByName("mainMenuPanel"),this,this.diService,this.browseState,this.shakeSummaryShopState)}},{key:"setupStateNavigation",value:function(){var t=this;this.states.forEach((function(e){e.mainState=t.mainMenuShopState})),this.browseState.nextState=this.donutSummaryShopState,this.donutSummaryShopState.nextState=this.donutPurchaseSummaryShopState,this.donutPurchaseSummaryShopState.nextState=this.donutFinalPurchaseShopState,this.shakeSummaryShopState.setNextState(this.finalShakeShopState)}},{key:"initBubbleSpeechForAllStates",value:function(){var t=this.view.getChildByName("speechWindow").children[0];this.states.forEach((function(e){e.speechBubbleLabel=t}))}},{key:"destroy",value:function(){this.loader.reset(),this.diService.deleteDataWithKey(st.a.CyberMallState),W()(U()(e.prototype),"destroy",this).call(this)}}]),e}(It),Mi=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),D()(e,[{key:"getItemName",value:function(){return this.item.name}}]),e}(ue),Di=function(t){function e(){return L()(this,e),O()(this,U()(e).apply(this,arguments))}return K()(e,t),D()(e,[{key:"getInitialisedItemTemplate",value:function(t,e){return new Mi(this.buttonHandler,this.diService,this.loader.resources,t,e,this.delegate)}}]),e}(he),Vi=function(t){function e(t,i,n,o,s,a){var r;return L()(this,e),r=O()(this,U()(e).call(this,t,i,n,o,s)),j()(R()(r),"lostItemService",null),r.lostItemService=a,r}return K()(e,t),D()(e,[{key:"initLayout",value:function(){this.shopItemLayout.layout=this.panel.getChildByName("layout"),this.shopItemLayout.previousButton=this.panel.getChildByName("previousButton"),this.shopItemLayout.nextButton=this.panel.getChildByName("nextButton"),this.shopItemLayout.itemBoxPrefab=un.getLoadedAsset("tradeBoxViewConfig"),this.buttonHandler.setButtonPressedListener(this.shopItemLayout.previousButton,this.shopItemLayout.previousPage.bind(this.shopItemLayout)),this.buttonHandler.setButtonPressedListener(this.shopItemLayout.nextButton,this.shopItemLayout.nextPage.bind(this.shopItemLayout))}},{key:"initItemLayout",value:function(t,e){this.shopItemLayout=new Di(this.buttonHandler,t,this,e)}},{key:"refreshItems",value:function(){var t=un.getLoadedAsset("gameShopItems"),e=un.getLoadedAsset("gameItems");this.shopItems=this.lostItemService.getAvailableShopItems(t,e),this.getHomeButton().visible=!1,this.updateSpeechBubble(),this.shopItemLayout.items=this.shopItems,this.shopItemLayout.reloadData()}},{key:"updateLines",value:function(){this.clerkLines={noItems:zt.browse_1,hasItems:zt.browse_1}}}]),e}(pe),Oi=function(t){function e(t,i,n,o){var s;return L()(this,e),s=O()(this,U()(e).call(this,t,i,n,o)),j()(R()(s),"itemOwner",null),j()(R()(s),"itemReward",null),s}return K()(e,t),D()(e,[{key:"initLayout",value:function(){this.titleLabel=framework.ContainerView.getChildByNameRecursive(this.panel,"itemTitle"),this.descriptionLabel=framework.ContainerView.getChildByNameRecursive(this.panel,"itemDescription")}},{key:"init",value:function(t,e){this.shopItem=t,this.viewConfig=e,this.itemView=this.createItemDisplay(this.viewConfig),this.itemOwner=framework.ContainerView.getChildByNameRecursive(this.panel,"itemOwner"),this.itemReward=framework.ContainerView.getChildByNameRecursive(this.panel,"itemReward"),this.titleLabel.text=t.title,this.descriptionLabel.text=t.description,this.itemOwner.text="Owner: "+t.owner,this.itemReward.text="Reward: "+t.price}},{key:"updateSpeechBubble",value:function(){}},{key:"buy",value:function(){Ht.hasItemInInventory(this.shopItem.id)?(this.nextState.init(this.shopItem,this.viewConfig),this.context.currentState=this.nextState):(this.frameService.popupDialog.setText("Sorry you don't have that item"),this.frameService.popupDialog.showYesOnly())}}]),e}(Pe),Ei=function(t){function e(t,i,n,o,s,a){var r;return L()(this,e),r=O()(this,U()(e).call(this,t,i,n,o,s)),j()(R()(r),"description",void 0),j()(R()(r),"lostItemService",void 0),r.lostItemService=a,r}return K()(e,t),D()(e,[{key:"initLayout",value:function(){this.buttonHandler.setButtonPressedListener(this.getBuyButton(),this.cancel.bind(this)),this.sprite=framework.ContainerView.getChildByNameRecursive(this.panel,"sprite"),this.spritePosition=this.sprite.position,this.placeholderParent=this.sprite.parent,this.placeholderParent.removeChild(this.sprite)}},{key:"onInit",value:function(){W()(U()(e.prototype),"onInit",this).call(this),this.getHomeButton().visible=!1}},{key:"init",value:function(t,e){this.shopItem=t,this.viewConfig=e,this.itemView=this.createItemDisplay(this.viewConfig),this.description=framework.ContainerView.getChildByNameRecursive(this.panel,"shopBoxDescription"),this.description.text="Thanks a lot! "+t.owner+" is going to be happy! Your reward of "+t.price+" snelfus has been added to your squak pad.",this.walletService.credit(t.price,"Returned a lost "+t.title+"."),this.lostItemService.updatePurchasesForMerchant(t.shopItemId,this.shopItemService.getMerchantName()),Ht.removeInventoryItem(t.id)}},{key:"buy",value:function(){}},{key:"cancel",value:function(){this.browseState instanceof Vi&&this.browseState.updateLines(),W()(U()(e.prototype),"cancel",this).call(this)}},{key:"updateSpeechBubble",value:function(){this.speechBubbleLabel.text=this.cybermallState.getDialogue(zt.purchase_1),this.soundService.playSound(this.cybermallState.getVo(zt.purchase_1))}}]),e}(ye),Ri=function(t){function e(t,i,n,o,s,a,r,h){var u,l=arguments.length>8&&void 0!==arguments[8]&&arguments[8];return L()(this,e),u=O()(this,U()(e).call(this,t,i,n,o,s,a,r,l)),j()(R()(u),"owner",void 0),u.owner=h,u}return K()(e,t),e}(Ie),Fi=function(){function t(e){L()(this,t),j()(this,"cybermallState",void 0),this.cybermallState=e}return D()(t,[{key:"getAvailableShopItems",value:function(t,e){var i=this.getMerchantName(),n=t[i],o=Ct.getPurchasedItems()[i],s=this.removePurchasedItems(n,o);return this.parseItems(s,e)}},{key:"getMerchantName",value:function(){return this.cybermallState.getCurrentMerchant()}},{key:"removePurchasedItems",value:function(t,e){if(!e)return t;for(var i=0;i<e.length;i++)for(var n=e[i],o=0;o<t.length;o++){if(t[o].id===n){t.splice(o,1);break}}return t}},{key:"parseItems",value:function(t,e){return t.map((function(t){var i=e[t.itemId];return new Ri(i.id,i.imageName,i.title,i.description,t.id,t.price,i.path,i.owner,i.isDecor)}))}},{key:"updatePurchasesForMerchant",value:function(t,e){var i=Ct.getPurchasedItems(),n=i[e];n||(n=[]),n.push(t),i[e]=n,Ct.updatePurchasedItems(i)}}]),t}(),Ui=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"dialogues",new Map([[zt.browse_1,"Find anything?"],[zt.purchase_1,"Great job finding that item!"],[zt.browse_2,"Welcome to the lost and found, have you found any of these items?"]])),j()(R()(i),"grubbyDialogue",new Map([[zt.browse_1,"grubby_1.mp3"],[zt.purchase_1,"grubby_3.mp3"],[zt.browse_2,"grubby_2.mp3"]])),j()(R()(i),"dialoguesMap",new Map([[an.rfairLostAndFoundShop,i.grubbyDialogue]])),i}return K()(e,t),e}(ne),Hi=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"loader",void 0),j()(R()(i),"cybermallState",void 0),j()(R()(i),"shopItemService",new Ae),j()(R()(i),"lostItemService",void 0),j()(R()(i),"browseState",void 0),j()(R()(i),"summaryShopState",void 0),j()(R()(i),"finalShopState",void 0),j()(R()(i),"context",new xe.a),j()(R()(i),"states",void 0),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-r-fair-loop.mp3");var i=this.view.getChildByName("exitButton");this.loader=new PIXI.loaders.Loader,this.setButtonPressedListener(i,(function(){t.soundService.playSound("sfx-press-main-menu-button-when-browsing.mp3",Z.DEFAULT),t.navigationService.goToScene(an.rfairLostAndFound)})),this.cybermallState=this.diService.getDataByKey(st.a.CyberMallState),this.cybermallState||(console.warn("cybermallState not found, defaulting to mock"),this.cybermallState=new Ui,this.cybermallState.setCurrentMerchant(an.rfairLostAndFoundShop)),this.cybermallState.setCurrentMerchant(an.rfairLostAndFoundShop),this.diService.setDataWithKey(st.a.CyberMallState,this.cybermallState),this.lostItemService=new Fi(this.cybermallState),this.shopItemService.cybermallState=this.cybermallState,this.setupClerk(),this.initStates(),this.setupStateNavigation(),this.initBubbleSpeechForAllStates(),this.context.currentState=this.browseState}},{key:"setupClerk",value:function(){framework.ContainerView.getChildByNameRecursive(this.view,"lost-and-found-clerk").visible=!0}},{key:"initStates",value:function(){this.browseState=this.createBrowseShopState(),this.summaryShopState=this.createSummaryState(),this.finalShopState=this.createFinalState(),this.states=[this.browseState,this.summaryShopState,this.finalShopState]}},{key:"createBrowseShopState",value:function(){return new Vi(this.view.getChildByName("browsePanel"),this,this.diService,this.loader,this.shopItemService,this.lostItemService)}},{key:"createSummaryState",value:function(){return new Oi(this.view.getChildByName("ItemSummary"),this,this.diService,this.browseState)}},{key:"createFinalState",value:function(){return new Ei(this.view.getChildByName("finalPurchaseScreen"),this,this.diService,this.browseState,this.shopItemService,this.lostItemService)}},{key:"setupStateNavigation",value:function(){var t=this;this.states.forEach((function(e){e.mainState=t.browseState})),this.browseState.nextState=this.summaryShopState,this.summaryShopState.nextState=this.finalShopState}},{key:"initBubbleSpeechForAllStates",value:function(){var t=this.view.getChildByName("speechWindow").children[0];this.states.forEach((function(e){e.speechBubbleLabel=t}))}},{key:"destroy",value:function(){this.loader.reset(),this.diService.deleteDataWithKey(st.a.CyberMallState),W()(U()(e.prototype),"destroy",this).call(this)}}]),e}(It);!function(t){t[t.RED=0]="RED",t[t.BLUE=1]="BLUE",t[t.YELLOW=2]="YELLOW",t[t.GREEN=3]="GREEN",t[t.PINK=4]="PINK"}(ci||(ci={}));var Wi=function(){function t(){L()(this,t)}return D()(t,[{key:"progress",get:function(){return.1}}]),t}(),qi=function(){function t(e,i){L()(this,t),j()(this,"graphData",null),j()(this,"zoneView",null),j()(this,"slider",null),this.graphData=e,this.zoneView=i,this.slider=new Wi}return D()(t,[{key:"getCellHeight",value:function(t){return t*this.graphData.graphHeight/this.graphData.numberOfCells}}]),t}(),Ki=function(t){function e(t,i,n){var o;return L()(this,e),o=O()(this,U()(e).call(this,t,i)),j()(R()(o),"width",0),o.width=n,o}return K()(e,t),D()(e,[{key:"onLoad",value:function(){this.drawGraph(this.getCellHeight(this.graphData.getScaleForSliderValue(this.slider.progress)))}},{key:"drawGraph",value:function(t){var e=this.zoneView;e.clear();var i=this.width-2;e.lineStyle(2,framework.ColourUtils.colourToNumber("#b3b3b3"),1),e.beginFill(framework.ColourUtils.colourToNumber("#b3b3b3"),1);for(var n=0;n<this.graphData.numberOfCells;n++){var o=-1*t*n;e.moveTo(-i,o),e.lineTo(i+8,o)}e.closePath(),e.endFill()}}]),e}(qi),Gi=function(){function t(e,i,n,o){L()(this,t),j()(this,"priority",0),j()(this,"layout",null),j()(this,"color",null),j()(this,"prefab",null),j()(this,"container",null),j()(this,"graphData",null),j()(this,"slider",new Wi),j()(this,"collider",null),j()(this,"grapher",null),this.container=e,this.prefab=i,this.color=n,this.collider=this.container.getChildByName("dropZone"),this.collider.alpha=0,this.layout=this.container.getChildByName("layout"),this.layout.scale.x=this.layout.scale.y=1,this.layout.x=-42.5,this.layout.y=248,this.graphData=o;var s=this.container.getChildByName("graphLines");this.grapher=new Ki(o,s,this.collider.width/2),this.grapher.onLoad()}return D()(t,[{key:"add",value:function(){var t=window.app.createView(this.prefab),e=this.prefab.width,i=this.prefab.height;t.beginFill(this.color,1),t.drawRect(0,0,e,i),t.endFill(),t.position.y=-this.layout.children.length*i,this.layout.addChild(t)}},{key:"shouldAcceptTarget",value:function(){return this.layout.children.length+1<=this.getAuthorisedChildrenCount()}},{key:"getAuthorisedChildrenCount",value:function(){var t=Math.min(this.graphData.sliderMaxValue,Math.max(this.graphData.sliderMinValue,this.slider.progress));return this.polynomialApproximationOfScale(t)}},{key:"polynomialApproximationOfScale",value:function(t){return(((113.016*(t-.65)-35.2381)*(t-.5)+24.3333)*(t-.1)-13.3333)*(t-1)+2}},{key:"clear",value:function(){this.layout.removeChildren()}}]),t}(),ji=function(t){function e(t){var i;L()(this,e),i=O()(this,U()(e).call(this,t)),j()(R()(i),"targetPosition",null),j()(R()(i),"movableDelegate",null),j()(R()(i),"speed",100),j()(R()(i),"randomSpeedFactor",.25),j()(R()(i),"minDistance",2),j()(R()(i),"spawnBounds",void 0),j()(R()(i),"maxX",0),j()(R()(i),"maxY",0),j()(R()(i),"minX",0),j()(R()(i),"minY",0);var n=i.speed-i.speed*i.randomSpeedFactor,o=i.speed+i.speed*i.randomSpeedFactor;i.spawnBounds=t.spawnBounds,i.speed=MathExt.randomInt(n,o);var s=framework.Vector.create(i.spawnBounds.x,i.spawnBounds.y),a=framework.Vector.transformGlobalToChild(s,i.view.parent);return i.minX=a.x,i.minY=a.y,i.maxX=a.x+i.spawnBounds.width,i.maxY=a.y+i.spawnBounds.height,i}return K()(e,t),D()(e,[{key:"update",value:function(t){if(this.targetPosition&&this.isActive){var e=framework.Vector.sub(this.targetPosition,this.view.position);e=framework.Vector.normalise(e),e=framework.Vector.mult(e,this.speed*t);var i=framework.Vector.add(this.view.position,e);framework.Vector.magnitudeSquared(framework.Vector.sub(this.targetPosition,i))<this.minDistance*this.minDistance&&(i=this.targetPosition,this.movableDelegate&&this.movableDelegate.onDestinationReached(this.view)),this.view.position.x=i.x,this.view.position.y=i.y}}}]),e}(framework.ViewScript),zi=function(){function t(){L()(this,t)}return D()(t,null,[{key:"changeParent",value:function(t,e){if(t.parent!=e){var i=framework.Vector.getGlobalPos(t),n=framework.Vector.transformGlobalToChild(i,e);t.setParent(e),t.position.x=n.x,t.position.y=n.y}}}]),t}(),Xi=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"zoneInfo",void 0),j()(R()(i),"movable",void 0),j()(R()(i),"draggable",void 0),i}return K()(e,t),e}(framework.ContainerView),Yi=function(){function t(e,i,n,o,s,a,r,h,u){L()(this,t),j()(this,"sortingGameManagerDelegate",null),j()(this,"spawnPoint",null),j()(this,"minSpawnTime",1),j()(this,"maxSpawnTime",10),j()(this,"targets",[]),j()(this,"dropZoneInfo",[]),j()(this,"isShowingHint",!1),j()(this,"actionManagerDelegate",void 0),j()(this,"interactionHandler",void 0),j()(this,"spawnContainer",void 0),j()(this,"dragLayer",null),j()(this,"spawnCollider",null),j()(this,"hint",null),j()(this,"spawnBounds",void 0),j()(this,"savedPositionAtPickUp",new PIXI.Point(0,0)),j()(this,"soundService",void 0),this.actionManagerDelegate=e,this.interactionHandler=i,this.soundService=n.get(st.b.SoundService),this.spawnContainer=o,this.spawnContainer.removeChildren(),this.dragLayer=a,this.dropZoneInfo=r,this.spawnPoint=s,this.spawnCollider=h,this.spawnBounds=this.spawnCollider.getBounds(),this.hint=new framework.SpriteView({textureName:u,anchor:{x:.5,y:.5}})}return D()(t,[{key:"startRound",value:function(t){var e=this;this.clearZones(),this.clearTargets(),this.targets=this.createArrayOfTarget(t),this.targets.forEach((function(t){e.scheduleSpawn(t)}))}},{key:"clearTargets",value:function(){this.targets=[],this.spawnContainer.removeChildren()}},{key:"clearZones",value:function(){this.dropZoneInfo.forEach((function(t){t.zone.clear()}))}},{key:"createArrayOfTarget",value:function(t){for(var e=[],i=0;i<t;i++)e.push(this.dropZoneInfo.random());return e}},{key:"scheduleSpawn",value:function(t){this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.RandomDelay(this.minSpawnTime,this.maxSpawnTime),framework.Actions.Func(this.spawn.bind(this,t))]))}},{key:"spawn",value:function(t){var e=window.app.createChildViews(t.prefab)[0];e.getChildByName("collider").visible=!1;var i=new ji({view:e,spawnBounds:this.spawnBounds});i.movableDelegate=this,e.movable=i;var n=new framework.DragViewScript({view:e,dragStartedCallback:this.onDragStarted.bind(this),dragMovedCallback:this.onDragMoved.bind(this),dragEndedCallback:this.onDragEnded.bind(this)});e.draggable=n,this.interactionHandler.scripts.addScripts([n,i]),e.zoneInfo=t,this.assignPosition(e),this.spawnContainer.addChild(e)}},{key:"assignPosition",value:function(t){var e=t.movable,i=this.spawnPoint.spawnRandomPoint;t.position=new PIXI.Point(i.x,i.y);var n=Math.floor(this.spawnBounds.width-t.position.x),o=Math.floor(this.spawnBounds.height-t.position.y),s=framework.Vector.create(n,o);e.targetPosition=s,e.isActive=!0}},{key:"onDestinationReached",value:function(t){this.assignPosition(t)}},{key:"onDragStarted",value:function(t,e){this.soundService.playSound("sfx-select-bat.mp3",Z.C1);var i=e;i.movable.isActive=!1,this.savedPositionAtPickUp=i.getGlobalPosition(),zi.changeParent(e,this.dragLayer),this.desactivateDragOnOtherObjects(e)}},{key:"desactivateDragOnOtherObjects",value:function(t){this.spawnContainer.children.forEach((function(e){if(e instanceof Xi){var i=e.draggable;i&&e!=t&&(i.isActive=!1)}}))}},{key:"onDragEnded",value:function(t,e){var i=e;i.movable&&this.handleDrop(i),this.activateDragOnOtherOjects()}},{key:"handleDrop",value:function(t){var e=this;if(this.checkIfInExpectedZone(t))this.soundService.playSound("sfx-drag-bat-to-correct-colour.mp3",Z.C1),this.checkIfRoundFinished();else{this.soundService.playSound("sfx-drag-bat-to-wrong-colour-place.mp3",Z.C1);var i=framework.Vector.transformGlobalToChild(this.savedPositionAtPickUp,this.dragLayer),n=framework.Vector.magnitude(framework.Vector.sub(i,t.position))/(4*t.movable.speed);t.draggable.isActive=!1,this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Tween(t,{to:{x:i.x,y:i.y},duration:n}),framework.Actions.Func((function(){zi.changeParent(t,e.spawnContainer),t.movable.isActive=!0,t.draggable.isActive=!0}))]))}}},{key:"checkIfInExpectedZone",value:function(t){for(var e=!1,i=0;i<this.dropZoneInfo.length;i++){var n=this.dropZoneInfo[i].zone;if(this.isInZone(t,n)){var o=t.zoneInfo;if(o.zone==n){e=!0,n.shouldAcceptTarget()?(this.targets.splice(this.targets.indexOf(t),1),this.dropBatInGraph(t,n)):(this.spawn(o),t.destroy());break}}}return e}},{key:"isInZone",value:function(t,e){var i=framework.Vector.transformGlobalToChild(framework.Vector.getGlobalPos(t),e.collider);return rt.pointInPolygon(i,e.collider)}},{key:"dropBatInGraph",value:function(t,e){t.destroy(),e.add()}},{key:"checkIfRoundFinished",value:function(){0===this.targets.length&&this.sortingGameManagerDelegate&&this.sortingGameManagerDelegate.onRoundTerminated()}},{key:"activateDragOnOtherOjects",value:function(){this.spawnContainer.children.forEach((function(t){if(t instanceof Xi){var e=t.draggable;e&&(e.isActive=!0)}}))}},{key:"highlightTarget",value:function(){var t=this;if(this.spawnContainer.children.length>0&&!this.isShowingHint){this.soundService.playSound("sfx-tap-ok-button.mp3",Z.C1);var e=this.spawnContainer.children[0];if(e){e.addChild(this.hint);this.isShowingHint=!0,this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Tween(this.hint.scale,{from:{x:1.4,y:1.4},to:{x:2,y:2},yoyo:!0,repeat:4,duration:.6}),framework.Actions.Func((function(){t.isShowingHint=!1,e.removeChild(t.hint)}))]))}}}},{key:"onDragMoved",value:function(t,e){}}]),t}(),Zi=function(){function t(e){L()(this,t),j()(this,"front",null),j()(this,"back",null),this.front=e.getChildByName("RoomButtonPressed"),this.back=e.getChildByName("RoomButtonDefault")}return D()(t,[{key:"setHilighted",value:function(){this.front.visible=!0,this.back.visible=!1}},{key:"setNormal",value:function(){this.front.visible=!1,this.back.visible=!0}}]),t}(),Qi=function(){function t(e,i,n,o,s,a,r,h,u,l,c,d,p){var v=this;L()(this,t),j()(this,"currentRound",0),j()(this,"numberOfRounds",6),j()(this,"batManager",null),j()(this,"gameData",null),j()(this,"roomButtons",[]),j()(this,"soundService",null),j()(this,"walletService",null),j()(this,"gameLayout",null),j()(this,"debugSkipButton",null),j()(this,"debugEndButton",null),j()(this,"interactionHandler",null),j()(this,"endOfRoundPopOver",null),j()(this,"introView",void 0),j()(this,"endOfGameView",void 0),j()(this,"gameManagerDelegate",void 0),j()(this,"voPlayerDelegate",void 0);var f=i.get(st.b.BuildInfoService);this.batManager=h,this.batManager.sortingGameManagerDelegate=this,this.gameData=r,this.soundService=i.get(st.b.SoundService),this.walletService=i.get(st.b.WalletService),this.gameLayout=e,this.endOfRoundPopOver=n,this.introView=o,this.endOfGameView=s,this.debugSkipButton=u,this.debugEndButton=l,this.gameManagerDelegate=d,this.voPlayerDelegate=p,a.children.forEach((function(t){var e=new Zi(t);v.roomButtons.push(e),e.setNormal()}));var m=f.isDebug;this.interactionHandler=c,this.debugSkipButton.visible=m,this.debugEndButton.visible=m,m&&(framework.ContainerView.visibleChildren(this.debugSkipButton,!0),this.interactionHandler.setButtonPressedListener(this.debugSkipButton,this.endRound.bind(this)),framework.ContainerView.visibleChildren(this.debugEndButton,!0),this.interactionHandler.setButtonPressedListener(this.debugEndButton,this.endGame.bind(this))),this.showIntro()}return D()(t,[{key:"onRoundTerminated",value:function(){this.checkIfEndOfGame()?this.endGame():this.endRound()}},{key:"showIntro",value:function(){this.setInterstitial(this.introView,this.startRound.bind(this)),this.voPlayerDelegate.playVO("VOs/bats_1.mp3")}},{key:"setInterstitial",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};t.visible=!0,framework.ContainerView.visibleChildren(t,!0);var n=t.getChildByName("next-button"),o=function(){e.soundService.playSound("sfx-tap-ok-button.mp3",Z.G2),e.interactionHandler.removeButtonPressedListener(n),e.introView.visible=!1,e.voPlayerDelegate.stopVO(),i&&i()};this.interactionHandler.setButtonPressedListener(n,o)}},{key:"startRound",value:function(){if(this.checkIfEndOfGame())this.endGame();else{this.highlightCurrentRoom();var t=6+this.currentRound+MathExt.randomInt(this.currentRound+1);this.batManager.startRound(t)}}},{key:"highlightCurrentRoom",value:function(){this.roomButtons[this.currentRound].setHilighted()}},{key:"checkIfEndOfGame",value:function(){return this.currentRound+1>this.numberOfRounds}},{key:"endRound",value:function(){this.soundService.playSound("sfx-successfully-cleared-a-room.mp3",Z.C2),++this.currentRound,this.endOfRoundPopOver.showOver(this.startRound.bind(this)),this.addSnelfus(this.getRoundGain(),"Won a Bats in the Belfry game.")}},{key:"getRoundGain",value:function(){return this.gameData.gain}},{key:"getBonusGain",value:function(){return this.gameData.bonus}},{key:"endGame",value:function(){this.soundService.playSound("sfx-sound-when-completing-the-game.mp3",Z.C2),this.gameLayout.visible=!1,this.addSnelfus(this.getBonusGain(),"Won all Bats in the Belfry games."),this.setInterstitial(this.endOfGameView,this.gameManagerDelegate.onGameEnded.bind(this.gameManagerDelegate))}},{key:"addSnelfus",value:function(t,e){this.walletService.credit(t,e)}},{key:"onHintPressed",value:function(){this.batManager.highlightTarget()}}]),t}(),Ji=function(t){function e(t,i,n){var o;return L()(this,e),o=O()(this,U()(e).call(this,t,i)),j()(R()(o),"prefab",null),o.prefab=n,o}return K()(e,t),D()(e,[{key:"onLoad",value:function(){this.drawGraph(this.getCellHeight(this.graphData.getScaleForSliderValue(this.slider.progress)))}},{key:"drawGraph",value:function(t){this.zoneView.removeChildren();for(var e=0;e<this.graphData.numberOfCells;e++){var i=window.app.createView(this.prefab);i.text=(e+1).toString();var n=-1*t*(e+1);i.y=n,i.x=0,this.zoneView.addChild(i)}}}]),e}(qi),$i=function(){function t(){L()(this,t)}return D()(t,null,[{key:"convertInterval",value:function(t,e,i,n,o){return(t-e)/(i-e)*(o-n)+n}}]),t}(),tn=function(){function t(){L()(this,t),j()(this,"sliderMinValue",.1),j()(this,"sliderMaxValue",1),j()(this,"defaultSliderValue",.5),j()(this,"graphHeight",580),j()(this,"startingScale",1),j()(this,"endScale",7),j()(this,"numberOfCells",14),j()(this,"lineWidth",2)}return D()(t,[{key:"getScaleForSliderValue",value:function(t){return $i.convertInterval(t,this.sliderMinValue,this.sliderMaxValue,this.startingScale,this.endScale)}}]),t}(),en=function(){function t(e){L()(this,t),this.spawnBounds=e,this.spawnBounds=e}return D()(t,[{key:"spawnRandomPoint",get:function(){var t=Math.random()>.5,e=Math.random()>.5,i=Math.floor(e?this.spawnBounds.width:0),n=Math.floor(Math.random()*this.spawnBounds.height);return t&&(i=Math.floor(Math.random()*this.spawnBounds.width),n=Math.floor(e?this.spawnBounds.height:0)),framework.Vector.create(i,n)}}]),t}(),nn=function(t){function e(t,i,n){var o;return L()(this,e),o=O()(this,U()(e).call(this,t,i)),j()(R()(o),"nextButton",void 0),o.nextButton=o.view.getChildByName(n),framework.ContainerView.visibleChildren(o.view,!0),o.init(),o}return K()(e,t),D()(e,[{key:"showOver",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.view.visible=!0;var i=function(){t.soundService.playSound("sfx-tap-ok-button.mp3",Z.G2),t.removeButtonPressedListener(t.nextButton),t.removeButtonPressedListener(t.background),t.hide(e)};this.setButtonPressedListener(this.nextButton,i,!0),this.setButtonPressedListener(this.background,i),this.show()}}]),e}(qt),on=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"redBatPrefab",null),j()(R()(i),"blueBatPrefab",null),j()(R()(i),"yellowBatPrefab",null),j()(R()(i),"greenBatPrefab",null),j()(R()(i),"pinkBatPrefab",null),j()(R()(i),"redDropZone",null),j()(R()(i),"blueDropZone",null),j()(R()(i),"yellowDropZone",null),j()(R()(i),"greenDropZone",null),j()(R()(i),"pinkDropZone",null),j()(R()(i),"batManager",null),j()(R()(i),"sortingGameManager",null),j()(R()(i),"batGameData",null),j()(R()(i),"grapherNumber",null),i}return K()(e,t),D()(e,[{key:"init",value:function(){W()(U()(e.prototype),"init",this).call(this),this.soundService.playMusic("music-castleblanca-loop.mp3"),this.setupExitButton();var t=new tn;this.createDropZones(t),this.redBatPrefab=this.view.getChildByName("red-bat"),this.blueBatPrefab=this.view.getChildByName("blue-bat"),this.yellowBatPrefab=this.view.getChildByName("yellow-bat"),this.greenBatPrefab=this.view.getChildByName("green-bat"),this.pinkBatPrefab=this.view.getChildByName("pink-bat"),this.batGameData=un.getLoadedAsset("batsGame");var i=this.view.getChildByName("lines");i.x=250,i.y=-180;var n=this.view.getChildByName("graphBackground");n.scale.x/=2,n.scale.y/=2;var o=this.view.getChildByName("gameLayout"),s=this.view.getChildByName("skipButton"),a=this.view.getChildByName("skipGame"),r=this.view.getChildByName("roomButtons"),h=this.view.getChildByName("hintButton"),u=this.view.getChildByName("numbersLayout"),l=u.getChildByName("graphNumber");this.grapherNumber=new Ji(t,u,l.viewConfig),this.grapherNumber.onLoad(),this.initBatManager();var c=this.view.getChildByName("Instructions"),d=this.view.getChildByName("Intro"),p=this.view.getChildByName("outro"),v=this.view.getChildByName("FinishPopup"),f=new nn(c,this.diService,"next-button"),m=new nn(v,this.diService,"next-button");this.addChildAsPopUp(m),this.addChildAsPopUp(f),this.frameService.setContextualHelpButtonAction(this.showInstructions.bind(this,f)),this.sortingGameManager=new Qi(o,this.diService,m,d,p,r,this.batGameData,this.batManager,s,a,this,this,this),this.setButtonPressedListener(h,this.batManager.highlightTarget.bind(this.batManager))}},{key:"showInstructions",value:function(t){var e=this;t.showOver((function(){e.stopVO()})),this.playVO("VOs/bats_2.mp3")}},{key:"setupExitButton",value:function(){var t=this,e=this.view.getChildByName("exitButton");this.frameService.popupDialog.setText("Are you sure you want to leave Bats in the Belfry?"),this.setButtonPressedListener(e,(function(){t.frameService.popupDialog.showYesNo((function(e){e&&t.navigationService.goToScene(an.castleInnLobby)}))}))}},{key:"createDropZones",value:function(t){var e=this.view.getChildByName("redDropZone"),i=e.getChildByName("graphBarSection");this.redDropZone=new Gi(e,i.viewConfig,framework.ColourUtils.colourToNumber("#C10A0A"),t),this.blueDropZone=new Gi(this.view.getChildByName("blueDropZone"),i.viewConfig,framework.ColourUtils.colourToNumber("#66FFFF"),t),this.yellowDropZone=new Gi(this.view.getChildByName("yellowDropZone"),i.viewConfig,framework.ColourUtils.colourToNumber("#FDEA7F"),t),this.greenDropZone=new Gi(this.view.getChildByName("greenDropZone"),i.viewConfig,framework.ColourUtils.colourToNumber("#198A00"),t),this.pinkDropZone=new Gi(this.view.getChildByName("pinkDropZone"),i.viewConfig,framework.ColourUtils.colourToNumber("#FF99FF"),t)}},{key:"initBatManager",value:function(){var t=this.view.getChildByName("batContainer");t.position.x=-300,t.position.y=-200;var e=this.view.getChildByName("dragLayer"),i=this.view.getChildByName("tv-collider");t.mask=i;var n=new en(i.getBounds()),o=[];o.push({type:ci.RED,zone:this.redDropZone,prefab:this.redBatPrefab}),o.push({type:ci.BLUE,zone:this.blueDropZone,prefab:this.blueBatPrefab}),o.push({type:ci.YELLOW,zone:this.yellowDropZone,prefab:this.yellowBatPrefab}),o.push({type:ci.GREEN,zone:this.greenDropZone,prefab:this.greenBatPrefab}),o.push({type:ci.PINK,zone:this.pinkDropZone,prefab:this.pinkBatPrefab});this.batManager=new Yi(this,this,this.diService,t,n,e,o,i,"bat-hint-round")}},{key:"onGameEnded",value:function(){this.frameService.resetContextualHelpButtonActionToDefault(),this.navigationService.goToScene(an.castleInnLobby)}},{key:"playVO",value:function(t){this.soundService.playVo(t)}},{key:"stopVO",value:function(){this.soundService.stopVo()}}]),e}(It),sn=function(t){function e(){var t,i;L()(this,e);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return i=O()(this,(t=U()(e)).call.apply(t,[this].concat(o))),j()(R()(i),"completion",(function(){})),j()(R()(i),"loadingText",void 0),j()(R()(i),"loadingTexts",["Logic Zoo needs help sorting wayward animals. If you have a sharp eye, see them in R-Fair City. Earn snelfus for your effort. Knowledge of Venn diagrams is a plus.","The animals of Logic Zoo are running amok, and nobody can keep track of them! If they're not sorted correctly, each animal won't get fed the right food.","The Eerie Inn at Castleblanca has bats in the belfry. Someone needs to capture the pests right away! See Grizelda to apply for the job.","To exit most places, click on a green arrow.","Check your Skwakpad to see which Quest items you still need to get.","Your Skwakpad can show you a complete list of everything you've got stored in your cybersack.","Not sure where those snelfus went? See a list of recent purchases - or rewards - in your Skwakpad!"]),j()(R()(i),"_canRemove",!1),i}return K()(e,t),D()(e,[{key:"init",value:function(){var t=this;W()(U()(e.prototype),"init",this).call(this),this._canRemove=!1;var i=this.view.getChildByName("characters");i.children.forEach((function(t){return t.visible=!1})),i.children.random().visible=!0;var n=this.view.getChildByName("characterShip"),o=this.view.getChildByName("smallShip");this.loadingText=this.view.getChildByName("loadingText"),this.cancelUniqueAction(),this.runUniqueAction(framework.Actions.Parallel([framework.Actions.Tween(n,{from:{y:n.y},to:{y:n.y-50},duration:10,repeat:1/0,yoyo:!0}),framework.Actions.Tween(o,{from:{y:o.y},to:{y:o.y+20},duration:9,repeat:1/0,yoyo:!0}),framework.Actions.Sequence([framework.Actions.Delay(e.delay),framework.Actions.Func((function(){t._canRemove=!0,t.cancelActions(),t.completion()}))])]))}},{key:"setTextForScene",value:function(){var t=this.loadingTexts.random();this.loadingText.text=t}},{key:"setOnCompletion",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.completion=t}},{key:"willRemove",value:function(){this.completion=function(){}}},{key:"canRemove",get:function(){return this._canRemove}}]),e}(It);j()(sn,"delay",5);var an,rn=function t(e,i){L()(this,t),this.from=e,this.to=i};!function(t){t.splash="splashscreen",t.infoLoading="info-loading",t.simpleLoading="simpleloading",t.characterSelect="characterSelect",t.cyberhome="cyberhome",t.cyberhomeSecondFloor="cyberhomeSecondFloor",t.cybermall="cybermall",t.dialogueUiTest="dialogue-ui-test",t.shopBinky="shopBinky",t.shopWicked="shopWicked",t.shopGollywood="shopGollywood",t.shopCreech="shopCreech",t.aquariyumCastleInt="aquariyumCastleInt",t.aquariyumCastle="aquariyumCastle",t.aquariyumTownCenter="aquariyumTownCenter",t.aquariyumManitee="aquariyumManitee",t.aquariyumMuffin="aquariyumMuffin",t.aquariyumThroneRoom="aquariyumThroneRoom",t.aquariyumPrinceRoom="aquariyumPrinceRoom",t.rfairCyberBus="rfairCyberBus",t.rfairTownCenter="rfairTownCenter",t.rfairLostAndFound="rfairLostAndFound",t.rfairFountainRoom="rfairFountainRoom",t.rfairLogicZoo="rfairLogicZoo",t.rfairLogicZooMinigame="rfairLogicZooMinigame",t.rfairDonutStore="rfairDonutStore",t.rfairShop="rfairShop",t.rfairDonutMuseum="rfairDonutMuseum",t.rfairTintersection="rfairTintersection",t.rfairLostAndFoundShop="rfairLostAndFoundShop",t.grandCyberStation="grandCyberStation",t.grandTicketScreen="grandTicketScreen",t.shop="shop",t.inventory="inventory",t.castleChestRoom="castleChestRoom",t.castleCybercoupe="castleCybercoupe",t.castleInnEntrance="castleInnEntrance",t.castleInnLobby="castleInnLobby",t.castleGnomeWalkway="castleGnomeWalkway",t.castleHauntedHangout="castleHauntedHangout",t.castleTownCenter="castleTownCenter",t.batSortingMinigame="batSortingMinigame"}(an||(an={}));var hn=function(){function t(e,i){L()(this,t),this.rootMediator=e,this.diService=i,j()(this,"loadingService",void 0),j()(this,"characterService",void 0),j()(this,"sceneMap",void 0),j()(this,"currentScene",void 0),j()(this,"currentSceneName",void 0),j()(this,"loadingScreen",void 0),j()(this,"loader",PIXI.loader),this.loadingService=this.diService.get(st.b.LoadingService),this.characterService=this.diService.get(st.b.CharacterService),this.sceneMap=new Map([[an.splash,jt],[an.characterSelect,Nt],[an.cyberhome,Ft],[an.cyberhomeSecondFloor,Wt],[an.simpleLoading,Xt],[an.cybermall,oe],[an.shopBinky,se],[an.shopWicked,Le],[an.shopGollywood,De],[an.shopCreech,Me],[an.aquariyumCastleInt,Ve],[an.aquariyumCastle,Fe],[an.aquariyumTownCenter,Ue],[an.aquariyumManitee,He],[an.aquariyumMuffin,We],[an.aquariyumThroneRoom,qe],[an.aquariyumPrinceRoom,Ke],[an.castleChestRoom,Ge],[an.castleCybercoupe,je],[an.castleInnEntrance,ze],[an.castleInnLobby,Xe],[an.castleGnomeWalkway,Ye],[an.castleHauntedHangout,Ze],[an.castleTownCenter,Je],[an.dialogueUiTest,ie],[an.shop,Ne],[an.rfairCyberBus,$e],[an.rfairTownCenter,ti],[an.rfairLostAndFound,ei],[an.rfairFountainRoom,oi],[an.rfairLogicZoo,ni],[an.rfairLogicZooMinigame,ai],[an.rfairDonutStore,hi],[an.rfairDonutMuseum,ui],[an.rfairShop,Li],[an.rfairLostAndFoundShop,Hi],[an.rfairTintersection,li],[an.grandCyberStation,fi],[an.grandTicketScreen,mi],[an.inventory,Pi],[an.batSortingMinigame,on]])}return D()(t,[{key:"goToSplash",value:function(){var t=this;this.loadingService.loadAssets(this.loader,an.splash,(function(t){}),(function(e){t.onSceneConfigLoaded(an.splash,e)}))}},{key:"goToScene",value:function(t){var e=this;this.removeCurrentScene(),this.showLoadingScreen(t),this.characterService.loadCharacter((function(){e.loadingService.loadAssets(e.loader,t,(function(t){}),(function(i){e.tryRemoveLoadingScreen(e.onSceneConfigLoaded.bind(e,t,i))}))}))}},{key:"removeCurrentScene",value:function(){this.currentScene&&(this.rootMediator.removeChild(this.currentScene),this.currentScene.destroy(),this.loadingService.unloadAssets(this.currentSceneName),this.currentScene=null)}},{key:"onSceneConfigLoaded",value:function(t,e){if(!t||!e)throw"usage : sceneName: string, config: any (json containing the view description";var i=window.app.createChildViews(e,this.rootMediator.view);if(!i||0==i.length)throw"error: no view have been created from the config";var n=i[0],o=new(this.sceneMap.get(t))(n,this.diService);this.showScene(t,o)}},{key:"showScene",value:function(e,i){this.currentSceneName&&!t.NON_PERSISTED_SCENES.contains(this.currentSceneName)&&Ct.savePreviousSceneName(this.currentSceneName),this.currentSceneName=e,this.currentScene=i,this.rootMediator.addChild(i),this.currentScene.init(),t.NON_PERSISTED_SCENES.contains(e)||Ct.saveCurrentSceneName(e)}},{key:"showLoadingScreen",value:function(t){var e=this,i=st.a.SimpleLoading;[new rn(an.grandCyberStation,an.cybermall),new rn(an.grandCyberStation,an.rfairCyberBus),new rn(an.grandCyberStation,an.aquariyumTownCenter),new rn(an.grandCyberStation,an.castleCybercoupe)].find((function(i,n,o){return i.from==e.currentSceneName&&i.to==t}))&&(i=st.a.InfoLoading),this.addLoadingScreen(i,t)}},{key:"addLoadingScreen",value:function(t,e){!this.loadingScreen&&this.rootMediator.children.contains(this.loadingScreen)||(this.loadingScreen=this.diService.getDataByKey(t),this.rootMediator.addChild(this.loadingScreen),this.loadingScreen instanceof sn&&(this.loadingScreen.init(),this.loadingScreen.setTextForScene()))}},{key:"tryRemoveLoadingScreen",value:function(t){var e=this;if(this.loadingScreen&&this.loadingScreen instanceof sn){if(!this.loadingScreen.canRemove)return void this.loadingScreen.setOnCompletion((function(){e.removeLoadingScreen(),t()}));this.loadingScreen.willRemove()}this.removeLoadingScreen(),t()}},{key:"removeLoadingScreen",value:function(){this.rootMediator.removeChild(this.loadingScreen),this.loadingScreen=null}}]),t}();j()(hn,"NON_PERSISTED_SCENES",[an.splash,an.infoLoading,an.simpleLoading,an.characterSelect]);var un=function(){function t(){L()(this,t),j()(this,"sceneAssets",{})}return D()(t,[{key:"loadAssets",value:function(t,e,i,n){this.loadAssetsDescriptionFiles(t,e,i,n)}},{key:"loadAssetsDescriptionFiles",value:function(t,e,i,n){t.add(this.getFormatScenePathKey(e),window.app.devpath(this.getFormatScenePath(e))),t.add(this.getFormatSceneAssetsKey(e),window.app.devpath(this.getFormatSceneAssets(e))),t.load(this.onAssetDescriptionFilesLoaded(t,e,i,n))}},{key:"onAssetDescriptionFilesLoaded",value:function(t,e,i,n){var o=this;return function(s,a){var r=a[o.getFormatSceneAssetsKey(e)].data,h=a[o.getFormatScenePathKey(e)].data;o.loadPrefabAssets(t,r,(function(s){o.onAssetsDescriptionFilesLoaded(t,e,s,h,i,n)}))}}},{key:"loadPrefabAssets",value:function(t,e,i){var n=this,o=[];if(e.forEach((function(e){var i=e&&e.id&&"prefab"in e,n=null==t.resources[e.id];i&&n&&(o.push(e.id),t.add(e.id,window.app.devpath(e.prefab)),t.add(e.id+framework.ViewFactory.viewConfigSuffix,window.app.devpath(e.prefabViewConfig)))})),o.length>0){t.load((function(s,a){o.forEach((function(t){var i=a[t];i&&(e=e.concat(i.data))})),n.loadPrefabAssets(t,e,i)}))}else i(e)}},{key:"onAssetsDescriptionFilesLoaded",value:function(t,e,i,n,o,s){t.onProgress.add((function(t,e){o(t.progress)})),t.onError.add((function(t,e,i){console.log("error",t)})),i.forEach(this.loadAssetIfNeeded(t)),t.load(this.onAssetLoaded(e,s,n))}},{key:"loadAssetIfNeeded",value:function(t){return function(e){e.path&&null==t.resources[e.id]&&null==PIXI.utils.TextureCache[e.id]&&t.add(e.id,window.app.devpath(e.path))}}},{key:"onAssetLoaded",value:function(t,e,i){var n=this;return function(o,s){n.saveSceneAssetsInCache(t,s),e(i)}}},{key:"saveSceneAssetsInCache",value:function(t,e){var i=this;e.forIn((function(e,n){i.sceneAssets[t]||(i.sceneAssets[t]=[]),i.sceneAssets[t].push(n)}))}},{key:"unloadAssets",value:function(t){var e=this;this.sceneAssets[t].forEach((function(t){if(!e.isTextureInLoadingScreen(t)){var i=PIXI.utils.TextureCache[t];i&&i.destroy(!0)}delete PIXI.loader.resources[t]})),delete this.sceneAssets[t]}},{key:"isTextureInLoadingScreen",value:function(t){var e=this,i=[an.infoLoading,an.simpleLoading],n=!1;return i.forEach((function(i){var o=e.sceneAssets[i];o&&o.contains(t)&&(n=!0)})),n}},{key:"getFormatScenePathKey",value:function(t){return t+"Scene"}},{key:"getFormatScenePath",value:function(t){return"./assets/scenes/"+t+"-scene.json"}},{key:"getFormatSceneAssetsKey",value:function(t){return t+"Assets"}},{key:"getFormatSceneAssets",value:function(t){return"./assets/scenes/"+t+"-assets.json"}},{key:"setSpineData",value:function(t,e){for(var i in t)if(t.hasOwnProperty(i)){var n=t[i];this.parseConfigElement(n,e)}}},{key:"parseConfigElement",value:function(t,e){var i=this;"spine"==t.type&&(t.spineData=e[t.name].spineData),t.children&&t.children.length>0&&t.children.forEach((function(t){i.parseConfigElement(t,e)}))}}],[{key:"getLoadedAsset",value:function(t){return PIXI.loader.resources[t]?PIXI.loader.resources[t].data:null}},{key:"getLoadedImage",value:function(t){return PIXI.utils.TextureCache[t]}}]),t}(),ln=function(){function t(e){L()(this,t),j()(this,"buildInfo",{env:"debug",version:"",aestTime:"",nyTime:"",shortRev:""}),this.buildInfo=Object.extend(this.buildInfo,e),this.printToConsole()}return D()(t,[{key:"version",value:function(){return this.buildInfo.version}},{key:"aestTime",value:function(){return this.buildInfo.aestTime}},{key:"nyTime",value:function(){return this.buildInfo.nyTime}},{key:"shortRev",value:function(){return this.buildInfo.shortRev}},{key:"environment",get:function(){return this.buildInfo.env}},{key:"isDebug",get:function(){return"dev"===this.environment}}]),D()(t,[{key:"printToConsole",value:function(){var t=this;console.log("***"),this.buildInfo.forIn((function(e,i){t.printDebugKeyValue(i,e)})),console.log("***")}},{key:"printDebugKeyValue",value:function(t,e){return t+"="+e}}]),t}(),cn=function(t){function e(t,i,n){var o;L()(this,e),o=O()(this,U()(e).call(this,t,n)),j()(R()(o),"tips",o.view.getChildByName("tips").children),j()(R()(o),"exit",o.view.getChildByName("exit")),j()(R()(o),"prevArrow",o.view.getChildByName("prev")),j()(R()(o),"nextArrow",o.view.getChildByName("next")),j()(R()(o),"currentTipIndex",0),o.view.interactive=!0,o.view.visible=!1,o.resetToFirstTip();var s=new PIXI.Point(1,1);return o.exit.scale=s,o.prevArrow.scale=s,o.nextArrow.scale=s,i.setButtonPressedListener(o.exit,o.hide.bind(R()(o))),i.setButtonPressedListener(o.prevArrow,o.showPrevTip.bind(R()(o))),i.setButtonPressedListener(o.nextArrow,o.showNextTip.bind(R()(o))),o.init(),o}return K()(e,t),D()(e,[{key:"resetToFirstTip",value:function(){this.currentTipIndex=0,this.prevArrow.visible=!1,this.nextArrow.visible=!0,this.showOnlyCurrentTip()}},{key:"show",value:function(){this.resetToFirstTip(),W()(U()(e.prototype),"show",this).call(this)}},{key:"showNextTip",value:function(){this.soundService.playSound("sfx-when-answering-questions.mp3",Z.G2),this.currentTipIndex++,this.currentTipIndex==this.tips.length-1?this.nextArrow.visible=!1:this.nextArrow.visible=!0,this.prevArrow.visible=!0,this.showOnlyCurrentTip()}},{key:"showPrevTip",value:function(){this.soundService.playSound("sfx-when-answering-questions.mp3",Z.G2),this.currentTipIndex--,0==this.currentTipIndex?this.prevArrow.visible=!1:this.prevArrow.visible=!0,this.nextArrow.visible=!0,this.showOnlyCurrentTip()}},{key:"showOnlyCurrentTip",value:function(){for(var t=0;t<this.tips.length;t++)t==this.currentTipIndex?this.tips[t].visible=!0:this.tips[t].visible=!1}},{key:"customShowAction",value:function(){var t=this;return framework.Actions.Parallel([framework.Actions.Func((function(){return t.soundService.playSound("sfx-when-message-is-shown.mp3",Z.G2)})),framework.Actions.Tween(this.view,{to:{y:this.popUpDialogShownY},duration:.7})])}},{key:"customHideAction",value:function(){var t=this;return framework.Actions.Parallel([framework.Actions.Func((function(){return t.soundService.playSound("sfx-door-close-opens-to-2nd-floor-and-cyberstation.mp3",Z.G2)})),framework.Actions.Tween(this.view,{to:{y:this.popUpDialogHiddenY},duration:.7})])}}]),e}(qt),dn=function(){function t(){var e=this;L()(this,t),j()(this,"snelfus",null),j()(this,"squakPadButton",null),j()(this,"exitButton",null),j()(this,"helpButton",null),j()(this,"snelfusSymbol",null),j()(this,"exitPrompt",!0),j()(this,"exitFunc",null),j()(this,"helpUi",null),j()(this,"scene",null),j()(this,"popupDialog",null),j()(this,"defaultHelpAction",(function(){return e.helpUi.show()}))}return D()(t,[{key:"init",value:function(t,e,i){this.snelfus=framework.ContainerView.getChildByNameRecursive(t,"snelfusAmount"),this.updateSnelfus(e.get(st.b.WalletService).balance.toString()),this.scene=i;var n=e.get(st.b.NavigationService);this.snelfusSymbol=framework.ContainerView.getChildByNameRecursive(t,"SnelfuSymbol"),this.squakPadButton=framework.ContainerView.getChildByNameRecursive(t,"skwawkpad"),this.scene.setButtonPressedListener(this.squakPadButton,(function(){e.get(st.b.SoundService).playSound("sfx-click-tap-on-pad.mp3",Z.G2),n.goToScene(an.inventory)})),this.exitButton=framework.ContainerView.getChildByNameRecursive(t,"exitButton"),this.scene.setButtonPressedListener(this.exitButton,this.doExit.bind(this));var o=framework.ContainerView.getChildByNameRecursive(t,"help-ui");this.helpUi=new cn(o,i,e),i.addChild(this.helpUi),this.helpButton=framework.ContainerView.getChildByNameRecursive(t,"helpButton"),this.scene.setButtonPressedListener(this.helpButton,this.defaultHelpAction);var s=framework.ContainerView.getChildByNameRecursive(t,"popupDialog");this.popupDialog=new Kt(s,e),this.popupDialog.init(),this.scene.addChild(this.popupDialog),this.setOnExit(!0,(function(){return n.goToScene(an.splash)}))}},{key:"setContextualHelpButtonAction",value:function(t){this.scene.removeButtonPressedListener(this.helpButton),this.scene.setButtonPressedListener(this.helpButton,t)}},{key:"resetContextualHelpButtonActionToDefault",value:function(){this.scene.removeButtonPressedListener(this.helpButton),this.scene.setButtonPressedListener(this.helpButton,this.defaultHelpAction)}},{key:"lockSkwakPad",value:function(){this.squakPadButton&&(this.squakPadButton.isEnabled=!1,this.squakPadButton.interactive=!1)}},{key:"unlockSkwakPad",value:function(){this.squakPadButton&&(this.squakPadButton.isEnabled=!0,this.squakPadButton.interactive=!0)}},{key:"setOnExit",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};this.exitPrompt=t,this.exitFunc=e}},{key:"updateSnelfus",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"0";this.snelfus.visible=!1,this.snelfus.text=t,this.snelfus.visible=!0}},{key:"doExit",value:function(){var t=this;this.exitPrompt?(this.popupDialog.setText("Are you sure you want to leave?"),this.popupDialog.showYesNo((function(e){e&&t.exitFunc()}))):this.exitFunc()}},{key:"hideCharacterInfo",value:function(){this.snelfus.visible=!1,this.squakPadButton.visible=!1,this.snelfusSymbol.visible=!1}},{key:"showCharacterInfo",value:function(){this.snelfus.visible=!0,this.squakPadButton.visible=!0,this.snelfusSymbol.visible=!0}}]),t}(),pn=function(){function t(e){var i=this;L()(this,t),j()(this,"pixiApp",void 0),j()(this,"scaleManager",void 0),j()(this,"resizeCallback",void 0),j()(this,"onResize",(function(t){var e=i.pixiApp.view,n=i.pixiApp.stage,o=i.pixiApp.renderer,s=t.scale,a=t.width.valueOf(),r=t.height.valueOf();n.position.set(o.width/2,o.height/2),n.scale.set(s.x.valueOf(),s.y.valueOf()),n.pivot.x=o.width/2,n.pivot.y=o.height/2,e.style.width=a+"px",e.style.height=r+"px",e.style.display="block",e.style.margin="auto",e.style.transformOrigin="top left",e.style.left="0px",e.style.top="0px",i.resizeCallback&&i.resizeCallback(a,r)})),this.pixiApp=e.pixiApp,this.resizeCallback=e.resizeCallback,this.scaleManager=new J({width:e.width,height:e.height,safeWidth:e.safeWidth,safeHeight:e.safeHeight,callback:this.onResize})}return D()(t,[{key:"destroy",value:function(){this.scaleManager&&(this.scaleManager.disable(),this.scaleManager=null),this.resizeCallback=null,this.pixiApp=null}}]),t}(),vn=function(){function t(){var e=this;L()(this,t),j()(this,"canvas",void 0),j()(this,"springrollApp",void 0),j()(this,"pixiApp",void 0),j()(this,"sizeManager",void 0),j()(this,"viewFactory",void 0),j()(this,"rootMediator",void 0),j()(this,"navigationService",void 0),j()(this,"animationService",void 0),j()(this,"soundService",void 0),j()(this,"frameService",void 0),j()(this,"walletService",void 0),j()(this,"characterService",void 0),j()(this,"diService",void 0),j()(this,"loadingService",void 0),j()(this,"gameLoader",new n.loaders.Loader),j()(this,"simpleLoadingScreen",void 0),j()(this,"infoLoadingScreen",void 0),j()(this,"isPerformant",(function(){return n.ticker.shared.elapsedMS<40})),j()(this,"isAcceptablePerformanceDelay",(function(t){return t<500})),j()(this,"update",(function(t){var i=.001*n.ticker.shared.elapsedMS;o.update(),e.rootMediator&&e.rootMediator.update(i)})),j()(this,"onResize",(function(t,e){})),j()(this,"onAppReadyChanged",(function(t,e){})),j()(this,"onPauseChanged",(function(t,i){e.soundService.setMuted(t)})),j()(this,"onSoundVolumeChanged",(function(t,i){e.soundService.setSoundVolume(t)}))}return D()(t,[{key:"init",value:function(){var t=this;this.canvas=this.findCanvas(),this.springrollApp=this.createSpringrollApp(),this.pixiApp=this.createPixiApp(this.canvas),this.sizeManager=this.createSizeManager(this.pixiApp,this.onResize),this.initAppCallbacks(),this.viewFactory=this.createViewFactory(),this.createRootMediator(),this.initDependency(),this.preload((function(){t.showFirstScene()}))}},{key:"devpath",value:function(t){return t}},{key:"initDependency",value:function(){this.diService=new st.c,this.loadingService=new un,this.diService.register(st.b.LoadingService,this.loadingService),this.soundService=new nt,this.diService.register(st.b.SoundService,this.soundService),this.characterService=new ft(this.diService),this.diService.register(st.b.CharacterService,this.characterService),this.navigationService=new hn(this.rootMediator,this.diService),this.diService.register(st.b.NavigationService,this.navigationService),this.animationService=new at,this.diService.register(st.b.AnimationService,this.animationService),this.frameService=new dn,this.diService.register(st.b.FrameService,this.frameService),this.walletService=new bi(this.frameService),this.diService.register(st.b.WalletService,this.walletService)}},{key:"preload",value:function(t){var e=this;({buildInfo:"./assets/tools/buildInfo.json",characterConfig:"./assets/configs/characterConfig.json"}).forIn((function(t,i){e.gameLoader.add(i,window.app.devpath(t))})),this.gameLoader.load((function(i,n){var o=n.buildInfo.data,s=new ln(o);s.isDebug&&e.debugAddNavigationToWindow(),e.diService.register(st.b.BuildInfoService,s),e.diService.setDataWithKey(st.a.CharacterConfig,n.characterConfig),e.createSimpleLoadingScreen(e.createInfoLoadingScreen.bind(e,t))}))}},{key:"createSimpleLoadingScreen",value:function(t){var e=this,i=this.gameLoader;this.loadingService.loadAssets(i,an.simpleLoading,(function(t){}),(function(n){e.loadingService.setSpineData(n,i.resources);var o=window.app.createChildViews(n);if(!o||0==o.length)throw"error: no view have been created from the config";var s=o[0];e.simpleLoadingScreen=new Xt(s,e.diService),e.diService.setDataWithKey(st.a.SimpleLoading,e.simpleLoadingScreen),t()}))}},{key:"createInfoLoadingScreen",value:function(t){var e=this,i=this.gameLoader;this.loadingService.loadAssets(i,an.infoLoading,(function(t){}),(function(n){e.loadingService.setSpineData(n,i.resources);var o=window.app.createChildViews(n);if(!o||0==o.length)throw"error: no view have been created from the config";var s=o[0];e.infoLoadingScreen=new sn(s,e.diService),e.diService.setDataWithKey(st.a.InfoLoading,e.infoLoadingScreen),t()}))}},{key:"createRootMediator",value:function(){var t=new framework.ContainerView;if(this.rootMediator=new et(t),this.pixiApp.stage.addChild(this.rootMediator.view),this.isDebugMode()){var e=new framework.TextView;this.pixiApp.stage.addChild(e),this.rootMediator.runAction(new framework.RepeatAction(new framework.FuncAction((function(){return e.text=(1e3/n.ticker.shared.elapsedMS).toPrecision(2)+" FPS"}))))}}},{key:"showFirstScene",value:function(){this.navigationService.goToSplash()}},{key:"debugAddNavigationToWindow",value:function(){window.navigationService=this.navigationService,window.SceneName=an,window.sounds=this.soundService}},{key:"destroy",value:function(){this.deinitAppCallbacks(),this.destroyRootMediator(),this.destroyViewFactory(),this.destroySizeManager(),this.destroyPixiApp(),this.destroySpringrollApp()}},{key:"createView",value:function(t){return this.viewFactory.create(t)}},{key:"createChildViews",value:function(t,e,i){return this.viewFactory.createChildren(t,e,i)}},{key:"getCache",value:function(t){return n.utils.TextureCache[t]}},{key:"getConfig",value:function(){return{}}},{key:"isDebugMode",value:function(){return!1}},{key:"isWebGL",value:function(){return this.pixiApp.renderer.type==n.RENDERER_TYPE.WEBGL}},{key:"getRenderer",value:function(){return this.pixiApp.renderer}},{key:"getCanvasWidth",value:function(){return this.canvas.width}},{key:"getCanvasHeight",value:function(){return this.canvas.height}},{key:"playAnimation",value:function(t,e,i,n){}},{key:"stopAnimation",value:function(t,e){}},{key:"playSound",value:function(t,e){}},{key:"canPlayVO",value:function(){return!1}},{key:"isPlayingVO",value:function(t){return!1}},{key:"playVO",value:function(t,e,i){}},{key:"stopVO",value:function(){}},{key:"offPaused",value:function(t){}},{key:"offResumed",value:function(t){}},{key:"offUpdate",value:function(t){}},{key:"onPaused",value:function(t){}},{key:"onResumed",value:function(t){}},{key:"onUpdate",value:function(t){}},{key:"findCanvas",value:function(){return document.getElementById("stage")}},{key:"createSpringrollApp",value:function(){return new $.a({features:{sound:!0,sfx:!0,vo:!0,music:!0,captions:!1,soundVolume:!1,musicVolume:!1,voVolume:!1,sfxVolume:!1,pointerSize:!1,controlSensitivity:!1,buttonSize:!1,removableLayers:!1,hudPosition:!1}})}},{key:"destroySpringrollApp",value:function(){this.springrollApp&&(this.springrollApp=null)}},{key:"createPixiApp",value:function(t){return new n.Application({view:t,width:1400,height:800,backgroundColor:0})}},{key:"destroyPixiApp",value:function(){this.pixiApp&&(this.pixiApp.destroy(!1,{children:!0,texture:!0,baseTexture:!0}),this.pixiApp=null)}},{key:"createSizeManager",value:function(t,e){return new pn({pixiApp:t,width:1400,height:800,safeWidth:1400,safeHeight:780,resizeCallback:e})}},{key:"destroySizeManager",value:function(){this.sizeManager&&(this.sizeManager.destroy(),this.sizeManager=null)}},{key:"createViewFactory",value:function(){return new framework.ViewFactory}},{key:"destroyViewFactory",value:function(){this.viewFactory&&(this.viewFactory=null)}},{key:"destroyRootMediator",value:function(){this.rootMediator&&(this.rootMediator.destroy(),this.rootMediator=null)}},{key:"initAppCallbacks",value:function(){this.springrollApp.state.ready.subscribe(this.onAppReadyChanged),this.springrollApp.state.pause.subscribe(this.onPauseChanged),this.springrollApp.state.soundVolume.subscribe(this.onSoundVolumeChanged),this.pixiApp.ticker.add(this.update)}},{key:"deinitAppCallbacks",value:function(){this.springrollApp.state.ready.unsubscribe(this.onAppReadyChanged),this.springrollApp.state.pause.unsubscribe(this.onPauseChanged),this.springrollApp.state.soundVolume.unsubscribe(this.onSoundVolumeChanged),this.pixiApp.ticker.remove(this.update)}}]),t}();if(!window.app){var fn=new vn;window.app=fn,fn.init()}},70:function(t,e,i){"use strict";i.d(e,"a",(function(){return u}));var n=i(2),o=i.n(n),s=i(3),a=i.n(s),r=i(0),h=i.n(r),u=function(){function t(){o()(this,t),h()(this,"_currentState",null)}return a()(t,[{key:"currentState",set:function(t){t?(this._currentState&&this._currentState.onDeinit(),this._currentState=t,this._currentState.context=this,this._currentState.onInit()):console.error("new value is null")},get:function(){return this._currentState}}]),t}()},71:function(t,e,i){"use strict";i.d(e,"a",(function(){return u}));var n=i(2),o=i.n(n),s=i(3),a=i.n(s),r=i(0),h=i.n(r),u=function(){function t(e,i,n){o()(this,t),h()(this,"type",void 0),h()(this,"dialogue",void 0),h()(this,"vo",void 0),this.type=e,this.dialogue=i,this.vo=n}return a()(t,null,[{key:"voId",value:function(t){return"VOs/"+t+".mp3"}}]),t}()},9:function(t,e,i){"use strict";i.d(e,"c",(function(){return c})),i.d(e,"a",(function(){return n})),i.d(e,"b",(function(){return o}));var n,o,s=i(2),a=i.n(s),r=i(3),h=i.n(r),u=i(0),l=i.n(u),c=function(){function t(){a()(this,t),l()(this,"data",{}),l()(this,"services",{})}return h()(t,[{key:"register",value:function(t,e){this.services[t]=e}},{key:"get",value:function(t){return this.services[t]}},{key:"setDataWithKey",value:function(t,e){this.data[t]=e}},{key:"getDataByKey",value:function(t){return this.data[t]}},{key:"deleteDataWithKey",value:function(t){delete this.data[t]}}]),t}();!function(t){t.CharacterConfig="CharacterConfig",t.PlayerNotifiedFinishedGame="PlayerNotifiedFinishedGame",t.CyberMallState="cybermallState",t.SimpleLoading="simpleLoading",t.InfoLoading="infoLoading",t.LogicZooMinigameQuestProgress="LogicZooMinigameQuestProgress",t.LogicZooMinigameQuestConvoState="LogicZooMinigameQuestConvoState"}(n||(n={})),function(t){t.LoadingService="LoadingService",t.SoundService="SoundService",t.NavigationService="NavigationService",t.BuildInfoService="BuildInfoService",t.AnimationService="AnimationService",t.FrameService="FrameService",t.WalletService="WalletService",t.CharacterService="CharacterService"}(o||(o={}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,