!function(t){function e(e){for(var n,a,s=e[0],c=e[1],u=e[2],l=0,f=[];l<s.length;l++)a=s[l],Object.prototype.hasOwnProperty.call(r,a)&&r[a]&&f.push(r[a][0]),r[a]=0;for(n in c)Object.prototype.hasOwnProperty.call(c,n)&&(t[n]=c[n]);for(h&&h(e);f.length;)f.shift()();return o.push.apply(o,u||[]),i()}function i(){for(var t,e=0;e<o.length;e++){for(var i=o[e],n=!0,s=1;s<i.length;s++){var c=i[s];0!==r[c]&&(n=!1)}n&&(o.splice(e--,1),t=a(a.s=i[0]))}return t}var n={},r={0:0},o=[];function a(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=t,a.c=n,a.d=function(t,e,i){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)a.d(i,n,function(e){return t[e]}.bind(null,n));return i},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="";var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var u=0;u<s.length;u++)e(s[u]);var h=c;o.push([266,1]),i()}([,,,,function(t,e,i){"use strict";var n,r;i.d(e,"b",(function(){return n})),i.d(e,"a",(function(){return r})),function(t){t.LoadingService="LoadingService",t.SoundService="SoundService",t.NavigationService="NavigationService",t.BuildInfoService="BuildInfoService",t.CameraService="CameraService",t.CaptionService="CaptionService",t.AnalyticsService="AnalyticsService"}(n||(n={})),function(t){t.gameWidth="gameWidth",t.gameHeight="gameHeight",t.gameSafeWidth="gameSafeWidth",t.gameSafeHeight="gameSafeHeight",t.DialogLineDelegate="DialogLineDelegate",t.ActionManagerDelegate="ActionManagerDelegate",t.InteractionHandler="InteractionHandler",t.CueDialogLineDelegate="CueDialogLineDelegate",t.ChoiceDialogLineDelegate="ChoiceDialogLineDelegate",t.app="app",t.weatherProp="weatherProp",t.forestProp="forestProp",t.throwingProp="throwingProp",t.discoball="discoball",t.backdrop="backdrop",t.prison="prison",t.door="door",t.StageTransition="StageTransition",t.StageStateDelegate="StageStateDelegate",t.SelectionPopOverDelegate="SelectionPopOverDelegate",t.StoryData="StoryData",t.positionData="positionData",t.scaleData="scaleData",t.characters="characters",t.curtains="curtains",t.storyScript="storyScript",t.garden="garden",t.bowl="bowl",t.bearFurniture="bearFurniture",t.bed="bed",t.locator="locator",t.carriage="carriage",t.ballroom="ballroom",t.pauseButton="pauseButton",t.musicBox="musicBox",t.isReplay="isReplay",t.game="game",t.isPromptShowing="isPromptShowing"}(r||(r={}))},function(t,e,i){"use strict";var n;i.d(e,"a",(function(){return n})),function(t){t.littleRedHood="little-red-riding-hood",t.wolf="wolf",t.narrator="narrator",t.grandma="grandma",t.goldilocks="goldilocks",t.babyBear="baby-bear",t.parentBear="parent-bear",t.cinderella="cinderella",t.godmother="godmother",t.prince="prince",t.none="none"}(n||(n={}))},,,,,,function(t,e,i){"use strict";i.d(e,"a",(function(){return n})),i.d(e,"c",(function(){return o})),i.d(e,"b",(function(){return r}));var n;i(38),i(47),i(12),i(44),i(45);!function(t){t.littleRedHood="lrrh",t.wolf="wolf",t.woflteeth="wolf-teeth",t.cowboy="cowboy",t.grandma="grandma",t.narrator="narrator",t.pirate="pirate",t.astronaut="astronaut",t.cinderella="cinderella",t.fairygodmother="fairygodmother",t.goldirocks="goldirocks",t.moviestar="moviestar",t.princecharming="princecharming",t.superherograndma="superherograndma",t.karategrandma="karategrandma",t.none="node",t.karate="karate",t.superhero="superhero",t.puppabear="puppabear",t.mummabear="mummabear",t.babybear="babybear",t.goldilocks="goldilocks",t.goldifish="goldifish",t.princemegastar="princemegastar",t.princebot="princebot",t.inventor="inventor",t.glassslippers="glassslippers",t.sneakers="sneakers",t.spaceboots="spaceboots",t.mop="mop",t.basket="basket",t.toolbox="toolbox",t.treasurechest="treasurechest",t.rolellrh="role-lrrh",t.rolethewolf="role-thewolf",t.rolegranny="role-granny",t.roleprincecharming="role-princecharming",t.rolecinderella="role-cinderella",t.rolefairyhelper="role-fairyhelper",t.rolegoldielocks="role-goldielocks",t.rolebabybear="role-babybear",t.roleparentbear="role-parentbear",t.rolenarrator="role-narrator"}(n||(n={}));var r,o=new Map([[n.littleRedHood,["costumes/little-red-ridinghood"]],[n.wolf,["costumes/wolf"]],[n.woflteeth,["costumes/wolf-teeth"]],[n.cowboy,["costumes/cowboyhat","costumes/cowboypants"]],[n.grandma,["costumes/grandma-slippers","costumes/grandma-hair","costumes/grandma-glasses","costumes/grandma-cane","costumes/grandma-dress"]],[n.narrator,["costumes/narrator-pants","costumes/narrator-hat","costumes/narrator-jacket"]],[n.pirate,["costumes/pirateboots","costumes/piratehat","costumes/pirateshirt","costumes/pirate-telescope"]],[n.astronaut,["costumes/astronaut-head","costumes/astronaut-legs","costumes/astronaut-top"]],[n.cinderella,["costumes/cinderella"]],[n.fairygodmother,["costumes/fairygodmother-tiara","costumes/fairygodmother-dress","costumes/fairygodmother-leftwing","costumes/fairygodmother-rightwing","costumes/fairygodmother-wand"]],[n.goldirocks,["costumes/goldirocks-hair","costumes/goldirocks-top","costumes/goldirocks-chain","costumes/goldirocks-boots","costumes/goldirocks-wristband"]],[n.moviestar,["costumes/moviestar-dress"]],[n.princecharming,["costumes/princecharming-crown","costumes/princecharming-pants","costumes/princecharming-top"]],[n.superherograndma,["costumes/grandma-slippers","costumes/grandma-hair","costumes/superhero-cape","costumes/superhero-leftglove","costumes/superhero-rightglove","costumes/superhero-mask","costumes/superhero-dress"]],[n.karategrandma,["costumes/grandma-slippers","costumes/grandma-hair","costumes/grandma-glasses","costumes/karate-belt","costumes/karate-lefthand","costumes/karate-righthand"]],[n.puppabear,["costumes/puppabear-head","costumes/puppabear-feet","costumes/puppabear-righthand","costumes/puppabear-lefthand"]],[n.mummabear,["costumes/mummabear-feet","costumes/mummabear-head","costumes/mummabear-lefthand","costumes/mummabear-righthand","costumes/mummabear-top"]],[n.goldilocks,["costumes/goldilocks-dress","costumes/goldilocks-hair","costumes/goldilocks-shoes"]],[n.goldifish,["costumes/goldifish-head","costumes/goldifish-lefthand","costumes/goldifish-righthand","costumes/goldifish-top"]],[n.babybear,["costumes/babybear-legs","costumes/babybear-top","costumes/babybear-head"]],[n.princemegastar,["costumes/princemegastar-hat","costumes/princemegastar-top","costumes/princemegastar-glasses","costumes/princemegastar-phone","costumes/princemegastar-pants"]],[n.princebot,["costumes/princebot-head","costumes/princebot-righthand","costumes/princebot-lefthand","costumes/princebot-feet","costumes/princebot-top"]],[n.inventor,["costumes/inventor-top","costumes/inventor-rightglove","costumes/inventor-leftglove","costumes/inventor-hair","costumes/inventor-goggles","costumes/discombobulator"]],[n.glassslippers,["costumes/glassslippers"]],[n.sneakers,["costumes/sneakers"]],[n.spaceboots,["costumes/spaceboots"]],[n.mop,["costumes/mop"]],[n.none,[]],[n.basket,["costumes/basket"]],[n.toolbox,["costumes/toolbox"]],[n.treasurechest,["costumes/treasurechest"]]]);!function(t){t.umbrellaPirate="costumes/pirate-umbrella",t.umbrella="costumes/umbrella",t.umbrellaCowboy="costumes/cowboy-bighat"}(r||(r={}))},,,,,,function(t,e,i){"use strict";i.d(e,"c",(function(){return o})),i.d(e,"b",(function(){return a})),i.d(e,"a",(function(){return s}));var n=i(251),r=i(194);function o(t,e){return framework.ContainerView.getChildByNameRecursive(t,e)}function a(){return new n.a({distance:15,outerStrength:2,innerStrength:1,color:16777215,quality:.5})}function s(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=o(t,"lightmap");if(i.alpha=.1,!i)throw"need a texture called lightmap in the scene";if(e){var n=new r.a(i.texture);return n.alpha=.5,t.filters=[n],n}if(!e){var a=new r.a(i.texture);return i.alpha=0,t.filters=[a],a}}},,,function(t,e,i){"use strict";i.d(e,"a",(function(){return A}));i(33),i(12),i(14),i(13),i(34);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(8),c=i.n(s),u=i(0),h=i.n(u),l=i(9),f=i.n(l),p=(i(57),i(7)),d=i.n(p),v=i(1),y=i.n(v);function g(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var m=function(t){f()(n,t);var e,i=(e=n,function(){var t,i=h()(e);if(g()){var n=h()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return c()(this,t)});function n(){var t;r()(this,n);for(var e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return t=i.call.apply(i,[this].concat(o)),y()(d()(t),"context",null),t}return n}(framework.Script),k=i(4);function w(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var A=function(t){f()(n,t);var e,i=(e=n,function(){var t,i=h()(e);if(w()){var n=h()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return c()(this,t)});function n(t,e){var o;return r()(this,n),(o=i.call(this)).dialog=t,o.diService=e,o}return a()(n,[{key:"stageStateDelegate",get:function(){return this.diService.getDataByKey(k.a.StageStateDelegate)}},{key:"selectionPopOverDelegate",get:function(){return this.diService.getDataByKey(k.a.SelectionPopOverDelegate)}},{key:"actionManagerDelegate",get:function(){return this.diService.getDataByKey(k.a.ActionManagerDelegate)}},{key:"interactionHandler",get:function(){return this.diService.getDataByKey(k.a.InteractionHandler)}},{key:"characters",get:function(){return this.diService.getDataByKey(k.a.characters)}},{key:"passageDialog",get:function(){return this.dialog}},{key:"pauseButton",get:function(){return this.diService.getDataByKey(k.a.pauseButton)}}]),a()(n,[{key:"onInit",value:function(){this.diService.setDataWithKey(k.a.DialogLineDelegate,this),this.pauseButton.visible=!0,this.dialog.playDialog()}},{key:"onDeinit",value:function(){this.diService.setDataWithKey(k.a.DialogLineDelegate,null)}},{key:"didTerminate",value:function(t){this.stageStateDelegate&&this.stageStateDelegate.onStateTerminated(t)}},{key:"onDestroy",value:function(){}},{key:"clear",value:function(){}},{key:"getReplay",value:function(){return this.dialog=this.dialog.getReplay(),this}},{key:"skip",value:function(){this.dialog.skip(),this.setCharactersToIdle()}},{key:"cancel",value:function(){this.dialog.cancel()}},{key:"resume",value:function(){this.dialog.showCaptions()}},{key:"setCharactersToIdle",value:function(){var t=this;this.characters.forEach((function(e,i){t.characters.get(i).playIdle()}))}},{key:"stopSound",value:function(){this.diService.get(k.b.SoundService).stopSound()}}]),n}(m)},function(t,e,i){"use strict";(function(t){i.d(e,"e",(function(){return D})),i.d(e,"c",(function(){return A})),i.d(e,"a",(function(){return S})),i.d(e,"d",(function(){return b})),i.d(e,"b",(function(){return _}));i(33),i(51),i(12),i(14),i(13),i(34);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(2),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(1),y=i.n(v),g=i(72),m=i(5),k=i(4);function w(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var A,S,b,_,D=function(e){d()(o,e);var i,n=(i=o,function(){var t,e=f()(i);if(w()){var n=f()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return h()(this,t)});function o(t,e){var i;return r()(this,o),(i=n.call(this)).characterType=t,i.diService=e,y()(a()(i),"_spine",void 0),y()(a()(i),"_role",void 0),y()(a()(i),"_slots",null),y()(a()(i),"_mood",b.neutral),y()(a()(i),"_characterPosition",_.standing),i}return c()(o,[{key:"spine",get:function(){return this._spine},set:function(t){this._spine=t,this._slots=this._spine.spineData.slots,this.setSkinByName(this.characterType),this.removeCostume(),this.setShadow()}},{key:"role",get:function(){return this._role}},{key:"mood",set:function(t){this._mood=t},get:function(){return this._mood}}]),c()(o,[{key:"removeCostume",value:function(){var t=this;this._slots.forEach((function(e){t._spine.skeleton.setAttachment(e.name,null)}))}},{key:"setSkinByName",value:function(t){var e=this._spine.skeleton;e.setSkin(null),e.setSkinByName(t)}},{key:"getMoodAnimation",value:function(){switch(this._mood){case b.neutral:return S.talk;case b.silly:return S.talksilly;case b.angry:return S.talkangry;case b.scared:return S.shake}}},{key:"hide",value:function(){this._spine.visible=!1}},{key:"show",value:function(){this._spine.visible=!0}},{key:"playTalk",value:function(){this._spine.state.setAnimation(0,this.talkAnimation,!0)}},{key:"stand",value:function(){this.characterPosition=_.standing,this._spine.state.setAnimation(0,this.idleAnimation,!0)}},{key:"playIdle",value:function(){this._spine.state.setAnimation(0,this.idleAnimation,!0)}},{key:"getSelectAction",value:function(){return framework.Actions.Spine(this._spine,S.select)}},{key:"getHideAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Spine(this._spine,S.hideDown),framework.Actions.Func((function(){return t.hide()}))])}},{key:"getShowAndRiseUpAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Func((function(){return t.show()})),this.getRiseUpAction()]),framework.Actions.Func((function(){return t.playIdle()}))])}},{key:"getRiseUpAction",value:function(){return framework.Actions.Spine(this._spine,S.riseUp)}},{key:"setShadow",value:function(){var e=new g.a(new t.Point(.02,1));this._spine.filters=[e]}},{key:"updateShadowPosition",value:function(){var t=this._spine.filters?this._spine.filters[0]:null;if(t){var e=framework.Vector.getGlobalPos(this._spine);t.uniforms.floorY=e.y;var i=this.diService.getDataByKey(k.a.gameWidth),n=e.x<i/2?-1:1;t.uniforms.factor=n}}},{key:"_updateImpl",value:function(t){this.updateShadowPosition()}},{key:"setDirection",value:function(t){this._spine.scale.x=t}},{key:"characterPosition",get:function(){return this._characterPosition},set:function(t){this._characterPosition=t}},{key:"talkAnimation",get:function(){var t=S.talk;switch(this.characterPosition){case _.standing:t=this.getMoodAnimation(),this.role==m.a.narrator&&(t=S.narrate);break;case _.seating:t=S.talkSeated;break;case _.laying:t=S.talkLaying;break;case _.snoring:t=S.idleSnore}return t}},{key:"idleAnimation",get:function(){var t=S.idle;switch(this.characterPosition){case _.standing:t=S.idle;break;case _.seating:t=S.seated;break;case _.laying:t=S.idleLaying;break;case _.snoring:t=S.idleSnore}return t}}]),o}(framework.Script);!function(t){t.buster="buster",t.arthur="arthur",t.muffy="muffy",t.dw="dw"}(A||(A={})),function(t){t.hideDown="hide-down",t.hideRight="hide-right",t.idle="idle",t.riseLeft="rise-left",t.riseUp="rise-up",t.talk="talk",t.walk="walk",t.walkOn="walk-on",t.narrate="narrate",t.jump="jump",t.leapfrog="leapfrog",t.run="run",t.select="select",t.shake="shake",t.talkangry="talk-angry",t.talksilly="talk-silly",t.dance="dance",t.dance2="dance2",t.flip="flip",t.seated="seated-medium",t.toLay="to-lay",t.fromLay="from-lay",t.mopping="mopping",t.talkSeated="talk-seated-medium",t.talkLaying="talk-laying",t.idleLaying="idle-laying",t.idleSnore="idle-snore",t.celebrate="celebrate"}(S||(S={})),function(t){t.neutral="neutral",t.silly="silly",t.angry="angry",t.scared="shaking"}(b||(b={})),function(t){t.standing="standing",t.seating="seating",t.laying="laying",t.snoring="snoring"}(_||(_={}))}).call(this,i(23))},function(t,e,i){"use strict";var n;i.d(e,"a",(function(){return n})),function(t){t[t.left=1]="left",t[t.right=-1]="right"}(n||(n={}))},,,,function(t,e,i){"use strict";i.d(e,"a",(function(){return k}));i(33),i(12),i(14),i(13),i(80),i(34);var n=i(3),r=i.n(n),o=i(6),a=i.n(o),s=i(2),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(20),y=i(4),g=i(71);function m(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var k=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(m()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),(a=i.call(this,t,o)).selectPopover=e,a}return c()(n,[{key:"isReplay",get:function(){return this.diService.getDataByKey(y.a.isReplay)}},{key:"choiceDialog",get:function(){return this.dialog}},{key:"pauseButton",get:function(){return this.diService.getDataByKey(y.a.pauseButton)}}]),c()(n,[{key:"onInit",value:function(){var t=this;this.disablePauseButton(),this.diService.setDataWithKey(y.a.ChoiceDialogLineDelegate,this),this.selectPopover.buttons.forEach((function(e,i){return t.setButtonListener(e,i)})),this.selectionPopOverDelegate.attachPopover(this.selectPopover),this.selectPopover.init(),this.dialog.playDialog()}},{key:"disablePauseButton",value:function(){this.isReplay||(this.pauseButton.tint=6710886,this.pauseButton[g.a.PressedListenerKey].isActive=!1)}},{key:"enablePauseButton",value:function(){this.isReplay||(this.pauseButton.tint=16777215,this.pauseButton[g.a.PressedListenerKey].isActive=!0)}},{key:"setButtonListener",value:function(t,e){var i=this,n=this.dialog.getLink(e);n&&this.interactionHandler.setButtonPressedListener(t,(function(){return i.onChoice(n.link)})),this.selectPopover.activebuttons[e]=!!n}},{key:"onChoicesBeingPresented",value:function(t){}},{key:"onChoice",value:function(t){this.removeInterations(),this.choiceDialog.finishChoice(t),this.didTerminate(t)}},{key:"onDeinit",value:function(){this.selectionPopOverDelegate.dettachPopover(this.selectPopover),this.diService.setDataWithKey(y.a.ChoiceDialogLineDelegate,null),this.removeInterations(),this.enablePauseButton()}},{key:"removeInterations",value:function(){var t=this;this.selectPopover.buttons.forEach((function(e){return t.interactionHandler.removeButtonPressedListener(e)}))}},{key:"onDestroy",value:function(){this.selectPopover.deinit(),a()(f()(n.prototype),"onDestroy",this).call(this)}},{key:"checkChoiceMade",value:function(){return!!this.choiceDialog.hasChoice()&&(this.onChoice(this.choiceDialog.choiceId),!0)}},{key:"skip",value:function(){var t=this;this.selectPopover.hide((function(){t.choiceDialog.skip(),t.setCharactersToIdle(),t.choiceDialog.finishChoice(t.choiceDialog.getDefaultChoice()),t.didTerminate(t.choiceDialog.getDefaultChoice())}))}},{key:"setPopOverButtonActive",value:function(){this.setButtonListenerToActive(!0)}},{key:"setPopOverButtonInactive",value:function(){this.setButtonListenerToActive(!1)}},{key:"setButtonListenerToActive",value:function(t){this.selectPopover.buttons.forEach((function(e){var i=e[g.a.PressedListenerKey];i&&(i.isActive=t)}))}}]),n}(v.a)},function(t,e,i){"use strict";i.d(e,"c",(function(){return y})),i.d(e,"b",(function(){return d})),i.d(e,"a",(function(){return v}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(8),c=i.n(s),u=i(0),h=i.n(u),l=i(9),f=i.n(l);function p(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var d,v,y=function(t){f()(n,t);var e,i=(e=n,function(){var t,i=h()(e);if(p()){var n=h()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return c()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"getSkinName",value:function(t){return t}}]),n}(i(117).a);!function(t){t.angry="angry",t.happy="happy",t.silly="silly",t.sunny="sunny",t.cloudy="cloudy",t.walk="walk",t.disappear="disappear",t.applause="applause",t.dumdumdum="dumdumdum",t.foley1="foley1",t.foley2="foley2",t.foley3="foley3",t.gasp="gasp",t.jump="jump",t.dance="dance",t.dingdong="dingdong",t.honkhonk="honkhonk",t.arooga="arooga",t.shake="shake",t.bang="bang",t.pop="pop",t.crash="crash",t.sad="sad"}(d||(d={})),function(t){t.idle="idle",t.show="show",t.hide="hide"}(v||(v={}))},function(t,e,i){"use strict";i.d(e,"h",(function(){return Nt})),i.d(e,"f",(function(){return Kt})),i.d(e,"c",(function(){return Ut})),i.d(e,"d",(function(){return Wt})),i.d(e,"b",(function(){return jt})),i.d(e,"g",(function(){return qt})),i.d(e,"a",(function(){return Xt})),i.d(e,"e",(function(){return Yt}));i(57),i(51),i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(1),y=i.n(v),g=i(20),m=i(121),k=i(27),w=i(118),A=i(259),S=(i(38),i(47),i(44),i(45),i(6)),b=i.n(S),_=i(5),D=i(4),C=i(26),P=i(11),x=i(54);function R(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var M=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(R()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),(a=i.call(this,t,e,o)).costumeSelectionPopOver=e,y()(c()(a),"choiceToCostumeMap",new Map([[Ut.Costume1GL,P.a.goldilocks],[Ut.Costume1GR,P.a.goldirocks],[Ut.Costume1GF,P.a.goldifish]])),y()(c()(a),"spines",new Map),a}return a()(n,[{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}},{key:"parent",get:function(){return this.characters.get(_.a.parentBear)}},{key:"baby",get:function(){return this.characters.get(_.a.babyBear)}},{key:"backdrop",get:function(){return this.diService.getDataByKey(D.a.backdrop)}},{key:"weatherProp",get:function(){return this.diService.getDataByKey(D.a.weatherProp)}}]),a()(n,[{key:"onInit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,this),this.setup()}},{key:"setup",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.parent.getHideAction(),this.baby.getHideAction(),framework.Actions.Func((function(){b()(f()(n.prototype),"onInit",t).call(t),t.setPopOverButtonInactive()}))]))}},{key:"onCue",value:function(){var t=this;this.initCharacter(),this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){t.character.x=x.a.act1GoldilocksOffScreenXPosition,t.character.show()})),this.character.getWalkToPositionAction(x.a.act1GoldilocksWalkToXPosition,this.character.y,1.5)]))}},{key:"initCharacter",value:function(){this.character.show(),this.parent.hide(),this.baby.hide()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setCostume(t),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.costumeSelectionPopOver.getOnSelectAnimAction(this.spines.get(t)),framework.Actions.Func((function(){return e.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([e.character.getCostumeAction(e.choiceToCostumeMap.get(t)),framework.Actions.Func((function(){e.character.playWalk(),e.didTerminate(t)}))]))}))}))]))}},{key:"setCostume",value:function(t){this.choiceDialog.finishChoice(t),this.costumeSelectionPopOver.setSelected(this.spines.get(t))}},{key:"onChoicesBeingPresented",value:function(t){var e=this;this.checkChoiceMade()||this.selectPopover.show((function(){e.setPopOverButtonActive(),e.spines.set(Ut.Costume1GL,e.costumeSelectionPopOver.buttonLeft),e.spines.set(Ut.Costume1GR,e.costumeSelectionPopOver.buttonMiddle),e.spines.set(Ut.Costume1GF,e.costumeSelectionPopOver.buttonRight)}))}},{key:"onDeinit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,null),b()(f()(n.prototype),"onDeinit",this).call(this)}},{key:"skip",value:function(){this.initCharacter();var t=this.choiceDialog.getDefaultChoice();this.character.setCostume(this.choiceToCostumeMap.get(t)),this.weatherProp.skip(),b()(f()(n.prototype),"skip",this).call(this)}}]),n}(C.a);function I(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var T=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(I()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){return r()(this,n),i.call(this,t,e,o)}return a()(n,[{key:"garden",get:function(){return this.diService.getDataByKey(D.a.garden)}}]),a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||this.selectPopover.show()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t);this.garden.show(t,(function(){return e.selectPopover.hide((function(){return e.didTerminate(t)}))}))}},{key:"skip",value:function(){this.garden.choiceId=this.choiceDialog.getDefaultChoice(),this.garden.skip(),b()(f()(n.prototype),"skip",this).call(this)}}]),n}(C.a),O=i(35),F=i(41),B=i(22);function V(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var L=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(V()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){return r()(this,n),i.call(this,t,e,o)}return a()(n,[{key:"bowl",get:function(){return this.diService.getDataByKey(D.a.bowl)}},{key:"backdrop",get:function(){return this.diService.getDataByKey(D.a.backdrop)}},{key:"garden",get:function(){return this.diService.getDataByKey(D.a.garden)}},{key:"weatherProp",get:function(){return this.diService.getDataByKey(D.a.weatherProp)}},{key:"narrator",get:function(){return this.characters.get(_.a.narrator)}},{key:"goldilocks",get:function(){return this.characters.get(_.a.goldilocks)}}]),a()(n,[{key:"onInit",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.garden.getRemoveAction(),this.weatherProp.getRemoveAction(),framework.Actions.Sequence([this.goldilocks.getHideAction(),framework.Actions.Func((function(){return t.setGoldilocksPosition()})),this.goldilocks.getShowAndRiseUpAction(),framework.Actions.Func((function(){return t.goldilocks.playIdle()}))]),framework.Actions.Sequence([this.narrator.getHideAction(),framework.Actions.Func((function(){return t.setNarratorPosition()})),this.narrator.getShowAndRiseUpAction(),framework.Actions.Func((function(){return t.narrator.playIdle()}))]),this.backdrop.getAnimatedActChangeAction(this.getBackgroundForWeather(this.weatherProp.choiceId))]),framework.Actions.Func((function(){return b()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"setNarratorPosition",value:function(){this.narrator.x=x.a.act2NarratorXPosition,this.narrator.setDirection(B.a.right)}},{key:"setGoldilocksPosition",value:function(){this.goldilocks.x=x.a.act2GoldilocksXPosition,this.goldilocks.setDirection(B.a.right)}},{key:"getBackgroundForWeather",value:function(t){return this.weatherProp.isSunChoice(t)?F.a.act4:F.a.act2}},{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||this.selectPopover.show()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.selectPopover.hide((function(){e.bowl.setSkinForType(t),e.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Sequence([framework.Actions.Delay(2),framework.Actions.Func((function(){return e.didTerminate(t)}))]),framework.Actions.Sequence([e.bowl.getShowAction(),e.bowl.getIdleAnimAction()])]))}))}},{key:"skip",value:function(){this.garden.hide(),this.bowl.choiceId=this.choiceDialog.getDefaultChoice(),this.bowl.skip(),this.weatherProp.hide(),this.backdrop.setBackdropTo(this.getBackgroundForWeather(this.weatherProp.choiceId),!0),this.setNarratorPosition(),this.goldilocks.x=x.a.act2GoldilocksXPosition,b()(f()(n.prototype),"skip",this).call(this)}}]),n}(C.a);function E(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var N=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(E()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,this),b()(f()(n.prototype),"onInit",this).call(this)}},{key:"onCue",value:function(){this.changeBackdrop()}},{key:"changeBackdrop",value:function(){this.actionManagerDelegate.runAction(this.backdrop.getAnimatedActChangeAction(this.act))}},{key:"onDeinit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,null),b()(f()(n.prototype),"onDeinit",this).call(this)}},{key:"skip",value:function(){this.backdrop.setBackdropTo(this.act,!0),b()(f()(n.prototype),"skip",this).call(this)}},{key:"backdrop",get:function(){return this.diService.getDataByKey(D.a.backdrop)}},{key:"act",get:function(){return F.a.act3}}]),n}(g.a);function K(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var H=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(K()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){this.character.playWalk(),b()(f()(n.prototype),"onInit",this).call(this)}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.character.playWalk()}},{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}}]),n}(g.a);function U(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var W=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(U()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),(a=i.call(this,t,e,o)).selectPopover=e,a}return a()(n,[{key:"weatherProp",get:function(){return this.diService.getDataByKey(D.a.weatherProp)}},{key:"backdrop",get:function(){return this.diService.getDataByKey(D.a.backdrop)}}]),a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||(this.selectPopover.view.x=0,this.selectPopover.show())}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setChoice(t),this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Parallel([e.weatherProp.getDropAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}))}},{key:"setChoice",value:function(t){this.choiceDialog.finishChoice(t),this.weatherProp.choiceId=t}},{key:"skip",value:function(){this.setChoice(this.choiceDialog.getDefaultChoice())}},{key:"onDestroy",value:function(){this.clear(),b()(f()(n.prototype),"onDestroy",this).call(this)}}]),n}(C.a);i(109),i(111);function j(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var q=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(j()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,this),b()(f()(n.prototype),"onInit",this).call(this)}},{key:"onCue",value:function(){}},{key:"isSunChoice",value:function(){return this.storyData.save.get("weather").includes("sun")}},{key:"getHatAction",value:function(){return this.isSunChoice()?this.parent.getSetSunHatAction():this.parent.getSetColdHat()}},{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.getHatAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"onDeinit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,null),b()(f()(n.prototype),"onDeinit",this).call(this)}},{key:"skip",value:function(){this.isSunChoice()?this.parent.setSunHat():this.parent.setColdHat(),b()(f()(n.prototype),"skip",this).call(this)}},{key:"parent",get:function(){return this.characters.get(_.a.parentBear)}},{key:"storyData",get:function(){return this.diService.getDataByKey(D.a.StoryData)}}]),n}(g.a);function X(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var G=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(X()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){return r()(this,n),i.call(this,t,e,o)}return a()(n,[{key:"bearFurniture",get:function(){return this.diService.getDataByKey(D.a.bearFurniture)}},{key:"bowl",get:function(){return this.diService.getDataByKey(D.a.bowl)}}]),a()(n,[{key:"onInit",value:function(){b()(f()(n.prototype),"onInit",this).call(this),this.setup()}},{key:"setup",value:function(){this.actionManagerDelegate.runAction(this.bowl.getHideAction())}},{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||this.selectPopover.show()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.selectPopover.hide((function(){e.bearFurniture.choiceId=t,e.bearFurniture.setSkinForType(t),e.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Func((function(){return e.didTerminate(t)})),framework.Actions.Sequence([e.bearFurniture.getShowAction(),e.bearFurniture.getIdleAnimAction()])]))}))}},{key:"skip",value:function(){this.bowl.reset(),this.bearFurniture.choiceId=this.choiceDialog.getDefaultChoice(),this.bearFurniture.setSkinForType(this.bearFurniture.choiceId),this.bearFurniture.skip(),b()(f()(n.prototype),"skip",this).call(this)}}]),n}(C.a),z=(i(80),i(88)),Y=i(39),Z=i(31);function J(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var $=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(J()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setSfx(t),this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Sequence([e.character.getCharacterMoveAction(e.locator.exitMiddle,(function(){return e.character.playWalk()}),.3),framework.Actions.Func((function(){e.character.stand()}))]),framework.Actions.Parallel([framework.Actions.Func((function(){return e.bearFurniture.setBroken()})),new Y.a(e.bearFurniture.sfxBreak,Z.a.G2,!1,e.diService)])]),framework.Actions.Func((function(){return e.didTerminate(e.dialog.getLink(0).link)}))]))}))}},{key:"setSfx",value:function(t){this.choiceDialog.finishChoice(t);var e=this.dialog.sfxChoices[t];if(!e)throw"no sfx for "+t+" in "+this.dialog.sfxChoices;this.bearFurniture.sfxBreak=e}},{key:"skip",value:function(){var t=this;this.selectPopover.hide((function(){t.didTerminate(t.dialog.getLink(0).link)}))}},{key:"bearFurniture",get:function(){return this.diService.getDataByKey(D.a.bearFurniture)}},{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}},{key:"locator",get:function(){return this.diService.getDataByKey(D.a.locator)}}]),n}(z.a),Q=i(17);function tt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var et=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(tt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),a=i.call(this,t,e),y()(c()(a),"target",void 0),a.target=Object(Q.c)(o,t.location),a}return a()(n,[{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}}]),a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getCharacterMoveAction(this.target,(function(){return e.character.playWalk()})),this.character.getSeatedAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.character.playSeat()}}]),n}(g.a);function it(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var nt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(it()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){return r()(this,n),i.call(this,t,e,o)}return a()(n,[{key:"bed",get:function(){return this.diService.getDataByKey(D.a.bed)}},{key:"bearFurniture",get:function(){return this.diService.getDataByKey(D.a.bearFurniture)}}]),a()(n,[{key:"onInit",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.bearFurniture.getHideAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||this.selectPopover.show()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.selectPopover.hide((function(){e.bed.choiceId=t,e.bed.setSkinForType(t),e.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Func((function(){return e.didTerminate(t)})),framework.Actions.Sequence([e.bed.getShowAction(),e.bed.getIdleAnimAction()])]))}))}},{key:"skip",value:function(){this.bearFurniture.reset(),this.bed.choiceId=this.choiceDialog.getDefaultChoice(),this.bed.setSkinForType(this.bed.choiceId),this.bed.skip(),b()(f()(n.prototype),"skip",this).call(this)}}]),n}(C.a);function rt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ot=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(rt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),a=i.call(this,t,e),y()(c()(a),"target",void 0),a.target=Object(Q.c)(o,t.location),a}return a()(n,[{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}}]),a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getCharacterMoveAction(this.target,(function(){return e.character.playWalk()})),framework.Actions.Func((function(){return e.character.setDirection(B.a.left)})),this.character.getToLayAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.character.playToLay()}}]),n}(g.a);function at(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var st=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(at()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getFromLayAction(),framework.Actions.Func((function(){return e.character.setDirection(B.a.right)})),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}}]),n}(ot);function ct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ut=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(ct()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||(this.selectPopover.view.x=0,this.selectPopover.show())}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.selectPopover.hide((function(){return e.didTerminate(t)}))}}]),n}(C.a);function ht(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var lt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(ht()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,this),b()(f()(n.prototype),"onInit",this).call(this)}},{key:"onCue",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Sequence([this.door.getShowAction(),this.door.getOpenAnimAction(),framework.Actions.Parallel([framework.Actions.Sequence([framework.Actions.Delay(1),framework.Actions.Func((function(){return t.babyBear.setDirection(B.a.left)})),framework.Actions.Func((function(){return t.parentBear.setDirection(B.a.left)}))]),this.character.getCharacterMoveActionToPoint(this.locator.exitLeft.position,(function(){return t.character.playRun()}),2)]),this.character.getHideAction(),this.door.getCloseAnimAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",t).call(t,t.dialog.getLink(0).link)}))]),framework.Actions.Sequence([framework.Actions.Delay(3),this.getNarratorAction()])]))}},{key:"getNarratorAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Func((function(){return t.setupNarrator()})),this.narrator.getShowAndRiseUpAction()])}},{key:"setupNarrator",value:function(){this.narrator.x=this.locator.exitRight.x,this.narrator.setDirection(B.a.left)}},{key:"didTerminate",value:function(t){}},{key:"onDeinit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,null),b()(f()(n.prototype),"onDeinit",this).call(this)}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.character.hide(),b()(f()(n.prototype),"didTerminate",this).call(this,this.dialog.getLink(0).link)}},{key:"narrator",get:function(){return this.characters.get(_.a.narrator)}},{key:"locator",get:function(){return this.diService.getDataByKey(D.a.locator)}},{key:"door",get:function(){return this.diService.getDataByKey(D.a.door)}},{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}},{key:"babyBear",get:function(){return this.characters.get(_.a.babyBear)}},{key:"parentBear",get:function(){return this.characters.get(_.a.parentBear)}}]),n}(g.a),ft=i(260);function pt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var dt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(pt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){var t=this;this.setup(),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.bowl.getHideAction(),this.babyBear.getWalkToPositionAction(this.locator.babyBearPosition.x),this.bearFurniture.getShowAnimAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"setup",value:function(){this.bearFurniture.setSkinForType(this.bearFurniture.choiceId),this.bearFurniture.setBroken()}},{key:"skip",value:function(){this.setup(),this.bowl.hideAll(),this.bearFurniture.showAll(),this.babyBear.x=this.locator.babyBearPosition.x,this.parentBear.x=this.locator.parentBearPosition.x,b()(f()(n.prototype),"skip",this).call(this)}},{key:"bearFurniture",get:function(){return this.diService.getDataByKey(D.a.bearFurniture)}},{key:"bowl",get:function(){return this.diService.getDataByKey(D.a.bowl)}},{key:"locator",get:function(){return this.diService.getDataByKey(D.a.locator)}},{key:"narrator",get:function(){return this.characters.get(_.a.narrator)}},{key:"babyBear",get:function(){return this.characters.get(_.a.babyBear)}},{key:"parentBear",get:function(){return this.characters.get(_.a.parentBear)}}]),n}(g.a),vt=i(261);function yt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var gt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(yt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t);var i=this.dialog.sfxChoices[t];if(!i)throw"no sfx for "+t+" in "+this.dialog.sfxChoices;this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([new Y.a(i,Z.a.G2,!1,e.diService),framework.Actions.Delay(2),e.goldilocks.getFromLayAction(),e.goldilocks.getWalkToPositionAction(x.a.act3GoldilocksXPosition),e.babyBear.getWalkToPositionAction(e.locator.babyBearPosition.x),framework.Actions.Func((function(){return e.didTerminate(e.dialog.getLink(0).link)}))]))}))}},{key:"skip",value:function(){var t=this;this.selectPopover.hide((function(){t.choiceDialog.skip(),t.choiceDialog.finishChoice(t.choiceDialog.getDefaultChoice()),t.didTerminate(t.dialog.getLink(0).link),t.stopSound()}))}},{key:"goldilocks",get:function(){return this.characters.get(_.a.goldilocks)}},{key:"babyBear",get:function(){return this.characters.get(_.a.babyBear)}},{key:"locator",get:function(){return this.diService.getDataByKey(D.a.locator)}}]),n}(z.a),mt=i(262),kt=i(263);function wt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var At=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(wt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,this),b()(f()(n.prototype),"onInit",this).call(this)}},{key:"onCue",value:function(){this.emptyBowl()}},{key:"emptyBowl",value:function(){this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.bowl.getEmptyBowlAction()]))}},{key:"onDeinit",value:function(){this.diService.setDataWithKey(D.a.CueDialogLineDelegate,null),b()(f()(n.prototype),"onDeinit",this).call(this)}},{key:"skip",value:function(){this.emptyBowl(),b()(f()(n.prototype),"skip",this).call(this)}},{key:"bowl",get:function(){return this.diService.getDataByKey(D.a.bowl)}}]),n}(g.a);function St(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var bt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(St()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.door.getOpenAnimAction(),this.character.getWalkToPositionAction(this.door.x),this.character.getHideAction(),framework.Actions.Func((function(){return e.character.hide()})),this.door.getCloseAnimAction(),this.door.getHideAction(),framework.Actions.Func((function(){b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.door.hide(),this.character.hide(),this.narrator.hide()}},{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}},{key:"narrator",get:function(){return this.characters.get(_.a.narrator)}},{key:"door",get:function(){return this.diService.getDataByKey(D.a.door)}}]),n}(g.a);function _t(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Dt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(_t()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.babyBear.getWalkToPositionAction(this.locator.babyBearNoticingPosition.x)]),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.babyBear.x=this.locator.babyBearNoticingPosition.x}},{key:"babyBear",get:function(){return this.characters.get(_.a.babyBear)}},{key:"parentBear",get:function(){return this.characters.get(_.a.parentBear)}},{key:"locator",get:function(){return this.diService.getDataByKey(D.a.locator)}}]),n}(g.a);function Ct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Pt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Ct()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return t.character.playSnore()})),framework.Actions.Func((function(){return b()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.character.playSnore()}},{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}}]),n}(g.a);function xt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Rt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(xt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.getNarratorAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"getNarratorAction",value:function(){var t=this;return framework.Actions.Sequence([this.narrator.getHideAction(),framework.Actions.Func((function(){return t.setupNarrator()})),this.narrator.getShowAndRiseUpAction()])}},{key:"setupNarrator",value:function(){this.narrator.x=this.locator.exitRight.x,this.narrator.setDirection(B.a.left)}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.setupNarrator(),this.character.playToLay()}},{key:"narrator",get:function(){return this.characters.get(_.a.narrator)}},{key:"locator",get:function(){return this.diService.getDataByKey(D.a.locator)}}]),n}(ot);function Mt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var It=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Mt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.narrator.getHideAction(),framework.Actions.Func((function(){return t.setupNarrator()})),this.narrator.getShowAndRiseUpAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"setupNarrator",value:function(){this.narrator.x=this.locator.exitLeft.x,this.narrator.setDirection(B.a.right)}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.setupNarrator(),this.character.playToLay()}},{key:"narrator",get:function(){return this.characters.get(_.a.narrator)}},{key:"locator",get:function(){return this.diService.getDataByKey(D.a.locator)}}]),n}(st);function Tt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ot=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Tt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.babyBear.getWalkToPositionAction(this.locator.babyBearNoticingPosition.x),framework.Actions.Sequence([this.parentBear.getWalkToPositionAction(this.locator.parentBearPosition.x),this.narrator.getHideAction()])]),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.babyBear.x=this.locator.babyBearNoticingPosition.x,this.parentBear.x=this.locator.parentBearPosition.x}},{key:"babyBear",get:function(){return this.characters.get(_.a.babyBear)}},{key:"parentBear",get:function(){return this.characters.get(_.a.parentBear)}},{key:"narrator",get:function(){return this.characters.get(_.a.narrator)}},{key:"locator",get:function(){return this.diService.getDataByKey(D.a.locator)}}]),n}(g.a);function Ft(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Bt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Ft()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),a=i.call(this,t,e),y()(c()(a),"target",void 0),a.target=Object(Q.c)(o,t.location),a}return a()(n,[{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}},{key:"bearFurniture",get:function(){return this.diService.getDataByKey(D.a.bearFurniture)}}]),a()(n,[{key:"onInit",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getCharacterMoveAction(this.target,(function(){return t.character.playWalk()})),this.character.getSeatedAction(),framework.Actions.Func((function(){return b()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.bearFurniture.getHornSfxAction(this.dialog.name),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this),this.character.playSeat()}}]),n}(g.a);function Vt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Lt,Et,Nt,Kt,Ht,Ut,Wt,jt,qt,Xt,Gt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Vt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),a=i.call(this,t,e),y()(c()(a),"target",void 0),a.target=Object(Q.c)(o,t.location),a}return a()(n,[{key:"character",get:function(){return this.characters.get(_.a.goldilocks)}}]),a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getCharacterMoveAction(this.target,(function(){return e.character.playWalk()})),framework.Actions.Func((function(){return b()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){b()(f()(n.prototype),"skip",this).call(this)}}]),n}(g.a);function zt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}!function(t){t.weatherChoice="prop-weather",t.seat="seat",t.parentBear="parent-bear",t.glCostumeChoice="gl-costume-choice",t.garden="garden",t.bowl="bowl",t.bed="bed",t.caught1="caught-1",t.caughtResponse="caught-response",t.breakSfx="break-sfx"}(Lt||(Lt={})),function(t){t.intro1="intro-1",t.introAct2_1="intro-act2-1",t.act3Intro1="act-3-intro-1",t.story5="story-5",t.break1="break-1",t.act3intro1="act-3-intro-1",t.story13="story-13",t.story16="story-16",t.caught5="caught-5",t.story9="story-9a",t.story10="story-10",t.story11="story-11",t.story14="story-14",t.story17="story-17",t.bed10="bed-10"}(Et||(Et={})),function(t){t.Weather2Clouds="weather-2-clouds",t.Weather2Sun="weather-2-sun"}(Nt||(Nt={})),function(t){t.parent1Mother="parent-1-mother",t.parent1Father="parent-1-father"}(Kt||(Kt={})),function(t){t.goldilocksEntrance="goldilocks-entrance",t.sunHat="sun-hat",t.goldilocksSeesBearHouse="bear-house",t.goldilocksEatFood="eat-food",t.escape="escape"}(Ht||(Ht={})),function(t){t.Costume1GL="costume-1-goldilocks",t.Costume1GR="costume-1-goldirocks",t.Costume1GF="costume-1-goldifish"}(Ut||(Ut={})),function(t){t.flowers="garden-2-flowers",t.beanstalks="garden-2-beanstalks",t.hives="garden-2-hives"}(Wt||(Wt={})),function(t){t.porridge="bowl-2-porridge",t.tacos="bowl-2-tacos",t.spaghetti="bowl-2-spaghetti",t.porridge4="bowl-4-porridge",t.tacos4="bowl-4-tacos",t.spaghetti4="bowl-4-spaghetti",t.porridge6="bowl-6-porridge",t.tacos6="bowl-6-tacos",t.spaghetti6="bowl-6-spaghetti",t.porridge8="bowl-8-porridge",t.tacos8="bowl-8-tacos",t.spaghetti8="bowl-8-spaghetti",t.bowl4="bowl-4",t.bowl6="bowl-6",t.bowl8="bowl-8"}(jt||(jt={})),function(t){t.chair="seat-2-chair",t.beanbag="seat-2-beanbag",t.train="seat-2-train",t.seat3Chair="seat-3-chair",t.seat3Beanbag="seat-3-beanbag",t.seat3Train="seat-3-train",t.seat6Chair="seat-6-chair",t.seat6Beanbag="seat-6-beanbag",t.seat6Train="seat-6-train",t.seat8Chair="seat-8-chair",t.seat8Beanbag="seat-8-beanbag",t.seat8Train="seat-8-train"}(qt||(qt={})),function(t){t.bed2WaterBed="bed-2-waterbed",t.bed2Couch="bed-2-couch",t.bed2Hammock="bed-2-hammock",t.bed3WaterBed="bed-3-waterbed",t.bed3Couch="bed-3-couch",t.bed3Hammock="bed-3-hammock",t.bed5WaterBed="bed-5-waterbed",t.bed5Couch="bed-5-couch",t.bed5Hammock="bed-5-hammock",t.bed7="bed-7",t.bed7Hammock="bed-7-hammock"}(Xt||(Xt={}));var Yt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(zt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){var t;r()(this,n);for(var e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return t=i.call.apply(i,[this].concat(o)),y()(c()(t),"act1",Et.intro1),y()(c()(t),"act2",Et.introAct2_1),y()(c()(t),"act3",Et.act3Intro1),t}return a()(n,[{key:"handleChoiceDialog",value:function(t,e,i){switch(t.choiceType){case Lt.weatherChoice:return new W(e,this.createIconSelectPopOver([k.b.sunny,k.b.cloudy]),this.diService);case Lt.parentBear:return new A.a(e,this.createCostumeSelectPopOver([P.a.mummabear,P.a.puppabear]),this.diService);case Lt.garden:return new T(e,this.createPropsSelectPopOver([O.a.flowers,O.a.beanstalks,O.a.honeybeehives]),this.diService);case Lt.bowl:return new L(e,this.createPropsSelectPopOver([O.a.porridge,O.a.tacos,O.a.spaghetti]),this.diService);case Lt.seat:return new G(e,this.createPropsSelectPopOver([O.a.chair,O.a.beanbag,O.a.train]),this.diService);case Lt.breakSfx:return new $(e,this.createIconSelectPopOver([k.b.bang,k.b.pop,k.b.crash]),this.diService);case Lt.bed:return new nt(e,this.createPropsSelectPopOver([O.a.waterbed,O.a.couch,O.a.hammock]),this.diService);case Lt.caught1:return new gt(e,this.createIconSelectPopOver([k.b.dumdumdum,k.b.applause,k.b.gasp]),this.diService);case Lt.caughtResponse:return new ut(e,this.createIconSelectPopOver([k.b.sad,k.b.angry,k.b.silly]),this.diService);default:return this.getSimpleDialog(i,e)}}},{key:"handleCueDialog",value:function(t,e){switch(t.cue){case Ht.sunHat:return new q(e,this.diService);case Ht.goldilocksSeesBearHouse:return new N(e,this.diService);case Ht.goldilocksEatFood:return new At(e,this.diService);case Ht.escape:return new lt(e,this.diService);default:throw"no state for "+t.cue}}},{key:"handleCueChoiceDialog",value:function(t,e){switch(t.cue){case Ht.goldilocksEntrance:return new M(e,this.createCostumeSelectPopOver([P.a.goldilocks,P.a.goldirocks,P.a.goldifish]),this.diService)}}},{key:"getSimpleDialog",value:function(t,e){var i=t.name==qt.seat3Train||t.name==qt.seat6Train||t.name==qt.seat8Train,n=t.name==qt.seat3Beanbag||t.name==qt.seat6Chair||t.name==qt.seat6Beanbag||t.name==qt.seat8Chair||t.name==qt.seat8Beanbag,r=t.name==qt.seat3Chair,o=t.name==Xt.bed3Couch||t.name==Xt.bed3Hammock||t.name==Xt.bed3WaterBed,a=t.name==Xt.bed7||t.name==Xt.bed7Hammock,s=t.name==jt.porridge4||t.name==jt.tacos4||t.name==jt.spaghetti4||t.name==jt.porridge6||t.name==jt.tacos6||t.name==jt.spaghetti6||t.name==jt.porridge8||t.name==jt.tacos8||t.name==jt.spaghetti8||t.name==jt.bowl4||t.name==jt.bowl6||t.name==jt.bowl8,c=t.name==Xt.bed5Couch||t.name==Xt.bed5Hammock||t.name==Xt.bed5WaterBed,u=t.name==Et.story11,h=t.name==Et.story14||t.name==Et.story17;return t.name==Et.intro1?new w.a(e,this.diService):t.name==Et.story5?new H(e,this.diService):n?new et(e,this.diService,this.view):r?new Gt(e,this.diService,this.view):o?new Rt(e,this.diService,this.view):a?new It(e,this.diService,this.view):c?new st(e,this.diService,this.view):h?new Dt(e,this.diService):u?new Ot(e,this.diService):t.name==Et.act3intro1?new ft.a(e,this.diService):t.name==Et.story13?new dt(e,this.diService):t.name==Et.story16?new vt.a(e,this.diService):t.name==Et.story9?new mt.a(e,this.diService):t.name==Et.story10?new bt(e,this.diService):s?new kt.a(e,this.diService,this.view):t.name==Et.bed10?new Pt(e,this.diService):i?new Bt(e,this.diService,this.view):new g.a(e,this.diService)}}]),n}(m.a)},function(t,e,i){"use strict";i.d(e,"b",(function(){return Ht})),i.d(e,"d",(function(){return Wt})),i.d(e,"f",(function(){return jt})),i.d(e,"g",(function(){return qt})),i.d(e,"h",(function(){return Xt})),i.d(e,"c",(function(){return Gt})),i.d(e,"a",(function(){return zt})),i.d(e,"e",(function(){return $t}));i(57),i(51),i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(1),y=i.n(v),g=i(20),m=i(6),k=i.n(m),w=i(26),A=i(4);function S(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var b=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(S()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),(a=i.call(this,t,e,o)).selectPopover=e,a}return a()(n,[{key:"weatherProp",get:function(){return this.diService.getDataByKey(A.a.weatherProp)}}]),a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||(this.selectPopover.view.x=0,this.selectPopover.show())}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t);var i=function(){return e.didTerminate(t)};this.selectPopover.hide((function(){return e.weatherProp.drop(t,i)}))}},{key:"skip",value:function(){this.weatherProp.choiceId=this.choiceDialog.getDefaultChoice(),this.weatherProp.skip(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"onDestroy",value:function(){this.clear(),k()(f()(n.prototype),"onDestroy",this).call(this)}}]),n}(w.a),_=i(5);function D(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var C=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(D()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),(a=i.call(this,t,e,o)).selectPopover=e,a}return a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||(this.selectPopover.view.x=this.getCharacter().x,this.selectPopover.show())}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.setAction(t),this.selectPopover.hide((function(){return e.didTerminate(t)}))}},{key:"skip",value:function(){this.setAction(this.choiceDialog.getDefaultChoice()),k()(f()(n.prototype),"skip",this).call(this)}},{key:"setAction",value:function(t){this.getCharacter().setDefaultAction(t)}},{key:"getChoiceId",value:function(){return Ht.lrrhAction2Walking}},{key:"getCharacter",value:function(){return this.characters.get(_.a.littleRedHood)}}]),n}(w.a);function P(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var x=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(P()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o,a){var s;return r()(this,n),(s=i.call(this,t,e,a)).forestProp=o,s}return a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||this.selectPopover.show()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t);this.forestProp.show(t,(function(){return e.selectPopover.hide((function(){return e.didTerminate(t)}))}))}},{key:"skip",value:function(){this.forestProp.choiceId=this.choiceDialog.getDefaultChoice(),this.forestProp.skip(),k()(f()(n.prototype),"skip",this).call(this)}}]),n}(w.a),R=i(161),M=i(27),I=(i(38),i(47),i(44),i(45),i(22)),T=i(11);function O(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var F=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(O()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),(a=i.call(this,t,e,o)).costumeSelectionPopOver=e,y()(c()(a),"choiceToCostumeMap",new Map([[Wt.lrrhCostume1Hood,T.a.littleRedHood],[Wt.lrrhCostumeCowboy,T.a.cowboy],[Wt.lrrhCostumePirate,T.a.pirate]])),y()(c()(a),"spines",new Map),a}return a()(n,[{key:"character",get:function(){return this.characters.get(_.a.littleRedHood)}},{key:"costumePopover",get:function(){return this.selectPopover}}]),a()(n,[{key:"onInit",value:function(){this.diService.setDataWithKey(A.a.CueDialogLineDelegate,this),this.costumeSelectionPopOver.setIcons([T.a.littleRedHood,T.a.cowboy,T.a.pirate]),k()(f()(n.prototype),"onInit",this).call(this),this.setPopOverButtonInactive()}},{key:"onCue",value:function(){var t=this;this.initCharacter(),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getWalkOnAction(),framework.Actions.Func((function(){return t.character.playIdle()}))]))}},{key:"initCharacter",value:function(){this.character.setDirection(I.a.right),this.character.show()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setCostume(t),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.costumeSelectionPopOver.getOnSelectAnimAction(this.spines.get(t)),framework.Actions.Func((function(){return e.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([e.character.getCostumeAction(e.choiceToCostumeMap.get(t)),framework.Actions.Func((function(){return e.didTerminate(t)}))]))}))}))]))}},{key:"setCostume",value:function(t){this.choiceDialog.finishChoice(t),this.costumePopover.setSelected(this.spines.get(t))}},{key:"onChoicesBeingPresented",value:function(t){var e=this;this.checkChoiceMade()||this.selectPopover.show((function(){e.setPopOverButtonActive(),e.spines.set(Wt.lrrhCostume1Hood,e.costumeSelectionPopOver.buttonLeft),e.spines.set(Wt.lrrhCostumeCowboy,e.costumeSelectionPopOver.buttonMiddle),e.spines.set(Wt.lrrhCostumePirate,e.costumeSelectionPopOver.buttonRight)}))}},{key:"onDeinit",value:function(){this.diService.setDataWithKey(A.a.CueDialogLineDelegate,null),k()(f()(n.prototype),"onDeinit",this).call(this)}},{key:"skip",value:function(){this.initCharacter();var t=this.choiceDialog.getDefaultChoice();this.setCostume(t),this.character.setCostume(this.choiceToCostumeMap.get(t)),k()(f()(n.prototype),"skip",this).call(this)}}]),n}(w.a),B=(i(80),i(88)),V=i(39),L=i(31);function E(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var N=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(E()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){this.wolf.x=this.locator.wolfApperanceSpot.x,this.diService.setDataWithKey(A.a.CueDialogLineDelegate,this),this.character.playDefaultAction(),this.characters.get(_.a.wolf).setCostume(T.a.wolf),k()(f()(n.prototype),"onInit",this).call(this)}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t);var i=this.dialog.sfxChoices[t];if(!i)throw"no sfx for "+t+" in "+this.dialog.sfxChoices;var n=this.diService.get(A.b.CameraService);this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([new V.a(i,L.a.G2,!1,e.diService),n.getShakeAction(),framework.Actions.Sequence([e.wolf.getShowAndRiseUpAction(),framework.Actions.Func((function(){return e.wolf.playIdle()}))]),framework.Actions.Func((function(){return e.character.playIdle()}))]),framework.Actions.Func((function(){return e.didTerminate(e.dialog.getLink(0).link)}))]))}))}},{key:"onDeinit",value:function(){this.diService.setDataWithKey(A.a.CueDialogLineDelegate,null),k()(f()(n.prototype),"onDeinit",this).call(this)}},{key:"skip",value:function(){var t=this;this.selectPopover.hide((function(){t.choiceDialog.skip(),t.wolf.show(),t.choiceDialog.finishChoice(t.choiceDialog.getDefaultChoice()),t.didTerminate(t.dialog.getLink(0).link),t.setCharactersToIdle(),t.stopSound()}))}},{key:"character",get:function(){return this.characters.get(_.a.littleRedHood)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}}]),n}(B.a),K=i(35);i(33),i(34);function H(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var U=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(H()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),a=i.call(this,t,e,o),y()(c()(a),"props",[]),a}return a()(n,[{key:"storyData",get:function(){return this.diService.getDataByKey(A.a.StoryData)}},{key:"character",get:function(){return this.characters.get(_.a.littleRedHood)}}]),a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||this.selectPopover.show()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setBasket(t),this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([e.character.getSetAccessoryAction(e.storyData.basketChoiceFrom(t)),framework.Actions.Func((function(){return e.didTerminate(t)}))]))}))}},{key:"setBasket",value:function(t){this.storyData.basketChoice=t,this.choiceDialog.finishChoice(t)}},{key:"clear",value:function(){this.props.forEach((function(t){return t.deinit()})),this.props=[],k()(f()(n.prototype),"clear",this).call(this)}},{key:"skip",value:function(){var t=this.choiceDialog.getDefaultChoice();this.setBasket(t),this.character.setBasket(this.storyData.basketChoiceFrom(t)),k()(f()(n.prototype),"skip",this).call(this)}}]),n}(w.a);function W(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var j=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(W()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getSetUmbrellaAction(),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.character.setUmbrella(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"character",get:function(){return this.characters.get(_.a.littleRedHood)}}]),n}(g.a),q=i(41);function X(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var G=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(X()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e){return r()(this,n),i.call(this,t,e)}return a()(n,[{key:"backdrop",get:function(){return this.diService.getDataByKey(A.a.backdrop)}},{key:"forest",get:function(){return this.diService.getDataByKey(A.a.forestProp)}},{key:"weather",get:function(){return this.diService.getDataByKey(A.a.weatherProp)}},{key:"door",get:function(){return this.diService.getDataByKey(A.a.door)}},{key:"granma",get:function(){return this.characters.get(_.a.grandma)}}]),a()(n,[{key:"onInit",value:function(){var t=this;this.granma.setDirection(I.a.left),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.getRemovePreviousActAction(),this.backdrop.getAnimatedActChangeAction(q.a.act2),this.door.getShowAction(),this.granma.getShowAndRiseUpAction(),framework.Actions.Func((function(){return t.granma.playIdle()})),framework.Actions.Func((function(){return k()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"getRemovePreviousActAction",value:function(){return framework.Actions.Parallel([this.forest.getRemoveAction(),this.weather.getRemoveAction(),this.getRemoveCharactersAction()])}},{key:"getRemoveCharactersAction",value:function(){var t=this.characters.get(_.a.littleRedHood),e=this.characters.get(_.a.wolf);return framework.Actions.Sequence([framework.Actions.Parallel([t.getHideAction(),e.getHideAction()]),framework.Actions.Func((function(){t.hide(),e.hide()}))])}},{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.door.getRingAnimAction(),new V.a("door-knock.mp3",L.a.G2,!1,this.diService)]),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.weather.hide(),this.weather.reset(),this.forest.hide(),this.door.show(),k()(f()(n.prototype),"skip",this).call(this)}}]),n}(g.a);function z(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Y=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(z()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||(this.selectPopover.view.x=0,this.selectPopover.show())}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.selectPopover.hide((function(){return e.didTerminate(t)}))}}]),n}(w.a);function Z(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var J=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Z()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){var t=this;this.initCharacter(),k()(f()(n.prototype),"onInit",this).call(this),this.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Sequence([framework.Actions.Delay(.3),this.wolf.getShowAndRiseUpAction(),framework.Actions.Func((function(){return t.wolf.playIdle()}))]),this.door.getOpenAnimAction()]))}},{key:"initCharacter",value:function(){this.wolf.setCostume(T.a.wolf),this.wolf.setDirection(I.a.right),this.wolf.x=this.door.x}},{key:"skip",value:function(){this.initCharacter(),this.wolf.show(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"door",get:function(){return this.diService.getDataByKey(A.a.door)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}}]),n}(g.a);function $(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Q=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if($()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),(a=i.call(this,t,e,o)).selectPopover=e,a}return a()(n,[{key:"prison",get:function(){return this.diService.getDataByKey(A.a.prison)}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}},{key:"grandma",get:function(){return this.characters.get(_.a.grandma)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}},{key:"door",get:function(){return this.diService.getDataByKey(A.a.door)}}]),a()(n,[{key:"onInit",value:function(){var t=this;this.diService.setDataWithKey(A.a.CueDialogLineDelegate,this),this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return t.wolf.setDirection(I.a.left)})),this.door.getCloseAnimAction(),framework.Actions.Func((function(){return t.wolf.setDirection(I.a.right)})),this.wolf.getCharacterMoveAction(this.locator.wolfGranny,(function(){return t.wolf.playWalk()}),.3),framework.Actions.Func((function(){return t.wolf.playIdle()})),framework.Actions.Func((function(){return k()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||this.selectPopover.show()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.prison.selected=t,this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([e.prison.getShowAnimAction(),framework.Actions.Parallel([e.prison.getOpenIdleAnimAction(),framework.Actions.Func((function(){return e.grandma.playHideDownRight()}))]),framework.Actions.Func((function(){return e.grandma.hide()})),e.prison.getCloseAnimAction(),framework.Actions.Parallel([e.prison.getCloseIdleAnimAction(),framework.Actions.Sequence([framework.Actions.Delay(.67),framework.Actions.Func((function(){return e.didTerminate(t)}))])])]))}))}},{key:"skip",value:function(){this.prison.selected=this.choiceDialog.getDefaultChoice(),this.prison.show(),this.prison.playIdle(),this.door.playIdleClosed(),this.grandma.hide(),k()(f()(n.prototype),"skip",this).call(this)}}]),n}(w.a);function tt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var et=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(tt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){var t=this;k()(f()(n.prototype),"onInit",this).call(this),this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Delay(0),this.grandma.getCharacterMoveAction(this.locator.grannyDoorSpot,(function(){return t.grandma.playWalk()}),1),framework.Actions.Func((function(){return t.grandma.playIdle()}))]))}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}},{key:"grandma",get:function(){return this.characters.get(_.a.grandma)}}]),n}(g.a);function it(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var nt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(it()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e){return r()(this,n),i.call(this,t,e)}return a()(n,[{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}},{key:"character",get:function(){return this.characters.get(_.a.wolf)}}]),a()(n,[{key:"onInit",value:function(){var t=this;k()(f()(n.prototype),"onInit",this).call(this),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getSetWolfGranmaAction((function(){t.setCharacterPosition(),t.character.setDirection(I.a.left),t.character.setWolfGranma()}))]))}},{key:"skip",value:function(){this.initCharacter(),this.setCharacterPosition(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"initCharacter",value:function(){this.character.setWolfGranma()}},{key:"setCharacterPosition",value:function(){this.character.x=this.locator.middle.x}}]),n}(g.a);function rt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ot=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(rt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t);var i=this.dialog.sfxChoices[t];if(!i)throw"no sfx for "+t+" in "+this.dialog.sfxChoices;this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([e.door.getRingAnimAction(),new V.a(i,L.a.G2,!1,e.diService)]),framework.Actions.Func((function(){return e.didTerminate(e.dialog.getLink(0).link)}))]))}))}},{key:"skip",value:function(){this.door.skip(),this.stopSound(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"door",get:function(){return this.diService.getDataByKey(A.a.door)}}]),n}(B.a),at=i(66);function st(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ct=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(st()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e){return r()(this,n),i.call(this,t,e)}return a()(n,[{key:"door",get:function(){return this.diService.getDataByKey(A.a.door)}},{key:"storyData",get:function(){return this.diService.getDataByKey(A.a.StoryData)}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}},{key:"character",get:function(){return this.characters.get(_.a.littleRedHood)}}]),a()(n,[{key:"onInit",value:function(){var t=this;this.diService.setDataWithKey(A.a.CueDialogLineDelegate,this),this.initCharacter(),this.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Sequence([framework.Actions.Delay(.3),this.character.getShowAndRiseUpAction(),framework.Actions.Func((function(){return t.character.playIdle()})),framework.Actions.Func((function(){return k()(f()(n.prototype),"onInit",t).call(t)}))]),this.door.getOpenAnimAction()]))}},{key:"initCharacter",value:function(){this.character.setDirection(I.a.right),this.character.x=this.door.x,this.character.setCostume(at.a.costumeFromName(this.storyData.save.get("costume"))),this.character.setBasket(this.storyData.basketChoiceFrom(this.storyData.basketChoice))}},{key:"onCue",value:function(){}},{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Sequence([this.character.getCharacterMoveAction(this.locator.middleLeft,(function(){return e.character.playWalk()})),framework.Actions.Func((function(){return e.character.playIdle()}))]),this.door.getCloseAnimAction(),framework.Actions.Func((function(){return e.door.playIdleClosed()}))]),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"onDeinit",value:function(){this.diService.deleteDataWithKey(A.a.CueDialogLineDelegate),k()(f()(n.prototype),"onDeinit",this).call(this)}},{key:"skip",value:function(){this.initCharacter(),this.character.show(),this.character.x=this.locator.middleLeft.x,k()(f()(n.prototype),"skip",this).call(this)}}]),n}(g.a);function ut(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ht=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(ut()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"setAction",value:function(t){this.getCharacter().setReactionAction(t)}},{key:"getChoiceId",value:function(){return Ht.act3Action2Run}},{key:"getCharacter",value:function(){return this.characters.get(_.a.littleRedHood)}}]),n}(C),lt=i(254);function ft(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var pt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(ft()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){var a;return r()(this,n),(a=i.call(this,t,e,o)).selectPopover=e,y()(c()(a),"choiceToCostumeMap",new Map([[jt.costume2Karate,T.a.karategrandma],[jt.costume2Superhero,T.a.superherograndma]])),y()(c()(a),"spines",new Map),a}return a()(n,[{key:"prison",get:function(){return this.diService.getDataByKey(A.a.prison)}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}},{key:"character",get:function(){return this.characters.get(_.a.grandma)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}},{key:"costumePopover",get:function(){return this.selectPopover}}]),a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||(this.spines.set(jt.costume2Karate,this.costumePopover.buttonLeft),this.spines.set(jt.costume2Superhero,this.costumePopover.buttonMiddle),this.selectPopover.show())}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.costumePopover.setSelected(this.spines.get(t)),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.costumePopover.getOnSelectAnimAction(this.spines.get(t)),framework.Actions.Func((function(){return e.selectPopover.hide((function(){return e.play(t)}))}))]))}},{key:"play",value:function(t){var e=this;this.initCharacter(t),this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.prison.getCloseAnimAction(),framework.Actions.Func((function(){var t=e.prison.getSFXAction();t&&e.actionManagerDelegate.cancelAction(t)})),this.character.getShowAndRiseUpAction(),framework.Actions.Func((function(){e.wolf.setDirection(I.a.right)}))]),framework.Actions.Func((function(){e.character.playIdle()})),framework.Actions.Func((function(){return e.didTerminate(t)}))]))}},{key:"initCharacter",value:function(t){this.character.setCostume(this.choiceToCostumeMap.get(t)),this.costumePopover.setSelected(this.spines.get(t)),this.character.x=this.locator.middleRight.x,this.character.setDirection(I.a.left)}},{key:"skip",value:function(){this.initCharacter(this.choiceDialog.getDefaultChoice()),this.character.show(),this.character.playIdle(),k()(f()(n.prototype),"skip",this).call(this)}}]),n}(w.a);function dt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var vt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(dt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t,e,o){return r()(this,n),i.call(this,t,e,o)}return a()(n,[{key:"thowingProp",get:function(){return this.diService.getDataByKey(A.a.throwingProp)}}]),a()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||this.selectPopover.show()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.thowingProp.setSkinForType(t);this.selectPopover.hide((function(){return e.didTerminate(t)}))}},{key:"skip",value:function(){this.thowingProp.setSkinForType(this.choiceDialog.getDefaultChoice()),k()(f()(n.prototype),"skip",this).call(this)}}]),n}(w.a),yt=i(21);function gt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var mt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(gt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.thowingProp.spine.x=this.wolf.x,this.wolf.mood=yt.d.angry,this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.thowingProp.getShowAnimAction(),this.thowingProp.getThrowAction(),framework.Actions.Parallel([this.thowingProp.getHitAction(),framework.Actions.Sequence([framework.Actions.Delay(.3),this.getDodgeAction()])]),this.thowingProp.getHideAction(),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"getDodgeAction",value:function(){var t=this;return framework.Actions.Sequence([this.granma.getCharacterMoveAction(this.locator.grannyDodge,(function(){return t.granma.playWalk()}),.3),this.granma.getCharacterMoveAction(this.locator.middleRight,(function(){return t.granma.playWalk()}),.5)])}},{key:"skip",value:function(){this.thowingProp.hide(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"thowingProp",get:function(){return this.diService.getDataByKey(A.a.throwingProp)}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}},{key:"granma",get:function(){return this.characters.get(_.a.grandma)}}]),n}(g.a);function kt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var wt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(kt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Sequence([framework.Actions.Func((function(){return e.wolf.setDirection(I.a.left)})),this.wolf.getCharacterMoveAction(this.locator.exitLeft,(function(){return e.wolf.playRun()}),2),this.wolf.getHideAction(),framework.Actions.Func((function(){return e.lrrh.setDirection(I.a.right)})),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]),framework.Actions.Sequence([framework.Actions.Delay(.8),this.door.getOpenAnimAction()]),framework.Actions.Sequence([framework.Actions.Delay(.8),this.lrrh.getCharacterMoveAction(this.locator.middle,(function(){return e.lrrh.playWalk()})),framework.Actions.Func((function(){return e.lrrh.playIdle()})),framework.Actions.Func((function(){return e.lrrh.setDirection(I.a.left)}))])]))}},{key:"skip",value:function(){this.granny.flipXAxis(),this.wolf.hide(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"door",get:function(){return this.diService.getDataByKey(A.a.door)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}},{key:"lrrh",get:function(){return this.characters.get(_.a.littleRedHood)}},{key:"granny",get:function(){return this.characters.get(_.a.grandma)}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}}]),n}(g.a),At=i(118),St=i(121);function bt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var _t=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(bt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.wolf.getRemoveGlassesAction(),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.wolf.removeGlasses(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}}]),n}(g.a);function Dt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ct=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Dt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.wolf.getRemoveHairAction(),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.wolf.removeHair(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}}]),n}(g.a);function Pt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var xt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Pt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.wolf.getWolfRevealAction(),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.wolf.getWolfRevealAction(),k()(f()(n.prototype),"skip",this).call(this)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}}]),n}(g.a),Rt=i(58);function Mt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var It=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Mt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){k()(f()(n.prototype),"onInit",this).call(this),this.actionManagerDelegate.runAction(this.wolf.getWalkToPositionAction(Rt.a.act1WolfBasketXPosition))}},{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.wolf.getWalkToPositionAction(Rt.a.act1WolfXPosition),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.wolf.x=Rt.a.act1WolfXPosition,k()(f()(n.prototype),"skip",this).call(this)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}}]),n}(g.a);function Tt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ot=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Tt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){var t=this;k()(f()(n.prototype),"onInit",this).call(this),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.littleRedHood.getCharacterMoveAction(this.locator.middleRight,(function(){return t.littleRedHood.playWalk()}),2),this.littleRedHood.getHideAction()]))}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}},{key:"littleRedHood",get:function(){return this.characters.get(_.a.littleRedHood)}}]),n}(g.a);function Ft(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Bt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Ft()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.wolf.getCharacterMoveAction(this.locator.exitLeft,(function(){return e.wolf.playWalk()}),1),this.wolf.getHideAction(),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}},{key:"wolf",get:function(){return this.characters.get(_.a.wolf)}}]),n}(g.a);function Vt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Lt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Vt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){var t=this;k()(f()(n.prototype),"onInit",this).call(this),this.granma.mood=yt.d.scared,this.actionManagerDelegate.runAction(this.granma.getCharacterMoveAction(this.locator.wolfApperanceSpot,(function(){return t.granma.playWalk()})))}},{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){e.granma.playIdle(),e.granma.mood=yt.d.neutral})),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.granma.mood=yt.d.neutral,this.granma.x=this.locator.middle.x,k()(f()(n.prototype),"skip",this).call(this)}},{key:"granma",get:function(){return this.characters.get(_.a.grandma)}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}}]),n}(g.a);function Et(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Nt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Et()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Delay(0),framework.Actions.Parallel([framework.Actions.Sequence([this.grandma.getCharacterMoveAction(this.locator.exitLeft,(function(){return e.grandma.playWalk()}),2),framework.Actions.Func((function(){return e.grandma.playIdle()}))]),framework.Actions.Sequence([framework.Actions.Delay(1),framework.Actions.Func((function(){return e.lrrh.setDirection(I.a.left)})),this.lrrh.getCharacterMoveAction(this.locator.exitLeft,(function(){return e.lrrh.playWalk()}),1),framework.Actions.Func((function(){return e.lrrh.playIdle()}))])]),framework.Actions.Parallel([this.grandma.getHideAction(),this.lrrh.getHideAction(),this.door.getCloseAnimAction()]),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}},{key:"door",get:function(){return this.diService.getDataByKey(A.a.door)}},{key:"grandma",get:function(){return this.characters.get(_.a.grandma)}},{key:"lrrh",get:function(){return this.characters.get(_.a.littleRedHood)}}]),n}(g.a);function Kt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ht,Ut,Wt,jt,qt,Xt,Gt,zt,Yt,Zt=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Kt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.grandma.getCelebrateAction(),this.lrrh.getCelebrateAction()]),framework.Actions.Func((function(){return k()(f()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"grandma",get:function(){return this.characters.get(_.a.grandma)}},{key:"lrrh",get:function(){return this.characters.get(_.a.littleRedHood)}}]),n}(g.a);function Jt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}!function(t){t.lrrhCostumeChoice="lrrh-costume-choice",t.propWeather="prop-weather",t.action="action-1",t.propForest="prop-forest",t.lrrhAction2Jumping="action-2-jumping",t.lrrhAction2Walking="action-2-walking",t.lrrhAction2Grooving="action-2-grooving",t.introWolf1="intro-wolf-1",t.introWolf3="intro-wolf-3",t.basketTypeChoice="basket-type-choice",t.doorBellChoice="door-bell-choice",t.whoIsIt="who-is-it",t.prop2="prop-2",t.act3ActionVo1="act3-action-vo1",t.act3Action2Run="action-2-run",t.act3Action2Leapfrog="action-2-leapfrog",t.act3Action2Shake="action-2-shake",t.act3Action3Run="action-3-run",t.act3Action3Leapfrog="action-3-leapfrog",t.act3Action3Shake="action-3-shake",t.grannyCostume="granny-costume",t.prop3="prop-3"}(Ht||(Ht={})),function(t){t.weather3Cloud="weather-3-clouds",t.introAct2="intro-act2-1",t.intro5a="intro-5a",t.wolfGranny1="wolf-granny-1",t.prop5="prop-5",t.intro1="intro-1",t.intro5b="intro-5b",t.intro6="intro-6",t.question2="question-2",t.question5="question-5",t.question9="question-9",t.introWolf8="intro-wolf-8",t.introWolf13="intro-wolf-13",t.introWolf14="intro-wolf-14",t.endVo2="end-vo-2",t.endVo4="end-vo-4",t.act3Vo1="act-3-vo-1"}(Ut||(Ut={})),function(t){t.lrrhCostume1Hood="costume-1-lrrh",t.lrrhCostumeCowboy="costume-1-cowboy",t.lrrhCostumePirate="costume-1-pirate"}(Wt||(Wt={})),function(t){t.costume2Karate="costume-2-karate",t.costume2Superhero="costume-2-superhero"}(jt||(jt={})),function(t){t.act3Duckie="prop-3-rubberducky",t.act3Teddy="prop-3-teddybear",t.act3Ukulele="prop-3-ukelele"}(qt||(qt={})),function(t){t.lrrhWeather2Clouds="weather-2-clouds",t.lrrhWeather2Sun="weather-2-sun"}(Xt||(Xt={})),function(t){t.tree="prop-2-tree",t.candy="prop-2-candy",t.skyScraper="prop-2-skyscrapers"}(Gt||(Gt={})),function(t){t.basket="intro-wolf-basket",t.toolbox="intro-wolf-toolbox",t.treasureChest="intro-wolf-treasurechest"}(zt||(zt={})),function(t){t.littleRedHoodEntrance="little-red-hood-entrance",t.wolfEntrance="wolf-entrance",t.wolfIntroLine="wolf-intro-line",t.openDoor="open-door",t.lrrhGranmaHouse="lrrh-granma-house"}(Yt||(Yt={}));var $t=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(Jt()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){var t;r()(this,n);for(var e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return t=i.call.apply(i,[this].concat(o)),y()(c()(t),"act1",Ut.intro1),y()(c()(t),"act2",Ut.introAct2),y()(c()(t),"act3",Ut.act3Vo1),t}return a()(n,[{key:"handleChoiceDialog",value:function(t,e,i){switch(t.choiceType){case Ht.introWolf1:return new N(e,this.createIconSelectPopOver([M.b.dumdumdum,M.b.applause,M.b.gasp]),this.diService);case Ht.propWeather:return new b(e,this.createIconSelectPopOver([M.b.cloudy,M.b.sunny]),this.diService);case Ht.action:return new C(e,this.createIconSelectPopOver([M.b.walk,M.b.jump,M.b.dance]),this.diService);case Ht.propForest:var n=this.diService.getDataByKey(A.a.forestProp);return new x(e,this.createPropsSelectPopOver(),n,this.diService);case Ht.basketTypeChoice:return new U(e,this.createPropsSelectPopOver([K.a.basket,K.a.toolbox,K.a.chest]),this.diService);case Ht.whoIsIt:return new Y(e,this.createIconSelectPopOver([M.b.happy,M.b.angry,M.b.silly]),this.diService);case Ht.prop2:return new Q(e,this.createPropsSelectPopOver([K.a.pantry,K.a.wardrobe,K.a.present]),this.diService);case Ht.doorBellChoice:return new ot(e,this.createIconSelectPopOver([M.b.arooga,M.b.dingdong,M.b.honkhonk]),this.diService);case Ht.act3ActionVo1:return new ht(e,this.createIconSelectPopOver([M.b.walk,M.b.jump,M.b.shake]),this.diService);case Ht.grannyCostume:return new pt(e,this.createCostumeSelectPopOver([T.a.karate,T.a.superhero]),this.diService);case Ht.prop3:return new vt(e,this.createPropsSelectPopOver([K.a.rubberDucky,K.a.teddy,K.a.ukulele]),this.diService);default:return this.getSimpleDialog(i,e)}}},{key:"handleCueDialog",value:function(t,e){switch(t.cue){case Yt.lrrhGranmaHouse:return new ct(e,this.diService)}}},{key:"handleCueChoiceDialog",value:function(t,e){switch(t.cue){case Yt.littleRedHoodEntrance:return new F(e,this.createCostumeSelectPopOver(),this.diService)}}},{key:"getSimpleDialog",value:function(t,e){var i=t.name==Ht.lrrhAction2Walking||t.name==Ht.lrrhAction2Jumping||t.name==Ht.lrrhAction2Grooving,n=t.name==Ht.act3Action3Leapfrog||t.name==Ht.act3Action3Run||t.name==Ht.act3Action3Shake,r=t.name==qt.act3Duckie||t.name==qt.act3Teddy||t.name==qt.act3Ukulele;return i?new R.a(e,this.diService):t.name==Ut.weather3Cloud?new j(e,this.diService):t.name==Ut.introAct2?new G(e,this.diService):t.name==Ut.intro5a?new et(e,this.diService):t.name==Ut.wolfGranny1?new nt(e,this.diService):n?new lt.a(e,this.diService):r?new mt(e,this.diService):t.name==Ut.prop5?new wt(e,this.diService):t.name==Ut.intro1?new At.a(e,this.diService):t.name==Ut.intro5b?new J(e,this.diService):t.name==Ut.intro6?new Lt(e,this.diService):t.name==Ut.introWolf8?new It(e,this.diService):t.name==Ut.introWolf13?new Ot(e,this.diService):t.name==Ut.introWolf14?new Bt(e,this.diService):t.name==Ut.question2?new _t(e,this.diService):t.name==Ut.question5?new Ct(e,this.diService):t.name==Ut.question9?new xt(e,this.diService):t.name==Ut.endVo2?new Zt(e,this.diService):t.name==Ut.endVo4?new Nt(e,this.diService):new g.a(e,this.diService)}}]),n}(St.a)},,function(t,e,i){"use strict";i.d(e,"a",(function(){return n})),i.d(e,"b",(function(){return p}));i(216),i(33),i(34);var n,r,o=i(3),a=i.n(o),s=i(2),c=i.n(s),u=i(1),h=i.n(u),l=i(106),f=i(4);!function(t){t[t.ALL=-1]="ALL",t[t.G1=0]="G1",t[t.G2=1]="G2",t[t.DEFAULT=2]="DEFAULT",t[t.C1=3]="C1",t[t.C2=4]="C2",t[t.C3=5]="C3",t[t.COUNT=6]="COUNT"}(n||(n={})),function(t){t[t.vo=1]="vo",t[t.music=.3]="music",t[t.sfx=1]="sfx",t[t.UI=.2]="UI",t[t.muted=0]="muted"}(r||(r={}));var p=function(){function t(e){a()(this,t),this.diService=e,h()(this,"_voVolume",r.vo),h()(this,"_musicVolume",r.music),h()(this,"_sfxVolume",r.sfx),h()(this,"_uiVolume",r.UI),h()(this,"currentSoundChannels",new Array(n.COUNT).fill(null)),h()(this,"currentMusic",null),h()(this,"currentVO",null),h()(this,"instructionVO",null)}return c()(t,[{key:"isPlayingVo",get:function(){return null!=this.currentVO}},{key:"isPromptShowing",get:function(){return this.diService.getDataByKey(f.a.isPromptShowing)}}]),c()(t,[{key:"preloadSFX",value:function(t,e){new l.Howl({src:t,volume:this._sfxVolume,preload:!0,onload:e})}},{key:"playSound",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.DEFAULT,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return this.playSoundAtVolume(t,this._sfxVolume,e,i,r)}},{key:"playUISFX",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.DEFAULT,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return this.playSoundAtVolume(t,this._uiVolume,e,i,r)}},{key:"playSoundAtVolume",value:function(e,i){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n.DEFAULT,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];o==n.ALL&&(o=n.DEFAULT),this.stopSoundChannel(o);var c=new l.Howl({src:[t.soundsPath+e],volume:i,loop:s,autoplay:!0,onstop:function(){c==r.currentSoundChannels[o]&&r.stopSoundChannel(o),a()},onend:function(){c==r.currentSoundChannels[o]&&r.stopSoundChannel(o),a()}});return this.currentSoundChannels[o]=c,c.play(),o}},{key:"playMusic",value:function(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};this.stopMusic();var n=new l.Howl({src:[t.soundsPath+e],volume:this._musicVolume,loop:!0,autoplay:!0,onstop:i});this.currentMusic=n,n.play()}},{key:"fadeMusic",value:function(){this.currentMusic.fade(this._musicVolume,0,.5)}},{key:"playVo",value:function(e){var i=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};if(!e)return console.log("no vo id provided"),void n();this.stopVo(),console.log("play vo: vo volume is ",this._voVolume);var r=new l.Howl({src:[t.vosPath+e],volume:this._voVolume,preload:!0,autoplay:!0,onloaderror:function(t,e){console.log("onloaderror",e)},onend:function(){i.unloadVO(),n()},onstop:function(){i.unloadVO(),n()}});this.currentVO=r,r.play()}},{key:"unloadVO",value:function(){this.currentVO&&(this.currentVO.stop(),this.currentVO.unload(),this.currentVO=null)}},{key:"playInstructionVo",value:function(e){var i=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};if(!e)return console.log("no vo id provided"),void n();this.stopInstructionVo(),console.log("playInstructionVo: vo volume is",this._voVolume);var r=new l.Howl({src:[t.vosPath+e],volume:this._voVolume,autoplay:!0,onend:function(){i.unloadInstruction(),n()},onstop:function(){i.unloadInstruction(),n()}});this.instructionVO=r,r.play()}},{key:"unloadInstruction",value:function(){this.instructionVO&&(this.instructionVO.stop(),this.instructionVO.unload(),this.instructionVO=null)}},{key:"stopAll",value:function(){this.stopSound(),this.stopVo(),this.stopInstructionVo(),this.stopMusic()}},{key:"pauseAll",value:function(){this.stopSound(),this.pauseVo(),this.pauseInstructionVO(),this.pauseSounds(),this.currentMusic&&this.currentMusic.pause()}},{key:"pauseAllInGame",value:function(){this.stopSound(),this.pauseVo(),this.pauseSounds(),this.currentMusic&&this.currentMusic.pause()}},{key:"pauseVo",value:function(){this.currentVO&&this.currentVO.pause()}},{key:"pauseInstructionVO",value:function(){this.instructionVO&&this.instructionVO.pause()}},{key:"resumeAll",value:function(){this.resumeMusic(),this.resumeSounds(),this.isPromptShowing?this.resumeInstructionVO():this.resumeVO()}},{key:"resumeAllInGame",value:function(){this.resumeMusic(),this.resumeSounds(),this.resumeVO()}},{key:"resumeMusic",value:function(){this.currentMusic&&!this.currentMusic.playing()&&this.currentMusic.play()}},{key:"resumeVO",value:function(){this.currentVO&&this.currentVO.play()}},{key:"resumeInstructionVO",value:function(){this.instructionVO&&this.instructionVO.play()}},{key:"stopSound",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.ALL,e=0;e<this.currentSoundChannels.length;e++)t!=n.ALL&&t!=e||this.stopSoundChannel(e)}},{key:"stopSoundChannel",value:function(t){var e=this.currentSoundChannels[t];null!=e&&(e.playing()&&e.stop(),e.unload(),this.currentSoundChannels[t]=null)}},{key:"pauseSounds",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.ALL,e=0;e<this.currentSoundChannels.length;e++)t!=n.ALL&&t!=e||this.pauseSoundChannel(e)}},{key:"pauseSoundChannel",value:function(t){var e=this.currentSoundChannels[t];null!=e&&e.playing()&&e.pause()}},{key:"resumeSounds",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.ALL,e=0;e<this.currentSoundChannels.length;e++)t!=n.ALL&&t!=e||this.resumeSoundChannel(e)}},{key:"resumeSoundChannel",value:function(t){var e=this.currentSoundChannels[t];null!=e&&e.play()}},{key:"stopVo",value:function(){this.currentVO&&(this.currentVO.stop(),this.currentVO.unload(),this.currentVO=null)}},{key:"stopInstructionVo",value:function(){this.instructionVO&&(this.instructionVO.stop(),this.instructionVO.unload(),this.instructionVO=null)}},{key:"stopMusic",value:function(){this.currentMusic&&(this.currentMusic.stop(),this.currentMusic.unload(),this.currentMusic=null)}},{key:"muteVO",value:function(){this._voVolume=r.muted,console.log("muteVO: vo volume is ",this._voVolume),this.currentVO&&this.currentVO.mute(!0),this.instructionVO&&this.instructionVO.mute(!0)}},{key:"muteMusic",value:function(){this._musicVolume=r.muted,this.currentMusic&&this.currentMusic.mute(!0)}},{key:"muteSFX",value:function(){this._sfxVolume=r.muted,this._uiVolume=r.muted,this.currentSoundChannels.forEach((function(t){t&&t.mute(!0)}))}},{key:"unmuteVO",value:function(){this._voVolume=r.vo,console.log("unmuteVO: vo volume is ",this._voVolume),this.currentVO&&(this.currentVO.volume(this._voVolume),this.currentVO.mute(!1)),this.instructionVO&&(this.instructionVO.volume(this._voVolume),this.instructionVO.mute(!1))}},{key:"unmuteMusic",value:function(){this._musicVolume=r.music,this.currentMusic&&(this.currentMusic.mute(!1),this.currentMusic.volume(this._musicVolume))}},{key:"unmuteSFX",value:function(){var t=this;this._sfxVolume=r.sfx,this._uiVolume=r.UI,this.currentSoundChannels.forEach((function(e,i){e&&(e.mute(!1),i==n.G1?e.volume(t._uiVolume):e.volume(t._sfxVolume))}))}},{key:"unlockAudio",value:function(){new l.Howl({src:[t.soundsPath+"sfx-click.mp3"],volume:.01}).play()}}]),t}();h()(p,"soundsPath","./sounds/"),h()(p,"vosPath","./sounds/vos/")},,,,function(t,e,i){"use strict";i.d(e,"b",(function(){return g})),i.d(e,"a",(function(){return y}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(6),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p);function v(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var y,g=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(v()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"init",value:function(){c()(f()(n.prototype),"init",this).call(this),this.reposition()}},{key:"getSkinName",value:function(t){return t.toString()}}]),n}(i(117).a);!function(t){t.trees="trees",t.skyScraper="skyscrapers",t.candy="candycanes",t.basket="basket",t.toolbox="toolbox",t.chest="chest",t.pantry="pantry",t.present="present",t.wardrobe="wardrobe",t.teddy="teddybear",t.rubberDucky="rubberduckie",t.ukulele="ukulele",t.beanstalks="beanstalks",t.flowers="flowers",t.honeybeehives="honeybeehives",t.porridge="bowl-porridge",t.tacos="bowl-taco",t.spaghetti="bowl-spaghetti",t.beanbag="beanbag",t.couch="couch",t.train="trainseat",t.chair="chair",t.hammock="hammock",t.waterbed="waterbed",t.pumpkincarriage="pumpkincarriage",t.pumpkincar="pumpkincar",t.pumpkinrocket="pumpkinrocket",t.backgroundGrandma="background-grandma",t.backgroundBallroom="background-ballroom",t.background3bears="background-3bears"}(y||(y={}))},,,,function(t,e,i){"use strict";i.d(e,"a",(function(){return S}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(6),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(31),w=i(4);function A(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var S=function(t){y()(n,t);var e,i=(e=n,function(){var t,i=d()(e);if(A()){var n=d()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return f()(this,t)});function n(t,e,o,a){var s;return r()(this,n),(s=i.call(this,(function(t,e,i){s.play(t,e,i)}),o)).soundName=t,s.soundChannel=e,s.loop=o,m()(c()(s),"_isPlaying",!1),m()(c()(s),"soundService",void 0),s.soundService=a.get(w.b.SoundService),s}return a()(n,[{key:"reset",value:function(){h()(d()(n.prototype),"reset",this).call(this),this.stop()}},{key:"play",value:function(t,e,i){var n=this;this.stop(),this.soundName?(this._isPlaying=!0,this.soundService.preloadSFX([k.b.soundsPath+this.soundName],(function(){n.soundService.playSound(n.soundName,n.soundChannel,(function(){n._isPlaying=!1,t.finish()}),n.loop)}))):t.finish()}},{key:"stop",value:function(){this.isPlaying()&&(this.soundService.stopSound(this.soundChannel),this._isPlaying=!1)}},{key:"isPlaying",value:function(){return this._isPlaying}}]),n}(framework.BlockingFuncAction)},,function(t,e,i){"use strict";i.d(e,"b",(function(){return l})),i.d(e,"a",(function(){return n}));i(33),i(51),i(34);var n,r,o=i(3),a=i.n(o),s=i(2),c=i.n(s),u=i(1),h=i.n(u),l=function(){function t(e,i){a()(this,t),this.frontSpine=e,this.backSpine=i,h()(this,"spines",void 0),h()(this,"currentAct",void 0),this.spines=[this.frontSpine,this.backSpine],this.reset()}return c()(t,[{key:"name",get:function(){return this.frontSpine.skeleton.skin.attachments[0].background.name}},{key:"front",get:function(){return this.frontSpine}}]),c()(t,[{key:"init",value:function(){this.reset()}},{key:"getShowAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Func((function(){return t.frontSpine.visible=!0})),framework.Actions.Spine(this.frontSpine,r.show)]),framework.Actions.Func((function(){t.frontSpine.state.setAnimation(0,r.idle,!1),t.backSpine.state.setAnimation(0,r.idle,!1),t.backSpine.visible=!0}))])}},{key:"getAnimatedActChangeAction",value:function(t){var e=this;return this.frontSpine.visible=!1,this.saveCurrentSkin(),framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Func((function(){e.frontSpine.skeleton.setSkinByName(t),e.frontSpine.visible=!0})),framework.Actions.Spine(this.frontSpine,r.show)]),framework.Actions.Func((function(){e.frontSpine.state.setAnimation(0,r.idle,!1)})),framework.Actions.Func((function(){e.backSpine.skeleton.setSkinByName(t)}))])}},{key:"setBackdropTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.saveCurrentSkin(),this.spines.forEach((function(i){i.skeleton.setSkinByName(t),i.visible=e}))}},{key:"saveCurrentSkin",value:function(){var t=this.frontSpine.skeleton.skin;t&&(this.currentAct=t.name)}},{key:"deinit",value:function(){this.reset()}},{key:"reset",value:function(){this.setBackdropTo(n.act1)}}]),t}();!function(t){t.act1="act1",t.act2="act2",t.act3="act3",t.act4="act4",t.act5="act5",t.act6="act6"}(n||(n={})),function(t){t.idle="idle",t.show="show"}(r||(r={}))},function(t,e,i){"use strict";i.d(e,"c",(function(){return o})),i.d(e,"d",(function(){return a})),i.d(e,"e",(function(){return s})),i.d(e,"a",(function(){return c})),i.d(e,"b",(function(){return u}));var n=i(39),r=i(31);function o(t,e,i){return framework.Actions.Sequence([framework.Actions.RandomDelay(0,.4),framework.Actions.Spine(t,e,{loop:i})])}function a(t,e,i){return framework.Actions.Sequence([framework.Actions.RandomDelay(0,.3),framework.Actions.Parallel([framework.Actions.Func((function(){t.visible=!0})),framework.Actions.Spine(t,e,{loop:i})])])}function s(t,e,i,n,r,o){return framework.Actions.Sequence([framework.Actions.RandomDelay(0,.3),framework.Actions.Parallel([framework.Actions.Func((function(){t.visible=!0})),framework.Actions.Spine(t,e,{loop:i}),u(r,n,o)])])}function c(t,e,i,n,r,o){return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Func((function(){t.visible=!0})),framework.Actions.Spine(t,e,{loop:i}),u(r,n,o)])])}function u(t,e,i){return framework.Actions.Sequence([framework.Actions.Delay(t),new n.a(e,r.a.G2,!1,i)])}},,,,,,,,,,,,function(t,e,i){"use strict";i.d(e,"a",(function(){return S}));i(38),i(47),i(12),i(14),i(13),i(44),i(45);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(1),y=i.n(v),g=i(116),m=i(5),k=i(85),w=i(11);function A(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var S=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(A()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){var t;return r()(this,n),t=i.call(this),y()(c()(t),"voIDMap",new Map),y()(c()(t),"characterSelectionDialogs",new Map([[m.a.babyBear,new k.a("gl-char-select-baby-bear.mp3","Who should be Baby Bear?")],[m.a.parentBear,new k.a("gl-char-select-parent-bear.mp3","Who should be Baby Bear's Parent?")]])),y()(c()(t),"leadRole",m.a.goldilocks),y()(c()(t),"roleUIMap",new Map([[m.a.goldilocks,w.a.rolegoldielocks],[m.a.parentBear,w.a.roleparentbear],[m.a.babyBear,w.a.rolebabybear],[m.a.narrator,w.a.rolenarrator]])),t.voIDMap.set("sunny","sunny"),t.voIDMap.set("cloudy","cloudy"),t.voIDMap.set("Goldilocks","locks"),t.voIDMap.set("Goldi-rocks","rocks"),t.voIDMap.set("Goldi-fish","fish"),t.voIDMap.set("chairs","chair"),t.voIDMap.set("bean bags","beanbag"),t.voIDMap.set("train","train"),t.voIDMap.set("Porridge","porridge"),t.voIDMap.set("Tacos","tacos"),t.voIDMap.set("Spaghetti","spaghetti"),t.voIDMap.set("papa","papa"),t.voIDMap.set("mama","mama"),t.voIDMap.set("Water Bed","waterbed"),t.voIDMap.set("Couch","couch"),t.voIDMap.set("Hammock","hammock"),t}return a()(n,[{key:"getDefaultVOKeys",value:function(){return["parent","bed","seat"]}}]),n}(g.a);y()(S,"act1ParentBearXPosition",-300),y()(S,"act1GoldilocksOffScreenXPosition",-700),y()(S,"act1GoldilocksWalkToXPosition",-100),y()(S,"act1NextToDoorXPosition",250),y()(S,"act2NarratorXPosition",-450),y()(S,"act2GoldilocksXPosition",-250),y()(S,"act3narratorXPosition",433),y()(S,"act3GoldilocksXPosition",250)},function(t,e,i){"use strict";(function(t){i.d(e,"b",(function(){return D})),i.d(e,"a",(function(){return _}));i(33),i(70),i(12),i(14),i(13),i(34);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(253),w=i(72),A=i(42),S=i(4);function b(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var _,D=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(b()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(t,e){var i;return r()(this,o),(i=n.call(this,t,e)).diService=e,m()(a()(i),"_isBeingDeinit",!1),m()(a()(i),"activebuttons",[]),m()(a()(i),"customShowActionHandle",void 0),i}return h()(o,[{key:"buttons",get:function(){return[]}}]),h()(o,[{key:"init",value:function(){c()(d()(o.prototype),"init",this).call(this),this._isBeingDeinit=!1,this.setShadow()}},{key:"setShadow",value:function(){var e=new t.Point(.05,1);this.buttons.forEach((function(t){var i=new w.a(e,12);t.filters=[i]}))}},{key:"updateShadow",value:function(){var t=this;this.buttons&&!this._isBeingDeinit&&this.buttons.forEach((function(e){if(e){var i=framework.Vector.getGlobalPos(e),n=e.filters.first();if(n){n.uniforms.floorY=i.y;var r=t.diService.getDataByKey(S.a.gameWidth),o=i.x<r/2?1:-1;n.uniforms.factor=o}}}))}},{key:"removeShadows",value:function(){this.buttons.forEach((function(t){t.filters=[]}))}},{key:"customShowAction",value:function(){var t=this;return this.customShowActionHandle=framework.Actions.Sequence([framework.Actions.Func((function(){t.view.alpha=1})),framework.Actions.Parallel(this.buttons.map((function(e,i){return t.activebuttons[i]?Object(A.d)(e,_.show,!1):framework.Actions.Func()}))),framework.Actions.Parallel(this.buttons.map((function(e,i){return t.activebuttons[i]?Object(A.c)(e,_.idle,!0):framework.Actions.Func()})))]),this.customShowActionHandle}},{key:"customHideAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel(this.buttons.map((function(t){return Object(A.c)(t,_.hide,!1)}))),framework.Actions.Func((function(){t.buttons.forEach((function(t){t.visible=!1}))}))])}},{key:"update",value:function(t){this._isBeingDeinit||(c()(d()(o.prototype),"update",this).call(this,t),this.updateShadow())}},{key:"deinit",value:function(){this._isBeingDeinit=!0,this.removeShadows()}}]),o}(k.a);!function(t){t.show="show",t.hide="hide",t.idle="idle"}(_||(_={}))}).call(this,i(23))},,,function(t,e,i){"use strict";i.d(e,"a",(function(){return A}));i(38),i(47),i(12),i(14),i(13),i(44),i(45);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(8),c=i.n(s),u=i(0),h=i.n(u),l=i(9),f=i.n(l),p=i(1),d=i.n(p),v=i(116),y=i(29),g=i(11),m=i(5),k=i(85);function w(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var A=function(t){f()(n,t);var e,i=(e=n,function(){var t,i=h()(e);if(w()){var n=h()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return c()(this,t)});function n(){var t;return r()(this,n),t=i.call(this),d()(a()(t),"voIDMap",new Map),d()(a()(t),"basketChoice",void 0),d()(a()(t),"basketChoiceFrom",(function(t){switch(t){case y.a.basket:return g.a.basket;case y.a.toolbox:return g.a.toolbox;case y.a.treasureChest:return g.a.treasurechest;default:throw"BasketChoice not found for "+t}})),d()(a()(t),"characterSelectionDialogs",new Map([[m.a.wolf,new k.a("lrrh-char-select-wolf.mp3","Who should be the Big Bad Wolf?")],[m.a.grandma,new k.a("lrrh-char-select-granny.mp3","Who should be Granny?")]])),d()(a()(t),"roleUIMap",new Map([[m.a.littleRedHood,g.a.rolellrh],[m.a.wolf,g.a.rolethewolf],[m.a.grandma,g.a.rolegranny],[m.a.narrator,g.a.rolenarrator]])),d()(a()(t),"leadRole",m.a.littleRedHood),t.voIDMap.set("Little Red Riding Hood","lrrh"),t.voIDMap.set("Little Orange Cowboy Hat","cowboy"),t.voIDMap.set("Little Green Pirate Hat","pirate"),t.voIDMap.set("sunny","sunny"),t.voIDMap.set("cloudy","cloudy"),t.voIDMap.set("Closet","Closet"),t.voIDMap.set("Pantry","Pantry"),t.voIDMap.set("Present","Present"),t.voIDMap.set("treats","treats"),t.voIDMap.set("toolbox","toolbox"),t.voIDMap.set("treasurechest","treasurechest"),t.voIDMap.set("walking","walking"),t.voIDMap.set("jumping","jumping"),t.voIDMap.set("grooving","grooving"),t}return n}(v.a);d()(A,"act1WolfXPosition",103),d()(A,"act1WolfBasketXPosition",-40),d()(A,"act2WolfXPosition",200),d()(A,"act2NarratorXPosition",375),d()(A,"act2GranmaXPosition",-10),d()(A,"act2LrrhXPosition",-200),d()(A,"act2WolfXScale",1),d()(A,"act2NarratorXScale",1),d()(A,"act2LrrhXScale",-1)},,,function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return s}));var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=function(){function e(){r()(this,e)}return a()(e,null,[{key:"applyBaseConfigToView",value:function(e,i){if(i.name=e.name,i.position=new t.Point(e.position.x,e.position.y),i.rotation=e.rotation,i.scale=new t.Point(e.scale.x,e.scale.y),i.pivot=new t.Point(e.pivot.x,e.pivot.y),i.alpha=e.alpha,i.interactive=e.isInteractive,i.visible=e.isVisible,i.zIndex=e.zIndex,i.predicate=e.predicate,e.mask){var n=app.createView(e.mask,null);n&&(i.addChild(n),i.mask=n)}i.viewConfig=e}}]),e}()}).call(this,i(23))},,,,,function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return x}));i(33),i(12),i(14),i(13),i(34);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(29),w=i(17),A=i(84),S=i(39),b=i(31),_=i(11),D=i(21),C=i(72);function P(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var x=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(P()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(t,e,i,s){var c;return r()(this,o),(c=n.call(this,t,s)).container=i,m()(a()(c),"_defaultAction",void 0),m()(a()(c),"_defaultLoopAction",void 0),m()(a()(c),"_reactionAction",void 0),m()(a()(c),"_reactionLoopAction",void 0),m()(a()(c),"_costume",_.a.none),c._spine=Object(w.c)(c.container,"body"),c._slots=c._spine.spineData.slots,c._role=e,c.setSkinByName(t),c.removeCostume(),c.setShadow(),c}return h()(o,[{key:"defaultAction",get:function(){return this._defaultAction}},{key:"reactionAction",get:function(){return this._reactionAction}},{key:"x",set:function(t){this.container.x=t},get:function(){return this.container.x}},{key:"y",set:function(t){this.container.y=t},get:function(){return this.container.y}},{key:"position",get:function(){return this.container.position},set:function(t){this.container.x=t.x,this.container.y=t.y}}],[{key:"getCostume",value:function(t){switch(t){case"little-red-riding-hood":return _.a.littleRedHood;case"wolf":return _.a.wolf;case"cowboy":return _.a.cowboy;case"pirate":return _.a.pirate;case"narrator":return _.a.narrator;case"grandma":return _.a.grandma;case"none":return _.a.none;default:throw"not found "+t}}},{key:"costumeFromName",value:function(t){switch(t){case"Little Red Riding Hood":return _.a.littleRedHood;case"Little Orange Cowboy Hat":return _.a.cowboy;case"Little Green Pirate Hat":return _.a.pirate;case"Goldilocks":return _.a.goldilocks;case"Goldi-rocks":return _.a.goldirocks;case"Goldi-fish":return _.a.goldifish;case"Cinder-diva":return _.a.moviestar;case"Cinder-naut":return _.a.astronaut;case"Charming":return _.a.princecharming;case"Bot":return _.a.princebot;case"Megastar":return _.a.princemegastar;case"Boots":return _.a.spaceboots;case"Sneakers":return _.a.sneakers;case"Slippers":return _.a.glassslippers;case"Inventor":return _.a.inventor;case"Godmother":return _.a.fairygodmother;case"mama":return _.a.mummabear;case"papa":return _.a.puppabear;default:throw"not found "+t}}}]),h()(o,[{key:"hide",value:function(){c()(d()(o.prototype),"hide",this).call(this),this.container.visible=!1}},{key:"show",value:function(){c()(d()(o.prototype),"show",this).call(this),this.container.visible=!0}},{key:"playAnim",value:function(t){this._spine.state.setAnimation(0,t,!0)}},{key:"playWalkOn",value:function(){this._spine.state.setAnimation(0,D.a.walkOn,!1)}},{key:"playWalk",value:function(){this._spine.state.setAnimation(0,D.a.walk,!0)}},{key:"playRun",value:function(){this._spine.state.setAnimation(0,D.a.run,!0)}},{key:"playHideDown",value:function(){this._spine.state.setAnimation(0,D.a.hideDown,!1)}},{key:"playHideDownRight",value:function(){this._spine.state.setAnimation(0,D.a.hideRight,!1)}},{key:"getWalkOnAction",value:function(){return framework.Actions.Spine(this._spine,D.a.walkOn)}},{key:"getLeapFrogAction",value:function(){return framework.Actions.Spine(this._spine,D.a.leapfrog)}},{key:"getShakeAction",value:function(){return framework.Actions.Spine(this._spine,D.a.shake)}},{key:"getCelebrateAction",value:function(){return framework.Actions.Spine(this._spine,D.a.celebrate)}},{key:"getWalkToPositionAction",value:function(e){var i=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.y,r=arguments.length>2?arguments[2]:void 0,o=new t.Point(e,n);return framework.Actions.Sequence([this.getCharacterMoveActionToPoint(o,(function(){return i.playWalk()}),r),framework.Actions.Func((function(){return i.playIdle()}))])}},{key:"setDefaultAction",value:function(t){}},{key:"setReactionAction",value:function(t){var e={};e[k.b.act3Action2Run]=D.a.run,e[k.b.act3Action2Leapfrog]=D.a.jump,e[k.b.act3Action2Shake]=D.a.shake;var i={};i[k.b.act3Action2Run]=!0,i[k.b.act3Action2Leapfrog]=!0,i[k.b.act3Action2Shake]=!0,this._reactionAction=e[t],this._reactionLoopAction=i[t]}},{key:"playDefaultAction",value:function(){this._spine.state.setAnimation(0,this._defaultAction,this._defaultLoopAction)}},{key:"getDefaultAction",value:function(){return framework.Actions.Spine(this._spine,this._defaultAction)}},{key:"playReactionAction",value:function(){this._spine.state.setAnimation(0,this._reactionAction,this._reactionLoopAction)}},{key:"getCharacterMoveAction",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,n=A.Easing.Linear.None,r=framework.Vector.transformTo(t,this.container.parent);return framework.Actions.Parallel([framework.Actions.Func(e),framework.Actions.Tween(this.position,{to:{x:r.x,y:r.y},duration:i,easing:n,endOnCancel:!0})])}},{key:"getCharacterMoveActionToPoint",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,n=A.Easing.Linear.None;return framework.Actions.Parallel([framework.Actions.Func(e),framework.Actions.Tween(this.position,{to:{x:t.x,y:t.y},duration:i,easing:n,endOnCancel:!0})])}},{key:"attachCostumePart",value:function(t,e){var i=t+"-"+this.characterType,n=e||t;this.setAttachment(i,n)}},{key:"setAttachment",value:function(t,e){try{this._spine.skeleton.setAttachment(t,e)}catch(t){console.warn(t)}}},{key:"removeAttachment",value:function(t){var e=t+"-"+this.characterType;try{this._spine.skeleton.setAttachment(e,null)}catch(t){console.warn(t)}}},{key:"addCostume",value:function(t){var e=this;_.c.get(t).forEach((function(t){e.attachCostumePart(t)}))}},{key:"getAddCostumeAction",value:function(t){var e=this,i=framework.Actions.Func((function(){return e.addCostume(t)}));return this.createHideAndRiseAction(i)}},{key:"getCostumeAction",value:function(t){var e=this,i=framework.Actions.Func((function(){e.setCostume(t)}));return this.createHideAndRiseAction(i)}},{key:"setCostume",value:function(t){var e=this;this.removeCostume(),this._costume=t,_.c.get(this._costume).forEach((function(t){e.attachCostumePart(t)}))}},{key:"createHideAndRiseAction",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:b.a.G2;return framework.Actions.Sequence([framework.Actions.Parallel([this.getHideAction(),new S.a(o.hideSFX,i,!1,this.diService)]),t,framework.Actions.Parallel([this.getShowAndRiseUpAction(),new S.a(o.hideSFX,i,!1,this.diService)]),framework.Actions.Func((function(){return e.playIdle()}))])}},{key:"setDirection",value:function(t){this.container.scale.x=t}},{key:"flipXAxis",value:function(){this.container.scale.x=-this.container.scale.x}},{key:"getFadeInAction",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.6;return framework.Actions.Tween(this.container,{from:{alpha:0},to:{alpha:t},duration:1})}},{key:"getFadeOutAction",value:function(){return framework.Actions.Tween(this.container,{to:{alpha:0},duration:1})}},{key:"setShadow",value:function(){var e=new C.a(new t.Point(.02,1));this._spine.filters=[e]}},{key:"updateShadowPosition",value:function(){var e=this._spine.filters?this._spine.filters[0]:null;if(e){e.uniforms.floorY=this.container.toGlobal(new t.Point(0,0)).y;var i=this.x<0?-1:1;e.uniforms.factor=i}}},{key:"direction",get:function(){return this.container.scale.x}}]),o}(D.e);m()(x,"hideSFX","character-off.mp3"),m()(x,"showSFX","character-off.mp3")}).call(this,i(23))},,,,,function(t,e,i){"use strict";i.d(e,"a",(function(){return b}));i(33),i(12),i(14),i(13),i(34);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(160),w=i(31),A=i(4);function S(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var b=function(t){y()(n,t);var e,i=(e=n,function(){var t,i=d()(e);if(S()){var n=d()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return f()(this,t)});function n(t,e){var o;return r()(this,n),o=i.call(this,t),m()(a()(o),"interactables",[]),m()(a()(o),"navigationService",void 0),m()(a()(o),"soundService",void 0),m()(a()(o),"diService",void 0),m()(a()(o),"squakPadButton",void 0),m()(a()(o),"manualSpines",[]),m()(a()(o),"zSortObj",void 0),m()(a()(o),"_name","sceneMediator"),o.diService=e,o.zSortObj=o.view.getChildByName("Zsorting"),o.initialiseServices(),o}return h()(n,[{key:"name",set:function(t){this._name=t}}]),h()(n,[{key:"initialiseServices",value:function(){this.navigationService=this.diService.get(A.b.NavigationService),this.soundService=this.diService.get(A.b.SoundService)}},{key:"init",value:function(){this.soundService.stopSound(w.a.ALL)}},{key:"update",value:function(t){c()(d()(n.prototype),"update",this).call(this,t),this.zSortObj&&this.zSortObj.refreshOrder(),this.manualSpines.forEach((function(e){return e.update(t)}))}},{key:"setButtonPressedListener",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.setButtonPressedListenerNoHover(t,e,i),this.setUniversalHoverSFX(t)}},{key:"setButtonPressedListenerNoHover",value:function(t,e){var i=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=new framework.ClickScript({view:t,stopPropagation:r,clickStartCallback:function(t,e){i.deactivateOtherButtons(e)},clickEndCallback:function(){i.activateAllButtons(),i.soundService.playUISFX(i.getClickSFX(),w.a.G1),e()},clickEndOutsideCallback:this.activateAllButtons.bind(this)});t[n.PressedListenerKey]=o,this.scripts.addScript(o)}},{key:"setButtonPressedListenerNoHoverNoSound",value:function(t,e){var i=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=new framework.ClickScript({view:t,stopPropagation:r,clickStartCallback:function(t,e){i.deactivateOtherButtons(e)},clickEndCallback:function(){i.activateAllButtons(),e()},clickEndOutsideCallback:this.activateAllButtons.bind(this)});t[n.PressedListenerKey]=o,this.scripts.addScript(o)}},{key:"setUniversalHoverSFX",value:function(t){var e=this,i=new framework.HoverScript({view:t,stopPropagation:!1,hoverStartCallback:function(t,i){e.soundService.playUISFX(e.getHoverSFX(),w.a.G1)}});t[n.hoverSFXscriptKey]=i,this.scripts.addScript(i)}},{key:"getHoverSFX",value:function(){return"sfx-hover.mp3"}},{key:"getClickSFX",value:function(){return"sfx-click.mp3"}},{key:"removeButtonPressedListener",value:function(t){var e=t[n.PressedListenerKey];e&&(e.isActive=!1,this.scripts.removeScript(e)),this.removeUniversalHoverSFX(t)}},{key:"removeUniversalHoverSFX",value:function(t){var e=t[n.hoverSFXscriptKey];e&&(e.isActive=!1)}},{key:"deactivateOtherButtons",value:function(t){this.setClickable(t,!1)}},{key:"activateAllButtons",value:function(){this.setClickable(null,!0)}},{key:"deactivateAllButtons",value:function(){this.setClickable(null,!1)}},{key:"setClickable",value:function(t,e){this.scripts&&this.scripts.scripts.forEach((function(i){i instanceof framework.ClickScript&&(i.view!=t&&(i.isClickable=e))}))}},{key:"setButtonHoverListener",value:function(t,e,i){var r=new framework.HoverScript({view:t,stopPropagation:!1,hoverStartCallback:function(t,i){e()},hoverEndCallback:function(){i()}});t[n.HoverListenerKey]=r,this.scripts.addScript(r),this.setUniversalHoverSFX(t)}},{key:"removeButtonHoverListener",value:function(t){var e=t[n.HoverListenerKey];e&&(e.isActive=!1,this.scripts.removeScript(e)),this.removeUniversalHoverSFX(t)}},{key:"deinit",value:function(){this.soundService.stopVo()}},{key:"addChildAsPopUp",value:function(t){var e=framework.ContainerView.getChildByNameRecursive(this.view,"Main Camera");if(e){var i=this.view.getChildIndex(e);this.addChildAt(t,this.view,this.children.length,i)}}}]),n}(k.a);m()(b,"PressedListenerKey","setButtonPressedListener"),m()(b,"HoverListenerKey","setButtonHoverListener"),m()(b,"hoverSFXscriptKey","hoverSFXscriptKey")},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return f}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(8),a=i.n(o),s=i(0),c=i.n(s),u=i(9),h=i.n(u);function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var f=function(e){h()(o,e);var i,n=(i=o,function(){var t,e=c()(i);if(l()){var n=c()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return a()(this,t)});function o(){var e,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new t.Point(.1,1),a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-15;return r()(this,o),(e=n.call(this,p,d)).uniforms.shadowDirection=[i.x,i.y],e.uniforms.floorY=0,e.padding=100,e.uniforms.alpha=.5,e.uniforms.xOffset=a,e}return o}(t.Filter),p="\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void) {\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}\n",d="\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\nuniform vec2 shadowDirection;\nuniform float floorY;\nuniform float factor;\nuniform float alpha;\nuniform float xOffset;\n\nvoid main(void) {\n    //1. get the screen coordinate\n    vec2 screenCoord = vTextureCoord * inputSize.xy + outputFrame.xy;\n    //2. calculate Y shift of our dimension vector\n    vec2 shadow;\n    //shadow coordinate system is a bit skewed, but it has to be the same for screenCoord.y = floorY\n    float paramY = (screenCoord.y - floorY) / shadowDirection.y;\n    shadow.y =  paramY + floorY;\n\n    //to offset the shadow\n    shadow.x = (xOffset * factor) + screenCoord.x + paramY * shadowDirection.x * factor;\n    vec2 bodyFilterCoord = (shadow - outputFrame.xy) * inputSize.zw; // same as / inputSize.xy\n\n    vec4 originalColor = texture2D(uSampler, vTextureCoord);\n    vec4 shadowColor = texture2D(uSampler, bodyFilterCoord);\n    shadowColor.rgb = vec3(0.0);\n    shadowColor.a *= alpha;\n\n    // normal blend mode coefficients (1, 1-src_alpha)\n    // shadow is destination (backdrop), original is source\n    gl_FragColor = originalColor + shadowColor * (1.0 - originalColor.a);\n}\n"}).call(this,i(23))},,,,function(t,e,i){"use strict";i.d(e,"b",(function(){return P})),i.d(e,"a",(function(){return C}));i(57),i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(6),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(71),w=i(17),A=i(86),S=i(252),b=i(4),_=function(){function t(e){r()(this,t),this.script=e}return a()(t,[{key:"passages",get:function(){return this.script.passages}}]),t}();function D(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var C,P=function(t){y()(n,t);var e,i=(e=n,function(){var t,i=d()(e);if(D()){var n=d()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return f()(this,t)});function n(){var t;r()(this,n);for(var e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return t=i.call.apply(i,[this].concat(o)),m()(c()(t),"popover",void 0),m()(c()(t),"blockingAction",void 0),m()(c()(t),"story",void 0),t}return a()(n,[{key:"init",value:function(){h()(d()(n.prototype),"init",this).call(this);var t=this.diService.get(b.b.BuildInfoService);this.story=t.storyFlavor,this.soundService.unlockAudio(),this.createSplashScreen(),this.showUI()}},{key:"createSplashScreen",value:function(){var t=Object(w.c)(this.view,"ui-panel");t.alpha=0,this.popover=new S.a(t,this.diService,this)}},{key:"showUI",value:function(){var t=this;this.popover.init(),this.addChildMediatorOnly(this.popover),this.popover.show((function(){return t.setButtonPressedListener(t.popover.playButton,(function(){return t.onStartPressed()}))}))}},{key:"onStartPressed",value:function(){var t=this;this.removeButtonPressedListener(this.popover.playButton),this.runAction(framework.Actions.Parallel([this.popover.getHideStartButton(),framework.Actions.Sequence([framework.Actions.Delay(1.5),framework.Actions.Func((function(){return t.retreiveScript()}))])]))}},{key:"retreiveScript",value:function(){var t=this,e="assets/config/"+this.getStoryTwineFileName(),i=this.diService.get(b.b.LoadingService),n=i.loader.resources.script;if(n){var r=new _(n.data);this.diService.setDataWithKey(b.a.storyScript,r),this.load()}else i.loadAdditionalAsset(this.navigationService.currentSceneName,"script",e,(function(e){var i=new _(e);t.diService.setDataWithKey(b.a.storyScript,i),t.load()}))}},{key:"load",value:function(){var t=this,e=this.getSceneName(this.story),i=framework.Actions.Sequence([this.popover.getHideProgressAction(),framework.Actions.Func((function(){return t.popover.hide((function(){t.removeChildMediatorOnly(t.popover)}))}))]);this.runAction(framework.Actions.Parallel([this.popover.getShowLoadingAction(),framework.Actions.Sequence([framework.Actions.Delay(3),framework.Actions.Func((function(){t.blockingAction=t.navigationService.fadeInScene(e,i,(function(e){t.popover.setProgress(e/100)}))}))])]))}},{key:"getSceneName",value:function(t){switch(t){case C.lrrh:return A.a.LrrhStage;case C.goldilocks:return A.a.Goldilocks;case C.cinderella:return A.a.Cinderella}}},{key:"getStoryTwineFileName",value:function(){switch(this.story){case C.lrrh:return"lrrh-twine.json";case C.goldilocks:return"gl-twine.json";case C.cinderella:return"cinder-twine.json"}}},{key:"onLoadingAnimComplete",value:function(){this.blockingAction.finish()}},{key:"destroy",value:function(){this.popover.deinit(),this.popover.destroy(),h()(d()(n.prototype),"destroy",this).call(this)}}]),n}(k.a);!function(t){t.goldilocks="story-goldilocks",t.cinderella="story-cinderella",t.lrrh="story-lrrh"}(C||(C={}))},,,,,,,,,function(t,e,i){"use strict";(function(t){i.d(e,"b",(function(){return _})),i.d(e,"a",(function(){return D}));i(108),i(33),i(212),i(38),i(70),i(179),i(47),i(12),i(14),i(13),i(44),i(34),i(45);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(2),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(1),y=i.n(v),g=i(5),m=i(55),k=i(17),w=i(21),A=i(4),S=i(72);function b(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var _=function(e){d()(o,e);var i,n=(i=o,function(){var t,e=f()(i);if(b()){var n=f()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return h()(this,t)});function o(e,i,s){var c;return r()(this,o),(c=n.call(this,e,i)).delegate=s,y()(a()(c),"_buttonArthur",null),y()(a()(c),"_buttonBuster",null),y()(a()(c),"_buttonMuffy",null),y()(a()(c),"_buttonDW",null),y()(a()(c),"_Arthur",null),y()(a()(c),"_Buster",null),y()(a()(c),"_Muffy",null),y()(a()(c),"_DW",null),y()(a()(c),"characterMap",null),y()(a()(c),"backgroundAlpha",0),y()(a()(c),"_roleUI",null),y()(a()(c),"positionRoleUI",void 0),y()(a()(c),"scaleRoleUI",void 0),y()(a()(c),"indexSelectedLines",[0,1,2]),y()(a()(c),"intro",[new D("char-select-intro.mp3","Welcome to Arthur's Puppet Theater, where YOU choose what happens.")]),y()(a()(c),"lead",[new D("char-select-lead.mp3","First, choose who's playing each part. Who do you want to play the lead role?")]),y()(a()(c),"outro",[new D("char-select-end.mp3","And now, on with the show!")]),y()(a()(c),"narratorDialog",new Map([[w.c.arthur,new D("char-select-arthur-narrator.mp3","And that means I am the narrator.")],[w.c.buster,new D("char-select-buster-narrator.mp3","And that means Buster is the narrator.")],[w.c.muffy,new D("char-select-muffy-narrator.mp3","And that means Muffy is the narrator.")],[w.c.dw,new D("char-select-dw-narrator.mp3","And that means D.W. is the narrator.")]])),y()(a()(c),"leadDialog",new Map([[w.c.arthur,new D("char-select-arthur-selected.mp3","Hey, thanks!")],[w.c.buster,new D("char-select-buster-selected-lead.mp3","Whoo-hoo!")],[w.c.muffy,new D("char-select-muffy-selected-lead.mp3","Naturally!")],[w.c.dw,new D("char-select-dw-selected-lead.mp3","I'm ready for this!")]])),y()(a()(c),"selectedLines",new Map([[w.c.arthur,[new D("char-select-arthur-selected.mp3","Hey, thanks!")]],[w.c.buster,[new D("char-select-buster-selected-1.mp3","Yes!"),new D("char-select-buster-selected-2.mp3","Cool!"),new D("char-select-buster-selected-3.mp3","All right!")]],[w.c.muffy,[new D("char-select-muffy-selected-1.mp3","Yes!"),new D("char-select-muffy-selected-2.mp3","Cool!"),new D("char-select-muffy-selected-3.mp3","All right!")]],[w.c.dw,[new D("char-select-dw-selected-1.mp3","Yes!"),new D("char-select-dw-selected-2.mp3","Cool!"),new D("char-select-dw-selected-3.mp3","All right!")]]])),y()(a()(c),"resultMap",new Map),y()(a()(c),"charactersTypes",[w.c.arthur,w.c.buster,w.c.muffy,w.c.dw]),c._buttonArthur=Object(k.c)(c.view,"arthur"),c._buttonBuster=Object(k.c)(c.view,"buster"),c._buttonMuffy=Object(k.c)(c.view,"muffy"),c._buttonDW=Object(k.c)(c.view,"dw"),Object(k.c)(c.view,"container").visible=!0,c._Arthur=new w.e(w.c.arthur,c.diService),c._Arthur.spine=c._buttonArthur,c._Buster=new w.e(w.c.buster,c.diService),c._Buster.spine=c._buttonBuster,c._Muffy=new w.e(w.c.muffy,c.diService),c._Muffy.spine=c._buttonMuffy,c._DW=new w.e(w.c.dw,c.diService),c._DW.spine=c._buttonDW,c.characterMap=new Map([[w.c.arthur,c._Arthur],[w.c.buster,c._Buster],[w.c.muffy,c._Muffy],[w.c.dw,c._DW]]),c.characterMap.forEach((function(t){t.hide(),t.removeCostume()})),c._roleUI=Object(k.c)(c.view,"role"),c._roleUI.visible=!1,c.positionRoleUI=new t.Point(c._roleUI.x,c._roleUI.y),c.scaleRoleUI=new t.Point(c._roleUI.scale.x,c._roleUI.scale.y),c.activebuttons=[!0,!0,!0,!0],c.scripts.addScripts([c._Arthur,c._Buster,c._Muffy,c._DW]),window.playDialogs=c.playDialogs.bind(a()(c)),c}return c()(o,[{key:"buttons",get:function(){return[this._buttonArthur,this._buttonBuster,this._buttonMuffy,this._buttonDW]}},{key:"storyData",get:function(){return this.diService.getDataByKey(A.a.StoryData)}},{key:"leadRole",get:function(){return this.storyData.leadRole}},{key:"selectionDialog",get:function(){return this.storyData.characterSelectionDialogs}},{key:"uiRoleSelection",get:function(){return this.storyData.roleUIMap}},{key:"captionService",get:function(){return this.diService.get(A.b.CaptionService)}},{key:"analyticsService",get:function(){return this.diService.get(A.b.AnalyticsService)}}]),c()(o,[{key:"setShadow",value:function(){var e=new t.Point(.02,1),i=new S.a(e,12);i.uniforms.factor=-1,this._roleUI.filters=[i]}},{key:"updateShadow",value:function(){}},{key:"removeShadows",value:function(){this._roleUI.filters=[]}},{key:"playDialogs",value:function(){var t=this;this.indexSelectedLines=[0,1,2];var e=[];this.addIntroActions(e),this.addLeadActions(e),this.addCharacterSelectionActions(e),e.push(framework.Actions.Func((function(){return t.endDialog()}))),this.runAction(framework.Actions.Sequence(e))}},{key:"addIntroActions",value:function(t){var e=this;this.intro.forEach((function(i){t.push(e.getVOCaptionAction(i))}))}},{key:"getVOCaptionAction",value:function(t){var e=this;return framework.Actions.Sequence([framework.Actions.Func((function(){return e.captionService.displayCaption(t.text)})),framework.Actions.Delay(.3),framework.Actions.VO(t.vo),framework.Actions.Func((function(){return e.captionService.clearCaptions()}))])}},{key:"addLeadActions",value:function(t){var e=this;this.lead.forEach((function(i){t.push(e.getVOCaptionAction(i)),t.push(e.getShowRoleSelectionUIAction(e.leadRole));var n=framework.Actions.BlockingFunc((function(){}));t.push(framework.Actions.Func((function(){e.setListenerForLead(n)}))),t.push(n)}))}},{key:"addCharacterSelectionActions",value:function(t){var e=this;this.selectionDialog.forEach((function(i,n){t.push(e.getShowRoleSelectionUIAction(n)),t.push(e.getVOCaptionAction(i));var r=framework.Actions.BlockingFunc((function(){}));t.push(framework.Actions.Func((function(){e.setListenerForRole(n,r)}))),t.push(r)}))}},{key:"setListenerForRole",value:function(t,e){var i=this;this.setButtonPressedListener(this._buttonArthur,(function(){return i.onCharacterSelected(i._Arthur,w.c.arthur,t,e)})),this.setButtonPressedListener(this._buttonBuster,(function(){return i.onCharacterSelected(i._Buster,w.c.buster,t,e)})),this.setButtonPressedListener(this._buttonMuffy,(function(){return i.onCharacterSelected(i._Muffy,w.c.muffy,t,e)})),this.setButtonPressedListener(this._buttonDW,(function(){return i.onCharacterSelected(i._DW,w.c.dw,t,e)}))}},{key:"setListenerForLead",value:function(t){var e=this;this.setButtonPressedListener(this._buttonArthur,(function(){return e.onCharacterSelectedForLead(e._Arthur,w.c.arthur,t)})),this.setButtonPressedListener(this._buttonBuster,(function(){return e.onCharacterSelectedForLead(e._Buster,w.c.buster,t)})),this.setButtonPressedListener(this._buttonMuffy,(function(){return e.onCharacterSelectedForLead(e._Muffy,w.c.muffy,t)})),this.setButtonPressedListener(this._buttonDW,(function(){return e.onCharacterSelectedForLead(e._DW,w.c.dw,t)}))}},{key:"removeListeners",value:function(){var t=this;this.buttons.forEach((function(e){return t.removeButtonPressedListener(e)}))}},{key:"onCharacterSelected",value:function(t,e,i,n){this.removeListeners(),this.saveRoleForType(i,e),this.runAction(this.getCharacterSelectedAction(t,this.getCharacterSelectionDialog(e),n))}},{key:"saveRoleForType",value:function(t,e){this.resultMap.set(t,e),this.analyticsService.sendEventCharacterSelect(e,t)}},{key:"getCharacterSelectionDialog",value:function(t){var e=this.selectedLines.get(t),i=this.indexSelectedLines.randomIndex();return e.length>this.indexSelectedLines[i]?e[this.indexSelectedLines.splice(i,1).first()]:e.first()}},{key:"onCharacterSelectedForLead",value:function(t,e,i){this.removeListeners(),this.saveRoleForType(this.leadRole,e),this.runAction(this.getCharacterSelectedAction(t,this.leadDialog.get(e),i))}},{key:"getCharacterSelectedAction",value:function(t,e,i){return framework.Actions.Sequence([this.getCharacterTalkingAction(t,e),this.getHideRoleSelectionUIAction(t),t.getSelectAction(),framework.Actions.Func((function(){return t.hide()})),framework.Actions.Func((function(){return i.finish()}))])}},{key:"getCharacterTalkingAction",value:function(t,e){var i=this;return framework.Actions.Sequence([framework.Actions.Func((function(){return i.captionService.displayCaption(e.text)})),framework.Actions.Parallel([framework.Actions.VO(e.vo),framework.Actions.Func((function(){return t.playTalk()}))]),framework.Actions.Func((function(){return i.captionService.clearCaptions()})),framework.Actions.Func((function(){return t.playIdle()}))])}},{key:"getShowRoleSelectionUIAction",value:function(e){var i=this;return framework.Actions.Parallel([framework.Actions.Func((function(){i.setSkinForUI(e),i._roleUI.scale=new t.Point(i.scaleRoleUI.x,i.scaleRoleUI.y),i._roleUI.position=new t.Point(i.positionRoleUI.x,i.positionRoleUI.y),i._roleUI.visible=!0})),framework.Actions.Func((function(){return i._roleUI.state.setAnimation(0,"show",!1)}))])}},{key:"setSkinForUI",value:function(t){this._roleUI.skeleton.setSkinByName(this.uiRoleSelection.get(t))}},{key:"getHideRoleSelectionUIAction",value:function(t){var e=this,i=framework.Vector.transformTo(t.spine,t.spine.parent.parent);return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Tween(this._roleUI,{to:{x:i.x,y:i.y},duration:.5}),framework.Actions.Tween(this._roleUI.scale,{to:{x:0,y:0},duration:.5})]),framework.Actions.Func((function(){return e._roleUI.visible=!1}))])}},{key:"endDialog",value:function(){var t=this,e=[];this.addNarratorActions(e),this.addOutroActions(e),e.push(framework.Actions.Func((function(){t.resetUI(),t.delegate.onTerminated(t.resultMap)}))),this.runAction(framework.Actions.Sequence(e))}},{key:"addNarratorActions",value:function(t){var e=this;t.push(framework.Actions.Parallel(this.charactersTypes.filter((function(t){if(!Array.from(e.resultMap.values()).contains(t))return t})).map((function(t){return e.saveRoleForType(g.a.narrator,t),framework.Actions.Sequence([e.getVOCaptionAction(e.narratorDialog.get(t)),e.getShowRoleSelectionUIAction(g.a.narrator),framework.Actions.Sequence([e.getCharacterTalkingAction(e.characterMap.get(t),e.getCharacterSelectionDialog(t)),e.getHideRoleSelectionUIAction(e.characterMap.get(t)),e.characterMap.get(t).getSelectAction(),framework.Actions.Func((function(){return e.characterMap.get(t).hide()}))])])}))))}},{key:"addOutroActions",value:function(t){var e=this;this.outro.forEach((function(i){t.push(e.getVOCaptionAction(i))}))}},{key:"customShowAction",value:function(){var t=this;return this.customShowActionHandle=framework.Actions.Sequence([framework.Actions.Func((function(){t.view.alpha=1,t.soundService.playMusic("char-select-music.mp3")})),framework.Actions.Parallel(Array.from(this.characterMap.values()).map((function(t){return framework.Actions.Sequence([framework.Actions.RandomDelay(0,1),t.getShowAndRiseUpAction()])})))]),this.customShowActionHandle}},{key:"customHideAction",value:function(){var t=this,e=Array.from(this.characterMap.values()).map((function(t){return framework.Actions.Sequence([framework.Actions.RandomDelay(0,.3),t.getHideAction()])}));return e.push(framework.Actions.Func((function(){return t.soundService.fadeMusic()}))),framework.Actions.Parallel(e)}},{key:"resetUI",value:function(){this._roleUI.visible=!1,this._roleUI.scale=new t.Point(this.scaleRoleUI.x,this.scaleRoleUI.y),this._roleUI.position=new t.Point(this.positionRoleUI.x,this.positionRoleUI.y),this.scripts.removeScripts([this._Arthur,this._Buster,this._Muffy,this._DW])}}]),o}(m.b),D=function t(e,i){r()(this,t),this.vo=e,this.text=i}}).call(this,i(23))},function(t,e,i){"use strict";var n;i.d(e,"a",(function(){return n})),function(t){t.Splash="splash",t.LrrhStage="lrrh-stage",t.Goldilocks="gl-stage",t.Cinderella="cinder-stage"}(n||(n={}))},,function(t,e,i){"use strict";i.d(e,"a",(function(){return d}));i(175),i(12),i(14),i(13),i(80);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(8),c=i.n(s),u=i(0),h=i.n(u),l=i(9),f=i.n(l);function p(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var d=function(t){f()(n,t);var e,i=(e=n,function(){var t,i=h()(e);if(p()){var n=h()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return c()(this,t)});function n(t,e,o){var a;return r()(this,n),(a=i.call(this,t,e,o)).selectPopover=e,a}return a()(n,[{key:"setButtonListener",value:function(t,e){var i=this,n=Object.keys(this.dialog.sfxChoices)[e];n&&this.interactionHandler.setButtonPressedListener(t,(function(){return i.onChoice(n)})),this.selectPopover.activebuttons[e]=!!n}},{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||(this.dialog.targetRole?this.selectPopover.view.x=this.characters.get(this.dialog.targetRole).spine.x:this.selectPopover.view.x=0,this.selectPopover.show())}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.selectPopover.hide((function(){return e.didTerminate(e.dialog.getLink(0).link)}))}}]),n}(i(26).a)},,,,,,,,,,,,,,,,,function(t,e,i){"use strict";(function(t){i.d(e,"b",(function(){return p})),i.d(e,"a",(function(){return n}));var n,r=i(3),o=i.n(r),a=i(2),s=i.n(a),c=i(1),u=i.n(c),h=i(4),l=i(17),f=i(84),p=function(){function e(t,i,n){o()(this,e),u()(this,"width",void 0),u()(this,"height",void 0),u()(this,"_view",void 0),u()(this,"rootView",void 0),u()(this,"center",void 0),u()(this,"scale",void 0),this.width=n.getDataByKey(h.a.gameWidth),this.height=n.getDataByKey(h.a.gameHeight),this.rootView=i}return s()(e,[{key:"view",get:function(){return this._view}}]),s()(e,[{key:"init",value:function(){this._view=Object(l.c)(this.rootView,"Canvas"),this.center=new t.Point(0,0),this._view.position.copyTo(this.center),this.scale=new t.Point(1,1),this._view.scale.copyTo(this.scale)}},{key:"getZoomAndShakeAction",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1.1,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.center;return framework.Actions.Sequence([this.getZoomInAction(e,t),this.getShakeAction(e),this.getZoomOutAction(t)])}},{key:"getShakeAction",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.center,i=e;return framework.Actions.Sequence([framework.Actions.Tween(i,{to:{x:i.x+5,y:i.y+7},onUpdate:function(e){t.moveCenter(e)},duration:.06}),framework.Actions.Tween(i,{to:{x:i.x-6,y:i.y+7},onUpdate:function(e){t.moveCenter(e)},duration:.07}),framework.Actions.Tween(i,{to:{x:i.x-13,y:i.y-3},onUpdate:function(e){t.moveCenter(e)},duration:.07}),framework.Actions.Tween(i,{to:{x:i.x+3,y:i.y-6},onUpdate:function(e){t.moveCenter(e)},duration:.07}),framework.Actions.Tween(i,{to:{x:i.x-5,y:i.y+5},onUpdate:function(e){t.moveCenter(e)},duration:.06}),framework.Actions.Tween(i,{to:{x:i.x+2,y:i.y-8},onUpdate:function(e){t.moveCenter(e)},duration:.07}),framework.Actions.Tween(i,{to:{x:i.x-8,y:i.y-10},onUpdate:function(e){t.moveCenter(e)},duration:.07}),framework.Actions.Tween(i,{to:{x:i.x+3,y:i.y+10},onUpdate:function(e){t.moveCenter(e)},duration:.07}),framework.Actions.Tween(i,{to:{x:e.x,y:e.y},onUpdate:function(e){t.moveCenter(e)},duration:.1})])}},{key:"moveCenter",value:function(t){this.setPosition(t.x,t.y)}},{key:"setPosition",value:function(t,e){this._view.x=t,this._view.y=e}},{key:"setZoom",value:function(t){this._view.scale.x=this._view.scale.y=t}},{key:"getPosition",value:function(){return this._view.position}},{key:"getZoomInAction",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.center,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1.1;return framework.Actions.Parallel([this.getScaleAction(this._view,e),this.getPanAction(t)])}},{key:"getScaleAction",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.15;if(!t)throw"require view";return framework.Actions.Tween(t.scale,{to:{x:e,y:e},duration:i,easing:f.Easing.Cubic.In})}},{key:"getZoomOutAction",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.scale.x;return framework.Actions.Sequence([framework.Actions.Parallel([this.getScaleAction(this._view,e),this.getRecenterAction()]),framework.Actions.Func((function(){return t.setPosition(t.center.x,t.center.y)}))])}},{key:"getPanAction",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.center,e=framework.Vector.transformGlobalToChild(t,this.view.parent);return e.x=e.x-this.center.x,e.y=e.y-this.center.y,this.getTranslationAction(this._view,e)}},{key:"getTranslationAction",value:function(t,e){var i=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.15;return framework.Actions.Tween(t.position,{to:{x:e.x,y:e.y},duration:n,onUpdate:function(e){var n=20*t.scale.x,r=i.center.x-n,o=i.center.x+n,a=MathExt.clamp(e.x/t.scale.x,r,o),s=10*t.scale.y,c=i.center.y-s,u=i.center.y+s,h=MathExt.clamp(e.y/t.scale.y,c,u);i.setPosition(a,h)}})}},{key:"getRecenterAction",value:function(){return this.getTranslationAction(this._view,this.center)}}]),e}();!function(t){t.pan="pan",t.zoomOut="zoomOut",t.zoomIn="zoomIn",t.shake="shake"}(n||(n={}))}).call(this,i(23))},,,,,,,,,,,function(t,e,i){"use strict";i.d(e,"a",(function(){return u}));i(38),i(47),i(12),i(44),i(45);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(1),c=i.n(s),u=function(){function t(){r()(this,t),c()(this,"save",new Map),c()(this,"voIDMap",new Map),c()(this,"characterSelectionDialogs",new Map),c()(this,"leadRole",null),c()(this,"roleUIMap",null)}return a()(t,[{key:"getDefaultVOKeys",value:function(){return[]}}]),t}()},function(t,e,i){"use strict";i.d(e,"a",(function(){return A}));i(33),i(12),i(14),i(13),i(34);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(17);function w(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var A=function(t){y()(n,t);var e,i=(e=n,function(){var t,i=d()(e);if(w()){var n=d()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return f()(this,t)});function n(t,e,o){var s;return r()(this,n),(s=i.call(this,t,e)).diService=e,s.selectionTypes=o,m()(a()(s),"_buttonLeft",null),m()(a()(s),"_buttonRight",null),m()(a()(s),"_buttonMiddle",null),s._buttonLeft=Object(k.c)(s.view,"left"),s._buttonRight=Object(k.c)(s.view,"right"),s._buttonMiddle=Object(k.c)(s.view,"middle"),s.activebuttons=[!0,!0,!0],s}return h()(n,[{key:"buttonLeft",get:function(){return this._buttonLeft}},{key:"buttonRight",get:function(){return this._buttonRight}},{key:"buttonMiddle",get:function(){return this._buttonMiddle}},{key:"buttons",get:function(){return[this.buttonLeft,this.buttonMiddle,this.buttonRight]}}]),h()(n,[{key:"init",value:function(){c()(d()(n.prototype),"init",this).call(this),this.setIcons(this.selectionTypes)}},{key:"setIcons",value:function(t){var e=this;this.selectionTypes=t,this.reposition(),this.resetSpines(),t.forEach((function(t,i){if(!(i>=e.buttons.length)){var n=e.buttons[i];n&&(e.activebuttons[i]=!0,n.skeleton.setSkinByName(e.getSkinName(t)))}}))}},{key:"resetSpines",value:function(){var t=this;[this.buttonLeft,this.buttonMiddle,this.buttonRight].forEach((function(e,i){e&&(e.visible=!1,t.activebuttons[i]=!1)}))}},{key:"reposition",value:function(){2==this.selectionTypes.length?this.view.x=162:1==this.selectionTypes.length?this.view.x=340:this.view.x=0}}]),n}(i(55).b)},function(t,e,i){"use strict";i.d(e,"a",(function(){return g}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(6),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(5);function y(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var g=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(y()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"onInit",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getShowAndRiseUpAction(),framework.Actions.Delay(.5),framework.Actions.Func((function(){return t.character.playIdle()})),framework.Actions.Func((function(){return c()(f()(n.prototype),"onInit",t).call(t)}))]))}},{key:"skip",value:function(){this.character.show(),this.character.playIdle(),c()(f()(n.prototype),"skip",this).call(this)}},{key:"character",get:function(){return this.characters.get(v.a.narrator)}}]),n}(i(20).a)},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return P}));i(178),i(33),i(51),i(12),i(14),i(13),i(34);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(71),w=i(17),A=i(255),S=i(4),b=i(20),_=i(31),D=i(162);function C(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var P=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(C()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(t,e,i,s){var c;return r()(this,o),(c=n.call(this,t,e)).characterRoleMap=i,c.delegate=s,m()(a()(c),"character",null),m()(a()(c),"characterSecond",null),m()(a()(c),"characterThird",null),m()(a()(c),"narrator",null),m()(a()(c),"characters",null),m()(a()(c),"script",void 0),m()(a()(c),"dialogStateFactory",void 0),m()(a()(c),"states",[]),m()(a()(c),"lightMapFilter",void 0),m()(a()(c),"stateContext",new A.a),m()(a()(c),"_replayStates",[]),m()(a()(c),"currentPassage",null),c.diService.setDataWithKey(S.a.isReplay,!1),c}return h()(o,[{key:"game",get:function(){return this.diService.getDataByKey(S.a.game)}},{key:"storyData",get:function(){return this.diService.getDataByKey(S.a.StoryData)}},{key:"backdrop",get:function(){return this.diService.getDataByKey(S.a.backdrop)}},{key:"musicPlayer",get:function(){return this.diService.getDataByKey(S.a.musicBox)}},{key:"curtains",get:function(){return this.diService.getDataByKey(S.a.curtains)}},{key:"discoBall",get:function(){return this.diService.getDataByKey(S.a.discoball)}},{key:"pauseButton",get:function(){return this.diService.getDataByKey(S.a.pauseButton)}},{key:"replayStates",get:function(){return this._replayStates}},{key:"buildService",get:function(){return this.diService.get(S.b.BuildInfoService)}},{key:"act1CharacterPositionMap",get:function(){return this.diService.getDataByKey(S.a.positionData)}},{key:"act1CharacterScaleMap",get:function(){return this.diService.getDataByKey(S.a.scaleData)}}]),h()(o,[{key:"init",value:function(){c()(d()(o.prototype),"init",this).call(this),this.diService.setDataWithKey(S.a.ActionManagerDelegate,this),this.initCharacters(),this.dialogStateFactory=this.initFactory(),this.diService.get(S.b.CameraService).init(),this.setupDebugModeIfNeeded()}},{key:"initCharacters",value:function(){this.character=Object(w.c)(this.view,"character"),this.characterSecond=Object(w.c)(this.view,"character-second"),this.characterThird=Object(w.c)(this.view,"character-third"),this.narrator=Object(w.c)(this.view,"narrator")}},{key:"startDialog",value:function(t){this.diService.setDataWithKey(S.a.StageStateDelegate,this),this.diService.setDataWithKey(S.a.SelectionPopOverDelegate,this),this.script=t,this.runAction(this.getActSetupAction())}},{key:"getActSetupAction",value:function(){var t=this.diService.getDataByKey(S.a.backdrop),e=this.diService.getDataByKey(S.a.StageTransition);return e.reset(),framework.Actions.Sequence([framework.Actions.Parallel([this.curtains.getOpenCurtainsAction(),e.getTransitionParalaxAction()]),framework.Actions.Parallel([framework.Actions.Func(this.vignetteVisible.bind(this)),this.discoBall.getShowAction()]),t.getShowAction(),framework.Actions.Func(this.playFirstDialog.bind(this))])}},{key:"playFirstDialog",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"1";this.musicPlayer.startMusic();var e=this.script.passages.find((function(e){return e.pid===t}));this.goTo(e.name)}},{key:"vignetteVisible",value:function(){this.lightMapFilter=Object(w.a)(this.view,!1)}},{key:"removeVignette",value:function(){this.view.filters=[]}},{key:"assignPositionToCharacters",value:function(e){var i=this;this.act1CharacterPositionMap.size>0?e.forEach((function(t){var e=i.characters.get(t),n=i.act1CharacterPositionMap.get(t);e.x=n.x,e.y=n.y;var r=i.act1CharacterScaleMap.get(t);e.setDirection(r)})):e.forEach((function(e){var n=i.characters.get(e);i.act1CharacterPositionMap.set(e,new t.Point(n.x,n.y)),i.act1CharacterScaleMap.set(e,n.direction)}))}},{key:"goToNext",value:function(){this.currentPassage&&(this.cancelActions(),this.stateContext.currentState.skip())}},{key:"goTo",value:function(t){if(t)if(this.shouldEndDialog(t))this.endDialog();else{var e=this.script.passages.find((function(e){return e.name===t}));this.currentPassage=e;var i=this.dialogStateFactory.createStateForDialog(e);this.states.push(i),this.scripts.addScript(i),this.updateReplayStates(),this.stateContext.currentState=i}else console.log(" no passage name passed in, return")}},{key:"shouldEndDialog",value:function(t){return!1}},{key:"testPassages",value:function(){var t=this;this.script.passages.forEach((function(e){var i=t.dialogStateFactory.createStateForDialog(e),n=_.b.vosPath+i.passageDialog.getVoForCharacter();D.ajax({url:n,type:"HEAD",error:function(){console.error("not found",n)},success:function(){}})}))}},{key:"updateReplayStates",value:function(){var t=this.stateContext.currentState;t instanceof b.a&&this._replayStates.push(t.getReplay())}},{key:"endDialog",value:function(){var t=this;console.log("story is terminated"),this.updateReplayStates(),this.runAction(framework.Actions.Sequence([framework.Actions.Delay(2),this.getEndOfActAction(),framework.Actions.Func((function(){t.delegate.onActTerminated(t),t.removeVignette()}))]))}},{key:"getEndOfActAction",value:function(){return this.curtains.getCloseCurtainsAction()}},{key:"deinit",value:function(){var t=this;this.pauseButton.visible=!1,this.scripts.removeScripts(this.states),this.states.forEach((function(t){t.onDestroy()})),this.characters.forEach((function(e,i){var n=t.characters.get(i);n.hide(),n.deinit()})),this.diService.deleteDataWithKey(S.a.StageStateDelegate),this.diService.deleteDataWithKey(S.a.SelectionPopOverDelegate),this.diService.deleteDataWithKey(S.a.characters)}},{key:"attachPopover",value:function(t){this.addChildMediatorOnly(t)}},{key:"dettachPopover",value:function(t){this.removeChildMediatorOnly(t)}},{key:"onStateTerminated",value:function(t){t?this.goTo(t):this.endDialog()}},{key:"setupDebugModeIfNeeded",value:function(){if(this.buildService.isDebug){var e=this.getDebugButton(new t.Point(50,-400),"skip");this.view.addChild(e),this.setButtonPressedListener(e,this.goToNext.bind(this));var i=this.getDebugButton(new t.Point(160,-400),"act2");this.view.addChild(i),this.setButtonPressedListener(i,this.goToAct2.bind(this));var n=this.getDebugButton(new t.Point(280,-400),"act3");this.view.addChild(n),this.setButtonPressedListener(n,this.goToAct3.bind(this))}}},{key:"getDebugButton",value:function(t,e){var i=new framework.RectangleView({position:t,width:90,height:50}),n=new framework.TextView({initialText:e,style:{fill:"#000"}});return i.addChild(n),i}},{key:"cancel",value:function(){this.currentPassage&&(this.cancelActions(),this.stateContext.currentState.cancel())}},{key:"setSaveForKey",value:function(t,e){this.storyData.save.get(t)||this.storyData.save.set(t,e)}},{key:"update",value:function(t){this.game.shouldUpdate&&c()(d()(o.prototype),"update",this).call(this,t)}},{key:"unpause",value:function(){this.vignetteVisible(),this.stateContext.currentState&&this.stateContext.currentState.resume()}},{key:"pause",value:function(){this.removeVignette()}}]),o}(k.a)}).call(this,i(23))},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return D}));i(38),i(47),i(12),i(14),i(13),i(44),i(45);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(71),w=i(4),A=i(17),S=i(256),b=i(258);function _(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var D=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(_()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(t,e){var i;return r()(this,o),i=n.call(this,t,e),m()(a()(i),"storyMediator",void 0),m()(a()(i),"promptPopOver",void 0),m()(a()(i),"stageTransition",void 0),m()(a()(i),"act1CharacterPositionMap",new Map),m()(a()(i),"act1CharacterScaleMap",new Map),i.diService.setDataWithKey(w.a.InteractionHandler,a()(i)),i.stageTransition=new b.a(i.view),i.diService.setDataWithKey(w.a.StageTransition,i.stageTransition),i.diService.setDataWithKey(w.a.positionData,i.act1CharacterPositionMap),i.diService.setDataWithKey(w.a.scaleData,i.act1CharacterScaleMap),Object(A.c)(i.view,"story-flow-panel").visible=!1,i}return h()(o,[{key:"analyticsService",get:function(){return this.diService.get(w.b.AnalyticsService)}},{key:"game",get:function(){return this.diService.getDataByKey(w.a.game)}},{key:"captionService",get:function(){return this.diService.get(w.b.CaptionService)}}]),h()(o,[{key:"init",value:function(){c()(d()(o.prototype),"init",this).call(this),this.createStoryMediator()}},{key:"createStoryMediator",value:function(){this.storyMediator=this.getStoryMediator(),this.addChildMediatorOnly(this.storyMediator),this.storyMediator.init()}},{key:"destroy",value:function(){this.removeChildMediatorOnly(this.storyMediator),this.storyMediator.destroy(),c()(d()(o.prototype),"destroy",this).call(this)}},{key:"onStoryTerminated",value:function(){this.showReplayPrompt()}},{key:"onStoryPaused",value:function(){this.showPausePrompt()}},{key:"showReplayPrompt",value:function(){this.showPrompt(this.createReplayPopver.bind(this),this.onNewStory.bind(this),this.onReplaySelected.bind(this),this.playVOPrompt.bind(this))}},{key:"showPausePrompt",value:function(){var t=this;this.analyticsService.sendEventStoryPause(),this.storyMediator.pause(),this.showPrompt(this.createPausePopver.bind(this),this.onPauseNewStory.bind(this),this.onContinueSelected.bind(this),this.playVOPrompt.bind(this),(function(){return t.pause()}))}},{key:"showPrompt",value:function(t,e,i,n){var r=this,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){};this.promptPopOver&&(this.removeChildMediatorOnly(this.promptPopOver),this.promptPopOver.deinit(),this.promptPopOver=null),this.promptPopOver=t(),this.addChildMediatorOnly(this.promptPopOver),this.promptPopOver.init(),this.diService.setDataWithKey(w.a.isPromptShowing,!0),this.promptPopOver.show((function(){r.setButtonPressedListener(r.promptPopOver.yesSpine,e),r.setButtonPressedListener(r.promptPopOver.noSpine,i),r.setButtonPressedListener(r.promptPopOver.titleSpine,n),o()}))}},{key:"createPausePopver",value:function(){var t=this.createPromptDialog();return t.setPaused(),t}},{key:"createReplayPopver",value:function(){var t=this.createPromptDialog();return t.setReplay(),t}},{key:"createPromptDialog",value:function(){var t=Object(A.c)(this.view,"story-flow-panel");return t.alpha=0,new S.a(t,this.diService)}},{key:"playVOPrompt",value:function(){this.promptPopOver&&this.promptPopOver.playVO()}},{key:"onReplaySelected",value:function(){this.analyticsService.sendEventEndMenuChoice("watch_replay"),this.deinitPromptDialog(),this.storyMediator.startReplayStory()}},{key:"onNewStory",value:function(){this.analyticsService.sendEventEndMenuChoice("new_story"),this.deinitPromptDialog(),this.cleanUpStory(),this.showNewStoryScreen()}},{key:"onContinueSelected",value:function(){this.analyticsService.sendEventPauseMenuChoice("resume"),this.deinitPromptDialog(),this.storyMediator.unpause(),this.unpause()}},{key:"pause",value:function(){this.game.shouldUpdate=!1,this.soundService.pauseAllInGame(),t.spine.Spine.globalAutoUpdate=!1}},{key:"unpause",value:function(){this.game.shouldUpdate=!0,t.spine.Spine.globalAutoUpdate=!0,this.soundService.resumeAllInGame(),this.captionService.displayCaption()}},{key:"onPauseNewStory",value:function(){this.game.shouldUpdate=!0,t.spine.Spine.globalAutoUpdate=!0,this.analyticsService.sendEventPauseMenuChoice("new_story"),this.onNewStory()}},{key:"cleanUpStory",value:function(){this.storyMediator&&(this.removeChildMediatorOnly(this.storyMediator),this.storyMediator.deinit(),this.storyMediator=null)}},{key:"showNewStoryScreen",value:function(){this.createStoryMediator()}},{key:"deinitPromptDialog",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.promptPopOver.stopVoAndCaptions(),this.removeButtonPressedListener(this.promptPopOver.yesSpine),this.removeButtonPressedListener(this.promptPopOver.noSpine),this.removeButtonPressedListener(this.promptPopOver.titleSpine),this.diService.setDataWithKey(w.a.isPromptShowing,!1),this.promptPopOver.hide((function(){t.removeChildMediatorOnly(t.promptPopOver),t.promptPopOver.deinit(),t.promptPopOver=null,e()}))}}]),o}(k.a)}).call(this,i(23))},function(t,e,i){"use strict";i.d(e,"a",(function(){return X}));i(51);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(1),c=i.n(s),u=(i(215),i(108),i(178),i(33),i(38),i(70),i(12),i(112),i(186),i(150),i(80),i(34),i(45),i(31)),h=i(4),l=i(39),f=i(105),p=(i(109),i(111),function(){function t(){r()(this,t)}return a()(t,null,[{key:"parse",value:function(t){var e=this;t.passages.forEach((function(t){return e.parseText(t.text)}))}},{key:"parseText",value:function(t){var e=t.split("\n\n").last();return JSON.parse(e)}},{key:"isSetStatement",value:function(t){return/set:\s\$[a-zA-Z]+/.test(t)}},{key:"getSetStatement",value:function(t){var e=/set:\s\$[a-zA-Z]+.+\)/.exec(t);return e&&e.length>0?e[0]:null}},{key:"isIfStatement",value:function(t){return/if:\s\$[a-zA-Z]+/.test(t)}},{key:"getIfStatement",value:function(t){var e=/if:\s\$[a-zA-Z]+.+\)/.exec(t);return e&&e.length>0?e[0]:null}},{key:"getTwineVariable",value:function(t){var e=/\$[a-zA-Z]+/.exec(t),i=/\'.+\'\)/.exec(t);return e&&e.length>0&&i&&i.length>0?new d(e[0].replace("$",""),i[0].replace("'","").replace("')","")):null}},{key:"getTwineConditions",value:function(e){var i=e;e.includes("[")&&(i=e.split("[")[0]);var n=[i];return i.includes("and")&&(n=i.split("and")),n.map((function(e){var i=/\$[a-zA-Z]+/.exec(e),n=/is '.+'/.exec(e);return t.getTwineCondition(i,n)}))}},{key:"getTwineCondition",value:function(t,e){return t&&t.length>0&&e&&e.length>0?new d(t[0].replace("$",""),e[0].replace("is '","").replace("'","")):null}},{key:"getConditionResult",value:function(t){var e=/\[(.+)\]/.exec(t);return e&&e.length>0?e[0].replace("[","").replace("]",""):null}}]),t}()),d=function t(e,i){r()(this,t),this.name=e,this.value=i},v=function(){function t(e,i,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],a=arguments.length>4?arguments[4]:void 0,s=arguments.length>5?arguments[5]:void 0;r()(this,t),this.pid=e,this.name=i,this._text=n,this.links=o,this.dialogData=a,this.diService=s,c()(this,"soundService",void 0),c()(this,"cameraService",void 0),c()(this,"currentAnim",null),c()(this,"_delay",void 0),c()(this,"isTalking",!1),c()(this,"_voId",void 0),c()(this,"_role",void 0),c()(this,"_choiceType",void 0),c()(this,"_targetRole",void 0),c()(this,"_sfxChoices",void 0),c()(this,"_sfx",void 0),c()(this,"_sfxDelay",void 0),c()(this,"_camera",void 0),c()(this,"_cameraTarget",void 0),c()(this,"_cameraEffectDelay",void 0),c()(this,"_location",void 0),c()(this,"_caption",void 0),this.soundService=this.diService.get(h.b.SoundService),this.cameraService=this.diService.get(h.b.CameraService),this.init(this.dialogData)}return a()(t,[{key:"delay",get:function(){return this._delay}},{key:"voId",get:function(){return this._voId}},{key:"role",get:function(){return this._role}},{key:"choiceType",get:function(){return this._choiceType}},{key:"targetRole",get:function(){return this._targetRole}},{key:"sfxChoices",get:function(){return this._sfxChoices}},{key:"sfx",get:function(){return this._sfx}},{key:"sfxDelay",get:function(){return this._sfxDelay||0}},{key:"camera",get:function(){return this._camera||null}},{key:"cameraTarget",get:function(){return this._cameraTarget||null}},{key:"cameraEffectDelay",get:function(){return this._cameraEffectDelay||0}},{key:"location",get:function(){return this._location||null}},{key:"caption",get:function(){return this._caption}},{key:"captionService",get:function(){return this.diService.get(h.b.CaptionService)}},{key:"storyData",get:function(){return this.diService.getDataByKey(h.a.StoryData)}},{key:"actionDelegate",get:function(){return this.diService.getDataByKey(h.a.ActionManagerDelegate)}},{key:"characters",get:function(){return this.diService.getDataByKey(h.a.characters)}},{key:"character",get:function(){return this.characters.get(this.role)}},{key:"text",get:function(){return this._text}},{key:"dialogLineDelegate",get:function(){var t=this.diService.getDataByKey(h.a.DialogLineDelegate);return t||(t=this.diService.getDataByKey(h.a.ChoiceDialogLineDelegate))||(t=this.diService.getDataByKey(h.a.CueDialogLineDelegate)),t}}]),a()(t,[{key:"init",value:function(t){this._delay=t.delay,this._voId=t.vo,this._role=t.role,this._choiceType=t.choiceType,this._sfx=t.sfx,this._sfxDelay=t.sfxDelay,this._camera=t.camera,this._cameraEffectDelay=t.cameraEffectDelay,this._cameraTarget=t.cameraTarget,this._targetRole=t.targetRole,this._sfxChoices=t.sfxChoices,this._location=t.location,this.searchForVariableDeclaration(),this.searchForCondition()}},{key:"searchForVariableDeclaration",value:function(){if(p.isSetStatement(this.text)){var t=p.getSetStatement(this.text),e=p.getTwineVariable(t);this.storyData.save.set(e.name,e.value)}}},{key:"searchForCondition",value:function(){var t=this.text.split("\n"),e=t[0];this._caption=this.processText(e);for(var i=t.filter((function(t,e,i){return p.isIfStatement(t)})),n=0;n<i.length;n++){var r=i[n],o=p.getIfStatement(r),a=p.getTwineConditions(o);a&&this.handleConditions(r,a)}0==i.length&&this.handleDefaultVoObject()}},{key:"handleConditions",value:function(t,e){var i=this;if(e.every((function(t){return i.checkCondition(t)}))){this._text=p.getConditionResult(t),this._caption=this._text;var n=e.map((function(t){return t.value}));return this.updateVO(n),void this.updateSFX(n)}}},{key:"checkCondition",value:function(t){return this.storyData.save.get(t.name)===t.value}},{key:"updateVO",value:function(t){if(isObject(this._voId)){var e=this.storyData.voIDMap.get(t[0]),i=this._voId[e];i?(this._voId=i,this.getVoForSecondCondition(t)):(this.handleDefaultVoObject(),this.getVoForCondition(t))}}},{key:"handleDefaultVoObject",value:function(){var t=this;this.storyData.getDefaultVOKeys().forEach((function(e){return t.checkVoForKey(e)}))}},{key:"checkVoForKey",value:function(t){isObject(this._voId)&&this.getDefaultVo(t)}},{key:"getDefaultVo",value:function(t){var e=this.storyData.save.get(t),i=this.storyData.voIDMap.get(e),n=this._voId[i];n&&(this._voId=n)}},{key:"getVoForSecondCondition",value:function(t){if(isObject(this._voId)){var e=this.storyData.voIDMap.get(t[1]),i=this._voId[e];i&&(this._voId=i)}}},{key:"getVoForCondition",value:function(t){if(isObject(this._voId)){var e=this.storyData.voIDMap.get(t[0]),i=this._voId[e];i&&(this._voId=i)}}},{key:"updateSFX",value:function(t){if(isObject(this._sfx)){var e=this.storyData.voIDMap.get(t[0]);if(this._sfx[e])this._sfx=this._sfx[e],isObject(this._sfx)&&(this._sfx=this._sfx[t[1]]);else{var i=this.storyData.save.get("costume"),n=this.storyData.voIDMap.get(i);this._sfx=this._sfx[n]}}}},{key:"processText",value:function(t){for(var e in this.storyData.save.keys){var i="$"+e;t.replace(i,this.storyData.save.get(e))}return t}},{key:"playDialog",value:function(){var t=this.diService.getDataByKey(h.a.DialogLineDelegate);if(!t)throw"require a DialogLineDelegate in the diservice";var e=[];e.push(this.getDelayAction()),e.push(this.getEventActions()),e.push(this.getEndOfDialogAction(this.character,t));var i=framework.Actions.Sequence(e);this.actionDelegate.runUniqueAction(i)}},{key:"getDelayAction",value:function(){return framework.Actions.Delay(this._delay)}},{key:"getEventActions",value:function(){return framework.Actions.Parallel([this.getTalkAction(),this.getSFXActionIfNeeded(),this.getCameraActionIfNeeded()])}},{key:"getTalkAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Func((function(){return t.captionService.displayCaption(t._caption)})),framework.Actions.Parallel([framework.Actions.VO(this.getVoForCharacter()),framework.Actions.Func((function(){t.isTalking=!0,t.currentAnim=t.character.spine.state.getCurrent(0),t.character.playTalk()}))]),framework.Actions.Func((function(){return t.captionService.clearCaptions()})),framework.Actions.Func((function(){t.isTalking=!1;var e=t.currentAnim&&t.currentAnim.animation&&t.currentAnim.animation.name||t.character.idleAnimation;t.character.playAnim(e)}))])}},{key:"showCaptions",value:function(){this.isTalking&&this.captionService.displayCaption(this._caption)}},{key:"getVoForCharacter",value:function(){if(!this.character)throw new Error("no character for "+this);return this.voId.replace(".mp3","-"+this.character.characterType+".mp3")}},{key:"getSFXActionIfNeeded",value:function(){return this.sfx?framework.Actions.Sequence([framework.Actions.Delay(this.sfxDelay),new l.a(this.sfx,u.a.G2,!1,this.diService)]):framework.Actions.Func()}},{key:"getCameraActionIfNeeded",value:function(){var t=this,e=[framework.Actions.Delay(this.cameraEffectDelay)];if(!this.camera)return framework.Actions.Func();var i=this.camera.split("|"),n=null,r=null;return i.forEach((function(i){switch(i){case f.a.zoomOut:e.push(t.cameraService.getZoomOutAction());break;case f.a.zoomIn:if(!t.cameraTarget)throw"no camera targer for pan action";n=t.characters.get(t.cameraTarget),r=n.spine.toGlobal(n.spine.position),e.push(t.cameraService.getZoomInAction(r));break;case f.a.shake:e.push(t.cameraService.getShakeAction());break;case f.a.pan:if(!t.cameraTarget)throw"no camera targer for pan action";n=t.characters.get(t.cameraTarget),r=n.spine.toGlobal(n.spine.position),e.push(t.cameraService.getPanAction(r))}})),framework.Actions.Sequence(e)}},{key:"getEndOfDialogAction",value:function(t,e){var i=this;return framework.Actions.Func((function(){t&&t.playIdle(),e&&e.didTerminate(i.getThirdPassage())}))}},{key:"getNextPassage",value:function(){var t=this.links.first();return t?t.link:null}},{key:"getSecondPassage",value:function(){var t=this.links[1];return t?t.link:this.getNextPassage()}},{key:"getThirdPassage",value:function(){var t=this.links[2];return t?t.link:this.getNextPassage()}},{key:"getLink",value:function(t){return this.links[t]}},{key:"getLinkById",value:function(t){return this.links.find((function(e){return e.link===t}))}},{key:"getReplay",value:function(){return this}},{key:"skip",value:function(){this.actionDelegate.cancelUniqueAction(),this.dialogLineDelegate&&this.dialogLineDelegate.didTerminate(this.getNextPassage())}},{key:"cancel",value:function(){this.actionDelegate.cancelUniqueAction()}}]),t}(),y=(i(14),i(13),i(8)),g=i.n(y),m=i(0),k=i.n(m),w=i(9),A=i.n(w),S=i(5);function b(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var _,D=function(t){A()(n,t);var e,i=(e=n,function(){var t,i=k()(e);if(b()){var n=k()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return g()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"playDialog",value:function(){var t=this.diService.getDataByKey(h.a.CueDialogLineDelegate);if(!t)throw"require a CueDialogLineDelegate in the diservice";var e=[];e.push(framework.Actions.Delay(this.delay)),e.push(framework.Actions.Parallel([n.getCueActions(this.cueDialogData.cueDelay,this.cueDialogData.cue,t),this.getEventActions()]));var i=this.characters.get(S.a.narrator);e.push(this.getEndOfDialogAction(i,t));var r=framework.Actions.Sequence(e);this.actionDelegate.runUniqueAction(r)}},{key:"cueDialogData",get:function(){return this.dialogData}}],[{key:"getCueActions",value:function(t,e,i){return framework.Actions.Sequence([framework.Actions.Delay(t||0),framework.Actions.Func((function(){i.onCue()}))])}}]),n}(v),C=i(17),P=i(27),x=(i(57),i(47),i(44),i(7)),R=i.n(x),M=i(6),I=i.n(M),T=i(117),O=i(42);function F(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}!function(t){t.idle="idle",t.show="show",t.hide="hide",t.hideCutout="hide-cutout",t.select="select"}(_||(_={}));var B=function(t){A()(n,t);var e,i=(e=n,function(){var t,i=k()(e);if(F()){var n=k()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return g()(this,t)});function n(){var t;r()(this,n);for(var e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return t=i.call.apply(i,[this].concat(o)),c()(R()(t),"hideAnimationMap",null),t}return a()(n,[{key:"init",value:function(){I()(k()(n.prototype),"init",this).call(this),this.hideAnimationMap=new Map([[this._buttonLeft,_.hide],[this._buttonMiddle,_.hide],[this._buttonRight,_.hide]])}},{key:"getSkinName",value:function(t){return t}},{key:"getOnSelectAnimAction",value:function(t){return this.cancelUniqueAction(),framework.Actions.Spine(t,_.select)}},{key:"setSelected",value:function(t){this.hideAnimationMap.set(t,_.hideCutout)}},{key:"customHideAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel(this.buttons.map((function(e){return Object(O.c)(e,t.hideAnimationMap.get(e),!1)}))),framework.Actions.Func((function(){t.buttons.forEach((function(t){t.visible=!1}))}))])}}]),n}(T.a),V=i(35);function L(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var E=function(t){A()(n,t);var e,i=(e=n,function(){var t,i=k()(e);if(L()){var n=k()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return g()(this,t)});function n(t,e){var o;return r()(this,n),(o=i.call(this,t.pid,t.name,t.text,t.links,t.dialogData,t.diService)).choiceDialogLine=t,c()(R()(o),"_recordedChoice",null),o._recordedChoice=e,o._caption=o.choiceDialogLine.caption,o._delay=o.choiceDialogLine.delay,o._voId=o.choiceDialogLine.voId,o._role=o.choiceDialogLine.role,o._choiceType=o.choiceDialogLine.choiceType,o._sfx=o.choiceDialogLine.sfx,o._sfxDelay=o.choiceDialogLine.sfxDelay,o._camera=o.choiceDialogLine.camera,o._cameraEffectDelay=o.choiceDialogLine.cameraEffectDelay,o._cameraTarget=o.choiceDialogLine.cameraTarget,o._targetRole=o.choiceDialogLine.targetRole,o._sfxChoices=o.choiceDialogLine.sfxChoices,o}return a()(n,[{key:"init",value:function(t){}},{key:"playDialog",value:function(){var t=this.diService.getDataByKey(h.a.ChoiceDialogLineDelegate);if(!t)throw"require a ChoiceDialogLineDelegate in the diservice";var e=[];e.push(this.getDelayAction()),e.push(this.getEventActions());var i=this.characters.get(this.role);e.push(n.getChoiceAction(i,this._recordedChoice,t));var r=framework.Actions.Sequence(e);this.actionDelegate.runUniqueAction(r)}},{key:"finishChoice",value:function(t){}}],[{key:"getChoiceAction",value:function(t,e,i){return framework.Actions.Sequence([framework.Actions.Func((function(){t&&t.playIdle(),i.onChoice(e)}))])}}]),n}(v);function N(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var K=function(t){A()(n,t);var e,i=(e=n,function(){var t,i=k()(e);if(N()){var n=k()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return g()(this,t)});function n(){var t;r()(this,n);for(var e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return t=i.call.apply(i,[this].concat(o)),c()(R()(t),"dialogTimer",0),c()(R()(t),"maxTimer",10),c()(R()(t),"blockingAction",null),c()(R()(t),"_replay",null),c()(R()(t),"choiceId",null),t}return a()(n,[{key:"playDialog",value:function(){var t=this.diService.getDataByKey(h.a.ChoiceDialogLineDelegate);if(!t)throw"require a ChoiceDialogLineDelegate in the diservice";var e=[];this.dialogTimer=0,e.push(this.getDelayAction()),e.push(this.getEventActions());var i=this.characters.get(this.role);e.push(n.getChoiceAction(i,this.dialogData.choiceType,this.waitForChoice.bind(this),t));var r=framework.Actions.Sequence(e);this.actionDelegate.runUniqueAction(r)}},{key:"saveChoice",value:function(t){this._replay=new E(this,t)}},{key:"hasChoice",value:function(){return null!=this.choiceId}},{key:"waitForChoice",value:function(t,e,i){this.buildService.isDebug}},{key:"finishChoice",value:function(t){this.choiceId=t,this.saveChoice(t),this.analyticsService.sendEventNarrativeInteraction(t),this.blockingAction&&this.blockingAction.finish()}},{key:"getReplay",value:function(){return this._replay}},{key:"getDefaultChoice",value:function(){var t=this.getLink(0).link;if(!t)throw"no link to choose from. "+this;return t}},{key:"skip",value:function(){this.actionDelegate.cancelUniqueAction()}},{key:"buildService",get:function(){return this.diService.get(h.b.BuildInfoService)}},{key:"analyticsService",get:function(){return this.diService.get(h.b.AnalyticsService)}}],[{key:"getChoiceAction",value:function(t,e,i,n){return framework.Actions.Sequence([framework.Actions.Func((function(){t&&t.playIdle(),n.onChoicesBeingPresented(e)})),framework.Actions.BlockingFunc(i,!0),framework.Actions.Func((function(){t&&t.playIdle()}))])}}]),n}(v);function H(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var U=function(t){A()(n,t);var e,i=(e=n,function(){var t,i=k()(e);if(H()){var n=k()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return g()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"playDialog",value:function(){var t=this.diService.getDataByKey(h.a.CueDialogLineDelegate),e=this.diService.getDataByKey(h.a.ChoiceDialogLineDelegate);if(!t)throw"require a CueDialogLineDelegate in the diservice";if(!e)throw"require a ChoiceDialogLineDelegate in the diservice";var i=[];i.push(framework.Actions.Delay(this.delay)),i.push(framework.Actions.Parallel([D.getCueActions(this.cueDialogData.cueDelay,this.cueDialogData.cue,t),this.getEventActions()]));var n=this.characters.get(this.role);i.push(E.getChoiceAction(n,this._recordedChoice,e));var r=framework.Actions.Sequence(i);this.actionDelegate.runUniqueAction(r)}},{key:"cueDialogData",get:function(){return this.dialogData}}]),n}(E);function W(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var j=function(t){A()(n,t);var e,i=(e=n,function(){var t,i=k()(e);if(W()){var n=k()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return g()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"playDialog",value:function(){var t=this.diService.getDataByKey(h.a.CueDialogLineDelegate),e=this.diService.getDataByKey(h.a.ChoiceDialogLineDelegate);if(!t)throw"require a CueDialogLineDelegate in the diservice";if(!e)throw"require a ChoiceDialogLineDelegate in the diservice";var i=[];i.push(framework.Actions.Delay(this.delay)),i.push(framework.Actions.Parallel([D.getCueActions(this.cueDialogData.cueDelay,this.cueDialogData.cue,t),this.getEventActions()]));var n=this.characters.get(this.role);i.push(K.getChoiceAction(n,this.dialogData.choiceType,this.waitForChoice.bind(this),e));var r=framework.Actions.Sequence(i);this.actionDelegate.runUniqueAction(r)}},{key:"saveChoice",value:function(t){this._replay=new U(this,t)}},{key:"cueDialogData",get:function(){return this.dialogData}}]),n}(K),q=i(11),X=function(){function t(e,i){r()(this,t),this.diService=e,this.view=i,c()(this,"act1",void 0),c()(this,"act2",void 0),c()(this,"act3",void 0)}return a()(t,[{key:"analyticsService",get:function(){return this.diService.get(h.b.AnalyticsService)}}]),a()(t,[{key:"createStateForDialog",value:function(t){this.sendAnalyticsIfNeeded(t.name);var e=p.parseText(t.text),i="cue"in e,n=t.links&&e.choiceType,r=null;if(i&&n){var o=new j(t.pid,t.name,t.text,t.links,e,this.diService);r=this.handleCueChoiceDialog(e,o)}else if(i){var a=new D(t.pid,t.name,t.text,t.links,e,this.diService);r=this.handleCueDialog(e,a)}else if(n){var s=new K(t.pid,t.name,t.text,t.links,e,this.diService);r=this.handleChoiceDialog(e,s,t)}else{var c=new v(t.pid,t.name,t.text,t.links,e,this.diService);r=this.getSimpleDialog(t,c)}if(!r)throw new Error("no state for "+t);return r}},{key:"createPropsSelectPopOver",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[V.a.trees,V.a.skyScraper,V.a.candy],e=Object(C.c)(this.view,"costume-choice-panel");e.alpha=0;var i=new V.b(e,this.diService,t);return i}},{key:"createCostumeSelectPopOver",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[q.a.littleRedHood,q.a.cowboy,q.a.pirate],e=Object(C.c)(this.view,"costume-choice-panel");e.alpha=0;var i=new B(e,this.diService,t);return i}},{key:"createIconSelectPopOver",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[P.b.happy,P.b.angry,P.b.silly],e=Object(C.c)(this.view,"character-choice-panel");e.alpha=0;var i=new P.c(e,this.diService,t);return i}},{key:"sendAnalyticsIfNeeded",value:function(t){t&&(this.act1==t?this.analyticsService.sendEventStartStoryAct(1):this.act2==t?this.analyticsService.sendEventStartStoryAct(2):this.act3==t&&this.analyticsService.sendEventStartStoryAct(3))}}]),t}()},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return k}));i(33),i(51),i(12),i(14),i(13),i(152),i(34);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(1),y=i.n(v),g=i(23);function m(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var k=function(e){d()(o,e);var i,n=(i=o,function(){var t,e=f()(i);if(m()){var n=f()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return h()(this,t)});function o(e){var i;return r()(this,o),i=n.call(this,t.utils.TextureCache[e.textureName],e.insetLeft,e.insetTop,e.insetRight,e.insetBottom),y()(c()(i),"anchor",new g.Point(0,0)),y()(c()(i),"name",""),i.name=e.name,i.position=e.position,i.anchor=e.anchor,e.anchor&&e.height&&(i.position.x=i.position.x-e.width*e.anchor.x,i.position.y=i.position.y-e.height*e.anchor.y),i.tint=e.tint,i.width=e.width,i.height=e.height,i}return a()(o,[{key:"getCache",value:function(e){return t.utils.TextureCache[e]}},{key:"centerChildren",value:function(t){var e=this,i=t||this;i.children&&i.children.forEach((function(t){var i=t.anchor;i&&(t.position.x=t.position.x+t.parent.width*i.x,t.position.y=t.position.y+t.parent.height*i.y,e.centerChildren(t))}))}}]),o}(t.NineSlicePlane)}).call(this,i(23))},function(t,e,i){"use strict";i.d(e,"a",(function(){return u}));i(108),i(33),i(141),i(179),i(210),i(34);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(1),c=i.n(s),u=function(){function t(e){var i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];r()(this,t),c()(this,"destroyView",void 0),c()(this,"_view",void 0),c()(this,"_children",void 0),c()(this,"_parent",void 0),c()(this,"isActive",void 0),c()(this,"_uniqueAction",void 0),c()(this,"_scripts",void 0),c()(this,"_actionManager",void 0),this._view=e,this.destroyView=i,this._children=[],this._parent=null,this.isActive=!0,this._actionManager=new framework.ActionManager,this._scripts=new framework.CompositeScript,this._scripts.init(),this._uniqueAction=null}return a()(t,[{key:"view",get:function(){return this._view}},{key:"children",get:function(){return this._children}},{key:"parent",get:function(){return this._parent}},{key:"scripts",get:function(){return this._scripts}},{key:"actionManager",get:function(){return this._actionManager}}]),a()(t,[{key:"update",value:function(t){this.isActive&&(this._actionManager&&this._actionManager.update(t),this._scripts&&this._scripts.update(t),this._children.forEach((function(e){e.update(t)})))}},{key:"destroy",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.isActive=!1,this.deinitActions(),this._scripts&&(this._scripts.deinit(),this._scripts=null),this._actionManager&&(this._actionManager=null),this._parent&&this._parent.removeChild(this),this.destroyChildren(),this._children=[],this._view&&(this.destroyView&&this._view.destroy({children:!0,texture:t,baseTexture:t}),this._view=null)}},{key:"sendToParent",value:function(t,e,i){this._parent&&(i||(i=this),this._parent.handleChildMessage(t,e,i))}},{key:"handleChildMessage",value:function(t,e,i){this.sendToParent(t,e,i)}},{key:"addChild",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;t&&!this._children.contains(t)&&(e||(e=this._view),t._parent&&t._parent.removeChild(t),t._parent=this,this._children.push(t),e.addChild(t.view))}},{key:"addChildMediatorOnly",value:function(t){t&&!this._children.contains(t)&&(t._parent&&t._parent.removeChild(t),t._parent=this,this._children.push(t))}},{key:"addChildren",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;t.forEach((function(t){e.addChild(t,i)}))}},{key:"removeChild",value:function(t){t&&this._children.contains(t)&&(t.view&&t.view.parent&&t.view.parent.removeChild(t.view),t._parent=null,this._children.remove(t))}},{key:"removeChildMediatorOnly",value:function(t){t&&this._children.contains(t)&&(t._parent=null,this._children.remove(t))}},{key:"removeChildren",value:function(t){var e=this;t||(t=this._children),t.reverseForEach((function(t){e.removeChild(t)}))}},{key:"destroyChild",value:function(t){this.removeChild(t),t&&t.destroy()}},{key:"destroyChildren",value:function(t){var e=this;t||(t=this._children),t.reverseForEach((function(t){e.destroyChild(t)}))}},{key:"swapChild",value:function(t,e){if(e!=t){var i=null,n=-1,r=-1;t&&(r=this._children.indexOf(t),t.view&&t.view.parent&&(n=(i=t.view.parent).getChildIndex(t.view)),this.removeChild(t)),e&&(i=i||this.view,r=-1==r?this.children.length:r,n=-1==n?i.children.length:n,this.addChildAt(e,i,r,n))}}},{key:"addChildAt",value:function(t,e,i,n){t&&!this._children.contains(t)&&(t._parent&&t._parent.removeChild(t),t._parent=this,this._children.splice(i,0,t),e.addChildAt(t.view,n))}},{key:"runAction",value:function(t,e){this.startAction(t,e)}},{key:"runUniqueAction",value:function(t,e){this.startUniqueAction(t,e)}},{key:"cancelAction",value:function(t){var e=[t];this.cancelActions(e)}},{key:"cancelUniqueAction",value:function(){this._uniqueAction&&(this.cancelAction(this._uniqueAction),this._uniqueAction=null)}},{key:"cancelActions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=Object.values(this._actionManager.actions);t&&(t=t.filter((function(t){return!!t})),e=e.filter((function(e){return!!e&&t.contains(e.action)}))),this.cancelActionInstances(e)}},{key:"startUniqueAction",value:function(t,e){this.cancelUniqueAction(),this._uniqueAction=t,this.startAction(t,e)}},{key:"startAction",value:function(t,e){if(t){e=this.createCallbacksConfig(e),t.reset();var i=this._actionManager.runAction(t);e.startedCallback&&i.once("start",e.startedCallback),e.finishedCallback&&i.once("end",e.finishedCallback),e.cancelledCallback&&i.once("cancel",e.cancelledCallback)}}},{key:"createCallbacksConfig",value:function(t){return isFunction(t)&&(t={finishedCallback:t,cancelledCallback:t}),t=Object.extend({startedCallback:null,finishedCallback:null,cancelledCallback:null},t)}},{key:"cancelActionInstances",value:function(t){var e=this;t.filter((function(t){return!!t})).forEach((function(t){e._actionManager.cancelAction(t)}))}},{key:"deinitActions",value:function(){this.cancelActions(),this._uniqueAction=null}}]),t}()},function(t,e,i){"use strict";i.d(e,"a",(function(){return g}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(6),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(5);function y(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var g=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(y()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){return r()(this,n),i.apply(this,arguments)}return a()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Func((function(){return e.playAction()})),framework.Actions.Sequence([framework.Actions.Delay(3.5),framework.Actions.Func((function(){return e.getCharacter().playIdle()})),framework.Actions.Func((function(){return c()(f()(n.prototype),"didTerminate",e).call(e,t)}))])]))}},{key:"playAction",value:function(){this.getCharacter().playDefaultAction()}},{key:"getCharacter",value:function(){return this.characters.get(v.a.littleRedHood)}}]),n}(i(20).a)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){var i,n,r,o,a,s,c,u;i=include("framework.ViewScript"),n=include("framework.WindowUtils"),r=include("framework.Vector"),o=include("framework.ViewTransformer"),a=include("framework.PositionViewTransformer"),s=function(t){var e=Object.extend({dragStartedCallback:function(t,e){},dragMovedCallback:function(t,e){},dragEndedCallback:function(t,e){},stopPropagation:!0,viewDragRescale:1,viewTransformer:null,sourceView:null},t);if(i.call(this,e),this._dragStartedCallback=e.dragStartedCallback,this._dragMovedCallback=e.dragMovedCallback,this._dragEndedCallback=e.dragEndedCallback,this._stopPropagation=e.stopPropagation,this._viewDragRescale=e.viewDragRescale,this._sourceView=e.sourceView?e.sourceView:this.view,this._viewInitiallyInteractive=this._sourceView.interactive,this._viewIsSelected=!1,this._mouseOffsetVec=r.create(0,0),this._lastMousePosition=r.create(0,0),this._pointerID=0,this._viewTransformer=null,e.viewTransformer){if(!instanceOf(e.viewTransformer,o))throw"DragViewScript: viewTransformerClass must be an instance of ViewTransformer.";this._viewTransformer=e.viewTransformer}else this._viewTransformer=new a(Object.extend({helper:this,view:this._view}));this._viewTransformer.helper=this._viewTransformer.helper||this,this._viewTransformer.view=this._viewTransformer.view||this._view,this._onViewMouseDown=this._onViewMouseDown.bind(this),this._onViewMouseUp=this._onViewMouseUp.bind(this),this._onViewMouseUpOutside=this._onViewMouseUpOutside.bind(this),this._onViewMouseMove=this._onViewMouseMove.bind(this),this._onViewMouseMoveOutOfWindow=this._onViewMouseMoveOutOfWindow.bind(this)},c=i.prototype,u=extend(s,i),Object.defineProperty(u,"isActive",{set:function(t){this._setActive(t)},get:function(){return this._isActive}}),Object.defineProperty(u,"view",{set:function(t){this._setView(t)},get:function(){return this._view}}),Object.defineProperty(u,"dragStartedCallback",{set:function(t){this._dragStartedCallback=t},get:function(){return this._dragStartedCallback}}),Object.defineProperty(u,"dragMovedCallback",{set:function(t){this._dragMovedCallback=t},get:function(){return this._dragMovedCallback}}),Object.defineProperty(u,"dragEndedCallback",{set:function(t){this._dragEndedCallback=t},get:function(){return this._dragEndedCallback}}),Object.defineProperty(u,"stopPropagation",{set:function(t){this._stopPropagation=t},get:function(){return this._stopPropagation}}),Object.defineProperty(u,"viewDragRescale",{set:function(t){this._viewDragRescale=t},get:function(){return this._viewDragRescale}}),Object.defineProperty(u,"viewTransformer",{get:function(){return this._viewTransformer}}),Object.defineProperty(u,"mouseOffsetVec",{get:function(){return this._mouseOffsetVec}}),Object.defineProperty(u,"lastMousePosition",{get:function(){return this._lastMousePosition}}),u.init=function(){c.init.call(this),this._sourceView.interactive=!0,this._registerInteractionEvents()},u.deinit=function(){this._viewIsSelected&&this._endDrag(null),this._deregisterInteractionEvents(),this._sourceView.interactive=this._viewInitiallyInteractive,c.deinit.call(this)},u._updateImpl=function(t){this._viewIsSelected&&this._viewTransformer.updateState(t)},u.startDrag=function(t){this._onViewMouseDown(t)},u.stopDrag=function(t){this._onViewMouseUp(t)},u.getLocalMousePosition=function(){var t=this._viewTransformer.view.parent||this._view.parent||this._view;return r.transformGlobalToChild(this._lastMousePosition,t)},u._setActive=function(t){this._isActive=t,this._isActive||this._endDrag(null)},u._setView=function(t){this._view=t,this._viewTransformer&&(this._viewTransformer.view=t)},u._registerInteractionEvents=function(){this._sourceView.on("mousedown",this._onViewMouseDown),this._sourceView.on("touchstart",this._onViewMouseDown),this._sourceView.on("mouseup",this._onViewMouseUp),this._sourceView.on("touchend",this._onViewMouseUp),this._sourceView.on("mouseupoutside",this._onViewMouseUpOutside),this._sourceView.on("touchendoutside",this._onViewMouseUpOutside),this._sourceView.on("mousemove",this._onViewMouseMove),this._sourceView.on("touchmove",this._onViewMouseMove),n.registerMouseOut(this._onViewMouseMoveOutOfWindow)},u._deregisterInteractionEvents=function(){n.deregisterMouseOut(this._onViewMouseMoveOutOfWindow),this._sourceView.removeListener("touchmove",this._onViewMouseMove),this._sourceView.removeListener("mousemove",this._onViewMouseMove),this._sourceView.removeListener("touchendoutside",this._onViewMouseUpOutside),this._sourceView.removeListener("mouseupoutside",this._onViewMouseUpOutside),this._sourceView.removeListener("touchend",this._onViewMouseUp),this._sourceView.removeListener("mouseup",this._onViewMouseUp),this._sourceView.removeListener("touchstart",this._onViewMouseDown),this._sourceView.removeListener("mousedown",this._onViewMouseDown)},u._onViewMouseDown=function(t){this.isActive&&this._beginDrag(t)},u._onViewMouseUp=function(t){this.isActive&&this._endDrag(t)},u._onViewMouseUpOutside=function(t){this.isActive&&this._endDrag(t)},u._onViewMouseMove=function(t){this.isActive&&this._dragMove(t)},u._onViewMouseMoveOutOfWindow=function(t){this.isActive&&this._endDrag(t)},u._beginDrag=function(t){if(!this._viewIsSelected){this._pointerID=t.data.identifier,this._viewIsSelected=!0,this._lastMousePosition=t.data.global;var e=this.getLocalMousePosition();this._mouseOffsetVec=r.sub(e,this._viewTransformer.view.position),this._view.scale.x*=this._viewDragRescale,this._view.scale.y*=this._viewDragRescale,this._viewTransformer.captureState(),this._viewTransformer.updateState(0),this._dragStartedCallback&&this._dragStartedCallback(t,this._view),this._stopPropagation&&t.stopPropagation()}},u._dragMove=function(t){this._viewIsSelected&&t.data.identifier===this._pointerID&&(this._lastMousePosition=t.data.global,this._dragMovedCallback&&this._dragMovedCallback(t,this._view))},u._endDrag=function(t){this._viewIsSelected&&(this._viewIsSelected=!1,this._view.scale.x/=this._viewDragRescale,this._view.scale.y/=this._viewDragRescale,this._viewTransformer.restoreState(),this._dragEndedCallback&&this._dragEndedCallback(t,this._view),this._stopPropagation&&t&&t.stopPropagation())},namespace("framework").DragViewScript=s},,,,function(t,e,i){"use strict";i.d(e,"a",(function(){return S}));i(12),i(14),i(13),i(152);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(6),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(159),w=i(23);function A(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var S=function(t){y()(n,t);var e,i=(e=n,function(){var t,i=d()(e);if(A()){var n=d()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return f()(this,t)});function n(t){var e;return r()(this,n),e=i.call(this,t),m()(c()(e),"imageFrames",{}),m()(c()(e),"transitionColorTints",{}),m()(c()(e),"anchor",new w.Point(0,0)),m()(c()(e),"isTransitionColor",(function(){return!!this.transitionColorTints})),e.imageFrames={up:e.getCache(t.imageFrameNames.up),over:e.getCache(t.imageFrameNames.over),down:e.getCache(t.imageFrameNames.down),disabled:e.getCache(t.imageFrameNames.disabled)},e.transitionColorTints=t.transitionColorTints,e.interactive=!0,e.buttonMode=!0,e.texture=e.imageFrames.up,t.anchor&&(e.anchor=t.anchor),e.on("pointerdown",e.onDown.bind(c()(e))),e.on("pointerup",e.onUp.bind(c()(e))),e.on("pointerover",e.onHover.bind(c()(e))),e.on("pointerleave",e.onLeave.bind(c()(e))),e.on("pointerout",e.onUpOutside.bind(c()(e))),e.on("pointercancel",e.onUpOutside.bind(c()(e))),e.setUpState(),e}return a()(n,[{key:"hasSprite",value:function(){return!!this.imageFrames.up}},{key:"onUp",value:function(t){this.isEnabled&&this.setUpState()}},{key:"setUpState",value:function(){this.hasSprite()&&(this.texture=this.imageFrames.up),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.up))}},{key:"onDown",value:function(t){this.isEnabled&&(this.hasSprite()&&(this.texture=this.imageFrames.down),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.down)))}},{key:"onUpOutside",value:function(t){this.isEnabled&&(this.hasSprite()&&(this.texture=this.imageFrames.up),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.up)))}},{key:"onHover",value:function(t){this.isEnabled&&(this.hasSprite()&&(this.texture=this.imageFrames.over),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.over)))}},{key:"onLeave",value:function(t){this.isEnabled&&(this.hasSprite()&&(this.texture=this.imageFrames.up),this.isTransitionColor()&&(this.tint=framework.ColourUtils.colourToNumber("#"+this.transitionColorTints.up)))}},{key:"destroy",value:function(){this.off("pointerdown",this.onDown),this.off("pointerup",this.onUp),this.off("pointerover",this.onHover),this.off("pointerleave",this.onLeave),this.off("pointerout",this.onUpOutside),this.off("pointercancel",this.onUpOutside),h()(d()(n.prototype),"destroy",this).call(this)}},{key:"isEnabled",get:function(){return this.buttonMode},set:function(t){this.buttonMode=t}}]),n}(k.a)},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return k}));i(51),i(12),i(14),i(13),i(152);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(1),y=i.n(v),g=i(23);function m(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var k=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(m()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(t){var e;return r()(this,n),e=i.call(this,t.text,t.font),y()(c()(e),"anchor",new g.Point(0,0)),y()(c()(e),"name",""),y()(c()(e),"viewConfig",void 0),e.viewConfig=t,e.name=t.name,e.position=t.position,e.anchor=t.anchor,e.maxWidth=t.maxWidth,e}return a()(n,[{key:"centerInParent",value:function(){this.anchor&&(this.position.x=this.parent.width*this.anchor.x,this.position.y=this.parent.height*this.anchor.y)}},{key:"string",get:function(){return this.text},set:function(t){this.text=t}},{key:"node",get:function(){return this}}]),n}(t.BitmapText)}).call(this,i(23))},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return u}));i(57),i(108),i(33),i(109),i(175),i(111),i(34);var n=i(2),r=i.n(n),o=i(1),a=i.n(o),s=i(3),c=i.n(s),u=function(){function e(t){c()(this,e),this.loader=t,a()(this,"sceneAssets",{}),a()(this,"assetListConfig",{})}return r()(e,[{key:"loadAssets",value:function(t,e,i,n){this.loadAssetsDescriptionFiles(t,e,i,n)}},{key:"loadAssetsDescriptionFiles",value:function(t,e,i,n){t.add(this.getFormatScenePathKey(e),this.getFormatScenePath(e)),t.add(this.getFormatSceneAssetsKey(e),this.getFormatSceneAssets(e)),t.load(this.onAssetDescriptionFilesLoaded(t,e,i,n))}},{key:"onAssetDescriptionFilesLoaded",value:function(t,e,i,n){var r=this;return function(o,a){var s=a[r.getFormatSceneAssetsKey(e)].data;r.assetListConfig[e]=s;var c=a[r.getFormatScenePathKey(e)].data;r.loadPrefabAssets(t,s,(function(o){r.onAssetsDescriptionFilesLoaded(t,e,o,c,i,n)}))}}},{key:"loadPrefabAssets",value:function(t,e,i){var n=this,r=[];if(e.forEach((function(e){var i=e&&e.id&&"prefab"in e,n=null==t.resources[e.id];i&&n&&(r.push(e.id),t.add(e.id,e.prefab),t.add(e.id+framework.ViewFactory.viewConfigSuffix,e.prefabViewConfig))})),r.length>0){t.load((function(o,a){r.forEach((function(t){var i=a[t];i&&(e=e.concat(i.data))})),n.loadPrefabAssets(t,e,i)}))}else i(e)}},{key:"onAssetsDescriptionFilesLoaded",value:function(t,e,i,n,r,o){t.onProgress.add((function(t,e){r(t.progress)})),t.onError.add((function(t,e,i){console.log("error",t)})),i.forEach(this.loadAssetIfNeeded(t)),t.load(this.onAssetLoaded(e,o,n))}},{key:"loadAssetIfNeeded",value:function(e){return function(i){i.path&&null==e.resources[i.id]&&null==t.utils.TextureCache[i.id]&&e.add(i.id,i.path)}}},{key:"onAssetLoaded",value:function(t,e,i){var n=this;return function(r,o){n.setSpineData(i,o),n.saveSceneAssetsInCache(t,o),e(i)}}},{key:"saveSceneAssetsInCache",value:function(t,e){var i=this,n=this.assetListConfig[t];this.sceneAssets[t]||(this.sceneAssets[t]=[]),n.forEach((function(n){var r=n.id;e[r]&&i.sceneAssets[t].push(r)}))}},{key:"addAssetToSceneCache",value:function(t,e,i){this.sceneAssets[t]||(this.sceneAssets[t]=[]),i[e]&&this.sceneAssets[t].push(e)}},{key:"unloadAssetsForScene",value:function(t){var e=this.sceneAssets[t];this.unloadAssets(e),delete this.sceneAssets[t]}},{key:"unloadAssets",value:function(e){var i=this;e.forEach((function(e){if(i.shouldUnloadTexture(e)){var n=t.utils.TextureCache[e];n&&n.destroy(!0)}var r=e+"_atlas";Object.keys(i.loader.resources).filter((function(t){return t.includes(r)})).forEach((function(t){return delete i.loader.resources[t]})),delete i.loader.resources[e]}))}},{key:"removeSceneConfigFilesFromResources",value:function(t){var e=this.getFormatScenePathKey(t),i=this.getFormatSceneAssetsKey(t);delete this.loader.resources[e],delete this.loader.resources[i]}},{key:"shouldUnloadTexture",value:function(t){return!0}},{key:"getFormatScenePathKey",value:function(t){return t+"Scene"}},{key:"getFormatScenePath",value:function(t){return"./assets/scenes/"+t+"-scene.json"}},{key:"getFormatSceneAssetsKey",value:function(t){return t+"Assets"}},{key:"getFormatSceneAssets",value:function(t){return"./assets/scenes/"+t+"-assets.json"}},{key:"setSpineData",value:function(t,e){for(var i in t)if(t.hasOwnProperty(i)){var n=t[i];this.parseConfigElement(n,e)}}},{key:"parseConfigElement",value:function(t,e){var i=this;"spine"==t.type&&(t.spineData=e[t.spineName].spineData),t.children&&t.children.length>0&&t.children.forEach((function(t){i.parseConfigElement(t,e)}))}},{key:"loadAdditionalAsset",value:function(t,e,i,n){var r=this;this.loader.add(e,i),this.loader.load((function(i,o){r.addAssetToSceneCache(t,e,o),n(o[e].data)}))}}],[{key:"getLoadedAsset",value:function(t,e){return t.resources[e]?t.resources[e].data:null}},{key:"getLoadedImage",value:function(e){return t.utils.TextureCache[e]}}]),e}()}).call(this,i(23))},,function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return C}));i(70),i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(17),w=i(55),A=i(72),S=i(42),b=i(4),_=i(76);function D(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var C=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(D()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(t,e,i){var s;return r()(this,o),(s=n.call(this,t,e)).diService=e,s.delegate=i,m()(a()(s),"_playButton",null),m()(a()(s),"_logo",void 0),m()(a()(s),"_loadingAnim",void 0),m()(a()(s),"activebuttons",[]),m()(a()(s),"backgroundAlpha",0),m()(a()(s),"mask",void 0),m()(a()(s),"isProgressing",void 0),m()(a()(s),"progress",0),m()(a()(s),"showActions",void 0),s._logo=Object(k.c)(s.view,"logo-anim"),s._loadingAnim=Object(k.c)(s.view,"loading-anim"),s._playButton=Object(k.c)(s.view,"play-button"),s.setTitleForLoadingBar(),s.activebuttons=[!1,!1,!0],s}return h()(o,[{key:"playButton",get:function(){return this._playButton}},{key:"logo",get:function(){return this._logo}},{key:"loadingAnim",get:function(){return this._loadingAnim}},{key:"buttons",get:function(){return[this.logo,this.loadingAnim,this._playButton]}},{key:"buildInfoService",get:function(){return this.diService.get(b.b.BuildInfoService)}},{key:"captionService",get:function(){return this.diService.get(b.b.CaptionService)}}]),h()(o,[{key:"setShadow",value:function(){var e=new A.a(new t.Point(.05,1),15);this._logo.filters=[e];var i=new A.a(new t.Point(-.05,1),15);this._loadingAnim.filters=[i];var n=new A.a(new t.Point(-.05,1),15);this._playButton.filters=[n]}},{key:"customShowAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Func((function(){t.view.alpha=1,t._logo.visible=!0,t._logo.state.setAnimation(0,w.a.idle,!0),t._playButton.visible=!1,t._loadingAnim.visible=!0,t._loadingAnim.alpha=0})),framework.Actions.Sequence([Object(S.d)(this._playButton,w.a.show,!1),framework.Actions.Spine(this._playButton,w.a.idle,{loop:!0})])])}},{key:"getShowLoadingAction",value:function(){var t=this;return this.cancelUniqueAction(),framework.Actions.Parallel([this.getVoAction(),framework.Actions.Func((function(){t._loadingAnim.visible=!0,t._loadingAnim.alpha=1})),framework.Actions.Sequence([framework.Actions.Spine(this._loadingAnim,w.a.show,{loop:!1}),framework.Actions.Spine(this._loadingAnim,w.a.idle,{loop:!0})])])}},{key:"getVoAction",value:function(){var t="splash-start-selected.mp3",e="Arthur's Puppet Theater presents: Little Red Riding Hood";switch(this.buildInfoService.storyFlavor){case _.a.lrrh:t="lrrh-"+t,e="Arthur's Puppet Theater presents: Little Red Riding Hood";break;case _.a.cinderella:t="cinder-"+t,e="Arthur's Puppet Theater presents: Cinderella";break;case _.a.goldilocks:t="gl-"+t,e="Arthur's Puppet Theater presents: Goldilocks and the Three Bears"}return this.getVOCaptionAction(t,e)}},{key:"getVOCaptionAction",value:function(t,e){var i=this;return framework.Actions.Sequence([framework.Actions.Func((function(){return i.captionService.displayCaption(e)})),framework.Actions.VO(t),framework.Actions.Func((function(){return i.captionService.clearCaptions()}))])}},{key:"setTitleForLoadingBar",value:function(){switch(this.buildInfoService.storyFlavor){case _.a.lrrh:this._loadingAnim.skeleton.setSkinByName("lrrh");break;case _.a.cinderella:this._loadingAnim.skeleton.setSkinByName("cinderella");break;case _.a.goldilocks:this._loadingAnim.skeleton.setSkinByName("goldielocks")}}},{key:"getHideStartButton",value:function(){var t=this;return this.cancelUniqueAction(),framework.Actions.Sequence([framework.Actions.Spine(this._playButton,w.a.hide),framework.Actions.Func((function(){t.removeSpine(t._playButton),t.setMask()}))])}},{key:"getHideProgressAction",value:function(){var t=this;return framework.Actions.Parallel([framework.Actions.Sequence([framework.Actions.Spine(this._loadingAnim,w.a.hide),framework.Actions.Func((function(){t.removeSpine(t._loadingAnim)}))]),framework.Actions.Sequence([framework.Actions.Spine(this._logo,w.a.hide),framework.Actions.Func((function(){t.removeSpine(t._logo)}))])])}},{key:"removeSpine",value:function(t){t.autoUpdate=!1,t.state.setEmptyAnimation(0,0),t.visible=!1,t.alpha=0,this.view.removeChild(t)}},{key:"setMask",value:function(){var e=this._loadingAnim.children[2].children[0];this.mask||(this.mask=t.Sprite.from(e.texture)),this.mask.x=e.x-e.height/2,this.mask.y=e.y+e.width/2,this.mask.rotation=e.rotation,this.mask.scale.x=0,e.parent.addChild(this.mask),e.mask=this.mask}},{key:"setProgress",value:function(t){this.isProgressing=!0,this.progress=t}},{key:"removeMask",value:function(){var t=this._loadingAnim.children[2].children[0];t.parent.removeChild(this.mask),t.mask=null}},{key:"customHideAction",value:function(){return framework.Actions.Parallel(this.buttons.map((function(t){return Object(S.c)(t,w.a.hide,!1)})))}},{key:"update",value:function(t){this._isBeingDeinit||(c()(d()(o.prototype),"update",this).call(this,t),this.updateProgress())}},{key:"updateProgress",value:function(){this.isProgressing&&(this.mask.scale.x=this.progress,this.mask.scale.x>=.99&&(this.mask.scale.x=1,this.isProgressing=!1,this.delegate.onLoadingAnimComplete()))}},{key:"destroy",value:function(){c()(d()(o.prototype),"destroy",this).call(this,!0)}}]),o}(w.b)}).call(this,i(23))},function(t,e,i){"use strict";i.d(e,"a",(function(){return w}));i(57),i(141),i(51),i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(1),y=i.n(v),g=i(71),m=i(4);function k(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var w=function(t){d()(n,t);var e,i=(e=n,function(){var t,i=f()(e);if(k()){var n=f()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return h()(this,t)});function n(){var t;r()(this,n);for(var e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return t=i.call.apply(i,[this].concat(o)),y()(c()(t),"background",null),y()(c()(t),"popUpDialogHiddenY",1e3),y()(c()(t),"popUpDialogShownY",150),y()(c()(t),"backgroundAlpha",.4),y()(c()(t),"rootView",null),y()(c()(t),"anchorViewIndex",0),t}return a()(n,[{key:"init",value:function(){for(var t=this.view;t.parent;)t=t.parent;this.rootView=t;var e=framework.ContainerView.getChildByNameRecursive(this.rootView,"Canvas");e?this.rootView=e:console.error("Canvas node not found"),this.createBackground()}},{key:"getAnchorView",value:function(){return this.rootView.children.indexOf(this.view)}},{key:"createBackground",value:function(){var t=this.diService.getDataByKey(m.a.gameWidth),e=this.diService.getDataByKey(m.a.gameHeight);this.background||(this.background=new framework.GraphicsView,this.background.name=n.backgroundName,this.background.beginFill(0),this.background.drawRect(-t/2,-e/2,t,e),this.background.interactive=!0,this.setButtonPressedListenerNoHoverNoSound(this.background,(function(){}),!0),this.background.hasOwnProperty("cursor")&&(this.background.cursor=null),this.background.alpha=0,this.view.interactive=!0)}},{key:"addBackground",value:function(){this.rootView.addChildAt(this.background,this.getAnchorView())}},{key:"removeBackground",value:function(){this.rootView.removeChild(this.background)}},{key:"show",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.beforeShow(),this.view.visible=!0,this.addBackground(),this.runUniqueAction(framework.Actions.Parallel([framework.Actions.Func(t),this.customShowAction(),framework.Actions.Tween(this.background,{to:{alpha:this.backgroundAlpha},duration:.1})]))}},{key:"beforeShow",value:function(){}},{key:"customShowAction",value:function(){return framework.Actions.Tween(this.view,{to:{alpha:1},duration:.3})}},{key:"hide",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};0!=this.view.visible?this.runUniqueAction(framework.Actions.Sequence([framework.Actions.Parallel([this.customHideAction(),framework.Actions.Tween(this.background,{to:{alpha:0},duration:.1})]),framework.Actions.Func((function(){t.removeBackground(),t.view.visible=!1,e()}))])):e()}},{key:"customHideAction",value:function(){return framework.Actions.Tween(this.view,{to:{alpha:0},duration:.3})}}]),n}(g.a);y()(w,"backgroundName","BackgroundedPopOverBackground")},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return _}));i(57),i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(6),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(5),w=i(161),A=i(21),S=i(22);function b(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var _=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(b()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(){var t;r()(this,o);for(var e=arguments.length,i=new Array(e),a=0;a<e;a++)i[a]=arguments[a];return t=n.call.apply(n,[this].concat(i)),m()(c()(t),"finalPositionX",void 0),t}return a()(o,[{key:"playAction",value:function(){var t=this,e=null;(e=this.character.reactionAction==A.a.run||this.character.reactionAction==A.a.jump?framework.Actions.Parallel([framework.Actions.Func((function(){return t.character.playReactionAction()})),this.getRunAction()]):framework.Actions.Func((function(){return t.character.playReactionAction()})))&&this.actionManagerDelegate.runAction(e)}},{key:"getRunAction",value:function(){return framework.Actions.Sequence([this.getTranslationAction(),this.getTranslationAction()])}},{key:"getTranslationAction",value:function(){var e=this;return this.finalPositionX=this.character.x,framework.Actions.Sequence([this.character.getCharacterMoveActionToPoint(new t.Point(500,this.character.y),(function(){return e.character.playReactionAction()}),1),framework.Actions.Func((function(){return e.character.setDirection(S.a.left)})),this.character.getCharacterMoveActionToPoint(new t.Point(this.finalPositionX,this.character.y),(function(){return e.character.playReactionAction()}),1),framework.Actions.Func((function(){return e.character.setDirection(S.a.right)}))])}},{key:"skip",value:function(){this.finalPositionX&&(this.character.x=this.finalPositionX),h()(d()(o.prototype),"skip",this).call(this)}},{key:"character",get:function(){return this.characters.get(k.a.littleRedHood)}}]),o}(w.a)}).call(this,i(23))},function(t,e,i){"use strict";i.d(e,"a",(function(){return u}));var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(1),c=i.n(s),u=function(){function t(){r()(this,t),c()(this,"_currentState",null)}return a()(t,[{key:"currentState",set:function(t){t?(this._currentState&&this._currentState.onDeinit(),this._currentState=t,this._currentState.context=this,this._currentState.onInit()):console.error("new value is null")},get:function(){return this._currentState}}]),t}()},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return P}));i(33),i(70),i(12),i(14),i(13),i(34);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(17),w=i(55),A=i(42),S=i(72),b=i(4),_=i(257);function D(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var C,P=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(D()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(t,e){var i;return r()(this,o),(i=n.call(this,t,e)).diService=e,m()(a()(i),"_yesSpine",null),m()(a()(i),"_noSpine",null),m()(a()(i),"_titleSpine",null),m()(a()(i),"vo",void 0),m()(a()(i),"text",void 0),m()(a()(i),"captionAction",void 0),i._titleSpine=Object(k.c)(i.view,"ui-ok-anim-title"),i._yesSpine=Object(k.c)(i.view,"ui-ok-anim-positive"),i._noSpine=Object(k.c)(i.view,"ui-ok-anim-negative"),i._titleSpine.autoUpdate=!1,i._yesSpine.autoUpdate=!1,i._noSpine.autoUpdate=!1,i.activebuttons=[!0,!0,!0],i.buttons.forEach((function(t){return t.visible=!1})),i.manualSpines.push(i.noSpine,i.yesSpine,i._titleSpine),i}return h()(o,[{key:"yesSpine",get:function(){return this._yesSpine}},{key:"noSpine",get:function(){return this._noSpine}},{key:"titleSpine",get:function(){return this._titleSpine}},{key:"buttons",get:function(){return[this.noSpine,this.yesSpine,this._titleSpine]}},{key:"captionService",get:function(){return this.diService.get(b.b.CaptionService)}}]),h()(o,[{key:"setShadow",value:function(){this.buttons.forEach((function(e){var i=new S.a(new t.Point(-.05,1),15);e.filters=[i]}))}},{key:"setReplay",value:function(){this._titleSpine.skeleton.setSkinByName(C.watchTheReplay),this._yesSpine.skeleton.setSkinByName(C.characterselect),this._noSpine.skeleton.setSkinByName(C.play),this.vo="end-menu-vo.mp3",this.text="Tap the PLAY BUTTON to watch the show you made, or tap the NEW button to make a new story with different choices."}},{key:"setPaused",value:function(){this._titleSpine.skeleton.setSkinByName(C.paused),this._yesSpine.skeleton.setSkinByName(C.characterselect),this._noSpine.skeleton.setSkinByName(C.back),this.vo="pause-menu-vo.mp3",this.text="Tap the ARROW to go back where you were, or the NEW button to make a new story with different choices."}},{key:"customShowAction",value:function(){var t=this;return this.customShowActionHandle=framework.Actions.Sequence([framework.Actions.Func((function(){t.view.alpha=1})),framework.Actions.Parallel([this.getVOCaptionAction(),framework.Actions.Sequence([framework.Actions.Parallel(this.buttons.map((function(e,i){return t.activebuttons[i]?Object(A.d)(e,w.a.show,!1):framework.Actions.Func()}))),framework.Actions.Parallel(this.buttons.map((function(e,i){return t.activebuttons[i]?Object(A.c)(e,w.a.idle,!0):framework.Actions.Func()})))])])]),this.customShowActionHandle}},{key:"playVO",value:function(){this.captionAction&&(this.cancelAction(this.captionAction),this.captionAction=null),this.runAction(this.getVOCaptionAction())}},{key:"getVOCaptionAction",value:function(){var t=this;return this.captionAction=framework.Actions.Sequence([framework.Actions.Func((function(){return t.captionService.displayCaption(t.text)})),new _.a(this.vo,this.diService),framework.Actions.Func((function(){return t.captionService.clearCaptions()}))]),this.captionAction}},{key:"customHideAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel(this.buttons.map((function(t){return Object(A.c)(t,w.a.hide,!1)}))),framework.Actions.Func((function(){t.buttons.forEach((function(t){t.visible=!1}))}))])}},{key:"stopVoAndCaptions",value:function(){this.captionAction&&(this.cancelAction(this.captionAction),this.captionAction=null),this.soundService.stopInstructionVo(),this.captionService.clearCaptions()}},{key:"update",value:function(t){if(!this._isBeingDeinit){c()(d()(o.prototype),"update",this).call(this,t);var e=t/2;this.manualSpines.forEach((function(t){return t.update(e)})),this.updateShadow()}}}]),o}(w.b);!function(t){t.paused="paused",t.watchTheReplay="watch-the-replay",t.back="back",t.characterselect="characterselect",t.play="play"}(C||(C={}))}).call(this,i(23))},function(t,e,i){"use strict";i.d(e,"a",(function(){return A}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(6),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(4);function w(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var A=function(t){y()(n,t);var e,i=(e=n,function(){var t,i=d()(e);if(w()){var n=d()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return f()(this,t)});function n(t,e){var o;return r()(this,n),(o=i.call(this,(function(t,e,i){o.play(t,e,i)}))).soundName=t,m()(c()(o),"_isPlaying",!1),m()(c()(o),"soundService",void 0),o.soundService=e.get(k.b.SoundService),o}return a()(n,[{key:"reset",value:function(){h()(d()(n.prototype),"reset",this).call(this),this.stop()}},{key:"play",value:function(t,e,i){var n=this;this.stop(),this.soundName?(this._isPlaying=!0,this.soundService.playInstructionVo(this.soundName,(function(){n._isPlaying=!1,t.finish()}))):t.finish()}},{key:"stop",value:function(){this.isPlaying()&&(this.soundService.stopInstructionVo(),this._isPlaying=!1)}},{key:"isPlaying",value:function(){return this._isPlaying}}]),n}(framework.BlockingFuncAction)},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return l}));var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(1),c=i.n(s),u=i(17),h=i(84),l=function(){function e(i){r()(this,e),this.view=i,c()(this,"stageBackwallPoint",new f(new t.Point(0,-210),new t.Point(1.5,-133))),c()(this,"stageBackwallScale",new f(new t.Point(1.4,1.4),new t.Point(1,1))),c()(this,"stageFloorPoint",new f(new t.Point(0,365),new t.Point(0,286))),c()(this,"stageFloorScale",new f(new t.Point(1.385,1.385),new t.Point(1,1))),c()(this,"stageSidewallPoint",new f(new t.Point(0,-145),new t.Point(0,-89))),c()(this,"stageSidewallScale",new f(new t.Point(1.5,1.5),new t.Point(1,1))),c()(this,"stageMainCurtainPoint",new f(new t.Point(-2.5,430),new t.Point(0,400))),c()(this,"stageMainCurtainScale",new f(new t.Point(1.27,1.27),new t.Point(1.1,1.1))),c()(this,"stage",void 0),c()(this,"sidewalls",void 0),c()(this,"backwall",void 0),c()(this,"mainCurtain",void 0),this.stage=Object(u.c)(this.view,"stage-stage"),this.sidewalls=Object(u.c)(this.view,"stage-sidewalls"),this.backwall=Object(u.c)(this.view,"stage-backwall"),this.mainCurtain=Object(u.c)(this.view,"maincurtain-anim"),this.reset()}return a()(e,[{key:"reset",value:function(){this.stage.position=this.stageFloorPoint.start,this.sidewalls.position=this.stageSidewallPoint.start,this.backwall.position=this.stageBackwallPoint.start,this.mainCurtain.position=this.stageMainCurtainPoint.start,this.stage.scale=this.stageFloorScale.start,this.sidewalls.scale=this.stageSidewallScale.start,this.backwall.scale=this.stageBackwallScale.start,this.mainCurtain.scale=this.stageMainCurtainScale.start}},{key:"getTransitionParalaxAction",value:function(){var t=h.Easing.Cubic.Out;return framework.Actions.Parallel([framework.Actions.Tween(this.mainCurtain.scale,{to:{x:this.stageMainCurtainScale.end.x,y:this.stageMainCurtainScale.end.y},duration:3,easing:t}),framework.Actions.Tween(this.mainCurtain.position,{to:{x:this.stageMainCurtainPoint.end.x,y:this.stageMainCurtainPoint.end.y},duration:3,easing:t}),framework.Actions.Tween(this.backwall.scale,{to:{x:this.stageBackwallScale.end.x,y:this.stageBackwallScale.end.y},duration:3,easing:t}),framework.Actions.Tween(this.backwall.position,{to:{x:this.stageBackwallPoint.end.x,y:this.stageBackwallPoint.end.y},duration:3,easing:t}),framework.Actions.Tween(this.sidewalls.scale,{to:{x:this.stageSidewallScale.end.x,y:this.stageSidewallScale.end.y},duration:3,easing:t}),framework.Actions.Tween(this.sidewalls.position,{to:{x:this.stageSidewallPoint.end.x,y:this.stageSidewallPoint.end.y},duration:3,easing:t}),framework.Actions.Tween(this.stage.scale,{to:{x:this.stageFloorScale.end.x,y:this.stageFloorScale.end.y},duration:3,easing:t}),framework.Actions.Tween(this.stage.position,{to:{x:this.stageFloorPoint.end.x,y:this.stageFloorPoint.end.y},duration:3,easing:t})])}}]),e}(),f=function t(e,i){r()(this,t),this.start=e,this.end=i}}).call(this,i(23))},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return C}));i(38),i(47),i(12),i(14),i(13),i(44),i(45);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(5),w=i(4),A=i(26),S=i(28),b=i(54),_=i(11);function D(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var C=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(D()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(t,e,i){var s;return r()(this,o),(s=n.call(this,t,e,i)).costumeSelectionPopOver=e,m()(a()(s),"choiceToCostumeMap",new Map([[S.f.parent1Father,_.a.puppabear],[S.f.parent1Mother,_.a.mummabear]])),m()(a()(s),"spines",new Map),s}return h()(o,[{key:"parentBear",get:function(){return this.characters.get(k.a.parentBear)}},{key:"babyBear",get:function(){return this.characters.get(k.a.babyBear)}}]),h()(o,[{key:"onInit",value:function(){this.diService.setDataWithKey(w.a.CueDialogLineDelegate,this),this.costumeSelectionPopOver.setIcons([_.a.mummabear,_.a.puppabear]),c()(d()(o.prototype),"onInit",this).call(this),this.setPopOverButtonInactive(),this.showCharacter()}},{key:"showCharacter",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.babyBear.getShowAndRiseUpAction(),framework.Actions.Func((function(){return t.babyBear.playIdle()}))]))}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setCostume(t),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.costumeSelectionPopOver.getOnSelectAnimAction(this.spines.get(t)),framework.Actions.Func((function(){return e.selectPopover.hide((function(){return e.onPopoverHidden(t)}))}))]))}},{key:"onPopoverHidden",value:function(t){var e=this;this.setParentBearPosition(),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.parentBear.getShowAndRiseUpAction(),framework.Actions.Func((function(){return e.parentBear.playIdle()})),framework.Actions.Func((function(){return e.didTerminate(t)}))]))}},{key:"setParentBearPosition",value:function(){this.parentBear.position=new t.Point(b.a.act1ParentBearXPosition,this.parentBear.y)}},{key:"setCostume",value:function(t){this.choiceDialog.finishChoice(t),this.costumeSelectionPopOver.setSelected(this.spines.get(t)),this.parentBear.setCostume(this.choiceToCostumeMap.get(t))}},{key:"onChoicesBeingPresented",value:function(t){var e=this;this.checkChoiceMade()||this.selectPopover.show((function(){e.setPopOverButtonActive(),e.spines.set(S.f.parent1Mother,e.costumeSelectionPopOver.buttonLeft),e.spines.set(S.f.parent1Father,e.costumeSelectionPopOver.buttonMiddle)}))}},{key:"onDeinit",value:function(){this.diService.setDataWithKey(w.a.CueDialogLineDelegate,null),c()(d()(o.prototype),"onDeinit",this).call(this)}},{key:"skip",value:function(){this.setParentBearPosition(),this.babyBear.show(),this.parentBear.show(),this.setCostume(this.choiceDialog.getDefaultChoice()),c()(d()(o.prototype),"skip",this).call(this)}}]),o}(A.a)}).call(this,i(23))},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return w}));i(12),i(14),i(13),i(80);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(6),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(4),y=i(5),g=i(54),m=i(22);function k(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var w=function(e){d()(o,e);var i,n=(i=o,function(){var t,e=f()(i);if(k()){var n=f()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return h()(this,t)});function o(){return r()(this,o),n.apply(this,arguments)}return a()(o,[{key:"onInit",value:function(){var t=this;this.setup(),this.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Sequence([framework.Actions.Delay(2),this.getNarratorAction()]),framework.Actions.Sequence([framework.Actions.Delay(3),this.bowl.getShowEmptySmallBowlAction()]),framework.Actions.Sequence([framework.Actions.Parallel([this.bed.getHideAction(),this.goldilocks.getHideAction(),this.door.getShowAction()]),this.door.getOpenAnimAction(),this.getBearShowAction(),this.door.getCloseAnimAction(),this.door.getHideAction(),framework.Actions.Func((function(){return c()(f()(o.prototype),"onInit",t).call(t)}))])]))}},{key:"setup",value:function(){this.setBearPositions(),this.setDoorPosition()}},{key:"getNarratorAction",value:function(){var t=this;return framework.Actions.Sequence([this.narrator.getHideAction(),framework.Actions.Func((function(){return t.setNarratorPosition()})),this.narrator.getShowAndRiseUpAction()])}},{key:"getBearShowAction",value:function(){return framework.Actions.Parallel([this.getParentBearAction(),this.getBabyBearAction()])}},{key:"getParentBearAction",value:function(){var t=this;return this.parentBear.setDirection(m.a.right),framework.Actions.Sequence([this.parentBear.getShowAndRiseUpAction(),this.parentBear.getCharacterMoveAction(this.locator.parentBearDoorPosition,(function(){return t.parentBear.playWalk()})),framework.Actions.Func((function(){return t.parentBear.playIdle()}))])}},{key:"getBabyBearAction",value:function(){var t=this;return this.babyBear.setDirection(m.a.right),framework.Actions.Sequence([this.babyBear.getShowAndRiseUpAction(),this.babyBear.getCharacterMoveAction(this.locator.babyBearDoorPosition,(function(){return t.babyBear.playWalk()})),framework.Actions.Func((function(){return t.babyBear.playIdle()}))])}},{key:"setBearPositions",value:function(){this.babyBear.x=this.locator.exitLeft.x,this.parentBear.x=this.locator.exitLeft.x}},{key:"setDoorPosition",value:function(){var e=new t.Point(this.locator.exitLeft.x,this.door.y);this.door.setPosition(e),this.door.setDirection(m.a.left)}},{key:"setNarratorPosition",value:function(){this.narrator.x=g.a.act3narratorXPosition,this.narrator.setDirection(m.a.left)}},{key:"skip",value:function(){this.setup(),this.bowl.skip(),this.bed.hideAll(),this.setNarratorPosition(),this.narrator.show(),this.goldilocks.hide(),this.parentBear.setDirection(m.a.right),this.babyBear.show(),this.parentBear.show(),c()(f()(o.prototype),"didTerminate",this).call(this,this.dialog.getLink(0).link),c()(f()(o.prototype),"skip",this).call(this)}},{key:"door",get:function(){return this.diService.getDataByKey(v.a.door)}},{key:"bowl",get:function(){return this.diService.getDataByKey(v.a.bowl)}},{key:"bed",get:function(){return this.diService.getDataByKey(v.a.bed)}},{key:"locator",get:function(){return this.diService.getDataByKey(v.a.locator)}},{key:"narrator",get:function(){return this.characters.get(y.a.narrator)}},{key:"goldilocks",get:function(){return this.characters.get(y.a.goldilocks)}},{key:"babyBear",get:function(){return this.characters.get(y.a.babyBear)}},{key:"parentBear",get:function(){return this.characters.get(y.a.parentBear)}}]),o}(i(20).a)}).call(this,i(23))},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return w}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(6),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(4),y=i(5),g=i(20),m=i(22);function k(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var w=function(e){d()(o,e);var i,n=(i=o,function(){var t,e=f()(i);if(k()){var n=f()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return h()(this,t)});function o(){return r()(this,o),n.apply(this,arguments)}return a()(o,[{key:"onInit",value:function(){var t=this;this.setupCharacters(),this.setupBed(),this.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Sequence([this.bearFurniture.getHideAction(),this.babyBear.getWalkToPositionAction(this.locator.babyBearPosition.x),this.bed.getShowAction()]),framework.Actions.Sequence([framework.Actions.Delay(4),framework.Actions.Parallel([framework.Actions.Func((function(){return t.goldilocks.show()})),framework.Actions.Sequence([this.goldilocks.getToLayAction(),framework.Actions.Func((function(){return t.goldilocks.playSnore()}))])]),framework.Actions.Func((function(){return c()(f()(o.prototype),"onInit",t).call(t)}))])]))}},{key:"setupCharacters",value:function(){this.goldilocks.setDirection(m.a.left);var e=framework.Vector.transformTo(this.bed.getBabyBearBed(),this.goldilocks.container.parent);this.goldilocks.position=new t.Point(e.x,e.y)}},{key:"setupBed",value:function(){this.bed.setSkinForType(this.bed.choiceId)}},{key:"skip",value:function(){this.setupBed(),this.setupCharacters(),this.bearFurniture.showAll(),this.bed.hideAll(),this.goldilocks.playToLay(),this.goldilocks.show(),this.babyBear.x=this.locator.babyBearPosition.x,this.parentBear.x=this.locator.parentBearPosition.x,c()(f()(o.prototype),"skip",this).call(this)}},{key:"bearFurniture",get:function(){return this.diService.getDataByKey(v.a.bearFurniture)}},{key:"bed",get:function(){return this.diService.getDataByKey(v.a.bed)}},{key:"narrator",get:function(){return this.characters.get(y.a.narrator)}},{key:"goldilocks",get:function(){return this.characters.get(y.a.goldilocks)}},{key:"babyBear",get:function(){return this.characters.get(y.a.babyBear)}},{key:"parentBear",get:function(){return this.characters.get(y.a.parentBear)}},{key:"locator",get:function(){return this.diService.getDataByKey(v.a.locator)}}]),o}(g.a)}).call(this,i(23))},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return A}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(6),c=i.n(s),u=i(8),h=i.n(u),l=i(0),f=i.n(l),p=i(9),d=i.n(p),v=i(20),y=i(5),g=i(4),m=i(54),k=i(22);function w(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var A=function(e){d()(o,e);var i,n=(i=o,function(){var t,e=f()(i);if(w()){var n=f()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return h()(this,t)});function o(){return r()(this,o),n.apply(this,arguments)}return a()(o,[{key:"onInit",value:function(){var t=this;this.setDoorPosition(),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.getNarratorAction(),this.door.getShowAction(),framework.Actions.Parallel([framework.Actions.Func((function(){return c()(f()(o.prototype),"onInit",t).call(t)})),framework.Actions.Func((function(){return t.character.playIdle()})),this.getKnockOnDoorAction()])]))}},{key:"getNarratorAction",value:function(){var t=this;return framework.Actions.Sequence([this.narrator.getHideAction(),framework.Actions.Func((function(){return t.setNarratorPosition()})),this.narrator.getShowAndRiseUpAction()])}},{key:"setNarratorPosition",value:function(){this.narrator.position=this.locator.exitLeft.position,this.narrator.setDirection(k.a.right)}},{key:"getKnockOnDoorAction",value:function(){return framework.Actions.Sequence([this.character.getWalkToPositionAction(m.a.act1NextToDoorXPosition),framework.Actions.Delay(1.5),this.door.getKnockAnimAction()])}},{key:"setDoorPosition",value:function(){var e=new t.Point(this.locator.exitRight.x,this.door.y);this.door.setPosition(e),this.door.setDirection(k.a.right)}},{key:"skip",value:function(){c()(f()(o.prototype),"skip",this).call(this),this.setNarratorPosition(),this.character.x=m.a.act1NextToDoorXPosition,this.character.playIdle(),this.narrator.playIdle()}},{key:"character",get:function(){return this.characters.get(y.a.goldilocks)}},{key:"narrator",get:function(){return this.characters.get(y.a.narrator)}},{key:"door",get:function(){return this.diService.getDataByKey(g.a.door)}},{key:"locator",get:function(){return this.diService.getDataByKey(g.a.locator)}}]),o}(v.a)}).call(this,i(23))},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return b}));i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(7),a=i.n(o),s=i(6),c=i.n(s),u=i(2),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(20),w=i(5),A=i(17);function S(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var b=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(S()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(t,e,i){var s;return r()(this,o),s=n.call(this,t,e),m()(a()(s),"target",void 0),s.target=Object(A.c)(i,t.location),s}return h()(o,[{key:"character",get:function(){return this.characters.get(w.a.goldilocks)}}]),h()(o,[{key:"onInit",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getCharacterMoveActionToPoint(this.getTargetPosition(),(function(){return t.character.playWalk()})),framework.Actions.Func((function(){return t.character.playIdle()})),framework.Actions.Func((function(){return c()(d()(o.prototype),"onInit",t).call(t)}))]))}},{key:"getTargetPosition",value:function(){return new t.Point(this.target.x-250,this.character.y)}},{key:"skip",value:function(){this.character.position=this.getTargetPosition(),c()(d()(o.prototype),"skip",this).call(this)}}]),o}(k.a)}).call(this,i(23))},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return D}));i(57),i(12),i(14),i(13);var n=i(3),r=i.n(n),o=i(2),a=i.n(o),s=i(7),c=i.n(s),u=i(6),h=i.n(u),l=i(8),f=i.n(l),p=i(0),d=i.n(p),v=i(9),y=i.n(v),g=i(1),m=i.n(g),k=i(5),w=i(20),A=i(4),S=i(11),b=i(22);function _(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var D=function(e){y()(o,e);var i,n=(i=o,function(){var t,e=d()(i);if(_()){var n=d()(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f()(this,t)});function o(){var t;r()(this,o);for(var e=arguments.length,i=new Array(e),a=0;a<e;a++)i[a]=arguments[a];return t=n.call.apply(n,[this].concat(i)),m()(c()(t),"characterPosition",void 0),m()(c()(t),"action",null),t}return a()(o,[{key:"onInit",value:function(){var t=this;this.setupCinderella(),this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return h()(d()(o.prototype),"onInit",t).call(t)})),this.carriage.getShowPumpkinAction(),this.cinderella.getShowAndRiseUpAction(),this.getMoppingAction()]))}},{key:"setupCinderella",value:function(){this.cinderella.setCostume(S.a.cinderella),this.cinderella.addCostume(S.a.mop)}},{key:"getMoppingAction",value:function(){var e=this;return this.characterPosition=new t.Point(this.cinderella.x,this.cinderella.y),this.action=framework.Actions.Sequence([this.cinderella.getCharacterMoveAction(this.locator.exitLeft,(function(){return e.cinderella.playMopping()}),5),framework.Actions.Func((function(){return e.cinderella.setDirection(b.a.right)})),this.cinderella.getCharacterMoveAction(this.locator.middleRight,(function(){return e.cinderella.playMopping()}),5),framework.Actions.Func((function(){return e.cinderella.setDirection(b.a.left)})),this.cinderella.getCharacterMoveAction(this.locator.exitLeft,(function(){return e.cinderella.playMopping()}),5),framework.Actions.Func((function(){return e.cinderella.setDirection(b.a.right)})),this.cinderella.getCharacterMoveAction(this.locator.middleRight,(function(){return e.cinderella.playMopping()}),5),framework.Actions.Func((function(){return e.cinderella.setDirection(b.a.left)})),this.cinderella.getCharacterMoveActionToPoint(this.characterPosition,(function(){return e.cinderella.playMopping()}),2),framework.Actions.Func((function(){return e.cinderella.playIdle()}))]),this.action}},{key:"skip",value:function(){this.action&&this.actionManagerDelegate.cancelAction(this.action),this.setupCinderella(),this.carriage.showPumpkin(),this.cinderella.show(),this.characterPosition&&(this.cinderella.x=this.characterPosition.x),h()(d()(o.prototype),"skip",this).call(this)}},{key:"cinderella",get:function(){return this.characters.get(k.a.cinderella)}},{key:"carriage",get:function(){return this.diService.getDataByKey(A.a.carriage)}},{key:"locator",get:function(){return this.diService.getDataByKey(A.a.locator)}}]),o}(w.a)}).call(this,i(23))},,function(t,e,i){i(195),t.exports=i(549)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){[Element.prototype,Document.prototype,DocumentFragment.prototype].forEach((function(t){t.hasOwnProperty("append")||Object.defineProperty(t,"append",{configurable:!0,enumerable:!0,writable:!0,value:function(){var t=Array.prototype.slice.call(arguments),e=document.createDocumentFragment();t.forEach((function(t){var i=t instanceof Node;e.appendChild(i?t:document.createTextNode(String(t)))})),this.appendChild(e)}})}))},function(t,e){!function(t,e,i){var n=function(e){return e&&e.constructor===t};i.isArray=n;var r=function(t){return n(t)?t:[t]};i.arrayify=r,e.defineProperty(t.prototype,"clone",{enumerable:!1,writable:!1,value:function(t){if(t){var i=[];return this.forEach((function(t){i.push(e.clone(t,!0))})),i}return this.slice()}});var o=function(e,i){if(isFunction(t.prototype.indexOf)){var n=e.indexOf(i);return n>-1?e.splice(n,1)[0]:void 0}};e.defineProperty(t.prototype,"remove",{enumerable:!1,writable:!1,value:function(t){if(n(t)){var e=[],i=this;return t.forEach((function(t){var n=o(i,t);n&&e.push(n)})),e}return o(this,t)}}),e.defineProperty(t.prototype,"clear",{enumerable:!1,writable:!1,value:function(){this.splice(0,this.length)}}),t.prototype.hasItems||e.defineProperty(t.prototype,"hasItems",{get:function(){return this.length>0}}),t.prototype.append||e.defineProperty(t.prototype,"append",{enumerable:!1,writable:!1,value:function(t){this.push.apply(this,r(t))}}),t.prototype.shuffle||e.defineProperty(t.prototype,"shuffle",{enumerable:!1,writable:!1,value:function(){for(var t,e,i=this.length;i;t=Math.floor(Math.random()*i),e=this[--i],this[i]=this[t],this[t]=e);return this}}),t.prototype.random||e.defineProperty(t.prototype,"random",{enumerable:!1,writable:!1,value:function(){return this[Math.floor(Math.random()*this.length)]}}),t.prototype.first||e.defineProperty(t.prototype,"first",{enumerable:!1,writable:!1,value:function(){return this[0]}}),t.prototype.middle||e.defineProperty(t.prototype,"middle",{enumerable:!1,writable:!1,value:function(){return this[this.middleIndex]}}),t.prototype.last||e.defineProperty(t.prototype,"last",{enumerable:!1,writable:!1,value:function(){return this[this.length-1]}}),t.prototype.wrapIndex||e.defineProperty(t.prototype,"wrapIndex",{enumerable:!1,writable:!1,value:function(t,e,i){return e=e||0,i=i||this.length,Math.wrap(t,e,i)}}),t.prototype.clampIndex||e.defineProperty(t.prototype,"clampIndex",{enumerable:!1,writable:!1,value:function(t,e,i){return e=e||0,i=i||this.length-1,Math.clamp(t,e,i)}}),t.prototype.middleIndex||e.defineProperty(t.prototype,"middleIndex",{get:function(){return Math.max(Math.ceil(.5*this.length-1),0)}}),t.prototype.lastIndex||e.defineProperty(t.prototype,"lastIndex",{get:function(){return this.length-1}}),t.prototype.containsIndex||e.defineProperty(t.prototype,"containsIndex",{enumerable:!1,writable:!1,value:function(t){return Math.isInRange(t,0,this.length-1)}}),t.prototype.randomIndex||e.defineProperty(t.prototype,"randomIndex",{enumerable:!1,writable:!1,value:function(t){if(0===this.length)return-1;var e,i=!1;void 0!==t&&t>=0&&t<this.length&&(i=!0);do{e=Math.floor(Math.random()*this.length)}while(i&&e===t);return e}}),t.prototype.count||e.defineProperty(t.prototype,"count",{value:function(t,e){if(t){e||(e=this);for(var i=0,n=0;n<this.length;n++)t.call(this,this[n],n,this)&&i++;return i}}}),t.prototype.find||e.defineProperty(t.prototype,"find",{value:function(t){if(null===this)throw new TypeError('"this" is null or not defined');var i=e(this),n=i.length>>>0;if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var r=arguments[1],o=0;o<n;){var a=i[o];if(t.call(r,a,o,i))return a;o++}}}),t.prototype.findIndex||e.defineProperty(t.prototype,"findIndex",{value:function(t){if(null===this)throw new TypeError('"this" is null or not defined');var i=e(this),n=i.length>>>0;if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var r=arguments[1],o=0;o<n;){var a=i[o];if(t.call(r,a,o,i))return o;o++}return-1}}),t.prototype.indexOf||(t.prototype.indexOf=function(t,i){var n;if(null===this)throw new TypeError('"this" is null or not defined');var r=e(this),o=r.length>>>0;if(0===o)return-1;var a=0|i;if(a>=o)return-1;for(n=Math.max(a>=0?a:o-Math.abs(a),0);n<o;){if(n in r&&r[n]===t)return n;n++}return-1}),t.prototype.contains||e.defineProperty(t.prototype,"contains",{value:function(t){for(var e=0;e<this.length;e++)if(this[e]===t)return!0;return!1}}),t.prototype.reverseForEach||e.defineProperty(t.prototype,"reverseForEach",{value:function(t,e){if(t){e||(e=this);for(var i=this.length-1;i>=0;i--)t.call(e,this[i],i,this)}}}),t.prototype.filterOutDuplicates||e.defineProperty(t.prototype,"filterOutDuplicates",{value:function(){return this.filter((function(t,e,i){return i.indexOf(t)==e}))}}),t.prototype.filterOutNulls||e.defineProperty(t.prototype,"filterOutNulls",{value:function(){return this.filter((function(t,e,i){return!!t}))}}),t.prototype.filterOutItems||e.defineProperty(t.prototype,"filterOutItems",{value:function(t){return t=r(t),this.filter((function(e,i,n){return!t.contains(e)}))}})}(Array,Object,window)},function(t,e){!function(t){t.toSignedInt||(t.toSignedInt=function(t){return t?1:-1}),t.toUnsignedInt||(t.toUnsignedInt=function(t){return t?1:0})}(Boolean)},function(t,e){HTMLAudioElement,HTMLAudioElement.prototype.stop||Object.defineProperty(HTMLAudioElement.prototype,"stop",{value:function(){this.pause(),this.currentTime=0,this.src=""}})},function(t,e){HTMLCanvasElement.prototype.toBlob||Object.defineProperty(HTMLCanvasElement.prototype,"toBlob",{value:function(t,e,i){var n=this;setTimeout((function(){for(var r=atob(n.toDataURL(e,i).split(",")[1]),o=r.length,a=new Uint8Array(o),s=0;s<o;s++)a[s]=r.charCodeAt(s);t(new Blob([a],{type:e||"image/png"}))}))}})},function(t,e){!function(t){window.MathExt=t;var e=180/t.PI,i=t.PI/180;t.QUARTER_PI=.25*t.PI,t.HALF_PI=.5*t.PI,t.TWO_PI=2*t.PI,t.toDegrees=function(t){return t*e},t.toRadians=function(t){return t*i},t.lerp=function(t,e,i){return(1-i)*t+i*e},t.inverseLerp=function(t,e,i){return(i-t)/(e-t)},t.wrap=function(e,i,n){var r=t.min(i,n),o=t.max(i,n),a=t.abs(o-r);if(a<1e-4)return r;var s=(e-r)/a;return s=r+(s-=t.floor(s))*a},t.clamp=function(e,i,n){return t.min(t.max(e,i),n)},t.saturate=function(e){return t.clamp(e,0,1)},t.isInRange=function(t,e,i){return void 0===i&&(i=e,e=0),t<=i&&t>=e},t.mapValueToRange=function(e,i,n,r,o){var a=t.inverseLerp(i,n,e);return t.lerp(r,o,a)},t.sign||(t.sign=function(t){return(t>0)-(t<0)||+t}),t.randomInt=function(e,i){return void 0===i&&(i=e,e=0),t.floor(t.random()*(i-e+1))+e},t.randomFloat=function(e,i){return void 0===i&&(i=e,e=0),t.random()*(i-e)+e}}(Math)},function(t,e){!function(t){t.isInteger=t.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},t.isZero=function(e,i){return t.isInteger(e)?0===e:(isDefined(i)||(i=1e-4),Math.abs(e)<i)},t.equals=function(e,i,n){return t.isInteger(e)&&t.isInteger(i)?e===i:(isDefined(n)||(n=1e-4),t.isZero(Math.abs(e-i),n))},t.isEven=function(t){return t%2==0},t.isOdd=function(e){return!t.isEven(e)},t.prototype.mod=function(t){return(this%t+t)%t}}(Number)},function(t,e){!function(t){t.extend=function(e,i){var n,r,o;"boolean"==typeof i?(n=2,o=i):(n=1,o=!0),e=e||{},r=Array.prototype.slice.call(arguments,n);for(var a=0;a<r.length;a++){var s=r[a];if(s)for(var c in s)o?s[c]&&s[c].constructor===t?e[c]&&e[c].constructor!==t?e[c]=s[c]:(e[c]=e[c]||{},t.extend(e[c],o,s[c])):(isArray(s[c]),e[c]=s[c]):isArray(s[c])?e[c]=s[c].clone():e[c]=s[c]}return e},t.clone=function(e,i){return t.extend({},i,e)},t.values=function(e){var i=[];if(e=e||{},t.keys){for(var n=t.keys(e),r=0;r<n.length;r++)i.push(e[n[r]]);return i}for(var o in e)i.push(e[o]);return i},t.omitProperties=function(t,e){var i={},n=e||[];if(n.constructor!==Array)return i;for(var r in t=t||{})-1==n.indexOf(r)&&(i[r]=t[r]);return i},t.defineProperty(t.prototype,"forIn",{enumerable:!1,writable:!0,value:function(t,e){if(t)for(var i in e||(e=this),this)t.call(e,this[i],i)}}),t.defineProperty(t.prototype,"reverseForIn",{enumerable:!1,writable:!0,value:function(t,e){if(t){var i;e||(e=this);var n=[];for(i in this)n.push(i);for(var r=n.length-1;r>=0;r--)i=n[r],t.call(e,this[i],i)}}}),t.defineProperty(t.prototype,"arrayify",{enumerable:!1,writable:!0,value:function(){return t.keys(this).map((function(t){return this[t]}),this)}}),t.defineProperty(t.prototype,"map",{enumerable:!1,writable:!0,value:function(e,i){if(!e)return t.clone(this,!0);i||(i=this);var n={};for(var r in this)n[r]=e.call(i,this[r],r);return n}})}(Object)},function(t,e){!function(t){t.prototype.padStart||(t.prototype.padStart=function(e,i){return e>>=0,i=t(i||" "),this.length>e?t(this):((e-=this.length)>i.length&&(i+=i.repeat(e/i.length)),i.slice(0,e)+t(this))}),t.prototype.padEnd||(t.prototype.padEnd=function(e,i){return e>>=0,i=t(i||" "),this.length>e?t(this):((e-=this.length)>i.length&&(i+=i.repeat(e/i.length)),t(this)+i.slice(0,e))})}(String)},function(t,e){var i,n;(n=(i=function(){this._creators={}}).prototype).registerCreator=function(t,e){this._creators[t]=e},n.registerCreators=function(t){var e=this;(t=t||[]).forEach((function(t){e._creators[t.creatorKey]=t.creatorFunc}))},n.deregisterCreator=function(t){delete this._creators[t]},n.deregisterCreators=function(){this._creators={}},n.defaultCreator=function(t){return function(e,i){return new t(e)}},namespace("framework").BaseFactory=i},function(t,e){var i,n;n=function(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t},(i={colourToNumber:function(t){return 3==(t=t.replace("#","")).length&&(t=t.charAt(0)+t.charAt(0)+t.charAt(1)+t.charAt(1)+t.charAt(2)+t.charAt(2)),parseInt(t,16)},numberToColour:function(t){return"#"+t.toString(16)},rgbToHex:function(t){return parseInt(("0"+t.r.toString(16)).slice(-2)+("0"+t.g.toString(16)).slice(-2)+("0"+t.b.toString(16)).slice(-2),16)},hexToRGB:function(t){return{r:(t>>16&255)/255,g:(t>>8&255)/255,b:(255&t)/255}},cssColourToRGB:function(t){var e={r:0,g:0,b:0,a:1},i=/^rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d+(?:\.\d+)?))?\s*\)$/.exec(t);return i&&(e.r=parseInt(i[1],10),e.g=parseInt(i[2],10),e.b=parseInt(i[3],10),e.a=void 0!==i[4]?parseFloat(i[4]):1),e},rgbFloatToHex:function(t,e,n){var r={r:t,g:e,b:n};if(isDefined(t)){isDefined(e)||isDefined(n)||(r={r:t.r,g:t.g,b:t.b}),r.r=Math.floor(255*r.r),r.g=Math.floor(255*r.g),r.b=Math.floor(255*r.b);var o=r.r.toString(16).padStart(2,"0")+r.g.toString(16).padStart(2,"0")+r.b.toString(16).padStart(2,"0");return i.colourToNumber(o)}},rgbHexToFloat:function(t){return isDefined(t)?{r:(t>>16&&255)/255,g:(t>>8&&255)/255,b:(t&&255)/255}:null}}).hslToRgb=function(t,e,i){isDefined(i)||(i=.5),isDefined(e)||(e=1);var r={r:0,g:0,b:0};if(e>1e-4){var o=i<.5?i*(1+e):i+e-i*e,a=2*i-o;r.r=n(a,o,t+1/3),r.g=n(a,o,t),r.b=n(a,o,t-1/3)}else red=i,green=i,blue=i;return r},i.biasHueAngle=function(t){t-=1/12;var e=.5*Math.cos(6*t*Math.PI)+.5;return e*=1/12,t+(e+=1/12*.5)},i.lerp=function(t,e,n){return i.lerpArray([t,e],n)},i.lerpArray=function(t,e){if(!isArray(t)||!t.hasItems)return null;if(1==t.length||e<=0)return t[0];if(e>=1)return t.last();var n=t.length-1,r=Math.floor(e*n),o=r+1,a=i.hexToRGB(t[r]),s=i.hexToRGB(t[o]),c=r/n,u=o/n,h=Math.inverseLerp(c,u,e),l={r:Math.lerp(a.r,s.r,h),g:Math.lerp(a.g,s.g,h),b:Math.lerp(a.b,s.b,h)};return i.rgbFloatToHex(l)},namespace("framework").ColourUtils=i},function(t,e){var i;i={},Object.defineProperty(i,"isTouchDevice",{get:function(){return"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0}}),Object.defineProperty(i,"isDesktop",{get:function(){return!i.isTouchDevice}}),Object.defineProperty(i,"isWindowsPhone",{get:function(){var t=navigator.userAgent;return/Windows Phone/i.test(t)||/IEMobile/i.test(t)}}),Object.defineProperty(i,"isChrome",{get:function(){var t=navigator.userAgent;return/Chrome\/(\d+)/.test(t)&&!i.isWindowsPhone}}),Object.defineProperty(i,"isIE11",{get:function(){return navigator.userAgent.indexOf("Trident/7.0")>0}}),Object.defineProperty(i,"isAndroid",{get:function(){var t=navigator.userAgent;return/Android/i.test(t)}}),Object.defineProperty(i,"isiOS",{get:function(){return(/iPad|iPhone|iPod/.test(navigator.platform)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1)&&!window.MSStream}}),namespace("framework").DeviceUtils=i},function(t,e){var i,n;n=0,(i={}).generateGUID=function(){return n++},i.generateGUIDString=function(){return""+n++},namespace("framework").GeneralUtils=i},function(t,e){!function(){var t,e,i=navigator.userAgent;t=i.indexOf("Safari")>=0?"Safari":i.indexOf("Firefox")>=0?"Firefox":i.indexOf("IE")>=0||i.indexOf("Edge")?"IE":"Chrome";var n,r={cancel:3,backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":"Mac"==(e=i.indexOf("Windows")>=0?"Windows":i.indexOf("Mac")>=0||i.indexOf("iOS")>=0||i.indexOf("iPhone")>=0||i.indexOf("iPad")>=0?"Mac":"Linux")&&"Firefox"!=t?126:19,caps_lock:20,esc:27,spacebar:32,pageup:33,pagedown:34,end:35,home:36,arrow_left:37,arrow_up:38,arrow_right:39,arrow_down:40,print_screen:"Linux"==e?42:"Mac"==e&&"Firefox"!=t?124:44,insert:45,delete:46,scroll_lock:"Mac"==e&&"Firefox"!=t?125:145,OS:"Firefox"==t?"Mac"==e?224:91:[91,"Mac"==e?93:92],context_menu:"Mac"==e?0:93,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"\\":220,"[":219,"]":221,"'":222,"num_*":106,"num_+":107,num_enter:108,"num_-":109,"num_.":110,"num_/":111,num_lock:"Mac"==e?12:144,clear:"Mac"==e?12:144};for(n=65;n<=90;++n)r[String.fromCharCode(n+32)]=n;for(n=48;n<=57;++n)r[String.fromCharCode(n)]=n;for(n=96;n<=105;++n)r["num_"+(n-96)]=n;for(n=112;n<=123;++n)r["F"+(n-111)]=n;"Mac"==e?r.meta=r.command=r.OS:(r.meta=r.ctrl,r.command=0),namespace("framework").USLocale=r}(),function(){var t=include("framework.USLocale"),e=function(e){var i=t;this._onFocusLost=this._onFocusLost.bind(this),this._onPaused=this._onPaused.bind(this),this._onResumed=this._onResumed.bind(this),this._update=this._update.bind(this),this._keyDown=this._keyDown.bind(this),this._keyUp=this._keyUp.bind(this),this.target=e,e.addEventListener("onblur",this._onFocusLost);var n=this._keysByCode={},o=this._keysByName={};for(var a in this._activeCombos=[],this._updatedKeys=[],this.detectKeyCallback=null,this.detectCancelKey=null,this.detectModifiers=!1,this.modifiers=["ctrl","alt","shift","command"],this.scrollKeys=["arrow_down","arrow_up","arrow_left","arrow_right","spacebar"],i){var s=i[a];Array.isArray(s)||(s=[s]);var c,u=null;for(c=0;c<s.length;++c)if(n[s[c]]){u=n[s[c]];break}for(u||(u=new r),u.addName(a),u.addCode(s),o[a]=u,c=0;c<s.length;++c)n[s[c]]=u}this.enabled=!0,app.onPaused(this._onPaused),app.onResumed(this._onResumed)},n=e.prototype;n.addKeyDown=function(t,e,i){if(Array.isArray(t))for(var n=0;n<t.length;++n)this.addKeyDown(t[n],e,i);else{var r=this._keysByName[t];r&&r.addListener(e,1,t,!!i)}},n.removeKeyDown=function(t,e,i){if(Array.isArray(t))for(var n=0;n<t.length;++n)this.removeKeyDown(t[n],e,i);else{var r=this._keysByName[t];r&&r.removeListener(e,1)}},n.addKeyRepeat=function(t,e,i){if(Array.isArray(t))for(var n=0;n<t.length;++n)this.addKeyRepeat(t[n],e,i);else{var r=this._keysByName[t];r&&r.addListener(e,2,t,!!i)}},n.removeKeyRepeat=function(t,e){if(Array.isArray(t))for(var i=0;i<t.length;++i)this.removeKeyRepeat(t[i],e,preventDefault);else{var n=this._keysByName[t];n&&n.removeListener(e,2)}},n.addKeyUp=function(t,e,i){if(Array.isArray(t))for(var n=0;n<t.length;++n)this.addKeyUp(t[n],e,i);else{var r=this._keysByName[t];r&&r.addListener(e,3,t,!!i)}},n.removeKeyUp=function(t,e){if(Array.isArray(t))for(var i=0;i<t.length;++i)this.removeKeyUp(t[i],e,preventDefault);else{var n=this._keysByName[t];n&&n.removeListener(e,3)}},n.setPreventDefaultOnKey=function(t,e){if(Array.isArray(t))for(var i=0;i<t.length;++i)this.setPreventDefaultOnKey(t[i],e);else{var n=this._keysByName[t];n&&n.setManualPreventDefault(e)}},n.addCombo=function(t,e,i){!1!==i&&(i=!0);for(var n,r=this._activeCombos,a=r.length-1;a>=0;--a)if(r[a].name==t&&r[a].preventDefault==i){n=r[a];break}n||(n=new o(t,i,this._keysByName),r.push(n)),n.addListener(e)},n.removeCombo=function(t,e){for(var i=this._activeCombos,n=i.length-1;n>=0;--n)i[n].name==t&&i[n].removeListener(e)&&(n==i.length-1?i.pop():i.splice(n,1))},n.detectNextKey=function(t,e,i){void 0===e?e=this._keysByName.esc:e&&(e=this._keysByName[e]),this.detectKeyCallback=t,this.detectCancelKey=e||null,this.detectModifiers=!!i},n.stopDetecting=function(){this.detectKeyCallback=null,this.detectCancelKey=null},n.justPressed=function(t){var e=this._keysByName[t];return!!e&&e.justDown},n.isDown=function(t){var e=this._keysByName[t];return!!e&&e.isDown},n.justReleased=function(t){var e=this._keysByName[t];return!!e&&e.justUp},Object.defineProperty(n,"enabled",{get:function(){return this._enabled},set:function(t){this._enabled=t;var e=this.target;e.removeEventListener("keydown",this._keyDown,!0),e.removeEventListener("keyup",this._keyUp,!0),app.offUpdate(this._update),t?(e.addEventListener("keydown",this._keyDown,!0),e.addEventListener("keyup",this._keyUp,!0),app.onUpdate(this._update)):this.clearKeys()}}),n.clearKeys=function(){var t=this._keysByCode;if(t)for(var e in t){var i=t[e];i.isDown=i.justDown=i.justUp=!1}},n._onFocusLost=function(t){this.clearKeys()},n._onPaused=function(){this.enabled=!1},n._onResumed=function(){this.enabled=!0;var t=this.target;t&&t.focus&&t.focus()},n._update=function(t){var e=this._updatedKeys;if(e&&e.length){for(var i=e.length-1;i>=0;--i){var n=e[i];n.justDown=n.justUp=!1}e.length=0}},n._keyDown=function(t){var e,i=this._keysByCode[t.keyCode];if(this.detectKeyCallback){var n=this.detectKeyCallback;if(i&&i==this.detectCancelKey)this.detectKeyCallback=null,n(null);else{var o=!1,a=this.modifiers;if(this.detectModifiers)for(e=0;e<a.length;++e)if(i===this._keysByName[a[e]]){o=!0;break}if(!o){this.detectKeyCallback=null,i||(i=new r(t.keyCode,"key_"+t.keyCode),this._keysByCode[t.keyCode]=i,this._keysByName[i.name]=i);var s=i.preferredName;if(this.detectModifiers)for(e=0;e<a.length;++e)this._keysByName[a[e]].isDown&&(s=a[e]+" + "+s);n(s)}}}if(i){var c=!1;if(i.isDown)i.trigger(2);else for(i.isDown=i.justDown=!0,-1==this._updatedKeys.indexOf(i)&&this._updatedKeys.push(i),i.trigger(1),e=this._activeCombos.length-1;e>=0;--e)this._activeCombos[e].testKeyDown(t.keyCode)&&(c=!0);if(i.shouldPreventDefault||c)return t.preventDefault(),!0}},n._keyUp=function(t){var e=this._keysByCode[t.keyCode];if(e){var i=!1;if(e.isDown){e.isDown=!1,e.justUp=!0,-1==this._updatedKeys.indexOf(e)&&this._updatedKeys.push(e),e.trigger(3);for(var n=this._activeCombos.length-1;n>=0;--n)this._activeCombos[n].testKeyUp(t.keyCode)&&(i=!0)}if(e.shouldPreventDefault||i)return t.preventDefault(),!0}},n.destroy=function(){var t;for(t in this.enabled=!1,app&&(app.offPaused(this._onPaused),app.offResumed(this._onResumed)),this.target.removeEventListener("onblur",this._onFocusLost),this._keysByCode)this._keysByCode[t].destroy();for(t=this._activeCombos.length-1;t>=0;--t)this._activeCombos[t].destroy();this._keysByCode=this._keysByName=this._updatedKeys=this._activeCombos=this.target=null,this._update=this._keyDown=this._keyUp=this._onResumed=this._onPaused=this._onFocusLost=null},namespace("framework").Keyboard=e;var r=function(){this.codes=[],this.names=[],this.preferredName=null,this.upListeners=[],this.repeatListeners=[],this.downListeners=[],this.manualPreventDefault=!1,this.shouldPreventDefault=!1,this.isDown=!1,this.justDown=!1,this.justUp=!1};(n=r.prototype).addCode=function(t){if(Array.isArray(t))for(var e=0;e<t.length;++e)this.codes.push(t[e]);else this.codes.push(t)},n.addName=function(t){this.names.length||(this.preferredName=t),this.names.push(t)},n.setManualPreventDefault=function(t){if(this.manualPreventDefault=t,t)this.shouldPreventDefault=!0;else{t=!1;for(var e=[this.downListeners,this.repeatListeners,this.upListeners],i=0;i<e.length&&!t;++i)for(var n=e[i],r=n.length-1;r>=0;--r)if(n[r]&&n[r].preventDefault){t=!0;break}this.shouldPreventDefault=t}},n.addListener=function(t,e,i,n){var r;switch(e){case 1:r=this.downListeners;break;case 2:r=this.repeatListeners;break;case 3:r=this.upListeners}-1==r.indexOf(t)&&r.push(t),this.preferredName!=i&&(this.preferredName=i),t.preventDefault=n,n&&(this.shouldPreventDefault=!0)},n.removeListener=function(t,e){var i;switch(e){case 1:i=this.downListeners;break;case 2:i=this.repeatListeners;break;case 3:i=this.upListeners}var n=i.indexOf(t);n>=0&&(n<1?i.shift():i.splice(n,1)),this.setManualPreventDefault(this.manualPreventDefault)},n.trigger=function(t){var e;switch(t){case 1:e=this.downListeners;break;case 2:e=this.repeatListeners;break;case 3:e=this.upListeners}for(var i=0;i<e.length;++i)e[i](this.preferredName)},n.destroy=function(){this.codes=this.names=this.upListeners=this.repeatListeners=this.downListeners=null};var o=function(t,e,i){this.name=t,this.listeners=[],this.steps=[],this.currentStep=0,this.preventDefault=e;for(var n=t.split(/\s+>\s+/g),r=0;r<n.length;++r){for(var o=n[r].split(/\s+\+\s+/g),a=[],s=0;s<o.length;++s){var c=o[s];"\\>"==c?c=">":"\\+"==c&&(c="+");var u=i[c];u&&a.push({sated:!1,released:!1,codes:u.codes})}a.length&&this.steps.push(a)}};(n=o.prototype).testKeyDown=function(t){var e,i,n=this.steps[this.currentStep],r=!1;for(e=0;e<n.length;++e)if((i=n[e]).codes.indexOf(t)>=0){if(i.sated)break;i.sated=!0,r=!0;break}if(!r)return this.resetStep(),this.currentStep=0,!1;var o=!0;for(e=0;e<n.length;++e)if(!(i=n[e]).sated){o=!1;break}return o&&this.currentStep+1==this.steps.length&&(this.trigger(),this.resetStep(),this.currentStep=0),this.preventDefault},n.testKeyUp=function(t){var e,i,n=this.steps[this.currentStep],r=!1;for(e=0;e<n.length;++e)if((i=n[e]).sated&&i.codes.indexOf(t)>=0){i.released=!0,r=!0;break}if(r){var o=!0;for(e=0;e<n.length;++e)if(!n[e].released){o=!1;break}o&&(this.resetStep(),++this.currentStep)}return r&&this.preventDefault},n.resetStep=function(){var t=this.steps[this.currentStep];for(i=0;i<t.length;++i)key=t[i],key.sated=key.released=!1},n.trigger=function(){for(var t=this.listeners,e=0;e<t.length;++e)t[e](this.name)},n.addListener=function(t){var e=this.listeners;-1==e.indexOf(t)&&e.push(t)},n.removeListener=function(t){var e=this.listeners,i=e.indexOf(t);return i>=0&&(i<1?e.shift():e.splice(i,1)),e.length<1},n.destroy=function(){this.listeners=this.steps=null}}()},function(t,e){var i,n;(n=(i=function(t){var e=Object.extend({createFunc:function(t,e){return{}},destroyFunc:null,initFunc:null,deinitFunc:null,createArgs:{},destroyArgs:{},initArgs:{},deinitArgs:{},capacity:5},t);if(!e.createFunc)throw"ObjectPool: createFunc is null.";this._defaultGrowCapacity=e.capacity,this._createFunc=e.createFunc,this._destroyFunc=e.destroyFunc,this._initFunc=e.initFunc,this._deinitFunc=e.deinitFunc,this._createArgs=e.createArgs,this._destroyArgs=e.destroyArgs,this._initArgs=e.initArgs,this._deinitArgs=e.deinitArgs,this._objs=[],this._usedIndices=[],this.grow(this._defaultGrowCapacity)}).prototype).destroy=function(){this.clear(),this._objs=null,this._usedIndices=null,this._createFunc=null,this._destroyFunc=null,this._initFunc=null,this._deinitFunc=null,this._createArgs=null,this._destroyArgs=null,this._initArgs=null,this._deinitArgs=null},n.get=function(t){if(t=t||this._initArgs,this.isAtFullCapacity()){var e=this.capacity()||this._defaultGrowCapacity;this.grow(e)}var i=this.getNextAvailableIndex();this._usedIndices.push(i),this._usedIndices.sort((function(t,e){return t-e}));var n=this._objs[i];return this._initFunc&&this._initFunc(n,t,i),n},n.release=function(t,e){e=e||this._deinitArgs;var i=this._objs.indexOf(t),n=this._usedIndices.indexOf(i);-1!=n&&(this._deinitFunc&&this._deinitFunc(t,e,n),this._usedIndices.splice(n,1))},n.grow=function(t){if((t=t||this.capacity())>0){var e=this.capacity();this._objs.length+=Number(t);for(var i=e;i<this.capacity();i++)this._objs[i]=this._createFunc(this._createArgs,i)}return this.capacity()},n.clear=function(){this._usedIndices.reverseForEach((function(t){var e=this._objs[t];this.release(e)}),this),this._usedIndices=[],this._destroyFunc&&this._objs.reverseForEach((function(t,e){this._destroyFunc(t,this._destroyArgs,e)}),this),this._objs=[]},n.numUsed=function(){return this._usedIndices.length},n.capacity=function(){return this._objs.length},n.isAtFullCapacity=function(){return this.numUsed()==this.capacity()},n.getNextAvailableIndex=function(){var t=this,e=0;return this.isAtFullCapacity()?e=-1:this._usedIndices.hasItems&&(e=1+this._usedIndices.find((function(e,i,n){return(i==n.lastIndex?t._objs.lastIndex+1:n[i+1])-e>1}))),e},namespace("framework").ObjectPool=i},function(t,e){var i;i={registerMouseOut:function(t){document.addEventListener("mouseout",t,!1)},deregisterMouseOut:function(t){document.removeEventListener("mouseout",t,!1)}},namespace("framework").WindowUtils=i},function(t,e){var i,n;i=include("framework.DeviceUtils"),n={getRandomisedVO:function(t,e,n){isDefined(e)||(e=Math.randomInt(Math.max(t.length-1,0))),isDefined(n)||(n=1);var r=t[e].name;return r&&t[e].platformSpecific&&(r+=i.isDesktop?"-desktop":"-mobile"),n<1&&(r=Math.random()<n?r:null),r}},namespace("framework").AudioUtils=n},function(t,e,i){(function(t){var e;(e=function(){this.x=0,this.y=0}).create=function(t,e){return{x:t=t||0,y:e=e||(0!==e?t:0)}},e.createFromPoints=function(t,i){return e.sub(i,t)},e.createFromRotation=function(t,i,n){i=i||e.create(1,0);var r=e.normalise(i),o=e.rotate(r,t);return isDefined(n)&&(o=e.mult(o,n)),o},e.createFromIndex=function(t,i){var n=t%i,r=Math.floor(t/i);return e.create(n,r)},e.convertToIndex=function(t,e){return t.y*e+t.x},e.clone=function(t){return{x:t.x,y:t.y}},e.isVector=function(t){return isDefined(t.x)&&isDefined(t.y)},e.setEqual=function(t,e){t.x=e.x,t.y=e.y},e.magnitude=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},e.magnitudeSquared=function(t){return t.x*t.x+t.y*t.y},e.setMagnitude=function(t,i){var n=e.magnitude(t);return 0===n?e.create(0,0):e.mult(t,i/n)},e.setMagnitudeSquared=function(t,i){var n=e.magnitudeSquared(t);return 0===n?e.create(0,0):e.mult(t,Math.sqrt(i/n))},e.rotate=function(t,e){var i=Math.cos(e),n=Math.sin(e);return{x:t.x*i-t.y*n,y:t.x*n+t.y*i}},e.rotateAbout=function(t,i,n,r){var o=Math.cos(i),a=Math.sin(i);n||(n=e.create(0,0)),r||(r={});var s=n.x+((t.x-n.x)*o-(t.y-n.y)*a);return r.y=n.y+((t.x-n.x)*a+(t.y-n.y)*o),r.x=s,r},e.normalise=function(t){var i=e.magnitude(t);return 0===i?{x:0,y:0}:{x:t.x/i,y:t.y/i}},e.dot=function(t,e){return t.x*e.x+t.y*e.y},e.cross=function(t,e){return t.x*e.y-t.y*e.x},e.cross3=function(t,e,i){return(e.x-t.x)*(i.y-t.y)-(e.y-t.y)*(i.x-t.x)},e.lerp=function(t,i,n){return e.create(Math.lerp(t.x,i.x,n),Math.lerp(t.y,i.y,n))},e.inverseLerp=function(t,e,i){var n=Number.equals(t.x,e.x)?1/0:Math.inverseLerp(t.x,e.x,lerpVector.x),r=Number.equals(t.y,e.y)?1/0:Math.inverseLerp(t.y,e.y,lerpVector.y);return Math.max(n,r)},e.add=function(t,e,i){return i||(i={}),i.x=t.x+e.x,i.y=t.y+e.y,i},e.sub=function(t,e,i){return i||(i={}),i.x=t.x-e.x,i.y=t.y-e.y,i},e.mult=function(t,e){return{x:t.x*e,y:t.y*e}},e.componentMult=function(t,e){return{x:t.x*e.x,y:t.y*e.y}},e.div=function(t,e){return{x:t.x/e,y:t.y/e}},e.componentDiv=function(t,e){return{x:t.x/e.x,y:t.y/e.y}},e.perp=function(t,e){return{x:(e=!0===e?-1:1)*-t.y,y:e*t.x}},e.neg=function(t){return{x:-t.x,y:-t.y}},e.angle=function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)},e.angleBetween=function(t,e){var i=Math.atan2(t.y,t.x),n=Math.atan2(e.y,e.x)-i;return n>Math.PI?n-=Math.TWO_PI:n<-Math.PI&&(n+=Math.TWO_PI),n},e.toAngle=function(t){return Math.atan2(t.y,t.x)},e.rotateAroundPoint=function(t,i,n){var r=e.sub(t,i),o=e.rotate(r,n);return e.add(i,o)},e.scalarProjectOntoLine=function(t,i,n){var r=e.sub(i,t),o=e.normalise(r),a=e.sub(n,t);return e.dot(o,a)},e.scalarProjectOntoNormal=function(t,i){return e.dot(i,t)},e.vectorProjectOntoNormal=function(t,i){return e.mult(i,e.scalarProjectOntoNormal(t,i))},e.progressAlongLine=function(t,i,n){var r=e.sub(i,t),o=e.magnitude(r),a=e.normalise(r),s=e.sub(n,t);return e.dot(a,s)/o},e.closestPointToLine=function(t,i,n){var r=e.sub(i,t),o=e.magnitude(r),a=e.div(r,o),s=e.sub(n,t),c=e.dot(a,s);return c<0&&(c=0),c>o&&(c=o),e.add(t,e.mult(a,c))},e.distanceFromLine=function(t,i,n){var r=e.closestPointToLine(t,i,n);return e.magnitude(e.sub(n,r))},e.distanceFromLineSquared=function(t,i,n){var r=e.closestPointToLine(t,i,n);return e.magnitudeSquared(e.sub(n,r))},e.reflect=function(t,i){return e.sub(t,e.mult(e.mult(i,e.dot(t,i)),2))},e.floor=function(t){return e.create(Math.floor(t.x),Math.floor(t.y))},e.ceil=function(t){return e.create(Math.ceil(t.x),Math.ceil(t.y))},e.abs=function(t){return e.create(Math.abs(t.x),Math.abs(t.y))},e.equalTo=function(t,e,i){return Number.equals(t.x,e.x,i)&&Number.equals(t.y,e.y,i)},e.lessThan=function(t,e){return t.x<e.x&&e.y<e.y},e.lessEqualTo=function(t,e){return t.x<=e.x&&e.y<=e.y},e.greaterThan=function(t,e){return t.x>e.x&&e.y>e.y},e.greaterEqualTo=function(t,e){return t.x>=e.x&&e.y>=e.y},e.addTo=function(t,e){t.x+=e.x,t.y+=e.y},e.subtractFrom=function(t,e){t.x-=e.x,t.y-=e.y},e.getGlobalPos=function(e){return e?e.toGlobal(new t.Point(0,0)):null},e.transformGlobalToChild=function(t,e){return t&&e?e.toLocal(t):t},e.transformTo=function(t,i){var n=e.getGlobalPos(t);return e.transformGlobalToChild(n,i)},e.Zero=e.create(0,0),e.Up=e.create(0,-1),e.Down=e.create(0,1),e.Left=e.create(-1,0),e.Right=e.create(1,0),namespace("framework").Vector=e}).call(this,i(23))},function(t,e){var i,n;n=(i=function(t){this._points=isDefined(t)?arrayify(t):[],this.isValid()||console.warn("BezierCurve: point list is invalid.")}).prototype,Object.defineProperty(n,"points",{set:function(t){this._points=isDefined(points)?arrayify(points):[],this.isValid()||console.warn("BezierCurve: provided point list is invalid.")},get:function(){return this._points}}),Object.defineProperty(n,"segmentCount",{get:function(){return this.isValid()?Math.floor(this._points.length/3):0}}),n.getPositionAt=function(t){if(!this.isValid())return null;if(t<=0)return this._points.first();if(t>=this.segmentCount)return this._points.last();var e=3*Math.floor(t),i=t-Math.floor(t),n=this._points[e],r=this._points[e+1],o=this._points[e+2],a=this._points[e+3],s=this._solve(n.x,r.x,o.x,a.x,i),c=this._solve(n.y,r.y,o.y,a.y,i);return isDefined(s)&&isDefined(c)?{x:s,y:c}:null},n.getPositionAtUnit=function(t){return this.getPositionAt(t*this.segmentCount)},n.getXAt=function(t,e){},n.getYAt=function(t,e){},n.isValid=function(){return this._points.length>=4&&this._points.length%3==1},n._solve=function(t,e,i,n,r){if(this.isValid()&&Math.isInRange(r,0,1)){var o=r*(n-3*i+3*e-t);return o+=3*i-6*e+3*t,o*=r,o+=3*e-3*t,t+(o*=r)}},namespace("framework").BezierCurve=i},function(t,e){var i,n,r;i=include("framework.BezierCurve"),n=function(t,e){i.call(this,t),this._subdivisionsPerSegment=e||20,this._precomputedLUT=[],this._precomputedRanges=[],this._createLUT()},i.prototype,r=extend(n,i),Object.defineProperty(r,"points",{set:function(t){this._points=isDefined(points)?arrayify(points):[],this.isValid()||console.warn("BezierCurve: provided point list is invalid."),this._createLUT()},get:function(){return this._points}}),Object.defineProperty(r,"precomputedLUT",{get:function(){return this._precomputedLUT}}),r.getXAt=function(t,e){if(this.isValid()){isDefined(e)||(e=!1);var i,n=-1,r={segmentIndex:-1,value:Number.POSITIVE_INFINITY},o={segmentIndex:-1,value:Number.NEGATIVE_INFINITY};for(i=0;i<this.segmentCount;i++){var a=this._getSegmentBounds(i);if(a&&(a.minY<r.value&&(r.segmentIndex=i,r.value=a.minY),a.maxY>o.value&&(o.segmentIndex=i,o.value=a.maxY),Math.isInRange(t,a.minY,a.maxY))){n=i;break}}-1===n&&(t<r.value?(n=r.segmentIndex,t=r.value):t>o.value&&(n=o.segmentIndex,t=o.value));var s=n*this._subdivisionsPerSegment,c=[];for(i=0;i<this._subdivisionsPerSegment;i++){var u=s+i,h=this._precomputedLUT[u],l=this._precomputedLUT[u+1],f=Math.inverseLerp(h.y,l.y,t);if(Math.isInRange(f,0,1)){var p=h.x+f*(l.x-h.x);if(e)return p;c.push(p)}}return c}},r.getYAt=function(t,e){if(this.isValid()){isDefined(e)||(e=!1);var i,n=-1,r={segmentIndex:-1,value:Number.POSITIVE_INFINITY},o={segmentIndex:-1,value:Number.NEGATIVE_INFINITY};for(i=0;i<this.segmentCount;i++){var a=this._getSegmentBounds(i);if(a&&(a.minX<r.value&&(r.segmentIndex=i,r.value=a.minX),a.maxX>o.value&&(o.segmentIndex=i,o.value=a.maxX),Math.isInRange(t,a.minX,a.maxX))){n=i;break}}-1===n&&(t<r.value?(n=r.segmentIndex,t=r.value):t>o.value&&(n=o.segmentIndex,t=o.value));var s=n*this._subdivisionsPerSegment,c=[];for(i=0;i<this._subdivisionsPerSegment;i++){var u=s+i,h=this._precomputedLUT[u],l=this._precomputedLUT[u+1],f=Math.inverseLerp(h.x,l.x,t);if(Math.isInRange(f,0,1)){var p=h.y+f*(l.y-h.y);if(e)return p;c.push(p)}}return c}},r._createLUT=function(){this._precomputedLUT.clear(),this._precomputedRanges.clear(),this._precomputedLUT.push(this.getPositionAt(0));for(var t=0;t<this.segmentCount;t++){for(var e=1;e<=this._subdivisionsPerSegment;e++){var i=t+e/this._subdivisionsPerSegment,n=this.getPositionAt(i);n?this._precomputedLUT.push(n):console.warn("Calculated curve position is invalid.")}var r=this._subdivisionsPerSegment*t,o=this._precomputedLUT.length,a=this._precomputedLUT.slice(r,o),s=this._createRangeFromPoints(a);this._precomputedRanges.push(s)}},r._getSegmentBounds=function(t){return Math.isInRange(t,0,this.segmentCount-1)?this._precomputedRanges[t]:null},r._createRangeFromPoints=function(t){return{minX:t.map((function(t){return t.x})).reduce((function(t,e){return Math.min(t,e)})),maxX:t.map((function(t){return t.x})).reduce((function(t,e){return Math.max(t,e)})),minY:t.map((function(t){return t.y})).reduce((function(t,e){return Math.min(t,e)})),maxY:t.map((function(t){return t.y})).reduce((function(t,e){return Math.max(t,e)}))}},namespace("framework").BezierCurveApprox=n},function(t,e){var i,n;n=(i=function(t,e){this._points=isDefined(t)?arrayify(t):[],this._precomputedRanges=[],this._usePrecomputedRanges=!!e,this.isValid()||console.warn("LinearCurve: point list is invalid."),this._usePrecomputedRanges&&this._precomputeRanges()}).prototype,Object.defineProperty(n,"points",{set:function(t){this._points=isDefined(points)?arrayify(points):[],this.isValid()||console.warn("LinearCurve: provided point list is invalid."),this._usePrecomputedRanges&&this._precomputeRanges()},get:function(){return this._points}}),Object.defineProperty(n,"segmentCount",{get:function(){return this.isValid()?this._points.length-1:0}}),n.getPositionAt=function(t){if(!this.isValid())return null;if(t<=0)return this._points.first();if(t>=this.segmentCount)return this._points.last();var e=Math.floor(t),i=t-Math.floor(t),n=this._points[e],r=this._points[e+1],o=this._solve(n.x,r.x,i),a=this._solve(n.y,r.y,i);return isDefined(o)&&isDefined(a)?{x:o,y:a}:null},n.getPositionAtUnit=function(t){return this.getPositionAt(t*this.segmentCount)},n.getXAt=function(t){if(this.isValid()){var e,i=-1,n={segmentIndex:-1,value:Number.POSITIVE_INFINITY},r={segmentIndex:-1,value:Number.NEGATIVE_INFINITY};for(e=0;e<this.segmentCount;e++){var o=this._getSegmentBounds(e);if(o&&(o.minY<n.value&&(n.segmentIndex=e,n.value=o.minY),o.maxY>r.value&&(r.segmentIndex=e,r.value=o.maxY),Math.isInRange(t,o.minY,o.maxY))){i=e;break}}-1===i&&(t<n.value?(i=n.segmentIndex,t=n.value):t>r.value&&(i=r.segmentIndex,t=r.value));var a=this._points[i],s=this._points[i+1],c=Math.inverseLerp(a.y,s.y,t);return a.x+c*(s.x-a.x)}},n.getYAt=function(t){if(this.isValid()){var e,i=-1,n={segmentIndex:-1,value:Number.POSITIVE_INFINITY},r={segmentIndex:-1,value:Number.NEGATIVE_INFINITY};for(e=0;e<this.segmentCount;e++){var o=this._getSegmentBounds(e);if(o&&(o.minX<n.value&&(n.segmentIndex=e,n.value=o.minX),o.maxX>r.value&&(r.segmentIndex=e,r.value=o.maxX),Math.isInRange(t,o.minX,o.maxX))){i=e;break}}-1===i&&(t<n.value?(i=n.segmentIndex,t=n.value):t>r.value&&(i=r.segmentIndex,t=r.value));var a=this._points[i],s=this._points[i+1],c=Math.inverseLerp(a.x,s.x,t);return a.y+c*(s.y-a.y)}},n.isValid=function(){return this._points.length>=2},n._solve=function(t,e,i){if(this.isValid()&&Math.isInRange(i,0,1))return Math.lerp(t,e,i)},n._precomputeRanges=function(){this._precomputedRanges.clear();for(var t=0;t<this.segmentCount;t++){var e=[this._points[t],this._points[t+1]],i=this._createRangeFromPoints(e);this._precomputedRanges.push(i)}},n._getSegmentBounds=function(t){return Math.isInRange(t,0,this.segmentCount-1)?this._usePrecomputedRanges?this._precomputedRanges[t]:this._createRangeFromPoints([this._points[t],this._points[t+1]]):null},n._createRangeFromPoints=function(t){return{minX:t.map((function(t){return t.x})).reduce((function(t,e){return Math.min(t,e)})),maxX:t.map((function(t){return t.x})).reduce((function(t,e){return Math.max(t,e)})),minY:t.map((function(t){return t.y})).reduce((function(t,e){return Math.min(t,e)})),maxY:t.map((function(t){return t.y})).reduce((function(t,e){return Math.max(t,e)}))}},namespace("framework").LinearCurve=i},function(t,e){var i,n,r;i=include("framework.Vector"),r=(n=function(t,e){this.min=t||0,this.max=e||0}).prototype,n.from=function(t){return t=t||new n(0,0),new n(t.min,t.max)},r.toVector=function(){return i.create(this.min,this.max)},r.lerp=function(t){return Math.lerp(this.min,this.max,t)},r.inverseLerp=function(t){return Math.inverseLerp(this.min,this.max,t)},r.wrap=function(t){return Math.wrap(t,this.min,this.max)},r.clamp=function(t){return Math.clamp(t,this.min,this.max)},r.isInRange=function(t){return Math.isInRange(t,this.min,this.max)},r.mapFrom=function(t,e,i){return Math.mapValueToRange(t,e,i,this.min,this.max)},r.mapFromOther=function(t,e){return e=e||new n(0,0),this.mapFrom(t,e.min,e.max)},namespace("framework").MinMax=n},function(t,e){var i,n;(n=(i=function(){}).prototype).reset=function(){},n.update=function(t,e){},namespace("framework").Action=i},function(t,e){var i;(i=i||{}).register=function(t,e){t&&e&&(isDefined(i[t])&&console.warn("Overriding Actions."+t+" factory method."),i[t]=e)},namespace("framework").Actions=i},function(t,e){var i,n,r,o;i=include("framework.Action"),n=include("framework.Actions"),r=function(t,e){i.call(this),this.func=t||function(t,e,i){t.finish()},this.loop=e,this.reset()},i.prototype,(o=extend(r,i)).reset=function(){this._hasExecutedOnce=!1,this._finished=!1},o.update=function(t,e){return this._finished?(this.reset(),!0):(!this.loop&&this._hasExecutedOnce||(this.func(this,t,e),this._hasExecutedOnce=!0),!1)},o.finish=function(){this._finished=!0},n.register("BlockingFunc",(function(t,e){return new r(t,e)})),namespace("framework").BlockingFuncAction=r},function(t,e){var i,n,r,o;i=include("framework.Action"),n=include("framework.Actions"),r=function(t){i.call(this),this.time=t,this.reset()},i.prototype,(o=extend(r,i)).reset=function(){this._time=this.time},o.update=function(t,e){return this._time-=t,this._time<=0&&(this.reset(),!0)},n.register("Delay",(function(t){return new r(t)})),namespace("framework").DelayAction=r},function(t,e){var i,n,r,o,a;i=include("framework.BlockingFuncAction"),n=include("framework.Actions"),r=function(t){this._voName=t,this._isPlaying=!1,i.call(this,this._playVO.bind(this),!1)},o=i.prototype,(a=extend(r,i)).reset=function(){o.reset.call(this),this._stopVO()},a._playVO=function(t,e,i){this._stopVO(),this._voName&&app.canPlayVO()?(this._isPlaying=!0,app.playVO(this._voName,function(){this._isPlaying=!1,t.finish()}.bind(this),!0)):t.finish()},a._stopVO=function(){this._thisVOIsPlaying()&&(app.stopVO(),this._isPlaying=!1)},a._thisVOIsPlaying=function(){return this._isPlaying&&app.canPlayVO()&&app.isPlayingVO(this._voName)},n.register("VO",(function(t){return new r(t)})),namespace("framework").VOAction=r},function(t,e){var i,n,r,o,a,s,c,u;i=include("framework.BlockingFuncAction"),n=include("framework.Actions"),r=include("TWEEN.Tween"),o=include("TWEEN.Easing"),a=include("TWEEN.Interpolation"),s=function(t,e){if(e=Object.extend({from:{},to:{},duration:1,easing:o.Linear.None,delayTime:void 0,repeat:void 0,repeatDelayTime:void 0,yoyo:!1,interpolationFunc:a.Linear,onStart:null,onUpdate:null,onComplete:null,onStop:null,endOnCancel:!1,resetValuesOnStop:!1},e),!t)throw"TweenAction: obj is null.";this._obj=t,this._tweenParams=e,this._tween=null,i.call(this,this._startTween.bind(this),!1)},c=i.prototype,u=extend(s,i),Object.defineProperty(u,"tween",{get:function(){return this._tween}}),u.reset=function(){c.reset.call(this),this._stopTween()},u._startTween=function(t,e,i){var n=this._tweenParams;this._stopTween(),this._tween=new r(this._obj),Object.extend(this._obj,n.from),this._tween.to(n.to,1e3*n.duration),this._tween.easing(n.easing).interpolation(n.interpolationFunc).onStop(function(e){this._tween=null,t.finish(),n.resetValuesOnStop&&Object.extend(this._obj,n.from),n.onStop&&n.onStop(e)}.bind(this)).onComplete(function(t){this._tween.stop(),n.onComplete&&n.onComplete(t)}.bind(this)),isDefined(n.delayTime)&&this._tween.delay(1e3*n.delayTime),isDefined(n.repeat)&&this._tween.repeat(n.repeat),isDefined(n.repeatDelayTime)&&this._tween.repeatDelay(1e3*n.repeatDelayTime),n.yoyo&&this._tween.yoyo(n.yoyo),n.onStart&&this._tween.onStart(n.onStart),n.onUpdate&&this._tween.onUpdate(n.onUpdate),this._tween.start()},u._stopTween=function(){this._tween&&(this._tweenParams.endOnCancel?this._tween.end():this._tween.stop())},n.register("Tween",(function(t,e){return new s(t,e)})),namespace("framework").TweenAction=s},function(t,e){var i,n,r,o,a;i=include("framework.BlockingFuncAction"),n=include("framework.Actions"),r=function(t,e,n){this._animatedSprite=t,this._animationName=e,this._params=n,this._isPlaying=!1,i.call(this,this._playAnimation.bind(this),!1)},o=i.prototype,(a=extend(r,i)).reset=function(){o.reset.call(this),this._stopAnimation()},a._playAnimation=function(t,e,i){this._stopAnimation(),this._animatedSprite&&this._animationName&&(this._isPlaying=!0,this._animatedSprite.play(this._animationName,this._params,function(){t.finish()}.bind(this)))},a._stopAnimation=function(){this._isPlaying&&this._animatedSprite&&(this._animatedSprite.stop(),this._animatedSprite.gotoAndStop(0),this._isPlaying=!1)},n.register("AnimateSprite",(function(t,e,i){return new r(t,e,i)})),namespace("framework").AnimateSpriteAction=r},function(t,e){var i,n,r,o;i=include("framework.Action"),n=include("framework.Actions"),r=function(t,e){i.call(this),this.action=t,this.loop=e,this.reset()},i.prototype,(o=extend(r,i)).reset=function(){this._hasExecutedOnce=!1,this._finished=!1},o.update=function(t,e){return!this.loop&&this._hasExecutedOnce||this.action.update(t,e)&&(this._hasExecutedOnce=!0,this.action.reset()),!!this._finished&&(this.reset(),!0)},o.finish=function(){this._finished=!0},n.register("Blocking",(function(t,e){return new r(t,e)})),namespace("framework").BlockingAction=r},function(t,e){var i,n,r,o,a;i=include("framework.Action"),n=include("framework.Actions"),r=include("framework.TweenAction"),o=function(t,e,n,o,a){if(i.call(this),!o)throw"CounterAction: onUpdate(val: number) callback is null.";this._startNum=t,this._endNum=e,this._duration=n,this.onUpdate=o;var s=this._createTweenParams(a);this._dummyObj={val:0},this._tweenAction=new r(this._dummyObj,s),this.reset()},i.prototype,a=extend(o,i),Object.defineProperty(a,"startNum",{get:function(){return this._startNum}}),Object.defineProperty(a,"endNum",{get:function(){return this._endNum}}),Object.defineProperty(a,"duration",{get:function(){return this._duration}}),Object.defineProperty(a,"tweenAction",{get:function(){return this._tweenAction}}),a.reset=function(){this.tweenAction.reset()},a.update=function(t,e){return!!this.tweenAction.update(t,e)&&(this.reset(),!0)},a._createTweenParams=function(t){var e=Object.extend({},t),i=e.onUpdate;return Object.extend(e,{from:{val:this._startNum},to:{val:this._endNum},duration:this._duration,onUpdate:function(t){i&&i(t),this.onUpdate&&this.onUpdate(t.val)}.bind(this)})},n.register("Counter",(function(t,e,i,n,r){return new o(t,e,i,n,r)})),namespace("framework").CounterAction=o},function(t,e){var i,n,r,o;i=include("framework.Action"),n=include("framework.Actions"),r=function(t){i.call(this),this.func=t||function(){},this.reset()},i.prototype,(o=extend(r,i)).reset=function(){},o.update=function(t,e){return this.func(),this.reset(),!0},n.register("Func",(function(t){return new r(t)})),namespace("framework").FuncAction=r},function(t,e){var i,n,r,o;i=include("framework.Action"),n=include("framework.Actions"),r=function(t,e){i.call(this),this.actions=t,this.endOnNextAction=e,this._endOnFirstComplete=e,this._originalActions=[],this._cacheActions(),this.reset()},i.prototype,(o=extend(r,i)).reset=function(){this.actions=this._originalActions.slice();for(var t=0;t<this.actions.length;t++)this.actions[t].reset();this.endOnNextAction=this._endOnFirstComplete},o.update=function(t,e){if(!this.actions||!this.actions.length)return!0;for(var i=!0,n=this.actions.length-1;n>=0;n--){var r=this.actions[n];if(r.update(t,e)){if(r.reset(),this.actions.splice(n,1),this.endOnNextAction)return!0}else i=!1}return i},o._cacheActions=function(){var t=this.actions||[];this._originalActions=t.slice()},n.register("Parallel",(function(t,e){return new r(t,e)})),namespace("framework").ParallelAction=r},function(t,e){var i,n,r,o;i=include("framework.Action"),n=include("framework.Actions"),r=function(t){if(i.call(this),!t)throw"ParticlesAction: particlesView is null.";this.particles=t,this._started=!1,this.reset()},i.prototype,(o=extend(r,i)).reset=function(){this.particles.enable=!1,this.particles.clear(),this._started=!1},o.update=function(t,e){return this._started||(this.particles.enable=!0,this._started=!0),this.particles.update(t),!!this._particlesFinished()&&(this.reset(),!0)},o._particlesFinished=function(){return!this._emitterIsActive()&&!this._hasActiveParticles()},o._emitterIsActive=function(){return this.particles.enable},o._hasActiveParticles=function(){return this.particles.emitter.particleCount>0},n.register("Particles",(function(t){return new r(t)})),namespace("framework").ParticlesAction=r},function(t,e){var i,n,r,o;i=include("framework.Action"),n=include("framework.Actions"),r=function(t,e,n){i.call(this),this.action=t,this.count=e,this.onLoopFinished=n||function(t){},this.reset()},i.prototype,(o=extend(r,i)).reset=function(){this._count=this.count,this._count||(this._count=1/0),this.action.reset()},o.update=function(t,e){return this.action.update(t,e)&&(this.action.reset(),this._count=this._count-1,this.onLoopFinished&&this.onLoopFinished(this._count)),this._count<=0&&(this.reset(),!0)},n.register("Repeat",(function(t,e,i){return new r(t,e,i)})),namespace("framework").RepeatAction=r},function(t,e){var i,n,r,o;i=include("framework.Action"),n=include("framework.Actions"),r=function(t){i.call(this),this.actions=t,this.reset()},i.prototype,(o=extend(r,i)).reset=function(){this._index=0;for(var t=0;t<this.actions.length;t++)this.actions[t].reset()},o.update=function(t,e){if(this._index>=this.actions.length)return!0;var i=this.actions[this._index];return i.update(t,e)&&(i.reset(),this._index++),!1},n.register("Sequence",(function(t){return new r(t)})),namespace("framework").SequenceAction=r},function(t,e){var i,n,r,o;i=include("framework.DelayAction"),n=include("framework.Actions"),r=function(t,e){i.call(this,0),this.minTime=t,this.maxTime=e,this.reset()},o=i.prototype,extend(r,i).reset=function(){var t=Math.randomFloat(0,1);this.time=Math.lerp(this.minTime,this.maxTime,t),o.reset.call(this)},n.register("RandomDelay",(function(t,e){return new r(t,e)})),namespace("framework").RandomDelayAction=r},function(t,e){var i,n,r,o;i=include("framework.Action"),n=include("framework.Actions"),r=function(t,e,n){var r=Object.extend({loop:!1,trackIndex:0,endOnCancel:!1,resetValuesOnStop:!1},n);if(i.call(this),!t)throw"SpineAction: spine is null.";this.spine=t,this.animName=e,this.loop=r.loop,this.trackIndex=r.trackIndex,this.endOnCancel=r.endOnCancel,this.resetValuesOnStop=r.resetValuesOnStop,this.running=!1,this._action=this._createAction(),this.reset()},i.prototype,(o=extend(r,i)).reset=function(){this._action.reset(),this._stopAnimation()},o.update=function(t,e){return this.running||(this.running=!0),!!this._action.update(t,e)&&(this._finished(),!0)},o._createAction=function(){var t=null;if(this.loop)t=n.Repeat(n.Func());else{var e=this.spine.state.data.skeletonData.findAnimation(this.animName);if(!e)throw"SpineAction: could not find animation for animName '"+this.animName+"'.";var i=e.duration;t=n.Delay(i)}return n.Parallel([n.Func(this._playAnimation.bind(this)),t])},o._playAnimation=function(){this.spine.state.setAnimation(this.trackIndex,this.animName,this.loop),this.running=!0},o._stopAnimation=function(){this.running&&(this.endOnCancel?this._endAnimation():this.resetValuesOnStop?this._resetAnimation():this._pauseAnimation(),this.running=!1)},o._endAnimation=function(){var t=this.spine.state.expandToIndex(this.trackIndex);t&&(t.trackTime=t.trackEnd,this.spine.update(0))},o._resetAnimation=function(){this.spine.state.setAnimation(this.trackIndex,this.animName,!1),this.spine.update(0),this.spine.state.clearTrack(this.trackIndex)},o._pauseAnimation=function(){this.spine.state.clearTrack(this.trackIndex)},o._finished=function(){this.running=!1,this._action.reset()},n.register("Spine",(function(t,e,i){return new r(t,e,i)})),namespace("framework").SpineAction=r},function(t,e){var i,n,r,o;i=include("PIXI.utils.EventEmitter"),n=include("framework.GeneralUtils"),r=function(t){i.call(this),this._id=n.generateGUIDString(),this.action=t,this._started=!1,this._ended=!1,this._active=!1},i.prototype,(o=extend(r,i)).reset=function(){this._started=!1,this._ended=!1,this._active=!1},o.update=function(t,e){this._started||(this.emit("start"),this._started=!0,this._active=!0),this.action.update(t,e)&&this._active&&this.end()},o.end=function(){this._ended||(this._finish(),this.emit("end"))},o.cancel=function(){this._ended||(this._finish(),this.action.reset(),this.emit("cancel"))},o.isEnded=function(){return this._ended},o._finish=function(){this._started=!1,this._ended=!0,this._active=!1},namespace("framework").ActionInstance=r},function(t,e){var i,n,r;i=include("framework.ActionInstance"),(r=(n=function(){this.actions={},this._actionsToDelete=[],this._last=0}).prototype).update=function(t){var e;for(var i in t||0===t?e=1e3*t:t=(e=this._getDeltaMS())/1e3,this.actions)if(Object.prototype.hasOwnProperty.call(this.actions,i)){var n=this.actions[i];if(this._isQueuedForDeletion(n))continue;n.update(t,e),n.isEnded()&&this._actionsToDelete.push(n)}if(this._actionsToDelete.length){for(var r=0;r<this._actionsToDelete.length;r++)this._deleteAction(this._actionsToDelete[r]);this._actionsToDelete.length=0}},r.runAction=function(t){var e=new i(t);return e.update(0,0),this.actions[e._id]=e,e},r.cancelAction=function(t){t&&(t.cancel(),this._deleteAction(t))},r._getDeltaMS=function(){0===this._last&&(this._last=Date.now());var t=Date.now(),e=t-this._last;return this._last=t,e},r._isQueuedForDeletion=function(t){return-1!==this._actionsToDelete.indexOf(t)},r._deleteAction=function(t){t&&this.actions[t._id]&&delete this.actions[t._id]},namespace("framework").ActionManager=n},function(t,e){include("PIXI.Rectangle").prototype.overlapsRect=function(t){return!(this.right<t.left||t.right<this.left||this.bottom<t.top||t.bottom<this.top)}},function(t,e){var i,n;(n=(i=function(t,e){if(!t)throw"TransparencyHitArea: sprite is null.";this.sprite=t,this.alphaThreshold=isDefined(e)?e:2,this.textureData=null,this._init()}).prototype).contains=function(t,e){return 0!==Math.abs(this.sprite.width)&&0!==Math.abs(this.sprite.height)&&(t=this._translateXForAnchor(this.sprite,t,this.sprite.scale.x),e=this._translateYForAnchor(this.sprite,e,this.sprite.scale.y),!!this._isInRenderedBounds(t,e,this.sprite)&&!this.isTextureTransparentAt(Math.round(t),Math.round(e),this.sprite))},n.clone=function(){return new i(this.sprite)},n.isTextureTransparentAt=function(t,e,i){var n=4*(t+e*i.texture.width)+3;return this.textureData[n]<this.alphaThreshold},n.getTexture=function(){return this.sprite?this.sprite.texture.baseTexture.source:null},n._init=function(){if(!this.textureData){var t=this.getTexture();this.textureData=this._createTextureData(t)}},n._translateXForAnchor=function(t,e,i){return e+t.texture.width*t.anchor.x},n._translateYForAnchor=function(t,e,i){return e+t.texture.height*t.anchor.y},n._isInRenderedBounds=function(t,e,i){var n=Math.round(t),r=Math.round(e),o=i.texture.width,a=i.texture.height;return n>=0&&n<=o&&r>=0&&r<=a},n._createTextureData=function(t){var e=document.createElement("canvas"),i=this.sprite.texture,n=i.orig.x,r=i.orig.y,o=i.orig.width,a=i.orig.height;e.width=o,e.height=a;var s=e.getContext("2d");return s.clearRect(0,0,o,a),s.drawImage(t,n,r,o,a,0,0,o,a),s.getImageData(0,0,o,a).data},namespace("framework").TransparencyHitArea=i},function(t,e){!function(){var t=t||{};t.convertViewToBase64PNG=function(e,i){return t.convertViewToCanvas(e).toDataURL("image/png",i)},t.convertViewToBase64JPEG=function(e,i){return t.convertViewToCanvas(e).toDataURL("image/jpeg",i)},t.convertViewToImage=function(t){return app.getRenderer().extract.image(t)},t.convertViewToCanvas=function(t){return console.warn("ViewUtils.convertViewToCanvas() does not work in canvas mode."),app.getRenderer().extract.canvas(t)},t.getTextureDataFromView=function(t){return console.warn("ViewUtils.getTextureDataFromView() does not work in both WebGL and canvas mode."),app.getRenderer().extract.pixels(t)},t.downloadViewAsPNG=function(t,i,n,r){e(t,i=i||"output.png",n,r,"image/png")},t.downloadViewAsJPEG=function(t,i,n,r){e(t,i=i||"output.jpeg",n,r,"image/jpeg")};var e=function(e,i,n,r,o){t.convertViewToCanvas(e).toBlob((function(t){var r=document.createElement("a");document.body.append(r),r.download=i,r.href=URL.createObjectURL(t),r.click(),r.remove(),n&&n(e,i)}),o,r)};namespace("framework").ViewUtils=t}()},function(t,e,i){"use strict";(function(t){var e,n,r,o,a,s,c,u=i(61);e=include("PIXI.Sprite"),n=include("PIXI.Rectangle"),r=include("PIXI.BLEND_MODES"),o=include("framework.ColourUtils"),a=function(i){var n=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",textureName:null,texture:null,anchor:{x:0,y:0},skew:{x:0,y:0},blendMode:"NORMAL"},i),a=n.textureName?app.getCache(n.textureName):n.texture;e.call(this,a),this.tint=o.colourToNumber(n.colourTint),this.anchor=new t.Point(n.anchor.x,n.anchor.y),this.skew=new t.Point(n.skew.x,n.skew.y),this.blendMode=r[n.blendMode],u.a.applyBaseConfigToView(n,this)},s=e.prototype,(c=extend(a,e)).updateTexture=function(t){this.texture=t?app.getCache(t):null},c.postInit=function(){this._postInitImpl()},c.getLocalBounds=function(t){return t=t||new n,s.getLocalBounds.call(this,t),0===this.children.length&&(this._bounds.minY=this._texture.orig.height*-this._anchor._y,this._bounds.maxY=this._texture.orig.height*(1-this._anchor._y),t.height=this._bounds.maxY-this._bounds.minY),t},c._postInitImpl=function(){},namespace("framework").SpriteView=a}).call(this,i(23))},function(t,e){var i,n,r;i=include("framework.SpriteView"),n=function(t){var e=Object.extend({textureName:null,enabledTextureName:null,initiallyEnabled:!1},t);i.call(this,t),this._offTexture=e.textureName?app.getCache(e.textureName):null,this._onTexture=e.enabledTextureName?app.getCache(e.enabledTextureName):null,this._isOn=e.initiallyEnabled,this.texture=this._isOn?this._onTexture:this._offTexture},i.prototype,r=extend(n,i),Object.defineProperty(r,"enable",{set:function(t){this.texture=t?this._onTexture:this._offTexture,this._isOn=t},get:function(){return this._isOn}}),Object.defineProperty(r,"offTexture",{set:function(t){this._offTexture=t?app.getCache(t):null}}),Object.defineProperty(r,"onTexture",{set:function(t){this._onTexture=t?app.getCache(t):null}}),namespace("framework").BinarySpriteView=n},function(t,e){var i,n,r,o;i=include("framework.SpriteView"),include("framework.ColourUtils"),n=function(t){var e=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!0,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",textureName:null,texture:null,anchor:{x:0,y:0},blendMode:"NORMAL",labelTextView:null,isEnabled:!0,imageFrameNames:{up:"",over:"",down:"",disabled:""},transitionColorTints:null,clickSoundName:null},t);if(this.finalConfig=e,this._hasSprite()&&(this.imageFrames={up:app.getCache(e.imageFrameNames.up),over:app.getCache(e.imageFrameNames.over),down:app.getCache(e.imageFrameNames.down),disabled:app.getCache(e.imageFrameNames.disabled)}),this.transitionColorTints=e.transitionColorTints,i.call(this,e),this.buttonMode=!0,this._isEnabled=e.isEnabled,e.anchor&&this._hasSprite()){var n=this.imageFrames.up;this.texture=n}this.clickSoundName=e.clickSoundName,!this.clickSoundName||void 0!==this.clickSoundName.length&&0!==this.clickSoundName.length||(this.clickSoundName=null),this.on("pointerdown",this._onDown.bind(this)),this.on("pointerup",this._onUp.bind(this)),this.on("pointerover",this._onHover.bind(this)),this.on("pointerleave",this._onLeave.bind(this)),this.on("pointerout",this._onUpOutside.bind(this)),this.on("pointercancel",this._onUpOutside.bind(this))},r=i.prototype,o=extend(n,i),Object.defineProperty(o,"isEnabled",{set:function(t){this._isEnabled=t,this._hasSprite()&&(this.texture=t?this.imageFrames.up:this.imageFrames.disabled),this._isTransitionColor()&&(this.tint=t?this.transitionColorTints.up:this.transitionColorTints.disabled)},get:function(){return this._isEnabled}}),o._hasSprite=function(){return!!this.finalConfig.imageFrameNames.up},o._isTransitionColor=function(){return!!this.transitionColorTints},o._onUp=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.up),this._isTransitionColor()&&(this.tint=this.transitionColorTints.up),this.clickSoundName&&app.playSound()(this.clickSoundName))},o._onDown=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.down),this._isTransitionColor()&&(this.tint=this.transitionColorTints.down))},o._onUpOutside=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.up),this._isTransitionColor()&&(this.tint=this.transitionColorTints.up))},o._onHover=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.over),this._isTransitionColor()&&(this.tint=this.transitionColorTints.over))},o._onLeave=function(t){this.isEnabled&&(this._hasSprite()&&(this.texture=this.imageFrames.up),this._isTransitionColor()&&(this.tint=this.transitionColorTints.up))},o.destroy=function(){this.off("pointerdown",this._onDown),this.off("pointerup",this._onUp),this.off("pointerover",this._onHover),this.off("pointerleave",this._onLeave),this.off("pointerout",this._onUpOutside),this.off("pointercancel",this._onUpOutside),r.destroy.call(this,!1)},namespace("framework").ButtonView=n},function(t,e){var i,n,r,o;i=include("framework.GraphicsView"),n=include("framework.ColourUtils"),r=function(t){var e=Object.extend({fillColour:"#ffffff",fillAlpha:1,lineWidth:1,lineColour:"#ffffff",lineAlpha:1,isWireframe:!1,radius:10},t);i.call(this,e),this.fillColour=n.colourToNumber(e.fillColour),this.fillAlpha=e.fillAlpha,this.lineWidth=e.lineWidth,this.lineColour=n.colourToNumber(e.lineColour),this.lineAlpha=e.lineAlpha,this.isWireframe=e.isWireframe,this.radius=e.radius,this._fillCircle()},i.prototype,(o=extend(r,i))._fillCircle=function(){var t=this.isWireframe?0:this.fillColour,e=this.isWireframe?0:this.fillAlpha;this.clear().beginFill(t,e).lineStyle(this.lineWidth,this.lineColour,this.lineAlpha).drawCircle(0,0,this.radius).endFill()},o.setColor=function(t){this.fillColour=n.colourToNumber(t),this.lineColour=n.colourToNumber(t),this._fillCircle()},namespace("framework").CircleView=r},function(t,e){var i,n,r;i=include("framework.ContainerView"),n=function(t){var e=Object.extend({initiallyEnabled:!1},t);i.call(this,t),this.initiallyEnabled=e.initiallyEnabled},i.prototype,r=extend(n,i),Object.defineProperty(r,"enable",{set:function(t){this.front.visible=t},get:function(){return this.front.visible}}),r._postInitImpl=function(){if(this.back=this.getChildByName("back"),this.front=this.getChildByName("front"),!this.back)throw"DualSpriteView: could not find 'back' child.";if(!this.front)throw"DualSpriteView: could not find 'front' child.";this.back.visible=!0,this.front.visible=this.initiallyEnabled},namespace("framework").DualSpriteView=n},function(t,e){var i,n,r,o,a;i=include("framework.ContainerView"),n=include("PIXI.Rectangle"),r=include("PIXI.Sprite"),o=function(t){var e=Object.extend({kind:"",value:""},t);i.call(this,e),this._kind=e.kind,this._value=e.value,this._buildView(e)},i.prototype,a=extend(o,i),Object.defineProperty(a,"kind",{get:function(){return this._kind}}),Object.defineProperty(a,"value",{get:function(){return this._value}}),a.setHighlighted=function(t){this.children.forEach((function(e){e.setHighlighted(t)}))},a._buildView=function(t){switch(t.kind){case"alpha":this._buildTextButton(t,70,80,40);break;case"backspace":this._buildBackspaceButton(t,110,80);break;case"enter":case"done":this._buildTextButton(t,110,80,35);break;case"spacebar":this._buildTextButton(t,360,80,35);break;case"goToPunc":case"goToAlpha":this._buildTextButton(t,110,80,35);break;case"shiftOn":this._buildShiftButton(t,110,80,!0);break;case"shiftOff":this._buildShiftButton(t,110,80,!1);break;case"punc1":case"punc2":this._buildTextButton(t,110,80,35)}},a._buildTextButton=function(t,e,i,n){this.addChild(this._createShadowView(e,25,30)),this.addChild(this._createBackView(e,i)),this.addChild(this._createFrontTextView(t.value,n)),this.hitArea=this._createHitArea(e,i,10)},a._buildShiftButton=function(t,e,i,n){this.addChild(this._createShadowView(e,25,30)),this.addChild(this._createBackView(e,i)),this.addChild(this._createShiftView(n)),this.hitArea=this._createHitArea(e,i,10)},a._buildBackspaceButton=function(t,e,i){this.addChild(this._createShadowView(e,25,30)),this.addChild(this._createBackView(e,i)),this.addChild(this._createBackspaceView()),this.addChild(this._createFrontTextView("X",20,{x:10,y:0})),this.hitArea=this._createHitArea(e,i,10)},a._createShadowView=function(t,e,i){var n=app.createView({type:"rectangle",position:{x:0,y:i},fillColour:"#aaaaaa",lineWidth:0,width:t,height:e,cornerRadius:12.5});return n.setHighlighted=function(t){},n},a._createBackView=function(t,e){var i="#999999",n="#ffffff",r=function(i,n){return{type:"rectangle",isVisible:n,fillColour:i,lineWidth:0,width:t,height:e,cornerRadius:12.5}},o=app.createView(r(i,!1)),a=app.createView(r(n,!0)),s=app.createView({type:"container"});return s.addChild(o),s.addChild(a),s.setHighlighted=function(t){o.visible=t,a.visible=!t},s},a._createFrontTextView=function(t,e,i){var n="#ffffff",r="#444444";i=i||{x:0,y:0};var o=function(i){return{type:"text",initialText:t,style:{fontSize:e,fill:i,align:"center"}}},a=app.createView(o(n)),s=app.createView(o(r)),c=this._convertTextToSprite(a,!1),u=this._convertTextToSprite(s,!0),h=app.createView({type:"container"});return h.position.copy(i),h.addChild(c),h.addChild(u),a.destroy(!0),s.destroy(!0),h.setHighlighted=function(t){c.visible=t,u.visible=!t},h},a._createShiftView=function(t){var e=function(t,e,i){return{type:"primitive",isVisible:i,fillColour:t,lineColour:t,lineWidth:4,isWireframe:e,vertexList:[{x:0,y:-20},{x:20,y:0},{x:10,y:0},{x:10,y:20},{x:-10,y:20},{x:-10,y:0},{x:-20,y:0}]}},i=e("#444444",!1,t),n=e("#444444",!0,!0),r=i,o=t?i:n,a=app.createView(r),s=app.createView(o),c=app.createView({type:"container"});return c.addChild(a),c.addChild(s),c.setHighlighted=function(t){a.visible=t,s.visible=!t},c},a._createBackspaceView=function(){var t=function(t,e,i){return{type:"primitive",isVisible:i,fillColour:t,lineColour:t,lineWidth:4,isWireframe:e,vertexList:[{x:-30,y:0},{x:-10,y:-15},{x:30,y:-15},{x:30,y:15},{x:-10,y:15}]}},e=app.createView(t("#444444",!1,!1)),i=app.createView(t("#444444",!0,!0)),n=app.createView({type:"container"});return n.addChild(e),n.addChild(i),n.setHighlighted=function(t){e.visible=t,i.visible=!t},n},a._createHitArea=function(t,e,i){return new n(.5*-t-i,.5*-e-i,t+2*i,e+2*i)},a._convertTextToSprite=function(t,e){var i=app.getRenderer().generateTexture(t),n=new r(i);return n.anchor.set(.5),n.visible=e,n},namespace("framework").KeyboardKeyView=o},function(t,e,i){(function(t){var e,i,n,r;e=include("framework.ContainerView"),i=function(t){var i=Object.extend({textureNames:[],config:null,configProp:"",initiallyEnabled:!1},t);e.call(this,t);var n=i.textureNames.map((function(t){return app.getCache(t)}));if(!ParticlesEmitter)throw"ParticlesView: need to include 'pixi-particles' library to use this class.";var r=i.config;r||(r=this._getEmitterConfig(i.configProp)),this._emitter=new ParticlesEmitter(this,n,r),this._emitter.emit=i.initiallyEnabled,this._emitter.autoUpdate=i.initiallyEnabled},n=e.prototype,(r=extend(i,e)).destroy=function(t){app.isWebGL()&&(app.getRenderer().plugins.sprite.sprites.length=0),n.destroy.call(this,t)},Object.defineProperty(r,"emitter",{get:function(){return this._emitter}}),Object.defineProperty(r,"enable",{set:function(t){this._emitter.emit=t},get:function(){return this._emitter.emit}}),r.update=function(t){this._emitter.update(t)},r.clear=function(){this._emitter.cleanup()},r._getEmitterConfig=function(e){return t.loader.resources[e].data},namespace("framework").ParticlesView=i}).call(this,i(23))},function(t,e){var i,n,r;i=include("framework.ContainerView"),n=function(t){var e=Object.extend({front:{},back:null,radius:10,startAngle:0,anticlockwise:!1,fillInverse:!1,initialProgress:0},t);if(i.call(this,t),this._maskView=app.createView({type:"graphics"}),this._maskHolderView=app.createView({type:"container"}),this._frontView=app.createView(e.front),this._backView=e.back?app.createView(e.back):null,!this._maskView)throw"PieView: maskView is null.";if(!this._frontView)throw"PieView: frontView is null.";this._maskHolderView.scale.x*=Boolean.toSignedInt(!e.anticlockwise),this._maskView.rotation=-Math.HALF_PI+e.startAngle,this._radius=e.radius,this._startAngle=e.startAngle,this._fillInverse=e.fillInverse,this._frontView.mask=this._maskView,this._maskHolderView.addChild(this._maskView),this._backView&&this.addChild(this._backView),this.addChild(this._frontView),this.addChild(this._maskHolderView),this._updateProgress(e.initialProgress)},i.prototype,r=extend(n,i),Object.defineProperty(r,"progress",{set:function(t){this._updateProgress(t)},get:function(){return this._progress}}),Object.defineProperty(r,"mask",{get:function(){return this._maskView}}),Object.defineProperty(r,"front",{get:function(){return this._frontView}}),Object.defineProperty(r,"back",{get:function(){return this._backView}}),r._updateProgress=function(t){this._progress=Math.clamp(t,0,1);var e=this._progress*Math.TWO_PI;this._maskView.clear().beginFill(16777215,1).moveTo(0,0).arc(0,0,this._radius,0,e,this._fillInverse).closePath().endFill()},namespace("framework").PieView=n},function(t,e){var i,n,r,o;i=include("framework.GraphicsView"),n=include("framework.ColourUtils"),r=function(t){var e=Object.extend({fillColour:"#ffffff",fillAlpha:1,lineWidth:1,lineColour:"#ffffff",lineAlpha:1,isWireframe:!1,vertexList:[]},t);i.call(this,e),this.fillColour=n.colourToNumber(e.fillColour),this.fillAlpha=e.fillAlpha,this._lineWidth=e.lineWidth,this.lineColour=n.colourToNumber(e.lineColour),this.lineAlpha=e.lineAlpha,this.isWireframe=e.isWireframe,this._vertexList=e.vertexList,this._fillPrimitive()},i.prototype,o=extend(r,i),Object.defineProperty(o,"vertexList",{set:function(t){this._vertexList=t,this._fillPrimitive()},get:function(){return this._vertexList}}),o._fillPrimitive=function(){if(this.clear(),this._vertexList&&this._vertexList.length&&!(this._vertexList.length<3)){var t=this.isWireframe?0:this.fillColour,e=this.isWireframe?0:this.fillAlpha;this.beginFill(t,e),this.lineStyle(this._lineWidth,this.lineColour,this.lineAlpha),this.moveTo(this._vertexList[0].x,this._vertexList[0].y);for(var i=1;i<this._vertexList.length;i++)this.lineTo(this._vertexList[i].x,this._vertexList[i].y);this.lineTo(this._vertexList[0].x,this._vertexList[0].y),this.endFill()}},namespace("framework").PrimitiveView=r},function(t,e){!function(){var t=include("framework.GraphicsView"),e=include("framework.ColourUtils"),i=function(i){var n=Object.extend({anchor:{x:0,y:0},fillColour:"#ffffff",fillAlpha:1,lineWidth:0,lineColour:"#ffffff",lineAlpha:1,isWireframe:!1,width:10,height:10,cornerRadius:0},i);t.call(this,n),this._anchor={x:n.anchor.x,y:n.anchor.y},this.fillColour=e.colourToNumber(n.fillColour),this.fillAlpha=n.fillAlpha,this.lineWidth=n.lineWidth,this.lineColour=e.colourToNumber(n.lineColour),this.lineAlpha=n.lineAlpha,this.isWireframe=n.isWireframe,this.rectWidth=n.width,this.rectHeight=n.height,this.cornerRadius=n.cornerRadius,this._fillRoundedRect()};t.prototype;extend(i,t)._fillRoundedRect=function(){var t=this.isWireframe?0:this.fillColour,e=this.isWireframe?0:this.fillAlpha,i=-this.rectWidth*this._anchor.x,n=-this.rectHeight*this._anchor.y;this.clear().beginFill(t,e).lineStyle(this.lineWidth,this.lineColour,this.lineAlpha).drawRoundedRect(i,n,this.rectWidth,this.rectHeight,this.cornerRadius).endFill()},namespace("framework").RectangleView=i}()},function(t,e){!function(){var t=include("framework.SpriteView"),e=include("PIXI.RenderTexture"),i=function(i){i&&i.textureName&&(i.textureName,i.textureName=null);var n=Object.extend({width:512,height:512},i);t.call(this,i),this.width=n.width,this.height=n.height,this._renderTexture=e.create(this.width,this.height),this.texture=this._renderTexture};t.prototype;extend(i,t).takeScreenshot=function(t){app.getRenderer().render(t,this._renderTexture)},namespace("framework").ScreenshotView=i}()},function(t,e,i){"use strict";(function(t){var e,n,r,o,a=i(61);i(528);window.Spine=t.spine.Spine,e=include("PIXI.spine.Spine",!1),n=include("framework.ColourUtils"),r=function(i){var r=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",spineName:null,spineData:null,skew:{x:0,y:0},autoUpdate:!0,skinName:null,attachments:[],animations:[]},i),o=r.spineData;if(!o)throw"no spine data has been provider, please check that the spine is being loaded. see PIXI.utils.TextureCache and the loader resources.";e.call(this,o),this.tint=n.colourToNumber(r.colourTint),this.skew=new t.Point(r.skew.x,r.skew.y),this.autoUpdate=r.autoUpdate,a.a.applyBaseConfigToView(r,this),r.skinName&&this.skeleton.setSkinByName(r.skinName),isArray(r.attachments)&&r.attachments.forEach(function(t){this.skeleton.setAttachment(t.slotName,t.attachmentName)}.bind(this)),isArray(r.animations)&&r.animations.forEach(function(t,e){var i=0,n=t,r=!1,o=0;isObject(t)&&(i=t.trackIndex||e,n=t.animationName||"",r=t.loop||!1,o=t.startTime||0),this.state.setAnimation(i,n,r),this.state.tracks[i]&&o>0&&(this.state.tracks[i].trackTime=o)}.bind(this)),this.autoUpdate||this.update(0)},e.prototype,(o=extend(r,e)).postInit=function(){this._postInitImpl()},o._postInitImpl=function(){},namespace("framework").SpineView=r}).call(this,i(23))},,function(t,e){var i,n,r;i=include("framework.SpriteView"),n=function(t){var e=null,n=Object.extend({startingFrameName:null},t);n.textureName&&(e=t.textureName,n.textureName=null),i.call(this,n),this.spriteSheet=null,this.updateTexture(e),this.updateFrame(n.startingFrameName)},i.prototype,(r=extend(n,i)).updateTexture=function(t){this.spriteSheet=t?app.getCache(t):null},r.updateFrame=function(t){if(this.spriteSheet){var e=this.spriteSheet.getFrame(t);e&&(this.texture=e)}},namespace("framework").SpriteSheetView=n},function(t,e,i){"use strict";(function(t){var e,n,r,o,a=i(61);e=include("PIXI.Text"),n=include("framework.ColourUtils"),r=function(i){var r=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",anchor:{x:0,y:0},initialText:"",style:{fill:"#ffffff"}},i);isDefined(r.canvasModeColour)&&!app.isWebGL()&&(r.style.fill=r.canvasModeColour),e.call(this,r.initialText,r.style),this.tint=n.colourToNumber(r.colourTint),this.anchor=new t.Point(r.anchor.x,r.anchor.y),a.a.applyBaseConfigToView(r,this)},o=e.prototype,extend(r,e).destroy=function(t){o.destroy.call(this,!0)},namespace("framework").TextView=r}).call(this,i(23))},function(t,e,i){"use strict";(function(t){var e=i(61);!function(){var i=include("PIXI.TilingSprite"),n=function(n){var r=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,textureName:null,anchor:{x:0,y:0},tileSize:{width:100,height:100},tilePosition:{x:0,y:0},tileScale:{x:1,y:1}},n),o=r.textureName?app.getCache(n.textureName):null;i.call(this,o,r.tileSize.width,r.tileSize.height),this.anchor=new t.Point(r.anchor.x,r.anchor.y),this.tilePosition=new t.Point(r.tilePosition.x,r.tilePosition.y),this.tileScale=new t.Point(r.tileScale.x,r.tileScale.y),e.a.applyBaseConfigToView(r,this)};i.prototype;extend(n,i).setMask=function(t){t&&(this.mask&&this.removeChild(this.mask),this.mask=t,this.addChild(this.mask))},namespace("framework").TileSpriteView=n}()}).call(this,i(23))},function(t,e,i){"use strict";(function(t){var e,n,r,o,a,s,c,u,h,l,f,p,d,v,y,g,m,k,w,A,S,b,_,D=i(248),C=i(159),P=i(249);e=include("framework.BaseFactory"),n=include("framework.ContainerView"),r=include("framework.SpriteView"),o=include("framework.SpriteSheetView"),a=include("framework.ParticlesView"),s=include("framework.SpineView"),c=include("framework.TileSpriteView"),u=include("framework.ScreenshotView"),h=include("framework.ButtonView"),l=include("framework.GraphicsView"),f=include("framework.PrimitiveView"),p=include("framework.CircleView"),d=include("framework.RectangleView"),v=include("framework.LineView"),y=include("framework.CurveView"),g=include("framework.BinarySpriteView"),m=include("framework.DualSpriteView"),k=include("framework.PieView"),w=include("framework.KeyboardKeyView"),A=include("framework.ColourUtils"),S=include("PIXI.Graphics"),b=function(t){e.call(this),this.loader=t,this.registerCreators([{creatorKey:"container",creatorFunc:this.defaultTreeCreator(n).bind(this)},{creatorKey:"sprite",creatorFunc:this.defaultTreeCreator(r).bind(this)},{creatorKey:"sliceSprite",creatorFunc:this._createSliceSprite().bind(this)},{creatorKey:"spriteSheet",creatorFunc:this.defaultTreeCreator(o).bind(this)},{creatorKey:"particles",creatorFunc:this.defaultTreeCreator(a).bind(this)},{creatorKey:"spine",creatorFunc:this.defaultTreeCreator(s).bind(this)},{creatorKey:"tileSprite",creatorFunc:this.defaultTreeCreator(c).bind(this)},{creatorKey:"screenshot",creatorFunc:this.defaultTreeCreator(u).bind(this)},{creatorKey:"text",creatorFunc:this._createBitmapText().bind(this)},{creatorKey:"button",creatorFunc:this.defaultTreeCreator(h).bind(this)},{creatorKey:"sliceButton",creatorFunc:this._createSliceButton().bind(this)},{creatorKey:"graphics",creatorFunc:this.defaultTreeCreator(l).bind(this)},{creatorKey:"primitive",creatorFunc:this.defaultTreeCreator(f).bind(this)},{creatorKey:"circle",creatorFunc:this.defaultTreeCreator(p).bind(this)},{creatorKey:"rectangle",creatorFunc:this.defaultTreeCreator(d).bind(this)},{creatorKey:"line",creatorFunc:this.defaultTreeCreator(v).bind(this)},{creatorKey:"curve",creatorFunc:this.defaultTreeCreator(y).bind(this)},{creatorKey:"binarySprite",creatorFunc:this.defaultTreeCreator(g).bind(this)},{creatorKey:"dualSprite",creatorFunc:this.defaultTreeCreator(m).bind(this)},{creatorKey:"pie",creatorFunc:this.defaultTreeCreator(k).bind(this)},{creatorKey:"keyboardKey",creatorFunc:this.defaultTreeCreator(w).bind(this)},{creatorKey:"circleMask",creatorFunc:this._circleMaskViewCreator.bind(this)},{creatorKey:"polygonMask",creatorFunc:this._polygonMaskViewCreator.bind(this)},{creatorKey:"polygonCollider",creatorFunc:this._polygonViewCreator().bind(this)},{creatorKey:"circleCollider",creatorFunc:this._circleViewCreator().bind(this)},{creatorKey:"boxCollider",creatorFunc:this._boxViewCreator().bind(this)},{creatorKey:"prefab",creatorFunc:this._prefabViewCreator.bind(this)}])},e.prototype,(_=extend(b,e)).create=function(t){var e=null;if(t&&isObject(t)&&t.type){var i=this._creators[t.type];if(i){if(t.viewConfig)throw"ViewFactory: 'viewConfig' property of config is deprecated (just remove it).";e=i(t,this.create.bind(this))}}return e&&isFunction(e.postInit)&&e.postInit(),e},_.createChildren=function(t,e,i){if(t){var n=Object.values(t).filter((function(t){return t&&(i||!t.ignore)}),this).map((function(t){return this.create(t)}),this).filter((function(t){return!!t}));return e&&e.addChild.apply(e,n),n}},_.createViewFromConfig=function(t,e){throw"ViewFactory: createViewFromConfig() is deprecated. Use create() instead."},_.traverseChildren=function(t,e,i,n){t&&e&&e.children&&e.children.length&&e.children.length>0&&e.children.forEach((function(e){var r=i(e,n);r&&t.addChild(r)}))},_.defaultTreeCreator=function(t){return function(e,i,n){var r=new t(e);return this.traverseChildren(r,e,i,n),r}},_._circleMaskViewCreator=function(t,e){if(!t)return null;var i=(new S).beginFill(0,1).drawCircle(t.x,t.y,t.radius);return i.name=t.name||"",i},_._polygonMaskViewCreator=function(t,e){if(!t||!t.pointNumberList)return null;var i=(new S).beginFill(0,1).drawPolygon(t.pointNumberList);return i.name=t.name||"",i},_._polygonViewCreator=function(){return function(e,i,n){if(!e||!e.points)return null;var r=e.points.map((function(e){return new t.Point(e.x,-1*e.y)})),o=new t.Polygon(r),a=new l(e).beginFill(16711680,.3).drawPolygon(o).endFill();return a.hitArea=o,a.name=e.name||"",a.alpha=0,this.traverseChildren(a,e,i,n),a}},_._boxViewCreator=function(){return function(e,i,n){if(!e||!e.size)return null;var r=new t.Rectangle(0,0,e.size.width,e.size.height),o=new l(e).beginFill(16711680,.3).drawRect(r.x,r.y,r.width,r.height).endFill();return o.hitArea=r,o.alpha=0,o.name=e.name||"",this.traverseChildren(o,e,i,n),o}},_._circleViewCreator=function(){return function(e,i,n){if(!e||!e.radius)return null;var r=new l(e).beginFill(16711680,.3).drawCircle(e.position.x,e.position.y,e.radius).endFill();return r.hitArea=new t.Circle(e.position.x,e.position.y,e.radius),r.name=e.name||"",r.alpha=0,this.traverseChildren(r,e,i,n),r}},_._createBitmapText=function(){return function(t,e,i){if(!(t&&t.position&&t.anchor&&null!=t.text&&t.fontName&&t.fontSize))return console.error("requires: viewConfig.position, viewConfig.anchor, viewConfig.text, viewConfig.fontName, viewConfig.fontSize"),null;var n={name:t.fontName,size:t.fontSize},r=t.align?t.align:"left",o=A.colourToNumber(t.tint?t.tint:"#FFFFFF");t.font={font:n,align:r,tint:o};var a=new P.a(t);return this.traverseChildren(a,t,e,i),a}},_._createSliceButton=function(){return function(t,e,i){if(!t)return console.error("requires: viewConfig.leftWidth, viewConfig.topHeight, viewConfig.rightWidth, viewConfig.bottomHeight, viewConfig.imageFrameNames"),null;var n=new D.a({textureName:t.imageFrameNames.up,insetLeft:t.insetLeft,insetTop:t.insetTop,insetRight:t.insetRight,insetBottom:t.insetBottom,imageFrameNames:t.imageFrameNames,transitionColorTints:t.transitionColorTints,anchor:t.anchor,position:t.position,width:t.width,height:t.height,name:t.name});return this.traverseChildren(n,t,e,i),n}},_._createSliceSprite=function(){return function(t,e,i){if(!t)return console.error("requires: viewConfig.leftWidth, viewConfig.topHeight, viewConfig.rightWidth, viewConfig.bottomHeight, viewConfig.imageFrameNames"),null;var n=new C.a({textureName:t.textureName,insetLeft:t.insetLeft,insetTop:t.insetTop,insetRight:t.insetRight,insetBottom:t.insetBottom,imageFrameNames:t.imageFrameNames,anchor:t.anchor,position:t.position,width:t.width,height:t.height,name:t.name,tint:t.colourTint});return this.traverseChildren(n,t,e,i),n}},b.viewConfigSuffix="ViewConfig",_._prefabViewCreator=function(t,e){var i=t.name+b.viewConfigSuffix,n=this.loader.resources[i].data[t.name];return this.create(n)},namespace("framework").ViewFactory=b}).call(this,i(23))},,,function(t,e){var i,n;n=(i=function(t){var e=Object.extend({isActive:!0},t);this._isActive=e.isActive,this._isInitialised=!1}).prototype,Object.defineProperty(n,"isActive",{set:function(t){this._isActive=t},get:function(){return this._isActive}}),Object.defineProperty(n,"isInitialised",{set:function(t){this._isInitialised=t},get:function(){return this._isInitialised}}),n.init=function(){this._isInitialised=!0},n.deinit=function(){this._isInitialised=!1},n.update=function(t){this._isActive&&this._updateImpl(t)},n._updateImpl=function(t){},namespace("framework").Script=i},function(t,e){var i,n,r,o;i=include("framework.Script"),n=function(t){var e=Object.extend({scripts:[],skipInitScripts:!1,initiallyIsRecursive:!0},t);i.call(this,e),this._scripts=[],this.addScripts(e.scripts.slice(),e.skipInitScripts),this.enable(this._isActive,e.initiallyIsRecursive)},r=i.prototype,o=extend(n,i),Object.defineProperty(o,"isActive",{set:function(t){this.enable(t,!0,!0)},get:function(){return this._isActive}}),Object.defineProperty(o,"scripts",{get:function(){return this._scripts}}),o.init=function(){r.init.call(this),this._scripts.forEach((function(t){t&&!t.isInitialised&&t.init()}),this)},o.deinit=function(){this.removeScripts(),r.deinit.call(this)},o.update=function(t){r.update.call(this,t),this._isActive&&this._scripts.forEach((function(e){e&&e.update(t)}),this)},o.enable=function(t,e,i){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),i&&(this._isActive=t),this._scripts.forEach((function(i){i&&(i.isActive=t,e&&isFunction(i.enable)&&i.enable(t,!0,!1))}),this)},o.addScript=function(t,e){this.addScripts(t,e)},o.addScripts=function(t,e){arrayify(t).filter((function(t){return!!t}),this).forEach((function(t){e||t.isInitialised||t.init(),this._scripts.contains(t)||this._scripts.push(t)}),this)},o.removeScript=function(t,e){this.removeScripts(t,e)},o.removeScripts=function(t,e){var i=t?arrayify(t):this._scripts;this._scripts.filter((function(t){return i.contains(t)}),this).forEach((function(t){!e&&t.isInitialised&&t.deinit(),this._scripts.remove(t)}),this)},o.addDebugScript=function(t,e){this.addDebugScripts(t,e)},o.addDebugScripts=function(t,e){app.isDebugMode()&&this.addScripts(t,e)},o.removeDebugScript=function(t,e){this.removeDebugScripts(t,e)},o.removeDebugScripts=function(t,e){app.isDebugMode()&&this.removeScripts(t,e)},namespace("framework").CompositeScript=n},function(t,e){var i,n;n=(i=function(t){var e=Object.extend({helper:null,view:null},t);this._helper=e.helper,this._view=e.view}).prototype,Object.defineProperty(n,"helper",{set:function(t){this._helper=t},get:function(){return this._helper}}),Object.defineProperty(n,"view",{set:function(t){this._view=t},get:function(){return this._view}}),n.captureState=function(){},n.updateState=function(t){},n.restoreState=function(){},namespace("framework").ViewTransformer=i},function(t,e){var i,n,r,o,a;i=include("framework.ViewTransformer"),n=include("framework.Vector"),r=include("framework.MinMax"),o=function(t){var e=Object.extend({clampXMovement:!1,clampYMovement:!1,xRange:null,yRange:null,returnToOldPosOnDrop:!1,onUpdateCallback:function(t,e){}},t);i.call(this,e),this._xMovementScale=e.clampXMovement?0:1,this._yMovementScale=e.clampYMovement?0:1,this._xRange=e.xRange?r.from(e.xRange):null,this._yRange=e.yRange?r.from(e.yRange):null,this._returnToOldPosOnDrop=e.returnToOldPosOnDrop,this._onUpdateCallback=e.onUpdateCallback,this._viewOldPosition=n.create(0,0)},i.prototype,a=extend(o,i),Object.defineProperty(a,"viewInitialPosition",{get:function(){return n.clone(this._viewOldPosition)}}),a.captureState=function(){this._viewOldPosition=n.clone(this._view.position)},a.updateState=function(t){var e=this._helper.getLocalMousePosition();e=n.sub(e,this._helper.mouseOffsetVec);var i=n.clone(this._view.position);this._view.position.x=Math.lerp(i.x,e.x,this._xMovementScale),this._view.position.y=Math.lerp(i.y,e.y,this._yMovementScale),this._xRange&&(this._view.position.x=this._xRange.clamp(this._view.position.x)),this._yRange&&(this._view.position.y=this._yRange.clamp(this._view.position.y)),this._onUpdateCallback&&this._onUpdateCallback(this._view,t)},a.restoreState=function(){this._returnToOldPosOnDrop&&(this._view.x=this._viewOldPosition.x,this._view.y=this._viewOldPosition.y)},namespace("framework").PositionViewTransformer=o},function(t,e){var i,n,r,o;i=include("framework.ViewTransformer"),n=include("framework.Vector"),r=function(t){var e=Object.extend({step:0,applyStepOnEndOnly:!1,onUpdateCallback:function(t,e){}},t);i.call(this,e),this._oldRotation=0,this._step=Math.abs(e.step),this._applyStepOnEndOnly=e.applyStepOnEndOnly,this._onUpdateCallback=e.onUpdateCallback},i.prototype,(o=extend(r,i)).captureState=function(){this._oldRotation=this._view.rotation,this._startAngle=n.toAngle(this._helper.mouseOffsetVec)},o.updateState=function(t){var e=this._view.position,i=this._helper.getLocalMousePosition(),r=n.sub(i,e),o=n.toAngle(r),a=this._oldRotation+(o-this._startAngle);a=this._applyModifiersToRotation(a,this._applyStepOnEndOnly),this._view.rotation=a,this._onUpdateCallback&&this._onUpdateCallback(this._view,t)},o.restoreState=function(){if(this._applyStepOnEndOnly){var t=this._applyModifiersToRotation(this._view.rotation);this._view.rotation=t}},o._applyModifiersToRotation=function(t,e){return this._step>0&&!e&&(t=t/this._step*this._step),t=Math.wrap(t,-Math.PI,Math.PI)},namespace("framework").RotationViewTransformer=r},function(t,e){!function(){var t=include("framework.ViewTransformer"),e=function(){t.call(this,{})};t.prototype,extend(e,t);namespace("framework").NullViewTransformer=e}()},function(t,e){var i,n,r;i=include("framework.CompositeScript"),n=function(t){var e=Object.extend({view:null},t);i.call(this,e),this._view=e.view},i.prototype,r=extend(n,i),Object.defineProperty(r,"view",{set:function(t){this._view=t},get:function(){return this._view}}),r.update=function(t){this._isActive&&(this._view&&this._updateImpl(t),this._scripts.forEach((function(e){e&&e.update(t)}),this))},namespace("framework").ViewScript=n},function(t,e){var i,n,r,o,a;i=include("framework.ViewScript"),n=include("framework.Vector"),r=function t(e){var r=Object.extend({horizontalAlignment:t.Alignment.NONE,verticalAlignment:t.Alignment.NONE},e);i.call(this,r),this._horizontalAlignment=r.horizontalAlignment,this._verticalAlignment=r.verticalAlignment,this._view&&(this._originalViewPos=n.clone(this._view.position))},o=i.prototype,a=extend(r,i),r.Alignment={NONE:"NONE",CENTRE:"CENTRE",LEFT:"LEFT",RIGHT:"RIGHT",TOP:"TOP",BOTTOM:"BOTTOM"},Object.defineProperty(a,"view",{set:function(t){this._view=t,this._view&&(this._originalViewPos=n.clone(this._view.position))},get:function(){return this._view}}),a.init=function(){o.init.call(this),this._windowResized()},a.deinit=function(){this._view&&this._view.transform&&(this._view.position.x=this._originalViewPos.x,this._view.position.y=this._originalViewPos.y),o.deinit.call(this)},a._updateImpl=function(t){this._windowResized()},a._windowResized=function(){this._view&&(this._alignX(),this._alignY())},a._alignX=function(){var t;this._horizontalAlignment==r.Alignment.LEFT?t=0:this._horizontalAlignment==r.Alignment.CENTRE?t=.5*app.getCanvasWidth():this._horizontalAlignment==r.Alignment.RIGHT&&(t=app.getCanvasWidth()),isDefined(t)&&(t=(this._view.parent||this._view).worldTransform.applyInverse({x:t,y:0}).x,this._view.position.x=t+this._originalViewPos.x)},a._alignY=function(){var t;this._verticalAlignment==r.Alignment.TOP?t=0:this._verticalAlignment==r.Alignment.CENTRE?t=.5*app.getCanvasHeight():this._verticalAlignment==r.Alignment.BOTTOM&&(t=app.getCanvasHeight()),isDefined(t)&&(t=(this._view.parent||this._view).worldTransform.applyInverse({x:0,y:t}).y,this._view.position.y=t+this._originalViewPos.y)},namespace("framework").AlignViewScript=r},function(t,e){var i,n,r,o;i=include("framework.ViewScript"),n=function t(e){var n=Object.extend({otherView:null,overlapTestFunc:null,overlapResultCallback:function(t,e,i,n){},isOverlappingCallback:function(t,e,i){},isNotOverlappingCallback:function(t,e,i){},overlapStartedCallback:function(t,e,i){},overlapEndedCallback:function(t,e,i){}},e);i.call(this,n),this._otherView=n.otherView,this._overlapTestFunc=n.overlapTestFunc||t.defaultOverlapTest,this._overlapResultCallback=n.overlapResultCallback,this._isOverlappingCallback=n.isOverlappingCallback,this._isNotOverlappingCallback=n.isNotOverlappingCallback,this._overlapStartedCallback=n.overlapStartedCallback,this._overlapEndedCallback=n.overlapEndedCallback},r=i.prototype,o=extend(n,i),Object.defineProperty(o,"isActive",{set:function(t){this._setActive(t)},get:function(){return this._isActive}}),Object.defineProperty(o,"otherView",{set:function(t){this._otherView=t},get:function(){return this._otherView}}),Object.defineProperty(o,"overlapTestFunc",{set:function(t){this._overlapTestFunc=t||n.defaultOverlapTest},get:function(){return this._overlapTestFunc}}),Object.defineProperty(o,"overlapResultCallback",{set:function(t){this._overlapResultCallback=t},get:function(){return this._overlapResultCallback}}),Object.defineProperty(o,"isOverlappingCallback",{set:function(t){this._isOverlappingCallback=t},get:function(){return this._isOverlappingCallback}}),Object.defineProperty(o,"isNotOverlappingCallback",{set:function(t){this._isNotOverlappingCallback=t},get:function(){return this._isNotOverlappingCallback}}),Object.defineProperty(o,"overlapStartedCallback",{set:function(t){this._overlapStartedCallback=t},get:function(){return this._overlapStartedCallback}}),Object.defineProperty(o,"overlapEndedCallback",{set:function(t){this._overlapEndedCallback=t},get:function(){return this._overlapEndedCallback}}),Object.defineProperty(o,"isOverlapping",{get:function(){return this._isOverlapping}}),n.defaultOverlapTest=function(t,e,i){var n=t.getBounds(),r=e.getBounds(),o=n.right>r.x&&n.x<r.right,a=n.bottom>r.y&&n.y<r.bottom;return o&&a},o.init=function(){r.init.call(this),this._isOverlapping=!1},o.deinit=function(){this._isOverlapping=!1,r.deinit.call(this)},o._updateImpl=function(t){if(this._otherView){var e={},i=this._testOverlap(this._view,this._otherView,e);this._updateOverlapState(i,e)}},o._setActive=function(t){this._isActive=t,this._isActive||this._updateOverlapState(!1,{})},o._testOverlap=function(t,e,i){var n=!1;return t&&e&&(n=this._overlapTestFunc(t,e,i)),n},o._updateOverlapState=function(t,e){this._isOverlapping!==t&&(this._isOverlapping=t,this._isOverlapping&&this._overlapStartedCallback?this._overlapStartedCallback(this._view,this._otherView,e):!this._isOverlapping&&this._overlapEndedCallback&&this._overlapEndedCallback(this._view,this._otherView,e)),t&&this._isOverlappingCallback?this._isOverlappingCallback(this._view,this._otherView,e):!t&&this._isNotOverlappingCallback&&this._isNotOverlappingCallback(this._view,this._otherView,e),this._overlapResultCallback&&this._overlapResultCallback(this._view,this._otherView,t,e)},namespace("framework").BoundsOverlapScript=n},function(t,e){var i,n,r,o;i=include("framework.ViewScript"),n=include("PIXI.Rectangle"),r=function(t){var e={x:480,y:360},r={x:-160,y:0},o=1280,a=720,s=Object.extend({worldView:null,playerView:null,playerRect:{x:e.x-10,y:e.y-10,width:20,bottom:20},cameraRect:{x:r.x,y:r.y,width:o,bottom:a},worldRect:{x:r.x,y:r.y,width:o,bottom:a}},t);if(s.view=s.playerView,i.call(this,s),!s.worldView)throw"CameraScript: worldView is null.";if(!s.playerView)throw"CameraScript: playerView is null.";this._worldView=s.worldView,this._playerView=this._view,this._playerRect=new n(s.playerRect),this._cameraRect=new n(s.cameraRect),this._worldRect=new n(s.worldRect)},i.prototype,o=extend(r,i),Object.defineProperty(o,"playerRect",{set:function(t){this._playerRect=new n(t)},get:function(t){return this._playerRect}}),Object.defineProperty(o,"cameraRect",{set:function(t){this._cameraRect=new n(t)},get:function(t){return this._cameraRect}}),Object.defineProperty(o,"worldRect",{set:function(t){this._worldRect=new n(t)},get:function(t){return this._worldRect}}),o._updateImpl=function(t){var e={left:this._playerView.position.x-this._playerRect.x,right:this._playerView.position.x-this._playerRect.right,top:this._playerView.position.y-this._playerRect.y,bottom:this._playerView.position.y-this._playerRect.bottom};if(this._worldView.pivot.x>e.left&&(this._worldView.pivot.x=e.left),this._worldView.pivot.x<e.right&&(this._worldView.pivot.x=e.right),this._worldView.pivot.y>e.top&&(this._worldView.pivot.y=e.top),this._worldView.pivot.y<e.bottom&&(this._worldView.pivot.y=e.bottom),this._worldRect){var i={left:this._worldRect.x-this._cameraRect.x,right:this._worldRect.right-this._cameraRect.right,top:this._worldRect.y-this._cameraRect.y,bottom:this._worldRect.bottom-this._cameraRect.bottom};this._worldView.pivot.x<i.left&&(this._worldView.pivot.x=i.left),this._worldView.pivot.x>i.right&&(this._worldView.pivot.x=i.right),this._worldView.pivot.y<i.top&&(this._worldView.pivot.y=i.top),this._worldView.pivot.y>i.bottom&&(this._worldView.pivot.y=i.bottom)}},namespace("framework").CameraScript=r},function(t,e){var i,n,r,o;i=include("framework.ViewScript"),n=function(t){var e=Object.extend({clickStartCallback:null,clickEndCallback:null,clickEndOutsideCallback:null,stopPropagation:!0,clickSoundName:null,allowAllClickEndEvents:!1},t);i.call(this,e),this._clickStartCallback=e.clickStartCallback,this._clickEndCallback=e.clickEndCallback,this._clickEndOutsideCallback=e.clickEndOutsideCallback,this._stopPropagation=e.stopPropagation,this._clickSoundName=e.clickSoundName,!this._clickSoundName||void 0!==this._clickSoundName.length&&0!==this._clickSoundName.length||(this._clickSoundName=null),this._viewInitiallyInteractive=this._view.interactive,this._onClickStartInternal=this._onClickStart.bind(this),this._onClickEndInternal=this._onClickEnd.bind(this),this._onClickEndOutsideInternal=this._onClickEndOutside.bind(this),this._isSelected=!1,this._allowAllClickEndEvents=e.allowAllClickEndEvents},r=i.prototype,o=extend(n,i),Object.defineProperty(o,"isActive",{set:function(t){this.enable(t,!0,!0),this._view&&(this._view.interactive=t,this._updateCursor())},get:function(){return this._isActive}}),Object.defineProperty(o,"isClickable",{set:function(t){this._isClickable=t},get:function(){return this._isClickable}}),Object.defineProperty(o,"isSelected",{get:function(){return this._isSelected}}),o.init=function(){r.init.call(this),this._view.interactive=this.isActive,this._isSelected=!1,this._isClickable=this.isActive,this._updateCursor(),this._view.on("mousedown",this._onClickStartInternal),this._view.on("touchstart",this._onClickStartInternal),this._view.on("touchend",this._onClickEndInternal),this._view.on("mouseup",this._onClickEndInternal),this._view.on("mouseupoutside",this._onClickEndOutsideInternal),this._view.on("touchendoutside",this._onClickEndOutsideInternal)},o._updateCursor=function(){null!=this._view.buttonMode?this._view.buttonMode=this.isActive:this._view.hasOwnProperty("cursor")&&(this._view.cursor=this.isActive?"pointer":null)},o.deinit=function(){this._view.removeListener("touchendoutside",this._onClickEndOutsideInternal),this._view.removeListener("mouseupoutside",this._onClickEndOutsideInternal),this._view.removeListener("mouseup",this._onClickEndInternal),this._view.removeListener("touchend",this._onClickEndInternal),this._view.removeListener("touchstart",this._onClickStartInternal),this._view.removeListener("mousedown",this._onClickStartInternal),this._isClickable=!1,this._isSelected=!1,this._view.interactive=this._viewInitiallyInteractive,this._updateCursor(),r.deinit.call(this)},o._onClickStart=function(t){this.isActive&&this.isClickable&&(this._isSelected=!0,this._clickStartCallback&&this._clickStartCallback(t,this._view),this._stopPropagation&&t.stopPropagation())},o._onClickEnd=function(t){this.isActive&&this.isClickable&&(this._isSelected||this._allowAllClickEndEvents)&&(this._isSelected=!1,this._clickSoundName&&app.playSound(this._clickSoundName),this._stopPropagation&&t.stopPropagation(),this._clickEndCallback&&this._clickEndCallback(t,this._view))},o._onClickEndOutside=function(t){this.isActive&&this.isClickable&&(this._isSelected=!1,this._clickEndOutsideCallback&&this._clickEndOutsideCallback(t,this._view),this._stopPropagation&&t.stopPropagation())},namespace("framework").ClickScript=n},function(t,e){var i,n,r,o;i=include("framework.ViewScript"),n=include("framework.Vector"),r=function(t){var e=Object.extend({targetView:null},t);i.call(this,e),this._targetView=e.targetView},i.prototype,o=extend(r,i),Object.defineProperty(o,"targetView",{set:function(t){this._targetView=t},get:function(){return this._targetView}}),o._updateImpl=function(t){if(this._targetView){var e=n.transformTo(this._targetView,this._view.parent),i=n.createFromPoints(this._view.position,e);this._view.rotation=n.toAngle(i)}},namespace("framework").FaceViewScript=r},function(t,e){var i,n,r,o;i=include("framework.ViewScript"),n=function(t){var e=Object.extend({hoverStartCallback:null,hoverEndCallback:null,hoverCallback:null,stopPropagation:!0},t);i.call(this,e),this._hoverStartCallback=e.hoverStartCallback,this._hoverEndCallback=e.hoverEndCallback,this._hoverCallback=e.hoverCallback,this._stopPropagation=e.stopPropagation,this._viewInitiallyInteractive=this._view.interactive,this._onHoverStartInternal=this._onHoverStart.bind(this),this._onHoverEndInternal=this._onHoverEnd.bind(this)},r=i.prototype,(o=extend(n,i)).init=function(){r.init.call(this),this._view.interactive=!0,this._view.on("mouseover",this._onHoverStartInternal),this._view.on("mouseout",this._onHoverEndInternal)},o.deinit=function(){this._view.removeListener("mouseout",this._onHoverEndInternal),this._view.removeListener("mouseover",this._onHoverStartInternal),this._view.interactive=this._viewInitiallyInteractive,r.deinit.call(this)},o._onHoverStart=function(t){this.isActive&&(this._hoverStartCallback&&this._hoverStartCallback(t,this._view),this._hoverCallback&&this._hoverCallback(t,this._view,!0),this._stopPropagation&&t.stopPropagation())},o._onHoverEnd=function(t){this.isActive&&(this._hoverEndCallback&&this._hoverEndCallback(t,this._view),this._hoverCallback&&this._hoverCallback(t,this._view,!1),this._stopPropagation&&t.stopPropagation())},namespace("framework").HoverScript=n},function(t,e){var i,n,r,o,a;i=include("framework.DragViewScript"),include("framework.WindowUtils"),n=include("framework.Vector"),r=function(t){var e=Object.extend({shouldSnap:!1},t);i.call(this,e),this._shouldSnap=e.shouldSnap,this._firstClickOccurring=!1},o=i.prototype,(a=extend(r,i)).init=function(){o.init.call(this),this._firstClickOccurring=!1},a.deinit=function(){o.deinit.call(this)},a.startDrag=function(t){this._viewIsSelected=!1,this._onViewMouseUp(t)},a.stopDrag=function(t){this._viewIsSelected=!0,this._onViewMouseUp(t)},a._onViewMouseDown=function(t){this.isActive&&console.log("Mouse down.")},a._onViewMouseUp=function(t){if(this.isActive)if(console.log("Mouse up."),this._viewIsSelected)this._endDrag(t);else{if(this._shouldSnap){var e=n.transformGlobalToChild(t.data.global,this._view.parent);this._view.position.x=e.x,this._view.position.y=e.y}this._beginDrag(t)}},a._onViewMouseUpOutside=function(t){this.isActive&&(console.log("Mouse up outside."),this._viewIsSelected&&this._endDrag(t))},a._onViewMouseMove=function(t){this.isActive&&this._viewIsSelected&&this._dragMove(t)},a._onViewMouseMoveOutOfWindow=function(t){this.isActive&&this._viewIsSelected&&console.log("Mouse up outside of window.")},namespace("framework").StickyDragViewScript=r},function(t,e,n){"use strict";n.r(e);n(195);var r=n(23),o=n(84),a=n(247);window.PIXI=r,window.TWEEN=o,window.ParticlesEmitter=a.a;n(473),n(474),n(475),n(476),n(477),n(478);var s=n(158),c=n.n(s);!function(t){t.extend=function(e,i){if(i){"string"==typeof i&&(i=t.include(i));var n=i.prototype;e.prototype=Object.create(n),Object.defineProperty(e.prototype,"__parent",{configurable:!0,writable:!0,value:n})}return Object.defineProperty(e.prototype,"constructor",{configurable:!0,writable:!0,value:e}),e.extend=function(i){return t.extend(i,e)},e.prototype};t.mixin=function(e,i){if(!i)throw"Did not supply a valid mixin class";if("string"==typeof i&&(i=t.include(i)),!i.prototype)throw"The mixin class does not have a valid protoype";var n=i.prototype;for(var r in n){var o=Object.getOwnPropertyDescriptor(n,r);o?Object.defineProperty(e,r,o):e[r]=n[r]}return i.apply(e,Array.prototype.slice.call(arguments,2)),e};t.include=function(e,i){var n=e.split("."),r=t,o="";i=void 0===i||!!i;for(var a=0,s=n.length;a<s;a++){if(!r[o=n[a]]){if(!i)return null;throw"Unable to include '"+e+"' because the code is not included or the class needs to loaded sooner."}r=r[o]}return r};t.namespace=function(e){for(var i=e.split("."),n=t,r="",o=0,a=i.length;o<a;o++)n[r=i[o]]=n[r]||{},n=n[r];return n};t.instanceOf=function(t,e){if(!t)return!1;if(t instanceof e)return!0;var i,n=!0,r=t.constructor.prototype,o=e.prototype;for(i in o)n=n&&i in r;return!!i&&n};t.isDefined=function(t){return void 0!==t};t.isFunction=function(t){return"function"===c()(t)};t.isNumber=function(t){return"number"==typeof t};t.isString=function(t){return"string"==typeof t};t.isBoolean=function(t){return"boolean"==typeof t};t.isObject=function(t){return null!==t&&"object"===c()(t)};var e=function(t){return t||null};t.nullify=e;t.getProperty=function(t,i,n){n=!!n;var r="Cannot get property '"+i+"'.",o=t;if(o)for(var a=i?i.split("."):[],s=0;s<a.length;s++){var c=a[s];if(!(o=c?o[c]:null))break}if(!o&&n)throw r;return e(o)},t.EmptyFunction=function(){},t.TrueFunction=function(){return!0},t.FalseFunction=function(){return!1},t.NullFunction=function(){return null}}(window);n(479),n(480),n(481),n(482),n(483),n(484),n(485),n(486),n(487),n(488),n(489),n(490),n(491),n(492),n(493),n(494),n(495),n(496),n(497),n(498),n(499),n(500),n(501),n(502),n(503),n(504),n(505),n(506),n(507),n(508),n(509),n(510),n(511),n(512),n(513),n(514),n(515);var u,h,l,f,p=n(61);u=include("PIXI.Container"),h=function(t){var e=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,predicate:this._sortZIndexAsc.bind(this)},t);u.call(this),p.a.applyBaseConfigToView(e,this)},l=u.prototype,(f=extend(h,u)).postInit=function(){this._postInitHelper(this)},f.getChildByName=function(t){return h.getChildByNameRecursive(this,t)},f.clear=function(){this.removeChildren()},f.addChild=function(t){var e=[].slice.call(arguments);e.forEach((function(t){var e=this.computeOrderedIndex(t);l.addChildAt.call(this,t,e)}),this)},f.addChildAt=function(t,e){if(!(!t||e<0||e>this.children.length)){var i=0;if(this.children.length>0){var n=Math.clamp(e-1,0,this.children.length-1),r=Math.clamp(e,0,this.children.length-1),o=this._getZIndex(this.children[n]),a=this._getZIndex(this.children[r])-o;i=Math.floor(o+.5*a)}t.zIndex=i,l.addChildAt.call(this,t,e)}},f.refreshOrder=function(){this.children.sort(this.predicate)},f.computeOrderedIndex=function(t){for(var e=0;e<this.children.length&&this.predicate(t,this.children[e])>=0;)e++;return e},f._postInitImpl=function(){},f._postInitHelper=function(t){if(t.children&&t.children.length&&t.children.length>0)for(var e=0;e<t.children.length;e++)this._postInitHelper(t.children[e]);"function"==typeof t._postInitImpl&&t._postInitImpl()},h.getChildByNameRecursive=function(t,e){if(t.children&&t.children.length&&t.children.length>0)for(var i=0;i<t.children.length;i++){var n=h.getChildByNameRecursive(t.children[i],e);if(n)return n}return t.name&&t.name===e?t:null},h.visibleChildren=function(t,e){if(t.children&&t.children.length&&t.children.length>0)for(var i=0;i<t.children.length;i++)t.children[i].visible=e,h.visibleChildren(t.children[i],e)},f._sortZIndexAsc=function(t,e){return this._getZIndex(t)-this._getZIndex(e)},f._getZIndex=function(t){return t&&t.zIndex?t.zIndex:0},namespace("framework").ContainerView=h,function(){var t=include("PIXI.Graphics"),e=include("framework.ColourUtils"),i=function(i){var n=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",width:0,height:0},i);t.call(this),p.a.applyBaseConfigToView(n,this),this.width=n.width,this.height=n.height,this.viewConfig=n,this.tint=e.colourToNumber(n.colourTint)};t.prototype,extend(i,t);namespace("framework").GraphicsView=i}();n(516),n(517),n(518),n(519);!function(){var t=include("PIXI.Graphics"),e=include("framework.ColourUtils"),i=function(i){var n=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",curveColour:"#ffffff",curveAlpha:1,curveWidth:1,curveIsVisible:!0,approximatedPointsColour:"#00ff00",approximatedPointsAlpha:1,approximatedPointsRadius:10,approximatedPointsAreVisible:!1,controlPointColour:"#ff0000",controlPointAlpha:1,controlPointRadius:10,controlPointsAreVisible:!1,tangentColour:"#0000ff",tangentAlpha:1,tangentWidth:1,tangentsAreVisible:!1,vertexList:[],precomputedLUT:[]},i);t.call(this),p.a.applyBaseConfigToView(n,this),this.tint=e.colourToNumber(n.colourTint),this.curveColour=e.colourToNumber(n.curveColour),this.curveAlpha=n.curveAlpha,this.curveWidth=n.curveWidth,this.curveIsVisible=n.curveIsVisible,this.approximatedPointsColour=e.colourToNumber(n.approximatedPointsColour),this.approximatedPointsAlpha=n.approximatedPointsAlpha,this.approximatedPointsRadius=n.approximatedPointsRadius,this.approximatedPointsAreVisible=n.approximatedPointsAreVisible,this.controlPointColour=e.colourToNumber(n.controlPointColour),this.controlPointAlpha=n.controlPointAlpha,this.controlPointRadius=n.controlPointRadius,this.controlPointsAreVisible=n.controlPointsAreVisible,this.tangentColour=e.colourToNumber(n.tangentColour),this.tangentAlpha=n.tangentAlpha,this.tangentWidth=n.tangentWidth,this.tangentsAreVisible=n.tangentsAreVisible,this._curve=new t,this._approximatedPoints=new t,this._controlPoints=new t,this._tangents=new t,this._curve.visible=this.curveIsVisible,this._approximatedPoints.visible=this.approximatedPointsAreVisible,this._controlPoints.visible=this.controlPointsAreVisible,this._tangents.visible=this.tangentsAreVisible,this.addChild(this._curve),this.addChild(this._tangents),this.addChild(this._approximatedPoints),this.addChild(this._controlPoints),this._vertexList=n.vertexList,this._precomputedLUT=n.precomputedLUT,this._refreshCanvas()},n=(t.prototype,extend(i,t));Object.defineProperty(n,"vertexList",{set:function(t){this._vertexList=t,this._refreshCanvas()},get:function(){return this._vertexList}}),Object.defineProperty(n,"precomputedLUT",{set:function(t){this._precomputedLUT=t,this._refreshCanvas()},get:function(){return this._precomputedLUT}}),n._refreshCanvas=function(){if(this._curve.clear(),this._approximatedPoints.clear(),this._controlPoints.clear(),this._tangents.clear(),this._vertexList&&this._vertexList.length&&!(this._vertexList.length<4)&&this._vertexList.length%3==1){var t,e,i,n,r,o=Math.floor(this._vertexList.length/3);for(this._curve.lineStyle(this.curveWidth,this.curveColour,this.curveAlpha),this._curve.moveTo(this._vertexList[0].x,this._vertexList[0].y),t=0;t<o;t++)e=3*t,i=this._vertexList[e+1],n=this._vertexList[e+2],r=this._vertexList[e+3],this._curve.bezierCurveTo(i.x,i.y,n.x,n.y,r.x,r.y);if(this._precomputedLUT){for(this._approximatedPoints.beginFill(this.approximatedPointsColour,this.approximatedPointsAlpha),this._approximatedPoints.lineStyle(1,this.approximatedPointsColour,this.approximatedPointsAlpha),t=0;t<this._precomputedLUT.length;t++)this._approximatedPoints.drawCircle(this._precomputedLUT[t].x,this._precomputedLUT[t].y,this.approximatedPointsRadius);this._approximatedPoints.endFill()}for(this._tangents.lineStyle(this.tangentWidth,this.tangentColour,this.tangentAlpha),t=0;t<o;t++){e=3*t;var a=this._vertexList[e];i=this._vertexList[e+1],n=this._vertexList[e+2],r=this._vertexList[e+3],this._tangents.moveTo(a.x,a.y),this._tangents.lineTo(i.x,i.y),this._tangents.moveTo(n.x,n.y),this._tangents.lineTo(r.x,r.y)}for(this._controlPoints.beginFill(this.controlPointColour,this.controlPointAlpha),this._controlPoints.lineStyle(1,this.controlPointColour,this.controlPointAlpha),t=0;t<this._vertexList.length;t++)this._controlPoints.drawCircle(this._vertexList[t].x,this._vertexList[t].y,this.controlPointRadius);this._controlPoints.endFill()}},namespace("framework").CurveView=i}();n(520),n(521);!function(){var t=include("PIXI.Graphics"),e=include("framework.ColourUtils"),n=function(i){var n=Object.extend({name:"",position:{x:0,y:0},rotation:0,scale:{x:1,y:1},pivot:{x:0,y:0},alpha:1,isInteractive:!1,isVisible:!0,mask:null,zIndex:0,colourTint:"#ffffff",lineColour:"#ffffff",lineAlpha:1,lineWidth:1,lineIsVisible:!0,pointsColour:"#00ff00",pointsAlpha:1,pointsRadius:10,pointsAreVisible:!1,vertexList:[]},i);t.call(this),p.a.applyBaseConfigToView(n,this),this.tint=e.colourToNumber(n.colourTint),this.lineColour=e.colourToNumber(n.lineColour),this.lineAlpha=n.lineAlpha,this.lineWidth=n.lineWidth,this.lineIsVisible=n.lineIsVisible,this.pointsColour=e.colourToNumber(n.pointsColour),this.pointsAlpha=n.pointsAlpha,this.pointsRadius=n.pointsRadius,this.pointsAreVisible=n.pointsAreVisible,this._line=new t,this._points=new t,this._line.visible=this.lineIsVisible,this._points.visible=this.pointsAreVisible,this.addChild(this._line),this.addChild(this._points),this._vertexList=n.vertexList,this._refreshCanvas()},r=(t.prototype,extend(n,t));Object.defineProperty(r,"vertexList",{set:function(t){this._vertexList=t,this._refreshCanvas()},get:function(){return this._vertexList}}),r._refreshCanvas=function(){if(this._line.clear(),this._points.clear(),this._vertexList&&this._vertexList.length&&!(this._vertexList.length<2)){for(this._line.lineStyle(this.lineWidth,this.lineColour,this.lineAlpha),this._line.moveTo(this._vertexList[0].x,this._vertexList[0].y),i=1;i<this._vertexList.length;i++)this._line.lineTo(this._vertexList[i].x,this._vertexList[i].y);for(this._points.beginFill(this.pointsColour,this.pointsAlpha),this._points.lineStyle(1,this.pointsColour,this.pointsAlpha),i=0;i<this._vertexList.length;i++)this._points.drawCircle(this._vertexList[i].x,this._vertexList[i].y,this.pointsRadius);this._points.endFill()}},namespace("framework").LineView=n}();n(522),n(523),n(524),n(525),n(526),n(527),n(529),n(530),n(531),n(532),n(535),n(536),n(537),n(538),n(539),n(540),n(541),n(244),n(542),n(543),n(544),n(545),n(546),n(547),n(548);var d=n(3),v=n.n(d),y=n(2),g=n.n(y),m=n(1),k=n.n(m),w=n(115),A=function(){function t(e){var i=this;v()(this,t),k()(this,"pixiApp",void 0),k()(this,"scaleManager",void 0),k()(this,"resizeCallback",void 0),k()(this,"height",void 0),k()(this,"width",void 0),k()(this,"onResize",(function(t){var e=i.pixiApp.renderer,n=i.width.valueOf()*t.scaleRatio,r=i.height.valueOf()*t.scaleRatio;e.view.style.width="".concat(n,"px"),e.view.style.height="".concat(r,"px"),i.resizeCallback&&i.resizeCallback(n,r)})),this.pixiApp=e.pixiApp,this.resizeCallback=e.resizeCallback,this.width=e.width,this.height=e.height,this.scaleManager=new w.b({width:e.width,height:e.height,safeWidth:e.safeWidth,safeHeight:e.safeHeight,callback:this.onResize}),this.scaleManager.resizer&&(this.scaleManager.resizer.getWindowResolution=function(){return navigator.platform&&/iPad|iPhone|iPod/.test(navigator.platform)?{width:document.documentElement.clientWidth,height:document.documentElement.clientHeight}:{width:window.innerWidth,height:window.innerHeight}})}return g()(t,[{key:"destroy",value:function(){this.scaleManager&&(this.scaleManager.disable(),this.scaleManager=null),this.resizeCallback=null,this.pixiApp=null}}]),t}(),S=n(31),b=(n(12),n(14),n(13),n(8)),_=n.n(b),D=n(0),C=n.n(D),P=n(9),x=n.n(P);function R(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var M=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(R()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return n}(n(160).a),I=(n(38),n(51),n(47),n(44),n(45),n(57),n(108),n(141),n(112),n(150),function(){function t(){v()(this,t)}return g()(t,null,[{key:"testiOS",value:function(){if(t.WEB_STORAGE_SUPPORT)try{localStorage.setItem("LS_TEST","test"),localStorage.removeItem("LS_TEST")}catch(e){t.WEB_STORAGE_SUPPORT=!1}}},{key:"remove",value:function(e){t.WEB_STORAGE_SUPPORT?(localStorage.removeItem(e),sessionStorage.removeItem(e)):t.write(e,"",t.ERASE_COOKIE)}},{key:"write",value:function(e,i){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;t.WEB_STORAGE_SUPPORT?r?sessionStorage.setItem(e,JSON.stringify(i)):localStorage.setItem(e,JSON.stringify(i)):(n=r?r!==t.ERASE_COOKIE?"":"; expires=Thu, 01 Jan 1970 00:00:00 GMT":"; expires="+new Date(2147483646e3).toUTCString(),document.cookie=e+"="+escape(JSON.stringify(i))+n+"; path=/")}},{key:"read",value:function(e){if(t.WEB_STORAGE_SUPPORT){var i=localStorage.getItem(e)||sessionStorage.getItem(e);return i?JSON.parse(i):null}var n,r,o=e+"=",a=document.cookie.split(";"),s=0;for(s=0,r=a.length;s<r;s++){for(n=a[s];" "==n.charAt(0);)n=n.substring(1,n.length);if(0===n.indexOf(o))return JSON.parse(unescape(n.substring(o.length,n.length)))}return null}}]),t}());k()(I,"WEB_STORAGE_SUPPORT",void 0!==window.Storage),k()(I,"ERASE_COOKIE",-1);var T=function(){function t(){v()(this,t)}return g()(t,null,[{key:"setUserDataProfile",value:function(e){t.userDataKey=e;var i=t.getUserDataProfiles();if(!i.contains(e)){var n=i.concat(e);I.write(t.profilesKey,n)}}},{key:"getUserDataProfiles",value:function(){var e=I.read(t.profilesKey);return e||(e=[]),e}},{key:"deleteUserDataProfile",value:function(e){var i=t.getUserDataProfiles();i.contains(e)&&(I.write(t.profilesKey,i.filter((function(t){return t!==e}))),I.remove(e))}},{key:"getCurrentUserDataProfile",value:function(){return t.userDataKey}},{key:"saveCurrentSceneName",value:function(e){t.setItem(t.currentSceneKey,e)}},{key:"getCurrentSceneName",value:function(){return t.getItem(t.currentSceneKey)}},{key:"savePreviousSceneName",value:function(e){t.setItem(t.previousSceneKey,e)}},{key:"getPreviousSceneName",value:function(){return t.getItem(t.previousSceneKey)}},{key:"getItem",value:function(e){var i=I.read(t.getCurrentUserDataProfile());return i||(i={}),i[e]}},{key:"setItem",value:function(e,i){var n=I.read(t.getCurrentUserDataProfile());return n||(n={}),n[e]=i,I.write(t.getCurrentUserDataProfile(),n)}}]),t}();k()(T,"previousSceneKey","previousScene"),k()(T,"currentSceneKey","currentScene"),k()(T,"profilesKey","profilesKey"),k()(T,"userDataKey","userDataKey");var O,F,B=n(4),V=function(){function t(e,i){v()(this,t),this.rootMediator=e,this.diService=i,k()(this,"loadingService",void 0),k()(this,"sceneMap",new Map([])),k()(this,"currentScene",void 0),k()(this,"_currentSceneName",void 0),k()(this,"_loadingScreen",void 0),k()(this,"loader",null),this.loadingService=i.get(B.b.LoadingService),this.loader=this.loadingService.loader}return g()(t,[{key:"currentSceneName",get:function(){return this._currentSceneName}},{key:"loadingScreen",set:function(t){this._loadingScreen=t}}]),g()(t,[{key:"addSceneToMap",value:function(t,e){this.sceneMap.set(t,e)}},{key:"goToSceneWithoutLoadScreen",value:function(t){var e=this;this.loadingService.loadAssets(this.loader,t,(function(t){}),(function(i){e.removeCurrentScene(),e.onSceneConfigLoaded(t,i)}))}},{key:"fadeInScene",value:function(t,e){var i=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=""+this._currentSceneName,o=framework.Actions.BlockingFunc((function(){return function(t,e){}}));return this.loadingService.loadAssets(this.loader,t,n,(function(n){i.rootMediator.runAction(framework.Actions.Sequence([o,e,framework.Actions.Func((function(){i.swapScene(t,i.createSceneMediator(t,n)),i.currentScene.init()})),framework.Actions.Func((function(){i.removeScene(r)}))]))})),o}},{key:"goToScene",value:function(t){var e=this;this.removeCurrentScene(),this.showLoadingScreen(t),this.loadingService.loadAssets(this.loader,t,(function(t){}),(function(i){e.tryRemoveLoadingScreen(e.onSceneConfigLoaded.bind(e,t,i))}))}},{key:"removeCurrentScene",value:function(){this.currentScene&&(this.rootMediator.removeChild(this.currentScene),this.currentScene.destroy(),this.loadingService.unloadAssetsForScene(this._currentSceneName),this.currentScene=null)}},{key:"removeScene",value:function(t){var e=this.loadingService.sceneAssets[this._currentSceneName],i=this.loadingService.sceneAssets[t];console.log("removeScene",i);var n=i.filterOutItems(e);this.loadingService.unloadAssets(n),this.loadingService.removeSceneConfigFilesFromResources(t)}},{key:"onSceneConfigLoaded",value:function(t,e){if(!t||!e)throw"usage : sceneName: string, config: any (json containing the view description";this.showScene(t,this.createSceneMediator(t,e))}},{key:"createSceneMediator",value:function(t,e){var i=window.app.createChildViews(e);if(!i||0==i.length)throw"error: no view have been created from the config";var n=i[0];return new(this.sceneMap.get(t))(n,this.diService)}},{key:"showScene",value:function(t,e){this._currentSceneName&&this.shouldPersistScene(t)&&T.savePreviousSceneName(this._currentSceneName),this._currentSceneName=t,this.currentScene=e,e.name=t,this.rootMediator.addChild(e),this.currentScene.init(),this.shouldPersistScene(t)&&T.saveCurrentSceneName(t)}},{key:"swapScene",value:function(t,e){this._currentSceneName&&this.shouldPersistScene(t)&&T.savePreviousSceneName(this._currentSceneName),this._currentSceneName=t;var i=this.currentScene;this.rootMediator.swapChild(this.currentScene,e),e.name=t,this.currentScene=e,i.destroy(),this.shouldPersistScene(t)&&T.saveCurrentSceneName(t)}},{key:"shouldPersistScene",value:function(t){return!0}},{key:"showLoadingScreen",value:function(t){if(!this._loadingScreen||!this.rootMediator.children.contains(this._loadingScreen)){if(this._loadingScreen=this.getLoadingScreen(t),!this._loadingScreen)throw"no laoding screen has been provided.";this.rootMediator.addChild(this._loadingScreen),this._loadingScreen.init()}}},{key:"getLoadingScreen",value:function(t){return this.diService.getDataByKey(t)}},{key:"tryRemoveLoadingScreen",value:function(t){this._loadingScreen&&(this.removeLoadingScreen(),t())}},{key:"removeLoadingScreen",value:function(){this.rootMediator.removeChild(this._loadingScreen),this._loadingScreen=null}}]),t}(),L=function(){function t(){v()(this,t),k()(this,"data",{}),k()(this,"services",{})}return g()(t,[{key:"register",value:function(t,e){this.services[t]=e}},{key:"get",value:function(t){return this.services[t]}},{key:"setDataWithKey",value:function(t,e){this.data[t]=e}},{key:"getDataByKey",value:function(t){return this.data[t]}},{key:"deleteDataWithKey",value:function(t){delete this.data[t]}}]),t}(),E=n(250),N=n(86),K=n(76),H=n(7),U=n.n(H),W=n(6),j=n.n(W),q=(n(33),n(34),n(5)),X=n(41),G=n(17),z=n(42);!function(t){t.propDrop="propDrop",t.ropeDrop="ropeDrop",t.forestProp="forestProp"}(F||(F={}));var Y,Z,J=(O={},k()(O,F.propDrop,{name:"prop-drop.mp3",delay:.4}),k()(O,F.forestProp,{name:"prop-drop.mp3",delay:.3}),k()(O,F.ropeDrop,{name:"rope-drop.mp3",delay:.4}),O),$=n(39),Q=function(){function t(e,i){v()(this,t),this.view=e,this.diService=i,k()(this,"present",void 0),k()(this,"wardrobe",void 0),k()(this,"pantry",void 0),k()(this,"_selected",void 0),k()(this,"spines",void 0),k()(this,"actionSFXRepeat",null),this.present=Object(G.c)(this.view,"present-anim"),this.wardrobe=Object(G.c)(this.view,"wardrobe-anim"),this.pantry=Object(G.c)(this.view,"pantry-anim"),this.spines=[this.present,this.wardrobe,this.pantry],this.hide()}return g()(t,[{key:"selected",set:function(t){switch(t){case Z.pantry:this._selected=this.pantry;break;case Z.present:this._selected=this.present;break;case Z.wardrobe:this._selected=this.wardrobe}}}]),g()(t,[{key:"init",value:function(){this.reset()}},{key:"show",value:function(){this._selected.visible=!0}},{key:"hide",value:function(){this.spines.forEach((function(t){t.visible=!1}))}},{key:"getShowAction",value:function(){var t=this;return framework.Actions.Func((function(){return t.show()}))}},{key:"getShowAnimAction",value:function(){var t=this,e=J[F.propDrop];return framework.Actions.Parallel([framework.Actions.Func((function(){return t.show()})),this.getAnimAction(Y.show),Object(z.b)(e.delay,e.name,this.diService)])}},{key:"getOpenIdleAnimAction",value:function(){var t=this,e=this._selected==this.present?Y.idle:Y.idleOpen;return framework.Actions.Func((function(){return t._selected.state.setAnimation(0,e,!0)}))}},{key:"getCloseAnimAction",value:function(){return this.getAnimAction(Y.close)}},{key:"getOpenAnimAction",value:function(){var t=this._selected==this.present?Y.hide:Y.idleOpen;return this.getAnimAction(t)}},{key:"getCloseIdleAnimAction",value:function(){var e=this;return this.actionSFXRepeat=framework.Actions.Repeat(framework.Actions.Sequence([new $.a(t.shakeSFX,S.a.C1,!1,this.diService),framework.Actions.Delay(1.5)])),framework.Actions.Parallel([framework.Actions.Func((function(){return e._selected.state.setAnimation(0,Y.idleClosed,!0)}))])}},{key:"getAnimAction",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return framework.Actions.Spine(this._selected,t,{loop:e})}},{key:"playIdle",value:function(){this._selected.state.setAnimation(0,Y.idleClosed,!0)}},{key:"deinit",value:function(){this.reset()}},{key:"reset",value:function(){this.hide()}},{key:"skip",value:function(t){this._selected=this.wardrobe,this.show(),t()}},{key:"getSFXAction",value:function(){return this.actionSFXRepeat}}]),t}();k()(Q,"shakeSFX","trap-shake-sfx.mp3"),function(t){t.close="close",t.show="show",t.idleClosed="idle-closed",t.idleOpen="idle-open",t.open="open",t.idle="idle",t.hide="hide"}(Y||(Y={})),function(t){t.present="prop-2-present",t.pantry="prop-2-Pantry",t.wardrobe="prop-2-closet"}(Z||(Z={}));var tt=n(58),et=n(29),it=n(119),nt=n(11),rt=n(21),ot=n(66);function at(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var st=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(at()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"setDefaultAction",value:function(t){var e={};e[et.b.lrrhAction2Walking]=rt.a.walk,e[et.b.lrrhAction2Jumping]=rt.a.jump,e[et.b.lrrhAction2Grooving]=rt.a.dance;var i={};i[et.b.lrrhAction2Walking]=!0,i[et.b.lrrhAction2Jumping]=!0,i[et.b.lrrhAction2Grooving]=!0,this._defaultAction=e[t],this._defaultLoopAction=i[t]}},{key:"setReactionAction",value:function(t){var e={};e[et.b.act3Action2Run]=rt.a.run,e[et.b.act3Action2Leapfrog]=rt.a.jump,e[et.b.act3Action2Shake]=rt.a.shake;var i={};i[et.b.act3Action2Run]=!0,i[et.b.act3Action2Leapfrog]=!0,i[et.b.act3Action2Shake]=!0,this._reactionAction=e[t],this._reactionLoopAction=i[t]}},{key:"getSetUmbrellaAction",value:function(){var t=this,e=framework.Actions.Func((function(){return t.setUmbrella()}));return this.createHideAndRiseAction(e)}},{key:"setUmbrella",value:function(){var t=nt.b.umbrella;switch(this._costume){case nt.a.cowboy:this.removeAttachment("costumes/cowboyhat"),t=nt.b.umbrellaCowboy;break;case nt.a.pirate:t=nt.b.umbrellaPirate;break;default:t=nt.b.umbrella}this.attachCostumePart(t)}},{key:"getSetWolfAction",value:function(){var t=this,e=framework.Actions.Func((function(){return t.setWolf()}));return this.createHideAndRiseAction(e)}},{key:"getSetWolfGranmaAction",value:function(t){var e=framework.Actions.Func(t);return this.createHideAndRiseAction(e)}},{key:"setWolfGranma",value:function(){this.removeCostume(),this.addCostume(nt.a.grandma),this.setWolf()}},{key:"setWolf",value:function(){this.attachCostumePart("costumes/wolf")}},{key:"getRemoveGlassesAction",value:function(){var t=this,e=framework.Actions.Func((function(){return t.removeGlasses()}));return this.createHideAndRiseAction(e)}},{key:"removeGlasses",value:function(){this.removeAttachment("costumes/grandma-glasses")}},{key:"getRemoveHairAction",value:function(){var t=this,e=framework.Actions.Func((function(){return t.removeHair()}));return this.createHideAndRiseAction(e)}},{key:"removeHair",value:function(){this.removeAttachment("costumes/grandma-hair")}},{key:"removeDress",value:function(){this.removeAttachment("costumes/grandma-dress")}},{key:"removeCane",value:function(){this.removeAttachment("costumes/grandma-cane")}},{key:"removeSlippers",value:function(){this.removeAttachment("costumes/grandma-slippers")}},{key:"getWolfRevealAction",value:function(){var t=this,e=framework.Actions.Func((function(){t.setWolfTeeth(),t.removeDress(),t.removeSlippers(),t.removeCane()}));return this.createHideAndRiseAction(e)}},{key:"setWolfTeeth",value:function(){var t=nt.c.get(nt.a.woflteeth)[0];this.removeAttachment(nt.c.get(nt.a.wolf)[0]),this.attachCostumePart(t)}},{key:"setBasket",value:function(t){var e=nt.c.get(t);if(e){var i=e.first();i&&this.attachCostumePart(i)}}},{key:"removeBasket",value:function(t){var e=nt.c.get(t);if(e){var i=e.first();i&&this.removeAttachment(i)}}},{key:"getSetAccessoryAction",value:function(t){var e=this,i=framework.Actions.Func((function(){return e.setBasket(t)}));return this.createHideAndRiseAction(i)}}]),n}(ot.a);function ct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ut=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ct()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"initFactory",value:function(){return new et.e(this.diService,this.view)}},{key:"initCharacters",value:function(){var t=this;j()(C()(n.prototype),"initCharacters",this).call(this);var e=new st(this.characterRoleMap.get(q.a.narrator),q.a.narrator,this.narrator,this.diService),i=new st(this.characterRoleMap.get(q.a.littleRedHood),q.a.littleRedHood,this.character,this.diService),r=new st(this.characterRoleMap.get(q.a.wolf),q.a.wolf,this.characterSecond,this.diService),o=new st(this.characterRoleMap.get(q.a.grandma),q.a.grandma,this.characterThird,this.diService);e.setCostume(nt.a.narrator),o.setCostume(nt.a.grandma),this.scripts.addScripts([e,i,r,o]),this.characters=new Map([[q.a.narrator,e],[q.a.littleRedHood,i],[q.a.wolf,r],[q.a.grandma,o]]),this.diService.setDataWithKey(B.a.characters,this.characters);var a=[q.a.narrator,q.a.littleRedHood,q.a.wolf,q.a.grandma];a.forEach((function(e){return t.characters.get(e).hide()})),this.assignPositionToCharacters(a)}},{key:"goToAct3",value:function(){this.storyData.save.set("costume","Little Red Riding Hood"),this.storyData.save.set("action","walking"),this.storyData.save.set("weather","sunny"),this.storyData.save.set("basket","toolbox"),this.storyData.save.set("prison","Pantry"),this.characters.get(q.a.littleRedHood).x=tt.a.act2LrrhXPosition,this.characters.get(q.a.wolf).x=tt.a.act2WolfXPosition,this.characters.get(q.a.narrator).x=tt.a.act2NarratorXPosition,this.characters.get(q.a.littleRedHood).container.scale.x=tt.a.act2LrrhXScale,this.characters.get(q.a.wolf).container.scale.x=tt.a.act2WolfXScale,this.characters.get(q.a.narrator).show(),this.characters.get(q.a.wolf).show(),this.characters.get(q.a.littleRedHood).show(),this.characters.get(q.a.grandma).hide(),this.door.show(),this.backdrop.setBackdropTo(X.a.act3,!0),this.characters.get(q.a.littleRedHood).setCostume(nt.a.littleRedHood),this.characters.get(q.a.wolf).setCostume(nt.a.grandma),this.characters.get(q.a.littleRedHood).setBasket(nt.a.basket),this.characters.get(q.a.wolf).addCostume(nt.a.wolf),this.prisonProp.selected=Z.pantry,this.prisonProp.show(),this.storyData.basketChoice=et.a.basket,this.cancel(),this.goTo("act-3-vo-1")}},{key:"goToAct2",value:function(){this.storyData.save.set("costume","Little Red Riding Hood"),this.storyData.save.set("action","walking"),this.storyData.save.set("weather","sunny"),this.storyData.save.set("basket","toolbox"),this.storyData.basketChoice=et.a.basket,this.characters.get(q.a.littleRedHood).x=tt.a.act2LrrhXPosition,this.characters.get(q.a.wolf).x=tt.a.act2WolfXPosition,this.characters.get(q.a.narrator).x=tt.a.act2NarratorXPosition,this.characters.get(q.a.littleRedHood).container.scale.x=tt.a.act2LrrhXScale,this.characters.get(q.a.wolf).container.scale.x=tt.a.act2WolfXScale,this.characters.get(q.a.narrator).show(),this.characters.get(q.a.wolf).hide(),this.characters.get(q.a.littleRedHood).hide(),this.characters.get(q.a.grandma).hide(),this.characters.get(q.a.grandma).setCostume(nt.a.grandma),this.characters.get(q.a.littleRedHood).setCostume(nt.a.littleRedHood),this.characters.get(q.a.littleRedHood).setBasket(nt.a.basket),this.characters.get(q.a.wolf).setCostume(nt.a.wolf),this.door.show(),this.backdrop.setBackdropTo(X.a.act2,!0),this.prisonProp.selected=Z.pantry,this.prisonProp.hide(),this.cancel(),this.goTo("intro-act2-1")}},{key:"prisonProp",get:function(){return this.diService.getDataByKey(B.a.prison)}},{key:"door",get:function(){return this.diService.getDataByKey(B.a.door)}}]),n}(it.a),ht=n(71),lt=function(){function t(e){v()(this,t),this.diService=e,k()(this,"analyticsName",void 0),k()(this,"view",void 0),k()(this,"outlineFilter",void 0),k()(this,"hoverScript",void 0),k()(this,"interactionHandler",void 0),k()(this,"hoverScriptMap",new Map),this.interactionHandler=this.diService.getDataByKey(B.a.InteractionHandler)}return g()(t,[{key:"addOutline",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.view,e=Object(G.b)();t.filters=[e],e.enabled=!1;var i=new framework.HoverScript({view:t,hoverStartCallback:function(t,i){e.enabled=!0},hoverEndCallback:function(t,i){e.enabled=!1}});this.hoverScriptMap.set(t,i),this.interactionHandler.scripts.addScript(i)}},{key:"deinit",value:function(){this.removeHoverScript(this.view)}},{key:"removeHoverScript",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.view,e=this.hoverScriptMap.get(t);e&&this.interactionHandler.scripts.removeScript(e)}},{key:"reset",value:function(){}}]),t}();function ft(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var pt,dt=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ft()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),(o=i.call(this,r)).spine=t,o.reflectionSpine=e,k()(U()(o),"analyticsName","discoball"),k()(U()(o),"isIdle",!0),o.view=o.spine,o.view.visible=!1,o.init(),o}return g()(n,[{key:"analyticsService",get:function(){return this.diService.get(B.b.AnalyticsService)}}]),g()(n,[{key:"init",value:function(){this.idle()}},{key:"show",value:function(){this.spine.state.setAnimation(0,pt.show,!1),this.reflectionSpine.visible=!1}},{key:"idle",value:function(){this.isIdle=!0,this.spine.state.setAnimation(0,pt.idle,!0),this.reflectionSpine.visible=!1}},{key:"spin",value:function(){this.isIdle=!1,this.spine.state.setAnimation(0,pt.spin,!0),this.reflectionSpine.visible=!0,this.reflectionSpine.alpha=.6}},{key:"getShowAction",value:function(){var t=this;return framework.Actions.Parallel([framework.Actions.Func((function(){return t.view.visible=!0})),framework.Actions.Sequence([framework.Actions.Spine(this.spine,pt.show),framework.Actions.Func((function(){return t.idle()})),framework.Actions.Func((function(){t.interactionHandler.setButtonPressedListener(t.spine,t.switchState.bind(t)),t.addOutline()}))])])}},{key:"switchState",value:function(){this.isIdle?(this.sendAnalytics(pt.spin),this.spin()):(this.sendAnalytics(pt.idle),this.idle())}},{key:"sendAnalytics",value:function(t){t&&this.analyticsService.sendEventDynamicInteraction(this.analyticsName,t)}},{key:"reset",value:function(){this.interactionHandler.removeButtonPressedListener(this.spine),this.idle(),this.view.visible=!1}}]),n}(lt);!function(t){t.idle="idle",t.show="show",t.spin="spin"}(pt||(pt={}));n(70);function vt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var yt,gt=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(vt()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e){var r;return v()(this,n),(r=i.call(this,e)).container=t,k()(U()(r),"analyticsName","music_player"),k()(U()(r),"musics",void 0),k()(U()(r),"soundService",null),k()(U()(r),"buttonLeft",null),k()(U()(r),"buttonMiddle",null),k()(U()(r),"buttonRight",null),k()(U()(r),"buttonLeftOff",null),k()(U()(r),"buttonMiddleOff",null),k()(U()(r),"buttonRightOff",null),k()(U()(r),"buttons",[]),k()(U()(r),"pairs",[]),r.view=r.container,r.soundService=e.get(B.b.SoundService),r.buttonLeft=Object(G.c)(r.view,"yellow-on"),r.buttonMiddle=Object(G.c)(r.view,"red-on"),r.buttonRight=Object(G.c)(r.view,"blue-on"),r.buttonLeftOff=Object(G.c)(r.view,"yellow-off"),r.buttonMiddleOff=Object(G.c)(r.view,"red-off"),r.buttonRightOff=Object(G.c)(r.view,"blue-off"),r.buttons=[r.buttonLeft,r.buttonMiddle,r.buttonRight,r.buttonLeftOff,r.buttonMiddleOff,r.buttonRightOff],r.pairs=[[r.buttonLeft,r.buttonLeftOff],[r.buttonMiddle,r.buttonMiddleOff],[r.buttonRight,r.buttonRightOff]],r.musics=r.getMusics(),r.init(),r}return g()(n,[{key:"buildInfoService",get:function(){return this.diService.get(B.b.BuildInfoService)}},{key:"analyticsService",get:function(){return this.diService.get(B.b.AnalyticsService)}}]),g()(n,[{key:"getMusics",value:function(){var t=this;return["music-1.mp3","music-2.mp3","music-3.mp3"].map((function(e){return t.buildInfoService.storyPrefix+"-"+e}))}},{key:"init",value:function(){var t=this;this.pairs.forEach((function(e){return t.toggleOff(e[0],e[1])}));this.interactionHandler.setButtonPressedListener(this.buttonLeft,this.setToTrack1.bind(this,"off")),this.interactionHandler.setButtonPressedListener(this.buttonMiddle,this.setToTrack2.bind(this,"off")),this.interactionHandler.setButtonPressedListener(this.buttonRight,this.setToTrack3.bind(this,"off")),this.interactionHandler.setButtonPressedListener(this.buttonLeftOff,this.setToTrack1.bind(this,"on")),this.interactionHandler.setButtonPressedListener(this.buttonMiddleOff,this.setToTrack2.bind(this,"on")),this.interactionHandler.setButtonPressedListener(this.buttonRightOff,this.setToTrack3.bind(this,"on")),this.buttons.forEach((function(e){t.addOutline(e)}))}},{key:"startMusic",value:function(){this.setToTrack1()}},{key:"setToTrack1",value:function(t){this.sendAnalyticsIfNeeded(t),this.toggleMusicForButton(this.buttonLeft,this.buttonLeftOff,[[this.buttonMiddle,this.buttonMiddleOff],[this.buttonRight,this.buttonRightOff]],0)}},{key:"sendAnalyticsIfNeeded",value:function(t){t&&this.analyticsService.sendEventDynamicInteraction(this.analyticsName,t)}},{key:"setToTrack2",value:function(t){this.sendAnalyticsIfNeeded(t),this.toggleMusicForButton(this.buttonMiddle,this.buttonMiddleOff,[[this.buttonLeft,this.buttonLeftOff],[this.buttonRight,this.buttonRightOff]],1)}},{key:"setToTrack3",value:function(t){this.sendAnalyticsIfNeeded(t),this.toggleMusicForButton(this.buttonRight,this.buttonRightOff,[[this.buttonMiddle,this.buttonMiddleOff],[this.buttonLeft,this.buttonLeftOff]],2)}},{key:"toggleMusicForButton",value:function(t,e,i,n){var r=this;this.isToggledOn(t)?this.toggleOff(t,e):this.toggleOn(t,e),i.forEach((function(t){r.toggleOff(t[0],t[1])})),this.isToggledOn(t)?(this.stopMusic(),this.changeMusic(n)):this.stopMusic()}},{key:"toggleOff",value:function(t,e){t.visible=!1,e.visible=!0}},{key:"toggleOn",value:function(t,e){t.visible=!0,e.visible=!1}},{key:"isToggledOn",value:function(t){return t.visible}},{key:"changeMusic",value:function(t){var e=this.musics[t];""===e?this.stopMusic():this.soundService.playMusic(e)}},{key:"stopMusic",value:function(){this.soundService.stopMusic()}},{key:"deinit",value:function(){var t=this;this.buttons.forEach((function(e){t.removeHoverScript(e),t.interactionHandler.removeButtonPressedListener(e)}))}},{key:"reset",value:function(){var t=this;this.pairs.forEach((function(e){return t.toggleOff(e[0],e[1])})),this.stopMusic()}}]),n}(lt),mt=function(){function t(e){v()(this,t),this.view=e,k()(this,"curtains",void 0),this.curtains=Object(G.c)(this.view,"maincurtain-anim"),this.curtains.visible=!0,this.curtains.autoUpdate=!1}return g()(t,[{key:"getOpenCurtainsAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Func((function(){return t.curtains.visible=!0})),framework.Actions.Spine(this.curtains,yt.open)])])}},{key:"getCloseCurtainsAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Func((function(){return t.curtains.visible=!0})),framework.Actions.Spine(this.curtains,yt.close)])}},{key:"showCurtains",value:function(){this.curtains.state.setAnimation(0,yt.idleClose,!0),this.curtains.visible=!0}}]),t}();!function(t){t.open="open",t.close="close",t.idleClose="idle-close"}(yt||(yt={}));var kt=function(){function t(e){v()(this,t),this.view=e,k()(this,"_exitLeft",void 0),k()(this,"_exitRight",void 0),k()(this,"_exitMiddle",void 0),k()(this,"_middleLeft",void 0),k()(this,"_middleRight",void 0),k()(this,"_middle",void 0),k()(this,"_wolfGranny",void 0),k()(this,"_wolfApperanceSpot",void 0),k()(this,"_grannyDoorSpot",void 0),k()(this,"_grannyDodge",void 0),k()(this,"_parentBearPosition",void 0),k()(this,"_babyBearPosition",void 0),k()(this,"_parentBearDoorPosition",void 0),k()(this,"_babyBearDoorPosition",void 0),k()(this,"_babyBearNoticingPosition",void 0),this._exitLeft=Object(G.c)(this.view,"exitLeft"),this._exitRight=Object(G.c)(this.view,"exitRight"),this._exitMiddle=Object(G.c)(this.view,"exitMiddle"),this._middleLeft=Object(G.c)(this.view,"middleLeft"),this._middleRight=Object(G.c)(this.view,"middleRight"),this._middle=Object(G.c)(this.view,"middle"),this._wolfGranny=Object(G.c)(this.view,"wolfGranny"),this._wolfApperanceSpot=Object(G.c)(this.view,"wolfApperanceSpot"),this._grannyDoorSpot=Object(G.c)(this.view,"grannyDoorSpot"),this._grannyDodge=Object(G.c)(this.view,"grannyDodge"),this._parentBearPosition=Object(G.c)(this.view,"parentBearPosition"),this._babyBearPosition=Object(G.c)(this.view,"babyBearPosition"),this._parentBearDoorPosition=Object(G.c)(this.view,"parentBearDoorPosition"),this._babyBearDoorPosition=Object(G.c)(this.view,"babyBearDoorPosition"),this._babyBearNoticingPosition=Object(G.c)(this.view,"babyBearNoticingPosition")}return g()(t,[{key:"exitLeft",get:function(){return this._exitLeft}},{key:"exitRight",get:function(){return this._exitRight}},{key:"exitMiddle",get:function(){return this._exitMiddle}},{key:"middleLeft",get:function(){return this._middleLeft}},{key:"middleRight",get:function(){return this._middleRight}},{key:"middle",get:function(){return this._middle}},{key:"wolfGranny",get:function(){return this._wolfGranny}},{key:"wolfApperanceSpot",get:function(){return this._wolfApperanceSpot}},{key:"grannyDoorSpot",get:function(){return this._grannyDoorSpot}},{key:"grannyDodge",get:function(){return this._grannyDodge}},{key:"parentBearPosition",get:function(){return this._parentBearPosition}},{key:"babyBearPosition",get:function(){return this._babyBearPosition}},{key:"parentBearDoorPosition",get:function(){return this._parentBearDoorPosition}},{key:"babyBearDoorPosition",get:function(){return this._babyBearDoorPosition}},{key:"babyBearNoticingPosition",get:function(){return this._babyBearNoticingPosition}}]),t}(),wt=n(85);function At(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var St=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(At()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),(o=i.call(this,t,e)).storyMediatorDelegate=r,k()(U()(o),"props",[]),k()(U()(o),"actMediator",void 0),k()(U()(o),"backdrop",void 0),k()(U()(o),"replayActMediator",void 0),k()(U()(o),"storyData",void 0),k()(U()(o),"script",void 0),k()(U()(o),"characterSelectionPopOver",void 0),k()(U()(o),"pauseButton",void 0),k()(U()(o),"curtains",void 0),o.storyData=o.getStoryData(),o.initProps(),o.diService.setDataWithKey(B.a.StoryData,o.storyData),o.script=o.diService.getDataByKey(B.a.storyScript),o.initLocators(),o}return g()(n,[{key:"init",value:function(){j()(C()(n.prototype),"init",this).call(this),this.showCharacterSelection()}},{key:"initProps",value:function(){this.initCurtains(),this.initBackdrop(),this.initBoomBox(),this.initDiscoball(),this.initPauseButton()}},{key:"initCurtains",value:function(){this.curtains=new mt(this.view),this.manualSpines.push(this.curtains.curtains),this.diService.setDataWithKey(B.a.curtains,this.curtains)}},{key:"initPauseButton",value:function(){var t=this;this.pauseButton=Object(G.c)(this.view,"ui-home"),this.pauseButton.visible=!1,this.diService.setDataWithKey(B.a.pauseButton,this.pauseButton),this.setButtonPressedListener(this.pauseButton,(function(){return t.storyMediatorDelegate.onStoryPaused()}))}},{key:"initDiscoball",value:function(){var t=Object(G.c)(this.view,"discoball-anim"),e=Object(G.c)(this.view,"discoball-reflection-anim"),i=new dt(t,e,this.diService);this.diService.setDataWithKey(B.a.discoball,i),this.props.push(i)}},{key:"initBoomBox",value:function(){var t=Object(G.c)(this.view,"musicplayer"),e=new gt(t,this.diService);this.diService.setDataWithKey(B.a.musicBox,e),this.props.push(e)}},{key:"initBackdrop",value:function(){this.backdrop=new X.b(Object(G.c)(this.view,"stage-backdrop-front"),Object(G.c)(this.view,"stage-backdrop")),this.diService.setDataWithKey(B.a.backdrop,this.backdrop),this.props.push(this.backdrop)}},{key:"startStory",value:function(t){this.actMediator=this.getActMediator(t),this.addChildMediatorOnly(this.actMediator),this.actMediator.init(),this.actMediator.startDialog(this.script)}},{key:"initLocators",value:function(){var t=new kt(this.view);this.diService.setDataWithKey(B.a.locator,t)}},{key:"onActTerminated",value:function(){this.storyMediatorDelegate.onStoryTerminated()}},{key:"startReplayStory",value:function(){this.startReplayAct()}},{key:"startReplayAct",value:function(){if(!this.replayActMediator){this.removeChildMediatorOnly(this.actMediator);var t=this.actMediator.replayStates.clone(!1),e=new Map;this.actMediator.characterRoleMap.forEach((function(t,i){e.set(i,t)})),this.actMediator.deinit(),this.actMediator=null,this.replayActMediator=this.getReplayMediator(t,e),this.addChildMediatorOnly(this.replayActMediator)}this.cleanUpProp(),this.replayActMediator.init(),this.replayActMediator.startDialog(null)}},{key:"deinit",value:function(){this.removeButtonPressedListener(this.pauseButton),this.cleanUpProp(),this.deinitProp(),this.cleanUpReplay(),this.cleanUpAct()}},{key:"cleanUpProp",value:function(){this.props.forEach((function(t){return t.reset()}))}},{key:"deinitProp",value:function(){this.props.forEach((function(t){return t.deinit()}))}},{key:"cleanUpAct",value:function(){this.actMediator&&(this.actMediator.cancelActions(),this.removeChildMediatorOnly(this.actMediator),this.actMediator.deinit(),this.actMediator=null)}},{key:"cleanUpReplay",value:function(){this.replayActMediator&&(this.replayActMediator.cancelActions(),this.removeChildMediatorOnly(this.replayActMediator),this.replayActMediator.deinit(),this.replayActMediator=null)}},{key:"showCharacterSelection",value:function(){var t=this;this.characterSelectionPopOver=this.createCharacterSelectPopOver(),this.addChildMediatorOnly(this.characterSelectionPopOver),this.characterSelectionPopOver.init(),this.characterSelectionPopOver.show((function(){t.characterSelectionPopOver.playDialogs()}))}},{key:"createCharacterSelectPopOver",value:function(){var t=Object(G.c)(this.view,"character-selection-panel");return t.alpha=0,new wt.b(t,this.diService,this)}},{key:"pause",value:function(){this.curtains.showCurtains(),this.getCurrentActMediator().pause()}},{key:"getCurrentActMediator",value:function(){return this.actMediator||this.replayActMediator}},{key:"unpause",value:function(){this.runAction(this.curtains.getOpenCurtainsAction()),this.getCurrentActMediator().unpause()}},{key:"onTerminated",value:function(t){var e=this;this.characterSelectionPopOver.hide((function(){e.removeChildMediatorOnly(e.characterSelectionPopOver),e.characterSelectionPopOver=null,e.startStory(t)}))}}]),n}(ht.a),bt=(n(109),n(111),n(27));function _t(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Dt,Ct=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(_t()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),(o=i.call(this)).backdrop=t,o.view=e,o.diService=r,k()(U()(o),"weatherProps",null),k()(U()(o),"sunProp",null),k()(U()(o),"_choiceId",null),o.init(),o}return g()(n,[{key:"actionManagerDelegate",get:function(){return this.diService.getDataByKey(B.a.ActionManagerDelegate)}},{key:"choiceId",get:function(){return this._choiceId||et.h.lrrhWeather2Clouds},set:function(t){this._choiceId=t}}]),g()(n,[{key:"init",value:function(){this.weatherProps=[Object(G.c)(this.view,"sky-prop-anim-left"),Object(G.c)(this.view,"sky-prop-anim-middle"),Object(G.c)(this.view,"sky-prop-anim-right")],this.weatherProps.forEach((function(t){return t.visible=!1}));this.sunProp=this.weatherProps[1]}},{key:"drop",value:function(t,e){t&&(this._choiceId=t),this.actionManagerDelegate.runAction(framework.Actions.Parallel([this.getDropAction(),framework.Actions.Func(e)]))}},{key:"getDropAction",value:function(){return framework.Actions.Parallel(this.getWeatherActions(this._choiceId))}},{key:"getWeatherActions",value:function(t){var e=this.createCloudyActions.bind(this);if(this.isSunChoice(t))e=this.createSunnyActions.bind(this);else{if(!this.isCloudChoice(t))throw"nothing is setup for "+t;e=this.createCloudyActions.bind(this)}return e()}},{key:"isSunChoice",value:function(t){return t.includes("sun")}},{key:"isCloudChoice",value:function(t){return t.includes("cloud")}},{key:"createCloudyActions",value:function(){return this.setCloudSkin(),this.createDropAction(this.weatherProps)}},{key:"setCloudSkin",value:function(){this.weatherProps.forEach((function(t,e){t.skeleton.setSkinByName(Dt.cloud+(e+1))}))}},{key:"createSunnyActions",value:function(){return this.setSunSkin(),this.createDropAction([this.sunProp])}},{key:"setSunSkin",value:function(){this.sunProp.skeleton.setSkinByName(Dt.sun)}},{key:"createDropAction",value:function(t){var e=this,i=J[F.ropeDrop];return t.map((function(t){return framework.Actions.Sequence([Object(z.e)(t,bt.a.show,!1,i.name,i.delay,e.diService),framework.Actions.Func((function(){return t.state.setAnimation(0,bt.a.idle,!0)}))])}))}},{key:"skip",value:function(){this.isSunChoice(this.choiceId)?(this.setSunSkin(),this.setIdleAnim([this.sunProp]),this.show([this.sunProp])):(this.setCloudSkin(),this.setIdleAnim(this.weatherProps),this.show(this.weatherProps))}},{key:"setIdleAnim",value:function(t){t.forEach((function(t,e){t.state.setAnimation(0,bt.a.idle,!0)}))}},{key:"getRemoveAction",value:function(){var t=this,e=this.weatherProps.map((function(t){return Object(z.c)(t,bt.a.hide,!1)}));return e.push(framework.Actions.Func((function(){return t.reset()}))),framework.Actions.Parallel(e)}},{key:"deinit",value:function(){this.hide(),this.reset(),j()(C()(n.prototype),"deinit",this).call(this)}},{key:"hide",value:function(){this.weatherProps.forEach((function(t){t.visible=!1}))}},{key:"show",value:function(t){t.forEach((function(t){t.visible=!0}))}},{key:"reset",value:function(){}}]),n}(framework.Script);function Pt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}!function(t){t.sun="sun",t.cloud="cloud"}(Dt||(Dt={}));var xt,Rt,Mt=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Pt()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),o=i.call(this,r),k()(U()(o),"analyticsName",null),o.view=Object(G.c)(t,e),o.init(),o}return g()(n,[{key:"spine",get:function(){return this.view}}]),g()(n,[{key:"init",value:function(){}},{key:"setSkin",value:function(t){var e=this.from(t);this.spine.skeleton.setSkinByName(e)}},{key:"getShowAction",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:F.propDrop,i=J[e];return framework.Actions.Sequence([Object(z.a)(this.spine,t,!1,i.name,i.delay,this.diService),framework.Actions.Spine(this.spine,xt.idle,{loop:!0})])}},{key:"getHideAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Spine(this.spine,xt.hide),framework.Actions.Parallel([framework.Actions.Func((function(){return t.spine.visible=!1}))])])}},{key:"showIdle",value:function(){this.spine.visible=!0,this.spine.state.setAnimation(0,xt.idle,!0)}},{key:"from",value:function(t){switch(t){case"ballroom-chair":return Rt.ballroomChair;case"ballroom-table":return Rt.ballroomTable;case"candycane1":return Rt.candycane1;case"candycane2":return Rt.candycane2;case"candycane3":return Rt.candycane3;case"candycane4":return Rt.candycane4;case"goldilocks-bed":return Rt.goldilocksBed;case"goldilocks-chair":return Rt.goldilocksChair;case"goldilocks-oven":return Rt.goldilocksOven;case"skyscraper1":return Rt.skyscraper1;case"skyscraper2":return Rt.skyscraper2;case"tree":return Rt.tree;default:throw"not found "+t}}},{key:"deinit",value:function(){this.reset()}},{key:"reset",value:function(){this.hide()}},{key:"hide",value:function(){this.spine.visible=!1}}]),n}(lt);!function(t){t.idle="idle",t.hide="hide",t.showFromSide="show-from-side",t.showFromTop="show-from-top"}(xt||(xt={})),function(t){t.ballroomChair="ballroom-chair",t.ballroomTable="ballroom-table",t.bush1="bush1",t.bush2="bush2",t.bush3="bush3",t.candycane1="candycane1",t.candycane2="candycane2",t.candycane3="candycane3",t.candycane4="candycane4",t.goldilocksBed="goldilocks-bed",t.goldilocksChair="goldilocks-chair",t.goldilocksOven="goldilocks-oven",t.skyscraper1="skyscraper1",t.skyscraper2="skyscraper2",t.beanstalk1="beanstalk1",t.beanstalk2="beanstalk2",t.beanstalk3="beanstalk3",t.flower1="flower1",t.flower2="flower2",t.flower3="flower3",t.flower4="flower4",t.tree="tree"}(Rt||(Rt={}));var It,Tt,Ot=function(){function t(e,i){v()(this,t),this.view=e,this.diService=i,k()(this,"props",[]),k()(this,"_choiceId",null),this.init(),Object(G.c)(this.view,"tree-props").children.forEach((function(t){return t.visible=!1}))}return g()(t,[{key:"actionManagerDelegate",get:function(){return this.diService.getDataByKey(B.a.ActionManagerDelegate)}},{key:"choiceId",get:function(){return this._choiceId||et.c.skyScraper},set:function(t){this._choiceId=t}}]),g()(t,[{key:"init",value:function(){}},{key:"show",value:function(t,e){this._choiceId=t,this.actionManagerDelegate.runAction(framework.Actions.Parallel([this.getForestAction(t),framework.Actions.Func(e)]))}},{key:"getForestAction",value:function(t){var e,i=this;switch(t){case et.c.skyScraper:var n=[Rt.skyscraper1,Rt.skyscraper2],r=[xt.showFromSide,xt.showFromSide];e=framework.Actions.Parallel(n.map((function(t,e){var n=new Mt(i.view,t,i.diService);return i.props.push(n),n.getShowAction(r[e],F.forestProp)})));break;case et.c.tree:e=framework.Actions.Parallel(["prop-tree1","prop-tree2"].map((function(t){var e=new Mt(i.view,t,i.diService);return e.setSkin(Rt.tree),i.props.push(e),e.getShowAction(xt.showFromSide)})));break;case et.c.candy:var o=[Rt.candycane1,Rt.candycane2,Rt.candycane3,Rt.candycane4],a=[xt.showFromTop,xt.showFromTop,xt.showFromTop,xt.showFromTop];e=framework.Actions.Parallel(o.map((function(t,e){var n=new Mt(i.view,t,i.diService);return i.props.push(n),n.getShowAction(a[e],F.forestProp)})))}return e}},{key:"skip",value:function(){var t=this,e={};e[et.c.skyScraper]=function(){[Rt.skyscraper1,Rt.skyscraper2].forEach((function(e,i){var n=new Mt(t.view,e,t.diService);n.showIdle(),t.props.push(n)}))},e[et.c.tree]=function(){["prop-tree1","prop-tree2"].forEach((function(e){var i=new Mt(t.view,e,t.diService);i.setSkin(Rt.tree),i.showIdle(),t.props.push(i)}))},e[et.c.candy]=function(){[Rt.candycane1,Rt.candycane2,Rt.candycane3,Rt.candycane4].forEach((function(e,i){var n=new Mt(t.view,e,t.diService);n.showIdle(),t.props.push(n)}))},e[this.choiceId]()}},{key:"getRemoveAction",value:function(){var t=this;return framework.Actions.Parallel(this.props.map((function(e){return t.getHideAction(e.spine)})))}},{key:"getHideAction",value:function(t){return framework.Actions.Sequence([framework.Actions.Spine(t,"hide"),framework.Actions.Func((function(){return t.visible=!1}))])}},{key:"deinit",value:function(){this.props.forEach((function(t){return t.deinit()})),this.props=[]}},{key:"reset",value:function(){this.props.forEach((function(t){return t.reset()}))}},{key:"hide",value:function(){this.props.forEach((function(t){return t.hide()}))}}]),t}(),Ft=function(){function t(e){v()(this,t),this.view=e,k()(this,"spine",void 0),this.spine=Object(G.c)(this.view,"throwingprop-anim"),this.hide()}return g()(t,[{key:"init",value:function(){this.reset()}},{key:"show",value:function(){this.spine.visible=!0}},{key:"hide",value:function(){this.spine.visible=!1}},{key:"getShowAction",value:function(){var t=this;return framework.Actions.Func((function(){return t.show()}))}},{key:"getHideAction",value:function(){var t=this;return framework.Actions.Func((function(){return t.hide()}))}},{key:"getShowAnimAction",value:function(){return framework.Actions.Parallel([this.getShowAction(),this.getAnimAction(It.show)])}},{key:"getHitAction",value:function(){var t=It.hit;return this.getAnimAction(t)}},{key:"getThrowAction",value:function(){var t=It.throw;return this.getAnimAction(t)}},{key:"getIdleAnimAction",value:function(){var t=this;return framework.Actions.Func((function(){return t.spine.state.setAnimation(0,It.idle,!0)}))}},{key:"getAnimAction",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return framework.Actions.Spine(this.spine,t,{loop:e})}},{key:"deinit",value:function(){this.reset()}},{key:"reset",value:function(){this.hide()}},{key:"setSkinForType",value:function(t){switch(t){case et.g.act3Duckie:this.spine.skeleton.setSkinByName(Tt.duckie);break;case et.g.act3Teddy:this.spine.skeleton.setSkinByName(Tt.teddy);break;case et.g.act3Ukulele:this.spine.skeleton.setSkinByName(Tt.ukelele)}}},{key:"setSkin",value:function(t){this.spine.skeleton.setSkinByName(t)}},{key:"skip",value:function(t){this.spine.skeleton.setSkinByName(Tt.duckie),this.show(),t()}}]),t}();!function(t){t.show="show",t.hit="hit",t.throw="throw",t.idle="idle"}(It||(It={})),function(t){t.duckie="rubberduck",t.teddy="teddybear",t.ukelele="ukulele",t.glassslipper="glassslipper",t.astronautboot="astronautboot",t.sneaker="sneaker"}(Tt||(Tt={}));var Bt,Vt=function(){function t(e,i){v()(this,t),this.view=e,this.diService=i,k()(this,"frontFrame",void 0),k()(this,"backFrame",void 0),k()(this,"spines",void 0),this.frontFrame=Object(G.c)(this.view,"doorframe-anim"),this.backFrame=Object(G.c)(this.view,"door-anim"),this.spines=[this.frontFrame,this.backFrame],this.spines.forEach((function(t){t.visible=!1}))}return g()(t,[{key:"x",get:function(){return this.frontFrame.x}},{key:"y",get:function(){return this.frontFrame.y}},{key:"spine",get:function(){return this.frontFrame}}]),g()(t,[{key:"init",value:function(){this.reset()}},{key:"setPosition",value:function(t){this.frontFrame.position=this.backFrame.position=t}},{key:"setDirection",value:function(t){this.frontFrame.scale.x=t,this.backFrame.scale.x=t}},{key:"show",value:function(){this.spines.forEach((function(t){t.visible=!0}))}},{key:"hide",value:function(){this.spines.forEach((function(t){t.visible=!1}))}},{key:"getShowAction",value:function(){var t=this;return framework.Actions.Parallel([framework.Actions.Func((function(){return t.show()})),framework.Actions.Spine(this.frontFrame,Bt.show),framework.Actions.Spine(this.backFrame,Bt.show)])}},{key:"getHideAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Spine(this.frontFrame,Bt.hide),framework.Actions.Spine(this.backFrame,Bt.hide)]),framework.Actions.Func((function(){return t.hide()}))])}},{key:"getKnockAnimAction",value:function(){return framework.Actions.Parallel([this.getAnimAction(Bt.knockknock),framework.Actions.Sequence([framework.Actions.Delay(.5),new $.a("door-knock.mp3",S.a.G2,!1,this.diService)])])}},{key:"getRingAnimAction",value:function(){return this.getAnimAction(Bt.dingdong)}},{key:"getOpenAnimAction",value:function(){return this.getAnimAction(Bt.open)}},{key:"getOpenIdleAnimAction",value:function(){return this.getAnimAction(Bt.idleOpen,!0)}},{key:"getCloseAnimAction",value:function(){return this.getAnimAction(Bt.close)}},{key:"playIdleClosed",value:function(){this.frontFrame.state.setAnimation(0,Bt.idleClosed,!0),this.backFrame.state.setAnimation(0,Bt.idleClosed,!0)}},{key:"getAnimAction",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return framework.Actions.Parallel([framework.Actions.Spine(this.frontFrame,t,{loop:e}),framework.Actions.Spine(this.backFrame,t,{loop:e})])}},{key:"deinit",value:function(){this.reset()}},{key:"reset",value:function(){this.hide()}},{key:"skip",value:function(){this.show()}}]),t}();!function(t){t.close="close",t.knockknock="knockknock",t.dingdong="dingdong",t.idleClosed="idle-closed",t.idleOpen="idle-open",t.open="open",t.show="show",t.hide="hide"}(Bt||(Bt={}));var Lt=function(){function t(e,i,n,r,o,a){v()(this,t),this.diService=e,this.stateContext=n,this.interactionHandler=r,this.delegate=o,this.actMediator=a,k()(this,"stateIndex",0),k()(this,"_replayStates",void 0),this._replayStates=i,this.diService.setDataWithKey(B.a.isReplay,!0)}return g()(t,[{key:"curtains",get:function(){return this.diService.getDataByKey(B.a.curtains)}},{key:"scripts",get:function(){return this.interactionHandler.scripts}},{key:"musicPlayer",get:function(){return this.diService.getDataByKey(B.a.musicBox)}}]),g()(t,[{key:"init",value:function(){this.stateIndex=0}},{key:"playFirstDialog",value:function(){this.musicPlayer.startMusic(),this.goTo("")}},{key:"goTo",value:function(t){if(!(this.stateIndex>=this._replayStates.length)){var e=this._replayStates[this.stateIndex++];this.scripts.addScript(e),this.stateContext.currentState=e}}},{key:"getEndOfActAction",value:function(){var t=this;return framework.Actions.Sequence([this.curtains.getCloseCurtainsAction(),framework.Actions.Func((function(){t.scripts.removeScripts(t._replayStates),t._replayStates.forEach((function(t){return t.clear()}))}))])}},{key:"getEndDialogAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Delay(2),this.getEndOfActAction(),framework.Actions.Func((function(){return t.delegate.onActTerminated(t.actMediator)}))])}}]),t}();function Et(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Nt=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Et()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r,o,a){var s;return v()(this,n),s=i.call(this,t,e,o,a),k()(U()(s),"replayActHandler",void 0),s._replayStates=r,s.replayActHandler=new Lt(e,r,s.stateContext,U()(s),a,U()(s)),s}return g()(n,[{key:"init",value:function(){j()(C()(n.prototype),"init",this).call(this),this.replayActHandler.init()}},{key:"playFirstDialog",value:function(){this.replayActHandler.playFirstDialog()}},{key:"goTo",value:function(t){this.shouldEndDialog(t)?this.endDialog():this.replayActHandler.goTo(t)}},{key:"getEndOfActAction",value:function(){return this.replayActHandler.getEndOfActAction()}},{key:"endDialog",value:function(){console.log("replay is terminated"),this.runAction(this.replayActHandler.getEndDialogAction())}}]),n}(ut);function Kt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ht=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Kt()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){var t;v()(this,n);for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return t=i.call.apply(i,[this].concat(r)),k()(U()(t),"weatherProp",null),k()(U()(t),"forestProp",null),t}return g()(n,[{key:"getReplayMediator",value:function(t,e){return new Nt(this.view,this.diService,t,e,this)}},{key:"getActMediator",value:function(t){return new ut(this.view,this.diService,t,this)}},{key:"getStoryData",value:function(){return new tt.a}},{key:"initProps",value:function(){j()(C()(n.prototype),"initProps",this).call(this),this.initWeatherProps(),this.initForestProps(),this.initDoorProp(),this.initPrisonProp(),this.initThrowingProp()}},{key:"initThrowingProp",value:function(){var t=new Ft(this.view);this.diService.setDataWithKey(B.a.throwingProp,t),this.props.push(t)}},{key:"initPrisonProp",value:function(){var t=new Q(this.view,this.diService);this.diService.setDataWithKey(B.a.prison,t),this.props.push(t)}},{key:"initDoorProp",value:function(){var t=new Vt(this.view,this.diService);this.diService.setDataWithKey(B.a.door,t),this.props.push(t)}},{key:"initWeatherProps",value:function(){this.weatherProp=new Ct(this.backdrop,this.view,this.diService),this.diService.setDataWithKey(B.a.weatherProp,this.weatherProp),this.scripts.addScript(this.weatherProp),this.props.push(this.weatherProp)}},{key:"initForestProps",value:function(){this.forestProp=new Ot(this.view,this.diService),this.diService.setDataWithKey(B.a.forestProp,this.forestProp),this.props.push(this.forestProp)}},{key:"debugStartStory",value:function(){this.storyData.save.set("costume","Little Red Riding Hood"),this.storyData.save.set("action","walking"),this.storyData.save.set("weather","sunny"),this.storyData.save.set("basket","toolbox"),this.storyData.save.set("prison","Pantry");var t=new Map([[q.a.narrator,rt.c.arthur],[q.a.littleRedHood,rt.c.muffy],[q.a.grandma,rt.c.buster],[q.a.wolf,rt.c.dw]]);this.startStory(t)}}]),n}(St),Ut=n(120);function Wt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var jt=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Wt()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"getStoryMediator",value:function(){return new Ht(this.view,this.diService,this)}}]),n}(Ut.a),qt=n(28),Xt=n(54);function Gt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var zt=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Gt()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"playSeat",value:function(){this.characterPosition=rt.b.seating,this._spine.state.setAnimation(0,rt.a.seated,!0)}},{key:"playToLay",value:function(){this.characterPosition=rt.b.laying,this._spine.state.setAnimation(0,rt.a.toLay,!1)}},{key:"playSnore",value:function(){this.characterPosition=rt.b.snoring,this._spine.state.setAnimation(0,rt.a.idleSnore,!0)}},{key:"playFromLay",value:function(){this.characterPosition=rt.b.standing,this._spine.state.setAnimation(0,rt.a.fromLay,!1)}},{key:"getSeatedAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Func((function(){return t.characterPosition=rt.b.seating})),framework.Actions.Func((function(){return t._spine.state.setAnimation(0,rt.a.seated,!0)}))])}},{key:"getToLayAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Func((function(){return t.characterPosition=rt.b.laying})),framework.Actions.Spine(this._spine,rt.a.toLay)])}},{key:"getFromLayAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Spine(this._spine,rt.a.fromLay),framework.Actions.Func((function(){return t.characterPosition=rt.b.standing}))])}},{key:"getSetSunHatAction",value:function(){var t=this,e=framework.Actions.Func((function(){return t.setSunHat()}));return this.createHideAndRiseAction(e)}},{key:"setSunHat",value:function(){this.attachCostumePart("costumes/sunhat")}},{key:"getSetColdHat",value:function(){var t=this,e=framework.Actions.Func((function(){return t.setColdHat()}));return this.createHideAndRiseAction(e)}},{key:"setColdHat",value:function(){this.attachCostumePart("costumes/winterhat")}}]),n}(ot.a);function Yt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Zt=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Yt()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"initFactory",value:function(){return new qt.e(this.diService,this.view)}},{key:"initCharacters",value:function(){var t=this;j()(C()(n.prototype),"initCharacters",this).call(this);var e=new zt(this.characterRoleMap.get(q.a.narrator),q.a.narrator,this.narrator,this.diService),i=new zt(this.characterRoleMap.get(q.a.goldilocks),q.a.goldilocks,this.character,this.diService),r=new zt(this.characterRoleMap.get(q.a.parentBear),q.a.parentBear,this.characterSecond,this.diService),o=new zt(this.characterRoleMap.get(q.a.babyBear),q.a.babyBear,this.characterThird,this.diService);e.setCostume(nt.a.narrator),o.setCostume(nt.a.babybear),this.scripts.addScripts([e,i,r,o]),this.characters=new Map([[q.a.narrator,e],[q.a.goldilocks,i],[q.a.parentBear,r],[q.a.babyBear,o]]),this.diService.setDataWithKey(B.a.characters,this.characters);var a=[q.a.narrator,q.a.goldilocks,q.a.parentBear,q.a.babyBear];a.forEach((function(e){return t.characters.get(e).hide()})),this.assignPositionToCharacters(a),this.backdrop.setBackdropTo(X.a.act1)}},{key:"shouldEndDialog",value:function(t){return!1}},{key:"goToAct2",value:function(){this.setSaveForKey("costume","Goldilocks"),this.setSaveForKey("weather","sunny"),this.setSaveForKey("bowl","Tacos"),this.setSaveForKey("parent","mama"),this.characters.get(q.a.narrator).playIdle(),this.characters.get(q.a.narrator).x=Xt.a.act2NarratorXPosition,this.characters.get(q.a.narrator).flipXAxis(),this.characters.get(q.a.narrator).show(),this.characters.get(q.a.goldilocks).playIdle(),this.characters.get(q.a.goldilocks).x=Xt.a.act2GoldilocksXPosition,this.characters.get(q.a.goldilocks).show(),this.characters.get(q.a.babyBear).hide(),this.characters.get(q.a.parentBear).hide(),this.setCostumes(),this.setBowlChoices(),this.bowl.showAll(),this.weatherProp.choiceId=this.getWeatherChoice(),this.backdrop.setBackdropTo(X.a.act2,!0),this.cancel(),this.playFirstDialog("3")}},{key:"goToAct3",value:function(){this.setSaveForKey("costume","Goldilocks"),this.setSaveForKey("weather","sunny"),this.setSaveForKey("bowl","Tacos"),this.setSaveForKey("seat","chairs"),this.setSaveForKey("bed","Water Bed"),this.setSaveForKey("parent","mama"),this.characters.get(q.a.narrator).playIdle(),this.characters.get(q.a.narrator).show(),this.characters.get(q.a.goldilocks).playToLay(),this.characters.get(q.a.goldilocks).show(),this.setCostumes(),this.setBowlChoices(),this.weatherProp.choiceId=this.getWeatherChoice(),this.backdrop.setBackdropTo(X.a.act2,!0),this.bed.choiceId=this.getBedChoice(),this.bearFurniture.choiceId=this.getFurnitureChoice(),this.cancel(),this.playFirstDialog("5")}},{key:"getWeatherChoice",value:function(){return this.storyData.save.get("weather").includes("sun")?qt.h.Weather2Sun:qt.h.Weather2Clouds}},{key:"getBedChoice",value:function(){return this.storyData.save.get("bed").includes("Water")?qt.a.bed2WaterBed:this.storyData.save.get("bed").includes("Hammock")?qt.a.bed2Hammock:qt.a.bed2Couch}},{key:"getFurnitureChoice",value:function(){return this.storyData.save.get("seat").includes("chair")?qt.g.chair:this.storyData.save.get("bed").includes("bean")?qt.g.beanbag:qt.g.train}},{key:"setBowlChoices",value:function(){this.bowl.choiceId=qt.b.tacos,this.bowl.setSkinForType()}},{key:"setCostumes",value:function(){this.characters.get(q.a.goldilocks).setCostume(ot.a.costumeFromName(this.storyData.save.get("costume"))),this.characters.get(q.a.narrator).setCostume(nt.a.narrator),this.characters.get(q.a.parentBear).setCostume(ot.a.costumeFromName(this.storyData.save.get("parent")))}},{key:"door",get:function(){return this.diService.getDataByKey(B.a.door)}},{key:"bowl",get:function(){return this.diService.getDataByKey(B.a.bowl)}},{key:"bed",get:function(){return this.diService.getDataByKey(B.a.bed)}},{key:"bearFurniture",get:function(){return this.diService.getDataByKey(B.a.bearFurniture)}},{key:"weatherProp",get:function(){return this.diService.getDataByKey(B.a.weatherProp)}}]),n}(it.a),Jt=function(){function t(e,i){v()(this,t),this.view=e,this.diService=i,k()(this,"props",[]),k()(this,"_choiceId",null),k()(this,"container",void 0),this.init(),this.container=Object(G.c)(this.view,"garden-props"),this.container.children.forEach((function(t){return t.visible=!1}))}return g()(t,[{key:"actionManagerDelegate",get:function(){return this.diService.getDataByKey(B.a.ActionManagerDelegate)}},{key:"choiceId",get:function(){return this._choiceId||et.c.skyScraper},set:function(t){this._choiceId=t}}]),g()(t,[{key:"init",value:function(){}},{key:"show",value:function(t,e){this._choiceId=t,this.actionManagerDelegate.runAction(framework.Actions.Parallel([this.getAction(t),framework.Actions.Func(e)]))}},{key:"getAction",value:function(t){var e=[],i=xt.showFromTop;switch(t){case qt.d.flowers:this.createFlowerProps(e,i);break;case qt.d.beanstalks:this.createBeanStalkProps(e,i);break;case qt.d.hives:this.createHiveProps(e,i)}return framework.Actions.Parallel(e)}},{key:"createBeanStalkProps",value:function(t,e){this.createProps(1,3,"beanstalk",t,e)}},{key:"createFlowerProps",value:function(t,e){this.createProps(1,4,"flower",t,e)}},{key:"createHiveProps",value:function(t,e){this.createProps(1,2,"hive",t,e)}},{key:"createProps",value:function(t,e,i,n,r){for(var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:this.container,a=t;a<=e;a++){var s=i+a.toString(),c=new Mt(o,s,this.diService);this.props.push(c),n.push(c.getShowAction(r))}}},{key:"skip",value:function(){var t={};t[qt.d.flowers]=this.createSkipFlowerProps.bind(this),t[qt.d.beanstalks]=this.createSkipBeanStalkProps.bind(this),t[qt.d.hives]=this.createSkipHiveProps.bind(this),t[this.choiceId]()}},{key:"createSkipBeanStalkProps",value:function(){this.createSkipProps(1,3,"beanstalk")}},{key:"createSkipFlowerProps",value:function(){this.createSkipProps(1,4,"flower")}},{key:"createSkipHiveProps",value:function(){this.createSkipProps(1,2,"hive")}},{key:"createSkipProps",value:function(t,e,i){for(var n=t;n<=e;n++){var r=i+n.toString(),o=new Mt(this.container,r,this.diService);this.props.push(o),o.showIdle()}}},{key:"getRemoveAction",value:function(){return framework.Actions.Parallel(this.props.map((function(t){return t.getHideAction()})))}},{key:"deinit",value:function(){this.props.forEach((function(t){return t.deinit()})),this.props=[]}},{key:"reset",value:function(){this.props.forEach((function(t){return t.reset()}))}},{key:"hide",value:function(){this.props.forEach((function(t){return t.hide()}))}}]),t}(),$t=function(){function t(e,i){v()(this,t),this.view=e,this.diService=i,k()(this,"spines",[]),k()(this,"choiceId",null),Object(G.c)(this.view,this.containerName).children.forEach((function(t){return t.visible=!1}))}return g()(t,[{key:"containerName",get:function(){return"act2-props"}}]),g()(t,[{key:"init",value:function(){this.reset()}},{key:"show",value:function(t){t.visible=!0}},{key:"hide",value:function(t){t.visible=!1}},{key:"hideAll",value:function(){var t=this;this.spines.forEach((function(e){return t.hide(e)}))}},{key:"showAll",value:function(){var t=this;this.spines.forEach((function(e){return t.show(e)}))}},{key:"getShowAction",value:function(){return this.getShowAnimAction()}},{key:"getHideAction",value:function(){var t=this,e=xt.hide;return framework.Actions.Sequence([this.getAnimAction(e),framework.Actions.Func((function(){return t.hideAll()}))])}},{key:"getShowAnimAction",value:function(){var t=xt.showFromTop;return this.getAnimAction(t)}},{key:"getShowAnimActionWithSFX",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=xt.showFromTop;return this.getAnimActionWithSFX(i,t,e)}},{key:"getIdleAnimAction",value:function(){return framework.Actions.Parallel(this.spines.map((function(t){return Object(z.d)(t,xt.idle,!0)})))}},{key:"getAnimAction",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return framework.Actions.Parallel(this.spines.map((function(i){return Object(z.d)(i,t,e)})))}},{key:"getAnimActionWithSFX",value:function(t,e,i){var n=this,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return framework.Actions.Parallel(this.spines.map((function(o){return Object(z.e)(o,t,r,e,i,n.diService)})))}},{key:"deinit",value:function(){this.reset()}},{key:"reset",value:function(){this.hideAll()}},{key:"skip",value:function(){var t=this;this.setSkinForType(this.choiceId),this.spines.forEach((function(e){return t.show(e)}))}}]),t}();function Qt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var te,ee,ie=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Qt()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e){var r;return v()(this,n),(r=i.call(this,t,e)).diService=e,k()(U()(r),"bowl1",void 0),k()(U()(r),"bowl2",void 0),k()(U()(r),"bowl3",void 0),k()(U()(r),"table",void 0),k()(U()(r),"choiceId",ee.porridge),r.bowl1=Object(G.c)(r.view,"bowl1"),r.bowl2=Object(G.c)(r.view,"bowl2"),r.bowl3=Object(G.c)(r.view,"bowl3"),r.spines=[r.bowl1,r.bowl2,r.bowl3],r.table=Object(G.c)(r.view,"table"),r.reset(),r}return g()(n,[{key:"init",value:function(){j()(C()(n.prototype),"init",this).call(this)}},{key:"getShowAction",value:function(){return framework.Actions.Sequence([this.getShowTableAction(),this.getShowAnimAction()])}},{key:"getShowEmptySmallBowlAction",value:function(){return framework.Actions.Sequence([this.getShowTableAction(),this.getShowAnimEmptySmallBowlAction()])}},{key:"getShowTableAction",value:function(){var t=J[F.propDrop];return Object(z.e)(this.table,xt.showFromTop,!1,t.name,t.delay,this.diService)}},{key:"showAll",value:function(){j()(C()(n.prototype),"showAll",this).call(this),this.show(this.table)}},{key:"getHideAction",value:function(){var t=this.spines.map((function(t){return framework.Actions.Spine(t,xt.hide)}));return t.push(framework.Actions.Spine(this.table,xt.hide)),framework.Actions.Parallel(t)}},{key:"getShowAnimAction",value:function(){var t=te.show,e=J[F.propDrop];return this.getAnimActionWithSFX(t,e.name,e.delay)}},{key:"getShowAnimEmptySmallBowlAction",value:function(){var t=J[F.propDrop];return framework.Actions.Parallel([Object(z.e)(this.bowl1,te.show,!1,t.name,t.delay,this.diService),Object(z.e)(this.bowl2,te.show,!1,t.name,t.delay,this.diService),Object(z.e)(this.bowl3,te.showempty,!1,t.name,t.delay,this.diService)])}},{key:"getIldeEmptyAction",value:function(){var t=te.idleempty;return this.getAnimAction(t)}},{key:"getEatAction",value:function(){var t=te.eat;return this.getAnimAction(t)}},{key:"getEmptyBowlAction",value:function(){return framework.Actions.Spine(this.bowl3,te.eat)}},{key:"getHideAnimAction",value:function(){var t=te.hide;return this.getAnimAction(t)}},{key:"getIdleAnimAction",value:function(){return framework.Actions.Parallel(this.spines.map((function(t){return Object(z.d)(t,te.idle,!0)})))}},{key:"getSmallBowlEatenAction",value:function(){var t=this;return framework.Actions.Parallel([framework.Actions.Func((function(){return t.show(t.table)})),framework.Actions.Spine(this.bowl1,te.idle),framework.Actions.Spine(this.bowl2,te.idle),framework.Actions.Spine(this.bowl3,te.eat)])}},{key:"reset",value:function(){j()(C()(n.prototype),"reset",this).call(this),this.hide(this.table)}},{key:"setSkinForType",value:function(t){switch(t||(t=qt.b.porridge),t){case qt.b.porridge:this.spines.forEach((function(t){return t.skeleton.setSkinByName(ee.porridge)}));break;case qt.b.tacos:this.spines.forEach((function(t){return t.skeleton.setSkinByName(ee.tacos)}));break;case qt.b.spaghetti:this.spines.forEach((function(t){return t.skeleton.setSkinByName(ee.spaghetti)}))}}},{key:"skip",value:function(){j()(C()(n.prototype),"skip",this).call(this),this.show(this.table)}}]),n}($t);function ne(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}!function(t){t.show="show",t.showempty="showempty",t.hide="hide",t.idleempty="idleempty",t.idle="idle",t.eat="eat"}(te||(te={})),function(t){t.default="default",t.tacos="tacos",t.porridge="porridge",t.spaghetti="spagetti"}(ee||(ee={}));var re,oe=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ne()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e){var r;return v()(this,n),(r=i.call(this,t,e)).diService=e,k()(U()(r),"seat1",void 0),k()(U()(r),"seat2",void 0),k()(U()(r),"seat3",void 0),k()(U()(r),"choiceId",qt.g.chair),k()(U()(r),"sfxBreak",void 0),k()(U()(r),"chairSizes",[re.chairTall,re.chairLow,re.chairRegular]),k()(U()(r),"trainHornMap",new Map([[qt.g.seat3Train,"gl-horn-loud-sfx.mp3"],[qt.g.seat6Train,"gl-horn-quiet-sfx.mp3"],[qt.g.seat8Train,"gl-horn-right-sfx.mp3"]])),r.seat1=Object(G.c)(r.view,"act2-prop1"),r.seat2=Object(G.c)(r.view,"act2-prop2"),r.seat3=Object(G.c)(r.view,"act2-prop3"),r.spines=[r.seat1,r.seat2,r.seat3],r.reset(),r}return g()(n,[{key:"getHornSfxAction",value:function(t){var e=this.trainHornMap.get(t);return new $.a(e,S.a.C3,!1,this.diService)}},{key:"setSkinForType",value:function(t){var e=this;switch(t){case qt.g.chair:this.spines.forEach((function(t,i){t.skeleton.setSkinByName(e.chairSizes[i])}));break;case qt.g.beanbag:this.spines.forEach((function(t){return t.skeleton.setSkinByName(re.beanbag)}));break;case qt.g.train:this.spines.forEach((function(t){return t.skeleton.setSkinByName(re.train)}))}}},{key:"setBroken",value:function(){switch(this.choiceId){case qt.g.chair:this.seat3.skeleton.setSkinByName(re.chairBroken);break;case qt.g.beanbag:this.seat3.skeleton.setSkinByName(re.beanbagBroken);break;case qt.g.train:this.seat3.skeleton.setSkinByName(re.trainBroken)}}},{key:"getShowAction",value:function(){var t=J[F.propDrop];return this.getShowAnimActionWithSFX(t.name,t.delay)}}]),n}($t);function ae(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}k()(oe,"sfx","gl-horn-loud-sfx.mp3"),function(t){t.beanbag="beanbag",t.beanbagBroken="beanbag-broken",t.bed="bed",t.chairTall="chair-tall",t.chairRegular="chair",t.chairLow="chair-low",t.chairBroken="chair-broken",t.train="trainseat",t.trainBroken="trainseat-broken"}(re||(re={}));var se,ce,ue=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ae()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e){var r;return v()(this,n),(r=i.call(this,t,e)).diService=e,k()(U()(r),"hammock1",void 0),k()(U()(r),"hammock2",void 0),k()(U()(r),"hammock3",void 0),k()(U()(r),"prop4",void 0),k()(U()(r),"prop5",void 0),k()(U()(r),"prop6",void 0),k()(U()(r),"choiceId",qt.a.bed2Couch),k()(U()(r),"sfxBreak",void 0),k()(U()(r),"babyBearBed",void 0),r.hammock1=Object(G.c)(r.view,"hammock1"),r.hammock2=Object(G.c)(r.view,"hammock2"),r.hammock3=Object(G.c)(r.view,"hammock3"),r.prop4=Object(G.c)(r.view,"act2-prop4"),r.prop5=Object(G.c)(r.view,"act2-prop5"),r.prop6=Object(G.c)(r.view,"act2-prop6"),r.babyBearBed=r.prop6,r.spines=[r.prop4,r.prop5,r.prop6],r.reset(),r}return g()(n,[{key:"setSkinForType",value:function(t){switch(t){case qt.a.bed2WaterBed:this.spines.forEach((function(t){return t.skeleton.setSkinByName(se.bed)}));break;case qt.a.bed2Couch:this.spines.forEach((function(t){return t.skeleton.setSkinByName(se.couch)}));break;case qt.a.bed2Hammock:this.babyBearBed=this.hammock3,this.spines=[this.hammock1,this.hammock2,this.hammock3]}}},{key:"getShowAction",value:function(){var t=J[F.propDrop];if(this.choiceId==qt.a.bed2Hammock){var e=ce.show;return this.getAnimActionWithSFX(e,t.name,t.delay)}return this.getShowAnimActionWithSFX(t.name,t.delay)}},{key:"getBounceAction",value:function(){if(this.choiceId==qt.a.bed2Hammock){var t=ce.bounce;return this.getAnimAction(t)}return framework.Actions.Func((function(){}))}},{key:"getBabyBearBed",value:function(){return this.babyBearBed}}]),n}($t);function he(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}!function(t){t.bed="bed",t.couch="couch"}(se||(se={})),function(t){t.idle="idle",t.show="show",t.hide="hide",t.bounce="bounce"}(ce||(ce={}));var le=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(he()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r,o,a){var s;return v()(this,n),s=i.call(this,t,e,o,a),k()(U()(s),"replayActHandler",void 0),s._replayStates=r,s.replayActHandler=new Lt(e,r,s.stateContext,U()(s),a,U()(s)),s}return g()(n,[{key:"init",value:function(){j()(C()(n.prototype),"init",this).call(this),this.replayActHandler.init()}},{key:"playFirstDialog",value:function(){this.replayActHandler.playFirstDialog()}},{key:"goTo",value:function(t){this.shouldEndDialog(t)?this.endDialog():this.replayActHandler.goTo(t)}},{key:"getEndOfActAction",value:function(){return this.replayActHandler.getEndOfActAction()}},{key:"endDialog",value:function(){console.log("replay is terminated"),this.runAction(this.replayActHandler.getEndDialogAction())}}]),n}(Zt);function fe(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var pe=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(fe()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){var t;v()(this,n);for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return t=i.call.apply(i,[this].concat(r)),k()(U()(t),"weatherProp",null),t}return g()(n,[{key:"initProps",value:function(){j()(C()(n.prototype),"initProps",this).call(this),this.initWeatherProps(),this.initDoorProp(),this.initGardenProps(),this.initBowlProps(),this.initBearFurnitureProps(),this.initBedProps()}},{key:"getReplayMediator",value:function(t,e){return new le(this.view,this.diService,t,e,this)}},{key:"getActMediator",value:function(t){return new Zt(this.view,this.diService,t,this)}},{key:"getStoryData",value:function(){return new Xt.a}},{key:"initWeatherProps",value:function(){this.weatherProp=new Ct(this.backdrop,this.view,this.diService),this.diService.setDataWithKey(B.a.weatherProp,this.weatherProp),this.scripts.addScript(this.weatherProp),this.props.push(this.weatherProp)}},{key:"initDoorProp",value:function(){var t=new Vt(this.view,this.diService);this.diService.setDataWithKey(B.a.door,t),this.props.push(t)}},{key:"initGardenProps",value:function(){var t=new Jt(this.view,this.diService);this.diService.setDataWithKey(B.a.garden,t),this.props.push(t)}},{key:"initBowlProps",value:function(){var t=new ie(this.view,this.diService);this.diService.setDataWithKey(B.a.bowl,t),this.props.push(t)}},{key:"initBearFurnitureProps",value:function(){var t=new oe(this.view,this.diService);this.diService.setDataWithKey(B.a.bearFurniture,t),this.props.push(t)}},{key:"initBedProps",value:function(){var t=new ue(this.view,this.diService);this.diService.setDataWithKey(B.a.bed,t),this.props.push(t)}},{key:"debugStartStory",value:function(){this.setSaveForKey("costume","Goldi-rocks"),this.setSaveForKey("weather","cloudy"),this.setSaveForKey("bowl","Tacos"),this.setSaveForKey("seat","bean bags"),this.setSaveForKey("bed","Hammock"),this.setSaveForKey("parent","papa");var t=new Map([[q.a.narrator,rt.c.arthur],[q.a.goldilocks,rt.c.muffy],[q.a.parentBear,rt.c.buster],[q.a.babyBear,rt.c.dw]]);this.startStory(t)}},{key:"setSaveForKey",value:function(t,e){this.storyData.save.get(t)||this.storyData.save.set(t,e)}}]),n}(St);function de(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ve=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(de()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"getStoryMediator",value:function(){return new pe(this.view,this.diService,this)}}]),n}(Ut.a),ye=n(116),ge=n(20),me=n(121),ke=n(26);function we(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ae=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(we()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),(o=i.call(this,t,e,r)).costumeSelectionPopOver=e,k()(U()(o),"choiceToCostumeMap",new Map([[vi.Costume1Fairy,nt.a.fairygodmother],[vi.Costume1Inventor,nt.a.inventor]])),k()(U()(o),"spines",new Map),o}return g()(n,[{key:"character",get:function(){return this.characters.get(q.a.godmother)}},{key:"costumePopover",get:function(){return this.selectPopover}}]),g()(n,[{key:"onInit",value:function(){this.character.container.alpha=1,j()(C()(n.prototype),"onInit",this).call(this),this.setPopOverButtonInactive()}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setCostume(t),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.costumeSelectionPopOver.getOnSelectAnimAction(this.spines.get(t)),framework.Actions.Func((function(){return e.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([e.character.getShowAndRiseUpAction(),framework.Actions.Func((function(){return e.didTerminate(t)}))]))}))}))]))}},{key:"setCostume",value:function(t){this.choiceDialog.finishChoice(t),this.costumePopover.setSelected(this.spines.get(t)),this.character.setCostume(this.choiceToCostumeMap.get(t))}},{key:"onChoicesBeingPresented",value:function(t){var e=this;this.checkChoiceMade()||this.selectPopover.show((function(){e.setPopOverButtonActive(),e.spines.set(vi.Costume1Fairy,e.costumeSelectionPopOver.buttonLeft),e.spines.set(vi.Costume1Inventor,e.costumeSelectionPopOver.buttonMiddle)}))}},{key:"skip",value:function(){this.setCostume(this.choiceDialog.getDefaultChoice()),this.character.show(),j()(C()(n.prototype),"skip",this).call(this)}}]),n}(ke.a);function Se(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var be=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Se()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),(o=i.call(this,t,e,r)).costumeSelectionPopOver=e,k()(U()(o),"choiceToCostumeMap",new Map([[yi.moviestar,nt.a.moviestar],[yi.spacesuit,nt.a.astronaut]])),k()(U()(o),"spines",new Map),o}return g()(n,[{key:"character",get:function(){return this.characters.get(q.a.cinderella)}},{key:"costumePopover",get:function(){return this.selectPopover}}]),g()(n,[{key:"onInit",value:function(){this.setPopOverButtonInactive(),j()(C()(n.prototype),"onInit",this).call(this)}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setCostume(t),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.costumeSelectionPopOver.getOnSelectAnimAction(this.spines.get(t)),framework.Actions.Func((function(){return e.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([e.character.getCostumeAction(e.choiceToCostumeMap.get(t)),framework.Actions.Func((function(){return e.didTerminate(t)}))]))}))}))]))}},{key:"setCostume",value:function(t){this.choiceDialog.finishChoice(t),this.costumePopover.setSelected(this.spines.get(t))}},{key:"onChoicesBeingPresented",value:function(t){var e=this;this.checkChoiceMade()||this.selectPopover.show((function(){e.setPopOverButtonActive(),e.spines.set(yi.moviestar,e.costumeSelectionPopOver.buttonLeft),e.spines.set(yi.spacesuit,e.costumeSelectionPopOver.buttonMiddle)}))}},{key:"skip",value:function(){var t=this.choiceDialog.getDefaultChoice();this.setCostume(t),this.character.setCostume(this.choiceToCostumeMap.get(t)),this.character.show(),j()(C()(n.prototype),"skip",this).call(this)}}]),n}(ke.a),_e=n(264);function De(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ce=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(De()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),(o=i.call(this,t,e,r)).costumeSelectionPopOver=e,k()(U()(o),"spines",new Map),o}return g()(n,[{key:"character",get:function(){return this.characters.get(q.a.cinderella)}},{key:"storyData",get:function(){return this.diService.getDataByKey(B.a.StoryData)}},{key:"shoeChoice",get:function(){return this.storyData.choiceToCostumeMap.get(this.storyData.shoeSelectionChoice)}},{key:"costumePopover",get:function(){return this.selectPopover}}]),g()(n,[{key:"onInit",value:function(){this.setPopOverButtonInactive(),j()(C()(n.prototype),"onInit",this).call(this)}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setCostume(t),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.costumeSelectionPopOver.getOnSelectAnimAction(this.spines.get(t)),framework.Actions.Func((function(){return e.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([e.character.getAddCostumeAction(e.shoeChoice),framework.Actions.Func((function(){return e.didTerminate(t)}))]))}))}))]))}},{key:"setCostume",value:function(t){this.storyData.shoeSelectionChoice=t,this.costumePopover.setSelected(this.spines.get(t)),this.choiceDialog.finishChoice(t)}},{key:"onChoicesBeingPresented",value:function(t){var e=this;this.checkChoiceMade()||this.selectPopover.show((function(){e.setPopOverButtonActive(),e.spines.set(gi.slippers,e.costumeSelectionPopOver.buttonLeft),e.spines.set(gi.sneakers,e.costumeSelectionPopOver.buttonMiddle),e.spines.set(gi.boots,e.costumeSelectionPopOver.buttonRight)}))}},{key:"skip",value:function(){var t=this.choiceDialog.getDefaultChoice();this.setCostume(t),this.character.addCostume(this.storyData.choiceToCostumeMap.get(t)),this.character.show(),j()(C()(n.prototype),"skip",this).call(this)}}]),n}(ke.a),Pe=n(35),xe=n(22);function Re(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Me=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Re()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),(o=i.call(this,t,e,r)).propSelectionPopOver=e,k()(U()(o),"spines",new Map),o}return g()(n,[{key:"character",get:function(){return this.characters.get(q.a.cinderella)}},{key:"carriage",get:function(){return this.diService.getDataByKey(B.a.carriage)}}]),g()(n,[{key:"onInit",value:function(){this.setPopOverButtonInactive(),j()(C()(n.prototype),"onInit",this).call(this)}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return e.character.setDirection(xe.a.right)})),e.character.getWalkToPositionAction(Pi.act1CinderellaBesideCarriageXPosition),framework.Actions.Func((function(){return e.character.setDirection(xe.a.left)})),e.carriage.getPumpkinTransformationAction(t),framework.Actions.Func((function(){return e.didTerminate(t)}))]))}))}},{key:"onChoicesBeingPresented",value:function(t){var e=this;this.checkChoiceMade()||this.selectPopover.show((function(){e.setPopOverButtonActive()}))}},{key:"skip",value:function(){this.character.x=Pi.act1CinderellaBesideCarriageXPosition,this.carriage.skip(),j()(C()(n.prototype),"skip",this).call(this)}}]),n}(ke.a),Ie=n(118);function Te(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Oe=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Te()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.godmother.getHideAction(),framework.Actions.Func((function(){return j()(C()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.godmother.hide(),j()(C()(n.prototype),"skip",this).call(this)}},{key:"godmother",get:function(){return this.characters.get(q.a.godmother)}}]),n}(ge.a);function Fe(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Be=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Fe()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.cinderella.getWalkToPositionAction(Pi.act1CinderellaXPosition),framework.Actions.Parallel([this.cinderella.getHideAction(),this.carriage.getRemoveAction()]),framework.Actions.Func((function(){return j()(C()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.cinderella.x=Pi.act1CinderellaXPosition,this.cinderella.hide(),this.carriage.hideAll(),j()(C()(n.prototype),"skip",this).call(this)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}},{key:"carriage",get:function(){return this.diService.getDataByKey(B.a.carriage)}}]),n}(ge.a);function Ve(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Le=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ve()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){var t;v()(this,n);for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return t=i.call.apply(i,[this].concat(r)),k()(U()(t),"choiceToCostumeMap",new Map([[ki.charming,nt.a.princecharming],[ki.bot,nt.a.princebot],[ki.megastar,nt.a.princemegastar]])),k()(U()(t),"spines",new Map),t}return g()(n,[{key:"onInit",value:function(){var t=this;this.initCharacters(),this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.backdrop.getAnimatedActChangeAction(X.a.act4),this.carriage.getShowAction()]),this.cinderella.getShowAndRiseUpAction(),framework.Actions.Func((function(){return j()(C()(n.prototype),"onInit",t).call(t)})),framework.Actions.Delay(1),this.carriage.getHideAction(),framework.Actions.Delay(.3),framework.Actions.Parallel([this.ballroom.getShowAction(),this.backdrop.getAnimatedActChangeAction(X.a.act3)])]))}},{key:"initCharacters",value:function(){this.cinderella.setDirection(xe.a.left),this.prince.setDirection(xe.a.right)}},{key:"onChoicesBeingPresented",value:function(t){var e=this;this.checkChoiceMade()||this.selectPopover.show((function(){e.setPopOverButtonActive(),e.spines.set(ki.charming,e.selectPopover.buttonLeft),e.spines.set(ki.bot,e.selectPopover.buttonMiddle),e.spines.set(ki.megastar,e.selectPopover.buttonRight)}))}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.setCostume(t),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.selectPopover.getOnSelectAnimAction(this.spines.get(t)),framework.Actions.Func((function(){return e.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([e.prince.getShowAndRiseUpAction(),framework.Actions.Func((function(){return j()(C()(n.prototype),"didTerminate",e).call(e,t)}))]))}))}))]))}},{key:"setCostume",value:function(t){this.choiceDialog.finishChoice(t),this.costumePopover.setSelected(this.spines.get(t)),this.prince.setCostume(this.choiceToCostumeMap.get(t))}},{key:"skip",value:function(){this.initCharacters(),this.cinderella.show();var t=this.choiceDialog.getDefaultChoice();this.setCostume(t),this.prince.show(),this.backdrop.setBackdropTo(X.a.act3,!0),j()(C()(n.prototype),"skip",this).call(this)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"carriage",get:function(){return this.diService.getDataByKey(B.a.carriage)}},{key:"backdrop",get:function(){return this.diService.getDataByKey(B.a.backdrop)}},{key:"ballroom",get:function(){return this.diService.getDataByKey(B.a.ballroom)}},{key:"costumePopover",get:function(){return this.selectPopover}}]),n}(ke.a);function Ee(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ne=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ee()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),(o=i.call(this,t,e,r)).selectPopover=e,o}return g()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||(this.selectPopover.view.x=this.prince.x,this.selectPopover.show())}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.setAction(t),this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return e.didTerminate(t)}))]))}))}},{key:"skip",value:function(){this.setAction(this.choiceDialog.getDefaultChoice()),j()(C()(n.prototype),"skip",this).call(this)}},{key:"setAction",value:function(t){this.prince.setDefaultAction(t),this.cinderella.setDefaultAction(t)}},{key:"getChoiceId",value:function(){return wi.dance1}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}}]),n}(ke.a);function Ke(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var He=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ke()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"onChoicesBeingPresented",value:function(t){this.checkChoiceMade()||(this.selectPopover.view.x=0,this.selectPopover.show())}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.selectPopover.hide((function(){return e.didTerminate(t)}))}}]),n}(ke.a);function Ue(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var We=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ue()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r){var o;return v()(this,n),(o=i.call(this,t,e,r)).costumeSelectionPopOver=e,k()(U()(o),"choicesMap",new Map([[Si.ballroom1,X.a.act3],[Si.cottage1,X.a.act5],[Si.house1,X.a.act6]])),k()(U()(o),"choiceToCostumeMap",new Map([[Si.cottage1,nt.a.grandma],[Si.house1,nt.a.babybear]])),k()(U()(o),"currentBackdrop",void 0),o}return g()(n,[{key:"backdrop",get:function(){return this.diService.getDataByKey(B.a.backdrop)}},{key:"storyData",get:function(){return this.diService.getDataByKey(B.a.StoryData)}},{key:"ballroom",get:function(){return this.diService.getDataByKey(B.a.ballroom)}},{key:"locator",get:function(){return this.diService.getDataByKey(B.a.locator)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"godMother",get:function(){return this.characters.get(q.a.godmother)}}]),g()(n,[{key:"onInit",value:function(){this.setPopOverButtonInactive(),this.currentBackdrop=this.backdrop.currentAct,j()(C()(n.prototype),"onInit",this).call(this)}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t),this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return e.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Parallel([framework.Actions.Parallel([e.backdrop.getAnimatedActChangeAction(e.choicesMap.get(t)),e.getPropAction(t)]),framework.Actions.Sequence([framework.Actions.Delay(2),framework.Actions.Parallel([e.prince.getShowAndRiseUpAction(),e.getCharacterAction(t)]),framework.Actions.Func((function(){return e.didTerminate(t)}))])]))}))}))]))}},{key:"getPropAction",value:function(t){return t==Si.ballroom1?(this.storyData.shouldShowBallRoom=!0,this.ballroom.getShowAction()):framework.Actions.Func()}},{key:"getCharacterAction",value:function(t){var e=this.choiceToCostumeMap.get(t);return e?(this.godMother.x=this.locator.middleRight.x,this.godMother.container.alpha=1,this.godMother.setDirection(xe.a.left),this.godMother.setCostume(e),this.godMother.getShowAndRiseUpAction()):framework.Actions.Func()}},{key:"onChoicesBeingPresented",value:function(t){var e=this;this.checkChoiceMade()||this.selectPopover.show((function(){e.setPopOverButtonActive()}))}},{key:"skip",value:function(){var t=this.choiceDialog.getDefaultChoice();this.choiceDialog.finishChoice(t),this.backdrop.getAnimatedActChangeAction(this.choicesMap.get(t)),j()(C()(n.prototype),"skip",this).call(this)}}]),n}(ke.a);function je(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var qe=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(je()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"onInit",value:function(){var t=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return j()(C()(n.prototype),"onInit",t).call(t)})),framework.Actions.Parallel([framework.Actions.Func((function(){return t.cinderella.playDefaultAction()})),framework.Actions.Func((function(){t.prince.playDefaultAction()}))])]))}},{key:"skip",value:function(){this.cinderella.show(),this.prince.show(),this.prince.setDefaultAction(this.cinderella.defaultAction),this.prince.playDefaultAction(),this.cinderella.playDefaultAction(),j()(C()(n.prototype),"skip",this).call(this)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}}]),n}(ge.a);function Xe(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ge=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Xe()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"onInit",value:function(){var t=this;this.godmother.x=Pi.act2GodmotherGhostXPosition,this.godmother.setDirection(xe.a.left),this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.godmother.getFadeInAction(),this.godmother.getShowAndRiseUpAction()]),framework.Actions.Func((function(){return j()(C()(n.prototype),"onInit",t).call(t)}))]))}},{key:"skip",value:function(){j()(C()(n.prototype),"skip",this).call(this),this.godmother.show()}},{key:"godmother",get:function(){return this.characters.get(q.a.godmother)}},{key:"locator",get:function(){return this.diService.getDataByKey(B.a.locator)}}]),n}(ge.a);function ze(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ye=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ze()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"onInit",value:function(){var t=this;this.shoe.setSkin(this.storyData.choiceToThrowingSkinMap.get(this.storyData.shoeSelectionChoice)),this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Func((function(){return j()(C()(n.prototype),"onInit",t).call(t)})),framework.Actions.Parallel([this.shoe.getShowAnimAction(),framework.Actions.Func((function(){t.cinderella.removeShoes(t.shoeChoice),t.cinderella.setOneShoe(t.shoeChoice)})),framework.Actions.Sequence([this.cinderella.getCharacterMoveAction(this.locator.exitLeft,(function(){return t.cinderella.playRun()})),this.cinderella.getHideAction()])])]))}},{key:"skip",value:function(){this.shoe.show(),j()(C()(n.prototype),"skip",this).call(this)}},{key:"shoe",get:function(){return this.diService.getDataByKey(B.a.throwingProp)}},{key:"locator",get:function(){return this.diService.getDataByKey(B.a.locator)}},{key:"storyData",get:function(){return this.diService.getDataByKey(B.a.StoryData)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}},{key:"shoeChoice",get:function(){return this.storyData.choiceToCostumeMap.get(this.storyData.shoeSelectionChoice)}}]),n}(ge.a);function Ze(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Je=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ze()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"onInit",value:function(){var t=this;this.cinderella.x=this.locator.exitMiddle.x,this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.prince.getHideAction(),this.shoe.getHideAction()]),framework.Actions.Parallel([this.ballroom.getHideAction(),this.backdrop.getAnimatedActChangeAction(X.a.act4)]),this.carriage.getAppearAction(),this.cinderella.getShowAndRiseUpAction(),framework.Actions.Func((function(){return j()(C()(n.prototype),"onInit",t).call(t)}))]))}},{key:"skip",value:function(){this.shoe.hide(),this.prince.hide(),this.ballroom.hideAll(),this.carriage.showSelected(),this.backdrop.setBackdropTo(X.a.act4,!0),j()(C()(n.prototype),"skip",this).call(this)}},{key:"shoe",get:function(){return this.diService.getDataByKey(B.a.throwingProp)}},{key:"locator",get:function(){return this.diService.getDataByKey(B.a.locator)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"backdrop",get:function(){return this.diService.getDataByKey(B.a.backdrop)}},{key:"carriage",get:function(){return this.diService.getDataByKey(B.a.carriage)}},{key:"ballroom",get:function(){return this.diService.getDataByKey(B.a.ballroom)}}]),n}(ge.a);n(80);function $e(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Qe=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if($e()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"onInit",value:function(){j()(C()(n.prototype),"onInit",this).call(this)}},{key:"onChoice",value:function(t){var e=this;this.removeInterations(),this.choiceDialog.finishChoice(t);var i=this.dialog.sfxChoices[t];if(!i)throw"no sfx for "+t+" in "+this.dialog.sfxChoices;this.selectPopover.hide((function(){e.actionManagerDelegate.runAction(framework.Actions.Parallel([e.cinderella.getCostumeAction(nt.a.cinderella),e.carriage.getTransformBack(),new $.a(i,S.a.C3,!1,e.diService),framework.Actions.Sequence([framework.Actions.Delay(1),framework.Actions.Func((function(){return e.didTerminate(e.dialog.getLink(0).link)}))])]))}))}},{key:"skip",value:function(){this.cinderella.setCostume(nt.a.cinderella),this.stopSound(),j()(C()(n.prototype),"skip",this).call(this)}},{key:"carriage",get:function(){return this.diService.getDataByKey(B.a.carriage)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}}]),n}(n(88).a);function ti(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ei=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ti()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"onInit",value:function(){var t=this;this.cinderella.setDirection(xe.a.left),this.cinderella.x=this.locator.middleRight.x,this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.getHideAction(),this.prince.getHideAction(),this.godMother.getHideAction()]),this.backdrop.getAnimatedActChangeAction(X.a.act1),framework.Actions.Parallel([framework.Actions.Func((function(){return j()(C()(n.prototype),"onInit",t).call(t)})),framework.Actions.Func((function(){return t.cinderella.addCostume(nt.a.mop)})),this.door.getShowAction(),this.cinderella.getShowAndRiseUpAction()])]))}},{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.getDoorRingAction(),framework.Actions.Func((function(){return j()(C()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"getDoorRingAction",value:function(){return framework.Actions.Parallel([this.door.getRingAnimAction(),new $.a("door-knock.mp3",S.a.C1,!1,this.diService)])}},{key:"getHideAction",value:function(){return this.storyData.shouldShowBallRoom?this.ballroom.getHideAction():framework.Actions.Func()}},{key:"skip",value:function(){this.cinderella.show(),j()(C()(n.prototype),"skip",this).call(this)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"door",get:function(){return this.diService.getDataByKey(B.a.door)}},{key:"backdrop",get:function(){return this.diService.getDataByKey(B.a.backdrop)}},{key:"godMother",get:function(){return this.characters.get(q.a.godmother)}},{key:"locator",get:function(){return this.diService.getDataByKey(B.a.locator)}},{key:"ballroom",get:function(){return this.diService.getDataByKey(B.a.ballroom)}},{key:"storyData",get:function(){return this.diService.getDataByKey(B.a.StoryData)}}]),n}(ge.a);function ii(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ni=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ii()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"onInit",value:function(){var t=this;this.initPrince(),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.getShowPrinceAction(),framework.Actions.Func((function(){return j()(C()(n.prototype),"onInit",t).call(t)})),this.getPrinceMoveAction()]))}},{key:"initPrince",value:function(){this.prince.x=this.door.x,this.prince.setDirection(xe.a.right),this.prince.setShoeInHand(this.storyData.choiceToCostumeMap.get(this.storyData.shoeSelectionChoice))}},{key:"getShowPrinceAction",value:function(){var t=this;return framework.Actions.Parallel([this.door.getOpenAnimAction(),framework.Actions.Sequence([framework.Actions.Delay(.3),this.prince.getShowAndRiseUpAction(),framework.Actions.Func((function(){return t.prince.playIdle()}))])])}},{key:"getPrinceMoveAction",value:function(){var t=this;return framework.Actions.Sequence([this.prince.getCharacterMoveAction(this.locator.middle,(function(){return t.prince.playWalk()}),2),framework.Actions.Func((function(){return t.prince.playIdle()}))])}},{key:"skip",value:function(){this.initPrince(),this.prince.show(),j()(C()(n.prototype),"skip",this).call(this)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}},{key:"door",get:function(){return this.diService.getDataByKey(B.a.door)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"locator",get:function(){return this.diService.getDataByKey(B.a.locator)}},{key:"storyData",get:function(){return this.diService.getDataByKey(B.a.StoryData)}}]),n}(ge.a);function ri(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var oi=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ri()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.godmother.getFadeOutAction(),this.godmother.getHideAction()]),framework.Actions.Func((function(){return j()(C()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){j()(C()(n.prototype),"skip",this).call(this),this.godmother.hide()}},{key:"godmother",get:function(){return this.characters.get(q.a.godmother)}},{key:"locator",get:function(){return this.diService.getDataByKey(B.a.locator)}}]),n}(ge.a);function ai(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var si=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ai()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"onInit",value:function(){var t=this;j()(C()(n.prototype),"onInit",this).call(this),this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.character.getCharacterMoveAction(this.locator.exitLeft,(function(){return t.character.playWalk()}),2),this.character.getHideAction(),this.carriage.getHidePumpkinAction()]))}},{key:"skip",value:function(){j()(C()(n.prototype),"skip",this).call(this),this.character.hide(),this.carriage.hideAll()}},{key:"character",get:function(){return this.characters.get(q.a.cinderella)}},{key:"locator",get:function(){return this.diService.getDataByKey(B.a.locator)}},{key:"carriage",get:function(){return this.diService.getDataByKey(B.a.carriage)}}]),n}(ge.a);function ci(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var ui=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(ci()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([framework.Actions.Parallel([this.prince.getRemoveShoeInHandAction(this.shoeChoice),this.character.getOneShoeAction(this.shoeChoice)]),framework.Actions.Func((function(){return j()(C()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.prince.removeShoeInHand(this.shoeChoice),this.character.setOneShoe(this.shoeChoice),j()(C()(n.prototype),"skip",this).call(this)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"character",get:function(){return this.characters.get(q.a.cinderella)}},{key:"storyData",get:function(){return this.diService.getDataByKey(B.a.StoryData)}},{key:"shoeChoice",get:function(){return this.storyData.choiceToCostumeMap.get(this.storyData.shoeSelectionChoice)}}]),n}(ge.a);function hi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var li=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(hi()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.cinderella.getAddCostumeAction(this.shoeChoice),framework.Actions.Parallel([this.cinderella.getCharacterMoveAction(this.door.spine,(function(){return e.cinderella.playWalk()}),2),framework.Actions.Sequence([framework.Actions.Delay(1),framework.Actions.Func((function(){return e.prince.setDirection(xe.a.left)})),this.prince.getCharacterMoveAction(this.door.spine,(function(){return e.prince.playWalk()}),1)])]),framework.Actions.Parallel([this.door.getCloseAnimAction(),this.cinderella.getHideAction(),this.prince.getHideAction()]),framework.Actions.Func((function(){j()(C()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){j()(C()(n.prototype),"skip",this).call(this),this.prince.hide(),this.cinderella.hide()}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"locator",get:function(){return this.diService.getDataByKey(B.a.locator)}},{key:"door",get:function(){return this.diService.getDataByKey(B.a.door)}},{key:"storyData",get:function(){return this.diService.getDataByKey(B.a.StoryData)}},{key:"shoeChoice",get:function(){return this.storyData.choiceToCostumeMap.get(this.storyData.shoeSelectionChoice)}}]),n}(ge.a);function fi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var pi,di,vi,yi,gi,mi,ki,wi,Ai,Si,bi=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(fi()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){var t;v()(this,n);for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return t=i.call.apply(i,[this].concat(r)),k()(U()(t),"princeStartPositionX",void 0),t}return g()(n,[{key:"onInit",value:function(){j()(C()(n.prototype),"onInit",this).call(this),this.princeStartPositionX=this.prince.x}},{key:"didTerminate",value:function(t){var e=this;this.actionManagerDelegate.runAction(framework.Actions.Sequence([this.prince.getWalkToPositionAction(this.prince.x+Pi.act3LookAroundWalkOffset),framework.Actions.Func((function(){return e.prince.setDirection(xe.a.left)})),this.prince.getWalkToPositionAction(this.princeStartPositionX),framework.Actions.Func((function(){return e.prince.setDirection(xe.a.right)})),framework.Actions.Func((function(){return j()(C()(n.prototype),"didTerminate",e).call(e,t)}))]))}},{key:"skip",value:function(){this.prince.x=this.princeStartPositionX,this.prince.setDirection(xe.a.right),j()(C()(n.prototype),"skip",this).call(this)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"storyData",get:function(){return this.diService.getDataByKey(B.a.StoryData)}}]),n}(ge.a);function _i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}!function(t){t.godmother="godmother",t.outfit="outfit",t.shoes="shoes",t.pumpkin="pumpkin",t.prince="prince",t.dance="dance",t.response="response",t.location="location",t.transformBack="transformBack"}(pi||(pi={})),function(t){t.act1Intro2="act-1-intro-2",t.act1Intro1="act-1-intro-1",t.story9="story-9",t.story11="story-11",t.act2Intro1="act-2-intro-1",t.act3Intro1="act3-intro-1",t.story14="story-14",t.story15="story-15",t.story16="story-16",t.story19="story-19",t.story20="story-20",t.story27="story-27",t.story29="story-29",t.story30="story-30",t.story32="story-32",t.story34="story-34",t.ballroom2="ballroom-2"}(di||(di={})),function(t){t.Costume1Fairy="fairygod-1",t.Costume1Inventor="fairyinventor-1"}(vi||(vi={})),function(t){t.moviestar="moviestar-1",t.spacesuit="spacesuit-1"}(yi||(yi={})),function(t){t.slippers="slippers-1",t.sneakers="sneakers-1",t.boots="boots-1"}(gi||(gi={})),function(t){t.carriage1="carriage-1",t.car1="car-1",t.rocket1="rocket-1"}(mi||(mi={})),function(t){t.charming="charming-1",t.bot="bot-1",t.megastar="megastar-1"}(ki||(ki={})),function(t){t.dance1="dance-1",t.hop1="hop-1",t.shake1="shake-1"}(wi||(wi={})),function(t){t.happy1="happy-1",t.sad1="sad-1",t.silly1="silly-1"}(Ai||(Ai={})),function(t){t.ballroom1="ballroom-1",t.cottage1="cottage-1",t.house1="house-1"}(Si||(Si={}));var Di=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(_i()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){var t;v()(this,n);for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return t=i.call.apply(i,[this].concat(r)),k()(U()(t),"act1",di.act1Intro1),k()(U()(t),"act2",di.act2Intro1),k()(U()(t),"act3",di.act3Intro1),t}return g()(n,[{key:"handleChoiceDialog",value:function(t,e,i){switch(t.choiceType){case pi.godmother:return new Ae(e,this.createCostumeSelectPopOver([nt.a.fairygodmother,nt.a.inventor]),this.diService);case pi.outfit:return new be(e,this.createCostumeSelectPopOver([nt.a.moviestar,nt.a.astronaut]),this.diService);case pi.shoes:return new Ce(e,this.createCostumeSelectPopOver([nt.a.glassslippers,nt.a.sneakers,nt.a.spaceboots]),this.diService);case pi.pumpkin:return new Me(e,this.createPropsSelectPopOver([Pe.a.pumpkincarriage,Pe.a.pumpkincar,Pe.a.pumpkinrocket]),this.diService);case pi.prince:return new Le(e,this.createCostumeSelectPopOver([nt.a.princecharming,nt.a.princebot,nt.a.princemegastar]),this.diService);case pi.dance:return new Ne(e,this.createIconSelectPopOver([bt.b.dance,bt.b.jump,bt.b.shake]),this.diService);case pi.response:return new He(e,this.createIconSelectPopOver([bt.b.happy,bt.b.angry,bt.b.silly]),this.diService);case pi.location:return new We(e,this.createPropsSelectPopOver([Pe.a.backgroundBallroom,Pe.a.backgroundGrandma,Pe.a.background3bears]),this.diService);case pi.transformBack:return new Qe(e,this.createIconSelectPopOver([bt.b.bang,bt.b.pop,bt.b.crash]),this.diService);default:return this.getSimpleDialog(i,e)}}},{key:"handleCueDialog",value:function(t,e){throw t.cue,"no state for "+t.cue}},{key:"handleCueChoiceDialog",value:function(t,e){return t.cue,null}},{key:"getSimpleDialog",value:function(t,e){return t.name==di.act1Intro1?new Ie.a(e,this.diService):t.name==di.act1Intro2?new _e.a(e,this.diService):t.name==di.story9?new Oe(e,this.diService):t.name==di.story11?new Be(e,this.diService):t.name==di.story14?new qe(e,this.diService):t.name==di.story15?new Ge(e,this.diService):t.name==di.story16?new oi(e,this.diService):t.name==di.story19?new Ye(e,this.diService):t.name==di.story20?new Je(e,this.diService):t.name==di.story27?new si(e,this.diService):t.name==di.ballroom2?new bi(e,this.diService):t.name==di.story29?new ei(e,this.diService):t.name==di.story30?new ni(e,this.diService):t.name==di.story32?new ui(e,this.diService):t.name==di.story34?new li(e,this.diService):new ge.a(e,this.diService)}}]),n}(me.a);function Ci(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Pi=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ci()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){var t;return v()(this,n),t=i.call(this),k()(U()(t),"voIDMap",new Map),k()(U()(t),"shoeSelectionChoice",null),k()(U()(t),"shouldShowBallRoom",!1),k()(U()(t),"choiceToCostumeMap",new Map([[gi.slippers,nt.a.glassslippers],[gi.sneakers,nt.a.sneakers],[gi.boots,nt.a.spaceboots]])),k()(U()(t),"choiceToThrowingSkinMap",new Map([[gi.slippers,Tt.glassslipper],[gi.sneakers,Tt.sneaker],[gi.boots,Tt.astronautboot]])),k()(U()(t),"characterSelectionDialogs",new Map([[q.a.godmother,new wt.a("cinder-char-select-fairy.mp3","Who should be the fairy helper?")],[q.a.prince,new wt.a("cinder-char-select-prince.mp3","Who should be the prince?")]])),k()(U()(t),"leadRole",q.a.cinderella),k()(U()(t),"roleUIMap",new Map([[q.a.cinderella,nt.a.rolecinderella],[q.a.prince,nt.a.roleprincecharming],[q.a.godmother,nt.a.rolefairyhelper],[q.a.narrator,nt.a.rolenarrator]])),t.voIDMap.set("Cinder-diva","diva"),t.voIDMap.set("Cinder-naut","naut"),t.voIDMap.set("Charming","charming"),t.voIDMap.set("Bot","bot"),t.voIDMap.set("Megastar","megastar"),t.voIDMap.set("Inventor","inventor"),t.voIDMap.set("Godmother","godmother"),t.voIDMap.set("Boots","boots"),t.voIDMap.set("Sneakers","sneakers"),t.voIDMap.set("Slippers","slippers"),t.voIDMap.set("Rocket","rocket"),t.voIDMap.set("Car","car"),t.voIDMap.set("Carriage","carriage"),t.voIDMap.set("Happy","happy"),t.voIDMap.set("Sad","sad"),t.voIDMap.set("Silly","silly"),t}return g()(n,[{key:"getDefaultVOKeys",value:function(){return["response"]}}]),n}(ye.a);function xi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}k()(Pi,"act1CinderellaXPosition",20),k()(Pi,"act1CinderellaBesideCarriageXPosition",270),k()(Pi,"act2GodmotherGhostXPosition",250),k()(Pi,"act2WolfXPosition",200),k()(Pi,"act2NarratorXPosition",375),k()(Pi,"act2GranmaXPosition",-10),k()(Pi,"act2LrrhXPosition",-200),k()(Pi,"act2WolfXScale",1),k()(Pi,"act2NarratorXScale",1),k()(Pi,"act2LrrhXScale",-1),k()(Pi,"act3LookAroundWalkOffset",350);var Ri=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(xi()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"playMopping",value:function(){this._spine.state.setAnimation(0,rt.a.mopping,!0)}},{key:"getMoppingAction",value:function(){return framework.Actions.Spine(this._spine,rt.a.mopping)}},{key:"setDefaultAction",value:function(t){var e={};e[wi.dance1]=rt.a.dance2,e[wi.hop1]=rt.a.jump,e[wi.shake1]=rt.a.shake;var i={};i[wi.dance1]=!0,i[wi.hop1]=!0,i[wi.shake1]=!0,this._defaultAction=e[t],this._defaultLoopAction=i[t]}},{key:"getSetShoeInHand",value:function(t){var e=this,i=framework.Actions.Func((function(){return e.setShoeInHand(t)}));return this.createHideAndRiseAction(i)}},{key:"setShoeInHand",value:function(t){var e="costumes/astronaut-boot",i="costumes/carry-astronaut-boot";switch(t){case nt.a.glassslippers:e="costumes/glassslipper",i="costumes/carry-glassslipper";break;case nt.a.sneakers:e="costumes/sneaker",i="costumes/carry-sneaker"}this.attachCostumePart(i,e)}},{key:"getRemoveShoeInHandAction",value:function(t){var e=this,i=framework.Actions.Func((function(){return e.removeShoeInHand(t)}));return this.createHideAndRiseAction(i,S.a.C3)}},{key:"getOneShoeAction",value:function(t){var e=this,i=framework.Actions.Func((function(){return e.setOneShoe(t)}));return this.createHideAndRiseAction(i)}},{key:"setOneShoe",value:function(t){var e="costumes/astronaut-boot";switch(t){case nt.a.glassslippers:e="costumes/glassslipper";break;case nt.a.sneakers:e="costumes/sneaker"}this.attachCostumePart(e)}},{key:"removeShoeInHand",value:function(t){var e="costumes/carry-astronaut-boot";switch(t){case nt.a.glassslippers:e="costumes/carry-glassslipper";break;case nt.a.sneakers:e="costumes/carry-sneaker"}this.removeAttachment(e)}},{key:"removeShoes",value:function(t){var e=this;nt.c.get(t).forEach((function(t){e.removeAttachment(t)}))}}]),n}(ot.a);function Mi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ii=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Mi()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"initFactory",value:function(){return new Di(this.diService,this.view)}},{key:"initCharacters",value:function(){var t=this;j()(C()(n.prototype),"initCharacters",this).call(this);var e=new Ri(this.characterRoleMap.get(q.a.narrator),q.a.narrator,this.narrator,this.diService),i=new Ri(this.characterRoleMap.get(q.a.cinderella),q.a.cinderella,this.character,this.diService),r=new Ri(this.characterRoleMap.get(q.a.godmother),q.a.godmother,this.characterSecond,this.diService),o=new Ri(this.characterRoleMap.get(q.a.prince),q.a.prince,this.characterThird,this.diService);e.setCostume(nt.a.narrator),this.scripts.addScripts([e,i,r,o]),this.characters=new Map([[q.a.narrator,e],[q.a.cinderella,i],[q.a.godmother,r],[q.a.prince,o]]),this.diService.setDataWithKey(B.a.characters,this.characters);var a=[q.a.narrator,q.a.cinderella,q.a.godmother,q.a.prince];a.forEach((function(e){return t.characters.get(e).hide()})),this.assignPositionToCharacters(a)}},{key:"shouldEndDialog",value:function(t){return!1}},{key:"goToAct3",value:function(){this.setSaveForKey("fairy","Godmother"),this.setSaveForKey("costume","Cinder-diva"),this.setSaveForKey("shoes","Slippers"),this.setSaveForKey("carriage","Carriage"),this.setSaveForKey("location","Ballroom"),this.setSaveForKey("response","Sad"),this.setSaveForKey("prince","Charming"),this.setSaveForKey("dance","Dance"),this.setCostumes(),this.cinderella.hide(),this.godmother.hide(),this.prince.show(),this.prince.setDirection(xe.a.right),this.prince.playIdle(),this.backdrop.setBackdropTo(X.a.act4,!0),this.storyData.shoeSelectionChoice=gi.slippers,this.cancel(),this.goTo("act3-intro-1")}},{key:"goToAct2",value:function(){this.setSaveForKey("fairy","Godmother"),this.setSaveForKey("costume","Cinder-diva"),this.setSaveForKey("shoes","Slippers"),this.setSaveForKey("carriage","Carriage"),this.setSaveForKey("prince","Charming"),this.setCostumes(),this.cinderella.hide(),this.godmother.hide(),this.storyData.shoeSelectionChoice=gi.slippers,this.cinderella.addCostume(nt.a.glassslippers),this.backdrop.setBackdropTo(X.a.act4,!0),this.cancel(),this.playFirstDialog("44")}},{key:"setCostumes",value:function(){this.characters.get(q.a.cinderella).setCostume(ot.a.costumeFromName(this.storyData.save.get("costume"))),this.characters.get(q.a.narrator).setCostume(nt.a.narrator),this.characters.get(q.a.godmother).setCostume(ot.a.costumeFromName(this.storyData.save.get("fairy"))),this.characters.get(q.a.prince).setCostume(ot.a.costumeFromName(this.storyData.save.get("prince")))}},{key:"godmother",get:function(){return this.characters.get(q.a.godmother)}},{key:"cinderella",get:function(){return this.characters.get(q.a.cinderella)}},{key:"prince",get:function(){return this.characters.get(q.a.prince)}},{key:"backdrop",get:function(){return this.diService.getDataByKey(B.a.backdrop)}}]),n}(it.a);function Ti(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Oi,Fi,Bi=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ti()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e){var r;return v()(this,n),(r=i.call(this,t,e)).diService=e,k()(U()(r),"carriage",void 0),k()(U()(r),"rocket",void 0),k()(U()(r),"car",void 0),k()(U()(r),"pumpkin",void 0),k()(U()(r),"_choiceId",null),k()(U()(r),"selected",void 0),r.carriage=Object(G.c)(r.view,"carriage-anim"),r.rocket=Object(G.c)(r.view,"pumpkin-rocket-anim"),r.car=Object(G.c)(r.view,"pumpkin-car-anim"),r.pumpkin=Object(G.c)(r.view,"pumpkin-anim"),r.spines=[r.carriage,r.rocket,r.car,r.pumpkin],r.init(),r._choiceId=mi.carriage1,r.selected=r.carriage,r}return g()(n,[{key:"actionManagerDelegate",get:function(){return this.diService.getDataByKey(B.a.ActionManagerDelegate)}},{key:"containerName",get:function(){return"pumpkin"}},{key:"choiceId",get:function(){return this._choiceId||mi.car1},set:function(t){this._choiceId=t}}]),g()(n,[{key:"getPumpkinTransformationAction",value:function(t){var e=this;return t&&(this._choiceId=t),this.setSkinForType(this._choiceId),framework.Actions.Sequence([this.getTransformAction(),framework.Actions.Parallel([framework.Actions.Func((function(){return e.selected.visible=!0})),framework.Actions.Spine(this.selected,Oi.show),new $.a(this.getArriveSFX(),S.a.C1,!1,this.diService)]),framework.Actions.Func((function(){return e.selected.state.setAnimation(0,Oi.idle,!0)}))])}},{key:"getShowAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Func((function(){return t.selected.visible=!0})),framework.Actions.Spine(this.selected,Oi.show),new $.a(this.getArriveSFX(),S.a.C1,!1,this.diService)])])}},{key:"getAppearAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Func((function(){return t.selected.visible=!0})),framework.Actions.Spine(this.selected,Oi.appear)])])}},{key:"getHideAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Spine(this.selected,Oi.hide)]),framework.Actions.Func((function(){return t.selected.visible=!1}))])}},{key:"setSkinForType",value:function(t){switch(this._choiceId=t,t){case mi.car1:this.selected=this.car;break;case mi.carriage1:this.selected=this.carriage;break;case mi.rocket1:this.selected=this.rocket}}},{key:"getArriveSFX",value:function(){switch(this._choiceId){case mi.car1:return"cinder-car-arrive-sfx.mp3";case mi.carriage1:return"cinder-carriage-arrive-sfx.mp3";case mi.rocket1:return"cinder-rocket-arrive-sfx.mp3"}}},{key:"getDepartSFX",value:function(){switch(this._choiceId){case mi.car1:return"cinder-car-depart-sfx.mp3";case mi.carriage1:return"cinder-carriage-depart-sfx.mp3";case mi.rocket1:return"cinder-rocket-depart-sfx.mp3"}}},{key:"getTransformAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Spine(this.pumpkin,Fi.transform),framework.Actions.Func((function(){return t.pumpkin.visible=!1}))])}},{key:"getTransformBack",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Func((function(){return t.pumpkin.visible=!0})),framework.Actions.Spine(this.pumpkin,Fi.show),framework.Actions.Spine(this.selected,Fi.transform)]),framework.Actions.Func((function(){return t.selected.visible=!1}))])}},{key:"showSelected",value:function(){this.selected.visible=!0,this.selected.state.setAnimation(0,Oi.idle,!0)}},{key:"showPumpkin",value:function(){this.pumpkin.visible=!0,this.pumpkin.state.setAnimation(0,Oi.idle,!0)}},{key:"skip",value:function(){this.setSkinForType(this._choiceId),this.selected.visible=!0,this.selected.state.setAnimation(0,Oi.idle,!0)}},{key:"getRemoveAction",value:function(){return framework.Actions.Parallel([framework.Actions.Spine(this.selected,Oi.exit),new $.a(this.getDepartSFX(),S.a.C1,!1,this.diService)])}},{key:"getShowPumpkinAction",value:function(){var t=this,e=J[F.propDrop];return framework.Actions.Sequence([framework.Actions.Parallel([framework.Actions.Func((function(){return t.pumpkin.visible=!0})),Object(z.a)(this.pumpkin,Oi.show,!1,e.name,e.delay,this.diService)]),framework.Actions.Func((function(){return t.pumpkin.state.setAnimation(0,Oi.idle,!1)}))])}},{key:"getHidePumpkinAction",value:function(){var t=this;return framework.Actions.Sequence([framework.Actions.Spine(this.pumpkin,Oi.hide),framework.Actions.Func((function(){return t.pumpkin.visible=!0}))])}}]),n}($t);function Vi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}!function(t){t.hide="hide",t.show="show",t.idle="idle",t.exit="exit",t.appear="appear",t.transform="transform"}(Oi||(Oi={})),function(t){t.transform="transform",t.show="show"}(Fi||(Fi={}));var Li=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Vi()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e){var r;return v()(this,n),r=i.call(this,t,e),k()(U()(r),"seat1",void 0),k()(U()(r),"seat2",void 0),k()(U()(r),"seat3",void 0),r.seat1=Object(G.c)(r.view,"act2-prop1"),r.seat2=Object(G.c)(r.view,"act2-prop2"),r.seat3=Object(G.c)(r.view,"act2-prop3"),r.spines=[r.seat1,r.seat2,r.seat3],r.reset(),r}return g()(n,[{key:"setSkinForType",value:function(t){throw new Error("Method not implemented.")}},{key:"containerName",get:function(){return"ballroom-chairs"}}]),g()(n,[{key:"getShowAction",value:function(){var t=J[F.propDrop];return this.getShowAnimActionWithSFX(t.name,t.delay)}}]),n}($t);function Ei(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Ni=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ei()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(t,e,r,o,a){var s;return v()(this,n),s=i.call(this,t,e,o,a),k()(U()(s),"replayActHandler",void 0),s._replayStates=r,s.replayActHandler=new Lt(e,r,s.stateContext,U()(s),a,U()(s)),s}return g()(n,[{key:"init",value:function(){j()(C()(n.prototype),"init",this).call(this),this.replayActHandler.init()}},{key:"playFirstDialog",value:function(){this.replayActHandler.playFirstDialog()}},{key:"goTo",value:function(t){this.shouldEndDialog(t)?this.endDialog():this.replayActHandler.goTo(t)}},{key:"getEndOfActAction",value:function(){return this.replayActHandler.getEndOfActAction()}},{key:"endDialog",value:function(){console.log("replay is terminated"),this.runAction(this.replayActHandler.getEndDialogAction())}}]),n}(Ii);function Ki(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Hi=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ki()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"getReplayMediator",value:function(t,e){return new Ni(this.view,this.diService,t,e,this)}},{key:"getActMediator",value:function(t){return new Ii(this.view,this.diService,t,this)}},{key:"getStoryData",value:function(){return new Pi}},{key:"initProps",value:function(){j()(C()(n.prototype),"initProps",this).call(this),this.initCarriage(),this.initThrowingProp(),this.initDoorProp(),this.initBallRoomProp()}},{key:"initCarriage",value:function(){var t=new Bi(this.view,this.diService);this.diService.setDataWithKey(B.a.carriage,t),this.props.push(t)}},{key:"initThrowingProp",value:function(){var t=new Ft(this.view);this.diService.setDataWithKey(B.a.throwingProp,t),this.props.push(t)}},{key:"initDoorProp",value:function(){var t=new Vt(this.view,this.diService);this.diService.setDataWithKey(B.a.door,t),this.props.push(t)}},{key:"initBallRoomProp",value:function(){var t=new Li(this.view,this.diService);this.diService.setDataWithKey(B.a.ballroom,t),this.props.push(t)}},{key:"debugStartStory",value:function(){var t=new Map([[q.a.narrator,rt.c.dw],[q.a.cinderella,rt.c.arthur],[q.a.godmother,rt.c.muffy],[q.a.prince,rt.c.buster]]);this.startStory(t)}}]),n}(St);function Ui(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Wi=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Ui()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"getStoryMediator",value:function(){return new Hi(this.view,this.diService,this)}}]),n}(Ut.a),ji=function(){function t(e){v()(this,t),this.navigationService=e}return g()(t,[{key:"init",value:function(){this.navigationService.addSceneToMap(N.a.LrrhStage,jt),this.navigationService.addSceneToMap(N.a.Goldilocks,ve),this.navigationService.addSceneToMap(N.a.Cinderella,Wi),this.navigationService.addSceneToMap(N.a.Splash,K.b)}}]),t}(),qi=n(105);n(225);function Xi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Gi=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Xi()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){var t;v()(this,n),t=i.call(this),k()(U()(t),"frameCount",0),k()(U()(t),"framerateTimer",0),k()(U()(t),"fpsLabel",void 0),t.fpsLabel=document.createElement("div"),t.fpsLabel.id="framerate";var e=document.getElementById("stage");return e.parentNode.insertBefore(t.fpsLabel,e),t.fpsLabel.innerHTML="FPS: 00.000",t}return g()(n,[{key:"_updateImpl",value:function(t){if(this.frameCount++,this.framerateTimer+=t,this.framerateTimer>=1){var e=1/this.framerateTimer*this.frameCount;this.fpsLabel.innerHTML="FPS: "+e.toFixed(3),this.framerateTimer=0,this.frameCount=0}}}]),n}(framework.Script),zi=function(){function t(e){v()(this,t),this.srApp=e,k()(this,"captionsElement",null),k()(this,"captionText",""),this.captionsElement=document.getElementById("captions"),this.init()}return g()(t,[{key:"init",value:function(){var t=this,e=this.srApp.state.captionsMuted.value||!1;console.log("muted value",e),this.updateMutedState(e),this.srApp.state.captionsMuted.subscribe((function(e){t.updateMutedState(e)}))}},{key:"updateMutedState",value:function(t){this.captionsElement.hidden=t}},{key:"displayCaption",value:function(t){t&&(this.captionText=t),this.captionsElement.innerHTML=this.captionText}},{key:"clearCaptions",value:function(){this.captionText="",this.captionsElement.innerHTML=this.captionText}}]),t}();function Yi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}var Zi,Ji=function(t){x()(n,t);var e,i=(e=n,function(){var t,i=C()(e);if(Yi()){var n=C()(this).constructor;t=Reflect.construct(i,arguments,n)}else t=i.apply(this,arguments);return _()(this,t)});function n(){return v()(this,n),i.apply(this,arguments)}return g()(n,[{key:"storyFlavor",get:function(){switch(this.buildInfo.flavor){case"lrrh":return K.a.lrrh;case"goldilocks":return K.a.goldilocks;case"cinderella":return K.a.cinderella}}},{key:"storyPrefix",get:function(){switch(this.buildInfo.flavor){case"lrrh":return"lrrh";case"goldilocks":return"gl";case"cinderella":return"cinder"}}},{key:"appName",get:function(){switch(this.buildInfo.flavor){case"lrrh":return"little-red-riding-hood";case"goldilocks":return"goldilocks";case"cinderella":return"cinderella"}}}]),n}(function(){function t(e){v()(this,t),k()(this,"buildInfo",{env:"debug",version:"",aestTime:"",nyTime:"",shortRev:""}),this.buildInfo=Object.extend(this.buildInfo,e),this.printToConsole()}return g()(t,[{key:"version",value:function(){return this.buildInfo.version}},{key:"aestTime",value:function(){return this.buildInfo.aestTime}},{key:"nyTime",value:function(){return this.buildInfo.nyTime}},{key:"shortRev",value:function(){return this.buildInfo.shortRev}},{key:"environment",get:function(){return this.buildInfo.env}},{key:"isDebug",get:function(){return"dev"===this.environment}}]),g()(t,[{key:"printToConsole",value:function(){var t=this;console.log("***"),this.buildInfo.forIn((function(e,i){t.printDebugKeyValue(i,e)})),console.log("***")}},{key:"printDebugKeyValue",value:function(t,e){return t+"="+e}}]),t}()),$i=function(){function t(e,i){v()(this,t),this.app=e,this.diService=i,k()(this,"implementation",void 0)}return g()(t,[{key:"buildInfoService",get:function(){return this.diService.get(B.b.BuildInfoService)}},{key:"isReplay",get:function(){return this.diService.getDataByKey(B.a.isReplay)}}]),g()(t,[{key:"init",value:function(){var t=this;this.implementation=this.app.getPlugin("GoogleAnalytics"),this.send(Zi.startGame),window.onbeforeunload=function(){t.send(Zi.endGame)}}},{key:"sendEventCharacterSelect",value:function(t,e){this.send(Zi.characterRoles,t+"/"+e)}},{key:"sendEventNarrativeInteraction",value:function(t){this.send(Zi.narrativeInteraction,t)}},{key:"sendEventDynamicInteraction",value:function(t,e){var i=t+e?"/"+e:"";this.isReplay&&(i="replay/"+i),this.send(Zi.dynamicInteraction,i)}},{key:"sendEventEndMenuChoice",value:function(t){this.send(Zi.endMenuChoice,t)}},{key:"sendEventPauseMenuChoice",value:function(t){this.send(Zi.pauseMenuChoice,t)}},{key:"sendEventStoryPause",value:function(){this.send(Zi.storyPause)}},{key:"sendEventStartStoryAct",value:function(t){this.send(Zi.startStoryAct,t.toString())}},{key:"send",value:function(t,e,i){if(!this.implementation)throw"Analytics service has not been initialized.";console.log("Analytics::send::",t,e),this.implementation.event(this.buildInfoService.appName,t,e,i)}}]),t}();!function(t){t.startGame="startGame",t.endGame="endGame",t.characterRoles="character_roles",t.narrativeInteraction="narrative_interaction",t.dynamicInteraction="dynamic_interaction",t.endMenuChoice="end_menu_choice",t.pauseMenuChoice="pause_menu_choice",t.storyPause="story_pause",t.startStoryAct="start_story_act"}(Zi||(Zi={}));var Qi=n(265),tn=n(162),en=function(){function t(){var e=this;v()(this,t),k()(this,"canvas",void 0),k()(this,"springrollApp",void 0),k()(this,"pixiApp",void 0),k()(this,"sizeManager",void 0),k()(this,"viewFactory",void 0),k()(this,"rootMediator",void 0),k()(this,"navigationService",void 0),k()(this,"navigationServiceMapping",void 0),k()(this,"soundService",void 0),k()(this,"diService",void 0),k()(this,"loadingService",void 0),k()(this,"gameLoader",new r.Loader),k()(this,"width",1555),k()(this,"height",800),k()(this,"safeWidth",1024),k()(this,"safeHeight",768),k()(this,"cameraService",void 0),k()(this,"debugService",void 0),k()(this,"buildInfoService",void 0),k()(this,"captionService",void 0),k()(this,"analyticsService",void 0),k()(this,"update",(function(t){if(!e.isPaused){var i=.001*r.Ticker.shared.elapsedMS;e._shouldUpdate&&o.update(),e.rootMediator&&e.rootMediator.update(i)}})),k()(this,"_shouldUpdate",!0),k()(this,"onResize",(function(t,e){})),k()(this,"onAppReadyChanged",(function(t,e){})),k()(this,"isPaused",!1),k()(this,"pauseGame",(function(){console.log("paused"),e.isPaused=!0,e.soundService.pauseAll(),r.spine.Spine.globalAutoUpdate=!1,e.pixiApp.stop(),e.springrollApp.state.pause.value=!0})),k()(this,"resumeGame",(function(){console.log("unpaused"),e.isPaused=!1,e.soundService.resumeAll(),r.spine.Spine.globalAutoUpdate=!0,e.pixiApp.start(),e.springrollApp.state.pause.value=!1})),k()(this,"onMusicVolumeChanged",(function(t,i){0==t?e.soundService.muteMusic():e.soundService.unmuteMusic()})),k()(this,"onSFXVolumeChanged",(function(t,i){0==t?e.soundService.muteSFX():e.soundService.unmuteSFX()})),k()(this,"onVOVolumeChanged",(function(t,i){console.log("onVoVolumeChanged",t,i),0==t?e.soundService.muteVO():e.soundService.unmuteVO()}))}return g()(t,[{key:"init",value:function(){var t=this;this.canvas=this.findCanvas(),this.springrollApp=this.createSpringrollApp(),w.a.uses(new Qi.a),this.pixiApp=this.createPixiApp(this.canvas),this.sizeManager=this.createSizeManager(this.pixiApp,this.onResize),framework.Actions.register("SFX",(function(t,e,i,n){return new $.a(t,e,i,n)})),this.viewFactory=this.createViewFactory(),this.createRootMediator(),this.initDependency(),this.pixiApp.stage.addChild(this.rootMediator.view),this.initAppCallbacks(),this.addVisibilityChangeListener(),this.initialiseGameVolume(),this.preload((function(){t.showFirstScene()}))}},{key:"addVisibilityChangeListener",value:function(){var t=this;tn(window).focus((function(){t.springrollApp.state.pause.value=!1})).blur((function(){t.springrollApp.state.pause.value=!0})),this.springrollApp.state.pause.subscribe((function(e,i){e&&!i?t.pauseGame():!e&&i&&t.resumeGame()}))}},{key:"initDependency",value:function(){this.diService=new L,this.diService.setDataWithKey(B.a.game,this),this.diService.setDataWithKey(B.a.gameWidth,this.width),this.diService.setDataWithKey(B.a.gameHeight,this.height),this.diService.setDataWithKey(B.a.gameSafeWidth,this.safeWidth),this.diService.setDataWithKey(B.a.gameSafeHeight,this.safeHeight),this.diService.setDataWithKey(B.a.app,this.pixiApp),this.loadingService=new E.a(this.gameLoader),this.diService.register(B.b.LoadingService,this.loadingService),this.soundService=new S.b(this.diService),this.diService.register(B.b.SoundService,this.soundService),this.navigationService=new V(this.rootMediator,this.diService),this.diService.register(B.b.NavigationService,this.navigationService),this.cameraService=new qi.b(this.pixiApp,this.rootMediator.view,this.diService),this.diService.register(B.b.CameraService,this.cameraService),this.captionService=new zi(this.springrollApp),this.diService.register(B.b.CaptionService,this.captionService),this.navigationServiceMapping=new ji(this.navigationService),this.navigationServiceMapping.init()}},{key:"preload",value:function(t){var e=this;({buildInfo:"./assets/tools/buildInfo.json"}).forIn((function(t,i){e.gameLoader.add(i,t)})),this.gameLoader.load((function(i,n){var r=n.buildInfo.data;e.buildInfoService=new Ji(r),e.buildInfoService.isDebug&&e.debugAddNavigationToWindow(),e.diService.register(B.b.BuildInfoService,e.buildInfoService),e.initAnalytics(),t()}))}},{key:"initAnalytics",value:function(){this.analyticsService=new $i(this.springrollApp,this.diService),this.analyticsService.init(),this.diService.register(B.b.AnalyticsService,this.analyticsService)}},{key:"createRootMediator",value:function(){var t=new framework.ContainerView;this.rootMediator=new M(t)}},{key:"showFirstScene",value:function(){this.navigationService.goToSceneWithoutLoadScreen(N.a.Splash)}},{key:"debugAddNavigationToWindow",value:function(){window.sounds=this.soundService,this.debugService=new Gi,this.rootMediator.scripts.addScript(this.debugService)}},{key:"destroy",value:function(){this.buildInfoService.isDebug&&this.rootMediator.scripts.removeScript(this.debugService),this.deinitAppCallbacks(),this.destroyRootMediator(),this.destroyViewFactory(),this.destroySizeManager(),this.destroyPixiApp(),this.destroySpringrollApp()}},{key:"createView",value:function(t){return this.viewFactory.create(t)}},{key:"createChildViews",value:function(t,e,i){return this.viewFactory.createChildren(t,e,i)}},{key:"getCache",value:function(t){return r.utils.TextureCache[t]}},{key:"getConfig",value:function(){return{}}},{key:"isDebugMode",value:function(){return!1}},{key:"isWebGL",value:function(){return this.pixiApp.renderer.type==r.RENDERER_TYPE.WEBGL}},{key:"getRenderer",value:function(){return this.pixiApp.renderer}},{key:"getCanvasWidth",value:function(){return this.canvas.width}},{key:"getCanvasHeight",value:function(){return this.canvas.height}},{key:"playAnimation",value:function(t,e,i,n){}},{key:"stopAnimation",value:function(t,e){}},{key:"playSound",value:function(t,e){}},{key:"canPlayVO",value:function(){return!0}},{key:"isPlayingVO",value:function(t){return this.soundService.isPlayingVo}},{key:"playVO",value:function(t,e,i){try{this.soundService.playVo(t,e)}catch(t){console.error(t),e()}}},{key:"stopVO",value:function(){this.soundService.stopVo()}},{key:"offPaused",value:function(t){}},{key:"offResumed",value:function(t){}},{key:"offUpdate",value:function(t){}},{key:"onPaused",value:function(t){}},{key:"onResumed",value:function(t){}},{key:"onUpdate",value:function(t){}},{key:"initialiseGameVolume",value:function(){var t=this.springrollApp.state.voVolume.value,e=this.springrollApp.state.sfxVolume.value,i=this.springrollApp.state.musicVolume.value;t>=0&&this.onVOVolumeChanged(t,0),e>=0&&this.onSFXVolumeChanged(e,0),i>=0&&this.onMusicVolumeChanged(i,0)}},{key:"findCanvas",value:function(){return document.getElementById("stage")}},{key:"createSpringrollApp",value:function(){return new w.a({features:{sound:!1,sfx:!0,vo:!0,music:!0,captions:!0,soundVolume:!1,musicVolume:!1,voVolume:!1,sfxVolume:!1,pointerSize:!1,controlSensitivity:!1,buttonSize:!1,removableLayers:!1,hudPosition:!1}})}},{key:"destroySpringrollApp",value:function(){this.springrollApp&&(this.springrollApp=null)}},{key:"createPixiApp",value:function(t){return new r.Application({view:t,width:this.width,height:this.height})}},{key:"destroyPixiApp",value:function(){this.pixiApp&&(this.pixiApp.destroy(!1,{children:!0,texture:!0,baseTexture:!0}),this.pixiApp=null)}},{key:"createSizeManager",value:function(t,e){var i={pixiApp:t,width:this.width,height:this.height,safeWidth:this.safeWidth,safeHeight:this.safeHeight,resizeCallback:e};return new A(i)}},{key:"destroySizeManager",value:function(){this.sizeManager&&(this.sizeManager.destroy(),this.sizeManager=null)}},{key:"createViewFactory",value:function(){return new framework.ViewFactory(this.gameLoader)}},{key:"destroyViewFactory",value:function(){this.viewFactory&&(this.viewFactory=null)}},{key:"destroyRootMediator",value:function(){this.rootMediator&&(this.rootMediator.destroy(),this.rootMediator=null)}},{key:"initAppCallbacks",value:function(){this.springrollApp.state.ready.subscribe(this.onAppReadyChanged),this.springrollApp.state.musicVolume.subscribe(this.onMusicVolumeChanged),this.springrollApp.state.sfxVolume.subscribe(this.onSFXVolumeChanged),this.springrollApp.state.voVolume.subscribe(this.onVOVolumeChanged),this.pixiApp.ticker.add(this.update)}},{key:"deinitAppCallbacks",value:function(){this.springrollApp.state.ready.unsubscribe(this.onAppReadyChanged),this.springrollApp.state.musicVolume.unsubscribe(this.onMusicVolumeChanged),this.springrollApp.state.sfxVolume.unsubscribe(this.onSFXVolumeChanged),this.springrollApp.state.voVolume.unsubscribe(this.onVOVolumeChanged),this.pixiApp.ticker.remove(this.update)}},{key:"shouldUpdate",get:function(){return this._shouldUpdate},set:function(t){this._shouldUpdate=t}}]),t}();if(!window.app){var nn=new en;window.app=nn,nn.init()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL1NlcnZpY2VzL1NlcnZpY2VOYW1lLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9jaGFyYWN0ZXJzL1JvbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL2NoYXJhY3RlcnMvQ29zdHVtZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3V0aWxzL1V0aWxzLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jb21tb24vc3RhdGVzL1N0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL2NoYXJhY3RlcnMvQmFzZUNoYXJhY3Rlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vY2hhcmFjdGVycy9EaXJlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NvbW1vbi9zdGF0ZXMvU2VsZWN0aW9uU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL3BvcG92ZXJzL0ljb25TZWxlY3Rpb25Qb3BPdmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9Hb2xkaWxvY2tzRW50cmFuY2VTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvR2FyZGVuUHJvcFNlbGVjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9Cb3dsUHJvcFNlbGVjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9TZWVCZWFySG91c2VTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvV2Fsa1N0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9Hb2xkaWxvY2tzV2VhdGhlclNlbGVjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9TdW5IYXRTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvU2VhdFByb3BTZWxlY3Rpb25TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvU2VhdEJyZWFrU2VsZWN0aW9uU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2dvbGRpbG9ja3Mvc3RhdGVzL1NlYXRpbmdTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvQmVkUHJvcFNlbGVjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9MYXlpbmdTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvTGF5aW5nRnJvbVN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9DYXVnaHRSZXNwb25zZVNlbGVjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9Fc2NhcGVTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvQmVhck5vdGljZUJyb2tlbkNoYWlyU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2dvbGRpbG9ja3Mvc3RhdGVzL0JlYXJzTm90aWNlR29sZGlsb2Nrc1N0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9FYXRGb29kU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2dvbGRpbG9ja3Mvc3RhdGVzL1dhbGtUaHJvdWdoRG9vclN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9CYWJ5QmVhck5vdGljaW5nU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2dvbGRpbG9ja3Mvc3RhdGVzL1Nub3JpbmdTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvTGF5aW5nRmlyc3RTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvTGF5aW5nTGFzdFN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9CYWJ5QmVhck5vdGljaW5nQm93bFN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9TZWF0VHJhaW5TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZmFjdG9yaWVzL0dvbGRpbG9ja3NEaWFsb2dTdGF0ZUZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2dvbGRpbG9ja3Mvc3RhdGVzL1RhbGxDaGFpclN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jb21tb24vc3RhdGVzL1dlYXRoZXJTZWxlY3Rpb25TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvQWN0aW9uTW92ZW1lbnRTZWxlY3Rpb25TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvRGVjb3JzUHJvcFNlbGVjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9scnJoL3N0YXRlcy9MUlJIRW50cmFuY2VTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvV29sZkVudHJhbmNlU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL0Jhc2tldFByb3BTZWxlY3Rpb25TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvVW1icmVsbGFTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvQWN0MkludHJvU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL1dvbGZIb3VzZUVudHJhbmNlVk9TZWxlY3Rpb25TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvV29sZkhvdXNlRW50cmFuY2VTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvUHJpc29uU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL0dyYW5ueVdhbGtpbmdTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvV29sZkRpc2d1aXNlU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL0Rvb3JCZWxsU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL0xSUkhIb3VzZUVudHJhbmNlU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL0FjdDNBY3Rpb25TZWxlY3Rpb25TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvR3Jhbm55RGlzZ3Vpc2VTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvVGhyb3dpbmdQcm9wU2VsZWN0aW9uU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL1Rocm93aW5nUHJvcEFjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9scnJoL3N0YXRlcy9Xb2xmSG91c2VFeGl0U3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL1dvbGZSZW1vdmVHbGFzc2VzU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL1dvbGZSZW1vdmVIYWlyU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL1dvbGZSZXZlYWxTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvV29sZk1vdmVUb0Jhc2tldFN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9scnJoL3N0YXRlcy9MUlJIR29Ub0dyYW5ueXNTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvV29sZkdvVG9HcmFubnlzU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL0dyYW5ueUFmcmFpZFN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9scnJoL3N0YXRlcy9MUlJIQW5kR3Jhbm55V2Fsa2luZ1N0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9mYWN0b3JpZXMvTFJSSERpYWxvZ1N0YXRlRmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvTFJSSEFuZEdyYW5ueUNlbGVicmF0aW9uU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NvdW5kU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcG9wb3ZlcnMvUHJvcFNlbGVjdGlvblBvcE92ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3V0aWxzL1NGWEFjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcHJvcHMvQmFja2Ryb3AudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3V0aWxzL0FuaW1hdGlvbkFjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2dvbGRpbG9ja3MvR29sZGlsb2Nrc1N0b3J5RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcG9wb3ZlcnMvU2hhZG93ZWRTcGluZVBvcE92ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvTFJSSFN0b3J5RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3ZpZXdzL3V0aWxzL0ZhY3RvcnlIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvdHMvY29yZS9tZWRpYXRvcnMvU2NlbmVNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vY2hhcmFjdGVycy9TaGFkb3dTaGFkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3R3aW5lL1R3aW5lU2NyaXB0LnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zcGxhc2gvU3BsYXNoTWVkaWF0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NvbW1vbi9DaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9TY2VuZU5hbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NvbW1vbi9zdGF0ZXMvU0ZYU2VsZWN0aW9uU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL1NlcnZpY2VzL0NhbWVyYVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NvbW1vbi9TdG9yeURhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL3BvcG92ZXJzL1NlbGVjdGlvblBvcE92ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NvbW1vbi9zdGF0ZXMvQWN0MVNldHVwU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NvbW1vbi9BY3RNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvY29tbW9uL1N0YWdlTWVkaWF0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3R3aW5lL1R3aW5lUGFyc2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi90d2luZS9EaWFsb2dMaW5lL0RpYWxvZ0xpbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3R3aW5lL0RpYWxvZ0xpbmUvQ3VlRGlhbG9nTGluZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcG9wb3ZlcnMvQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nUmVwbGF5LnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi90d2luZS9EaWFsb2dMaW5lL0Nob2ljZURpYWxvZ0xpbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3R3aW5lL0RpYWxvZ0xpbmUvQ3VlQ2hvaWNlRGlhbG9nUmVwbGF5LnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi90d2luZS9EaWFsb2dMaW5lL0N1ZUNob2ljZURpYWxvZ0xpbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2ZhY3Rvcmllcy9EaWFsb2dTdGF0ZUZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay90cy9jb3JlL1ZpZXcvU2xpY2VTcHJpdGVWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvdHMvY29yZS9tZWRpYXRvcnMvTWVkaWF0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvc3RhdGVzL0FjdGlvbk1vdmVtZW50U3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9zY3JpcHRzL3ZpZXcvRHJhZ1ZpZXdTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay90cy9jb3JlL1ZpZXcvU2xpY2VCdXR0b25WaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvdHMvY29yZS9WaWV3L0JpdG1hcFRleHRWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9Mb2FkaW5nU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcG9wb3ZlcnMvU3BsYXNoU2NyZWVuUG9wT3Zlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcG9wb3ZlcnMvQmFja2dyb3VuZGVkUG9wT3Zlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9zdGF0ZXMvQWN0M0FjdGlvbk1vdmVtZW50U3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NvbW1vbi9zdGF0ZXMvU3RhdGVDb250ZXh0LnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9wb3BvdmVycy9Qcm9tcHRQb3BPdmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi91dGlscy9WT0luc3RydWN0aW9uQWN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jb21tb24vU3RhZ2VUcmFuc2l0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9QYXJlbnRCZWFyRW50cmFuY2VTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvQWN0M0ludHJvU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2dvbGRpbG9ja3Mvc3RhdGVzL0JlYXJOb3RpY2VCZWRTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9zdGF0ZXMvV2Fsa1RvRG9vclN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL3N0YXRlcy9UYXN0aW5nU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvc3RhdGVzL0NpbmRlcmVsbGFFbnRyYW5jZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL21peGlucy9BcHBlbmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9taXhpbnMvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9taXhpbnMvQm9vbGVhbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL21peGlucy9IVE1MQXVkaW9FbGVtZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvbWl4aW5zL0hUTUxDYW52YXNFbGVtZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvbWl4aW5zL01hdGguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9taXhpbnMvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvbWl4aW5zL09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL21peGlucy9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy91dGlscy9CYXNlRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3V0aWxzL0NvbG91clV0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdXRpbHMvRGV2aWNlVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy91dGlscy9HZW5lcmFsVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy91dGlscy9LZXlib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3V0aWxzL09iamVjdFBvb2wuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy91dGlscy9XaW5kb3dVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL2F1ZGlvL0F1ZGlvVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9tYXRoL1ZlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL21hdGgvQmV6aWVyQ3VydmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9tYXRoL0JlemllckN1cnZlQXBwcm94LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvbWF0aC9MaW5lYXJDdXJ2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL21hdGgvTWluTWF4LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvYWN0aW9ucy9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9hY3Rpb25zL0FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9hY3Rpb25zL0Jsb2NraW5nRnVuY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL2FjdGlvbnMvRGVsYXlBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9hY3Rpb25zL1ZPQWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvYWN0aW9ucy9Ud2VlbkFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL2FjdGlvbnMvQW5pbWF0ZVNwcml0ZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL2FjdGlvbnMvQmxvY2tpbmdBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9hY3Rpb25zL0NvdW50ZXJBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9hY3Rpb25zL0Z1bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9hY3Rpb25zL1BhcmFsbGVsQWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvYWN0aW9ucy9QYXJ0aWNsZXNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9hY3Rpb25zL1JlcGVhdEFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL2FjdGlvbnMvU2VxdWVuY2VBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9hY3Rpb25zL1JhbmRvbURlbGF5QWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvYWN0aW9ucy9TcGluZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL2FjdGlvbnMvbWFuYWdlci9BY3Rpb25JbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL2FjdGlvbnMvbWFuYWdlci9BY3Rpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvZXh0ZW5zaW9ucy9SZWN0YW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy92aWV3cy9oaXRBcmVhcy9UcmFuc3BhcmVuY3lIaXRBcmVhLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvdXRpbHMvVmlld1V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvU3ByaXRlVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3ZpZXdzL0JpbmFyeVNwcml0ZVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy92aWV3cy9CdXR0b25WaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvQ2lyY2xlVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3ZpZXdzL0R1YWxTcHJpdGVWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvS2V5Ym9hcmRLZXlWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvUGFydGljbGVzVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3ZpZXdzL1BpZVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy92aWV3cy9QcmltaXRpdmVWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvUmVjdGFuZ2xlVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3ZpZXdzL1NjcmVlbnNob3RWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvU3BpbmVWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvU3ByaXRlU2hlZXRWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvVGV4dFZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy92aWV3cy9UaWxlU3ByaXRlVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3ZpZXdzL2ZhY3Rvcmllcy9WaWV3RmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3NjcmlwdHMvU2NyaXB0LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvc2NyaXB0cy9Db21wb3NpdGVTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9zY3JpcHRzL3ZpZXcvdXRpbHMvVmlld1RyYW5zZm9ybWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvc2NyaXB0cy92aWV3L3V0aWxzL1Bvc2l0aW9uVmlld1RyYW5zZm9ybWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvc2NyaXB0cy92aWV3L3V0aWxzL1JvdGF0aW9uVmlld1RyYW5zZm9ybWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvc2NyaXB0cy92aWV3L3V0aWxzL051bGxWaWV3VHJhbnNmb3JtZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9zY3JpcHRzL3ZpZXcvVmlld1NjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3NjcmlwdHMvdmlldy9BbGlnblZpZXdTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9zY3JpcHRzL3ZpZXcvQm91bmRzT3ZlcmxhcFNjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2pzL3NjcmlwdHMvdmlldy9DYW1lcmFTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9zY3JpcHRzL3ZpZXcvQ2xpY2tTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9zY3JpcHRzL3ZpZXcvRmFjZVZpZXdTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9zY3JpcHRzL3ZpZXcvSG92ZXJTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy9zY3JpcHRzL3ZpZXcvU3RpY2t5RHJhZ1ZpZXdTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9saWJJbXBvcnRzLnRzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvbWl4aW5zL01pc2MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9qcy92aWV3cy9Db250YWluZXJWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvR3JhcGhpY3NWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvQ3VydmVWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvanMvdmlld3MvTGluZVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay90cy9jb3JlL1NpemVNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvdHMvY29yZS9tZWRpYXRvcnMvUm9vdE1lZGlhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9TYXZlZERhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NhdmVTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi91dGlscy9EZWxheWVkU0ZYLnRzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9OYXZpZ2F0aW9uU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9wcm9wcy9Qcmlzb25Qcm9wLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9jaGFyYWN0ZXJzL0xSUkhDaGFyYWN0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2xycmgvTFJSSEFjdE1lZGlhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9wcm9wcy9BYnN0cmFjdFN0YWdlUHJvcHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL3Byb3BzL3NjZW5lUHJvcHMvRGlzY29CYWxsLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9wcm9wcy9zY2VuZVByb3BzL0N1cnRhaW5zLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9wcm9wcy9zY2VuZVByb3BzL0Jvb21Cb3gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NvbW1vbi9Mb2NhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jb21tb24vU3RvcnlNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcHJvcHMvV2VhdGhlclByb3BzLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9wcm9wcy9zY2VuZVByb3BzL1N0YWdlUHJvcHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL3Byb3BzL1Rocm93aW5nUHJvcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcHJvcHMvRm9yZXN0UHJvcHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL3Byb3BzL0Rvb3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NvbW1vbi9SZXBsYXlBY3RIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9scnJoL0xSUkhSZXBsYXlBY3RNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9MUlJIU3RvcnlNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvbHJyaC9MUlJIU3RhZ2VNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vY2hhcmFjdGVycy9Hb2xkaWxvY2tzQ2hhcmFjdGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL0dvbGRpbG9ja3NBY3RNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcHJvcHMvR2FyZGVuUHJvcHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL3Byb3BzL0dyb3VwUHJvcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcHJvcHMvQm93bFByb3AudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL3Byb3BzL0JlYXJGdXJuaXR1cmVQcm9wLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9wcm9wcy9CZWRQcm9wLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9nb2xkaWxvY2tzL0dvbGRpbG9ja3NSZXBsYXlBY3RNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9Hb2xkaWxvY2tzU3RvcnlNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvZ29sZGlsb2Nrcy9Hb2xkaWxvY2tzU3RhZ2VNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvY2luZGVyZWxsYS9zdGF0ZXMvR29kbW90aGVyU2VsZWN0aW9uU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvc3RhdGVzL0NpbmRlcmVsbGFTZWxlY3Rpb25TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvY2luZGVyZWxsYS9zdGF0ZXMvU2hvZVNlbGVjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9DYXJyaWFnZVNlbGVjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9Hb2RNb3RoZXJPdXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvc3RhdGVzL0NpbmRlcmVsbGFHZXRzSW5UaGVDYXJyaWFnZVN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9BY3QySW50cm9TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvY2luZGVyZWxsYS9zdGF0ZXMvQWN0aW9uTW92ZW1lbnRTZWxlY3Rpb25TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvY2luZGVyZWxsYS9zdGF0ZXMvQ2luZGVyZWxsYUFuc3dlclNlbGVjdGlvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9CYWNrZ3JvdW5kU2VsZWN0aW9uU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvc3RhdGVzL0RhbmNlU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvc3RhdGVzL0dvZG1vdGhlckdob3N0U3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvc3RhdGVzL0xvb3NlU2hvZVN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9NaWRuaWdodFRvd2VTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvY2luZGVyZWxsYS9zdGF0ZXMvVHJhbnNmb3JtQmFja1N0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9DaW5kZXJlbGxhTW9wU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvc3RhdGVzL1ByaW5jZUF0RG9vclN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9Hb2Rtb3RoZXJHaG9zdE91dFN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9XYWxrU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvc3RhdGVzL1RyeU9uU2hvZVN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9XYWxrVG9Eb29yU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2ZhY3Rvcmllcy9DaW5kZXJlbGxhRGlhbG9nU3RhdGVGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL3N0YXRlcy9Mb29rQXJvdW5kU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvQ2luZGVyZWxsYVN0b3J5RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vY2hhcmFjdGVycy9DaW5kZXJlbGxhQ2hhcmFjdGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL0NpbmRlcmVsbGFBY3RNZWRpYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vc3RhZ2UvcHJvcHMvQ2FycmlhZ2VQcm9wLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9wcm9wcy9CYWxsUm9vbVByb3AudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL3N0YWdlL2NpbmRlcmVsbGEvQ2luZGVyZWxsYVJlcGxheUFjdE1lZGlhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL0NpbmRlcmVsbGFTdG9yeU1lZGlhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9zdGFnZS9jaW5kZXJlbGxhL0NpbmRlcmVsbGFTdGFnZU1lZGlhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHBsaWNhdGlvbi9TZXJ2aWNlcy9OYXZpZ2F0aW9uU2VydmljZU1hcHBpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL1NlcnZpY2VzL0RlYnVnU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwbGljYXRpb24vU2VydmljZXMvQ2FwdGlvblNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL1NlcnZpY2VzL0FuYWx5dGljc1NlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL1NlcnZpY2VzL0FydGh1ckJ1aWxkSW5mb1NlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0J1aWxkSW5mb1NlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL0dhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGxpY2F0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiMCIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiU2VydmljZU5hbWUiLCJEYXRhTmFtZSIsIlJvbGUiLCJDb3N0dW1lcyIsIlVtYnJlbGxhQ29zdHVtZSIsImNvc3R1bWVzIiwiTWFwIiwibGl0dGxlUmVkSG9vZCIsIndvbGYiLCJ3b2ZsdGVldGgiLCJjb3dib3kiLCJncmFuZG1hIiwibmFycmF0b3IiLCJwaXJhdGUiLCJhc3Ryb25hdXQiLCJjaW5kZXJlbGxhIiwiZmFpcnlnb2Rtb3RoZXIiLCJnb2xkaXJvY2tzIiwibW92aWVzdGFyIiwicHJpbmNlY2hhcm1pbmciLCJzdXBlcmhlcm9ncmFuZG1hIiwia2FyYXRlZ3JhbmRtYSIsInB1cHBhYmVhciIsIm11bW1hYmVhciIsImdvbGRpbG9ja3MiLCJnb2xkaWZpc2giLCJiYWJ5YmVhciIsInByaW5jZW1lZ2FzdGFyIiwicHJpbmNlYm90IiwiaW52ZW50b3IiLCJnbGFzc3NsaXBwZXJzIiwic25lYWtlcnMiLCJzcGFjZWJvb3RzIiwibW9wIiwibm9uZSIsImJhc2tldCIsInRvb2xib3giLCJ0cmVhc3VyZWNoZXN0IiwiZmluZENoaWxkQnlOYW1lIiwidmlldyIsImZyYW1ld29yayIsIkNvbnRhaW5lclZpZXciLCJnZXRDaGlsZEJ5TmFtZVJlY3Vyc2l2ZSIsImNyZWF0ZUhvdmVyRWZmZXQiLCJHbG93RmlsdGVyIiwiZGlzdGFuY2UiLCJvdXRlclN0cmVuZ3RoIiwiaW5uZXJTdHJlbmd0aCIsImNvbG9yIiwicXVhbGl0eSIsImFwcGx5TGlnaHRNYXAiLCJmYWRlSW4iLCJmaWx0ZXJUZXh0dXJlIiwiYWxwaGEiLCJmaWx0ZXIiLCJTaW1wbGVMaWdodG1hcEZpbHRlciIsInRleHR1cmUiLCJmaWx0ZXJzIiwiU3RhdGUiLCJTY3JpcHQiLCJTdGFnZVN0YXRlIiwiZGlhbG9nIiwiZGlTZXJ2aWNlIiwidGhpcyIsImdldERhdGFCeUtleSIsIlN0YWdlU3RhdGVEZWxlZ2F0ZSIsIlNlbGVjdGlvblBvcE92ZXJEZWxlZ2F0ZSIsIkFjdGlvbk1hbmFnZXJEZWxlZ2F0ZSIsIkludGVyYWN0aW9uSGFuZGxlciIsImNoYXJhY3RlcnMiLCJwYXVzZUJ1dHRvbiIsInNldERhdGFXaXRoS2V5IiwiRGlhbG9nTGluZURlbGVnYXRlIiwidmlzaWJsZSIsInBsYXlEaWFsb2ciLCJzdGFnZVN0YXRlRGVsZWdhdGUiLCJvblN0YXRlVGVybWluYXRlZCIsImdldFJlcGxheSIsInNraXAiLCJzZXRDaGFyYWN0ZXJzVG9JZGxlIiwiY2FuY2VsIiwic2hvd0NhcHRpb25zIiwiZm9yRWFjaCIsInBsYXlJZGxlIiwiU291bmRTZXJ2aWNlIiwic3RvcFNvdW5kIiwiQ2hhcmFjdGVyVHlwZSIsIkFuaW1hdGlvbnMiLCJNb29kIiwiQ2hhcmFjdGVyUG9zaXRpb24iLCJCYXNlQ2hhcmFjdGVyIiwiY2hhcmFjdGVyVHlwZSIsIm5ldXRyYWwiLCJzdGFuZGluZyIsIl9zcGluZSIsIl9zbG90cyIsInNwaW5lRGF0YSIsInNsb3RzIiwic2V0U2tpbkJ5TmFtZSIsInJlbW92ZUNvc3R1bWUiLCJzZXRTaGFkb3ciLCJfcm9sZSIsInYiLCJfbW9vZCIsInNsb3QiLCJza2VsZXRvbiIsInNldEF0dGFjaG1lbnQiLCJza2luTmFtZSIsInNldFNraW4iLCJ0YWxrIiwic2lsbHkiLCJ0YWxrc2lsbHkiLCJhbmdyeSIsInRhbGthbmdyeSIsInNjYXJlZCIsInNoYWtlIiwic3RhdGUiLCJzZXRBbmltYXRpb24iLCJ0YWxrQW5pbWF0aW9uIiwiY2hhcmFjdGVyUG9zaXRpb24iLCJpZGxlQW5pbWF0aW9uIiwiQWN0aW9ucyIsIlNwaW5lIiwic2VsZWN0IiwiU2VxdWVuY2UiLCJoaWRlRG93biIsIkZ1bmMiLCJoaWRlIiwiUGFyYWxsZWwiLCJzaG93IiwiZ2V0UmlzZVVwQWN0aW9uIiwicmlzZVVwIiwiU2hhZG93U2hhZGVyIiwiUElYSSIsIlBvaW50IiwiZ2xvYmFsUG9zIiwiVmVjdG9yIiwiZ2V0R2xvYmFsUG9zIiwidW5pZm9ybXMiLCJmbG9vclkiLCJ5IiwiYXBwV2lkdGgiLCJnYW1lV2lkdGgiLCJmYWN0b3IiLCJ4IiwiZGVsdGEiLCJ1cGRhdGVTaGFkb3dQb3NpdGlvbiIsImRpcmVjdGlvbiIsInNjYWxlIiwiX2NoYXJhY3RlclBvc2l0aW9uIiwiYW5pbWF0aW9uTmFtZSIsImdldE1vb2RBbmltYXRpb24iLCJyb2xlIiwibmFycmF0ZSIsInNlYXRpbmciLCJ0YWxrU2VhdGVkIiwibGF5aW5nIiwidGFsa0xheWluZyIsInNub3JpbmciLCJpZGxlU25vcmUiLCJpZGxlIiwic2VhdGVkIiwiaWRsZUxheWluZyIsIkRpcmVjdGlvbiIsIlNlbGVjdGlvblN0YXRlIiwiY2hvaWNlRGlhbG9nIiwic2VsZWN0UG9wb3ZlciIsImlzUmVwbGF5IiwiZGlzYWJsZVBhdXNlQnV0dG9uIiwiQ2hvaWNlRGlhbG9nTGluZURlbGVnYXRlIiwiYnV0dG9ucyIsImJ1dHRvbiIsImluZGV4Iiwic2V0QnV0dG9uTGlzdGVuZXIiLCJzZWxlY3Rpb25Qb3BPdmVyRGVsZWdhdGUiLCJhdHRhY2hQb3BvdmVyIiwiaW5pdCIsInRpbnQiLCJTY2VuZU1lZGlhdG9yIiwiUHJlc3NlZExpc3RlbmVyS2V5IiwiaXNBY3RpdmUiLCJsaW5rIiwiZ2V0TGluayIsImludGVyYWN0aW9uSGFuZGxlciIsInNldEJ1dHRvblByZXNzZWRMaXN0ZW5lciIsIm9uQ2hvaWNlIiwiYWN0aXZlYnV0dG9ucyIsImNob2ljZUlkIiwiY2hvaWNlIiwicmVtb3ZlSW50ZXJhdGlvbnMiLCJmaW5pc2hDaG9pY2UiLCJkaWRUZXJtaW5hdGUiLCJkZXR0YWNoUG9wb3ZlciIsImVuYWJsZVBhdXNlQnV0dG9uIiwicmVtb3ZlQnV0dG9uUHJlc3NlZExpc3RlbmVyIiwiZGVpbml0IiwiaGFzQ2hvaWNlIiwiZ2V0RGVmYXVsdENob2ljZSIsInNldEJ1dHRvbkxpc3RlbmVyVG9BY3RpdmUiLCJhY3RpdmUiLCJsaXN0ZW5lciIsIkljb25UeXBlIiwiSWNvbkFuaW1hdGlvbiIsIkljb25TZWxlY3Rpb25Qb3BPdmVyIiwic2VsZWN0aW9uVHlwZSIsIlNlbGVjdGlvblBvcE92ZXIiLCJHb2xkaWxvY2tzRW50cmFuY2VTdGF0ZSIsImNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyIiwiR0xDb3N0dW1lQ2hvaWNlIiwiQ29zdHVtZTFHTCIsIkNvc3R1bWUxR1IiLCJDb3N0dW1lMUdGIiwicGFyZW50QmVhciIsImJhYnlCZWFyIiwiYmFja2Ryb3AiLCJ3ZWF0aGVyUHJvcCIsIkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSIsInNldHVwIiwiYWN0aW9uTWFuYWdlckRlbGVnYXRlIiwicnVuQWN0aW9uIiwicGFyZW50IiwiZ2V0SGlkZUFjdGlvbiIsImJhYnkiLCJzZXRQb3BPdmVyQnV0dG9uSW5hY3RpdmUiLCJpbml0Q2hhcmFjdGVyIiwiY2hhcmFjdGVyIiwiR29sZGlsb2Nrc1N0b3J5RGF0YSIsImFjdDFHb2xkaWxvY2tzT2ZmU2NyZWVuWFBvc2l0aW9uIiwiZ2V0V2Fsa1RvUG9zaXRpb25BY3Rpb24iLCJhY3QxR29sZGlsb2Nrc1dhbGtUb1hQb3NpdGlvbiIsInNldENvc3R1bWUiLCJnZXRPblNlbGVjdEFuaW1BY3Rpb24iLCJzcGluZXMiLCJnZXRDb3N0dW1lQWN0aW9uIiwiY2hvaWNlVG9Db3N0dW1lTWFwIiwicGxheVdhbGsiLCJzZXRTZWxlY3RlZCIsImNoZWNrQ2hvaWNlTWFkZSIsInNldFBvcE92ZXJCdXR0b25BY3RpdmUiLCJzZXQiLCJidXR0b25MZWZ0IiwiYnV0dG9uTWlkZGxlIiwiYnV0dG9uUmlnaHQiLCJHYXJkZW5Qcm9wU2VsZWN0aW9uU3RhdGUiLCJjaG9pY2VEaWFsb2dMaW5lIiwiZ2FyZGVuIiwiQm93bFByb3BTZWxlY3Rpb25TdGF0ZSIsImJvd2wiLCJnZXRSZW1vdmVBY3Rpb24iLCJzZXRHb2xkaWxvY2tzUG9zaXRpb24iLCJnZXRTaG93QW5kUmlzZVVwQWN0aW9uIiwic2V0TmFycmF0b3JQb3NpdGlvbiIsImdldEFuaW1hdGVkQWN0Q2hhbmdlQWN0aW9uIiwiZ2V0QmFja2dyb3VuZEZvcldlYXRoZXIiLCJhY3QyTmFycmF0b3JYUG9zaXRpb24iLCJzZXREaXJlY3Rpb24iLCJyaWdodCIsImFjdDJHb2xkaWxvY2tzWFBvc2l0aW9uIiwiaXNTdW5DaG9pY2UiLCJCYWNrRHJvcFNraW4iLCJhY3Q0IiwiYWN0MiIsInNldFNraW5Gb3JUeXBlIiwiRGVsYXkiLCJnZXRTaG93QWN0aW9uIiwiZ2V0SWRsZUFuaW1BY3Rpb24iLCJzZXRCYWNrZHJvcFRvIiwiU2VlQmVhckhvdXNlU3RhdGUiLCJjaGFuZ2VCYWNrZHJvcCIsImFjdCIsImFjdDMiLCJXYWxrU3RhdGUiLCJHb2xkaWxvY2tzV2VhdGhlclNlbGVjdGlvblN0YXRlIiwic2V0Q2hvaWNlIiwiZ2V0RHJvcEFjdGlvbiIsImNsZWFyIiwiU3VuSGF0U3RhdGUiLCJzdG9yeURhdGEiLCJzYXZlIiwiaW5jbHVkZXMiLCJnZXRTZXRTdW5IYXRBY3Rpb24iLCJnZXRTZXRDb2xkSGF0IiwiZ2V0SGF0QWN0aW9uIiwic2V0U3VuSGF0Iiwic2V0Q29sZEhhdCIsIlN0b3J5RGF0YSIsIlNlYXRQcm9wU2VsZWN0aW9uU3RhdGUiLCJiZWFyRnVybml0dXJlIiwicmVzZXQiLCJTZWF0QnJlYWtTZWxlY3Rpb25TdGF0ZSIsInNldFNmeCIsImdldENoYXJhY3Rlck1vdmVBY3Rpb24iLCJsb2NhdG9yIiwiZXhpdE1pZGRsZSIsInN0YW5kIiwic2V0QnJva2VuIiwiU0ZYQWN0aW9uIiwic2Z4QnJlYWsiLCJTb3VuZENoYW5uZWwiLCJHMiIsInNmeCIsInNmeENob2ljZXMiLCJTRlhTZWxlY3Rpb25TdGF0ZSIsIlNlYXRpbmdTdGF0ZSIsInRhcmdldCIsImxvY2F0aW9uIiwiZ2V0U2VhdGVkQWN0aW9uIiwicGxheVNlYXQiLCJCZWRQcm9wU2VsZWN0aW9uU3RhdGUiLCJiZWQiLCJMYXlpbmdTdGF0ZSIsImxlZnQiLCJnZXRUb0xheUFjdGlvbiIsInBsYXlUb0xheSIsIkxheWluZ0Zyb21TdGF0ZSIsImdldEZyb21MYXlBY3Rpb24iLCJDYXVnaHRSZXNwb25zZVNlbGVjdGlvblN0YXRlIiwiRXNjYXBlU3RhdGUiLCJkb29yIiwiZ2V0T3BlbkFuaW1BY3Rpb24iLCJnZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uVG9Qb2ludCIsImV4aXRMZWZ0IiwicG9zaXRpb24iLCJwbGF5UnVuIiwiZ2V0Q2xvc2VBbmltQWN0aW9uIiwiZ2V0TmFycmF0b3JBY3Rpb24iLCJzZXR1cE5hcnJhdG9yIiwiZXhpdFJpZ2h0IiwiQmVhck5vdGljZUJyb2tlbkNoYWlyU3RhdGUiLCJiYWJ5QmVhclBvc2l0aW9uIiwiZ2V0U2hvd0FuaW1BY3Rpb24iLCJoaWRlQWxsIiwic2hvd0FsbCIsInBhcmVudEJlYXJQb3NpdGlvbiIsIkJlYXJzTm90aWNlR29sZGlsb2Nrc1N0YXRlIiwiYWN0M0dvbGRpbG9ja3NYUG9zaXRpb24iLCJFYXRGb29kU3RhdGUiLCJlbXB0eUJvd2wiLCJnZXRFbXB0eUJvd2xBY3Rpb24iLCJXYWxrVGhyb3VnaERvb3JTdGF0ZSIsIkJhYnlCZWFyTm90aWNpbmdTdGF0ZSIsImJhYnlCZWFyTm90aWNpbmdQb3NpdGlvbiIsIlNub3JpbmdTdGF0ZSIsInBsYXlTbm9yZSIsIkxheWluZ0ZpcnN0U3RhdGUiLCJMYXlpbmdMYXN0U3RhdGUiLCJCYWJ5QmVhck5vdGljaW5nQm93bFN0YXRlIiwiU2VhdFRyYWluU3RhdGUiLCJnZXRIb3JuU2Z4QWN0aW9uIiwiQ2hvaWNlVHlwZSIsIlNpbXBsZURpYWxvZyIsIldlYXRoZXJDaG9pY2UiLCJQYXJlbnRDaG9pY2UiLCJDdWVUeXBlIiwiR2FyZGVuQ2hvaWNlIiwiQm93bENob2ljZSIsIlNlYXRDaG9pY2UiLCJCZWRDaG9pY2UiLCJUYWxsQ2hhaXJTdGF0ZSIsIkdvbGRpbG9ja3NEaWFsb2dTdGF0ZUZhY3RvcnkiLCJpbnRybzEiLCJpbnRyb0FjdDJfMSIsImFjdDNJbnRybzEiLCJwYXNzYWdlIiwiY2hvaWNlVHlwZSIsIndlYXRoZXJDaG9pY2UiLCJjcmVhdGVJY29uU2VsZWN0UG9wT3ZlciIsInN1bm55IiwiY2xvdWR5IiwiUGFyZW50QmVhckVudHJhbmNlU3RhdGUiLCJjcmVhdGVDb3N0dW1lU2VsZWN0UG9wT3ZlciIsImNyZWF0ZVByb3BzU2VsZWN0UG9wT3ZlciIsIlByb3AiLCJmbG93ZXJzIiwiYmVhbnN0YWxrcyIsImhvbmV5YmVlaGl2ZXMiLCJwb3JyaWRnZSIsInRhY29zIiwic3BhZ2hldHRpIiwic2VhdCIsImNoYWlyIiwiYmVhbmJhZyIsInRyYWluIiwiYnJlYWtTZngiLCJiYW5nIiwicG9wIiwiY3Jhc2giLCJ3YXRlcmJlZCIsImNvdWNoIiwiaGFtbW9jayIsImNhdWdodDEiLCJkdW1kdW1kdW0iLCJhcHBsYXVzZSIsImdhc3AiLCJjYXVnaHRSZXNwb25zZSIsInNhZCIsImdldFNpbXBsZURpYWxvZyIsImN1ZSIsInN1bkhhdCIsImdvbGRpbG9ja3NTZWVzQmVhckhvdXNlIiwiZ29sZGlsb2Nrc0VhdEZvb2QiLCJlc2NhcGUiLCJnb2xkaWxvY2tzRW50cmFuY2UiLCJpc1NlYXRUcmFpbiIsInNlYXQzVHJhaW4iLCJzZWF0NlRyYWluIiwic2VhdDhUcmFpbiIsImlzU2VhdFBhc3NhZ2UiLCJzZWF0M0JlYW5iYWciLCJzZWF0NkNoYWlyIiwic2VhdDZCZWFuYmFnIiwic2VhdDhDaGFpciIsInNlYXQ4QmVhbmJhZyIsImlzVGFsbENoYWlyUGFzc2FnZSIsInNlYXQzQ2hhaXIiLCJpc0xheWluZ1Bhc3NhZ2UiLCJiZWQzQ291Y2giLCJiZWQzSGFtbW9jayIsImJlZDNXYXRlckJlZCIsImlzTGF5aW5nTGFzdFBhc3NhZ2UiLCJiZWQ3IiwiYmVkN0hhbW1vY2siLCJpc0Jvd2xQYXNzYWdlIiwicG9ycmlkZ2U0IiwidGFjb3M0Iiwic3BhZ2hldHRpNCIsInBvcnJpZGdlNiIsInRhY29zNiIsInNwYWdoZXR0aTYiLCJwb3JyaWRnZTgiLCJ0YWNvczgiLCJzcGFnaGV0dGk4IiwiYm93bDQiLCJib3dsNiIsImJvd2w4IiwiaXNMYXlpbmdGcm9tUGFzc2FnZSIsImJlZDVDb3VjaCIsImJlZDVIYW1tb2NrIiwiYmVkNVdhdGVyQmVkIiwiaXNCYWJ5QmVhck5vdGljaW5nQm93bFBhc3NhZ2UiLCJzdG9yeTExIiwiaXNCYWJ5QmVhck5vdGljaW5nUGFzc2FnZSIsInN0b3J5MTQiLCJzdG9yeTE3IiwiQWN0MVNldHVwU3RhdGUiLCJzdG9yeTUiLCJhY3QzaW50cm8xIiwiQWN0M0ludHJvU3RhdGUiLCJzdG9yeTEzIiwic3RvcnkxNiIsIkJlYXJOb3RpY2VCZWRTdGF0ZSIsInN0b3J5OSIsIldhbGtUb0Rvb3JTdGF0ZSIsInN0b3J5MTAiLCJUYXN0aW5nU3RhdGUiLCJiZWQxMCIsIkRpYWxvZ1N0YXRlRmFjdG9yeSIsIldlYXRoZXJTZWxlY3Rpb25TdGF0ZSIsIm9uQ29tcGxldGUiLCJkcm9wIiwiQWN0aW9uTW92ZW1lbnRTZWxlY3Rpb25TdGF0ZSIsImdldENoYXJhY3RlciIsInNldEFjdGlvbiIsInNldERlZmF1bHRBY3Rpb24iLCJscnJoQWN0aW9uMldhbGtpbmciLCJEZWNvcnNQcm9wU2VsZWN0aW9uU3RhdGUiLCJmb3Jlc3RQcm9wIiwiTFJSSEVudHJhbmNlU3RhdGUiLCJMUlJIQ29zdHVtZUNob2ljZSIsImxycmhDb3N0dW1lMUhvb2QiLCJscnJoQ29zdHVtZUNvd2JveSIsImxycmhDb3N0dW1lUGlyYXRlIiwic2V0SWNvbnMiLCJnZXRXYWxrT25BY3Rpb24iLCJjb3N0dW1lUG9wb3ZlciIsIldvbGZFbnRyYW5jZVN0YXRlIiwid29sZkFwcGVyYW5jZVNwb3QiLCJwbGF5RGVmYXVsdEFjdGlvbiIsImNhbWVyYVNlcnZpY2UiLCJDYW1lcmFTZXJ2aWNlIiwiZ2V0U2hha2VBY3Rpb24iLCJCYXNrZXRQcm9wU2VsZWN0aW9uU3RhdGUiLCJzZXRCYXNrZXQiLCJnZXRTZXRBY2Nlc3NvcnlBY3Rpb24iLCJiYXNrZXRDaG9pY2VGcm9tIiwiYmFza2V0Q2hvaWNlIiwicHJvcHMiLCJwcm9wIiwiVW1icmVsbGFTdGF0ZSIsImdldFNldFVtYnJlbGxhQWN0aW9uIiwic2V0VW1icmVsbGEiLCJBY3QySW50cm9TdGF0ZSIsImdyYW5tYSIsImdldFJlbW92ZVByZXZpb3VzQWN0QWN0aW9uIiwiZm9yZXN0Iiwid2VhdGhlciIsImdldFJlbW92ZUNoYXJhY3RlcnNBY3Rpb24iLCJscnJoIiwiZ2V0UmluZ0FuaW1BY3Rpb24iLCJXb2xmSG91c2VFbnRyYW5jZVZPU2VsZWN0aW9uU3RhdGUiLCJXb2xmSG91c2VFbnRyYW5jZVN0YXRlIiwiUHJpc29uU3RhdGUiLCJwcmlzb24iLCJ3b2xmR3Jhbm55Iiwic2VsZWN0ZWQiLCJnZXRPcGVuSWRsZUFuaW1BY3Rpb24iLCJwbGF5SGlkZURvd25SaWdodCIsImdldENsb3NlSWRsZUFuaW1BY3Rpb24iLCJwbGF5SWRsZUNsb3NlZCIsIkdyYW5ueVdhbGtpbmdTdGF0ZSIsImdyYW5ueURvb3JTcG90IiwiV29sZkRpc2d1aXNlU3RhdGUiLCJnZXRTZXRXb2xmR3Jhbm1hQWN0aW9uIiwic2V0Q2hhcmFjdGVyUG9zaXRpb24iLCJzZXRXb2xmR3Jhbm1hIiwibWlkZGxlIiwiRG9vckJlbGxTdGF0ZSIsIkxSUkhIb3VzZUVudHJhbmNlU3RhdGUiLCJDaGFyYWN0ZXIiLCJjb3N0dW1lRnJvbU5hbWUiLCJtaWRkbGVMZWZ0IiwiZGVsZXRlRGF0YVdpdGhLZXkiLCJBY3QzQWN0aW9uU2VsZWN0aW9uU3RhdGUiLCJzZXRSZWFjdGlvbkFjdGlvbiIsImFjdDNBY3Rpb24yUnVuIiwiR3Jhbm55RGlzZ3Vpc2VTdGF0ZSIsIkxSUkhHcmFubnlDaG9pY2UiLCJjb3N0dW1lMkthcmF0ZSIsImNvc3R1bWUyU3VwZXJoZXJvIiwicGxheSIsImFjdGlvbiIsImdldFNGWEFjdGlvbiIsImNhbmNlbEFjdGlvbiIsIm1pZGRsZVJpZ2h0IiwiVGhyb3dpbmdQcm9wU2VsZWN0aW9uU3RhdGUiLCJ0aHJvd2luZ1Byb3AiLCJ0aG93aW5nUHJvcCIsIlRocm93aW5nUHJvcEFjdGlvblN0YXRlIiwic3BpbmUiLCJtb29kIiwiZ2V0VGhyb3dBY3Rpb24iLCJnZXRIaXRBY3Rpb24iLCJnZXREb2RnZUFjdGlvbiIsImdyYW5ueURvZGdlIiwiV29sZkhvdXNlRXhpdFN0YXRlIiwiZ3Jhbm55IiwiZmxpcFhBeGlzIiwiV29sZlJlbW92ZUdsYXNzZXNTdGF0ZSIsImdldFJlbW92ZUdsYXNzZXNBY3Rpb24iLCJyZW1vdmVHbGFzc2VzIiwiV29sZlJlbW92ZUhhaXJTdGF0ZSIsImdldFJlbW92ZUhhaXJBY3Rpb24iLCJyZW1vdmVIYWlyIiwiV29sZlJldmVhbFN0YXRlIiwiZ2V0V29sZlJldmVhbEFjdGlvbiIsIldvbGZNb3ZlVG9CYXNrZXRTdGF0ZSIsIkxSUkhTdG9yeURhdGEiLCJhY3QxV29sZkJhc2tldFhQb3NpdGlvbiIsImFjdDFXb2xmWFBvc2l0aW9uIiwiTFJSSEdvVG9HcmFubnlzU3RhdGUiLCJXb2xmR29Ub0dyYW5ueXNTdGF0ZSIsIkdyYW5ueUFmcmFpZFN0YXRlIiwiTFJSSEFuZEdyYW5ueVdhbGtpbmdTdGF0ZSIsIlRocm93aW5nQ2hvaWNlIiwiRm9yZXN0Q2hvaWNlIiwiQmFza2V0Q2hvaWNlIiwiTFJSSEFuZEdyYW5ueUNlbGVicmF0aW9uU3RhdGUiLCJnZXRDZWxlYnJhdGVBY3Rpb24iLCJMUlJIRGlhbG9nU3RhdGVGYWN0b3J5IiwiaW50cm9BY3QyIiwiYWN0M1ZvMSIsImludHJvV29sZjEiLCJwcm9wV2VhdGhlciIsIndhbGsiLCJqdW1wIiwiZGFuY2UiLCJwcm9wRm9yZXN0IiwiYmFza2V0VHlwZUNob2ljZSIsImNoZXN0Iiwid2hvSXNJdCIsImhhcHB5IiwicHJvcDIiLCJwYW50cnkiLCJ3YXJkcm9iZSIsInByZXNlbnQiLCJkb29yQmVsbENob2ljZSIsImFyb29nYSIsImRpbmdkb25nIiwiaG9ua2hvbmsiLCJhY3QzQWN0aW9uVm8xIiwiZ3Jhbm55Q29zdHVtZSIsImthcmF0ZSIsInN1cGVyaGVybyIsInByb3AzIiwicnViYmVyRHVja3kiLCJ0ZWRkeSIsInVrdWxlbGUiLCJscnJoR3Jhbm1hSG91c2UiLCJsaXR0bGVSZWRIb29kRW50cmFuY2UiLCJpc0xycmhBY3Rpb25DaG9pY2UiLCJscnJoQWN0aW9uMkp1bXBpbmciLCJscnJoQWN0aW9uMkdyb292aW5nIiwiaXNMcnJoQWN0M0FjdGlvbkNob2ljZSIsImFjdDNBY3Rpb24zTGVhcGZyb2ciLCJhY3QzQWN0aW9uM1J1biIsImFjdDNBY3Rpb24zU2hha2UiLCJpc0xycmhUaHJvd2luZ0Nob2ljZSIsImFjdDNEdWNraWUiLCJhY3QzVGVkZHkiLCJhY3QzVWt1bGVsZSIsIkFjdGlvbk1vdmVtZW50U3RhdGUiLCJ3ZWF0aGVyM0Nsb3VkIiwiaW50cm81YSIsIndvbGZHcmFubnkxIiwiQWN0M0FjdGlvbk1vdmVtZW50U3RhdGUiLCJwcm9wNSIsImludHJvNWIiLCJpbnRybzYiLCJpbnRyb1dvbGY4IiwiaW50cm9Xb2xmMTMiLCJpbnRyb1dvbGYxNCIsInF1ZXN0aW9uMiIsInF1ZXN0aW9uNSIsInF1ZXN0aW9uOSIsImVuZFZvMiIsImVuZFZvNCIsIlNvdW5kVm9sdW1lIiwidm8iLCJtdXNpYyIsIlVJIiwiQXJyYXkiLCJDT1VOVCIsImZpbGwiLCJjdXJyZW50Vk8iLCJpc1Byb21wdFNob3dpbmciLCJzb3VuZHNDb25maWciLCJjb21wbGV0aW9uIiwiSG93bCIsInNyYyIsInZvbHVtZSIsIl9zZnhWb2x1bWUiLCJwcmVsb2FkIiwib25sb2FkIiwiaWQiLCJjaGFubmVsIiwiREVGQVVMVCIsImxvb3AiLCJwbGF5U291bmRBdFZvbHVtZSIsIl91aVZvbHVtZSIsIkFMTCIsInN0b3BTb3VuZENoYW5uZWwiLCJzb3VuZCIsInNvdW5kc1BhdGgiLCJhdXRvcGxheSIsIm9uc3RvcCIsImN1cnJlbnRTb3VuZENoYW5uZWxzIiwib25lbmQiLCJzdG9wTXVzaWMiLCJfbXVzaWNWb2x1bWUiLCJjdXJyZW50TXVzaWMiLCJmYWRlIiwiY29uc29sZSIsImxvZyIsInN0b3BWbyIsIl92b1ZvbHVtZSIsInZvc1BhdGgiLCJvbmxvYWRlcnJvciIsInNvdW5kSWQiLCJlcnJvciIsInVubG9hZFZPIiwic3RvcCIsInVubG9hZCIsInN0b3BJbnN0cnVjdGlvblZvIiwidW5sb2FkSW5zdHJ1Y3Rpb24iLCJpbnN0cnVjdGlvblZPIiwicGF1c2VWbyIsInBhdXNlSW5zdHJ1Y3Rpb25WTyIsInBhdXNlU291bmRzIiwicGF1c2UiLCJyZXN1bWVNdXNpYyIsInJlc3VtZVNvdW5kcyIsInJlc3VtZUluc3RydWN0aW9uVk8iLCJyZXN1bWVWTyIsInBsYXlpbmciLCJzdG9wQ2hhbm5lbCIsInBhdXNlU291bmRDaGFubmVsIiwicmVzdW1lU291bmRDaGFubmVsIiwibXV0ZWQiLCJtdXRlIiwiaG93bCIsIkcxIiwiUHJvcFNlbGVjdGlvblBvcE92ZXIiLCJyZXBvc2l0aW9uIiwidG9TdHJpbmciLCJzb3VuZE5hbWUiLCJzb3VuZENoYW5uZWwiLCJkZWx0YU1TIiwic291bmRTZXJ2aWNlIiwiX2lzUGxheWluZyIsInByZWxvYWRTRlgiLCJwbGF5U291bmQiLCJmaW5pc2giLCJpc1BsYXlpbmciLCJCbG9ja2luZ0Z1bmNBY3Rpb24iLCJCYWNrRHJvcEFuaW0iLCJCYWNrZHJvcCIsImZyb250U3BpbmUiLCJiYWNrU3BpbmUiLCJza2luIiwiYXR0YWNobWVudHMiLCJzYXZlQ3VycmVudFNraW4iLCJjdXJyZW50QWN0IiwiYWN0MSIsImNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uIiwiUmFuZG9tRGVsYXkiLCJjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbkFuZFZpc2libGUiLCJjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbkFuZFZpc2libGVXaXRoU0ZYIiwic291bmREZWxheSIsImNyZWF0ZURlbGF5ZWRTRlhBY3Rpb24iLCJjcmVhdGVBY3Rpb25BbmRWaXNpYmxlV2l0aFNGWCIsIkNoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyIsInJvbGVnb2xkaWVsb2NrcyIsInJvbGVwYXJlbnRiZWFyIiwicm9sZWJhYnliZWFyIiwicm9sZW5hcnJhdG9yIiwidm9JRE1hcCIsIlNoYWRvd2VkU3BpbmVQb3BPdmVyIiwiX2lzQmVpbmdEZWluaXQiLCJvcmllbnRhdGlvbiIsImZpcnN0IiwiY3VzdG9tU2hvd0FjdGlvbkhhbmRsZSIsIm1hcCIsInVwZGF0ZVNoYWRvdyIsInJlbW92ZVNoYWRvd3MiLCJCYWNrZ3JvdW5kZWRQb3BPdmVyIiwidHJlYXN1cmVDaGVzdCIsInJvbGVsbHJoIiwicm9sZXRoZXdvbGYiLCJyb2xlZ3Jhbm55IiwiRmFjdG9yeUhlbHBlciIsImNvbmZpZyIsInJvdGF0aW9uIiwicGl2b3QiLCJpbnRlcmFjdGl2ZSIsImlzSW50ZXJhY3RpdmUiLCJpc1Zpc2libGUiLCJ6SW5kZXgiLCJwcmVkaWNhdGUiLCJtYXNrIiwiYXBwIiwiY3JlYXRlVmlldyIsImFkZENoaWxkIiwidmlld0NvbmZpZyIsImNvbnRhaW5lciIsIl9kZWZhdWx0QWN0aW9uIiwiX3JlYWN0aW9uQWN0aW9uIiwicG9zIiwiaW5wdXQiLCJhbmltIiwid2Fsa09uIiwicnVuIiwiaGlkZVJpZ2h0IiwibGVhcGZyb2ciLCJjZWxlYnJhdGUiLCJ4UG9zIiwieVBvcyIsImR1cmF0aW9uIiwiYWN0aW9ucyIsImFjdDNBY3Rpb24yTGVhcGZyb2ciLCJhY3QzQWN0aW9uMlNoYWtlIiwiX3JlYWN0aW9uTG9vcEFjdGlvbiIsIl9kZWZhdWx0TG9vcEFjdGlvbiIsIm1vdmVBY3Rpb24iLCJlYXNpbmciLCJUV0VFTiIsIkxpbmVhciIsIk5vbmUiLCJ0YXJnZXRQb3NpdGlvbiIsInRyYW5zZm9ybVRvIiwiVHdlZW4iLCJ0byIsImVuZE9uQ2FuY2VsIiwicG9pbnQiLCJjb3N0dW1lUGFydCIsImF0dGFjaG1lbnQiLCJjb3N0dW1lRm9yQ2hhcmFjdGVyIiwiYXR0YWNobWVudE5hbWUiLCJlIiwid2FybiIsImNvc3R1bWUiLCJhdHRhY2hDb3N0dW1lUGFydCIsImFkZENvc3R1bWUiLCJjcmVhdGVIaWRlQW5kUmlzZUFjdGlvbiIsIl9jb3N0dW1lIiwibWlkZGxlQWN0aW9uIiwic291bmRDaGFuZWwiLCJoaWRlU0ZYIiwiZmluYWxBbHBoYSIsImZyb20iLCJ0b0dsb2JhbCIsInpTb3J0T2JqIiwiZ2V0Q2hpbGRCeU5hbWUiLCJpbml0aWFsaXNlU2VydmljZXMiLCJfbmFtZSIsIm5hdmlnYXRpb25TZXJ2aWNlIiwiTmF2aWdhdGlvblNlcnZpY2UiLCJmcmFtZVRpbWUiLCJyZWZyZXNoT3JkZXIiLCJtYW51YWxTcGluZXMiLCJ1cGRhdGUiLCJidXR0b25UYXJnZXQiLCJzdG9wUHJvcGFnYXRpb24iLCJzZXRCdXR0b25QcmVzc2VkTGlzdGVuZXJOb0hvdmVyIiwic2V0VW5pdmVyc2FsSG92ZXJTRlgiLCJzY3JpcHQiLCJDbGlja1NjcmlwdCIsImNsaWNrU3RhcnRDYWxsYmFjayIsImV2ZW50IiwiZGVhY3RpdmF0ZU90aGVyQnV0dG9ucyIsImNsaWNrRW5kQ2FsbGJhY2siLCJhY3RpdmF0ZUFsbEJ1dHRvbnMiLCJwbGF5VUlTRlgiLCJnZXRDbGlja1NGWCIsImNsaWNrRW5kT3V0c2lkZUNhbGxiYWNrIiwic2NyaXB0cyIsImFkZFNjcmlwdCIsImhvdmVyU0ZYc2NyaXB0IiwiSG92ZXJTY3JpcHQiLCJob3ZlclN0YXJ0Q2FsbGJhY2siLCJnZXRIb3ZlclNGWCIsImhvdmVyU0ZYc2NyaXB0S2V5IiwicmVtb3ZlU2NyaXB0IiwicmVtb3ZlVW5pdmVyc2FsSG92ZXJTRlgiLCJpbkJ1dHRvbiIsInNldENsaWNrYWJsZSIsImNsaWNrYWJsZSIsImlzQ2xpY2thYmxlIiwib25Ib3ZlclN0YXJ0Iiwib25Ib3ZlclN0b3AiLCJob3ZlckVuZENhbGxiYWNrIiwiSG92ZXJMaXN0ZW5lcktleSIsImNoaWxkIiwiZnJhbWUiLCJnZXRDaGlsZEluZGV4IiwiYWRkQ2hpbGRBdCIsImNoaWxkcmVuIiwiTWVkaWF0b3IiLCJzaGFkb3dEaXJlY3Rpb24iLCJ4T2Zmc2V0IiwibXlWZXJ0ZXgiLCJteUZyYWdtZW50IiwicGFkZGluZyIsIkZpbHRlciIsIlNjcmlwdE1vZGVsIiwicGFzc2FnZXMiLCJTdG9yaWVzIiwiU3BsYXNoTWVkaWF0b3IiLCJidWlsZEluZm9TZXJ2aWNlIiwiQnVpbGRJbmZvU2VydmljZSIsInN0b3J5Iiwic3RvcnlGbGF2b3IiLCJ1bmxvY2tBdWRpbyIsImNyZWF0ZVNwbGFzaFNjcmVlbiIsInNob3dVSSIsInBvcE92ZXJWaWV3IiwicG9wb3ZlciIsIlNwbGFzaFNjcmVlblBvcE92ZXIiLCJhZGRDaGlsZE1lZGlhdG9yT25seSIsInBsYXlCdXR0b24iLCJvblN0YXJ0UHJlc3NlZCIsImdldEhpZGVTdGFydEJ1dHRvbiIsInJldHJlaXZlU2NyaXB0Iiwic2NyaXB0UGF0aCIsImdldFN0b3J5VHdpbmVGaWxlTmFtZSIsImxvYWRpbmdTZXJ2aWNlIiwiTG9hZGluZ1NlcnZpY2UiLCJzYXZlZEluRGF0YSIsImxvYWRlciIsInJlc291cmNlcyIsInN0b3J5U2NyaXB0IiwibG9hZCIsImxvYWRBZGRpdGlvbmFsQXNzZXQiLCJjdXJyZW50U2NlbmVOYW1lIiwic2NyaXB0RGF0YSIsInNjZW5lTmFtZSIsImdldFNjZW5lTmFtZSIsIm9uQXNzZXRMb2FkZWRBY3Rpb24iLCJnZXRIaWRlUHJvZ3Jlc3NBY3Rpb24iLCJyZW1vdmVDaGlsZE1lZGlhdG9yT25seSIsImdldFNob3dMb2FkaW5nQWN0aW9uIiwiYmxvY2tpbmdBY3Rpb24iLCJmYWRlSW5TY2VuZSIsInByb2dyZXNzIiwic2V0UHJvZ3Jlc3MiLCJTY2VuZU5hbWUiLCJMcnJoU3RhZ2UiLCJHb2xkaWxvY2tzIiwiQ2luZGVyZWxsYSIsImRlc3Ryb3kiLCJDaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyIiwiZGVsZWdhdGUiLCJhcnRodXIiLCJidXN0ZXIiLCJtdWZmeSIsImR3IiwiX2J1dHRvbkFydGh1ciIsIl9idXR0b25CdXN0ZXIiLCJfYnV0dG9uTXVmZnkiLCJfYnV0dG9uRFciLCJfQXJ0aHVyIiwiX0J1c3RlciIsIl9NdWZmeSIsIl9EVyIsImNoYXJhY3Rlck1hcCIsIl9yb2xlVUkiLCJwb3NpdGlvblJvbGVVSSIsInNjYWxlUm9sZVVJIiwiYWRkU2NyaXB0cyIsInBsYXlEaWFsb2dzIiwibGVhZFJvbGUiLCJjaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2dzIiwicm9sZVVJTWFwIiwiQ2FwdGlvblNlcnZpY2UiLCJBbmFseXRpY3NTZXJ2aWNlIiwiaW5kZXhTZWxlY3RlZExpbmVzIiwiYWRkSW50cm9BY3Rpb25zIiwiYWRkTGVhZEFjdGlvbnMiLCJhZGRDaGFyYWN0ZXJTZWxlY3Rpb25BY3Rpb25zIiwiZW5kRGlhbG9nIiwiaW50cm8iLCJnZXRWT0NhcHRpb25BY3Rpb24iLCJjYXB0aW9uU2VydmljZSIsImRpc3BsYXlDYXB0aW9uIiwidGV4dCIsIlZPIiwiY2xlYXJDYXB0aW9ucyIsImxlYWQiLCJnZXRTaG93Um9sZVNlbGVjdGlvblVJQWN0aW9uIiwiQmxvY2tpbmdGdW5jIiwic2V0TGlzdGVuZXJGb3JMZWFkIiwic2VsZWN0aW9uRGlhbG9nIiwic2V0TGlzdGVuZXJGb3JSb2xlIiwiYmxvY2tlZEFjdGlvbiIsIm9uQ2hhcmFjdGVyU2VsZWN0ZWQiLCJvbkNoYXJhY3RlclNlbGVjdGVkRm9yTGVhZCIsInR5cGUiLCJyZW1vdmVMaXN0ZW5lcnMiLCJzYXZlUm9sZUZvclR5cGUiLCJnZXRDaGFyYWN0ZXJTZWxlY3RlZEFjdGlvbiIsImdldENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyIsInJlc3VsdE1hcCIsImFuYWx5dGljc1NlcnZpY2UiLCJzZW5kRXZlbnRDaGFyYWN0ZXJTZWxlY3QiLCJyZWFjdGlvbkFycmF5Iiwic2VsZWN0ZWRMaW5lcyIsInJhbmRvbUluZGV4IiwibGVhZERpYWxvZyIsImdldENoYXJhY3RlclRhbGtpbmdBY3Rpb24iLCJnZXRIaWRlUm9sZVNlbGVjdGlvblVJQWN0aW9uIiwiZ2V0U2VsZWN0QWN0aW9uIiwicGxheVRhbGsiLCJzZXRTa2luRm9yVUkiLCJ1aVJvbGVTZWxlY3Rpb24iLCJjaGFyYXRlciIsImFkZE5hcnJhdG9yQWN0aW9ucyIsImFkZE91dHJvQWN0aW9ucyIsInJlc2V0VUkiLCJvblRlcm1pbmF0ZWQiLCJjaGFyYWN0ZXJzVHlwZXMiLCJ2YWx1ZXMiLCJjb250YWlucyIsImxhc3RDaGFyYWN0ZXIiLCJuYXJyYXRvckRpYWxvZyIsIm91dHJvIiwicGxheU11c2ljIiwiYXJyYXkiLCJmYWRlTXVzaWMiLCJyZW1vdmVTY3JpcHRzIiwia2V5cyIsInRhcmdldFJvbGUiLCJDYW1lcmFFZmZlY3QiLCJwaXhpQXBwIiwid2lkdGgiLCJoZWlnaHQiLCJnYW1lSGVpZ2h0Iiwicm9vdFZpZXciLCJfdmlldyIsImNlbnRlciIsImNvcHlUbyIsIm1heFpvb20iLCJnZXRab29tSW5BY3Rpb24iLCJnZXRab29tT3V0QWN0aW9uIiwib25VcGRhdGUiLCJ0d2VlbiIsIm1vdmVDZW50ZXIiLCJ0YXJnZXRQb2ludCIsInNldFBvc2l0aW9uIiwiZ2xvYmFsVGFyZ2V0UG9zaXRpb24iLCJnZXRTY2FsZUFjdGlvbiIsImdldFBhbkFjdGlvbiIsIkN1YmljIiwiSW4iLCJtaW5ab29tIiwiZ2V0UmVjZW50ZXJBY3Rpb24iLCJ0cmFuc2Zvcm1HbG9iYWxUb0NoaWxkIiwiZ2V0VHJhbnNsYXRpb25BY3Rpb24iLCJtYXJnaW5YIiwibWluWCIsIm1heFgiLCJNYXRoRXh0IiwiY2xhbXAiLCJtYXJnaW5ZIiwibWluWSIsIm1heFkiLCJzZWxlY3Rpb25UeXBlcyIsIl9idXR0b25MZWZ0IiwiX2J1dHRvblJpZ2h0IiwiX2J1dHRvbk1pZGRsZSIsInJlc2V0U3BpbmVzIiwiZ2V0U2tpbk5hbWUiLCJBY3RNZWRpYXRvciIsImNoYXJhY3RlclJvbGVNYXAiLCJTdGF0ZUNvbnRleHQiLCJnYW1lIiwibXVzaWNCb3giLCJjdXJ0YWlucyIsImRpc2NvYmFsbCIsIl9yZXBsYXlTdGF0ZXMiLCJwb3NpdGlvbkRhdGEiLCJzY2FsZURhdGEiLCJpbml0Q2hhcmFjdGVycyIsImRpYWxvZ1N0YXRlRmFjdG9yeSIsImluaXRGYWN0b3J5Iiwic2V0dXBEZWJ1Z01vZGVJZk5lZWRlZCIsImNoYXJhY3RlclNlY29uZCIsImNoYXJhY3RlclRoaXJkIiwiZ2V0QWN0U2V0dXBBY3Rpb24iLCJzdGFnZVRyYW5zaXRpb24iLCJTdGFnZVRyYW5zaXRpb24iLCJnZXRPcGVuQ3VydGFpbnNBY3Rpb24iLCJnZXRUcmFuc2l0aW9uUGFyYWxheEFjdGlvbiIsInZpZ25ldHRlVmlzaWJsZSIsImRpc2NvQmFsbCIsInBsYXlGaXJzdERpYWxvZyIsIm11c2ljUGxheWVyIiwic3RhcnRNdXNpYyIsImZpc3RQYXNzYWdlIiwiZmluZCIsIml0ZW0iLCJwaWQiLCJnb1RvIiwibGlnaHRNYXBGaWx0ZXIiLCJyb2xlcyIsImFjdDFDaGFyYWN0ZXJQb3NpdGlvbk1hcCIsInNpemUiLCJhY3QxQ2hhcmFjdGVyU2NhbGVNYXAiLCJjdXJyZW50UGFzc2FnZSIsImNhbmNlbEFjdGlvbnMiLCJzdGF0ZUNvbnRleHQiLCJjdXJyZW50U3RhdGUiLCJwYXNzYWdlTmFtZSIsInNob3VsZEVuZERpYWxvZyIsImNyZWF0ZVN0YXRlRm9yRGlhbG9nIiwic3RhdGVzIiwidXBkYXRlUmVwbGF5U3RhdGVzIiwidXJsIiwicGFzc2FnZURpYWxvZyIsImdldFZvRm9yQ2hhcmFjdGVyIiwiJCIsInN1Y2Nlc3MiLCJnZXRFbmRPZkFjdEFjdGlvbiIsIm9uQWN0VGVybWluYXRlZCIsInJlbW92ZVZpZ25ldHRlIiwiZ2V0Q2xvc2VDdXJ0YWluc0FjdGlvbiIsIm9uRGVzdHJveSIsIm5leHRTdGF0ZU5hbWUiLCJidWlsZFNlcnZpY2UiLCJpc0RlYnVnIiwiYnV0dG9uU2tpcCIsImdldERlYnVnQnV0dG9uIiwiZ29Ub05leHQiLCJidXR0b25BY3QyIiwiZ29Ub0FjdDIiLCJidXR0b25BY3QzIiwiZ29Ub0FjdDMiLCJSZWN0YW5nbGVWaWV3Iiwic2tpcFRleHQiLCJUZXh0VmlldyIsImluaXRpYWxUZXh0Iiwic3R5bGUiLCJmcmFtZXRpbWUiLCJzaG91bGRVcGRhdGUiLCJyZXN1bWUiLCJTdGFnZU1lZGlhdG9yIiwiY3JlYXRlU3RvcnlNZWRpYXRvciIsInN0b3J5TWVkaWF0b3IiLCJnZXRTdG9yeU1lZGlhdG9yIiwic2hvd1JlcGxheVByb21wdCIsInNob3dQYXVzZVByb21wdCIsInNob3dQcm9tcHQiLCJjcmVhdGVSZXBsYXlQb3B2ZXIiLCJvbk5ld1N0b3J5Iiwib25SZXBsYXlTZWxlY3RlZCIsInBsYXlWT1Byb21wdCIsInNlbmRFdmVudFN0b3J5UGF1c2UiLCJjcmVhdGVQYXVzZVBvcHZlciIsIm9uUGF1c2VOZXdTdG9yeSIsIm9uQ29udGludWVTZWxlY3RlZCIsImNyZWF0ZUhhbmRsZSIsIm9uWWVzSGFuZGxlciIsIm9uTm9IYW5kbGVyIiwib25UaXRsZUhhbmRsZXIiLCJwcm9tcHRQb3BPdmVyIiwieWVzU3BpbmUiLCJub1NwaW5lIiwidGl0bGVTcGluZSIsImNyZWF0ZVByb21wdERpYWxvZyIsInNldFBhdXNlZCIsInNldFJlcGxheSIsIlByb21wdFBvcE92ZXIiLCJwbGF5Vk8iLCJzZW5kRXZlbnRFbmRNZW51Q2hvaWNlIiwiZGVpbml0UHJvbXB0RGlhbG9nIiwic3RhcnRSZXBsYXlTdG9yeSIsImNsZWFuVXBTdG9yeSIsInNob3dOZXdTdG9yeVNjcmVlbiIsInNlbmRFdmVudFBhdXNlTWVudUNob2ljZSIsInVucGF1c2UiLCJwYXVzZUFsbEluR2FtZSIsImdsb2JhbEF1dG9VcGRhdGUiLCJyZXN1bWVBbGxJbkdhbWUiLCJzdG9wVm9BbmRDYXB0aW9ucyIsIlR3aW5lUGFyc2VyIiwiZWxlbWVudCIsInBhcnNlVGV4dCIsImpzb25TdHJpbmciLCJzcGxpdCIsImxhc3QiLCJKU09OIiwicGFyc2UiLCJ0ZXN0IiwiZXhlYyIsInJlc3VsdE5hbWUiLCJyZXN1bHRWYXJpYWJsZSIsIlR3aW5lVmFyaWFibGUiLCJyZXBsYWNlIiwiaW5wdXRDb25kaXRpb24iLCJjb25kaXRpb25zIiwiY29uZGl0aW9uIiwicmVzdWx0VmFsdWUiLCJnZXRUd2luZUNvbmRpdGlvbiIsIkRpYWxvZ0xpbmUiLCJfdGV4dCIsImxpbmtzIiwiZGlhbG9nRGF0YSIsIl9kZWxheSIsIl92b0lkIiwiX2Nob2ljZVR5cGUiLCJfdGFyZ2V0Um9sZSIsIl9zZnhDaG9pY2VzIiwiX3NmeCIsIl9zZnhEZWxheSIsIl9jYW1lcmEiLCJfY2FtZXJhVGFyZ2V0IiwiX2NhbWVyYUVmZmVjdERlbGF5IiwiX2xvY2F0aW9uIiwiX2NhcHRpb24iLCJkaWFsb2dMaW5lRGVsZWdhdGUiLCJkZWxheSIsInNmeERlbGF5IiwiY2FtZXJhIiwiY2FtZXJhRWZmZWN0RGVsYXkiLCJjYW1lcmFUYXJnZXQiLCJzZWFyY2hGb3JWYXJpYWJsZURlY2xhcmF0aW9uIiwic2VhcmNoRm9yQ29uZGl0aW9uIiwiaXNTZXRTdGF0ZW1lbnQiLCJzZXRTdGF0ZW1lbnQiLCJnZXRTZXRTdGF0ZW1lbnQiLCJ0d2luZVZhcmlhYmxlIiwiZ2V0VHdpbmVWYXJpYWJsZSIsImxpbmVzIiwibGluZSIsInByb2Nlc3NUZXh0IiwiaWZTdGF0ZW1lbnRzIiwiYXJyIiwiaXNJZlN0YXRlbWVudCIsImlmU3RhdGVtZW50IiwiZ2V0SWZTdGF0ZW1lbnQiLCJ0d2luZVZhcmlhYmxlcyIsImdldFR3aW5lQ29uZGl0aW9ucyIsImhhbmRsZUNvbmRpdGlvbnMiLCJoYW5kbGVEZWZhdWx0Vm9PYmplY3QiLCJldmVyeSIsImNoZWNrQ29uZGl0aW9uIiwiZ2V0Q29uZGl0aW9uUmVzdWx0IiwidXBkYXRlVk8iLCJ1cGRhdGVTRlgiLCJpc09iamVjdCIsInZvSWRLZXkiLCJ2b0lkIiwiZ2V0Vm9Gb3JTZWNvbmRDb25kaXRpb24iLCJnZXRWb0ZvckNvbmRpdGlvbiIsImdldERlZmF1bHRWT0tleXMiLCJjaGVja1ZvRm9yS2V5IiwiZGVmYXVsdEtleSIsImdldERlZmF1bHRWbyIsImNoYXJhY3RlcktleSIsInBhdHRlcm4iLCJnZXREZWxheUFjdGlvbiIsImdldEV2ZW50QWN0aW9ucyIsImdldEVuZE9mRGlhbG9nQWN0aW9uIiwicmVhZExpbmVzQWN0aW9ucyIsImFjdGlvbkRlbGVnYXRlIiwicnVuVW5pcXVlQWN0aW9uIiwiZ2V0VGFsa0FjdGlvbiIsImdldFNGWEFjdGlvbklmTmVlZGVkIiwiZ2V0Q2FtZXJhQWN0aW9uSWZOZWVkZWQiLCJpc1RhbGtpbmciLCJjdXJyZW50QW5pbSIsImdldEN1cnJlbnQiLCJhbmltTmFtZSIsImFuaW1hdGlvbiIsInBsYXlBbmltIiwiRXJyb3IiLCJjYW1lcmFBY3Rpb25zIiwiZWZmZWN0cyIsImVmZmVjdCIsInpvb21PdXQiLCJ6b29tSW4iLCJwYW4iLCJnZXRUaGlyZFBhc3NhZ2UiLCJnZXROZXh0UGFzc2FnZSIsImNhbmNlbFVuaXF1ZUFjdGlvbiIsIkNvc3R1bWVBbmltYXRpb24iLCJDdWVEaWFsb2dMaW5lIiwiY3VlRGlhbG9nTGluZURlbGVnYXRlIiwiZ2V0Q3VlQWN0aW9ucyIsImN1ZURpYWxvZ0RhdGEiLCJjdWVEZWxheSIsIm9uQ3VlIiwiQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIiLCJoaWRlQW5pbWF0aW9uTWFwIiwiaGlkZUN1dG91dCIsIkNob2ljZURpYWxvZ1JlcGxheSIsInJlY29yZGVkQ2hvaWNlIiwiX3JlY29yZGVkQ2hvaWNlIiwiY2FwdGlvbiIsImdldENob2ljZUFjdGlvbiIsIkNob2ljZURpYWxvZ0xpbmUiLCJkaWFsb2dUaW1lciIsIndhaXRGb3JDaG9pY2UiLCJfcmVwbGF5Iiwic2F2ZUNob2ljZSIsInNlbmRFdmVudE5hcnJhdGl2ZUludGVyYWN0aW9uIiwib25DaG9pY2VzQmVpbmdQcmVzZW50ZWQiLCJDdWVDaG9pY2VEaWFsb2dSZXBsYXkiLCJjaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUiLCJDdWVDaG9pY2VEaWFsb2dMaW5lIiwic2VuZEFuYWx5dGljc0lmTmVlZGVkIiwiaXNDdWVEaWFsb2ciLCJoYXNDaG9pY2VzIiwiaGFuZGxlQ3VlQ2hvaWNlRGlhbG9nIiwiaGFuZGxlQ3VlRGlhbG9nIiwiaGFuZGxlQ2hvaWNlRGlhbG9nIiwidHJlZXMiLCJza3lTY3JhcGVyIiwiY2FuZHkiLCJzZW5kRXZlbnRTdGFydFN0b3J5QWN0IiwiU2xpY2VTcHJpdGVWaWV3IiwidXRpbHMiLCJUZXh0dXJlQ2FjaGUiLCJ0ZXh0dXJlTmFtZSIsImluc2V0TGVmdCIsImluc2V0VG9wIiwiaW5zZXRSaWdodCIsImluc2V0Qm90dG9tIiwiYW5jaG9yIiwiY2VudGVyQ2hpbGRyZW4iLCJOaW5lU2xpY2VQbGFuZSIsImRlc3Ryb3lWaWV3IiwiX2NoaWxkcmVuIiwiX3BhcmVudCIsIl9hY3Rpb25NYW5hZ2VyIiwiQWN0aW9uTWFuYWdlciIsIl9zY3JpcHRzIiwiQ29tcG9zaXRlU2NyaXB0IiwiX3VuaXF1ZUFjdGlvbiIsInNob3VsZERlc3Ryb3lUZXh0dXJlIiwiZGVpbml0QWN0aW9ucyIsInJlbW92ZUNoaWxkIiwiZGVzdHJveUNoaWxkcmVuIiwiYmFzZVRleHR1cmUiLCJtZXNzYWdlSUQiLCJhcmdzIiwiaGFuZGxlQ2hpbGRNZXNzYWdlIiwic2VuZFRvUGFyZW50IiwicGFyZW50VmlldyIsInJlbW92ZSIsInJldmVyc2VGb3JFYWNoIiwiZGVzdHJveUNoaWxkIiwiY3VycmVudENoaWxkIiwibmV3Q2hpbGQiLCJuZXdQYXJlbnRWaWV3IiwibmV3Q2hpbGRWaWV3SW5kZXgiLCJuZXdDaGlsZEluZGV4IiwiaW5kZXhPZiIsImNoaWxkSW5kZXgiLCJjaGlsZFZpZXdJbmRleCIsImNhbGxiYWNrcyIsInN0YXJ0QWN0aW9uIiwic3RhcnRVbmlxdWVBY3Rpb24iLCJhY3Rpb25JbnN0YW5jZXMiLCJhY3Rpb25JbnN0YW5jZSIsImNhbmNlbEFjdGlvbkluc3RhbmNlcyIsImNyZWF0ZUNhbGxiYWNrc0NvbmZpZyIsInN0YXJ0ZWRDYWxsYmFjayIsIm9uY2UiLCJmaW5pc2hlZENhbGxiYWNrIiwiY2FuY2VsbGVkQ2FsbGJhY2siLCJpc0Z1bmN0aW9uIiwiZXh0ZW5kIiwicGxheUFjdGlvbiIsIlZpZXdTY3JpcHQiLCJXaW5kb3dVdGlscyIsIlZpZXdUcmFuc2Zvcm1lciIsIlBvc2l0aW9uVmlld1RyYW5zZm9ybWVyIiwiRHJhZ1ZpZXdTY3JpcHQiLCJpbmNsdWRlIiwiZmluYWxDb25maWciLCJkcmFnU3RhcnRlZENhbGxiYWNrIiwiZHJhZ01vdmVkQ2FsbGJhY2siLCJkcmFnRW5kZWRDYWxsYmFjayIsInZpZXdEcmFnUmVzY2FsZSIsInZpZXdUcmFuc2Zvcm1lciIsInNvdXJjZVZpZXciLCJfZHJhZ1N0YXJ0ZWRDYWxsYmFjayIsIl9kcmFnTW92ZWRDYWxsYmFjayIsIl9kcmFnRW5kZWRDYWxsYmFjayIsIl9zdG9wUHJvcGFnYXRpb24iLCJfdmlld0RyYWdSZXNjYWxlIiwiX3NvdXJjZVZpZXciLCJfdmlld0luaXRpYWxseUludGVyYWN0aXZlIiwiX3ZpZXdJc1NlbGVjdGVkIiwiX21vdXNlT2Zmc2V0VmVjIiwiX2xhc3RNb3VzZVBvc2l0aW9uIiwiX3BvaW50ZXJJRCIsIl92aWV3VHJhbnNmb3JtZXIiLCJpbnN0YW5jZU9mIiwiaGVscGVyIiwiX29uVmlld01vdXNlRG93biIsIl9vblZpZXdNb3VzZVVwIiwiX29uVmlld01vdXNlVXBPdXRzaWRlIiwiX29uVmlld01vdXNlTW92ZSIsIl9vblZpZXdNb3VzZU1vdmVPdXRPZldpbmRvdyIsIl9zZXRBY3RpdmUiLCJfaXNBY3RpdmUiLCJfc2V0VmlldyIsImNhbGxiYWNrIiwiX3JlZ2lzdGVySW50ZXJhY3Rpb25FdmVudHMiLCJfZW5kRHJhZyIsIl9kZXJlZ2lzdGVySW50ZXJhY3Rpb25FdmVudHMiLCJfdXBkYXRlSW1wbCIsInVwZGF0ZVN0YXRlIiwic3RhcnREcmFnIiwic3RvcERyYWciLCJnZXRMb2NhbE1vdXNlUG9zaXRpb24iLCJ2aWV3UGFyZW50Iiwib24iLCJyZWdpc3Rlck1vdXNlT3V0IiwiZGVyZWdpc3Rlck1vdXNlT3V0IiwicmVtb3ZlTGlzdGVuZXIiLCJfYmVnaW5EcmFnIiwiX2RyYWdNb3ZlIiwiaWRlbnRpZmllciIsImdsb2JhbCIsIm1vdXNlTG9jYWxQb3MiLCJzdWIiLCJjYXB0dXJlU3RhdGUiLCJyZXN0b3JlU3RhdGUiLCJuYW1lc3BhY2UiLCJTbGljZUJ1dHRvblZpZXciLCJ0cmFuc2l0aW9uQ29sb3JUaW50cyIsImltYWdlRnJhbWVzIiwidXAiLCJnZXRDYWNoZSIsImltYWdlRnJhbWVOYW1lcyIsIm92ZXIiLCJkb3duIiwiZGlzYWJsZWQiLCJidXR0b25Nb2RlIiwib25Eb3duIiwib25VcCIsIm9uSG92ZXIiLCJvbkxlYXZlIiwib25VcE91dHNpZGUiLCJzZXRVcFN0YXRlIiwiaXNFbmFibGVkIiwiaGFzU3ByaXRlIiwiaXNUcmFuc2l0aW9uQ29sb3IiLCJDb2xvdXJVdGlscyIsImNvbG91clRvTnVtYmVyIiwib2ZmIiwiQml0bWFwVGV4dFZpZXciLCJmb250IiwibWF4V2lkdGgiLCJCaXRtYXBUZXh0Iiwib25Qcm9ncmVzcyIsIm9uU2NlbmVBc3NldHNMb2FkZWQiLCJsb2FkQXNzZXRzRGVzY3JpcHRpb25GaWxlcyIsImFkZCIsImdldEZvcm1hdFNjZW5lUGF0aEtleSIsImdldEZvcm1hdFNjZW5lUGF0aCIsImdldEZvcm1hdFNjZW5lQXNzZXRzS2V5IiwiZ2V0Rm9ybWF0U2NlbmVBc3NldHMiLCJvbkFzc2V0RGVzY3JpcHRpb25GaWxlc0xvYWRlZCIsIl8iLCJhc3NldExpc3QiLCJhc3NldExpc3RDb25maWciLCJsb2FkUHJlZmFiQXNzZXRzIiwiY29tYmluZWRBc3NldExpc3QiLCJvbkFzc2V0c0Rlc2NyaXB0aW9uRmlsZXNMb2FkZWQiLCJpZHMiLCJpc1ByZWZhYiIsImlzTm90TG9hZGVkIiwicHJlZmFiIiwiVmlld0ZhY3RvcnkiLCJ2aWV3Q29uZmlnU3VmZml4IiwicHJlZmFiVmlld0NvbmZpZyIsInJlc291cmNlUHJlZmFiQXNzZXRzIiwiY29uY2F0IiwiYXNzZXRzIiwicmVzb3VyY2UiLCJvbkVycm9yIiwiZXJyTWVzc2FnZSIsImxvYWRBc3NldElmTmVlZGVkIiwib25Bc3NldExvYWRlZCIsInBhdGgiLCJzZXRTcGluZURhdGEiLCJzYXZlU2NlbmVBc3NldHNJbkNhY2hlIiwic2NlbmVBc3NldHMiLCJ1bmxvYWRBc3NldHMiLCJzaG91bGRVbmxvYWRUZXh0dXJlIiwiYXRsYXNQYXR0ZXJuIiwiYXRsYXNSZXNvdWNlIiwic2NlbmVWaWV3Q29uZmlnIiwicGFyc2VDb25maWdFbGVtZW50IiwiYWRkQXNzZXRUb1NjZW5lQ2FjaGUiLCJfbG9nbyIsIl9sb2FkaW5nQW5pbSIsIl9wbGF5QnV0dG9uIiwic2V0VGl0bGVGb3JMb2FkaW5nQmFyIiwibG9nbyIsImxvYWRpbmdBbmltIiwiZmlsdGVyTG9hZGluZyIsImZpbHRlclBsYXkiLCJnZXRWb0FjdGlvbiIsInJlbW92ZVNwaW5lIiwic2V0TWFzayIsImF1dG9VcGRhdGUiLCJzZXRFbXB0eUFuaW1hdGlvbiIsInNwcml0ZSIsIlNwcml0ZSIsImlzUHJvZ3Jlc3NpbmciLCJ1cGRhdGVQcm9ncmVzcyIsIm9uTG9hZGluZ0FuaW1Db21wbGV0ZSIsInRlbXBWaWV3IiwiY2FudmFzIiwiY3JlYXRlQmFja2dyb3VuZCIsImJhY2tncm91bmQiLCJHcmFwaGljc1ZpZXciLCJiYWNrZ3JvdW5kTmFtZSIsImJlZ2luRmlsbCIsImRyYXdSZWN0Iiwic2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyTm9Ib3Zlck5vU291bmQiLCJjdXJzb3IiLCJnZXRBbmNob3JWaWV3Iiwib25TaG93biIsImJlZm9yZVNob3ciLCJhZGRCYWNrZ3JvdW5kIiwiY3VzdG9tU2hvd0FjdGlvbiIsImJhY2tncm91bmRBbHBoYSIsImFmdGVySGlkZUZ1bmMiLCJjdXN0b21IaWRlQWN0aW9uIiwicmVtb3ZlQmFja2dyb3VuZCIsInJlYWN0aW9uQWN0aW9uIiwicGxheVJlYWN0aW9uQWN0aW9uIiwiZ2V0UnVuQWN0aW9uIiwiZmluYWxQb3NpdGlvblgiLCJfY3VycmVudFN0YXRlIiwib25EZWluaXQiLCJjb250ZXh0Iiwib25Jbml0IiwiU2tpbiIsIl90aXRsZVNwaW5lIiwiX3llc1NwaW5lIiwiX25vU3BpbmUiLCJ3YXRjaFRoZVJlcGxheSIsImNoYXJhY3RlcnNlbGVjdCIsInBhdXNlZCIsImJhY2siLCJjYXB0aW9uQWN0aW9uIiwiVk9JbnN0cnVjdGlvbkFjdGlvbiIsInVwZGF0ZVNwaW5lVGltZSIsInBsYXlJbnN0cnVjdGlvblZvIiwiVHJhbnNpdGlvblBvaW50Iiwic3RhZ2UiLCJzaWRld2FsbHMiLCJiYWNrd2FsbCIsIm1haW5DdXJ0YWluIiwic3RhZ2VGbG9vclBvaW50Iiwic3RhcnQiLCJzdGFnZVNpZGV3YWxsUG9pbnQiLCJzdGFnZUJhY2t3YWxsUG9pbnQiLCJzdGFnZU1haW5DdXJ0YWluUG9pbnQiLCJzdGFnZUZsb29yU2NhbGUiLCJzdGFnZVNpZGV3YWxsU2NhbGUiLCJzdGFnZUJhY2t3YWxsU2NhbGUiLCJzdGFnZU1haW5DdXJ0YWluU2NhbGUiLCJPdXQiLCJlbmQiLCJwYXJlbnQxRmF0aGVyIiwicGFyZW50MU1vdGhlciIsInNob3dDaGFyYWN0ZXIiLCJvblBvcG92ZXJIaWRkZW4iLCJzZXRQYXJlbnRCZWFyUG9zaXRpb24iLCJhY3QxUGFyZW50QmVhclhQb3NpdGlvbiIsImdldFNob3dFbXB0eVNtYWxsQm93bEFjdGlvbiIsImdldEJlYXJTaG93QWN0aW9uIiwic2V0QmVhclBvc2l0aW9ucyIsInNldERvb3JQb3NpdGlvbiIsImdldFBhcmVudEJlYXJBY3Rpb24iLCJnZXRCYWJ5QmVhckFjdGlvbiIsInBhcmVudEJlYXJEb29yUG9zaXRpb24iLCJiYWJ5QmVhckRvb3JQb3NpdGlvbiIsImRvb3JQb3NpdGlvbiIsImFjdDNuYXJyYXRvclhQb3NpdGlvbiIsInNldHVwQ2hhcmFjdGVycyIsInNldHVwQmVkIiwiZ29sZGlsb2Nrc1Bvc2l0aW9uIiwiZ2V0QmFieUJlYXJCZWQiLCJnZXRLbm9ja09uRG9vckFjdGlvbiIsImFjdDFOZXh0VG9Eb29yWFBvc2l0aW9uIiwiZ2V0S25vY2tBbmltQWN0aW9uIiwiZ2V0VGFyZ2V0UG9zaXRpb24iLCJDaW5kZXJlbGxhRW50cmFuY2UiLCJzZXR1cENpbmRlcmVsbGEiLCJjYXJyaWFnZSIsImdldFNob3dQdW1wa2luQWN0aW9uIiwiZ2V0TW9wcGluZ0FjdGlvbiIsInBsYXlNb3BwaW5nIiwic2hvd1B1bXBraW4iLCJFbGVtZW50IiwiRG9jdW1lbnQiLCJEb2N1bWVudEZyYWdtZW50IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmdBcnIiLCJhcmd1bWVudHMiLCJkb2NGcmFnIiwiZG9jdW1lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYXJnSXRlbSIsImlzTm9kZSIsIk5vZGUiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiU3RyaW5nIiwiaXNBcnJheSIsImNvbnN0cnVjdG9yIiwiYXJyYXlpZnkiLCJvYmoiLCJpc0RlZXBDb3B5IiwiY2xvbmVkQXJyYXkiLCJjbG9uZSIsInJlbW92ZUl0ZW1Gcm9tQXJyYXkiLCJpdGVtSW5kZXgiLCJ1bmRlZmluZWQiLCJpdGVtcyIsInJlbW92ZWRJdGVtcyIsInNlbGYiLCJyZW1vdmVkSXRlbSIsImhhc0l0ZW1zIiwiYXBwZW5kIiwic2h1ZmZsZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIm1pZGRsZUluZGV4Iiwid3JhcEluZGV4IiwibWluIiwibWF4Iiwid3JhcCIsImNsYW1wSW5kZXgiLCJjZWlsIiwibGFzdEluZGV4IiwiY29udGFpbnNJbmRleCIsImlzSW5SYW5nZSIsInByZXZpb3VzSW5kZXgiLCJzZXBhcmF0ZUxhc3RJbmRleCIsImNvdW50IiwiZWxlbWVudENhbGxiYWNrIiwidGhpc0FyZyIsIlR5cGVFcnJvciIsImxlbiIsImsiLCJrVmFsdWUiLCJmaW5kSW5kZXgiLCJzZWFyY2hFbGVtZW50IiwiZnJvbUluZGV4IiwiYWJzIiwiZmlsdGVyT3V0RHVwbGljYXRlcyIsImZpbHRlck91dE51bGxzIiwiZmlsdGVyT3V0SXRlbXMiLCJpdGVtc1RvRXhjbHVkZSIsIkJvb2xlYW4iLCJ0b1NpZ25lZEludCIsInZhbCIsInRvVW5zaWduZWRJbnQiLCJIVE1MQXVkaW9FbGVtZW50IiwiY3VycmVudFRpbWUiLCJIVE1MQ2FudmFzRWxlbWVudCIsInRvQmxvYiIsInNldFRpbWVvdXQiLCJiaW5TdHIiLCJhdG9iIiwidG9EYXRhVVJMIiwiVWludDhBcnJheSIsImNoYXJDb2RlQXQiLCJCbG9iIiwiUkFEX1RPX0RFRyIsIlBJIiwiREVHX1RPX1JBRCIsIlFVQVJURVJfUEkiLCJIQUxGX1BJIiwiVFdPX1BJIiwidG9EZWdyZWVzIiwicmFkaWFucyIsInRvUmFkaWFucyIsImRlZ3JlZXMiLCJsZXJwIiwiYSIsImIiLCJhbW91bnQiLCJpbnZlcnNlTGVycCIsImFjdHVhbE1pbiIsImFjdHVhbE1heCIsInJhbmdlIiwic2F0dXJhdGUiLCJtYXBWYWx1ZVRvUmFuZ2UiLCJyYW5nZTFNaW4iLCJyYW5nZTFNYXgiLCJyYW5nZTJNaW4iLCJyYW5nZTJNYXgiLCJsZXJwRmFjdG9yIiwic2lnbiIsInJhbmRvbUludCIsInJhbmRvbUZsb2F0IiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaXNGaW5pdGUiLCJpc1plcm8iLCJudW0iLCJ0aHJlc2hvbGQiLCJpc0RlZmluZWQiLCJlcXVhbHMiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJpc0V2ZW4iLCJpc09kZCIsIm1vZCIsImFyZ3NTdGFydCIsImRlZXBDbG9uZSIsInNvdXJjZSIsIm9taXRQcm9wZXJ0aWVzIiwib21pdHRlZFByb3BzIiwib21pdHRlZFByb3BlcnRpZXMiLCJwcm9wZXJ0eUNhbGxiYWNrIiwicHJvcElEIiwicHJvcElEcyIsInBhZFN0YXJ0IiwidGFyZ2V0TGVuZ3RoIiwicGFkU3RyaW5nIiwicmVwZWF0IiwicGFkRW5kIiwiQmFzZUZhY3RvcnkiLCJfY3JlYXRvcnMiLCJyZWdpc3RlckNyZWF0b3IiLCJjcmVhdG9yS2V5IiwiY3JlYXRvckZ1bmMiLCJyZWdpc3RlckNyZWF0b3JzIiwiY3JlYXRvcnMiLCJjcmVhdG9yIiwiZGVyZWdpc3RlckNyZWF0b3IiLCJkZXJlZ2lzdGVyQ3JlYXRvcnMiLCJkZWZhdWx0Q3JlYXRvciIsIlR5cGUiLCJjYWxsaW5nRnVuYyIsIl9odWVUb1JnYkNvbXBvbmVudCIsInEiLCJjb2xvdXJTdHJpbmciLCJjaGFyQXQiLCJwYXJzZUludCIsImNvbG91ck51bSIsInJnYiIsImciLCJoZXgiLCJjc3NDb2xvdXIiLCJvdXQiLCJwYXJzZUZsb2F0IiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiaGV4U3RyaW5nIiwicmdiSGV4IiwiaHNsVG9SZ2IiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwib3V0cHV0Q29sb3VyIiwiYmlhc0h1ZUFuZ2xlIiwiYW5nbGVCaWFzIiwiY29zIiwiY29sb3VyMSIsImNvbG91cjIiLCJsZXJwQXJyYXkiLCJjb2xvdXJzIiwibnVtU2VjdGlvbnMiLCJzdGFydENvbG91ckluZGV4IiwiZW5kQ29sb3VySW5kZXgiLCJzdGFydENvbG91clJHQiIsImhleFRvUkdCIiwiZW5kQ29sb3VyUkdCIiwic2VnbWVudE1pbiIsInNlZ21lbnRNYXgiLCJzZWdtZW50TGVycEZhY3RvciIsIm91dHB1dFJHQiIsInJnYkZsb2F0VG9IZXgiLCJEZXZpY2VVdGlscyIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsImlzVG91Y2hEZXZpY2UiLCJ1YSIsInVzZXJBZ2VudCIsImlzV2luZG93c1Bob25lIiwicGxhdGZvcm0iLCJNU1N0cmVhbSIsIkdlbmVyYWxVdGlscyIsImd1aWQiLCJnZW5lcmF0ZUdVSUQiLCJnZW5lcmF0ZUdVSURTdHJpbmciLCJicm93c2VyIiwib3MiLCJVU0xvY2FsZSIsImZyb21DaGFyQ29kZSIsIm1ldGEiLCJjb21tYW5kIiwiT1MiLCJjdHJsIiwiS2V5Ym9hcmQiLCJsb2NhbGUiLCJfb25Gb2N1c0xvc3QiLCJfb25QYXVzZWQiLCJfb25SZXN1bWVkIiwiX3VwZGF0ZSIsIl9rZXlEb3duIiwiX2tleVVwIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9rZXlzQnlDb2RlIiwiX2tleXNCeU5hbWUiLCJrZXlOYW1lIiwiX2FjdGl2ZUNvbWJvcyIsIl91cGRhdGVkS2V5cyIsImRldGVjdEtleUNhbGxiYWNrIiwiZGV0ZWN0Q2FuY2VsS2V5IiwiZGV0ZWN0TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwic2Nyb2xsS2V5cyIsImNvZGVzIiwiS2V5IiwiYWRkTmFtZSIsImFkZENvZGUiLCJlbmFibGVkIiwib25QYXVzZWQiLCJvblJlc3VtZWQiLCJhZGRLZXlEb3duIiwicHJldmVudERlZmF1bHQiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUtleURvd24iLCJhZGRLZXlSZXBlYXQiLCJyZW1vdmVLZXlSZXBlYXQiLCJhZGRLZXlVcCIsInJlbW92ZUtleVVwIiwic2V0UHJldmVudERlZmF1bHRPbktleSIsInNldE1hbnVhbFByZXZlbnREZWZhdWx0IiwiYWRkQ29tYm8iLCJjb21ib1N0cmluZyIsImNvbWJvIiwiQ29tYm8iLCJyZW1vdmVDb21ibyIsImRldGVjdE5leHRLZXkiLCJjYW5jZWxLZXkiLCJhbGxvd01vZGlmaWVycyIsImVzYyIsInN0b3BEZXRlY3RpbmciLCJqdXN0UHJlc3NlZCIsImp1c3REb3duIiwiaXNEb3duIiwianVzdFJlbGVhc2VkIiwianVzdFVwIiwiX2VuYWJsZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib2ZmVXBkYXRlIiwiY2xlYXJLZXlzIiwiY29kZSIsImV2IiwiZm9jdXMiLCJlbGFwc2VkIiwia2V5Q29kZSIsIndhc01vZGlmaWVyIiwiZGV0ZWN0ZWQiLCJwcmVmZXJyZWROYW1lIiwidHJpZ2dlciIsInRlc3RLZXlEb3duIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJ0ZXN0S2V5VXAiLCJvZmZQYXVzZWQiLCJvZmZSZXN1bWVkIiwibmFtZXMiLCJ1cExpc3RlbmVycyIsInJlcGVhdExpc3RlbmVycyIsImRvd25MaXN0ZW5lcnMiLCJtYW51YWxQcmV2ZW50RGVmYXVsdCIsImxpc3RlbmVyTGlzdCIsImxpc3RlbmVycyIsInJlcXVlc3RlZE5hbWUiLCJrZXlzQnlOYW1lUmVmIiwic3RlcHMiLCJjdXJyZW50U3RlcCIsInN0ZXBOYW1lcyIsInN0ZXAiLCJzYXRlZCIsInJlbGVhc2VkIiwiZm91bmQiLCJyZXNldFN0ZXAiLCJhbGxTdWNjZXNzIiwiYWxsUmVsZWFzZWQiLCJPYmplY3RQb29sIiwiY3JlYXRlRnVuYyIsImNyZWF0ZUFyZ3MiLCJkZXN0cm95RnVuYyIsImluaXRGdW5jIiwiZGVpbml0RnVuYyIsImRlc3Ryb3lBcmdzIiwiaW5pdEFyZ3MiLCJkZWluaXRBcmdzIiwiY2FwYWNpdHkiLCJfZGVmYXVsdEdyb3dDYXBhY2l0eSIsIl9jcmVhdGVGdW5jIiwiX2Rlc3Ryb3lGdW5jIiwiX2luaXRGdW5jIiwiX2RlaW5pdEZ1bmMiLCJfY3JlYXRlQXJncyIsIl9kZXN0cm95QXJncyIsIl9pbml0QXJncyIsIl9kZWluaXRBcmdzIiwiX29ianMiLCJfdXNlZEluZGljZXMiLCJncm93IiwiaXNBdEZ1bGxDYXBhY2l0eSIsIm51bUVsZW1lbnRzIiwiY3VycmVudEluZGV4IiwiZ2V0TmV4dEF2YWlsYWJsZUluZGV4Iiwic29ydCIsInJlbGVhc2UiLCJ1c2VkSW5kZXgiLCJjdXJyZW50Q2FwYWNpdHkiLCJudW1Vc2VkIiwibmV4dEluZGV4IiwiQXVkaW9VdGlscyIsInZvTGlzdCIsInByb2JhYmlsaXR5IiwicmFuZG9tVk8iLCJwbGF0Zm9ybVNwZWNpZmljIiwiaXNEZXNrdG9wIiwiY3JlYXRlRnJvbVBvaW50cyIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsImNyZWF0ZUZyb21Sb3RhdGlvbiIsInplcm9Sb3RhdGlvbkRpciIsImJhc2VSb3RhdGlvbkRpciIsIm5vcm1hbGlzZSIsIm9yaWVudGF0aW9uVmVjIiwicm90YXRlIiwibXVsdCIsImNyZWF0ZUZyb21JbmRleCIsInhJbmRleCIsInlJbmRleCIsImNvbnZlcnRUb0luZGV4IiwidmVjdG9yIiwiaXNWZWN0b3IiLCJzZXRFcXVhbCIsInZlY3RvckEiLCJ2ZWN0b3JCIiwibWFnbml0dWRlIiwic3FydCIsIm1hZ25pdHVkZVNxdWFyZWQiLCJzZXRNYWduaXR1ZGUiLCJjdXJyZW50TWFnbml0dWRlIiwic2V0TWFnbml0dWRlU3F1YXJlZCIsImN1cnJlbnRNYWduaXR1ZGVTcXVhcmVkIiwiYW5nbGUiLCJzaW4iLCJyb3RhdGVBYm91dCIsIm91dHB1dCIsImRvdCIsImNyb3NzIiwiY3Jvc3MzIiwidmVjdG9yQyIsImxlcnBlZFZlY3RvciIsInhMZXJwIiwiSW5maW5pdHkiLCJsZXJwVmVjdG9yIiwieUxlcnAiLCJzY2FsYXIiLCJjb21wb25lbnRNdWx0IiwidmVjdG9yMSIsInZlY3RvcjIiLCJkaXYiLCJjb21wb25lbnREaXYiLCJwZXJwIiwibmVnYXRlIiwibmVnIiwiYXRhbjIiLCJhbmdsZUJldHdlZW4iLCJhbmdsZUEiLCJ0b0FuZ2xlIiwicm90YXRlQXJvdW5kUG9pbnQiLCJvcmJpdENlbnRyZSIsImRpc3BsYWNlbWVudFZlYyIsInJvdGF0ZWRWZWMiLCJzY2FsYXJQcm9qZWN0T250b0xpbmUiLCJsaW5lTWluUG9pbnQiLCJsaW5lTWF4UG9pbnQiLCJsaW5lVmVjIiwibGluZVZlY1VuaXQiLCJsaW5lTWluVG9Qb2ludFZlYyIsInNjYWxhclByb2plY3RPbnRvTm9ybWFsIiwibm9ybWFsIiwidmVjdG9yUHJvamVjdE9udG9Ob3JtYWwiLCJwcm9ncmVzc0Fsb25nTGluZSIsImxpbmVWZWNMZW4iLCJjbG9zZXN0UG9pbnRUb0xpbmUiLCJsaW5lTGVuZ3RoIiwic2NhbGFyUHJvaiIsImRpc3RhbmNlRnJvbUxpbmUiLCJjbG9zZXN0UG9pbnQiLCJkaXN0YW5jZUZyb21MaW5lU3F1YXJlZCIsInJlZmxlY3QiLCJpbmNvbWluZ1ZlYyIsImVxdWFsVG8iLCJsZXNzVGhhbiIsImxlc3NFcXVhbFRvIiwiZ3JlYXRlclRoYW4iLCJncmVhdGVyRXF1YWxUbyIsImFkZFRvIiwic3VidHJhY3RGcm9tIiwidG9Mb2NhbCIsIlplcm8iLCJVcCIsIkRvd24iLCJMZWZ0IiwiUmlnaHQiLCJCZXppZXJDdXJ2ZSIsInBvaW50cyIsIl9wb2ludHMiLCJpc1ZhbGlkIiwibmV3UG9pbnRzIiwiZ2V0UG9zaXRpb25BdCIsInNlZ21lbnRDb3VudCIsInN0YXJ0SW5kZXgiLCJ1bml0VCIsImNvbnRyb2xQb2ludDEiLCJjb250cm9sUG9pbnQyIiwiX3NvbHZlIiwiZ2V0UG9zaXRpb25BdFVuaXQiLCJnZXRYQXQiLCJzdG9wQXRGaXJzdFJlc3VsdCIsImdldFlBdCIsImNwMSIsImNwMiIsImRpc3BsYWNlbWVudCIsIkJlemllckN1cnZlQXBwcm94Iiwic3ViZGl2aXNpb25zUGVyU2VnbWVudCIsIl9zdWJkaXZpc2lvbnNQZXJTZWdtZW50IiwiX3ByZWNvbXB1dGVkTFVUIiwiX3ByZWNvbXB1dGVkUmFuZ2VzIiwiX2NyZWF0ZUxVVCIsIm1hdGNoaW5nU2VnbWVudCIsImxvd2VzdCIsInNlZ21lbnRJbmRleCIsIlBPU0lUSVZFX0lORklOSVRZIiwiaGlnaGVzdCIsIk5FR0FUSVZFX0lORklOSVRZIiwic2VnbWVudEJvdW5kcyIsIl9nZXRTZWdtZW50Qm91bmRzIiwicmVzdWx0cyIsInN0YXJ0UG9zIiwiZW5kUG9zIiwibG9jYWxUIiwiY3VycmVudFBvcyIsInNlZ21lbnRTdGFydEluZGV4Iiwic2VnbWVudEVuZEluZGV4Iiwic2VnbWVudFBvaW50cyIsInNlZ21lbnRSYW5nZSIsIl9jcmVhdGVSYW5nZUZyb21Qb2ludHMiLCJyZWR1Y2UiLCJMaW5lYXJDdXJ2ZSIsInVzZVByZWNvbXB1dGVkUmFuZ2VzIiwiX3VzZVByZWNvbXB1dGVkUmFuZ2VzIiwiX3ByZWNvbXB1dGVSYW5nZXMiLCJNaW5NYXgiLCJtaW5NYXgiLCJ0b1ZlY3RvciIsIm1hcEZyb20iLCJvdGhlck1pbiIsIm90aGVyTWF4IiwibWFwRnJvbU90aGVyIiwiQWN0aW9uIiwicmVnaXN0ZXIiLCJmdW5jIiwiaXNMb29wZWQiLCJfaGFzRXhlY3V0ZWRPbmNlIiwiX2ZpbmlzaGVkIiwiRGVsYXlBY3Rpb24iLCJ0aW1lIiwiX3RpbWUiLCJWT0FjdGlvbiIsInZvTmFtZSIsIl92b05hbWUiLCJfcGxheVZPIiwiX3N0b3BWTyIsImNhblBsYXlWTyIsIl90aGlzVk9Jc1BsYXlpbmciLCJzdG9wVk8iLCJpc1BsYXlpbmdWTyIsIkVhc2luZyIsIkludGVycG9sYXRpb24iLCJUd2VlbkFjdGlvbiIsInR3ZWVuUGFyYW1zIiwiZGVsYXlUaW1lIiwicmVwZWF0RGVsYXlUaW1lIiwieW95byIsImludGVycG9sYXRpb25GdW5jIiwib25TdGFydCIsIm9uU3RvcCIsInJlc2V0VmFsdWVzT25TdG9wIiwiX29iaiIsIl90d2VlblBhcmFtcyIsIl90d2VlbiIsIl9zdGFydFR3ZWVuIiwiX3N0b3BUd2VlbiIsImludGVycG9sYXRpb24iLCJyZXBlYXREZWxheSIsIkFuaW1hdGVTcHJpdGVBY3Rpb24iLCJhbmltYXRlZFNwcml0ZSIsInBhcmFtcyIsIl9hbmltYXRlZFNwcml0ZSIsIl9hbmltYXRpb25OYW1lIiwiX3BhcmFtcyIsIl9wbGF5QW5pbWF0aW9uIiwiX3N0b3BBbmltYXRpb24iLCJnb3RvQW5kU3RvcCIsIkJsb2NraW5nQWN0aW9uIiwiQ291bnRlckFjdGlvbiIsInN0YXJ0TnVtIiwiZW5kTnVtIiwiX3N0YXJ0TnVtIiwiX2VuZE51bSIsIl9kdXJhdGlvbiIsImZpbmFsVHdlZW5QYXJhbXMiLCJfY3JlYXRlVHdlZW5QYXJhbXMiLCJfZHVtbXlPYmoiLCJfdHdlZW5BY3Rpb24iLCJ0d2VlbkFjdGlvbiIsImlucHV0VHdlZW5QYXJhbXMiLCJvblVwZGF0ZUNhbGxiYWNrIiwiRnVuY0FjdGlvbiIsIlBhcmFsbGVsQWN0aW9uIiwiZW5kT25GaXJzdENvbXBsZXRlIiwiZW5kT25OZXh0QWN0aW9uIiwiX2VuZE9uRmlyc3RDb21wbGV0ZSIsIl9vcmlnaW5hbEFjdGlvbnMiLCJfY2FjaGVBY3Rpb25zIiwiUGFydGljbGVzQWN0aW9uIiwicGFydGljbGVzVmlldyIsInBhcnRpY2xlcyIsIl9zdGFydGVkIiwiZW5hYmxlIiwiX3BhcnRpY2xlc0ZpbmlzaGVkIiwiX2VtaXR0ZXJJc0FjdGl2ZSIsIl9oYXNBY3RpdmVQYXJ0aWNsZXMiLCJlbWl0dGVyIiwicGFydGljbGVDb3VudCIsIlJlcGVhdEFjdGlvbiIsIm9uTG9vcEZpbmlzaGVkIiwiX2NvdW50IiwiU2VxdWVuY2VBY3Rpb24iLCJfaW5kZXgiLCJSYW5kb21EZWxheUFjdGlvbiIsIm1pblRpbWUiLCJtYXhUaW1lIiwiU3BpbmVBY3Rpb24iLCJvcHRpb25zIiwiZmluYWxPcHRpb25zIiwidHJhY2tJbmRleCIsInJ1bm5pbmciLCJfYWN0aW9uIiwiX2NyZWF0ZUFjdGlvbiIsImRlbGF5QWN0aW9uIiwiUmVwZWF0Iiwic2tlbGV0b25EYXRhIiwiZmluZEFuaW1hdGlvbiIsImFuaW1UaW1lIiwiX2VuZEFuaW1hdGlvbiIsIl9yZXNldEFuaW1hdGlvbiIsIl9wYXVzZUFuaW1hdGlvbiIsInRyYWNrRW50cnkiLCJleHBhbmRUb0luZGV4IiwidHJhY2tUaW1lIiwidHJhY2tFbmQiLCJjbGVhclRyYWNrIiwiRXZlbnRFbWl0dGVyIiwiQWN0aW9uSW5zdGFuY2UiLCJfaWQiLCJfZW5kZWQiLCJfYWN0aXZlIiwiZW1pdCIsIl9maW5pc2giLCJpc0VuZGVkIiwiX2FjdGlvbnNUb0RlbGV0ZSIsIl9sYXN0IiwiX2dldERlbHRhTVMiLCJfaXNRdWV1ZWRGb3JEZWxldGlvbiIsIl9kZWxldGVBY3Rpb24iLCJEYXRlIiwibm93Iiwib3ZlcmxhcHNSZWN0IiwicmVjdCIsImJvdHRvbSIsInRvcCIsIlRyYW5zcGFyZW5jeUhpdEFyZWEiLCJhbHBoYVRocmVzaG9sZCIsInRleHR1cmVEYXRhIiwiX2luaXQiLCJfdHJhbnNsYXRlWEZvckFuY2hvciIsIl90cmFuc2xhdGVZRm9yQW5jaG9yIiwiX2lzSW5SZW5kZXJlZEJvdW5kcyIsImlzVGV4dHVyZVRyYW5zcGFyZW50QXQiLCJyb3VuZCIsImdldFRleHR1cmUiLCJfY3JlYXRlVGV4dHVyZURhdGEiLCJ4SW5UZXh0dXJlIiwieUluVGV4dHVyZSIsInciLCJoIiwiY3JlYXRlRWxlbWVudCIsInNwcml0ZVRleHR1cmUiLCJvcmlnIiwiY3R4IiwiZ2V0Q29udGV4dCIsImNsZWFyUmVjdCIsImRyYXdJbWFnZSIsImdldEltYWdlRGF0YSIsIlZpZXdVdGlscyIsImNvbnZlcnRWaWV3VG9CYXNlNjRQTkciLCJjb252ZXJ0Vmlld1RvQ2FudmFzIiwiY29udmVydFZpZXdUb0Jhc2U2NEpQRUciLCJjb252ZXJ0Vmlld1RvSW1hZ2UiLCJnZXRSZW5kZXJlciIsImV4dHJhY3QiLCJpbWFnZSIsImdldFRleHR1cmVEYXRhRnJvbVZpZXciLCJwaXhlbHMiLCJkb3dubG9hZFZpZXdBc1BORyIsImZpbGVOYW1lIiwiZG93bmxvYWRWaWV3IiwiZG93bmxvYWRWaWV3QXNKUEVHIiwiYmxvYiIsImJvZHkiLCJkb3dubG9hZCIsImhyZWYiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJjbGljayIsIlJlY3RhbmdsZSIsIkJsZW5kTW9kZXMiLCJTcHJpdGVWaWV3IiwiY29sb3VyVGludCIsInNrZXciLCJibGVuZE1vZGUiLCJhcHBseUJhc2VDb25maWdUb1ZpZXciLCJ1cGRhdGVUZXh0dXJlIiwicG9zdEluaXQiLCJfcG9zdEluaXRJbXBsIiwiZ2V0TG9jYWxCb3VuZHMiLCJfYm91bmRzIiwiX3RleHR1cmUiLCJfYW5jaG9yIiwiX3kiLCJCaW5hcnlTcHJpdGVWaWV3IiwiZW5hYmxlZFRleHR1cmVOYW1lIiwiaW5pdGlhbGx5RW5hYmxlZCIsIl9vZmZUZXh0dXJlIiwiX29uVGV4dHVyZSIsIl9pc09uIiwidHVybk9uIiwib2ZmVGV4dHVyZSIsIm9uVGV4dHVyZSIsIkJ1dHRvblZpZXciLCJsYWJlbFRleHRWaWV3IiwiY2xpY2tTb3VuZE5hbWUiLCJfaGFzU3ByaXRlIiwiX2lzRW5hYmxlZCIsImZyYW1lVGV4dHVyZSIsIl9vbkRvd24iLCJfb25VcCIsIl9vbkhvdmVyIiwiX29uTGVhdmUiLCJfb25VcE91dHNpZGUiLCJfaXNUcmFuc2l0aW9uQ29sb3IiLCJDaXJjbGVWaWV3IiwiZmlsbENvbG91ciIsImZpbGxBbHBoYSIsImxpbmVXaWR0aCIsImxpbmVDb2xvdXIiLCJsaW5lQWxwaGEiLCJpc1dpcmVmcmFtZSIsInJhZGl1cyIsIl9maWxsQ2lyY2xlIiwibGluZVN0eWxlIiwiZHJhd0NpcmNsZSIsImVuZEZpbGwiLCJzZXRDb2xvciIsIkR1YWxTcHJpdGVWaWV3IiwiZnJvbnQiLCJLZXlib2FyZEtleVZpZXciLCJraW5kIiwiX2tpbmQiLCJfdmFsdWUiLCJfYnVpbGRWaWV3Iiwic2V0SGlnaGxpZ2h0ZWQiLCJpc0hpZ2hsaWdodGVkIiwiX2J1aWxkVGV4dEJ1dHRvbiIsIl9idWlsZEJhY2tzcGFjZUJ1dHRvbiIsIl9idWlsZFNoaWZ0QnV0dG9uIiwiZm9udFNpemUiLCJfY3JlYXRlU2hhZG93VmlldyIsIl9jcmVhdGVCYWNrVmlldyIsIl9jcmVhdGVGcm9udFRleHRWaWV3IiwiaGl0QXJlYSIsIl9jcmVhdGVIaXRBcmVhIiwiaXNPbiIsIl9jcmVhdGVTaGlmdFZpZXciLCJfY3JlYXRlQmFja3NwYWNlVmlldyIsInNoYWRvd1ZpZXciLCJjb3JuZXJSYWRpdXMiLCJiYWNrVmlld1RpbnQiLCJjcmVhdGVSZWN0Q29uZmlnIiwiaGlnaGxpZ2h0ZWRWaWV3IiwidW5oaWdobGlnaHRlZFZpZXciLCJiYWNrVmlldyIsImZyb250Vmlld1RpbnQiLCJjcmVhdGVUZXh0Q29uZmlnIiwiYWxpZ24iLCJoaWdobGlnaHRlZFNwcml0ZVZpZXciLCJfY29udmVydFRleHRUb1Nwcml0ZSIsInVuaGlnaGxpZ2h0ZWRTcHJpdGVWaWV3IiwiZnJvbnRWaWV3IiwiY29weSIsImNyZWF0ZVNoaWZ0SWNvbkNvbmZpZyIsImNvbG91ciIsInZlcnRleExpc3QiLCJmaWxsZWRJY29uQ29uZmlnIiwid2lyZWZyYW1lSWNvbkNvbmZpZyIsImhpZ2hsaWdodGVkQ29uZmlnIiwidW5oaWdobGlnaHRDb25maWciLCJzaGlmdFZpZXciLCJjcmVhdGVCYWNrc3BhY2VJY29uQ29uZmlnIiwiYmFja3NwYWNlVmlldyIsInRleHRWaWV3IiwiZ2VuZXJhdGVUZXh0dXJlIiwidGV4dFNwcml0ZSIsIlBhcnRpY2xlc1ZpZXciLCJ0ZXh0dXJlTmFtZXMiLCJjb25maWdQcm9wIiwidGV4dHVyZXMiLCJQYXJ0aWNsZXNFbWl0dGVyIiwiZW1pdHRlckNvbmZpZyIsIl9nZXRFbWl0dGVyQ29uZmlnIiwiX2VtaXR0ZXIiLCJpc1dlYkdMIiwicGx1Z2lucyIsInNwcml0ZXMiLCJjbGVhbnVwIiwiY29uZmlnTmFtZSIsIlBpZVZpZXciLCJzdGFydEFuZ2xlIiwiYW50aWNsb2Nrd2lzZSIsImZpbGxJbnZlcnNlIiwiaW5pdGlhbFByb2dyZXNzIiwiX21hc2tWaWV3IiwiX21hc2tIb2xkZXJWaWV3IiwiX2Zyb250VmlldyIsIl9iYWNrVmlldyIsIl9yYWRpdXMiLCJfc3RhcnRBbmdsZSIsIl9maWxsSW52ZXJzZSIsIl91cGRhdGVQcm9ncmVzcyIsIl9wcm9ncmVzcyIsIm1vdmVUbyIsImFyYyIsImNsb3NlUGF0aCIsIlByaW1pdGl2ZVZpZXciLCJfbGluZVdpZHRoIiwiX3ZlcnRleExpc3QiLCJfZmlsbFByaW1pdGl2ZSIsIm5ld1ZlcnRleExpc3QiLCJsaW5lVG8iLCJyZWN0V2lkdGgiLCJyZWN0SGVpZ2h0IiwiX2ZpbGxSb3VuZGVkUmVjdCIsImRyYXdSb3VuZGVkUmVjdCIsIlJlbmRlclRleHR1cmUiLCJTY3JlZW5zaG90VmlldyIsIl9yZW5kZXJUZXh0dXJlIiwidGFrZVNjcmVlbnNob3QiLCJyZW5kZXIiLCJTcGluZVZpZXciLCJzcGluZU5hbWUiLCJhbmltYXRpb25zIiwic2xvdE5hbWUiLCJzdGFydFRpbWUiLCJ0cmFja3MiLCJTcHJpdGVTaGVldFZpZXciLCJzdGFydGluZ0ZyYW1lTmFtZSIsInNwcml0ZVNoZWV0IiwidXBkYXRlRnJhbWUiLCJmcmFtZU5hbWUiLCJnZXRGcmFtZSIsIlRleHQiLCJjYW52YXNNb2RlQ29sb3VyIiwiVGlsaW5nU3ByaXRlIiwiVGlsZVNwcml0ZVZpZXciLCJ0aWxlU2l6ZSIsInRpbGVQb3NpdGlvbiIsInRpbGVTY2FsZSIsIm5ld01hc2tWaWV3IiwiTGluZVZpZXciLCJDdXJ2ZVZpZXciLCJQSVhJR3JhcGhpY3MiLCJkZWZhdWx0VHJlZUNyZWF0b3IiLCJfY3JlYXRlU2xpY2VTcHJpdGUiLCJfY3JlYXRlQml0bWFwVGV4dCIsIl9jcmVhdGVTbGljZUJ1dHRvbiIsIl9jaXJjbGVNYXNrVmlld0NyZWF0b3IiLCJfcG9seWdvbk1hc2tWaWV3Q3JlYXRvciIsIl9wb2x5Z29uVmlld0NyZWF0b3IiLCJfY2lyY2xlVmlld0NyZWF0b3IiLCJfYm94Vmlld0NyZWF0b3IiLCJfcHJlZmFiVmlld0NyZWF0b3IiLCJ2aWV3Q3JlYXRvckZ1bmMiLCJjcmVhdGVDaGlsZHJlbiIsInNraXBJZ25vcmVzIiwiaWdub3JlIiwiY3JlYXRlVmlld0Zyb21Db25maWciLCJyZXNwZWN0SWdub3JlcyIsInRyYXZlcnNlQ2hpbGRyZW4iLCJjaGlsZENvbmZpZyIsImNoaWxkVmlldyIsIlZpZXdUeXBlIiwicG9pbnROdW1iZXJMaXN0IiwiZHJhd1BvbHlnb24iLCJwdCIsInBvbHlnb24iLCJQb2x5Z29uIiwiYm91bmRzIiwiQ2lyY2xlIiwiZm9udE5hbWUiLCJiaXRtYXBUZXh0IiwiX2lzSW5pdGlhbGlzZWQiLCJpc0luaXRpYWxpc2VkIiwic2tpcEluaXRTY3JpcHRzIiwiaW5pdGlhbGx5SXNSZWN1cnNpdmUiLCJpc1JlY3Vyc2l2ZSIsImluY2x1ZGVTZWxmIiwic2tpcEluaXQiLCJza2lwRGVpbml0Iiwic2NyaXB0c1RvUmVtb3ZlIiwiYWRkRGVidWdTY3JpcHQiLCJhZGREZWJ1Z1NjcmlwdHMiLCJpc0RlYnVnTW9kZSIsInJlbW92ZURlYnVnU2NyaXB0IiwicmVtb3ZlRGVidWdTY3JpcHRzIiwiX2hlbHBlciIsImNsYW1wWE1vdmVtZW50IiwiY2xhbXBZTW92ZW1lbnQiLCJ4UmFuZ2UiLCJ5UmFuZ2UiLCJyZXR1cm5Ub09sZFBvc09uRHJvcCIsIl94TW92ZW1lbnRTY2FsZSIsIl95TW92ZW1lbnRTY2FsZSIsIl94UmFuZ2UiLCJfeVJhbmdlIiwiX3JldHVyblRvT2xkUG9zT25Ecm9wIiwiX29uVXBkYXRlQ2FsbGJhY2siLCJfdmlld09sZFBvc2l0aW9uIiwibmV3UG9zaXRpb24iLCJtb3VzZU9mZnNldFZlYyIsIm9sZFZpZXdQb3NpdGlvbiIsIlJvdGF0aW9uVmlld1RyYW5zZm9ybWVyIiwiYXBwbHlTdGVwT25FbmRPbmx5IiwiX29sZFJvdGF0aW9uIiwiX3N0ZXAiLCJfYXBwbHlTdGVwT25FbmRPbmx5IiwiY3VycmVudFZpZXdQb3NpdGlvbiIsIm1vdXNlUG9zaXRpb24iLCJjbGlja0RpcmVjdGlvblZlYyIsImN1cnJlbnRBbmdsZSIsImN1cnJlbnRSb3RhdGlvbiIsIl9hcHBseU1vZGlmaWVyc1RvUm90YXRpb24iLCJza2lwU3RlcCIsIk51bGxWaWV3VHJhbnNmb3JtZXIiLCJBbGlnblZpZXdTY3JpcHQiLCJob3Jpem9udGFsQWxpZ25tZW50IiwiQWxpZ25tZW50IiwiTk9ORSIsInZlcnRpY2FsQWxpZ25tZW50IiwiX2hvcml6b250YWxBbGlnbm1lbnQiLCJfdmVydGljYWxBbGlnbm1lbnQiLCJfb3JpZ2luYWxWaWV3UG9zIiwiQ0VOVFJFIiwiTEVGVCIsIlJJR0hUIiwiVE9QIiwiQk9UVE9NIiwibmV3VmlldyIsIl93aW5kb3dSZXNpemVkIiwidHJhbnNmb3JtIiwiX2FsaWduWCIsIl9hbGlnblkiLCJzbmFwWFBvcyIsImdldENhbnZhc1dpZHRoIiwid29ybGRUcmFuc2Zvcm0iLCJhcHBseUludmVyc2UiLCJzbmFwWVBvcyIsImdldENhbnZhc0hlaWdodCIsIkJvdW5kc092ZXJsYXBTY3JpcHQiLCJvdGhlclZpZXciLCJvdmVybGFwVGVzdEZ1bmMiLCJvdmVybGFwUmVzdWx0Q2FsbGJhY2siLCJ0aGlzVmlldyIsInZpZXdzT3ZlcmxhcCIsInJldHVybkRhdGEiLCJpc092ZXJsYXBwaW5nQ2FsbGJhY2siLCJpc05vdE92ZXJsYXBwaW5nQ2FsbGJhY2siLCJvdmVybGFwU3RhcnRlZENhbGxiYWNrIiwib3ZlcmxhcEVuZGVkQ2FsbGJhY2siLCJfb3RoZXJWaWV3IiwiX292ZXJsYXBUZXN0RnVuYyIsImRlZmF1bHRPdmVybGFwVGVzdCIsIl9vdmVybGFwUmVzdWx0Q2FsbGJhY2siLCJfaXNPdmVybGFwcGluZ0NhbGxiYWNrIiwiX2lzTm90T3ZlcmxhcHBpbmdDYWxsYmFjayIsIl9vdmVybGFwU3RhcnRlZENhbGxiYWNrIiwiX292ZXJsYXBFbmRlZENhbGxiYWNrIiwiX2lzT3ZlcmxhcHBpbmciLCJ2aWV3MSIsInZpZXcyIiwidmlldzFCb3VuZHMiLCJnZXRCb3VuZHMiLCJ2aWV3MkJvdW5kcyIsInhPdmVybGFwIiwieU92ZXJsYXAiLCJvdmVybGFwcyIsIl90ZXN0T3ZlcmxhcCIsIl91cGRhdGVPdmVybGFwU3RhdGUiLCJpc092ZXJsYXBwaW5nIiwiQ2FtZXJhU2NyaXB0IiwiZGVmYXVsdFNpemUiLCJ3b3JsZFZpZXciLCJwbGF5ZXJWaWV3IiwicGxheWVyUmVjdCIsImNhbWVyYVJlY3QiLCJ3b3JsZFJlY3QiLCJfd29ybGRWaWV3IiwiX3BsYXllclZpZXciLCJfcGxheWVyUmVjdCIsIl9jYW1lcmFSZWN0IiwiX3dvcmxkUmVjdCIsInNjcm9sbGVkUGxheWVyQm91bmRzIiwid29ybGRQaXZvdEJvdW5kcyIsImFsbG93QWxsQ2xpY2tFbmRFdmVudHMiLCJfY2xpY2tTdGFydENhbGxiYWNrIiwiX2NsaWNrRW5kQ2FsbGJhY2siLCJfY2xpY2tFbmRPdXRzaWRlQ2FsbGJhY2siLCJfY2xpY2tTb3VuZE5hbWUiLCJfb25DbGlja1N0YXJ0SW50ZXJuYWwiLCJfb25DbGlja1N0YXJ0IiwiX29uQ2xpY2tFbmRJbnRlcm5hbCIsIl9vbkNsaWNrRW5kIiwiX29uQ2xpY2tFbmRPdXRzaWRlSW50ZXJuYWwiLCJfb25DbGlja0VuZE91dHNpZGUiLCJfaXNTZWxlY3RlZCIsIl9hbGxvd0FsbENsaWNrRW5kRXZlbnRzIiwiX3VwZGF0ZUN1cnNvciIsIl9pc0NsaWNrYWJsZSIsIkZhY2VWaWV3U2NyaXB0IiwidGFyZ2V0VmlldyIsIl90YXJnZXRWaWV3IiwidGFyZ2V0VmVjIiwiaG92ZXJDYWxsYmFjayIsIl9ob3ZlclN0YXJ0Q2FsbGJhY2siLCJfaG92ZXJFbmRDYWxsYmFjayIsIl9ob3ZlckNhbGxiYWNrIiwiX29uSG92ZXJTdGFydEludGVybmFsIiwiX29uSG92ZXJTdGFydCIsIl9vbkhvdmVyRW5kSW50ZXJuYWwiLCJfb25Ib3ZlckVuZCIsIlN0aWNreURyYWdWaWV3U2NyaXB0Iiwic2hvdWxkU25hcCIsIl9zaG91bGRTbmFwIiwiX2ZpcnN0Q2xpY2tPY2N1cnJpbmciLCJjb252ZXJ0ZWRQb3NpdGlvbiIsInN1YkNsYXNzIiwibWl4aW4iLCJzdXBlckNsYXNzIiwicHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJuYW1lc3BhY2VTdHJpbmciLCJyZXF1aXJlZCIsInBhcnRzIiwiY3VycmVudFBhcnQiLCJwbyIsInBjIiwidmFyaWFibGUiLCJGdW5jdGlvbiIsImlzTnVtYmVyIiwibnVtYmVyIiwiaXNTdHJpbmciLCJzdHIiLCJpc0Jvb2xlYW4iLCJib29sVmFsIiwibnVsbGlmeSIsImdldFByb3BlcnR5IiwicHJvcGVydHlTdHJpbmciLCJ0aHJvd0Vycm9yT25OdWxsIiwiZXJyb3JTdHJpbmciLCJwYXJ0IiwiRW1wdHlGdW5jdGlvbiIsIlRydWVGdW5jdGlvbiIsIkZhbHNlRnVuY3Rpb24iLCJOdWxsRnVuY3Rpb24iLCJDb250YWluZXIiLCJfc29ydFpJbmRleEFzYyIsIl9wb3N0SW5pdEhlbHBlciIsInJlbW92ZUNoaWxkcmVuIiwiY2hpbGRyZW5Ub0FkZCIsImNoaWxkVG9BZGQiLCJjb21wdXRlT3JkZXJlZEluZGV4IiwibG93ZXJJbmRleCIsInVwcGVySW5kZXgiLCJsb3dlclpJbmRleCIsIl9nZXRaSW5kZXgiLCJkaWZmIiwidmlzaWJsZUNoaWxkcmVuIiwiR3JhcGhpY3MiLCJjdXJ2ZUNvbG91ciIsImN1cnZlQWxwaGEiLCJjdXJ2ZVdpZHRoIiwiY3VydmVJc1Zpc2libGUiLCJhcHByb3hpbWF0ZWRQb2ludHNDb2xvdXIiLCJhcHByb3hpbWF0ZWRQb2ludHNBbHBoYSIsImFwcHJveGltYXRlZFBvaW50c1JhZGl1cyIsImFwcHJveGltYXRlZFBvaW50c0FyZVZpc2libGUiLCJjb250cm9sUG9pbnRDb2xvdXIiLCJjb250cm9sUG9pbnRBbHBoYSIsImNvbnRyb2xQb2ludFJhZGl1cyIsImNvbnRyb2xQb2ludHNBcmVWaXNpYmxlIiwidGFuZ2VudENvbG91ciIsInRhbmdlbnRBbHBoYSIsInRhbmdlbnRXaWR0aCIsInRhbmdlbnRzQXJlVmlzaWJsZSIsInByZWNvbXB1dGVkTFVUIiwiX2N1cnZlIiwiX2FwcHJveGltYXRlZFBvaW50cyIsIl9jb250cm9sUG9pbnRzIiwiX3RhbmdlbnRzIiwiX3JlZnJlc2hDYW52YXMiLCJuZXdQcmVjb21wdXRlZExVVCIsImN1cnZlU2VnbWVudENvdW50IiwiYmV6aWVyQ3VydmVUbyIsImxpbmVJc1Zpc2libGUiLCJwb2ludHNDb2xvdXIiLCJwb2ludHNBbHBoYSIsInBvaW50c1JhZGl1cyIsInBvaW50c0FyZVZpc2libGUiLCJfbGluZSIsIlNpemVNYW5hZ2VyIiwicmVuZGVyZXIiLCJ2YWx1ZU9mIiwic2NhbGVSYXRpbyIsInJlc2l6ZUNhbGxiYWNrIiwic2NhbGVNYW5hZ2VyIiwiU2FmZVNjYWxlTWFuYWdlciIsInNhZmVXaWR0aCIsInNhZmVIZWlnaHQiLCJvblJlc2l6ZSIsInJlc2l6ZXIiLCJnZXRXaW5kb3dSZXNvbHV0aW9uIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJkaXNhYmxlIiwiUm9vdE1lZGlhdG9yIiwiU2F2ZWREYXRhIiwiV0VCX1NUT1JBR0VfU1VQUE9SVCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwic2Vzc2lvblN0b3JhZ2UiLCJ3cml0ZSIsIkVSQVNFX0NPT0tJRSIsImV4cGlyZXMiLCJ0ZW1wT25seSIsInN0cmluZ2lmeSIsInRvVVRDU3RyaW5nIiwiY29va2llIiwiZ2V0SXRlbSIsIm5hbWVFUSIsImNhIiwic3Vic3RyaW5nIiwidW5lc2NhcGUiLCJTdG9yYWdlIiwiU2F2ZVNlcnZpY2UiLCJwcm9maWxlS2V5IiwidXNlckRhdGFLZXkiLCJwcm9maWxlc0RhdGEiLCJnZXRVc2VyRGF0YVByb2ZpbGVzIiwibmV3UHJvZmlsZXNEYXRhIiwicHJvZmlsZXNLZXkiLCJyZWFkIiwiY3VycmVudFNjZW5lS2V5IiwicHJldmlvdXNTY2VuZUtleSIsInVzZXJEYXRhIiwiZ2V0Q3VycmVudFVzZXJEYXRhUHJvZmlsZSIsImRlbGF5ZWRTRlhOYW1lcyIsInJvb3RNZWRpYXRvciIsIl9jdXJyZW50U2NlbmVOYW1lIiwiX2xvYWRpbmdTY3JlZW4iLCJzY2VuZU1hcCIsInNwbGFzaFNjcmVlbiIsImxvYWRBc3NldHMiLCJyZW1vdmVDdXJyZW50U2NlbmUiLCJvblNjZW5lQ29uZmlnTG9hZGVkIiwib25Db21wbGV0aW9uQWN0aW9uIiwic2NlbmVOYW1lVG9SZW1vdmUiLCJzd2FwU2NlbmUiLCJjcmVhdGVTY2VuZU1lZGlhdG9yIiwiY3VycmVudFNjZW5lIiwicmVtb3ZlU2NlbmUiLCJzaG93TG9hZGluZ1NjcmVlbiIsInRyeVJlbW92ZUxvYWRpbmdTY3JlZW4iLCJ1bmxvYWRBc3NldHNGb3JTY2VuZSIsImN1cnJlbnRTY2VuZUFzc2V0cyIsInByZXZTY2VuZUFzc2V0cyIsInJlbW92ZVNjZW5lQ29uZmlnRmlsZXNGcm9tUmVzb3VyY2VzIiwic2hvd1NjZW5lIiwidmlld3MiLCJjcmVhdGVDaGlsZFZpZXdzIiwic2NlbmVNZWRpYXRvciIsInNob3VsZFBlcnNpc3RTY2VuZSIsInNhdmVQcmV2aW91c1NjZW5lTmFtZSIsInNhdmVDdXJyZW50U2NlbmVOYW1lIiwib2xkU2NlbmUiLCJzd2FwQ2hpbGQiLCJzY2VuZSIsImdldExvYWRpbmdTY3JlZW4iLCJvbkxvYWRpbmdTY3JlZW5SZW1vdmVkIiwicmVtb3ZlTG9hZGluZ1NjcmVlbiIsIkRJU2VydmljZSIsInNlcnZpY2UiLCJzZXJ2aWNlcyIsIkFuaW0iLCJQcmlzb25UeXBlIiwiZGVsYXllZFNGWERhdGEiLCJwcm9wRHJvcCIsInJvcGVEcm9wIiwiUHJpc29uUHJvcCIsInByaXNvblR5cGUiLCJfc2VsZWN0ZWQiLCJzb3VuZERhdGEiLCJnZXRBbmltQWN0aW9uIiwiaWRsZU9wZW4iLCJjbG9zZSIsImFjdGlvblNGWFJlcGVhdCIsInNoYWtlU0ZYIiwiQzEiLCJpZGxlQ2xvc2VkIiwiTFJSSENoYXJhY3RlciIsInVtYnJlbGxhIiwicmVtb3ZlQXR0YWNobWVudCIsInVtYnJlbGxhQ293Ym95IiwidW1icmVsbGFQaXJhdGUiLCJzZXRXb2xmIiwiaGFuZGxlciIsInNldFdvbGZUZWV0aCIsInJlbW92ZURyZXNzIiwicmVtb3ZlU2xpcHBlcnMiLCJyZW1vdmVDYW5lIiwiY29zdHVtZU5hbWUiLCJiYXNrZXRDb3N0dW1lcyIsIkxSUkhBY3RNZWRpYXRvciIsImFzc2lnblBvc2l0aW9uVG9DaGFyYWN0ZXJzIiwiYWN0MkxycmhYUG9zaXRpb24iLCJhY3QyV29sZlhQb3NpdGlvbiIsImFjdDJMcnJoWFNjYWxlIiwiYWN0MldvbGZYU2NhbGUiLCJwcmlzb25Qcm9wIiwiQWJzdHJhY3RTdGFnZVByb3BzIiwib3V0bGluZUZpbHRlciIsImhvdmVyU2NyaXB0IiwiaG92ZXJTY3JpcHRNYXAiLCJyZW1vdmVIb3ZlclNjcmlwdCIsIkRpc2NvYmFsbEFuaW0iLCJEaXNjb2JhbGwiLCJyZWZsZWN0aW9uU3BpbmUiLCJpc0lkbGUiLCJzcGluIiwic3dpdGNoU3RhdGUiLCJhZGRPdXRsaW5lIiwic2VuZEFuYWx5dGljcyIsInNlbmRFdmVudER5bmFtaWNJbnRlcmFjdGlvbiIsImFuYWx5dGljc05hbWUiLCJCb29tQm94IiwiYnV0dG9uTGVmdE9mZiIsImJ1dHRvbk1pZGRsZU9mZiIsImJ1dHRvblJpZ2h0T2ZmIiwicGFpcnMiLCJtdXNpY3MiLCJnZXRNdXNpY3MiLCJzdG9yeVByZWZpeCIsInBhaXIiLCJ0b2dnbGVPZmYiLCJzZXRUb1RyYWNrMSIsInNldFRvVHJhY2syIiwic2V0VG9UcmFjazMiLCJ0b2dnbGVNdXNpY0ZvckJ1dHRvbiIsInRhcmdldEJ1dHRvbiIsInRhcmdldEJ1dHRvbk9mZiIsIm90aGVycyIsInRyYWNrTnVtYmVyIiwiaXNUb2dnbGVkT24iLCJ0b2dnbGVPbiIsImNoYW5nZU11c2ljIiwic3ByaXRlT2ZmIiwibXVzaWNOYW1lIiwiQ3VydGFpbnMiLCJvcGVuIiwiaWRsZUNsb3NlIiwiTG9jYXRvciIsIl9leGl0TGVmdCIsIl9leGl0UmlnaHQiLCJfZXhpdE1pZGRsZSIsIl9taWRkbGVMZWZ0IiwiX21pZGRsZVJpZ2h0IiwiX21pZGRsZSIsIl93b2xmR3Jhbm55IiwiX3dvbGZBcHBlcmFuY2VTcG90IiwiX2dyYW5ueURvb3JTcG90IiwiX2dyYW5ueURvZGdlIiwiX3BhcmVudEJlYXJQb3NpdGlvbiIsIl9iYWJ5QmVhclBvc2l0aW9uIiwiX3BhcmVudEJlYXJEb29yUG9zaXRpb24iLCJfYmFieUJlYXJEb29yUG9zaXRpb24iLCJfYmFieUJlYXJOb3RpY2luZ1Bvc2l0aW9uIiwiU3RvcnlNZWRpYXRvciIsInN0b3J5TWVkaWF0b3JEZWxlZ2F0ZSIsImdldFN0b3J5RGF0YSIsImluaXRQcm9wcyIsImluaXRMb2NhdG9ycyIsInNob3dDaGFyYWN0ZXJTZWxlY3Rpb24iLCJpbml0Q3VydGFpbnMiLCJpbml0QmFja2Ryb3AiLCJpbml0Qm9vbUJveCIsImluaXREaXNjb2JhbGwiLCJpbml0UGF1c2VCdXR0b24iLCJvblN0b3J5UGF1c2VkIiwiZGlzY29iYWxscmVmbGVjdGlvbiIsImRpc2NvQmFsbE1lZGlhdG9yIiwiRGlzY29CYWxsTWVkaWF0b3IiLCJtdXNpY0JveFZpZXciLCJhY3RNZWRpYXRvciIsImdldEFjdE1lZGlhdG9yIiwic3RhcnREaWFsb2ciLCJvblN0b3J5VGVybWluYXRlZCIsInN0YXJ0UmVwbGF5QWN0IiwicmVwbGF5QWN0TWVkaWF0b3IiLCJyZXBsYXlTdGF0ZXMiLCJnZXRSZXBsYXlNZWRpYXRvciIsImNsZWFuVXBQcm9wIiwiZGVpbml0UHJvcCIsImNsZWFuVXBSZXBsYXkiLCJjbGVhblVwQWN0IiwiY2hhcmFjdGVyU2VsZWN0aW9uUG9wT3ZlciIsImNyZWF0ZUNoYXJhY3RlclNlbGVjdFBvcE92ZXIiLCJzaG93Q3VydGFpbnMiLCJnZXRDdXJyZW50QWN0TWVkaWF0b3IiLCJzdGFydFN0b3J5IiwiV2VhdGhlclNraW5OYW1lIiwiV2VhdGhlclByb3AiLCJfY2hvaWNlSWQiLCJscnJoV2VhdGhlcjJDbG91ZHMiLCJ3ZWF0aGVyUHJvcHMiLCJzdW5Qcm9wIiwiZ2V0V2VhdGhlckFjdGlvbnMiLCJjcmVhdGVDbG91ZHlBY3Rpb25zIiwiY3JlYXRlU3VubnlBY3Rpb25zIiwiaXNDbG91ZENob2ljZSIsInNldENsb3VkU2tpbiIsImNyZWF0ZURyb3BBY3Rpb24iLCJjbG91ZCIsInNldFN1blNraW4iLCJzdW4iLCJzZXRJZGxlQW5pbSIsIlN0YWdlUHJvcHNBbmltYXRpb25zIiwiU3RhZ2VQcm9wc1NraW4iLCJTdGFnZVByb3BzIiwic3RhZ2VQcm9wIiwic2Z4TmFtZSIsImJhbGxyb29tQ2hhaXIiLCJiYWxscm9vbVRhYmxlIiwiY2FuZHljYW5lMSIsImNhbmR5Y2FuZTIiLCJjYW5keWNhbmUzIiwiY2FuZHljYW5lNCIsImdvbGRpbG9ja3NCZWQiLCJnb2xkaWxvY2tzQ2hhaXIiLCJnb2xkaWxvY2tzT3ZlbiIsInNreXNjcmFwZXIxIiwic2t5c2NyYXBlcjIiLCJ0cmVlIiwiVGhyb3dpbmdTa2luIiwiRm9yZXN0UHJvcHMiLCJnZXRGb3Jlc3RBY3Rpb24iLCJza3lTY3JhcGVyQW5pbSIsInNob3dGcm9tU2lkZSIsInNreVNjcmFwZXJQcm9wIiwiY2FuZGllcyIsImNhbmRpZXNBbmltIiwic2hvd0Zyb21Ub3AiLCJjYW5keVByb3AiLCJzaG93SWRsZSIsIlRocm93aW5nUHJvcCIsImhpdCIsInRocm93IiwiZHVja2llIiwidWtlbGVsZSIsIkRvb3IiLCJmcm9udEZyYW1lIiwiYmFja0ZyYW1lIiwia25vY2trbm9jayIsIlJlcGxheUFjdEhhbmRsZXIiLCJzdGF0ZUluZGV4IiwiTFJSSFJlcGxheUFjdE1lZGlhdG9yIiwicmVwbGF5QWN0SGFuZGxlciIsImdldEVuZERpYWxvZ0FjdGlvbiIsIkxSUkhTdG9yeU1lZGlhdG9yIiwiaW5pdFdlYXRoZXJQcm9wcyIsImluaXRGb3Jlc3RQcm9wcyIsImluaXREb29yUHJvcCIsImluaXRQcmlzb25Qcm9wIiwiaW5pdFRocm93aW5nUHJvcCIsIkxSUkhTdGFnZU1lZGlhdG9yIiwiR29sZGlsb2Nrc0NoYXJhY3RlciIsInRvTGF5IiwiZnJvbUxheSIsIkdvbGRpbG9ja3NBY3RNZWRpYXRvciIsInNldFNhdmVGb3JLZXkiLCJzZXRDb3N0dW1lcyIsInNldEJvd2xDaG9pY2VzIiwiZ2V0V2VhdGhlckNob2ljZSIsImdldEJlZENob2ljZSIsImdldEZ1cm5pdHVyZUNob2ljZSIsIldlYXRoZXIyU3VuIiwiV2VhdGhlcjJDbG91ZHMiLCJiZWQyV2F0ZXJCZWQiLCJiZWQySGFtbW9jayIsImJlZDJDb3VjaCIsIkdhcmRlblByb3BzIiwiZ2V0QWN0aW9uIiwiY3JlYXRlRmxvd2VyUHJvcHMiLCJjcmVhdGVCZWFuU3RhbGtQcm9wcyIsImhpdmVzIiwiY3JlYXRlSGl2ZVByb3BzIiwiY3JlYXRlUHJvcHMiLCJtaW5JbmRleCIsIm1heEluZGV4IiwicHJlZml4IiwicHJvcE5hbWUiLCJjcmVhdGVTa2lwRmxvd2VyUHJvcHMiLCJjcmVhdGVTa2lwQmVhblN0YWxrUHJvcHMiLCJjcmVhdGVTa2lwSGl2ZVByb3BzIiwiY3JlYXRlU2tpcFByb3BzIiwiR3JvdXBQcm9wIiwiY29udGFpbmVyTmFtZSIsImdldEFuaW1BY3Rpb25XaXRoU0ZYIiwiQm93bFNraW4iLCJCb3dsUHJvcCIsImJvd2wxIiwiYm93bDIiLCJib3dsMyIsInRhYmxlIiwiZ2V0U2hvd1RhYmxlQWN0aW9uIiwiZ2V0U2hvd0FuaW1FbXB0eVNtYWxsQm93bEFjdGlvbiIsInNob3dlbXB0eSIsImlkbGVlbXB0eSIsImVhdCIsIlNlYXRTa2luIiwiQmVhckZ1cm5pdHVyZVByb3AiLCJjaGFpclRhbGwiLCJjaGFpckxvdyIsImNoYWlyUmVndWxhciIsInNlYXQxIiwic2VhdDIiLCJzZWF0MyIsInRyYWluSG9ybk1hcCIsIkMzIiwiY2hhaXJTaXplcyIsImNoYWlyQnJva2VuIiwiYmVhbmJhZ0Jyb2tlbiIsInRyYWluQnJva2VuIiwiZ2V0U2hvd0FuaW1BY3Rpb25XaXRoU0ZYIiwiQmVkU2tpbiIsIkJlZFByb3AiLCJoYW1tb2NrMSIsImhhbW1vY2syIiwiaGFtbW9jazMiLCJwcm9wNCIsInByb3A2IiwiYmFieUJlYXJCZWQiLCJib3VuY2UiLCJHb2xkaWxvY2tzUmVwbGF5QWN0TWVkaWF0b3IiLCJHb2xkaWxvY2tzU3RvcnlNZWRpYXRvciIsImluaXRHYXJkZW5Qcm9wcyIsImluaXRCb3dsUHJvcHMiLCJpbml0QmVhckZ1cm5pdHVyZVByb3BzIiwiaW5pdEJlZFByb3BzIiwiZnVybml0dXJlIiwiR29sZGlsb2Nrc1N0YWdlTWVkaWF0b3IiLCJHb2Rtb3RoZXJTZWxlY3Rpb25TdGF0ZSIsIkdvZG1vdGhlckNvc3R1bWVDaG9pY2UiLCJDb3N0dW1lMUZhaXJ5IiwiQ29zdHVtZTFJbnZlbnRvciIsImdvZG1vdGhlciIsIkNpbmRlcmVsbGFTZWxlY3Rpb25TdGF0ZSIsIkNpbmRlcmVsbGFDb3N0dW1lQ2hvaWNlIiwic3BhY2VzdWl0IiwiU2hvZVNlbGVjdGlvblN0YXRlIiwic2hvZVNlbGVjdGlvbkNob2ljZSIsImdldEFkZENvc3R1bWVBY3Rpb24iLCJzaG9lQ2hvaWNlIiwiU2hvZXNDaG9pY2UiLCJzbGlwcGVycyIsImJvb3RzIiwiQ2FycmlhZ2VTZWxlY3Rpb25TdGF0ZSIsInByb3BTZWxlY3Rpb25Qb3BPdmVyIiwiQ2luZGVyZWxsYVN0b3J5RGF0YSIsImFjdDFDaW5kZXJlbGxhQmVzaWRlQ2FycmlhZ2VYUG9zaXRpb24iLCJnZXRQdW1wa2luVHJhbnNmb3JtYXRpb25BY3Rpb24iLCJHb2RNb3RoZXJPdXQiLCJDaW5kZXJlbGxhR2V0c0luVGhlQ2FycmlhZ2VTdGF0ZSIsImFjdDFDaW5kZXJlbGxhWFBvc2l0aW9uIiwiUHJpbmNlQ29zdHVtZUNob2ljZSIsImNoYXJtaW5nIiwiYm90IiwibWVnYXN0YXIiLCJiYWxscm9vbSIsInByaW5jZSIsIkNpbmRlcmVsbGFNb3ZlQ2hvaWNlIiwiZGFuY2UxIiwiQ2luZGVyZWxsYUFuc3dlclNlbGVjdGlvblN0YXRlIiwiQmFja2dyb3VuZFNlbGVjdGlvblN0YXRlIiwiQmFja2dyb3VuZENob2ljZSIsImJhbGxyb29tMSIsImNvdHRhZ2UxIiwiYWN0NSIsImhvdXNlMSIsImFjdDYiLCJjdXJyZW50QmFja2Ryb3AiLCJjaG9pY2VzTWFwIiwiZ2V0UHJvcEFjdGlvbiIsImdldENoYXJhY3RlckFjdGlvbiIsInNob3VsZFNob3dCYWxsUm9vbSIsImdvZE1vdGhlciIsIkRhbmNlU3RhdGUiLCJkZWZhdWx0QWN0aW9uIiwiR29kbW90aGVyR2hvc3RTdGF0ZSIsImFjdDJHb2Rtb3RoZXJHaG9zdFhQb3NpdGlvbiIsImdldEZhZGVJbkFjdGlvbiIsIkxvb3NlU2hvZVN0YXRlIiwic2hvZSIsImNob2ljZVRvVGhyb3dpbmdTa2luTWFwIiwicmVtb3ZlU2hvZXMiLCJzZXRPbmVTaG9lIiwiTWlkbmlnaHRUb3dlU3RhdGUiLCJnZXRBcHBlYXJBY3Rpb24iLCJzaG93U2VsZWN0ZWQiLCJUcmFuc2Zvcm1CYWNrU3RhdGUiLCJnZXRUcmFuc2Zvcm1CYWNrIiwiQ2luZGVyZWxsYU1vcFN0YXRlIiwiZ2V0RG9vclJpbmdBY3Rpb24iLCJQcmluY2VBdERvb3JTdGF0ZSIsImluaXRQcmluY2UiLCJnZXRTaG93UHJpbmNlQWN0aW9uIiwiZ2V0UHJpbmNlTW92ZUFjdGlvbiIsInNldFNob2VJbkhhbmQiLCJHb2Rtb3RoZXJHaG9zdE91dFN0YXRlIiwiZ2V0RmFkZU91dEFjdGlvbiIsImdldEhpZGVQdW1wa2luQWN0aW9uIiwiVHJ5T25TaG9lU3RhdGUiLCJnZXRSZW1vdmVTaG9lSW5IYW5kQWN0aW9uIiwiZ2V0T25lU2hvZUFjdGlvbiIsInJlbW92ZVNob2VJbkhhbmQiLCJDYXJyaWFnZUNob2ljZSIsIkNpbmRlcmVsbGFBbnN3ZXJDaG9pY2UiLCJMb29rQXJvdW5kU3RhdGUiLCJwcmluY2VTdGFydFBvc2l0aW9uWCIsImFjdDNMb29rQXJvdW5kV2Fsa09mZnNldCIsIkNpbmRlcmVsbGFEaWFsb2dTdGF0ZUZhY3RvcnkiLCJhY3QxSW50cm8xIiwiYWN0MkludHJvMSIsIm91dGZpdCIsInNob2VzIiwicHVtcGtpbiIsInB1bXBraW5jYXJyaWFnZSIsInB1bXBraW5jYXIiLCJwdW1wa2lucm9ja2V0IiwicmVzcG9uc2UiLCJiYWNrZ3JvdW5kQmFsbHJvb20iLCJiYWNrZ3JvdW5kR3JhbmRtYSIsImJhY2tncm91bmQzYmVhcnMiLCJ0cmFuc2Zvcm1CYWNrIiwiYWN0MUludHJvMiIsInN0b3J5MTUiLCJzdG9yeTE5Iiwic3RvcnkyMCIsInN0b3J5MjciLCJiYWxscm9vbTIiLCJzdG9yeTI5Iiwic3RvcnkzMCIsInN0b3J5MzIiLCJzdG9yeTM0IiwiZ2xhc3NzbGlwcGVyIiwic25lYWtlciIsImFzdHJvbmF1dGJvb3QiLCJyb2xlY2luZGVyZWxsYSIsInJvbGVwcmluY2VjaGFybWluZyIsInJvbGVmYWlyeWhlbHBlciIsIkNpbmRlcmVsbGFDaGFyYWN0ZXIiLCJtb3BwaW5nIiwiZGFuY2UyIiwiaG9wMSIsInNoYWtlMSIsIkNpbmRlcmVsbGFBY3RNZWRpYXRvciIsIlB1bXBraW5BbmluIiwiQ2FycmlhZ2VQcm9wIiwicm9ja2V0IiwiY2FyIiwiY2FycmlhZ2UxIiwiY2FyMSIsImdldFRyYW5zZm9ybUFjdGlvbiIsImdldEFycml2ZVNGWCIsImFwcGVhciIsInJvY2tldDEiLCJleGl0IiwiZ2V0RGVwYXJ0U0ZYIiwiQmFsbFJvb21Qcm9wIiwiQ2luZGVyZWxsYVJlcGxheUFjdE1lZGlhdG9yIiwiQ2luZGVyZWxsYVN0b3J5TWVkaWF0b3IiLCJpbml0Q2FycmlhZ2UiLCJpbml0QmFsbFJvb21Qcm9wIiwiQ2luZGVyZWxsYVN0YWdlTWVkaWF0b3IiLCJOYXZpZ2F0aW9uU2VydmljZU1hcHBpbmciLCJhZGRTY2VuZVRvTWFwIiwiU3BsYXNoIiwiRGVidWdTZXJ2aWNlIiwiZnBzTGFiZWwiLCJnZXRFbGVtZW50QnlJZCIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJpbm5lckhUTUwiLCJmcmFtZUNvdW50IiwiZnJhbWVyYXRlVGltZXIiLCJmcHMiLCJ0b0ZpeGVkIiwic3JBcHAiLCJjYXB0aW9uc0VsZW1lbnQiLCJtdXRlZFN0YXRlVmFsdWUiLCJjYXB0aW9uc011dGVkIiwidXBkYXRlTXV0ZWRTdGF0ZSIsInN1YnNjcmliZSIsImlzTXV0ZWQiLCJoaWRkZW4iLCJjYXB0aW9uVGV4dCIsIkFuYWx5dGljQWN0aW9ucyIsIkFydGh1ckJ1aWxkSW5mb1NlcnZpY2UiLCJidWlsZEluZm8iLCJidWlsZENvbmZpZyIsImVudiIsInZlcnNpb24iLCJhZXN0VGltZSIsIm55VGltZSIsInNob3J0UmV2IiwicHJpbnRUb0NvbnNvbGUiLCJlbnZpcm9ubWVudCIsImZvckluIiwicHJpbnREZWJ1Z0tleVZhbHVlIiwiaW1wbGVtZW50YXRpb24iLCJnZXRQbHVnaW4iLCJzZW5kIiwic3RhcnRHYW1lIiwib25iZWZvcmV1bmxvYWQiLCJlbmRHYW1lIiwiY2hhcmFjdGVyUm9sZXMiLCJjaG9pY2VJRCIsIm5hcnJhdGl2ZUludGVyYWN0aW9uIiwibGFiZWwiLCJkeW5hbWljSW50ZXJhY3Rpb24iLCJlbmRNZW51Q2hvaWNlIiwicGF1c2VNZW51Q2hvaWNlIiwic3RvcnlQYXVzZSIsInN0YXJ0U3RvcnlBY3QiLCJhcHBOYW1lIiwiR2FtZSIsImRlbHRhVGltZSIsImlzUGF1c2VkIiwic2hhcmVkIiwiZWxhcHNlZE1TIiwiX3Nob3VsZFVwZGF0ZSIsInByZXZpb3VzVmFsdWUiLCJwYXVzZUFsbCIsInNwcmluZ3JvbGxBcHAiLCJyZXN1bWVBbGwiLCJtdXRlTXVzaWMiLCJ1bm11dGVNdXNpYyIsIm11dGVTRlgiLCJ1bm11dGVTRlgiLCJtdXRlVk8iLCJ1bm11dGVWTyIsImZpbmRDYW52YXMiLCJjcmVhdGVTcHJpbmdyb2xsQXBwIiwiQXBwbGljYXRpb24iLCJ1c2VzIiwiR29vZ2xlQW5hbHl0aWNzIiwiY3JlYXRlUGl4aUFwcCIsInNpemVNYW5hZ2VyIiwiY3JlYXRlU2l6ZU1hbmFnZXIiLCJ2aWV3RmFjdG9yeSIsImNyZWF0ZVZpZXdGYWN0b3J5IiwiY3JlYXRlUm9vdE1lZGlhdG9yIiwiaW5pdERlcGVuZGVuY3kiLCJpbml0QXBwQ2FsbGJhY2tzIiwiYWRkVmlzaWJpbGl0eUNoYW5nZUxpc3RlbmVyIiwiaW5pdGlhbGlzZUdhbWVWb2x1bWUiLCJzaG93Rmlyc3RTY2VuZSIsImJsdXIiLCJ3YXNQYXVzZWQiLCJwYXVzZUdhbWUiLCJyZXN1bWVHYW1lIiwiZ2FtZVNhZmVXaWR0aCIsImdhbWVTYWZlSGVpZ2h0IiwiZ2FtZUxvYWRlciIsIm5hdmlnYXRpb25TZXJ2aWNlTWFwcGluZyIsIl9sb2FkZXIiLCJkZWJ1Z0FkZE5hdmlnYXRpb25Ub1dpbmRvdyIsImluaXRBbmFseXRpY3MiLCJnb1RvU2NlbmVXaXRob3V0TG9hZFNjcmVlbiIsImRlYnVnU2VydmljZSIsImRlaW5pdEFwcENhbGxiYWNrcyIsImRlc3Ryb3lSb290TWVkaWF0b3IiLCJkZXN0cm95Vmlld0ZhY3RvcnkiLCJkZXN0cm95U2l6ZU1hbmFnZXIiLCJkZXN0cm95UGl4aUFwcCIsImRlc3Ryb3lTcHJpbmdyb2xsQXBwIiwiYXNzZXRJRCIsIldFQkdMIiwicGl4aU9iaiIsImNvbXBsZXRlQ2FsbGJhY2siLCJyZW1vdmVDYWxsYmFja3MiLCJpc1BsYXlpbmdWbyIsInBsYXlWbyIsInZvVm9sdW1lIiwic2Z4Vm9sdW1lIiwibXVzaWNWb2x1bWUiLCJvblZPVm9sdW1lQ2hhbmdlZCIsIm9uU0ZYVm9sdW1lQ2hhbmdlZCIsIm9uTXVzaWNWb2x1bWVDaGFuZ2VkIiwiU3ByaW5ncm9sbCIsImZlYXR1cmVzIiwiY2FwdGlvbnMiLCJzb3VuZFZvbHVtZSIsInBvaW50ZXJTaXplIiwiY29udHJvbFNlbnNpdGl2aXR5IiwiYnV0dG9uU2l6ZSIsInJlbW92YWJsZUxheWVycyIsImh1ZFBvc2l0aW9uIiwicmVhZHkiLCJvbkFwcFJlYWR5Q2hhbmdlZCIsInRpY2tlciIs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bENqakcsS0FBS21pRyxjQUNMbmlHLEtBQUttaUcsWUFBYyxRLDRDQUtuQm5pRyxLQUFLb2lGLGVBQ0xwaUYsS0FBS29pRixhQUFhanVELFVBQ2xCbjBCLEtBQUtvaUYsYUFBZSxRLHlDQUt4QnBpRixLQUFLbWhHLGNBQWM5OUYsTUFBTStoRyxNQUFNMUcsVUFBVTErRixLQUFLcWxHLG1CQUM5Q3JsRyxLQUFLbWhHLGNBQWM5OUYsTUFBTWtoRyxZQUFZN0YsVUFBVTErRixLQUFLMGtHLHNCQUNwRDFrRyxLQUFLbWhHLGNBQWM5OUYsTUFBTWloRyxVQUFVNUYsVUFBVTErRixLQUFLeWtHLG9CQUNsRHprRyxLQUFLbWhHLGNBQWM5OUYsTUFBTWdoRyxTQUFTM0YsVUFBVTErRixLQUFLd2tHLG1CQUVqRHhrRyxLQUFLczVCLFFBQVFnc0UsT0FBT3B4RCxJQUFJbDBDLEtBQUswdUIsVSwyQ0FJN0IxdUIsS0FBS21oRyxjQUFjOTlGLE1BQU0raEcsTUFBTUcsWUFBWXZsRyxLQUFLcWxHLG1CQUNoRHJsRyxLQUFLbWhHLGNBQWM5OUYsTUFBTWtoRyxZQUFZZ0IsWUFBWXZsRyxLQUFLMGtHLHNCQUN0RDFrRyxLQUFLbWhHLGNBQWM5OUYsTUFBTWloRyxVQUFVaUIsWUFBWXZsRyxLQUFLeWtHLG9CQUNwRHprRyxLQUFLbWhHLGNBQWM5OUYsTUFBTWdoRyxTQUFTa0IsWUFBWXZsRyxLQUFLd2tHLG1CQUVuRHhrRyxLQUFLczVCLFFBQVFnc0UsT0FBT3A0RCxPQUFPbHRDLEtBQUswdUIsVSxtQ0FsTGhDLE9BQU8xdUIsS0FBS2doRyxlLGFBRVEvbEcsR0FDcEIrRSxLQUFLZ2hHLGNBQWdCL2xHLE0sS0NsUzdCLElBQUthLE9BQU9ndkIsSUFBSyxDQUNiLElBQUlrUixHQUFPLElBQUkya0UsR0FDZjdrRyxPQUFPZ3ZCLElBQU1rUixHQUViQSxHQUFLLzBCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMjY2LDFdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiZXhwb3J0IGVudW0gU2VydmljZU5hbWV7XG4gICAgTG9hZGluZ1NlcnZpY2UgPSBcIkxvYWRpbmdTZXJ2aWNlXCIsXG4gICAgU291bmRTZXJ2aWNlID0gXCJTb3VuZFNlcnZpY2VcIixcbiAgICBOYXZpZ2F0aW9uU2VydmljZSA9IFwiTmF2aWdhdGlvblNlcnZpY2VcIixcbiAgICBCdWlsZEluZm9TZXJ2aWNlID0gXCJCdWlsZEluZm9TZXJ2aWNlXCIsXG4gICAgQ2FtZXJhU2VydmljZSA9IFwiQ2FtZXJhU2VydmljZVwiLFxuICAgIENhcHRpb25TZXJ2aWNlID0gXCJDYXB0aW9uU2VydmljZVwiLFxuICAgIEFuYWx5dGljc1NlcnZpY2UgPSBcIkFuYWx5dGljc1NlcnZpY2VcIixcbn1cblxuZXhwb3J0IGVudW0gRGF0YU5hbWV7XG4gICAgZ2FtZVdpZHRoID0gXCJnYW1lV2lkdGhcIixcbiAgICBnYW1lSGVpZ2h0ID0gXCJnYW1lSGVpZ2h0XCIsXG4gICAgZ2FtZVNhZmVXaWR0aCA9IFwiZ2FtZVNhZmVXaWR0aFwiLFxuICAgIGdhbWVTYWZlSGVpZ2h0ID0gXCJnYW1lU2FmZUhlaWdodFwiLFxuICAgIERpYWxvZ0xpbmVEZWxlZ2F0ZSA9IFwiRGlhbG9nTGluZURlbGVnYXRlXCIsXG4gICAgQWN0aW9uTWFuYWdlckRlbGVnYXRlID0gXCJBY3Rpb25NYW5hZ2VyRGVsZWdhdGVcIixcbiAgICBJbnRlcmFjdGlvbkhhbmRsZXIgPSBcIkludGVyYWN0aW9uSGFuZGxlclwiLFxuICAgIEN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSA9IFwiQ3VlRGlhbG9nTGluZURlbGVnYXRlXCIsXG4gICAgQ2hvaWNlRGlhbG9nTGluZURlbGVnYXRlID0gXCJDaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGVcIixcbiAgICBhcHAgPSBcImFwcFwiLFxuICAgIHdlYXRoZXJQcm9wID0gXCJ3ZWF0aGVyUHJvcFwiLFxuICAgIGZvcmVzdFByb3AgPSBcImZvcmVzdFByb3BcIixcbiAgICB0aHJvd2luZ1Byb3AgPSBcInRocm93aW5nUHJvcFwiLFxuICAgIGRpc2NvYmFsbCA9IFwiZGlzY29iYWxsXCIsXG4gICAgYmFja2Ryb3AgPSBcImJhY2tkcm9wXCIsXG4gICAgcHJpc29uID0gXCJwcmlzb25cIixcbiAgICBkb29yID0gXCJkb29yXCIsXG4gICAgU3RhZ2VUcmFuc2l0aW9uID0gXCJTdGFnZVRyYW5zaXRpb25cIixcbiAgICBTdGFnZVN0YXRlRGVsZWdhdGUgPSBcIlN0YWdlU3RhdGVEZWxlZ2F0ZVwiLFxuICAgIFNlbGVjdGlvblBvcE92ZXJEZWxlZ2F0ZSA9IFwiU2VsZWN0aW9uUG9wT3ZlckRlbGVnYXRlXCIsXG4gICAgU3RvcnlEYXRhID0gXCJTdG9yeURhdGFcIixcbiAgICBwb3NpdGlvbkRhdGEgPSBcInBvc2l0aW9uRGF0YVwiLFxuICAgIHNjYWxlRGF0YSA9IFwic2NhbGVEYXRhXCIsXG4gICAgY2hhcmFjdGVycyA9IFwiY2hhcmFjdGVyc1wiLFxuICAgIGN1cnRhaW5zID0gXCJjdXJ0YWluc1wiLFxuICAgIHN0b3J5U2NyaXB0ID0gXCJzdG9yeVNjcmlwdFwiLFxuICAgIGdhcmRlbiA9IFwiZ2FyZGVuXCIsXG4gICAgYm93bCA9IFwiYm93bFwiLFxuICAgIGJlYXJGdXJuaXR1cmUgPSBcImJlYXJGdXJuaXR1cmVcIixcbiAgICBiZWQgPSBcImJlZFwiLFxuICAgIGxvY2F0b3IgPSBcImxvY2F0b3JcIixcbiAgICBjYXJyaWFnZSA9IFwiY2FycmlhZ2VcIixcbiAgICBiYWxscm9vbSA9IFwiYmFsbHJvb21cIixcbiAgICBwYXVzZUJ1dHRvbiA9IFwicGF1c2VCdXR0b25cIixcbiAgICBtdXNpY0JveCA9IFwibXVzaWNCb3hcIixcbiAgICBpc1JlcGxheSA9IFwiaXNSZXBsYXlcIixcbiAgICBnYW1lID0gXCJnYW1lXCIsXG4gICAgaXNQcm9tcHRTaG93aW5nID0gXCJpc1Byb21wdFNob3dpbmdcIixcbn0iLCJleHBvcnQgZW51bSBSb2xlIHtcbiAgICBsaXR0bGVSZWRIb29kID0gXCJsaXR0bGUtcmVkLXJpZGluZy1ob29kXCIsXG4gICAgd29sZiA9IFwid29sZlwiLFxuICAgIG5hcnJhdG9yID0gXCJuYXJyYXRvclwiLFxuICAgIGdyYW5kbWEgPSBcImdyYW5kbWFcIixcbiAgICBnb2xkaWxvY2tzID0gXCJnb2xkaWxvY2tzXCIsXG4gICAgYmFieUJlYXIgPSBcImJhYnktYmVhclwiLFxuICAgIHBhcmVudEJlYXIgPSBcInBhcmVudC1iZWFyXCIsXG4gICAgY2luZGVyZWxsYSA9IFwiY2luZGVyZWxsYVwiLFxuICAgIGdvZG1vdGhlciA9IFwiZ29kbW90aGVyXCIsXG4gICAgcHJpbmNlID0gXCJwcmluY2VcIixcbiAgICBub25lID0gXCJub25lXCJcbn0iLCJpbXBvcnQgeyBCYXNrZXRDaG9pY2UgfSBmcm9tIFwiLi4vc3RhZ2UvZmFjdG9yaWVzL0xSUkhEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcblxuZXhwb3J0IGVudW0gQ29zdHVtZXMge1xuICAgIGxpdHRsZVJlZEhvb2QgPSBcImxycmhcIixcbiAgICB3b2xmID0gXCJ3b2xmXCIsXG4gICAgd29mbHRlZXRoID0gXCJ3b2xmLXRlZXRoXCIsXG4gICAgY293Ym95ID0gXCJjb3dib3lcIixcbiAgICBncmFuZG1hID0gXCJncmFuZG1hXCIsXG4gICAgbmFycmF0b3IgPSBcIm5hcnJhdG9yXCIsXG4gICAgcGlyYXRlID0gXCJwaXJhdGVcIixcbiAgICBhc3Ryb25hdXQgPSBcImFzdHJvbmF1dFwiLFxuICAgIGNpbmRlcmVsbGEgPSBcImNpbmRlcmVsbGFcIixcbiAgICBmYWlyeWdvZG1vdGhlciA9IFwiZmFpcnlnb2Rtb3RoZXJcIixcbiAgICBnb2xkaXJvY2tzID0gXCJnb2xkaXJvY2tzXCIsXG4gICAgbW92aWVzdGFyID0gXCJtb3ZpZXN0YXJcIixcbiAgICBwcmluY2VjaGFybWluZyA9IFwicHJpbmNlY2hhcm1pbmdcIixcbiAgICBzdXBlcmhlcm9ncmFuZG1hID0gXCJzdXBlcmhlcm9ncmFuZG1hXCIsXG4gICAga2FyYXRlZ3JhbmRtYSA9IFwia2FyYXRlZ3JhbmRtYVwiLFxuICAgIG5vbmUgPSBcIm5vZGVcIixcbiAgICBrYXJhdGUgPSBcImthcmF0ZVwiLFxuICAgIHN1cGVyaGVybyA9IFwic3VwZXJoZXJvXCIsXG4gICAgcHVwcGFiZWFyID0gXCJwdXBwYWJlYXJcIixcbiAgICBtdW1tYWJlYXIgPSBcIm11bW1hYmVhclwiLFxuICAgIGJhYnliZWFyID0gXCJiYWJ5YmVhclwiLFxuICAgIGdvbGRpbG9ja3MgPSBcImdvbGRpbG9ja3NcIixcbiAgICBnb2xkaWZpc2ggPSBcImdvbGRpZmlzaFwiLFxuICAgIHByaW5jZW1lZ2FzdGFyID0gXCJwcmluY2VtZWdhc3RhclwiLFxuICAgIHByaW5jZWJvdCA9IFwicHJpbmNlYm90XCIsXG4gICAgaW52ZW50b3IgPSBcImludmVudG9yXCIsXG4gICAgZ2xhc3NzbGlwcGVycyA9IFwiZ2xhc3NzbGlwcGVyc1wiLFxuICAgIHNuZWFrZXJzID0gXCJzbmVha2Vyc1wiLFxuICAgIHNwYWNlYm9vdHMgPSBcInNwYWNlYm9vdHNcIixcbiAgICBtb3AgPSBcIm1vcFwiLFxuICAgIGJhc2tldCA9IFwiYmFza2V0XCIsXG4gICAgdG9vbGJveCA9IFwidG9vbGJveFwiLFxuICAgIHRyZWFzdXJlY2hlc3QgPSBcInRyZWFzdXJlY2hlc3RcIixcbiAgICByb2xlbGxyaCA9IFwicm9sZS1scnJoXCIsXG4gICAgcm9sZXRoZXdvbGYgPSBcInJvbGUtdGhld29sZlwiLFxuICAgIHJvbGVncmFubnkgPSBcInJvbGUtZ3Jhbm55XCIsXG4gICAgcm9sZXByaW5jZWNoYXJtaW5nID0gXCJyb2xlLXByaW5jZWNoYXJtaW5nXCIsXG4gICAgcm9sZWNpbmRlcmVsbGEgPSBcInJvbGUtY2luZGVyZWxsYVwiLFxuICAgIHJvbGVmYWlyeWhlbHBlciA9IFwicm9sZS1mYWlyeWhlbHBlclwiLFxuICAgIHJvbGVnb2xkaWVsb2NrcyA9IFwicm9sZS1nb2xkaWVsb2Nrc1wiLFxuICAgIHJvbGViYWJ5YmVhciA9IFwicm9sZS1iYWJ5YmVhclwiLFxuICAgIHJvbGVwYXJlbnRiZWFyID0gXCJyb2xlLXBhcmVudGJlYXJcIixcbiAgICByb2xlbmFycmF0b3IgPSBcInJvbGUtbmFycmF0b3JcIlxuXG59XG5cbmV4cG9ydCBjb25zdCB1bWJyZWxsYSA9IFwiY29zdHVtZXMvdW1iZXJlbGxhXCI7XG5leHBvcnQgY29uc3Qgc3VuaGF0ID0gXCJjb3N0dW1lcy9zdW5oYXRcIjtcbmV4cG9ydCBjb25zdCB3aW50ZXJoYXQgPSBcImNvc3R1bWVzL3dpbnRlcmhhdFwiO1xuXG5leHBvcnQgY29uc3QgY29zdHVtZXM6IE1hcDxDb3N0dW1lcywgc3RyaW5nW10+ID0gbmV3IE1hcChbXG4gICAgW0Nvc3R1bWVzLmxpdHRsZVJlZEhvb2QsIFtcImNvc3R1bWVzL2xpdHRsZS1yZWQtcmlkaW5naG9vZFwiXV0sXG4gICAgW0Nvc3R1bWVzLndvbGYsIFtcImNvc3R1bWVzL3dvbGZcIl1dLFxuICAgIFtDb3N0dW1lcy53b2ZsdGVldGgsIFtcImNvc3R1bWVzL3dvbGYtdGVldGhcIl1dLFxuICAgIFtDb3N0dW1lcy5jb3dib3ksIFtcImNvc3R1bWVzL2Nvd2JveWhhdFwiLCBcImNvc3R1bWVzL2Nvd2JveXBhbnRzXCJdXSxcbiAgICBbQ29zdHVtZXMuZ3JhbmRtYSwgW1wiY29zdHVtZXMvZ3JhbmRtYS1zbGlwcGVyc1wiLCBcImNvc3R1bWVzL2dyYW5kbWEtaGFpclwiLCBcImNvc3R1bWVzL2dyYW5kbWEtZ2xhc3Nlc1wiLCBcImNvc3R1bWVzL2dyYW5kbWEtY2FuZVwiLCBcImNvc3R1bWVzL2dyYW5kbWEtZHJlc3NcIl1dLFxuICAgIFtDb3N0dW1lcy5uYXJyYXRvciwgW1wiY29zdHVtZXMvbmFycmF0b3ItcGFudHNcIiwgXCJjb3N0dW1lcy9uYXJyYXRvci1oYXRcIiwgXCJjb3N0dW1lcy9uYXJyYXRvci1qYWNrZXRcIl1dLFxuICAgIFtDb3N0dW1lcy5waXJhdGUsIFtcImNvc3R1bWVzL3BpcmF0ZWJvb3RzXCIsIFwiY29zdHVtZXMvcGlyYXRlaGF0XCIsIFwiY29zdHVtZXMvcGlyYXRlc2hpcnRcIiwgXCJjb3N0dW1lcy9waXJhdGUtdGVsZXNjb3BlXCJdXSxcbiAgICBbQ29zdHVtZXMuYXN0cm9uYXV0LCBbXCJjb3N0dW1lcy9hc3Ryb25hdXQtaGVhZFwiLCBcImNvc3R1bWVzL2FzdHJvbmF1dC1sZWdzXCIsIFwiY29zdHVtZXMvYXN0cm9uYXV0LXRvcFwiXV0sXG4gICAgW0Nvc3R1bWVzLmNpbmRlcmVsbGEsIFtcImNvc3R1bWVzL2NpbmRlcmVsbGFcIl1dLFxuICAgIFtDb3N0dW1lcy5mYWlyeWdvZG1vdGhlciwgW1wiY29zdHVtZXMvZmFpcnlnb2Rtb3RoZXItdGlhcmFcIiwgXCJjb3N0dW1lcy9mYWlyeWdvZG1vdGhlci1kcmVzc1wiLCBcImNvc3R1bWVzL2ZhaXJ5Z29kbW90aGVyLWxlZnR3aW5nXCIsIFwiY29zdHVtZXMvZmFpcnlnb2Rtb3RoZXItcmlnaHR3aW5nXCIsIFwiY29zdHVtZXMvZmFpcnlnb2Rtb3RoZXItd2FuZFwiXV0sXG4gICAgW0Nvc3R1bWVzLmdvbGRpcm9ja3MsIFtcImNvc3R1bWVzL2dvbGRpcm9ja3MtaGFpclwiLCBcImNvc3R1bWVzL2dvbGRpcm9ja3MtdG9wXCIsIFwiY29zdHVtZXMvZ29sZGlyb2Nrcy1jaGFpblwiLCBcImNvc3R1bWVzL2dvbGRpcm9ja3MtYm9vdHNcIiwgXCJjb3N0dW1lcy9nb2xkaXJvY2tzLXdyaXN0YmFuZFwiXV0sXG4gICAgW0Nvc3R1bWVzLm1vdmllc3RhciwgW1wiY29zdHVtZXMvbW92aWVzdGFyLWRyZXNzXCJdXSxcbiAgICBbQ29zdHVtZXMucHJpbmNlY2hhcm1pbmcsIFtcImNvc3R1bWVzL3ByaW5jZWNoYXJtaW5nLWNyb3duXCIsIFwiY29zdHVtZXMvcHJpbmNlY2hhcm1pbmctcGFudHNcIiwgXCJjb3N0dW1lcy9wcmluY2VjaGFybWluZy10b3BcIl1dLFxuICAgIFtDb3N0dW1lcy5zdXBlcmhlcm9ncmFuZG1hLCBbXCJjb3N0dW1lcy9ncmFuZG1hLXNsaXBwZXJzXCIsIFwiY29zdHVtZXMvZ3JhbmRtYS1oYWlyXCIsIFwiY29zdHVtZXMvc3VwZXJoZXJvLWNhcGVcIiwgXCJjb3N0dW1lcy9zdXBlcmhlcm8tbGVmdGdsb3ZlXCIsIFwiY29zdHVtZXMvc3VwZXJoZXJvLXJpZ2h0Z2xvdmVcIiwgXCJjb3N0dW1lcy9zdXBlcmhlcm8tbWFza1wiLCBcImNvc3R1bWVzL3N1cGVyaGVyby1kcmVzc1wiXV0sXG4gICAgW0Nvc3R1bWVzLmthcmF0ZWdyYW5kbWEsIFtcImNvc3R1bWVzL2dyYW5kbWEtc2xpcHBlcnNcIiwgXCJjb3N0dW1lcy9ncmFuZG1hLWhhaXJcIiwgXCJjb3N0dW1lcy9ncmFuZG1hLWdsYXNzZXNcIiwgXCJjb3N0dW1lcy9rYXJhdGUtYmVsdFwiLCBcImNvc3R1bWVzL2thcmF0ZS1sZWZ0aGFuZFwiLCBcImNvc3R1bWVzL2thcmF0ZS1yaWdodGhhbmRcIl1dLFxuICAgIFtDb3N0dW1lcy5wdXBwYWJlYXIsIFtcImNvc3R1bWVzL3B1cHBhYmVhci1oZWFkXCIsIFwiY29zdHVtZXMvcHVwcGFiZWFyLWZlZXRcIiwgXCJjb3N0dW1lcy9wdXBwYWJlYXItcmlnaHRoYW5kXCIsIFwiY29zdHVtZXMvcHVwcGFiZWFyLWxlZnRoYW5kXCJdXSxcbiAgICBbQ29zdHVtZXMubXVtbWFiZWFyLCBbXCJjb3N0dW1lcy9tdW1tYWJlYXItZmVldFwiLCBcImNvc3R1bWVzL211bW1hYmVhci1oZWFkXCIsIFwiY29zdHVtZXMvbXVtbWFiZWFyLWxlZnRoYW5kXCIsIFwiY29zdHVtZXMvbXVtbWFiZWFyLXJpZ2h0aGFuZFwiLCBcImNvc3R1bWVzL211bW1hYmVhci10b3BcIl1dLFxuICAgIFtDb3N0dW1lcy5nb2xkaWxvY2tzLCBbXCJjb3N0dW1lcy9nb2xkaWxvY2tzLWRyZXNzXCIsIFwiY29zdHVtZXMvZ29sZGlsb2Nrcy1oYWlyXCIsIFwiY29zdHVtZXMvZ29sZGlsb2Nrcy1zaG9lc1wiXV0sXG4gICAgW0Nvc3R1bWVzLmdvbGRpZmlzaCwgW1wiY29zdHVtZXMvZ29sZGlmaXNoLWhlYWRcIiwgXCJjb3N0dW1lcy9nb2xkaWZpc2gtbGVmdGhhbmRcIiwgXCJjb3N0dW1lcy9nb2xkaWZpc2gtcmlnaHRoYW5kXCIsIFwiY29zdHVtZXMvZ29sZGlmaXNoLXRvcFwiXV0sXG4gICAgW0Nvc3R1bWVzLmJhYnliZWFyLCBbXCJjb3N0dW1lcy9iYWJ5YmVhci1sZWdzXCIsIFwiY29zdHVtZXMvYmFieWJlYXItdG9wXCIsIFwiY29zdHVtZXMvYmFieWJlYXItaGVhZFwiXV0sXG4gICAgW0Nvc3R1bWVzLnByaW5jZW1lZ2FzdGFyLCBbXCJjb3N0dW1lcy9wcmluY2VtZWdhc3Rhci1oYXRcIiwgXCJjb3N0dW1lcy9wcmluY2VtZWdhc3Rhci10b3BcIiwgXCJjb3N0dW1lcy9wcmluY2VtZWdhc3Rhci1nbGFzc2VzXCIsIFwiY29zdHVtZXMvcHJpbmNlbWVnYXN0YXItcGhvbmVcIiwgXCJjb3N0dW1lcy9wcmluY2VtZWdhc3Rhci1wYW50c1wiXV0sXG4gICAgW0Nvc3R1bWVzLnByaW5jZWJvdCwgW1wiY29zdHVtZXMvcHJpbmNlYm90LWhlYWRcIiwgXCJjb3N0dW1lcy9wcmluY2Vib3QtcmlnaHRoYW5kXCIsIFwiY29zdHVtZXMvcHJpbmNlYm90LWxlZnRoYW5kXCIsIFwiY29zdHVtZXMvcHJpbmNlYm90LWZlZXRcIiwgXCJjb3N0dW1lcy9wcmluY2Vib3QtdG9wXCJdXSxcbiAgICBbQ29zdHVtZXMuaW52ZW50b3IsIFtcImNvc3R1bWVzL2ludmVudG9yLXRvcFwiLCBcImNvc3R1bWVzL2ludmVudG9yLXJpZ2h0Z2xvdmVcIiwgXCJjb3N0dW1lcy9pbnZlbnRvci1sZWZ0Z2xvdmVcIiwgXCJjb3N0dW1lcy9pbnZlbnRvci1oYWlyXCIsIFwiY29zdHVtZXMvaW52ZW50b3ItZ29nZ2xlc1wiLCBcImNvc3R1bWVzL2Rpc2NvbWJvYnVsYXRvclwiXV0sXG4gICAgW0Nvc3R1bWVzLmdsYXNzc2xpcHBlcnMsIFtcImNvc3R1bWVzL2dsYXNzc2xpcHBlcnNcIl1dLFxuICAgIFtDb3N0dW1lcy5zbmVha2VycywgW1wiY29zdHVtZXMvc25lYWtlcnNcIl1dLFxuICAgIFtDb3N0dW1lcy5zcGFjZWJvb3RzLCBbXCJjb3N0dW1lcy9zcGFjZWJvb3RzXCJdXSxcbiAgICBbQ29zdHVtZXMubW9wLCBbXCJjb3N0dW1lcy9tb3BcIl1dLFxuICAgIFtDb3N0dW1lcy5ub25lLCBbXV0sXG4gICAgW0Nvc3R1bWVzLmJhc2tldCwgW1wiY29zdHVtZXMvYmFza2V0XCJdXSxcbiAgICBbQ29zdHVtZXMudG9vbGJveCwgW1wiY29zdHVtZXMvdG9vbGJveFwiXV0sXG4gICAgW0Nvc3R1bWVzLnRyZWFzdXJlY2hlc3QsIFtcImNvc3R1bWVzL3RyZWFzdXJlY2hlc3RcIl1dLFxuXSk7XG5cbmV4cG9ydCBlbnVtIFVtYnJlbGxhQ29zdHVtZSB7XG4gICAgdW1icmVsbGFQaXJhdGUgPSBcImNvc3R1bWVzL3BpcmF0ZS11bWJyZWxsYVwiLFxuICAgIHVtYnJlbGxhID0gXCJjb3N0dW1lcy91bWJyZWxsYVwiLFxuICAgIHVtYnJlbGxhQ293Ym95ID0gXCJjb3N0dW1lcy9jb3dib3ktYmlnaGF0XCIsXG59XG4iLCJcbmltcG9ydCB7IEdsb3dGaWx0ZXIgfSBmcm9tICdAcGl4aS9maWx0ZXItZ2xvdyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlldyc7XG5pbXBvcnQgeyBTaW1wbGVMaWdodG1hcEZpbHRlciB9IGZyb20gJ0BwaXhpL2ZpbHRlci1zaW1wbGUtbGlnaHRtYXAnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kQ2hpbGRCeU5hbWUodmlldzogUElYSS5EaXNwbGF5T2JqZWN0LCBuYW1lOiBzdHJpbmcpOiBQSVhJLkRpc3BsYXlPYmplY3Qge1xuICAgIHJldHVybiBmcmFtZXdvcmsuQ29udGFpbmVyVmlldy5nZXRDaGlsZEJ5TmFtZVJlY3Vyc2l2ZSh2aWV3LCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhvdmVyRWZmZXQoKTogR2xvd0ZpbHRlciB7XG4gICAgY29uc3QgZmlsdGVyID0gbmV3IEdsb3dGaWx0ZXIoXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRpc3RhbmNlOiAxNSxcbiAgICAgICAgICAgIG91dGVyU3RyZW5ndGg6IDIsXG4gICAgICAgICAgICBpbm5lclN0cmVuZ3RoOiAxLFxuICAgICAgICAgICAgY29sb3I6IDB4ZmZmZmZmLFxuICAgICAgICAgICAgcXVhbGl0eTogMC41XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUxpZ2h0TWFwKHZpZXc6IFZpZXcsIGZhZGVJbjogYm9vbGVhbiA9IHRydWUpOiBTaW1wbGVMaWdodG1hcEZpbHRlcntcbiAgICBjb25zdCBmaWx0ZXJUZXh0dXJlID0gZmluZENoaWxkQnlOYW1lKHZpZXcsIFwibGlnaHRtYXBcIikgYXMgZnJhbWV3b3JrLlNwcml0ZVZpZXc7XG4gICAgZmlsdGVyVGV4dHVyZS5hbHBoYSA9IC4xOyAvL2NoYWdlcyBzb3VyY2UgdGV4dHVyZSwgY2FuIGFuaW1hdGUgdGhpcyB0cmFuc2l0aW9uXG5cbiAgICBpZiAoIWZpbHRlclRleHR1cmUpe1xuICAgICAgICB0aHJvdyAnbmVlZCBhIHRleHR1cmUgY2FsbGVkIGxpZ2h0bWFwIGluIHRoZSBzY2VuZSdcbiAgICB9XG5cbiAgICAvKlxuICAgIGNvbnN0IGZpbHRlciA9IG5ldyBTaW1wbGVMaWdodG1hcEZpbHRlcihmaWx0ZXJUZXh0dXJlLnRleHR1cmUpO1xuICAgIGZpbHRlci5hbHBoYSA9IDA7XG4gICAgdmlldy5maWx0ZXJzID0gW2ZpbHRlcl07XG4gICAgcmV0dXJuIGZpbHRlcjtcbiAgICAqL1xuXG4gICAgaWYoZmFkZUluKXtcbiAgICAgICAgY29uc3QgZmlsdGVyID0gbmV3IFNpbXBsZUxpZ2h0bWFwRmlsdGVyKGZpbHRlclRleHR1cmUudGV4dHVyZSk7XG4gICAgICAgIGZpbHRlci5hbHBoYSA9IC41OyAvLyBoYXMgbm8gZWZmZWN0IG9uIGZpbmFsIHZpZ25ldHRlIGVmZmVjdFxuICAgICAgICB2aWV3LmZpbHRlcnMgPSBbZmlsdGVyXTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcbiAgICB9XG4gICAgXG4gICAgaWYoIWZhZGVJbil7ICAgICAgICBcbiAgICAgICAgY29uc3QgZmlsdGVyID0gbmV3IFNpbXBsZUxpZ2h0bWFwRmlsdGVyKGZpbHRlclRleHR1cmUudGV4dHVyZSk7XG4gICAgICAgIGZpbHRlclRleHR1cmUuYWxwaGEgPSAwO1xuICAgICAgICB2aWV3LmZpbHRlcnMgPSBbZmlsdGVyXTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcbiAgICAgICAgXG4gICAgfVxufSIsImltcG9ydCB7IElTdGF0ZUNvbnRleHQgfSBmcm9tIFwiLi9TdGF0ZUNvbnRleHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU3RhdGUgZXh0ZW5kcyBmcmFtZXdvcmsuU2NyaXB0IHtcblxuICAgIGNvbnRleHQ6IElTdGF0ZUNvbnRleHQgPSBudWxsO1xuXG4gICAgYWJzdHJhY3Qgb25Jbml0KCk6IHZvaWQ7XG5cbiAgICBhYnN0cmFjdCBvbkRlaW5pdCgpOiB2b2lkO1xufSIsImltcG9ydCBTdGF0ZSBmcm9tIFwiLi9TdGF0ZVwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSwgU2VydmljZU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBBY3Rpb25NYW5hZ2VyRGVsZWdhdGUgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL0FjdGlvbk1hbmFnZXJEZWxlZ2F0ZVwiO1xuaW1wb3J0IHsgSW50ZXJhY3Rpb25IYW5kbGVyIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL21lZGlhdG9ycy9TY2VuZU1lZGlhdG9yXCI7XG5pbXBvcnQgeyBJRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0lEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBTZWxlY3Rpb25Qb3BPdmVyRGVsZWdhdGUgfSBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBTb3VuZFNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NvdW5kU2VydmljZVwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YWdlU3RhdGUgZXh0ZW5kcyBTdGF0ZSB7XG4gICAgXG4gICAgcHJvdGVjdGVkIGdldCBzdGFnZVN0YXRlRGVsZWdhdGUoKTogU3RhZ2VTdGF0ZURlbGVnYXRle1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLlN0YWdlU3RhdGVEZWxlZ2F0ZSk7IFxuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IHNlbGVjdGlvblBvcE92ZXJEZWxlZ2F0ZSgpOiBTZWxlY3Rpb25Qb3BPdmVyRGVsZWdhdGV7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuU2VsZWN0aW9uUG9wT3ZlckRlbGVnYXRlKTsgXG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgYWN0aW9uTWFuYWdlckRlbGVnYXRlKCk6IEFjdGlvbk1hbmFnZXJEZWxlZ2F0ZXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5BY3Rpb25NYW5hZ2VyRGVsZWdhdGUpOyBcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBpbnRlcmFjdGlvbkhhbmRsZXIoKTogSW50ZXJhY3Rpb25IYW5kbGVye1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLkludGVyYWN0aW9uSGFuZGxlcik7IFxuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcnMoKTogTWFwPHN0cmluZywgQ2hhcmFjdGVyPntcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5jaGFyYWN0ZXJzKTsgXG4gICAgfVxuXG4gICAgcHVibGljIGdldCBwYXNzYWdlRGlhbG9nKCk6IElEaWFsb2dMaW5le1xuICAgICAgICByZXR1cm4gdGhpcy5kaWFsb2c7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBwYXVzZUJ1dHRvbigpOiBmcmFtZXdvcmsuU3ByaXRlVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUucGF1c2VCdXR0b24pO1xuICAgIH1cbiAgICBcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGlhbG9nOiBJRGlhbG9nTGluZSwgcHJvdGVjdGVkIGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgb25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5EaWFsb2dMaW5lRGVsZWdhdGUsIHRoaXMpO1xuICAgICAgICB0aGlzLnBhdXNlQnV0dG9uLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmRpYWxvZy5wbGF5RGlhbG9nKCk7XG4gICAgfVxuICAgIFxuICAgIG9uRGVpbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5EaWFsb2dMaW5lRGVsZWdhdGUsIG51bGwpO1xuICAgIH1cbiAgICBcbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnN0YWdlU3RhdGVEZWxlZ2F0ZSl7XG4gICAgICAgICAgICB0aGlzLnN0YWdlU3RhdGVEZWxlZ2F0ZS5vblN0YXRlVGVybWluYXRlZChuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRGVzdHJveSgpOnZvaWR7XG4gICAgICAgIC8vRE8gTk9USElOR1xuICAgIH1cblxuICAgIGNsZWFyKCl7fVxuXG4gICAgZ2V0UmVwbGF5KCk6IFN0YWdlU3RhdGV7XG4gICAgICAgIHRoaXMuZGlhbG9nID0gdGhpcy5kaWFsb2cuZ2V0UmVwbGF5KCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nLnNraXAoKTtcbiAgICAgICAgdGhpcy5zZXRDaGFyYWN0ZXJzVG9JZGxlKCk7XG4gICAgfVxuXG4gICAgY2FuY2VsKCl7XG4gICAgICAgIHRoaXMuZGlhbG9nLmNhbmNlbCgpO1xuICAgIH1cblxuICAgIHJlc3VtZSgpe1xuICAgICAgICB0aGlzLmRpYWxvZy5zaG93Q2FwdGlvbnMoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2V0Q2hhcmFjdGVyc1RvSWRsZSgpe1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZm9yRWFjaCgodmFsdWU6IENoYXJhY3Rlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQ6IENoYXJhY3RlciA9IHRoaXMuY2hhcmFjdGVycy5nZXQoa2V5KTtcbiAgICAgICAgICAgIGVsZW1lbnQucGxheUlkbGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RvcFNvdW5kKCkge1xuICAgICAgICBjb25zdCBzb3VuZFNlcnZpY2UgPSB0aGlzLmRpU2VydmljZS5nZXQoU2VydmljZU5hbWUuU291bmRTZXJ2aWNlKSBhcyBTb3VuZFNlcnZpY2U7XG4gICAgICAgIHNvdW5kU2VydmljZS5zdG9wU291bmQoKTtcbiAgICB9XG5cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YWdlU3RhdGVEZWxlZ2F0ZSB7XG4gICAgb25TdGF0ZVRlcm1pbmF0ZWQoc3RhdGVOYW1lOiBzdHJpbmcpOiB2b2lkO1xufVxuIiwiXG5pbXBvcnQgU2hhZG93U2hhZGVyIGZyb20gXCIuL1NoYWRvd1NoYWRlclwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuL1JvbGVcIjtcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gXCIuL0RpcmVjdGlvblwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VDaGFyYWN0ZXIgZXh0ZW5kcyBmcmFtZXdvcmsuU2NyaXB0IHtcbiAgICBwcm90ZWN0ZWQgX3NwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHB1YmxpYyBnZXQgc3BpbmUoKTogZnJhbWV3b3JrLlNwaW5lVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zcGluZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHJvbGUoKTogUm9sZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb2xlO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgX3JvbGU6IFJvbGU7XG5cbiAgICBwcm90ZWN0ZWQgX3Nsb3RzOiBhbnkgPSBudWxsO1xuXG5cbiAgICBwcm90ZWN0ZWQgX21vb2Q6IE1vb2QgPSBNb29kLm5ldXRyYWw7XG5cbiAgICBwdWJsaWMgc2V0IG1vb2QodjogTW9vZCkge1xuICAgICAgICB0aGlzLl9tb29kID0gdjtcbiAgICB9XG4gICAgcHVibGljIGdldCBtb29kKCk6IE1vb2Qge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9vZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHNwaW5lKHZhbHVlOiBmcmFtZXdvcmsuU3BpbmVWaWV3KSB7XG4gICAgICAgIHRoaXMuX3NwaW5lID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3Nsb3RzID0gdGhpcy5fc3BpbmUuc3BpbmVEYXRhLnNsb3RzO1xuICAgICAgICB0aGlzLnNldFNraW5CeU5hbWUodGhpcy5jaGFyYWN0ZXJUeXBlKTtcbiAgICAgICAgdGhpcy5yZW1vdmVDb3N0dW1lKCk7XG4gICAgICAgIHRoaXMuc2V0U2hhZG93KCk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGNoYXJhY3RlclR5cGU6IENoYXJhY3RlclR5cGUsIHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVDb3N0dW1lKCkge1xuICAgICAgICB0aGlzLl9zbG90cy5mb3JFYWNoKHNsb3QgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3BpbmUuc2tlbGV0b24uc2V0QXR0YWNobWVudChzbG90Lm5hbWUsIG51bGwpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2V0U2tpbkJ5TmFtZShza2luTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHZhciBza2VsZXRvbiA9IHRoaXMuX3NwaW5lLnNrZWxldG9uO1xuICAgICAgICBza2VsZXRvbi5zZXRTa2luKG51bGwpO1xuICAgICAgICBza2VsZXRvbi5zZXRTa2luQnlOYW1lKHNraW5OYW1lKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jaGFyYWN0ZXJQb3NpdGlvbjogQ2hhcmFjdGVyUG9zaXRpb24gPSBDaGFyYWN0ZXJQb3NpdGlvbi5zdGFuZGluZztcbiAgICBwdWJsaWMgZ2V0IGNoYXJhY3RlclBvc2l0aW9uKCk6IENoYXJhY3RlclBvc2l0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYXJhY3RlclBvc2l0aW9uO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IGNoYXJhY3RlclBvc2l0aW9uKHZhbHVlOiBDaGFyYWN0ZXJQb3NpdGlvbikge1xuICAgICAgICB0aGlzLl9jaGFyYWN0ZXJQb3NpdGlvbiA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdGFsa0FuaW1hdGlvbigpOiBBbmltYXRpb25zIHtcbiAgICAgICAgbGV0IGFuaW1hdGlvbk5hbWUgPSBBbmltYXRpb25zLnRhbGs7XG4gICAgICAgIHN3aXRjaCAodGhpcy5jaGFyYWN0ZXJQb3NpdGlvbikge1xuICAgICAgICAgICAgY2FzZSBDaGFyYWN0ZXJQb3NpdGlvbi5zdGFuZGluZzpcbiAgICAgICAgICAgICAgICBhbmltYXRpb25OYW1lID0gdGhpcy5nZXRNb29kQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm9sZSA9PSBSb2xlLm5hcnJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBBbmltYXRpb25zLm5hcnJhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDaGFyYWN0ZXJQb3NpdGlvbi5zZWF0aW5nOlxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBBbmltYXRpb25zLnRhbGtTZWF0ZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENoYXJhY3RlclBvc2l0aW9uLmxheWluZzpcbiAgICAgICAgICAgICAgICBhbmltYXRpb25OYW1lID0gQW5pbWF0aW9ucy50YWxrTGF5aW5nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDaGFyYWN0ZXJQb3NpdGlvbi5zbm9yaW5nOlxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBBbmltYXRpb25zLmlkbGVTbm9yZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYW5pbWF0aW9uTmFtZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldE1vb2RBbmltYXRpb24oKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fbW9vZCkge1xuICAgICAgICAgICAgY2FzZSBNb29kLm5ldXRyYWw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFuaW1hdGlvbnMudGFsaztcbiAgICAgICAgICAgIGNhc2UgTW9vZC5zaWxseTpcbiAgICAgICAgICAgICAgICByZXR1cm4gQW5pbWF0aW9ucy50YWxrc2lsbHk7XG4gICAgICAgICAgICBjYXNlIE1vb2QuYW5ncnk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFuaW1hdGlvbnMudGFsa2FuZ3J5O1xuICAgICAgICAgICAgY2FzZSBNb29kLnNjYXJlZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gQW5pbWF0aW9ucy5zaGFrZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaWRsZUFuaW1hdGlvbigpOiBBbmltYXRpb25zIHtcbiAgICAgICAgbGV0IGFuaW1hdGlvbk5hbWUgPSBBbmltYXRpb25zLmlkbGU7XG4gICAgICAgIHN3aXRjaCAodGhpcy5jaGFyYWN0ZXJQb3NpdGlvbikge1xuICAgICAgICAgICAgY2FzZSBDaGFyYWN0ZXJQb3NpdGlvbi5zdGFuZGluZzpcbiAgICAgICAgICAgICAgICBhbmltYXRpb25OYW1lID0gQW5pbWF0aW9ucy5pZGxlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDaGFyYWN0ZXJQb3NpdGlvbi5zZWF0aW5nOlxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBBbmltYXRpb25zLnNlYXRlZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2hhcmFjdGVyUG9zaXRpb24ubGF5aW5nOlxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBBbmltYXRpb25zLmlkbGVMYXlpbmc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENoYXJhY3RlclBvc2l0aW9uLnNub3Jpbmc6XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uTmFtZSA9IEFuaW1hdGlvbnMuaWRsZVNub3JlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbmltYXRpb25OYW1lO1xuICAgIH1cblxuXG4gICAgLy9NT1ZFTUVOVFxuXG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLl9zcGluZS52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5fc3BpbmUudmlzaWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgcGxheVRhbGsoKSB7XG4gICAgICAgIHRoaXMuX3NwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCB0aGlzLnRhbGtBbmltYXRpb24sIHRydWUpO1xuICAgIH1cblxuICAgIHN0YW5kKCl7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyUG9zaXRpb24gPSBDaGFyYWN0ZXJQb3NpdGlvbi5zdGFuZGluZztcbiAgICAgICAgdGhpcy5fc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIHRoaXMuaWRsZUFuaW1hdGlvbiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcGxheUlkbGUoKSB7XG4gICAgICAgIHRoaXMuX3NwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCB0aGlzLmlkbGVBbmltYXRpb24sIHRydWUpO1xuICAgIH1cblxuICAgIGdldFNlbGVjdEFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX3NwaW5lLCBBbmltYXRpb25zLnNlbGVjdCk7XG4gICAgfVxuXG4gICAgZ2V0SGlkZUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX3NwaW5lLCBBbmltYXRpb25zLmhpZGVEb3duKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5oaWRlKCkpXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgZ2V0U2hvd0FuZFJpc2VVcEFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2hvdygpKSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldFJpc2VVcEFjdGlvbigpLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMucGxheUlkbGUoKSksXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgZ2V0UmlzZVVwQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5fc3BpbmUsIEFuaW1hdGlvbnMucmlzZVVwKTtcbiAgICB9XG5cbiAgICAvL1NIQURPV1xuXG4gICAgcHJvdGVjdGVkIHNldFNoYWRvdygpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyID0gbmV3IFNoYWRvd1NoYWRlcihuZXcgUElYSS5Qb2ludCgwLjAyLCAxLjApKTtcbiAgICAgICAgdGhpcy5fc3BpbmUuZmlsdGVycyA9IFtmaWx0ZXJdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVTaGFkb3dQb3NpdGlvbigpIHtcbiAgICAgICAgLy8gdGFrZSBncm91bmQgWSBpbiBzY3JlZW4gY29vcmRzIHRvIHVuaWZvcm1zXG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuX3NwaW5lLmZpbHRlcnMgPyB0aGlzLl9zcGluZS5maWx0ZXJzWzBdIDogbnVsbDtcbiAgICAgICAgaWYgKCFmaWx0ZXIpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgY29uc3QgZ2xvYmFsUG9zID0gZnJhbWV3b3JrLlZlY3Rvci5nZXRHbG9iYWxQb3ModGhpcy5fc3BpbmUpXG4gICAgICAgIGZpbHRlci51bmlmb3Jtcy5mbG9vclkgPSBnbG9iYWxQb3MueTtcblxuICAgICAgICBjb25zdCBhcHBXaWR0aCA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5nYW1lV2lkdGgpO1xuICAgICAgICBjb25zdCBmYWN0b3IgPSBnbG9iYWxQb3MueCA8IChhcHBXaWR0aCAvIDIpID8gLTEgOiAxO1xuXG4gICAgICAgIGZpbHRlci51bmlmb3Jtcy5mYWN0b3IgPSBmYWN0b3I7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF91cGRhdGVJbXBsKGRlbHRhOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTaGFkb3dQb3NpdGlvbigpO1xuICAgIH1cblxuICAgIC8vRElSRUNUSU9OXG5cbiAgICBzZXREaXJlY3Rpb24oZGlyZWN0aW9uOiBEaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fc3BpbmUuc2NhbGUueCA9IGRpcmVjdGlvbjtcbiAgICB9XG5cblxufVxuXG5leHBvcnQgZW51bSBDaGFyYWN0ZXJUeXBlIHtcbiAgICBidXN0ZXIgPSBcImJ1c3RlclwiLFxuICAgIGFydGh1ciA9IFwiYXJ0aHVyXCIsXG4gICAgbXVmZnkgPSBcIm11ZmZ5XCIsXG4gICAgZHcgPSBcImR3XCIsXG59XG5cblxuZXhwb3J0IGVudW0gQW5pbWF0aW9ucyB7XG4gICAgaGlkZURvd24gPSBcImhpZGUtZG93blwiLFxuICAgIGhpZGVSaWdodCA9IFwiaGlkZS1yaWdodFwiLFxuICAgIGlkbGUgPSBcImlkbGVcIixcbiAgICByaXNlTGVmdCA9IFwicmlzZS1sZWZ0XCIsXG4gICAgcmlzZVVwID0gXCJyaXNlLXVwXCIsXG4gICAgdGFsayA9IFwidGFsa1wiLFxuICAgIHdhbGsgPSBcIndhbGtcIixcbiAgICB3YWxrT24gPSBcIndhbGstb25cIixcbiAgICBuYXJyYXRlID0gXCJuYXJyYXRlXCIsXG4gICAganVtcCA9IFwianVtcFwiLFxuICAgIGxlYXBmcm9nID0gXCJsZWFwZnJvZ1wiLFxuICAgIHJ1biA9IFwicnVuXCIsXG4gICAgc2VsZWN0ID0gXCJzZWxlY3RcIixcbiAgICBzaGFrZSA9IFwic2hha2VcIixcbiAgICB0YWxrYW5ncnkgPSBcInRhbGstYW5ncnlcIixcbiAgICB0YWxrc2lsbHkgPSBcInRhbGstc2lsbHlcIixcbiAgICBkYW5jZSA9IFwiZGFuY2VcIixcbiAgICBkYW5jZTIgPSBcImRhbmNlMlwiLFxuICAgIGZsaXAgPSBcImZsaXBcIixcbiAgICBzZWF0ZWQgPSBcInNlYXRlZC1tZWRpdW1cIixcbiAgICB0b0xheSA9IFwidG8tbGF5XCIsXG4gICAgZnJvbUxheSA9IFwiZnJvbS1sYXlcIixcbiAgICBtb3BwaW5nID0gXCJtb3BwaW5nXCIsXG4gICAgdGFsa1NlYXRlZCA9IFwidGFsay1zZWF0ZWQtbWVkaXVtXCIsXG4gICAgdGFsa0xheWluZyA9IFwidGFsay1sYXlpbmdcIixcbiAgICBpZGxlTGF5aW5nID0gXCJpZGxlLWxheWluZ1wiLFxuICAgIGlkbGVTbm9yZSA9IFwiaWRsZS1zbm9yZVwiLFxuICAgIGNlbGVicmF0ZSA9IFwiY2VsZWJyYXRlXCJcbn1cblxuZXhwb3J0IGVudW0gTW9vZCB7XG4gICAgbmV1dHJhbCA9IFwibmV1dHJhbFwiLFxuICAgIHNpbGx5ID0gXCJzaWxseVwiLFxuICAgIGFuZ3J5ID0gXCJhbmdyeVwiLFxuICAgIHNjYXJlZCA9IFwic2hha2luZ1wiXG59XG5cbmV4cG9ydCBlbnVtIENoYXJhY3RlclBvc2l0aW9uIHtcbiAgICBzdGFuZGluZyA9IFwic3RhbmRpbmdcIixcbiAgICBzZWF0aW5nID0gXCJzZWF0aW5nXCIsXG4gICAgbGF5aW5nID0gXCJsYXlpbmdcIixcbiAgICBzbm9yaW5nID0gXCJzbm9yaW5nXCIsXG59XG4iLCJleHBvcnQgZW51bSBEaXJlY3Rpb24ge1xuICAgIGxlZnQgPSAxLFxuICAgIHJpZ2h0ID0gLTFcbn0iLCJpbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBJU2VsZWN0aW9uUG9wT3ZlciB9IGZyb20gXCIuLi8uLi9wb3BvdmVycy9TZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9EaWFsb2dMaW5lRGVsZWdhdGVcIjtcbmltcG9ydCB7IENob2ljZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DaG9pY2VEaWFsb2dMaW5lXCI7XG5pbXBvcnQgU2NlbmVNZWRpYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvbWVkaWF0b3JzL1NjZW5lTWVkaWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU2VsZWN0aW9uU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIGltcGxlbWVudHMgQ2hvaWNlRGlhbG9nTGluZURlbGVnYXRlIHtcblxuICAgIHByaXZhdGUgZ2V0IGlzUmVwbGF5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmlzUmVwbGF5KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNob2ljZURpYWxvZygpOiBDaG9pY2VEaWFsb2dMaW5lIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlhbG9nIGFzIENob2ljZURpYWxvZ0xpbmU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBwYXVzZUJ1dHRvbigpOiBmcmFtZXdvcmsuU3ByaXRlVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUucGF1c2VCdXR0b24pO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGNob2ljZURpYWxvZzogQ2hvaWNlRGlhbG9nTGluZSxcbiAgICAgICAgcHJvdGVjdGVkIHNlbGVjdFBvcG92ZXI6IElTZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihjaG9pY2VEaWFsb2csIGRpU2VydmljZSk7XG4gICAgfVxuXG4gICAgb25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRpc2FibGVQYXVzZUJ1dHRvbigpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5DaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUsIHRoaXMpO1xuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuYnV0dG9ucy5mb3JFYWNoKChidXR0b24sIGluZGV4KSA9PiB0aGlzLnNldEJ1dHRvbkxpc3RlbmVyKCBidXR0b24sIGluZGV4KSk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uUG9wT3ZlckRlbGVnYXRlLmF0dGFjaFBvcG92ZXIodGhpcy5zZWxlY3RQb3BvdmVyKTtcbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLmluaXQoKTtcbiAgICAgICAgdGhpcy5kaWFsb2cucGxheURpYWxvZygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGlzYWJsZVBhdXNlQnV0dG9uKCkge1xuICAgICAgICBpZiAodGhpcy5pc1JlcGxheSl7cmV0dXJuO31cbiAgICAgICAgdGhpcy5wYXVzZUJ1dHRvbi50aW50ID0gMHg2NjY2NjY7XG4gICAgICAgIHRoaXMucGF1c2VCdXR0b25bU2NlbmVNZWRpYXRvci5QcmVzc2VkTGlzdGVuZXJLZXldLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIHByaXZhdGUgZW5hYmxlUGF1c2VCdXR0b24oKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVwbGF5KXtyZXR1cm47fVxuICAgICAgICB0aGlzLnBhdXNlQnV0dG9uLnRpbnQgPSAweEZGRkZGRjtcbiAgICAgICAgdGhpcy5wYXVzZUJ1dHRvbltTY2VuZU1lZGlhdG9yLlByZXNzZWRMaXN0ZW5lcktleV0uaXNBY3RpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRCdXR0b25MaXN0ZW5lcihidXR0b24sIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSB0aGlzLmRpYWxvZy5nZXRMaW5rKGluZGV4KTtcbiAgICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGVyLnNldEJ1dHRvblByZXNzZWRMaXN0ZW5lcihidXR0b24sICgpID0+IHRoaXMub25DaG9pY2UobGluay5saW5rKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLmFjdGl2ZWJ1dHRvbnNbaW5kZXhdID0gISFsaW5rO1xuICAgIH1cblxuICAgb25DaG9pY2VzQmVpbmdQcmVzZW50ZWQoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICAvL0RPIE5PVEhJTkdcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2U6IHN0cmluZykge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZSk7XG4gICAgICAgIHRoaXMuZGlkVGVybWluYXRlKGNob2ljZSk7XG4gICAgfVxuXG4gICAgb25EZWluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uUG9wT3ZlckRlbGVnYXRlLmRldHRhY2hQb3BvdmVyKHRoaXMuc2VsZWN0UG9wb3Zlcik7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkNob2ljZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgbnVsbCk7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcbiAgICAgICAgdGhpcy5lbmFibGVQYXVzZUJ1dHRvbigpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCByZW1vdmVJbnRlcmF0aW9ucygpe1xuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuYnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHRoaXMuaW50ZXJhY3Rpb25IYW5kbGVyLnJlbW92ZUJ1dHRvblByZXNzZWRMaXN0ZW5lcihidXR0b24pKTtcbiAgICB9XG5cbiAgICBvbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5kZWluaXQoKTtcbiAgICAgICAgc3VwZXIub25EZXN0cm95KCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNoZWNrQ2hvaWNlTWFkZSgpOmJvb2xlYW57XG4gICAgICAgIGlmICh0aGlzLmNob2ljZURpYWxvZy5oYXNDaG9pY2UoKSkge1xuICAgICAgICAgICAgdGhpcy5vbkNob2ljZSh0aGlzLmNob2ljZURpYWxvZy5jaG9pY2VJZCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc2tpcCgpe1xuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuaGlkZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5za2lwKCk7XG4gICAgICAgICAgICB0aGlzLnNldENoYXJhY3RlcnNUb0lkbGUoKTtcbiAgICAgICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLmZpbmlzaENob2ljZSh0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCkpO1xuICAgICAgICAgICAgdGhpcy5kaWRUZXJtaW5hdGUodGhpcy5jaG9pY2VEaWFsb2cuZ2V0RGVmYXVsdENob2ljZSgpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldFBvcE92ZXJCdXR0b25BY3RpdmUoKSB7XG4gICAgICAgIHRoaXMuc2V0QnV0dG9uTGlzdGVuZXJUb0FjdGl2ZSh0cnVlKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2V0UG9wT3ZlckJ1dHRvbkluYWN0aXZlKCkge1xuICAgICAgICB0aGlzLnNldEJ1dHRvbkxpc3RlbmVyVG9BY3RpdmUoZmFsc2UpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRCdXR0b25MaXN0ZW5lclRvQWN0aXZlKGFjdGl2ZSkge1xuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IGJ1dHRvbltTY2VuZU1lZGlhdG9yLlByZXNzZWRMaXN0ZW5lcktleV1cbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmlzQWN0aXZlID0gYWN0aXZlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxufSIsImltcG9ydCBTZWxlY3Rpb25Qb3BPdmVyIGZyb20gXCIuL1NlbGVjdGlvblBvcE92ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNvblNlbGVjdGlvblBvcE92ZXIgZXh0ZW5kcyBTZWxlY3Rpb25Qb3BPdmVyIDxJY29uVHlwZT4ge1xuICAgIFxuICAgIHByb3RlY3RlZCBnZXRTa2luTmFtZShzZWxlY3Rpb25UeXBlOiBJY29uVHlwZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb25UeXBlO1xuICAgIH1cbn1cblxuZXhwb3J0IGVudW0gSWNvblR5cGUge1xuICAgIGFuZ3J5ID0gXCJhbmdyeVwiLFxuICAgIGhhcHB5ID0gXCJoYXBweVwiLFxuICAgIHNpbGx5ID0gXCJzaWxseVwiLFxuICAgIHN1bm55ID0gXCJzdW5ueVwiLFxuICAgIGNsb3VkeSA9IFwiY2xvdWR5XCIsXG4gICAgd2FsayA9IFwid2Fsa1wiLFxuICAgIGRpc2FwcGVhciA9IFwiZGlzYXBwZWFyXCIsXG4gICAgYXBwbGF1c2UgPSBcImFwcGxhdXNlXCIsXG4gICAgZHVtZHVtZHVtID0gXCJkdW1kdW1kdW1cIixcbiAgICBmb2xleTEgPSBcImZvbGV5MVwiLFxuICAgIGZvbGV5MiA9IFwiZm9sZXkyXCIsXG4gICAgZm9sZXkzID0gXCJmb2xleTNcIixcbiAgICBnYXNwID0gXCJnYXNwXCIsXG4gICAganVtcCA9IFwianVtcFwiLFxuICAgIGRhbmNlID0gXCJkYW5jZVwiLFxuICAgIGRpbmdkb25nID0gXCJkaW5nZG9uZ1wiLFxuICAgIGhvbmtob25rID0gXCJob25raG9ua1wiLFxuICAgIGFyb29nYSA9IFwiYXJvb2dhXCIsXG4gICAgc2hha2UgPSBcInNoYWtlXCIsXG4gICAgYmFuZyA9IFwiYmFuZ1wiLFxuICAgIHBvcCA9IFwicG9wXCIsXG4gICAgY3Jhc2ggPSBcImNyYXNoXCIsXG4gICAgc2FkID0gXCJzYWRcIixcbn1cblxuZXhwb3J0IGVudW0gSWNvbkFuaW1hdGlvbntcbiAgICBpZGxlID0gXCJpZGxlXCIsXG4gICAgc2hvdyA9IFwic2hvd1wiLFxuICAgIGhpZGUgPSBcImhpZGVcIlxufSIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyIGZyb20gXCIuLi8uLi9wb3BvdmVycy9Db3N0dW1lU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IHsgQ2hvaWNlRGlhbG9nTGluZURlbGVnYXRlLCBDdWVEaWFsb2dMaW5lRGVsZWdhdGUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9EaWFsb2dMaW5lRGVsZWdhdGVcIjtcbmltcG9ydCBTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IHsgQ3VlQ2hvaWNlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0N1ZUNob2ljZURpYWxvZ0xpbmVcIjtcbmltcG9ydCB7IEdMQ29zdHVtZUNob2ljZSB9IGZyb20gXCIuLi8uLi9mYWN0b3JpZXMvR29sZGlsb2Nrc0RpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IEJhY2tkcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9CYWNrZHJvcFwiO1xuaW1wb3J0IFdlYXRoZXJQcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9XZWF0aGVyUHJvcHNcIjtcbmltcG9ydCB7IENvc3R1bWVzIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ29zdHVtZXNcIjtcbmltcG9ydCBHb2xkaWxvY2tzU3RvcnlEYXRhIGZyb20gXCIuLi9Hb2xkaWxvY2tzU3RvcnlEYXRhXCI7XG5pbXBvcnQgR29sZGlsb2Nrc0NoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Hb2xkaWxvY2tzQ2hhcmFjdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdvbGRpbG9ja3NFbnRyYW5jZVN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUgaW1wbGVtZW50cyBDdWVEaWFsb2dMaW5lRGVsZWdhdGUsIENob2ljZURpYWxvZ0xpbmVEZWxlZ2F0ZSB7XG5cbiAgICBwcml2YXRlIGNob2ljZVRvQ29zdHVtZU1hcDogTWFwPHN0cmluZywgQ29zdHVtZXM+ID0gbmV3IE1hcChbXG4gICAgICAgIFtHTENvc3R1bWVDaG9pY2UuQ29zdHVtZTFHTCwgQ29zdHVtZXMuZ29sZGlsb2Nrc10sXG4gICAgICAgIFtHTENvc3R1bWVDaG9pY2UuQ29zdHVtZTFHUiwgQ29zdHVtZXMuZ29sZGlyb2Nrc10sXG4gICAgICAgIFtHTENvc3R1bWVDaG9pY2UuQ29zdHVtZTFHRiwgQ29zdHVtZXMuZ29sZGlmaXNoXSxcbiAgICBdKTtcblxuICAgIHByaXZhdGUgc3BpbmVzOiBNYXA8c3RyaW5nLCBmcmFtZXdvcmsuU3BpbmVWaWV3PiA9IG5ldyBNYXAoKTtcblxuICAgIHByb3RlY3RlZCBnZXQgY2hhcmFjdGVyKCk6IEdvbGRpbG9ja3NDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdvbGRpbG9ja3MpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXI7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgcGFyZW50KCk6IEdvbGRpbG9ja3NDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnBhcmVudEJlYXIpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXI7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgYmFieSgpOiBHb2xkaWxvY2tzQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5iYWJ5QmVhcikgIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBiYWNrZHJvcCgpOiBCYWNrZHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmFja2Ryb3ApO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgd2VhdGhlclByb3AoKTogV2VhdGhlclByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLndlYXRoZXJQcm9wKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihkaWFsb2c6IEN1ZUNob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHByaXZhdGUgY29zdHVtZVNlbGVjdGlvblBvcE92ZXI6IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihkaWFsb2csIGNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuQ3VlRGlhbG9nTGluZURlbGVnYXRlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zZXR1cCgpO1xuICAgIH1cblxuICAgIHNldHVwKCkge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgdGhpcy5iYWJ5LmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN1cGVyLm9uSW5pdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UG9wT3ZlckJ1dHRvbkluYWN0aXZlKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgb25DdWUoKSB7XG4gICAgICAgIHRoaXMuaW5pdENoYXJhY3RlcigpO1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLnggPSBHb2xkaWxvY2tzU3RvcnlEYXRhLmFjdDFHb2xkaWxvY2tzT2ZmU2NyZWVuWFBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5zaG93KCk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0V2Fsa1RvUG9zaXRpb25BY3Rpb24oR29sZGlsb2Nrc1N0b3J5RGF0YS5hY3QxR29sZGlsb2Nrc1dhbGtUb1hQb3NpdGlvbiwgdGhpcy5jaGFyYWN0ZXIueSwgMS41KVxuICAgICAgICAgICAgXSlcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0Q2hhcmFjdGVyKCkge1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zaG93KCk7XG4gICAgICAgIHRoaXMucGFyZW50LmhpZGUoKTtcbiAgICAgICAgdGhpcy5iYWJ5LmhpZGUoKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcblxuICAgICAgICB0aGlzLnNldENvc3R1bWUoY2hvaWNlSWQpO1xuXG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmdldE9uU2VsZWN0QW5pbUFjdGlvbih0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldENvc3R1bWVBY3Rpb24odGhpcy5jaG9pY2VUb0Nvc3R1bWVNYXAuZ2V0KGNob2ljZUlkKSksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIucGxheVdhbGsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlkVGVybWluYXRlKGNob2ljZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKSlcbiAgICAgICAgICAgIH0pKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRDb3N0dW1lKGNob2ljZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5jb3N0dW1lU2VsZWN0aW9uUG9wT3Zlci5zZXRTZWxlY3RlZCh0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZXNCZWluZ1ByZXNlbnRlZChjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ2hvaWNlTWFkZSgpKSB7IHJldHVybjsgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFBvcE92ZXJCdXR0b25BY3RpdmUoKTtcblxuICAgICAgICAgICAgdGhpcy5zcGluZXMuc2V0KEdMQ29zdHVtZUNob2ljZS5Db3N0dW1lMUdMLCB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmJ1dHRvbkxlZnQpO1xuICAgICAgICAgICAgdGhpcy5zcGluZXMuc2V0KEdMQ29zdHVtZUNob2ljZS5Db3N0dW1lMUdSLCB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmJ1dHRvbk1pZGRsZSk7XG4gICAgICAgICAgICB0aGlzLnNwaW5lcy5zZXQoR0xDb3N0dW1lQ2hvaWNlLkNvc3R1bWUxR0YsIHRoaXMuY29zdHVtZVNlbGVjdGlvblBvcE92ZXIuYnV0dG9uUmlnaHQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbkRlaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuQ3VlRGlhbG9nTGluZURlbGVnYXRlLCBudWxsKTtcbiAgICAgICAgc3VwZXIub25EZWluaXQoKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmluaXRDaGFyYWN0ZXIoKTtcbiAgICAgICAgY29uc3QgY2hvaWNlSWQgPSB0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNldENvc3R1bWUodGhpcy5jaG9pY2VUb0Nvc3R1bWVNYXAuZ2V0KGNob2ljZUlkKSk7XG4gICAgICAgIHRoaXMud2VhdGhlclByb3Auc2tpcCgpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxufSIsIlxuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBQcm9wU2VsZWN0aW9uUG9wT3ZlciBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvUHJvcFNlbGVjdGlvblBvcE92ZXJcIjtcbmltcG9ydCB7IENob2ljZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DaG9pY2VEaWFsb2dMaW5lXCI7XG5pbXBvcnQgR2FyZGVuUHJvcHMgZnJvbSBcIi4uLy4uL3Byb3BzL0dhcmRlblByb3BzXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYXJkZW5Qcm9wU2VsZWN0aW9uU3RhdGUgZXh0ZW5kcyBTZWxlY3Rpb25TdGF0ZSB7XG5cbiAgICBwdWJsaWMgZ2V0IGdhcmRlbigpOiBHYXJkZW5Qcm9wcyB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZ2FyZGVuKSBhcyBHYXJkZW5Qcm9wc1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGNob2ljZURpYWxvZ0xpbmU6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHNlbGVjdFBvcG92ZXI6IFByb3BTZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihjaG9pY2VEaWFsb2dMaW5lLCBzZWxlY3RQb3BvdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgY29uc3Qgb25Db21wbGV0ZSA9ICgpID0+IHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZUlkKSk7XG4gICAgICAgIHRoaXMuZ2FyZGVuLnNob3coY2hvaWNlSWQsIG9uQ29tcGxldGUpO1xuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuZ2FyZGVuLmNob2ljZUlkID0gdGhpcy5jaG9pY2VEaWFsb2cuZ2V0RGVmYXVsdENob2ljZSgpO1xuICAgICAgICB0aGlzLmdhcmRlbi5za2lwKCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG59XG4iLCJcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgUHJvcFNlbGVjdGlvblBvcE92ZXIgZnJvbSBcIi4uLy4uL3BvcG92ZXJzL1Byb3BTZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBCb3dsUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQm93bFByb3BcIjtcbmltcG9ydCBCYWNrZHJvcCwgeyBCYWNrRHJvcFNraW4gfSBmcm9tIFwiLi4vLi4vcHJvcHMvQmFja2Ryb3BcIjtcbmltcG9ydCBHYXJkZW5Qcm9wcyBmcm9tIFwiLi4vLi4vcHJvcHMvR2FyZGVuUHJvcHNcIjtcbmltcG9ydCBXZWF0aGVyUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvV2VhdGhlclByb3BzXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBHb2xkaWxvY2tzU3RvcnlEYXRhIGZyb20gXCIuLi9Hb2xkaWxvY2tzU3RvcnlEYXRhXCI7XG5pbXBvcnQgKiBhcyBUV0VFTiBmcm9tIFwiQHR3ZWVuanMvdHdlZW4uanMvZGlzdC90d2Vlbi5janMuanNcIjtcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0RpcmVjdGlvblwiO1xuaW1wb3J0IEdvbGRpbG9ja3NDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvR29sZGlsb2Nrc0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3dsUHJvcFNlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUge1xuXG4gICAgcHVibGljIGdldCBib3dsKCk6IEJvd2xQcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5ib3dsKSBhcyBCb3dsUHJvcFxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgYmFja2Ryb3AoKTogQmFja2Ryb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmJhY2tkcm9wKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBnYXJkZW4oKTogR2FyZGVuUHJvcHMge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmdhcmRlbik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCB3ZWF0aGVyUHJvcCgpOiBXZWF0aGVyUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUud2VhdGhlclByb3ApO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IG5hcnJhdG9yKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubmFycmF0b3IpXG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgZ29sZGlsb2NrcygpOiBHb2xkaWxvY2tzQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyXG4gICAgfVxuXG5cbiAgICBjb25zdHJ1Y3RvcihjaG9pY2VEaWFsb2dMaW5lOiBDaG9pY2VEaWFsb2dMaW5lLFxuICAgICAgICBzZWxlY3RQb3BvdmVyOiBQcm9wU2VsZWN0aW9uUG9wT3ZlcixcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoY2hvaWNlRGlhbG9nTGluZSwgc2VsZWN0UG9wb3ZlciwgZGlTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgdGhpcy5nYXJkZW4uZ2V0UmVtb3ZlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgdGhpcy53ZWF0aGVyUHJvcC5nZXRSZW1vdmVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ29sZGlsb2Nrcy5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZXRHb2xkaWxvY2tzUG9zaXRpb24oKSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ29sZGlsb2Nrcy5nZXRTaG93QW5kUmlzZVVwQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5nb2xkaWxvY2tzLnBsYXlJZGxlKCkpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXJyYXRvci5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZXROYXJyYXRvclBvc2l0aW9uKCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hcnJhdG9yLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLm5hcnJhdG9yLnBsYXlJZGxlKCkpLFxuXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgdGhpcy5iYWNrZHJvcC5nZXRBbmltYXRlZEFjdENoYW5nZUFjdGlvbih0aGlzLmdldEJhY2tncm91bmRGb3JXZWF0aGVyKHRoaXMud2VhdGhlclByb3AuY2hvaWNlSWQpKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0TmFycmF0b3JQb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5uYXJyYXRvci54ID0gR29sZGlsb2Nrc1N0b3J5RGF0YS5hY3QyTmFycmF0b3JYUG9zaXRpb25cbiAgICAgICAgdGhpcy5uYXJyYXRvci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KTtcbiAgICB9XG4gICAgcHJpdmF0ZSBzZXRHb2xkaWxvY2tzUG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ29sZGlsb2Nrcy54ID0gR29sZGlsb2Nrc1N0b3J5RGF0YS5hY3QyR29sZGlsb2Nrc1hQb3NpdGlvblxuICAgICAgICB0aGlzLmdvbGRpbG9ja3Muc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5yaWdodCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRCYWNrZ3JvdW5kRm9yV2VhdGhlcihjaG9pY2VJZDogc3RyaW5nKTogQmFja0Ryb3BTa2luIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2VhdGhlclByb3AuaXNTdW5DaG9pY2UoY2hvaWNlSWQpID8gQmFja0Ryb3BTa2luLmFjdDQgOiBCYWNrRHJvcFNraW4uYWN0MjtcbiAgICB9XG5cbiAgICBvbkNob2ljZXNCZWluZ1ByZXNlbnRlZChjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ2hvaWNlTWFkZSgpKSB7IHJldHVybjsgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnRlcmF0aW9ucygpO1xuXG4gICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLmZpbmlzaENob2ljZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYm93bC5zZXRTa2luRm9yVHlwZShjaG9pY2VJZCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm93bC5nZXRTaG93QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvd2wuZ2V0SWRsZUFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmdhcmRlbi5oaWRlKCk7XG4gICAgICAgIHRoaXMuYm93bC5jaG9pY2VJZCA9IHRoaXMuY2hvaWNlRGlhbG9nLmdldERlZmF1bHRDaG9pY2UoKTtcbiAgICAgICAgdGhpcy5ib3dsLnNraXAoKTtcbiAgICAgICAgdGhpcy53ZWF0aGVyUHJvcC5oaWRlKCk7XG4gICAgICAgIHRoaXMuYmFja2Ryb3Auc2V0QmFja2Ryb3BUbyh0aGlzLmdldEJhY2tncm91bmRGb3JXZWF0aGVyKHRoaXMud2VhdGhlclByb3AuY2hvaWNlSWQpLCB0cnVlKTtcbiAgICAgICAgdGhpcy5zZXROYXJyYXRvclBvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuZ29sZGlsb2Nrcy54ID0gR29sZGlsb2Nrc1N0b3J5RGF0YS5hY3QyR29sZGlsb2Nrc1hQb3NpdGlvbjtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCB7IEN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSB9IGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0RpYWxvZ0xpbmVEZWxlZ2F0ZVwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IEJhY2tkcm9wLCB7IEJhY2tEcm9wU2tpbiB9IGZyb20gXCIuLi8uLi9wcm9wcy9CYWNrZHJvcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWVCZWFySG91c2VTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUgaW1wbGVtZW50cyBDdWVEaWFsb2dMaW5lRGVsZWdhdGUge1xuXG5cbiAgICBwdWJsaWMgZ2V0IGJhY2tkcm9wKCkgOiBCYWNrZHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmFja2Ryb3ApO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgYWN0KCk6QmFja0Ryb3BTa2lue1xuICAgICAgICByZXR1cm4gQmFja0Ryb3BTa2luLmFjdDNcbiAgICB9XG5cbiAgICBvbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgdGhpcyk7XG4gICAgICAgIHN1cGVyLm9uSW5pdCgpO1xuICAgIH1cblxuICAgIG9uQ3VlKCkge1xuICAgICAgIHRoaXMuY2hhbmdlQmFja2Ryb3AoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY2hhbmdlQmFja2Ryb3AoKXtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKHRoaXMuYmFja2Ryb3AuZ2V0QW5pbWF0ZWRBY3RDaGFuZ2VBY3Rpb24odGhpcy5hY3QpKVxuICAgIH1cblxuICAgIG9uRGVpbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5DdWVEaWFsb2dMaW5lRGVsZWdhdGUsIG51bGwpO1xuICAgICAgICBzdXBlci5vbkRlaW5pdCgpO1xuICAgIH1cblxuICAgIHNraXAoKXtcbiAgICAgICAgdGhpcy5iYWNrZHJvcC5zZXRCYWNrZHJvcFRvKHRoaXMuYWN0LCB0cnVlKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cbn0iLCJpbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IEdvbGRpbG9ja3NDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvR29sZGlsb2Nrc0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYWxrU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlICB7XG4gICAgcHJvdGVjdGVkIGdldCBjaGFyYWN0ZXIoKTogR29sZGlsb2Nrc0NoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ29sZGlsb2NrcykgYXMgR29sZGlsb2Nrc0NoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBvbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnBsYXlXYWxrKCk7XG4gICAgICAgIHN1cGVyLm9uSW5pdCgpO1xuICAgIH1cblxuICAgIHNraXAoKXtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5wbGF5V2FsaygpO1xuICAgIH1cbn0iLCJcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuXG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IFdlYXRoZXJQcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9XZWF0aGVyUHJvcHNcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBJY29uU2VsZWN0aW9uUG9wT3ZlciBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvSWNvblNlbGVjdGlvblBvcE92ZXJcIjtcbmltcG9ydCBCYWNrZHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQmFja2Ryb3BcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHb2xkaWxvY2tzV2VhdGhlclNlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUge1xuXG4gICAgcHVibGljIGdldCB3ZWF0aGVyUHJvcCgpOiBXZWF0aGVyUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUud2VhdGhlclByb3ApO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IGJhY2tkcm9wKCk6IEJhY2tkcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5iYWNrZHJvcCk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoY2hvaWNlRGlhbG9nTGluZTogQ2hvaWNlRGlhbG9nTGluZSxcbiAgICAgICAgcHJvdGVjdGVkIHNlbGVjdFBvcG92ZXI6IEljb25TZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihjaG9pY2VEaWFsb2dMaW5lLCBzZWxlY3RQb3BvdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci52aWV3LnggPSAwO1xuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnRlcmF0aW9ucygpO1xuXG4gICAgICAgIHRoaXMuc2V0Q2hvaWNlKGNob2ljZUlkKTtcblxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuaGlkZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIHRoaXMud2VhdGhlclByb3AuZ2V0RHJvcEFjdGlvbigpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIuZGlkVGVybWluYXRlKGNob2ljZUlkKSlcbiAgICAgICAgICAgIF0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldENob2ljZShjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLmZpbmlzaENob2ljZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMud2VhdGhlclByb3AuY2hvaWNlSWQgPSBjaG9pY2VJZDtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLnNldENob2ljZSh0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCkpO1xuICAgIH1cblxuICAgIG9uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBzdXBlci5vbkRlc3Ryb3koKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCB7IEN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSB9IGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0RpYWxvZ0xpbmVEZWxlZ2F0ZVwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IFN0b3J5RGF0YSBmcm9tIFwiLi4vLi4vY29tbW9uL1N0b3J5RGF0YVwiO1xuaW1wb3J0IEdvbGRpbG9ja3NDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvR29sZGlsb2Nrc0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdW5IYXRTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUgaW1wbGVtZW50cyBDdWVEaWFsb2dMaW5lRGVsZWdhdGUge1xuXG4gICAgcHVibGljIGdldCBwYXJlbnQoKTogR29sZGlsb2Nrc0NoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUucGFyZW50QmVhcikgYXMgR29sZGlsb2Nrc0NoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHN0b3J5RGF0YSgpIDogU3RvcnlEYXRhIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5TdG9yeURhdGEpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuQ3VlRGlhbG9nTGluZURlbGVnYXRlLCB0aGlzKTtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG4gICAgfVxuXG4gICAgb25DdWUoKSB7XG4gICAgICAgLy9ETyBOT1RISU5HXG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgaXNTdW5DaG9pY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3J5RGF0YS5zYXZlLmdldChcIndlYXRoZXJcIikuaW5jbHVkZXMoXCJzdW5cIik7XG4gICAgfVxuICAgIFxuICAgIHByb3RlY3RlZCBnZXRIYXRBY3Rpb24oKXtcbiAgICAgICAgaWYgKHRoaXMuaXNTdW5DaG9pY2UoKSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0U2V0U3VuSGF0QWN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0U2V0Q29sZEhhdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG5cbiAgICAgICAgICAgICAgICB0aGlzLmdldEhhdEFjdGlvbigpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoICgpID0+IHN1cGVyLmRpZFRlcm1pbmF0ZShuYW1lKSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgb25EZWluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgbnVsbCk7XG4gICAgICAgIHN1cGVyLm9uRGVpbml0KCk7XG4gICAgfVxuXG4gICAgc2tpcCgpe1xuXG4gICAgICAgIGlmICh0aGlzLmlzU3VuQ2hvaWNlKCkpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnNldFN1bkhhdCgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5zZXRDb2xkSGF0KCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cbn0iLCJcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgUHJvcFNlbGVjdGlvblBvcE92ZXIgZnJvbSBcIi4uLy4uL3BvcG92ZXJzL1Byb3BTZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBCZWFyRnVybml0dXJlUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQmVhckZ1cm5pdHVyZVByb3BcIjtcbmltcG9ydCBCb3dsUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQm93bFByb3BcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhdFByb3BTZWxlY3Rpb25TdGF0ZSBleHRlbmRzIFNlbGVjdGlvblN0YXRlIHtcblxuICAgIHByb3RlY3RlZCBnZXQgYmVhckZ1cm5pdHVyZSgpOiBCZWFyRnVybml0dXJlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmVhckZ1cm5pdHVyZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBib3dsKCk6IEJvd2xQcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5ib3dsKSBhcyBCb3dsUHJvcFxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGNob2ljZURpYWxvZ0xpbmU6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHNlbGVjdFBvcG92ZXI6IFByb3BTZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihjaG9pY2VEaWFsb2dMaW5lLCBzZWxlY3RQb3BvdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpIHtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG4gICAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICB9XG5cbiAgICBzZXR1cCgpIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKHRoaXMuYm93bC5nZXRIaWRlQWN0aW9uKCkpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5iZWFyRnVybml0dXJlLmNob2ljZUlkID0gY2hvaWNlSWQ7XG4gICAgICAgICAgICB0aGlzLmJlYXJGdXJuaXR1cmUuc2V0U2tpbkZvclR5cGUoY2hvaWNlSWQpO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmRpZFRlcm1pbmF0ZShjaG9pY2VJZCkpLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlYXJGdXJuaXR1cmUuZ2V0U2hvd0FjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWFyRnVybml0dXJlLmdldElkbGVBbmltQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5ib3dsLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuYmVhckZ1cm5pdHVyZS5jaG9pY2VJZCA9IHRoaXMuY2hvaWNlRGlhbG9nLmdldERlZmF1bHRDaG9pY2UoKTtcbiAgICAgICAgdGhpcy5iZWFyRnVybml0dXJlLnNldFNraW5Gb3JUeXBlKHRoaXMuYmVhckZ1cm5pdHVyZS5jaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuYmVhckZ1cm5pdHVyZS5za2lwKCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbn1cbiIsIlxuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBTRlhTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TRlhTZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IEJlYXJGdXJuaXR1cmVQcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9CZWFyRnVybml0dXJlUHJvcFwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBMb2NhdG9yIGZyb20gXCIuLi8uLi9jb21tb24vTG9jYXRvclwiO1xuaW1wb3J0IFNGWEFjdGlvbiBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvU0ZYQWN0aW9uXCI7XG5pbXBvcnQgeyBTb3VuZENoYW5uZWwgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvU291bmRTZXJ2aWNlXCI7XG5pbXBvcnQgR29sZGlsb2Nrc0NoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Hb2xkaWxvY2tzQ2hhcmFjdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXRCcmVha1NlbGVjdGlvblN0YXRlIGV4dGVuZHMgU0ZYU2VsZWN0aW9uU3RhdGUgIHtcblxuICAgIHByb3RlY3RlZCBnZXQgYmVhckZ1cm5pdHVyZSgpOiBCZWFyRnVybml0dXJlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmVhckZ1cm5pdHVyZSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgY2hhcmFjdGVyKCk6IEdvbGRpbG9ja3NDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdvbGRpbG9ja3MpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnRlcmF0aW9ucygpO1xuXG4gICAgICAgIHRoaXMuc2V0U2Z4KGNob2ljZUlkKTtcblxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuaGlkZSgoKSA9PiB7XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRoaXMubG9jYXRvci5leGl0TWlkZGxlLCAoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5V2FsaygpLCAwLjMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5zdGFuZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuYmVhckZ1cm5pdHVyZS5zZXRCcm9rZW4oKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNGWEFjdGlvbih0aGlzLmJlYXJGdXJuaXR1cmUuc2Z4QnJlYWssIFNvdW5kQ2hhbm5lbC5HMiwgZmFsc2UsIHRoaXMuZGlTZXJ2aWNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmRpZFRlcm1pbmF0ZSh0aGlzLmRpYWxvZy5nZXRMaW5rKDApLmxpbmspKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldFNmeChjaG9pY2VJZDogc3RyaW5nKXtcbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcblxuICAgICAgICBjb25zdCBzZnggPSB0aGlzLmRpYWxvZy5zZnhDaG9pY2VzW2Nob2ljZUlkXTtcbiAgICAgICAgaWYgKCFzZngpIHtcbiAgICAgICAgICAgIHRocm93ICdubyBzZnggZm9yICcgKyBjaG9pY2VJZCArIFwiIGluIFwiICsgdGhpcy5kaWFsb2cuc2Z4Q2hvaWNlcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlYXJGdXJuaXR1cmUuc2Z4QnJlYWsgPSBzZng7XG4gICAgfVxuXG4gICAgc2tpcCgpe1xuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuaGlkZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRpZFRlcm1pbmF0ZSh0aGlzLmRpYWxvZy5nZXRMaW5rKDApLmxpbmspO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCB7IElEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvSURpYWxvZ0xpbmVcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IEdvbGRpbG9ja3NDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvR29sZGlsb2Nrc0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWF0aW5nU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcigpOiBHb2xkaWxvY2tzQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB0YXJnZXQ6IFZpZXc7XG5cbiAgICBjb25zdHJ1Y3RvcihkaWFsb2c6IElEaWFsb2dMaW5lLCBkaVNlcnZpY2U6IERJU2VydmljZSwgdmlldzogVmlldykge1xuICAgICAgICBzdXBlcihkaWFsb2csIGRpU2VydmljZSk7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gZmluZENoaWxkQnlOYW1lKHZpZXcsIGRpYWxvZy5sb2NhdGlvbikgYXMgVmlldztcbiAgICB9XG5cbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRoaXMudGFyZ2V0LCAoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5V2FsaygpKSxcbiAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldFNlYXRlZEFjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnBsYXlTZWF0KCk7XG4gICAgfVxufSIsIlxuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBQcm9wU2VsZWN0aW9uUG9wT3ZlciBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvUHJvcFNlbGVjdGlvblBvcE92ZXJcIjtcbmltcG9ydCB7IENob2ljZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DaG9pY2VEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IEJlYXJGdXJuaXR1cmVQcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9CZWFyRnVybml0dXJlUHJvcFwiO1xuaW1wb3J0IEJlZFByb3AgZnJvbSBcIi4uLy4uL3Byb3BzL0JlZFByb3BcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmVkUHJvcFNlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUge1xuXG4gICAgcHJvdGVjdGVkIGdldCBiZWQoKTogQmVkUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmVkKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGJlYXJGdXJuaXR1cmUoKTogQmVhckZ1cm5pdHVyZVByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmJlYXJGdXJuaXR1cmUpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGNob2ljZURpYWxvZ0xpbmU6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHNlbGVjdFBvcG92ZXI6IFByb3BTZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihjaG9pY2VEaWFsb2dMaW5lLCBzZWxlY3RQb3BvdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIHRoaXMuYmVhckZ1cm5pdHVyZS5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSlcbiAgICAgICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZXNCZWluZ1ByZXNlbnRlZChjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ2hvaWNlTWFkZSgpKSB7IHJldHVybjsgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygpO1xuICAgIH1cblxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5iZWQuY2hvaWNlSWQgPSBjaG9pY2VJZDtcbiAgICAgICAgICAgIHRoaXMuYmVkLnNldFNraW5Gb3JUeXBlKGNob2ljZUlkKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWQuZ2V0U2hvd0FjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWQuZ2V0SWRsZUFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmJlYXJGdXJuaXR1cmUucmVzZXQoKTtcbiAgICAgICAgdGhpcy5iZWQuY2hvaWNlSWQgPSB0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCk7XG4gICAgICAgIHRoaXMuYmVkLnNldFNraW5Gb3JUeXBlKHRoaXMuYmVkLmNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5iZWQuc2tpcCgpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IHsgSURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9JRGlhbG9nTGluZVwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBmaW5kQ2hpbGRCeU5hbWUgZnJvbSBcIi4uLy4uLy4uL3V0aWxzL1V0aWxzXCI7XG5pbXBvcnQgR29sZGlsb2Nrc0NoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Hb2xkaWxvY2tzQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGF5aW5nU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcigpOiBHb2xkaWxvY2tzQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB0YXJnZXQ6IFZpZXc7XG5cbiAgICBjb25zdHJ1Y3RvcihkaWFsb2c6IElEaWFsb2dMaW5lLCBkaVNlcnZpY2U6IERJU2VydmljZSwgdmlldzogVmlldykge1xuICAgICAgICBzdXBlcihkaWFsb2csIGRpU2VydmljZSk7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gZmluZENoaWxkQnlOYW1lKHZpZXcsIGRpYWxvZy5sb2NhdGlvbikgYXMgVmlldztcbiAgICB9XG5cbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRoaXMudGFyZ2V0LCAoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5V2FsaygpKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2hhcmFjdGVyLnNldERpcmVjdGlvbihEaXJlY3Rpb24ubGVmdCkpLFxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldFRvTGF5QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpXG4gICAgICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5wbGF5VG9MYXkoKTtcbiAgICB9XG59IiwiaW1wb3J0IExheWluZ1N0YXRlIGZyb20gXCIuL0xheWluZ1N0YXRlXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGF5aW5nRnJvbVN0YXRlIGV4dGVuZHMgTGF5aW5nU3RhdGUge1xuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0RnJvbUxheUFjdGlvbigpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5jaGFyYWN0ZXIuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5yaWdodCkpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIuZGlkVGVybWluYXRlKG5hbWUpKVxuICAgICAgICAgICAgXSkpO1xuICAgIH1cbn0iLCJcbmltcG9ydCBTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TZWxlY3Rpb25TdGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXVnaHRSZXNwb25zZVNlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUgIHtcblxuICAgb25DaG9pY2VzQmVpbmdQcmVzZW50ZWQoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci52aWV3LnggPSAwO1xuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygpO1xuICAgIH1cbiAgICBcbiAgICBvbkNob2ljZShjaG9pY2U6IHN0cmluZykge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZSkpO1xuICAgIH1cblxufSIsImltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IHsgQ3VlRGlhbG9nTGluZURlbGVnYXRlIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvRGlhbG9nTGluZURlbGVnYXRlXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgRG9vciBmcm9tIFwiLi4vLi4vcHJvcHMvRG9vclwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5pbXBvcnQgR29sZGlsb2Nrc0NoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Hb2xkaWxvY2tzQ2hhcmFjdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVzY2FwZVN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSBpbXBsZW1lbnRzIEN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSB7XG4gICAgcHJvdGVjdGVkIGdldCBuYXJyYXRvcigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLm5hcnJhdG9yKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGRvb3IoKTogRG9vciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZG9vcik7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgY2hhcmFjdGVyKCk6IEdvbGRpbG9ja3NDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdvbGRpbG9ja3MpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXI7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgYmFieUJlYXIoKTogR29sZGlsb2Nrc0NoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuYmFieUJlYXIpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXI7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgcGFyZW50QmVhcigpOiBHb2xkaWxvY2tzQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5wYXJlbnRCZWFyKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyO1xuICAgIH1cbiAgICBcbiAgICBvbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgdGhpcyk7XG4gICAgICAgIHN1cGVyLm9uSW5pdCgpO1xuICAgIH1cblxuICAgIG9uQ3VlKCkge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvb3IuZ2V0U2hvd0FjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvb3IuZ2V0T3BlbkFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5iYWJ5QmVhci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLmxlZnQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMucGFyZW50QmVhci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLmxlZnQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvblRvUG9pbnQodGhpcy5sb2NhdG9yLmV4aXRMZWZ0LnBvc2l0aW9uLCAoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5UnVuKCksIDIpLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvb3IuZ2V0Q2xvc2VBbmltQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIuZGlkVGVybWluYXRlKHRoaXMuZGlhbG9nLmdldExpbmsoMCkubGluaykpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgzKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXROYXJyYXRvckFjdGlvbigpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TmFycmF0b3JBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2V0dXBOYXJyYXRvcigpKSxcbiAgICAgICAgICAgIHRoaXMubmFycmF0b3IuZ2V0U2hvd0FuZFJpc2VVcEFjdGlvbigpXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgc2V0dXBOYXJyYXRvcigpIHtcbiAgICAgICAgdGhpcy5uYXJyYXRvci54ID0gdGhpcy5sb2NhdG9yLmV4aXRSaWdodC54O1xuICAgICAgICB0aGlzLm5hcnJhdG9yLnNldERpcmVjdGlvbihEaXJlY3Rpb24ubGVmdCk7XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuXG4gICAgfVxuXG4gICAgb25EZWluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgbnVsbCk7XG4gICAgICAgIHN1cGVyLm9uRGVpbml0KCk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5oaWRlKCk7XG4gICAgICAgIHN1cGVyLmRpZFRlcm1pbmF0ZSh0aGlzLmRpYWxvZy5nZXRMaW5rKDApLmxpbmspO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IEJvd2xQcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9Cb3dsUHJvcFwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgQmVhckZ1cm5pdHVyZVByb3AgZnJvbSBcIi4uLy4uL3Byb3BzL0JlYXJGdXJuaXR1cmVQcm9wXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL0xvY2F0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmVhck5vdGljZUJyb2tlbkNoYWlyU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcblxuICAgIHB1YmxpYyBnZXQgYmVhckZ1cm5pdHVyZSgpOiBCZWFyRnVybml0dXJlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmVhckZ1cm5pdHVyZSkgYXMgQmVhckZ1cm5pdHVyZVByb3BcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGJvd2woKTogQm93bFByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmJvd2wpIGFzIEJvd2xQcm9wXG4gICAgfVxuICAgIHB1YmxpYyBnZXQgbG9jYXRvcigpOiBMb2NhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5sb2NhdG9yKVxuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IG5hcnJhdG9yKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubmFycmF0b3IpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBiYWJ5QmVhcigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmJhYnlCZWFyKVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgcGFyZW50QmVhcigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnBhcmVudEJlYXIpXG4gICAgfVxuXG4gICAgb25Jbml0KCkge1xuICAgICAgICB0aGlzLnNldHVwKCk7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmJvd2wuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgdGhpcy5iYWJ5QmVhci5nZXRXYWxrVG9Qb3NpdGlvbkFjdGlvbih0aGlzLmxvY2F0b3IuYmFieUJlYXJQb3NpdGlvbi54KSxcbiAgICAgICAgICAgIHRoaXMuYmVhckZ1cm5pdHVyZS5nZXRTaG93QW5pbUFjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgcHJpdmF0ZSBzZXR1cCAoKXtcbiAgICAgICB0aGlzLmJlYXJGdXJuaXR1cmUuc2V0U2tpbkZvclR5cGUodGhpcy5iZWFyRnVybml0dXJlLmNob2ljZUlkKTtcbiAgICAgICB0aGlzLmJlYXJGdXJuaXR1cmUuc2V0QnJva2VuKCk7XG4gICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLnNldHVwKCk7XG4gICAgICAgIHRoaXMuYm93bC5oaWRlQWxsKCk7XG4gICAgICAgIHRoaXMuYmVhckZ1cm5pdHVyZS5zaG93QWxsKCk7XG4gICAgICAgIHRoaXMuYmFieUJlYXIueCA9IHRoaXMubG9jYXRvci5iYWJ5QmVhclBvc2l0aW9uLng7XG4gICAgICAgIHRoaXMucGFyZW50QmVhci54ID0gdGhpcy5sb2NhdG9yLnBhcmVudEJlYXJQb3NpdGlvbi54O1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgU0ZYU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU0ZYU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBTRlhBY3Rpb24gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL1NGWEFjdGlvblwiO1xuaW1wb3J0IHsgU291bmRDaGFubmVsIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NvdW5kU2VydmljZVwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBHb2xkaWxvY2tzU3RvcnlEYXRhIGZyb20gXCIuLi9Hb2xkaWxvY2tzU3RvcnlEYXRhXCI7XG5pbXBvcnQgR29sZGlsb2Nrc0NoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Hb2xkaWxvY2tzQ2hhcmFjdGVyXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL0xvY2F0b3JcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJlYXJzTm90aWNlR29sZGlsb2Nrc1N0YXRlIGV4dGVuZHMgU0ZYU2VsZWN0aW9uU3RhdGUgIHtcblxuICAgIHByb3RlY3RlZCBnZXQgZ29sZGlsb2NrcygpOiBHb2xkaWxvY2tzQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyXG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgYmFieUJlYXIoKTogR29sZGlsb2Nrc0NoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuYmFieUJlYXIpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXJcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgY29uc3Qgc2Z4ID0gdGhpcy5kaWFsb2cuc2Z4Q2hvaWNlc1tjaG9pY2VJZF07XG4gICAgICAgIGlmICghc2Z4KXtcbiAgICAgICAgICAgIHRocm93ICdubyBzZnggZm9yICcgKyBjaG9pY2VJZCArIFwiIGluIFwiICsgdGhpcy5kaWFsb2cuc2Z4Q2hvaWNlcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuaGlkZSggKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBuZXcgU0ZYQWN0aW9uKHNmeCwgU291bmRDaGFubmVsLkcyLCBmYWxzZSwgdGhpcy5kaVNlcnZpY2UpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDIpLFxuICAgICAgICAgICAgICAgIHRoaXMuZ29sZGlsb2Nrcy5nZXRGcm9tTGF5QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgdGhpcy5nb2xkaWxvY2tzLmdldFdhbGtUb1Bvc2l0aW9uQWN0aW9uKEdvbGRpbG9ja3NTdG9yeURhdGEuYWN0M0dvbGRpbG9ja3NYUG9zaXRpb24pLFxuICAgICAgICAgICAgICAgIHRoaXMuYmFieUJlYXIuZ2V0V2Fsa1RvUG9zaXRpb25BY3Rpb24odGhpcy5sb2NhdG9yLmJhYnlCZWFyUG9zaXRpb24ueCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmRpZFRlcm1pbmF0ZSh0aGlzLmRpYWxvZy5nZXRMaW5rKDApLmxpbmspKSxcbiAgICAgICAgICAgIF0pKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBza2lwKCl7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLnNraXAoKTtcbiAgICAgICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLmZpbmlzaENob2ljZSh0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCkpO1xuICAgICAgICAgICAgdGhpcy5kaWRUZXJtaW5hdGUodGhpcy5kaWFsb2cuZ2V0TGluaygwKS5saW5rKTtcbiAgICAgICAgICAgIHRoaXMuc3RvcFNvdW5kKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgQ3VlRGlhbG9nTGluZURlbGVnYXRlIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvRGlhbG9nTGluZURlbGVnYXRlXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgQm93bFByb3AgZnJvbSBcIi4uLy4uL3Byb3BzL0Jvd2xQcm9wXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVhdEZvb2RTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUgaW1wbGVtZW50cyBDdWVEaWFsb2dMaW5lRGVsZWdhdGUge1xuXG4gICAgcHVibGljIGdldCBib3dsKCk6IEJvd2xQcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5ib3dsKSBhcyBCb3dsUHJvcFxuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuQ3VlRGlhbG9nTGluZURlbGVnYXRlLCB0aGlzKTtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG4gICAgfVxuXG4gICAgb25DdWUoKSB7XG4gICAgICAgIHRoaXMuZW1wdHlCb3dsKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGVtcHR5Qm93bCgpIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuYm93bC5nZXRFbXB0eUJvd2xBY3Rpb24oKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgb25EZWluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgbnVsbCk7XG4gICAgICAgIHN1cGVyLm9uRGVpbml0KCk7XG4gICAgfVxuXG4gICAgc2tpcCgpe1xuICAgICAgICB0aGlzLmVtcHR5Qm93bCgpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxufSIsImltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBEb29yIGZyb20gXCIuLi8uLi9wcm9wcy9Eb29yXCI7XG5pbXBvcnQgR29sZGlsb2Nrc0NoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Hb2xkaWxvY2tzQ2hhcmFjdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhbGtUaHJvdWdoRG9vclN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSAge1xuXG4gICAgcHJvdGVjdGVkIGdldCBjaGFyYWN0ZXIoKTogR29sZGlsb2Nrc0NoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ29sZGlsb2NrcykgYXMgR29sZGlsb2Nrc0NoYXJhY3RlcjtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBuYXJyYXRvcigpOkNoYXJhY3RlcntcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcik7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgZG9vcigpOiBEb29yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5kb29yKTtcbiAgICB9XG5cbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICB0aGlzLmRvb3IuZ2V0T3BlbkFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRXYWxrVG9Qb3NpdGlvbkFjdGlvbih0aGlzLmRvb3IueCksXG5cbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3Rlci5oaWRlKCkpLFxuXG4gICAgICAgICAgICAgICAgdGhpcy5kb29yLmdldENsb3NlQW5pbUFjdGlvbigpLFxuICAgICAgICAgICAgICAgIHRoaXMuZG9vci5nZXRIaWRlQWN0aW9uKCksXG5cbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZGlkVGVybWluYXRlKG5hbWUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHNraXAoKXtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgICAgICB0aGlzLmRvb3IuaGlkZSgpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5oaWRlKCk7XG4gICAgICAgIHRoaXMubmFycmF0b3IuaGlkZSgpO1xuICAgIH1cbn0iLCJpbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBMb2NhdG9yIGZyb20gXCIuLi8uLi9jb21tb24vTG9jYXRvclwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFieUJlYXJOb3RpY2luZ1N0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGJhYnlCZWFyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuYmFieUJlYXIpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBwYXJlbnRCZWFyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUucGFyZW50QmVhcilcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIHRoaXMuYmFieUJlYXIuZ2V0V2Fsa1RvUG9zaXRpb25BY3Rpb24odGhpcy5sb2NhdG9yLmJhYnlCZWFyTm90aWNpbmdQb3NpdGlvbi54KSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpXG4gICAgICAgIF0pKVxuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICAgICAgdGhpcy5iYWJ5QmVhci54ID0gdGhpcy5sb2NhdG9yLmJhYnlCZWFyTm90aWNpbmdQb3NpdGlvbi54O1xuICAgIH1cbn0iLCJpbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IEdvbGRpbG9ja3NDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvR29sZGlsb2Nrc0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbm9yaW5nU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcigpOiBHb2xkaWxvY2tzQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyO1xuICAgIH1cblxuICAgIG9uSW5pdCgpe1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5U25vcmUoKSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSlcbiAgICAgICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnBsYXlTbm9yZSgpXG4gICAgfVxufSIsIlxuaW1wb3J0IExheWluZ1N0YXRlIGZyb20gXCIuL0xheWluZ1N0YXRlXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYXlpbmdGaXJzdFN0YXRlIGV4dGVuZHMgTGF5aW5nU3RhdGUge1xuICAgIHByb3RlY3RlZCBnZXQgbmFycmF0b3IoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcilcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgb25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgdGhpcy5nZXROYXJyYXRvckFjdGlvbigpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpXG4gICAgICAgICAgICBdKSk7XG4gICAgfVxuICAgIFxuICAgIGdldE5hcnJhdG9yQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5uYXJyYXRvci5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2V0dXBOYXJyYXRvcigpKSxcbiAgICAgICAgICAgIHRoaXMubmFycmF0b3IuZ2V0U2hvd0FuZFJpc2VVcEFjdGlvbigpXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgc2V0dXBOYXJyYXRvcigpIHtcbiAgICAgICAgdGhpcy5uYXJyYXRvci54ID0gdGhpcy5sb2NhdG9yLmV4aXRSaWdodC54O1xuICAgICAgICB0aGlzLm5hcnJhdG9yLnNldERpcmVjdGlvbihEaXJlY3Rpb24ubGVmdCk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgICAgICB0aGlzLnNldHVwTmFycmF0b3IoKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIucGxheVRvTGF5KCk7XG4gICAgfVxufSIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL0xvY2F0b3JcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcbmltcG9ydCBMYXlpbmdGcm9tU3RhdGUgZnJvbSBcIi4vTGF5aW5nRnJvbVN0YXRlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYXlpbmdMYXN0U3RhdGUgZXh0ZW5kcyBMYXlpbmdGcm9tU3RhdGUge1xuICAgIHByb3RlY3RlZCBnZXQgbmFycmF0b3IoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcilcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgb25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgdGhpcy5uYXJyYXRvci5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNldHVwTmFycmF0b3IoKSksXG4gICAgICAgICAgICAgICAgdGhpcy5uYXJyYXRvci5nZXRTaG93QW5kUmlzZVVwQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSlcbiAgICAgICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBzZXR1cE5hcnJhdG9yKCl7XG4gICAgICAgIHRoaXMubmFycmF0b3IueCA9IHRoaXMubG9jYXRvci5leGl0TGVmdC54O1xuICAgICAgICB0aGlzLm5hcnJhdG9yLnNldERpcmVjdGlvbihEaXJlY3Rpb24ucmlnaHQpOyBcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgICAgIHRoaXMuc2V0dXBOYXJyYXRvcigpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5wbGF5VG9MYXkoKTtcbiAgICB9XG59IiwiaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL0xvY2F0b3JcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFieUJlYXJOb3RpY2luZ0Jvd2xTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuXG4gICAgcHJvdGVjdGVkIGdldCBiYWJ5QmVhcigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmJhYnlCZWFyKVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgcGFyZW50QmVhcigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnBhcmVudEJlYXIpXG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgbmFycmF0b3IoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcilcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhYnlCZWFyLmdldFdhbGtUb1Bvc2l0aW9uQWN0aW9uKHRoaXMubG9jYXRvci5iYWJ5QmVhck5vdGljaW5nUG9zaXRpb24ueCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50QmVhci5nZXRXYWxrVG9Qb3NpdGlvbkFjdGlvbih0aGlzLmxvY2F0b3IucGFyZW50QmVhclBvc2l0aW9uLngpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXJyYXRvci5nZXRIaWRlQWN0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpXG4gICAgICAgICAgICBdKSlcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgICAgIHRoaXMuYmFieUJlYXIueCA9IHRoaXMubG9jYXRvci5iYWJ5QmVhck5vdGljaW5nUG9zaXRpb24ueDtcbiAgICAgICAgdGhpcy5wYXJlbnRCZWFyLnggPSB0aGlzLmxvY2F0b3IucGFyZW50QmVhclBvc2l0aW9uLng7XG4gICAgfVxufSIsImltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgR29sZGlsb2Nrc0NoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Hb2xkaWxvY2tzQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCB7IElEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvSURpYWxvZ0xpbmVcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBCZWFyRnVybml0dXJlUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQmVhckZ1cm5pdHVyZVByb3BcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXRUcmFpblN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcigpOiBHb2xkaWxvY2tzQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgYmVhckZ1cm5pdHVyZSgpOiBCZWFyRnVybml0dXJlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmVhckZ1cm5pdHVyZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHRhcmdldDogVmlldztcblxuICAgIGNvbnN0cnVjdG9yKGRpYWxvZzogSURpYWxvZ0xpbmUsIGRpU2VydmljZTogRElTZXJ2aWNlLCB2aWV3OiBWaWV3KSB7XG4gICAgICAgIHN1cGVyKGRpYWxvZywgZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBmaW5kQ2hpbGRCeU5hbWUodmlldywgZGlhbG9nLmxvY2F0aW9uKSBhcyBWaWV3O1xuICAgIH1cblxuICAgIG9uSW5pdCgpe1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLnRhcmdldCwgKCkgPT4gdGhpcy5jaGFyYWN0ZXIucGxheVdhbGsoKSksXG4gICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRTZWF0ZWRBY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmJlYXJGdXJuaXR1cmUuZ2V0SG9yblNmeEFjdGlvbih0aGlzLmRpYWxvZy5uYW1lKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIuZGlkVGVybWluYXRlKG5hbWUpKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5wbGF5U2VhdCgpO1xuICAgIH1cbn0iLCJpbXBvcnQgRGlhbG9nTGluZSBmcm9tIFwiLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9EaWFsb2dMaW5lXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgeyBDdWVEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ3VlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgUGFzc2FnZSB9IGZyb20gXCIuLi8uLi90d2luZS9Ud2luZVNjcmlwdFwiO1xuaW1wb3J0IHsgQ2hvaWNlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi90d2luZS9EaWFsb2dMaW5lL0Nob2ljZURpYWxvZ0xpbmVcIjtcbmltcG9ydCB7IEN1ZUNob2ljZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DdWVDaG9pY2VEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBEaWFsb2dDdWVEYXRhIH0gZnJvbSBcIi4uLy4uL3R3aW5lL0RpYWxvZ0RhdGFcIjtcbmltcG9ydCB7IERpYWxvZ1N0YXRlRmFjdG9yeSB9IGZyb20gXCIuL0RpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IHsgRGlhbG9nVHlwZSB9IGZyb20gXCIuLi9jb21tb24vQWN0TWVkaWF0b3JcIjtcbmltcG9ydCB7IEljb25UeXBlIH0gZnJvbSBcIi4uL3BvcG92ZXJzL0ljb25TZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgQWN0MVNldHVwU3RhdGUgZnJvbSBcIi4uL2NvbW1vbi9zdGF0ZXMvQWN0MVNldHVwU3RhdGVcIjtcbmltcG9ydCBQYXJlbnRCZWFyRW50cmFuY2VTdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvUGFyZW50QmVhckVudHJhbmNlU3RhdGVcIjtcbmltcG9ydCBHb2xkaWxvY2tzRW50cmFuY2VTdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvR29sZGlsb2Nrc0VudHJhbmNlU3RhdGVcIjtcbmltcG9ydCBHYXJkZW5Qcm9wU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL0dhcmRlblByb3BTZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IHsgUHJvcCB9IGZyb20gXCIuLi9wb3BvdmVycy9Qcm9wU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IEJvd2xQcm9wU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL0Jvd2xQcm9wU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBTZWVCZWFySG91c2VTdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvU2VlQmVhckhvdXNlU3RhdGVcIjtcbmltcG9ydCBXYWxrU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL1dhbGtTdGF0ZVwiO1xuaW1wb3J0IEdvbGRpbG9ja3NXZWF0aGVyU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL0dvbGRpbG9ja3NXZWF0aGVyU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBTdW5IYXRTdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvU3VuSGF0U3RhdGVcIjtcbmltcG9ydCBTZWF0UHJvcFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi9nb2xkaWxvY2tzL3N0YXRlcy9TZWF0UHJvcFNlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgU2VhdEJyZWFrU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL1NlYXRCcmVha1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgU2VhdGluZ1N0YXRlIGZyb20gXCIuLi9nb2xkaWxvY2tzL3N0YXRlcy9TZWF0aW5nU3RhdGVcIjtcbmltcG9ydCBCZWRQcm9wU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL0JlZFByb3BTZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IExheWluZ0Zyb21TdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvTGF5aW5nRnJvbVN0YXRlXCI7XG5pbXBvcnQgQ2F1Z2h0UmVzcG9uc2VTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvQ2F1Z2h0UmVzcG9uc2VTZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IEVzY2FwZVN0YXRlIGZyb20gXCIuLi9nb2xkaWxvY2tzL3N0YXRlcy9Fc2NhcGVTdGF0ZVwiO1xuaW1wb3J0IEFjdDNJbnRyb1N0YXRlIGZyb20gXCIuLi9nb2xkaWxvY2tzL3N0YXRlcy9BY3QzSW50cm9TdGF0ZVwiO1xuaW1wb3J0IEJlYXJOb3RpY2VCcm9rZW5DaGFpclN0YXRlIGZyb20gXCIuLi9nb2xkaWxvY2tzL3N0YXRlcy9CZWFyTm90aWNlQnJva2VuQ2hhaXJTdGF0ZVwiO1xuaW1wb3J0IEJlYXJOb3RpY2VCZWRTdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvQmVhck5vdGljZUJlZFN0YXRlXCI7XG5pbXBvcnQgQmVhcnNOb3RpY2VHb2xkaWxvY2tzU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL0JlYXJzTm90aWNlR29sZGlsb2Nrc1N0YXRlXCI7XG5pbXBvcnQgV2Fsa1RvRG9vclN0YXRlIGZyb20gXCIuLi9nb2xkaWxvY2tzL3N0YXRlcy9XYWxrVG9Eb29yU3RhdGVcIjtcbmltcG9ydCBUYXN0aW5nU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL1Rhc3RpbmdTdGF0ZVwiO1xuaW1wb3J0IHsgQ29zdHVtZXMgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Db3N0dW1lc1wiO1xuaW1wb3J0IEVhdEZvb2RTdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvRWF0Rm9vZFN0YXRlXCI7XG5pbXBvcnQgV2Fsa1Rocm91Z2hEb29yU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL1dhbGtUaHJvdWdoRG9vclN0YXRlXCI7XG5pbXBvcnQgQmFieUJlYXJOb3RpY2luZ1N0YXRlIGZyb20gXCIuLi9nb2xkaWxvY2tzL3N0YXRlcy9CYWJ5QmVhck5vdGljaW5nU3RhdGVcIjtcbmltcG9ydCBTbm9yaW5nU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL1Nub3JpbmdTdGF0ZVwiO1xuaW1wb3J0IExheWluZ0ZpcnN0U3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL0xheWluZ0ZpcnN0U3RhdGVcIjtcbmltcG9ydCBMYXlpbmdMYXN0U3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL0xheWluZ0xhc3RTdGF0ZVwiO1xuaW1wb3J0IEJhYnlCZWFyTm90aWNpbmdCb3dsU3RhdGUgZnJvbSBcIi4uL2dvbGRpbG9ja3Mvc3RhdGVzL0JhYnlCZWFyTm90aWNpbmdCb3dsU3RhdGVcIjtcbmltcG9ydCBTZWF0VHJhaW5TdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvU2VhdFRyYWluU3RhdGVcIjtcbmltcG9ydCBUYWxsQ2hhaXJTdGF0ZSBmcm9tIFwiLi4vZ29sZGlsb2Nrcy9zdGF0ZXMvVGFsbENoYWlyU3RhdGVcIjtcblxuZXhwb3J0IGVudW0gQ2hvaWNlVHlwZSB7XG4gICB3ZWF0aGVyQ2hvaWNlID0gXCJwcm9wLXdlYXRoZXJcIixcbiAgICBzZWF0ID0gXCJzZWF0XCIsXG4gICAgcGFyZW50QmVhciA9IFwicGFyZW50LWJlYXJcIixcbiAgICBnbENvc3R1bWVDaG9pY2UgPSBcImdsLWNvc3R1bWUtY2hvaWNlXCIsXG4gICAgZ2FyZGVuID0gXCJnYXJkZW5cIixcbiAgICBib3dsID0gXCJib3dsXCIsXG4gICAgYmVkID0gXCJiZWRcIixcbiAgICBjYXVnaHQxID0gXCJjYXVnaHQtMVwiLFxuICAgIGNhdWdodFJlc3BvbnNlID0gXCJjYXVnaHQtcmVzcG9uc2VcIixcbiAgICBicmVha1NmeCA9IFwiYnJlYWstc2Z4XCIsXG59XG5cbmV4cG9ydCBlbnVtIFNpbXBsZURpYWxvZyB7XG4gICAgaW50cm8xID0gXCJpbnRyby0xXCIsXG4gICAgaW50cm9BY3QyXzEgPSBcImludHJvLWFjdDItMVwiLFxuICAgIGFjdDNJbnRybzEgPSBcImFjdC0zLWludHJvLTFcIixcbiAgICBzdG9yeTUgPSBcInN0b3J5LTVcIixcbiAgICBicmVhazEgPSBcImJyZWFrLTFcIixcbiAgICBhY3QzaW50cm8xID0gXCJhY3QtMy1pbnRyby0xXCIsXG4gICAgc3RvcnkxMyA9IFwic3RvcnktMTNcIixcbiAgICBzdG9yeTE2ID0gXCJzdG9yeS0xNlwiLFxuICAgIGNhdWdodDUgPSBcImNhdWdodC01XCIsXG4gICAgc3Rvcnk5ID0gXCJzdG9yeS05YVwiLFxuICAgIHN0b3J5MTAgPSBcInN0b3J5LTEwXCIsXG4gICAgc3RvcnkxMSA9IFwic3RvcnktMTFcIixcbiAgICBzdG9yeTE0ID0gXCJzdG9yeS0xNFwiLFxuICAgIHN0b3J5MTcgPSBcInN0b3J5LTE3XCIsXG4gICAgYmVkMTAgPSBcImJlZC0xMFwiXG59XG5cbmV4cG9ydCBlbnVtIFdlYXRoZXJDaG9pY2Uge1xuICAgIFdlYXRoZXIyQ2xvdWRzID0gXCJ3ZWF0aGVyLTItY2xvdWRzXCIsXG4gICAgV2VhdGhlcjJTdW4gPSBcIndlYXRoZXItMi1zdW5cIixcbn1cblxuZXhwb3J0IGVudW0gUGFyZW50Q2hvaWNlIHtcbiAgICBwYXJlbnQxTW90aGVyID0gXCJwYXJlbnQtMS1tb3RoZXJcIixcbiAgICBwYXJlbnQxRmF0aGVyID0gXCJwYXJlbnQtMS1mYXRoZXJcIixcbn1cblxuZXhwb3J0IGVudW0gQ3VlVHlwZSB7XG4gICAgZ29sZGlsb2Nrc0VudHJhbmNlID0gXCJnb2xkaWxvY2tzLWVudHJhbmNlXCIsXG4gICAgc3VuSGF0ID0gXCJzdW4taGF0XCIsXG4gICAgZ29sZGlsb2Nrc1NlZXNCZWFySG91c2UgPSBcImJlYXItaG91c2VcIixcbiAgICBnb2xkaWxvY2tzRWF0Rm9vZCA9IFwiZWF0LWZvb2RcIixcbiAgICBlc2NhcGUgPSBcImVzY2FwZVwiXG59XG5cbmV4cG9ydCBlbnVtIEdMQ29zdHVtZUNob2ljZSB7XG4gICAgQ29zdHVtZTFHTCA9IFwiY29zdHVtZS0xLWdvbGRpbG9ja3NcIixcbiAgICBDb3N0dW1lMUdSID0gXCJjb3N0dW1lLTEtZ29sZGlyb2Nrc1wiLFxuICAgIENvc3R1bWUxR0YgPSBcImNvc3R1bWUtMS1nb2xkaWZpc2hcIixcbn1cblxuZXhwb3J0IGVudW0gR2FyZGVuQ2hvaWNlIHtcbiAgICBmbG93ZXJzID0gXCJnYXJkZW4tMi1mbG93ZXJzXCIsXG4gICAgYmVhbnN0YWxrcyA9IFwiZ2FyZGVuLTItYmVhbnN0YWxrc1wiLFxuICAgIGhpdmVzID0gXCJnYXJkZW4tMi1oaXZlc1wiLFxufVxuXG5leHBvcnQgZW51bSBCb3dsQ2hvaWNlIHtcbiAgICBwb3JyaWRnZSA9IFwiYm93bC0yLXBvcnJpZGdlXCIsXG4gICAgdGFjb3MgPSBcImJvd2wtMi10YWNvc1wiLFxuICAgIHNwYWdoZXR0aSA9IFwiYm93bC0yLXNwYWdoZXR0aVwiLFxuICAgIHBvcnJpZGdlNCA9IFwiYm93bC00LXBvcnJpZGdlXCIsXG4gICAgdGFjb3M0ID0gXCJib3dsLTQtdGFjb3NcIixcbiAgICBzcGFnaGV0dGk0ID0gXCJib3dsLTQtc3BhZ2hldHRpXCIsXG4gICAgcG9ycmlkZ2U2ID0gXCJib3dsLTYtcG9ycmlkZ2VcIixcbiAgICB0YWNvczYgPSBcImJvd2wtNi10YWNvc1wiLFxuICAgIHNwYWdoZXR0aTYgPSBcImJvd2wtNi1zcGFnaGV0dGlcIixcbiAgICBwb3JyaWRnZTggPSBcImJvd2wtOC1wb3JyaWRnZVwiLFxuICAgIHRhY29zOCA9IFwiYm93bC04LXRhY29zXCIsXG4gICAgc3BhZ2hldHRpOCA9IFwiYm93bC04LXNwYWdoZXR0aVwiLFxuICAgIGJvd2w0ID0gXCJib3dsLTRcIixcbiAgICBib3dsNiA9IFwiYm93bC02XCIsXG4gICAgYm93bDggPSBcImJvd2wtOFwiLFxufVxuXG5leHBvcnQgZW51bSBTZWF0Q2hvaWNlIHtcbiAgICBjaGFpciA9IFwic2VhdC0yLWNoYWlyXCIsXG4gICAgYmVhbmJhZyA9IFwic2VhdC0yLWJlYW5iYWdcIixcbiAgICB0cmFpbiA9IFwic2VhdC0yLXRyYWluXCIsXG4gICAgc2VhdDNDaGFpciA9IFwic2VhdC0zLWNoYWlyXCIsXG4gICAgc2VhdDNCZWFuYmFnID0gXCJzZWF0LTMtYmVhbmJhZ1wiLFxuICAgIHNlYXQzVHJhaW4gPSBcInNlYXQtMy10cmFpblwiLFxuICAgIHNlYXQ2Q2hhaXIgPSBcInNlYXQtNi1jaGFpclwiLFxuICAgIHNlYXQ2QmVhbmJhZyA9IFwic2VhdC02LWJlYW5iYWdcIixcbiAgICBzZWF0NlRyYWluID0gXCJzZWF0LTYtdHJhaW5cIixcbiAgICBzZWF0OENoYWlyID0gXCJzZWF0LTgtY2hhaXJcIixcbiAgICBzZWF0OEJlYW5iYWcgPSBcInNlYXQtOC1iZWFuYmFnXCIsXG4gICAgc2VhdDhUcmFpbiA9IFwic2VhdC04LXRyYWluXCIsXG59XG5leHBvcnQgZW51bSBCZWRDaG9pY2Uge1xuICAgIGJlZDJXYXRlckJlZD1cImJlZC0yLXdhdGVyYmVkXCIsXG4gICAgYmVkMkNvdWNoPVwiYmVkLTItY291Y2hcIixcbiAgICBiZWQySGFtbW9jaz1cImJlZC0yLWhhbW1vY2tcIixcbiAgICBiZWQzV2F0ZXJCZWQ9XCJiZWQtMy13YXRlcmJlZFwiLFxuICAgIGJlZDNDb3VjaD1cImJlZC0zLWNvdWNoXCIsXG4gICAgYmVkM0hhbW1vY2s9XCJiZWQtMy1oYW1tb2NrXCIsXG4gICAgYmVkNVdhdGVyQmVkPVwiYmVkLTUtd2F0ZXJiZWRcIixcbiAgICBiZWQ1Q291Y2g9XCJiZWQtNS1jb3VjaFwiLFxuICAgIGJlZDVIYW1tb2NrPVwiYmVkLTUtaGFtbW9ja1wiLFxuICAgIGJlZDcgPSBcImJlZC03XCIsXG4gICAgYmVkN0hhbW1vY2s9XCJiZWQtNy1oYW1tb2NrXCJcbn1cblxuZXhwb3J0IGNsYXNzIEdvbGRpbG9ja3NEaWFsb2dTdGF0ZUZhY3RvcnkgZXh0ZW5kcyBEaWFsb2dTdGF0ZUZhY3Rvcnkge1xuXG4gICAgcHJvdGVjdGVkIGFjdDE6IHN0cmluZyA9IFNpbXBsZURpYWxvZy5pbnRybzE7XG4gICAgcHJvdGVjdGVkIGFjdDI6IHN0cmluZyA9IFNpbXBsZURpYWxvZy5pbnRyb0FjdDJfMTtcbiAgICBwcm90ZWN0ZWQgYWN0Mzogc3RyaW5nID0gU2ltcGxlRGlhbG9nLmFjdDNJbnRybzE7XG5cbiAgICBwcm90ZWN0ZWQgaGFuZGxlQ2hvaWNlRGlhbG9nKGRhdGE6IERpYWxvZ1R5cGUsIGRpYWxvZzogQ2hvaWNlRGlhbG9nTGluZSwgcGFzc2FnZTogUGFzc2FnZSkge1xuICAgICAgICBzd2l0Y2ggKGRhdGEuY2hvaWNlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBDaG9pY2VUeXBlLndlYXRoZXJDaG9pY2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHb2xkaWxvY2tzV2VhdGhlclNlbGVjdGlvblN0YXRlKGRpYWxvZyx0aGlzLmNyZWF0ZUljb25TZWxlY3RQb3BPdmVyKFtJY29uVHlwZS5zdW5ueSwgSWNvblR5cGUuY2xvdWR5XSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5wYXJlbnRCZWFyOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFyZW50QmVhckVudHJhbmNlU3RhdGUoZGlhbG9nLCB0aGlzLmNyZWF0ZUNvc3R1bWVTZWxlY3RQb3BPdmVyKFtDb3N0dW1lcy5tdW1tYWJlYXIsIENvc3R1bWVzLnB1cHBhYmVhcl0pLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBjYXNlIENob2ljZVR5cGUuZ2FyZGVuOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR2FyZGVuUHJvcFNlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVQcm9wc1NlbGVjdFBvcE92ZXIoW1Byb3AuZmxvd2VycywgUHJvcC5iZWFuc3RhbGtzLCBQcm9wLmhvbmV5YmVlaGl2ZXNdKSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgY2FzZSBDaG9pY2VUeXBlLmJvd2w6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCb3dsUHJvcFNlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVQcm9wc1NlbGVjdFBvcE92ZXIoW1Byb3AucG9ycmlkZ2UsIFByb3AudGFjb3MsIFByb3Auc3BhZ2hldHRpXSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5zZWF0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VhdFByb3BTZWxlY3Rpb25TdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlUHJvcHNTZWxlY3RQb3BPdmVyKFtQcm9wLmNoYWlyLCBQcm9wLmJlYW5iYWcsIFByb3AudHJhaW5dKSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgY2FzZSBDaG9pY2VUeXBlLmJyZWFrU2Z4OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VhdEJyZWFrU2VsZWN0aW9uU3RhdGUoZGlhbG9nLCB0aGlzLmNyZWF0ZUljb25TZWxlY3RQb3BPdmVyKFtJY29uVHlwZS5iYW5nLCBJY29uVHlwZS5wb3AsIEljb25UeXBlLmNyYXNoXSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5iZWQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCZWRQcm9wU2VsZWN0aW9uU3RhdGUoZGlhbG9nLCB0aGlzLmNyZWF0ZVByb3BzU2VsZWN0UG9wT3ZlcihbUHJvcC53YXRlcmJlZCwgUHJvcC5jb3VjaCwgUHJvcC5oYW1tb2NrXSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5jYXVnaHQxOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmVhcnNOb3RpY2VHb2xkaWxvY2tzU3RhdGUoZGlhbG9nLCB0aGlzLmNyZWF0ZUljb25TZWxlY3RQb3BPdmVyKFtJY29uVHlwZS5kdW1kdW1kdW0sIEljb25UeXBlLmFwcGxhdXNlLCBJY29uVHlwZS5nYXNwXSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5jYXVnaHRSZXNwb25zZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENhdWdodFJlc3BvbnNlU2VsZWN0aW9uU3RhdGUoZGlhbG9nLCB0aGlzLmNyZWF0ZUljb25TZWxlY3RQb3BPdmVyKFtJY29uVHlwZS5zYWQsIEljb25UeXBlLmFuZ3J5LCBJY29uVHlwZS5zaWxseV0pLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNpbXBsZURpYWxvZyhwYXNzYWdlLCBkaWFsb2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGhhbmRsZUN1ZURpYWxvZyhkYXRhOiBEaWFsb2dUeXBlLCBkaWFsb2c6IEN1ZURpYWxvZ0xpbmUpIHtcbiAgICAgICAgc3dpdGNoICgoZGF0YSBhcyBEaWFsb2dDdWVEYXRhKS5jdWUpIHtcbiAgICAgICAgICAgIGNhc2UgQ3VlVHlwZS5zdW5IYXQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdW5IYXRTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ3VlVHlwZS5nb2xkaWxvY2tzU2Vlc0JlYXJIb3VzZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNlZUJlYXJIb3VzZVN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgY2FzZSBDdWVUeXBlLmdvbGRpbG9ja3NFYXRGb29kOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRWF0Rm9vZFN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgY2FzZSBDdWVUeXBlLmVzY2FwZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVzY2FwZVN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IFwibm8gc3RhdGUgZm9yIFwiICsgKGRhdGEgYXMgRGlhbG9nQ3VlRGF0YSkuY3VlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaGFuZGxlQ3VlQ2hvaWNlRGlhbG9nKGRhdGE6IERpYWxvZ1R5cGUsIGRpYWxvZzogQ3VlQ2hvaWNlRGlhbG9nTGluZSkge1xuICAgICAgICBzd2l0Y2ggKChkYXRhIGFzIERpYWxvZ0N1ZURhdGEpLmN1ZSkge1xuICAgICAgICAgICAgY2FzZSBDdWVUeXBlLmdvbGRpbG9ja3NFbnRyYW5jZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEdvbGRpbG9ja3NFbnRyYW5jZVN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVDb3N0dW1lU2VsZWN0UG9wT3ZlcihbQ29zdHVtZXMuZ29sZGlsb2NrcywgQ29zdHVtZXMuZ29sZGlyb2NrcywgQ29zdHVtZXMuZ29sZGlmaXNoLCBdKSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0U2ltcGxlRGlhbG9nKHBhc3NhZ2U6IFBhc3NhZ2UsIGRpYWxvZzogRGlhbG9nTGluZSk6IFN0YWdlU3RhdGUge1xuICAgICAgICBjb25zdCBpc1NlYXRUcmFpbiA9IHBhc3NhZ2UubmFtZSA9PSBTZWF0Q2hvaWNlLnNlYXQzVHJhaW4gfHwgcGFzc2FnZS5uYW1lID09IFNlYXRDaG9pY2Uuc2VhdDZUcmFpbiB8fCBwYXNzYWdlLm5hbWUgPT0gU2VhdENob2ljZS5zZWF0OFRyYWluO1xuICAgICAgICBjb25zdCBpc1NlYXRQYXNzYWdlID0gKCBwYXNzYWdlLm5hbWUgPT0gU2VhdENob2ljZS5zZWF0M0JlYW5iYWcgICkgfHxcbiAgICAgICAgICAgIChwYXNzYWdlLm5hbWUgPT0gU2VhdENob2ljZS5zZWF0NkNoYWlyIHx8IHBhc3NhZ2UubmFtZSA9PSBTZWF0Q2hvaWNlLnNlYXQ2QmVhbmJhZyApIHx8XG4gICAgICAgICAgICAocGFzc2FnZS5uYW1lID09IFNlYXRDaG9pY2Uuc2VhdDhDaGFpciB8fCBwYXNzYWdlLm5hbWUgPT0gU2VhdENob2ljZS5zZWF0OEJlYW5iYWcgKSA7XG5cbiAgICAgICAgY29uc3QgaXNUYWxsQ2hhaXJQYXNzYWdlID0gcGFzc2FnZS5uYW1lID09IFNlYXRDaG9pY2Uuc2VhdDNDaGFpcjtcblxuICAgICAgICBjb25zdCBpc0xheWluZ1Bhc3NhZ2UgPSAoIHBhc3NhZ2UubmFtZSA9PSBCZWRDaG9pY2UuYmVkM0NvdWNoIHx8IHBhc3NhZ2UubmFtZSA9PSBCZWRDaG9pY2UuYmVkM0hhbW1vY2sgfHwgcGFzc2FnZS5uYW1lID09IEJlZENob2ljZS5iZWQzV2F0ZXJCZWQpIDtcbiAgICAgICAgY29uc3QgaXNMYXlpbmdMYXN0UGFzc2FnZSA9IChwYXNzYWdlLm5hbWUgPT0gQmVkQ2hvaWNlLmJlZDcgfHwgcGFzc2FnZS5uYW1lID09IEJlZENob2ljZS5iZWQ3SGFtbW9jaykgO1xuXG4gICAgICAgIGNvbnN0IGlzQm93bFBhc3NhZ2UgPSAoIHBhc3NhZ2UubmFtZSA9PSBCb3dsQ2hvaWNlLnBvcnJpZGdlNCB8fCBwYXNzYWdlLm5hbWUgPT0gQm93bENob2ljZS50YWNvczQgfHwgcGFzc2FnZS5uYW1lID09IEJvd2xDaG9pY2Uuc3BhZ2hldHRpNCkgfHxcbiAgICAgICAgICAgIChwYXNzYWdlLm5hbWUgPT0gQm93bENob2ljZS5wb3JyaWRnZTYgfHwgcGFzc2FnZS5uYW1lID09IEJvd2xDaG9pY2UudGFjb3M2IHx8IHBhc3NhZ2UubmFtZSA9PSBCb3dsQ2hvaWNlLnNwYWdoZXR0aTYpIHx8XG4gICAgICAgICAgICAocGFzc2FnZS5uYW1lID09IEJvd2xDaG9pY2UucG9ycmlkZ2U4IHx8IHBhc3NhZ2UubmFtZSA9PSBCb3dsQ2hvaWNlLnRhY29zOCB8fCBwYXNzYWdlLm5hbWUgPT0gQm93bENob2ljZS5zcGFnaGV0dGk4KSB8fFxuICAgICAgICAgICAgKHBhc3NhZ2UubmFtZSA9PSBCb3dsQ2hvaWNlLmJvd2w0IHx8IHBhc3NhZ2UubmFtZSA9PSBCb3dsQ2hvaWNlLmJvd2w2IHx8IHBhc3NhZ2UubmFtZSA9PSBCb3dsQ2hvaWNlLmJvd2w4KTtcblxuICAgICAgICBjb25zdCBpc0xheWluZ0Zyb21QYXNzYWdlID0gKHBhc3NhZ2UubmFtZSA9PSBCZWRDaG9pY2UuYmVkNUNvdWNoIHx8IHBhc3NhZ2UubmFtZSA9PSBCZWRDaG9pY2UuYmVkNUhhbW1vY2sgfHwgcGFzc2FnZS5uYW1lID09IEJlZENob2ljZS5iZWQ1V2F0ZXJCZWQpO1xuXG4gICAgICAgIGNvbnN0IGlzQmFieUJlYXJOb3RpY2luZ0Jvd2xQYXNzYWdlID0gcGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5zdG9yeTExO1xuICAgICAgICBjb25zdCBpc0JhYnlCZWFyTm90aWNpbmdQYXNzYWdlID0gKCBwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnN0b3J5MTQgfHwgcGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5zdG9yeTE3KTtcblxuICAgICAgICBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5pbnRybzEpe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3QxU2V0dXBTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnN0b3J5NSl7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdhbGtTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1NlYXRQYXNzYWdlKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2VhdGluZ1N0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UsIHRoaXMudmlldyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUYWxsQ2hhaXJQYXNzYWdlKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGFsbENoYWlyU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSwgdGhpcy52aWV3KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0xheWluZ1Bhc3NhZ2Upe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMYXlpbmdGaXJzdFN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UsIHRoaXMudmlldyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNMYXlpbmdMYXN0UGFzc2FnZSl7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExheWluZ0xhc3RTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlLCB0aGlzLnZpZXcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTGF5aW5nRnJvbVBhc3NhZ2Upe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMYXlpbmdGcm9tU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSwgdGhpcy52aWV3KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0JhYnlCZWFyTm90aWNpbmdQYXNzYWdlKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQmFieUJlYXJOb3RpY2luZ1N0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQmFieUJlYXJOb3RpY2luZ0Jvd2xQYXNzYWdlKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQmFieUJlYXJOb3RpY2luZ0Jvd2xTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLmFjdDNpbnRybzEpe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3QzSW50cm9TdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnN0b3J5MTMpe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCZWFyTm90aWNlQnJva2VuQ2hhaXJTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnN0b3J5MTYpe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCZWFyTm90aWNlQmVkU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5zdG9yeTkpe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXYWxrVG9Eb29yU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5zdG9yeTEwKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgV2Fsa1Rocm91Z2hEb29yU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNCb3dsUGFzc2FnZSl7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRhc3RpbmdTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlLCB0aGlzLnZpZXcpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhc3NhZ2UubmFtZSA9PSBTaW1wbGVEaWFsb2cuYmVkMTApe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTbm9yaW5nU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNTZWF0VHJhaW4pe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZWF0VHJhaW5TdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlLCB0aGlzLnZpZXcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBTdGFnZVN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCB7IElEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvSURpYWxvZ0xpbmVcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IEdvbGRpbG9ja3NDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvR29sZGlsb2Nrc0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWxsQ2hhaXJTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuICAgIHByb3RlY3RlZCBnZXQgY2hhcmFjdGVyKCk6IEdvbGRpbG9ja3NDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdvbGRpbG9ja3MpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHRhcmdldDogVmlldztcblxuICAgIGNvbnN0cnVjdG9yKGRpYWxvZzogSURpYWxvZ0xpbmUsIGRpU2VydmljZTogRElTZXJ2aWNlLCB2aWV3OiBWaWV3KSB7XG4gICAgICAgIHN1cGVyKGRpYWxvZywgZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBmaW5kQ2hpbGRCeU5hbWUodmlldywgZGlhbG9nLmxvY2F0aW9uKSBhcyBWaWV3O1xuICAgIH1cblxuICAgIGRpZFRlcm1pbmF0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldENoYXJhY3Rlck1vdmVBY3Rpb24odGhpcy50YXJnZXQsICgpID0+IHRoaXMuY2hhcmFjdGVyLnBsYXlXYWxrKCkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxufSIsImltcG9ydCBTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi9TZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IEljb25TZWxlY3Rpb25Qb3BPdmVyIGZyb20gXCIuLi8uLi9wb3BvdmVycy9JY29uU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5cbmltcG9ydCB7IENob2ljZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DaG9pY2VEaWFsb2dMaW5lXCI7XG5pbXBvcnQgV2VhdGhlclByb3AgZnJvbSBcIi4uLy4uL3Byb3BzL1dlYXRoZXJQcm9wc1wiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWF0aGVyU2VsZWN0aW9uU3RhdGUgZXh0ZW5kcyBTZWxlY3Rpb25TdGF0ZSB7XG4gICAgcHVibGljIGdldCB3ZWF0aGVyUHJvcCgpOiBXZWF0aGVyUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUud2VhdGhlclByb3ApO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGNob2ljZURpYWxvZ0xpbmU6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHByb3RlY3RlZCBzZWxlY3RQb3BvdmVyOiBJY29uU2VsZWN0aW9uUG9wT3ZlcixcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UsKSB7XG4gICAgICAgIHN1cGVyKGNob2ljZURpYWxvZ0xpbmUsIHNlbGVjdFBvcG92ZXIsIGRpU2VydmljZSk7XG4gICAgfVxuXG4gICAgb25DaG9pY2VzQmVpbmdQcmVzZW50ZWQoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jaGVja0Nob2ljZU1hZGUoKSkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLnZpZXcueCA9IDA7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgY29uc3Qgb25Db21wbGV0ZSA9ICgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4gdGhpcy53ZWF0aGVyUHJvcC5kcm9wKGNob2ljZUlkLCBvbkNvbXBsZXRlKSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy53ZWF0aGVyUHJvcC5jaG9pY2VJZCA9IHRoaXMuY2hvaWNlRGlhbG9nLmdldERlZmF1bHRDaG9pY2UoKTtcbiAgICAgICAgdGhpcy53ZWF0aGVyUHJvcC5za2lwKCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbiAgICBvbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgc3VwZXIub25EZXN0cm95KCk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IEljb25TZWxlY3Rpb25Qb3BPdmVyIGZyb20gXCIuLi8uLi9wb3BvdmVycy9JY29uU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IHsgQ2hvaWNlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0Nob2ljZURpYWxvZ0xpbmVcIjtcbmltcG9ydCB7IENob2ljZVR5cGUgfSBmcm9tIFwiLi4vLi4vZmFjdG9yaWVzL0xSUkhEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uTW92ZW1lbnRTZWxlY3Rpb25TdGF0ZSBleHRlbmRzIFNlbGVjdGlvblN0YXRlIHtcblxuICAgIGNvbnN0cnVjdG9yKGNob2ljZURpYWxvZ0xpbmU6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHByb3RlY3RlZCBzZWxlY3RQb3BvdmVyOiBJY29uU2VsZWN0aW9uUG9wT3ZlcixcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGNob2ljZURpYWxvZ0xpbmUsIHNlbGVjdFBvcG92ZXIsIGRpU2VydmljZSk7XG4gICAgfVxuXG4gICAgb25DaG9pY2VzQmVpbmdQcmVzZW50ZWQoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jaGVja0Nob2ljZU1hZGUoKSkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLnZpZXcueCA9IHRoaXMuZ2V0Q2hhcmFjdGVyKCkueFxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnRlcmF0aW9ucygpO1xuXG4gICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLmZpbmlzaENob2ljZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuc2V0QWN0aW9uKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4gdGhpcy5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLnNldEFjdGlvbih0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCkpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldEFjdGlvbihjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZ2V0Q2hhcmFjdGVyKCkuc2V0RGVmYXVsdEFjdGlvbihjaG9pY2VJZCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldENob2ljZUlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBDaG9pY2VUeXBlLmxycmhBY3Rpb24yV2Fsa2luZztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0Q2hhcmFjdGVyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCk7XG4gICAgfVxuXG59IiwiXG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCBTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IFByb3BTZWxlY3Rpb25Qb3BPdmVyIGZyb20gXCIuLi8uLi9wb3BvdmVycy9Qcm9wU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IHsgQ2hvaWNlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0Nob2ljZURpYWxvZ0xpbmVcIjtcbmltcG9ydCBGb3Jlc3RQcm9wcyBmcm9tIFwiLi4vLi4vcHJvcHMvRm9yZXN0UHJvcHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVjb3JzUHJvcFNlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUge1xuXG4gICAgY29uc3RydWN0b3IoY2hvaWNlRGlhbG9nTGluZTogQ2hvaWNlRGlhbG9nTGluZSxcbiAgICAgICAgc2VsZWN0UG9wb3ZlcjogUHJvcFNlbGVjdGlvblBvcE92ZXIsXG4gICAgICAgIHByaXZhdGUgZm9yZXN0UHJvcDogRm9yZXN0UHJvcHMsXG4gICAgICAgIGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGNob2ljZURpYWxvZ0xpbmUsIHNlbGVjdFBvcG92ZXIsIGRpU2VydmljZSk7XG4gICAgfVxuXG4gICAgb25DaG9pY2VzQmVpbmdQcmVzZW50ZWQoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jaGVja0Nob2ljZU1hZGUoKSkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLnNob3coKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcblxuICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5maW5pc2hDaG9pY2UoY2hvaWNlSWQpO1xuICAgICAgICBjb25zdCBvbkNvbXBsZXRlID0gKCkgPT4gdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4gdGhpcy5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKTtcbiAgICAgICAgdGhpcy5mb3Jlc3RQcm9wLnNob3coY2hvaWNlSWQsIG9uQ29tcGxldGUpO1xuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuZm9yZXN0UHJvcC5jaG9pY2VJZCA9IHRoaXMuY2hvaWNlRGlhbG9nLmdldERlZmF1bHRDaG9pY2UoKTtcbiAgICAgICAgdGhpcy5mb3Jlc3RQcm9wLnNraXAoKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIgZnJvbSBcIi4uLy4uL3BvcG92ZXJzL0Nvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUsIEN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSB9IGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0RpYWxvZ0xpbmVEZWxlZ2F0ZVwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgeyBDdWVDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ3VlQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgTFJSSENvc3R1bWVDaG9pY2UgfSBmcm9tIFwiLi4vLi4vZmFjdG9yaWVzL0xSUkhEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0RpcmVjdGlvblwiO1xuaW1wb3J0IHsgQ29zdHVtZXMgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Db3N0dW1lc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMUlJIRW50cmFuY2VTdGF0ZSBleHRlbmRzIFNlbGVjdGlvblN0YXRlIGltcGxlbWVudHMgQ3VlRGlhbG9nTGluZURlbGVnYXRlLCBDaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUge1xuXG4gICAgcHJpdmF0ZSBjaG9pY2VUb0Nvc3R1bWVNYXA6IE1hcDxzdHJpbmcsIENvc3R1bWVzPiA9IG5ldyBNYXAoW1xuICAgICAgICBbTFJSSENvc3R1bWVDaG9pY2UubHJyaENvc3R1bWUxSG9vZCwgQ29zdHVtZXMubGl0dGxlUmVkSG9vZF0sXG4gICAgICAgIFtMUlJIQ29zdHVtZUNob2ljZS5scnJoQ29zdHVtZUNvd2JveSwgQ29zdHVtZXMuY293Ym95XSxcbiAgICAgICAgW0xSUkhDb3N0dW1lQ2hvaWNlLmxycmhDb3N0dW1lUGlyYXRlLCBDb3N0dW1lcy5waXJhdGVdLFxuICAgIF0pO1xuXG4gICAgcHJpdmF0ZSBzcGluZXM6IE1hcDxzdHJpbmcsIGZyYW1ld29yay5TcGluZVZpZXc+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHVibGljIGdldCBjaGFyYWN0ZXIoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5saXR0bGVSZWRIb29kKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNvc3R1bWVQb3BvdmVyKCk6IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNlbGVjdFBvcG92ZXIgYXMgQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIpO1xuICAgIH1cblxuXG4gICAgY29uc3RydWN0b3IoZGlhbG9nOiBDdWVDaG9pY2VEaWFsb2dMaW5lLFxuICAgICAgICBwcml2YXRlIGNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyOiBDb3N0dW1lU2VsZWN0aW9uUG9wT3ZlcixcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZGlhbG9nLCBjb3N0dW1lU2VsZWN0aW9uUG9wT3ZlciwgZGlTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBvbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgdGhpcyk7XG4gICAgICAgIHRoaXMuY29zdHVtZVNlbGVjdGlvblBvcE92ZXIuc2V0SWNvbnMoW0Nvc3R1bWVzLmxpdHRsZVJlZEhvb2QsIENvc3R1bWVzLmNvd2JveSwgQ29zdHVtZXMucGlyYXRlXSk7XG4gICAgICAgIHN1cGVyLm9uSW5pdCgpO1xuICAgICAgICB0aGlzLnNldFBvcE92ZXJCdXR0b25JbmFjdGl2ZSgpO1xuICAgIH1cblxuICAgIG9uQ3VlKCkge1xuICAgICAgICB0aGlzLmluaXRDaGFyYWN0ZXIoKTtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldFdhbGtPbkFjdGlvbigpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5jaGFyYWN0ZXIucGxheUlkbGUoKSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdENoYXJhY3RlcigpIHtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5yaWdodCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNob3coKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcblxuICAgICAgICB0aGlzLnNldENvc3R1bWUoY2hvaWNlSWQpO1xuXG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmdldE9uU2VsZWN0QW5pbUFjdGlvbih0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldENvc3R1bWVBY3Rpb24odGhpcy5jaG9pY2VUb0Nvc3R1bWVNYXAuZ2V0KGNob2ljZUlkKSksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKVxuICAgICAgICAgICAgICAgIF0pKVxuICAgICAgICAgICAgfSkpXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldENvc3R1bWUoY2hvaWNlSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5maW5pc2hDaG9pY2UoY2hvaWNlSWQpO1xuICAgICAgICB0aGlzLmNvc3R1bWVQb3BvdmVyLnNldFNlbGVjdGVkKHRoaXMuc3BpbmVzLmdldChjaG9pY2VJZCkpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0UG9wT3ZlckJ1dHRvbkFjdGl2ZSgpO1xuXG4gICAgICAgICAgICB0aGlzLnNwaW5lcy5zZXQoTFJSSENvc3R1bWVDaG9pY2UubHJyaENvc3R1bWUxSG9vZCwgdGhpcy5jb3N0dW1lU2VsZWN0aW9uUG9wT3Zlci5idXR0b25MZWZ0KTtcbiAgICAgICAgICAgIHRoaXMuc3BpbmVzLnNldChMUlJIQ29zdHVtZUNob2ljZS5scnJoQ29zdHVtZUNvd2JveSwgdGhpcy5jb3N0dW1lU2VsZWN0aW9uUG9wT3Zlci5idXR0b25NaWRkbGUpO1xuICAgICAgICAgICAgdGhpcy5zcGluZXMuc2V0KExSUkhDb3N0dW1lQ2hvaWNlLmxycmhDb3N0dW1lUGlyYXRlLCB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmJ1dHRvblJpZ2h0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25EZWluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgbnVsbCk7XG4gICAgICAgIHN1cGVyLm9uRGVpbml0KCk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5pbml0Q2hhcmFjdGVyKCk7XG4gICAgICAgIGNvbnN0IGNob2ljZUlkID0gdGhpcy5jaG9pY2VEaWFsb2cuZ2V0RGVmYXVsdENob2ljZSgpXG4gICAgICAgIHRoaXMuc2V0Q29zdHVtZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNldENvc3R1bWUodGhpcy5jaG9pY2VUb0Nvc3R1bWVNYXAuZ2V0KGNob2ljZUlkKSk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG59IiwiXG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCB7IFNlcnZpY2VOYW1lLCBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IFNGWFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NGWFNlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgU0ZYQWN0aW9uIGZyb20gXCIuLi8uLi8uLi91dGlscy9TRlhBY3Rpb25cIjtcbmltcG9ydCB7IFNvdW5kQ2hhbm5lbCB9IGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9Tb3VuZFNlcnZpY2VcIjtcbmltcG9ydCBDYW1lcmFTZXJ2aWNlIGZyb20gXCIuLy4uLy4uLy4uL1NlcnZpY2VzL0NhbWVyYVNlcnZpY2VcIjtcbmltcG9ydCBMb2NhdG9yIGZyb20gXCIuLi8uLi9jb21tb24vTG9jYXRvclwiO1xuaW1wb3J0IHsgQ29zdHVtZXMgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Db3N0dW1lc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb2xmRW50cmFuY2VTdGF0ZSBleHRlbmRzIFNGWFNlbGVjdGlvblN0YXRlICB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgd29sZigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpO1xuICAgIH0gXG4gICAgXG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cbiAgICBcbiAgICBvbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMud29sZi54ID0gdGhpcy5sb2NhdG9yLndvbGZBcHBlcmFuY2VTcG90Lng7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgdGhpcyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnBsYXlEZWZhdWx0QWN0aW9uKCk7XG5cbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpLnNldENvc3R1bWUoIENvc3R1bWVzLndvbGYpO1xuICAgICAgICBzdXBlci5vbkluaXQoKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcblxuICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5maW5pc2hDaG9pY2UoY2hvaWNlSWQpO1xuICAgICAgICBjb25zdCBzZnggPSB0aGlzLmRpYWxvZy5zZnhDaG9pY2VzW2Nob2ljZUlkXTtcbiAgICAgICAgaWYgKCFzZngpe1xuICAgICAgICAgICAgdGhyb3cgJ25vIHNmeCBmb3IgJyArIGNob2ljZUlkICsgXCIgaW4gXCIgKyB0aGlzLmRpYWxvZy5zZnhDaG9pY2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNhbWVyYVNlcnZpY2UgPSB0aGlzLmRpU2VydmljZS5nZXQ8Q2FtZXJhU2VydmljZT4oU2VydmljZU5hbWUuQ2FtZXJhU2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTRlhBY3Rpb24oc2Z4LCBTb3VuZENoYW5uZWwuRzIsIGZhbHNlLCB0aGlzLmRpU2VydmljZSksXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYVNlcnZpY2UuZ2V0U2hha2VBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b2xmLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy53b2xmLnBsYXlJZGxlKCkpLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5SWRsZSgpKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKHRoaXMuZGlhbG9nLmdldExpbmsoMCkubGluaykpLFxuICAgICAgICAgICAgXSkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbkRlaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuQ3VlRGlhbG9nTGluZURlbGVnYXRlLCBudWxsKTtcbiAgICAgICAgc3VwZXIub25EZWluaXQoKTtcbiAgICB9XG5cbiAgICBza2lwKCl7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLnNraXAoKTtcbiAgICAgICAgICAgIHRoaXMud29sZi5zaG93KCk7XG4gICAgICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5maW5pc2hDaG9pY2UodGhpcy5jaG9pY2VEaWFsb2cuZ2V0RGVmYXVsdENob2ljZSgpKTtcbiAgICAgICAgICAgIHRoaXMuZGlkVGVybWluYXRlKHRoaXMuZGlhbG9nLmdldExpbmsoMCkubGluayk7XG4gICAgICAgICAgICB0aGlzLnNldENoYXJhY3RlcnNUb0lkbGUoKTtcbiAgICAgICAgICAgIHRoaXMuc3RvcFNvdW5kKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgUHJvcFNlbGVjdGlvblBvcE92ZXIgZnJvbSBcIi4uLy4uL3BvcG92ZXJzL1Byb3BTZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IFN0YWdlUHJvcHMgZnJvbSBcIi4uLy4uL3Byb3BzL3NjZW5lUHJvcHMvU3RhZ2VQcm9wc1wiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgTFJSSFN0b3J5RGF0YSBmcm9tIFwiLi4vTFJSSFN0b3J5RGF0YVwiO1xuaW1wb3J0IExSUkhDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvTFJSSENoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNrZXRQcm9wU2VsZWN0aW9uU3RhdGUgZXh0ZW5kcyBTZWxlY3Rpb25TdGF0ZSB7XG5cbiAgICBwcml2YXRlIHByb3BzOiBTdGFnZVByb3BzW10gPSBbXTtcblxuICAgIHByaXZhdGUgZ2V0IHN0b3J5RGF0YSgpOiBMUlJIU3RvcnlEYXRhIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5TdG9yeURhdGEpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IGNoYXJhY3RlcigpOiBMUlJIQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5saXR0bGVSZWRIb29kKSBhcyBMUlJIQ2hhcmFjdGVyO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGNob2ljZURpYWxvZ0xpbmU6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHNlbGVjdFBvcG92ZXI6IFByb3BTZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihjaG9pY2VEaWFsb2dMaW5lLCBzZWxlY3RQb3BvdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5zZXRCYXNrZXQoY2hvaWNlSWQpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0U2V0QWNjZXNzb3J5QWN0aW9uKHRoaXMuc3RvcnlEYXRhLmJhc2tldENob2ljZUZyb20oY2hvaWNlSWQpKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZUlkKSlcbiAgICAgICAgICAgIF0pKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEJhc2tldChjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3RvcnlEYXRhLmJhc2tldENob2ljZSA9IGNob2ljZUlkO1xuICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5maW5pc2hDaG9pY2UoY2hvaWNlSWQpO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLnByb3BzLmZvckVhY2gocHJvcCA9PiBwcm9wLmRlaW5pdCgpKTtcbiAgICAgICAgdGhpcy5wcm9wcyA9IFtdO1xuICAgICAgICBzdXBlci5jbGVhcigpO1xuICAgIH1cbiAgICBcbiAgICBza2lwKCkge1xuICAgICAgICBjb25zdCBjaG9pY2VJZCA9IHRoaXMuY2hvaWNlRGlhbG9nLmdldERlZmF1bHRDaG9pY2UoKTtcbiAgICAgICAgdGhpcy5zZXRCYXNrZXQoY2hvaWNlSWQpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zZXRCYXNrZXQodGhpcy5zdG9yeURhdGEuYmFza2V0Q2hvaWNlRnJvbShjaG9pY2VJZCkpO1xuICAgICAgICBzdXBlci5za2lwKClcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgTFJSSENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9MUlJIQ2hhcmFjdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVtYnJlbGxhU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlICB7XG4gICAgcHVibGljIGdldCBjaGFyYWN0ZXIoKTogTFJSSENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCkgYXMgTFJSSENoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRTZXRVbWJyZWxsYUFjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBza2lwKCl7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNldFVtYnJlbGxhKCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG4gICBcbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IERpYWxvZ0xpbmUgZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvRGlhbG9nTGluZVwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgeyBTb3VuZENoYW5uZWwgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvU291bmRTZXJ2aWNlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBCYWNrZHJvcCwgeyBCYWNrRHJvcFNraW4gfSBmcm9tIFwiLi4vLi4vcHJvcHMvQmFja2Ryb3BcIjtcbmltcG9ydCBGb3Jlc3RQcm9wcyBmcm9tIFwiLi4vLi4vcHJvcHMvRm9yZXN0UHJvcHNcIjtcbmltcG9ydCBXZWF0aGVyUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvV2VhdGhlclByb3BzXCI7XG5pbXBvcnQgRG9vciBmcm9tIFwiLi4vLi4vcHJvcHMvRG9vclwiO1xuaW1wb3J0IFNGWEFjdGlvbiBmcm9tIFwiLi8uLi8uLi8uLi91dGlscy9TRlhBY3Rpb25cIjtcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0RpcmVjdGlvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3QySW50cm9TdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuICAgIHByb3RlY3RlZCBnZXQgYmFja2Ryb3AoKTogQmFja2Ryb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmJhY2tkcm9wKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBmb3Jlc3QoKTogRm9yZXN0UHJvcHMge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmZvcmVzdFByb3ApO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IHdlYXRoZXIoKTogV2VhdGhlclByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLndlYXRoZXJQcm9wKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBkb29yKCk6IERvb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmRvb3IpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGdyYW5tYSgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdyYW5kbWEpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGRpYWxvZzogRGlhbG9nTGluZSxcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGRpYWxvZywgZGlTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBvbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ3Jhbm1hLnNldERpcmVjdGlvbihEaXJlY3Rpb24ubGVmdCk7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmdldFJlbW92ZVByZXZpb3VzQWN0QWN0aW9uKCksXG4gICAgICAgICAgICB0aGlzLmJhY2tkcm9wLmdldEFuaW1hdGVkQWN0Q2hhbmdlQWN0aW9uKEJhY2tEcm9wU2tpbi5hY3QyKSxcbiAgICAgICAgICAgIHRoaXMuZG9vci5nZXRTaG93QWN0aW9uKCksXG4gICAgICAgICAgICB0aGlzLmdyYW5tYS5nZXRTaG93QW5kUmlzZVVwQWN0aW9uKCksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZ3Jhbm1hLnBsYXlJZGxlKCkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmVtb3ZlUHJldmlvdXNBY3RBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLmZvcmVzdC5nZXRSZW1vdmVBY3Rpb24oKSxcbiAgICAgICAgICAgIHRoaXMud2VhdGhlci5nZXRSZW1vdmVBY3Rpb24oKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0UmVtb3ZlQ2hhcmFjdGVyc0FjdGlvbigpLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBnZXRSZW1vdmVDaGFyYWN0ZXJzQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBscnJoID0gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpO1xuICAgICAgICBjb25zdCB3b2xmID0gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpO1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIGxycmguZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgICAgIHdvbGYuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICBscnJoLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB3b2xmLmhpZGUoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBcbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgdGhpcy5kb29yLmdldFJpbmdBbmltQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgbmV3IFNGWEFjdGlvbihcImRvb3Ita25vY2subXAzXCIsIFNvdW5kQ2hhbm5lbC5HMiwgZmFsc2UsIHRoaXMuZGlTZXJ2aWNlKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHN1cGVyLmRpZFRlcm1pbmF0ZShuYW1lKSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHNraXAoKXtcbiAgICAgICAgdGhpcy53ZWF0aGVyLmhpZGUoKTtcbiAgICAgICAgdGhpcy53ZWF0aGVyLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZm9yZXN0LmhpZGUoKTtcbiAgICAgICAgdGhpcy5kb29yLnNob3coKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cblxuXG59IiwiXG5pbXBvcnQgU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU2VsZWN0aW9uU3RhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29sZkhvdXNlRW50cmFuY2VWT1NlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUgIHtcblxuICAgb25DaG9pY2VzQmVpbmdQcmVzZW50ZWQoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci52aWV3LnggPSAwO1xuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygpO1xuICAgIH1cbiAgICBcbiAgICBvbkNob2ljZShjaG9pY2U6IHN0cmluZykge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZSkpO1xuICAgIH1cblxufSIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBEb29yIGZyb20gXCIuLi8uLi9wcm9wcy9Eb29yXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcbmltcG9ydCB7IENvc3R1bWVzIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ29zdHVtZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29sZkhvdXNlRW50cmFuY2VTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuXG4gICAgcHJvdGVjdGVkIGdldCBkb29yKCk6IERvb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmRvb3IpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgd29sZigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbml0Q2hhcmFjdGVyKCk7XG4gICAgICAgIHN1cGVyLm9uSW5pdCgpO1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgwLjMpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLndvbGYuZ2V0U2hvd0FuZFJpc2VVcEFjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMud29sZi5wbGF5SWRsZSgpKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICB0aGlzLmRvb3IuZ2V0T3BlbkFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdENoYXJhY3Rlcigpe1xuICAgICAgICB0aGlzLndvbGYuc2V0Q29zdHVtZShDb3N0dW1lcy53b2xmKTtcbiAgICAgICAgdGhpcy53b2xmLnNldERpcmVjdGlvbihEaXJlY3Rpb24ucmlnaHQpO1xuICAgICAgICB0aGlzLndvbGYueCA9IHRoaXMuZG9vci54O1xuICAgIH1cblxuICAgIHNraXAoKXtcbiAgICAgICAgdGhpcy5pbml0Q2hhcmFjdGVyKCk7XG4gICAgICAgIHRoaXMud29sZi5zaG93KCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgSVNlbGVjdGlvblBvcE92ZXIgfSBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgUHJpc29uUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvUHJpc29uUHJvcFwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgRG9vciBmcm9tIFwiLi4vLi4vcHJvcHMvRG9vclwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByaXNvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUge1xuICAgIHByb3RlY3RlZCBnZXQgcHJpc29uKCk6IFByaXNvblByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLnByaXNvbik7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgbG9jYXRvcigpOiBMb2NhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5sb2NhdG9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGdyYW5kbWEoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5ncmFuZG1hKTtcbiAgICB9XG4gICAgcHVibGljIGdldCB3b2xmKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUud29sZik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBkb29yKCk6IERvb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmRvb3IpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGNob2ljZURpYWxvZ0xpbmU6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHByb3RlY3RlZCBzZWxlY3RQb3BvdmVyOiBJU2VsZWN0aW9uUG9wT3ZlcixcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGNob2ljZURpYWxvZ0xpbmUsIHNlbGVjdFBvcG92ZXIsIGRpU2VydmljZSk7XG4gICAgfVxuXG4gICAgb25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5DdWVEaWFsb2dMaW5lRGVsZWdhdGUsIHRoaXMpO1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLndvbGYuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5sZWZ0KSksXG4gICAgICAgICAgICB0aGlzLmRvb3IuZ2V0Q2xvc2VBbmltQWN0aW9uKCksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMud29sZi5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KSksXG4gICAgICAgICAgICB0aGlzLndvbGYuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmxvY2F0b3Iud29sZkdyYW5ueSwgKCkgPT4gdGhpcy53b2xmLnBsYXlXYWxrKCksIDAuMyksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMud29sZi5wbGF5SWRsZSgpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpXG4gICAgICAgIF0pKVxuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcblxuICAgICAgICB0aGlzLnByaXNvbi5zZWxlY3RlZCA9IGNob2ljZUlkO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpc29uLmdldFNob3dBbmltQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpc29uLmdldE9wZW5JZGxlQW5pbUFjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmdyYW5kbWEucGxheUhpZGVEb3duUmlnaHQoKSksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZ3JhbmRtYS5oaWRlKCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXNvbi5nZXRDbG9zZUFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmlzb24uZ2V0Q2xvc2VJZGxlQW5pbUFjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDAuNjcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5wcmlzb24uc2VsZWN0ZWQgPSB0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCk7XG4gICAgICAgIHRoaXMucHJpc29uLnNob3coKTtcbiAgICAgICAgdGhpcy5wcmlzb24ucGxheUlkbGUoKTtcbiAgICAgICAgdGhpcy5kb29yLnBsYXlJZGxlQ2xvc2VkKCk7XG4gICAgICAgIHRoaXMuZ3JhbmRtYS5oaWRlKCk7XG5cbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cblxufSIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmFubnlXYWxraW5nU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcbiAgXG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgZ3JhbmRtYSgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdyYW5kbWEpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG5cbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDApLFxuICAgICAgICAgICAgdGhpcy5ncmFuZG1hLmdldENoYXJhY3Rlck1vdmVBY3Rpb24odGhpcy5sb2NhdG9yLmdyYW5ueURvb3JTcG90LCAoKSA9PiB0aGlzLmdyYW5kbWEucGxheVdhbGsoKSwgMSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZ3JhbmRtYS5wbGF5SWRsZSgpKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBEaWFsb2dMaW5lIGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0RpYWxvZ0xpbmVcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBMb2NhdG9yIGZyb20gXCIuLi8uLi9jb21tb24vTG9jYXRvclwiO1xuaW1wb3J0IExSUkhDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvTFJSSENoYXJhY3RlclwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvbGZEaXNndWlzZVN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBjaGFyYWN0ZXIoKTogTFJSSENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUud29sZikgYXMgTFJSSENoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihkaWFsb2c6IERpYWxvZ0xpbmUsXG4gICAgICAgIGRpU2VydmljZTogRElTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBzdXBlcihkaWFsb2csIGRpU2VydmljZSk7XG4gICAgfVxuXG4gICAgb25Jbml0KCk6IHZvaWQge1xuICAgICAgIHN1cGVyLm9uSW5pdCgpO1xuXG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRTZXRXb2xmR3Jhbm1hQWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENoYXJhY3RlclBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5sZWZ0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5zZXRXb2xmR3Jhbm1hKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5pbml0Q2hhcmFjdGVyKCk7XG4gICAgICAgIHRoaXMuc2V0Q2hhcmFjdGVyUG9zaXRpb24oKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0Q2hhcmFjdGVyKCkge1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zZXRXb2xmR3Jhbm1hKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldENoYXJhY3RlclBvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci54ID0gdGhpcy5sb2NhdG9yLm1pZGRsZS54O1xuICAgIH1cbn0iLCJpbXBvcnQgU0ZYU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU0ZYU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBEb29yIGZyb20gXCIuLi8uLi9wcm9wcy9Eb29yXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IFNGWEFjdGlvbiBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvU0ZYQWN0aW9uXCI7XG5pbXBvcnQgeyBTb3VuZENoYW5uZWwgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvU291bmRTZXJ2aWNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvb3JCZWxsU3RhdGUgZXh0ZW5kcyBTRlhTZWxlY3Rpb25TdGF0ZSB7XG5cblxuICAgIHByb3RlY3RlZCBnZXQgZG9vcigpOiBEb29yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5kb29yKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcblxuICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5maW5pc2hDaG9pY2UoY2hvaWNlSWQpO1xuXG4gICAgICAgIGNvbnN0IHNmeCA9IHRoaXMuZGlhbG9nLnNmeENob2ljZXNbY2hvaWNlSWRdO1xuICAgICAgICBpZiAoIXNmeCkge1xuICAgICAgICAgICAgdGhyb3cgJ25vIHNmeCBmb3IgJyArIGNob2ljZUlkICsgXCIgaW4gXCIgKyB0aGlzLmRpYWxvZy5zZnhDaG9pY2VzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcblxuICAgICAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb29yLmdldFJpbmdBbmltQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgU0ZYQWN0aW9uKHNmeCwgU291bmRDaGFubmVsLkcyLCBmYWxzZSwgdGhpcy5kaVNlcnZpY2UpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKHRoaXMuZGlhbG9nLmdldExpbmsoMCkubGluaykpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmRvb3Iuc2tpcCgpO1xuICAgICAgICB0aGlzLnN0b3BTb3VuZCgpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBEaWFsb2dMaW5lIGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0RpYWxvZ0xpbmVcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgRG9vciBmcm9tIFwiLi4vLi4vcHJvcHMvRG9vclwiO1xuaW1wb3J0IHsgQ3VlRGlhbG9nTGluZURlbGVnYXRlIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvRGlhbG9nTGluZURlbGVnYXRlXCI7XG5pbXBvcnQgTFJSSFN0b3J5RGF0YSBmcm9tIFwiLi4vTFJSSFN0b3J5RGF0YVwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL0xvY2F0b3JcIjtcbmltcG9ydCBMUlJIQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0xSUkhDaGFyYWN0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTFJSSEhvdXNlRW50cmFuY2VTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUgaW1wbGVtZW50cyBDdWVEaWFsb2dMaW5lRGVsZWdhdGUge1xuXG4gICAgcHJvdGVjdGVkIGdldCBkb29yKCk6IERvb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmRvb3IpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgc3RvcnlEYXRhKCk6IExSUkhTdG9yeURhdGEge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLlN0b3J5RGF0YSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgbG9jYXRvcigpOiBMb2NhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5sb2NhdG9yKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcigpOiBMUlJIQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5saXR0bGVSZWRIb29kKSBhcyBMUlJIQ2hhcmFjdGVyO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGRpYWxvZzogRGlhbG9nTGluZSxcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGRpYWxvZywgZGlTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBvbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSwgdGhpcyk7XG4gICAgICAgIHRoaXMuaW5pdENoYXJhY3RlcigpO1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG5cbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDAuMyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5SWRsZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgdGhpcy5kb29yLmdldE9wZW5BbmltQWN0aW9uKCksXG4gICAgICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0Q2hhcmFjdGVyKCkge1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIueCA9IHRoaXMuZG9vci54O1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zZXRDb3N0dW1lKENoYXJhY3Rlci5jb3N0dW1lRnJvbU5hbWUodGhpcy5zdG9yeURhdGEuc2F2ZS5nZXQoXCJjb3N0dW1lXCIpKSk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNldEJhc2tldCh0aGlzLnN0b3J5RGF0YS5iYXNrZXRDaG9pY2VGcm9tKHRoaXMuc3RvcnlEYXRhLmJhc2tldENob2ljZSkpO1xuICAgIH1cblxuICAgIG9uQ3VlKCk6IHZvaWQge1xuICAgICAgICAvL0RPIE5PVEhJTkdcbiAgICB9XG5cbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldENoYXJhY3Rlck1vdmVBY3Rpb24odGhpcy5sb2NhdG9yLm1pZGRsZUxlZnQsICgpID0+IHRoaXMuY2hhcmFjdGVyLnBsYXlXYWxrKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5SWRsZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9vci5nZXRDbG9zZUFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmRvb3IucGxheUlkbGVDbG9zZWQoKSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpLFxuICAgICAgICAgICAgXSkpXG4gICAgfVxuXG5cbiAgICBvbkRlaW5pdCgpIHtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2UuZGVsZXRlRGF0YVdpdGhLZXkoRGF0YU5hbWUuQ3VlRGlhbG9nTGluZURlbGVnYXRlKTtcbiAgICAgICAgc3VwZXIub25EZWluaXQoKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmluaXRDaGFyYWN0ZXIoKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIuc2hvdygpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci54ID0gdGhpcy5sb2NhdG9yLm1pZGRsZUxlZnQueDtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBBY3Rpb25Nb3ZlbWVudFNlbGVjdGlvblN0YXRlIGZyb20gXCIuL0FjdGlvbk1vdmVtZW50U2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCB7IENob2ljZVR5cGUgfSBmcm9tIFwiLi4vLi4vZmFjdG9yaWVzL0xSUkhEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0M0FjdGlvblNlbGVjdGlvblN0YXRlIGV4dGVuZHMgQWN0aW9uTW92ZW1lbnRTZWxlY3Rpb25TdGF0ZSAge1xuXG4gICAgcHJvdGVjdGVkIHNldEFjdGlvbihjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZ2V0Q2hhcmFjdGVyKCkuc2V0UmVhY3Rpb25BY3Rpb24oY2hvaWNlSWQpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRDaG9pY2VJZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gQ2hvaWNlVHlwZS5hY3QzQWN0aW9uMlJ1bjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0Q2hhcmFjdGVyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCk7XG4gICAgfVxufSIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgSVNlbGVjdGlvblBvcE92ZXIgfSBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IHsgTFJSSEdyYW5ueUNob2ljZSB9IGZyb20gXCIuLi8uLi9mYWN0b3JpZXMvTFJSSERpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IFByaXNvblByb3AgZnJvbSBcIi4uLy4uL3Byb3BzL1ByaXNvblByb3BcIjtcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0RpcmVjdGlvblwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBDb3N0dW1lcyB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0Nvc3R1bWVzXCI7XG5pbXBvcnQgQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIgZnJvbSBcIi4uLy4uL3BvcG92ZXJzL0Nvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyYW5ueURpc2d1aXNlU3RhdGUgZXh0ZW5kcyBTZWxlY3Rpb25TdGF0ZSB7XG5cbiAgICBwcml2YXRlIGNob2ljZVRvQ29zdHVtZU1hcDogTWFwPHN0cmluZywgQ29zdHVtZXM+ID0gbmV3IE1hcChbXG4gICAgICAgIFtMUlJIR3Jhbm55Q2hvaWNlLmNvc3R1bWUyS2FyYXRlLCBDb3N0dW1lcy5rYXJhdGVncmFuZG1hXSxcbiAgICAgICAgW0xSUkhHcmFubnlDaG9pY2UuY29zdHVtZTJTdXBlcmhlcm8sIENvc3R1bWVzLnN1cGVyaGVyb2dyYW5kbWFdXG4gICAgXSk7XG5cbiAgICBwcml2YXRlIHNwaW5lczogTWFwPHN0cmluZywgZnJhbWV3b3JrLlNwaW5lVmlldz4gPSBuZXcgTWFwKCk7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHByaXNvbigpOiBQcmlzb25Qcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5wcmlzb24pO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBjaGFyYWN0ZXIoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5ncmFuZG1hKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCB3b2xmKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUud29sZik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBjb3N0dW1lUG9wb3ZlcigpOiBDb3N0dW1lU2VsZWN0aW9uUG9wT3ZlciB7XG4gICAgICAgIHJldHVybiAodGhpcy5zZWxlY3RQb3BvdmVyIGFzIENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihjaG9pY2VEaWFsb2c6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHByb3RlY3RlZCBzZWxlY3RQb3BvdmVyOiBJU2VsZWN0aW9uUG9wT3ZlcixcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoY2hvaWNlRGlhbG9nLCBzZWxlY3RQb3BvdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc3BpbmVzLnNldChMUlJIR3Jhbm55Q2hvaWNlLmNvc3R1bWUyS2FyYXRlLCB0aGlzLmNvc3R1bWVQb3BvdmVyLmJ1dHRvbkxlZnQpO1xuICAgICAgICB0aGlzLnNwaW5lcy5zZXQoTFJSSEdyYW5ueUNob2ljZS5jb3N0dW1lMlN1cGVyaGVybywgdGhpcy5jb3N0dW1lUG9wb3Zlci5idXR0b25NaWRkbGUpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5jb3N0dW1lUG9wb3Zlci5zZXRTZWxlY3RlZCh0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmNvc3R1bWVQb3BvdmVyLmdldE9uU2VsZWN0QW5pbUFjdGlvbih0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4gdGhpcy5wbGF5KGNob2ljZUlkKSkpXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBsYXkoY2hvaWNlSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmluaXRDaGFyYWN0ZXIoY2hvaWNlSWQpO1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIHRoaXMucHJpc29uLmdldENsb3NlQW5pbUFjdGlvbigpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSB0aGlzLnByaXNvbi5nZXRTRlhBY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUuY2FuY2VsQWN0aW9uKGFjdGlvbilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53b2xmLnNldERpcmVjdGlvbihEaXJlY3Rpb24ucmlnaHQpXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLnBsYXlJZGxlKCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKSxcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0Q2hhcmFjdGVyKGNob2ljZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIuc2V0Q29zdHVtZSh0aGlzLmNob2ljZVRvQ29zdHVtZU1hcC5nZXQoY2hvaWNlSWQpKTtcbiAgICAgICAgdGhpcy5jb3N0dW1lUG9wb3Zlci5zZXRTZWxlY3RlZCh0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIueCA9IHRoaXMubG9jYXRvci5taWRkbGVSaWdodC54O1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLmxlZnQpO1xuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuaW5pdENoYXJhY3Rlcih0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCkpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zaG93KCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnBsYXlJZGxlKCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbn0iLCJcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgUHJvcFNlbGVjdGlvblBvcE92ZXIgZnJvbSBcIi4uLy4uL3BvcG92ZXJzL1Byb3BTZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IFRocm93aW5nUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvVGhyb3dpbmdQcm9wXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJvd2luZ1Byb3BTZWxlY3Rpb25TdGF0ZSBleHRlbmRzIFNlbGVjdGlvblN0YXRlIHtcblxuICAgIHB1YmxpYyBnZXQgdGhvd2luZ1Byb3AoKTogVGhyb3dpbmdQcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS50aHJvd2luZ1Byb3ApXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoY2hvaWNlRGlhbG9nTGluZTogQ2hvaWNlRGlhbG9nTGluZSxcbiAgICAgICAgc2VsZWN0UG9wb3ZlcjogUHJvcFNlbGVjdGlvblBvcE92ZXIsXG4gICAgICAgIGRpU2VydmljZTogRElTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBzdXBlcihjaG9pY2VEaWFsb2dMaW5lLCBzZWxlY3RQb3BvdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy50aG93aW5nUHJvcC5zZXRTa2luRm9yVHlwZShjaG9pY2VJZCk7XG5cbiAgICAgICAgY29uc3Qgb25Db21wbGV0ZSA9ICgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUob25Db21wbGV0ZSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy50aG93aW5nUHJvcC5zZXRTa2luRm9yVHlwZSh0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCkpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG5cbn1cbiIsImltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgVGhyb3dpbmdQcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9UaHJvd2luZ1Byb3BcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IHsgTW9vZCB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0Jhc2VDaGFyYWN0ZXJcIjtcbmltcG9ydCBMb2NhdG9yIGZyb20gXCIuLi8uLi9jb21tb24vTG9jYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJvd2luZ1Byb3BBY3Rpb25TdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuXG4gICAgcHVibGljIGdldCB0aG93aW5nUHJvcCgpOiBUaHJvd2luZ1Byb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLnRocm93aW5nUHJvcClcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCB3b2xmKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUud29sZik7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgZ3Jhbm1hKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ3JhbmRtYSk7XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnRob3dpbmdQcm9wLnNwaW5lLnggPSB0aGlzLndvbGYueDtcblxuICAgICAgICB0aGlzLndvbGYubW9vZCA9IE1vb2QuYW5ncnk7XG5cbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIHRoaXMudGhvd2luZ1Byb3AuZ2V0U2hvd0FuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICB0aGlzLnRob3dpbmdQcm9wLmdldFRocm93QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRob3dpbmdQcm9wLmdldEhpdEFjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgwLjMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXREb2RnZUFjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgdGhpcy50aG93aW5nUHJvcC5nZXRIaWRlQWN0aW9uKCksXG5cbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHN1cGVyLmRpZFRlcm1pbmF0ZShuYW1lKSlcbiAgICAgICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldERvZGdlQWN0aW9uKCk6ZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuZ3Jhbm1hLmdldENoYXJhY3Rlck1vdmVBY3Rpb24odGhpcy5sb2NhdG9yLmdyYW5ueURvZGdlLCAoKSA9PiB0aGlzLmdyYW5tYS5wbGF5V2FsaygpLCAwLjMpLFxuICAgICAgICAgICAgdGhpcy5ncmFubWEuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmxvY2F0b3IubWlkZGxlUmlnaHQsICgpID0+IHRoaXMuZ3Jhbm1hLnBsYXlXYWxrKCksIDAuNSksXG4gICAgICAgIF0pXG4gICAgfVxuXG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLnRob3dpbmdQcm9wLmhpZGUoKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IERvb3IgZnJvbSBcIi4uLy4uL3Byb3BzL0Rvb3JcIjtcbmltcG9ydCBMb2NhdG9yIGZyb20gXCIuLi8uLi9jb21tb24vTG9jYXRvclwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29sZkhvdXNlRXhpdFN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGRvb3IoKTogRG9vciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZG9vcik7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgd29sZigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgbHJyaCgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgZ3Jhbm55KCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ3JhbmRtYSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cblxuICAgIGRpZFRlcm1pbmF0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLndvbGYuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5sZWZ0KSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud29sZi5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRoaXMubG9jYXRvci5leGl0TGVmdCwgKCkgPT4gdGhpcy53b2xmLnBsYXlSdW4oKSwgMiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud29sZi5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5scnJoLnNldERpcmVjdGlvbihEaXJlY3Rpb24ucmlnaHQpKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkoMC44KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb29yLmdldE9wZW5BbmltQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgwLjgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxycmguZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmxvY2F0b3IubWlkZGxlLCAoKSA9PiB0aGlzLmxycmgucGxheVdhbGsoKSksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5scnJoLnBsYXlJZGxlKCkpLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMubHJyaC5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLmxlZnQpKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmdyYW5ueS5mbGlwWEF4aXMoKTtcbiAgICAgICAgdGhpcy53b2xmLmhpZGUoKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IExSUkhDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvTFJSSENoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb2xmUmVtb3ZlR2xhc3Nlc1N0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSAge1xuICAgIHB1YmxpYyBnZXQgd29sZigpOiBMUlJIQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS53b2xmKSBhcyBMUlJIQ2hhcmFjdGVyO1xuICAgIH1cblxuICAgIGRpZFRlcm1pbmF0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIHRoaXMud29sZi5nZXRSZW1vdmVHbGFzc2VzQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpLFxuICAgICAgICAgICAgXSkpXG4gICAgfVxuXG4gICAgc2tpcCgpe1xuICAgICAgICB0aGlzLndvbGYucmVtb3ZlR2xhc3NlcygpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuICAgXG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBMUlJIQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0xSUkhDaGFyYWN0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29sZlJlbW92ZUhhaXJTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUgIHtcbiAgICBwdWJsaWMgZ2V0IHdvbGYoKTogTFJSSENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUud29sZikgYXMgTFJSSENoYXJhY3RlcjtcbiAgICB9XG4gICAgXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgdGhpcy53b2xmLmdldFJlbW92ZUhhaXJBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHN1cGVyLmRpZFRlcm1pbmF0ZShuYW1lKSksXG4gICAgICAgICAgICBdKSlcbiAgICB9XG5cbiAgICBza2lwKCl7XG4gICAgICAgIHRoaXMud29sZi5yZW1vdmVIYWlyKCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG4gICBcbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IExSUkhDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvTFJSSENoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb2xmUmV2ZWFsU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlICB7XG4gICAgcHVibGljIGdldCB3b2xmKCk6IExSUkhDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpIGFzIExSUkhDaGFyYWN0ZXI7XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgdGhpcy53b2xmLmdldFdvbGZSZXZlYWxBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHN1cGVyLmRpZFRlcm1pbmF0ZShuYW1lKSksXG4gICAgICAgICAgICBdKSlcbiAgICB9XG5cbiAgICBza2lwKCl7XG4gICAgICAgIHRoaXMud29sZi5nZXRXb2xmUmV2ZWFsQWN0aW9uKCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgTFJSSFN0b3J5RGF0YSBmcm9tIFwiLi4vTFJSSFN0b3J5RGF0YVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb2xmTW92ZVRvQmFza2V0U3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcblxuICAgIHByb3RlY3RlZCBnZXQgd29sZigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG5cbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgdGhpcy53b2xmLmdldFdhbGtUb1Bvc2l0aW9uQWN0aW9uKExSUkhTdG9yeURhdGEuYWN0MVdvbGZCYXNrZXRYUG9zaXRpb24pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy53b2xmLmdldFdhbGtUb1Bvc2l0aW9uQWN0aW9uKExSUkhTdG9yeURhdGEuYWN0MVdvbGZYUG9zaXRpb24pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpLFxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgc2tpcCgpe1xuICAgICAgICB0aGlzLndvbGYueCA9IExSUkhTdG9yeURhdGEuYWN0MVdvbGZYUG9zaXRpb247XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBMb2NhdG9yIGZyb20gXCIuLi8uLi9jb21tb24vTG9jYXRvclwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTFJSSEdvVG9HcmFubnlzU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcbiAgXG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgbGl0dGxlUmVkSG9vZCgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG5cbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMubGl0dGxlUmVkSG9vZC5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRoaXMubG9jYXRvci5taWRkbGVSaWdodCwgKCkgPT4gdGhpcy5saXR0bGVSZWRIb29kLnBsYXlXYWxrKCksIDIpLFxuICAgICAgICAgICAgdGhpcy5saXR0bGVSZWRIb29kLmdldEhpZGVBY3Rpb24oKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL0xvY2F0b3JcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvbGZHb1RvR3Jhbm55c1N0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCB3b2xmKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUud29sZik7XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy53b2xmLmdldENoYXJhY3Rlck1vdmVBY3Rpb24odGhpcy5sb2NhdG9yLmV4aXRMZWZ0LCAoKSA9PiB0aGlzLndvbGYucGxheVdhbGsoKSwgMSksXG4gICAgICAgICAgICB0aGlzLndvbGYuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpLFxuICAgICAgICBdKSk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBNb29kIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQmFzZUNoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmFubnlBZnJhaWRTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUgIHtcbiAgICBwcm90ZWN0ZWQgZ2V0IGdyYW5tYSgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdyYW5kbWEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgbG9jYXRvcigpOiBMb2NhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5sb2NhdG9yKTtcbiAgICB9XG5cbiAgICBvbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLm9uSW5pdCgpO1xuXG4gICAgICAgIHRoaXMuZ3Jhbm1hLm1vb2QgPSBNb29kLnNjYXJlZDtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgdGhpcy5ncmFubWEuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmxvY2F0b3Iud29sZkFwcGVyYW5jZVNwb3QsICgpID0+IHRoaXMuZ3Jhbm1hLnBsYXlXYWxrKCkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3Jhbm1hLnBsYXlJZGxlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3Jhbm1hLm1vb2QgPSBNb29kLm5ldXRyYWw7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpLFxuICAgICAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuZ3Jhbm1hLm1vb2QgPSBNb29kLm5ldXRyYWw7XG4gICAgICAgIHRoaXMuZ3Jhbm1hLnggPSB0aGlzLmxvY2F0b3IubWlkZGxlLng7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL0xvY2F0b3JcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgRG9vciBmcm9tIFwiLi4vLi4vcHJvcHMvRG9vclwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExSUkhBbmRHcmFubnlXYWxraW5nU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcbiAgXG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGRvb3IoKTogRG9vciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZG9vcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBncmFuZG1hKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ3JhbmRtYSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgbHJyaCgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpO1xuICAgIH1cblxuICAgIGRpZFRlcm1pbmF0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDApLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFuZG1hLmdldENoYXJhY3Rlck1vdmVBY3Rpb24odGhpcy5sb2NhdG9yLmV4aXRMZWZ0LCAoKSA9PiB0aGlzLmdyYW5kbWEucGxheVdhbGsoKSwgMiksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5ncmFuZG1hLnBsYXlJZGxlKCkpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgxKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmxycmguc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5sZWZ0KSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubHJyaC5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRoaXMubG9jYXRvci5leGl0TGVmdCwgKCkgPT4gdGhpcy5scnJoLnBsYXlXYWxrKCksIDEpLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMubHJyaC5wbGF5SWRsZSgpKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgdGhpcy5ncmFuZG1hLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxycmguZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgICAgIHRoaXMuZG9vci5nZXRDbG9zZUFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgRGlhbG9nTGluZSBmcm9tIFwiLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9EaWFsb2dMaW5lXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgeyBDdWVEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ3VlRGlhbG9nTGluZVwiO1xuaW1wb3J0IFdlYXRoZXJTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vY29tbW9uL3N0YXRlcy9XZWF0aGVyU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBBY3Rpb25Nb3ZlbWVudFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9BY3Rpb25Nb3ZlbWVudFNlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgRGVjb3JzUHJvcFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9EZWNvcnNQcm9wU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBBY3Rpb25Nb3ZlbWVudFN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9BY3Rpb25Nb3ZlbWVudFN0YXRlXCI7XG5pbXBvcnQgeyBJY29uVHlwZSB9IGZyb20gXCIuLi9wb3BvdmVycy9JY29uU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IExSUkhFbnRyYW5jZVN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9MUlJIRW50cmFuY2VTdGF0ZVwiO1xuaW1wb3J0IFdvbGZFbnRyYW5jZVN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9Xb2xmRW50cmFuY2VTdGF0ZVwiO1xuXG5pbXBvcnQgeyBQcm9wIH0gZnJvbSBcIi4uL3BvcG92ZXJzL1Byb3BTZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgUGFzc2FnZSB9IGZyb20gXCIuLi8uLi90d2luZS9Ud2luZVNjcmlwdFwiO1xuaW1wb3J0IHsgQ2hvaWNlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi90d2luZS9EaWFsb2dMaW5lL0Nob2ljZURpYWxvZ0xpbmVcIjtcbmltcG9ydCB7IEN1ZUNob2ljZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DdWVDaG9pY2VEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBEaWFsb2dDdWVEYXRhIH0gZnJvbSBcIi4uLy4uL3R3aW5lL0RpYWxvZ0RhdGFcIjtcbmltcG9ydCBCYXNrZXRQcm9wU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL0Jhc2tldFByb3BTZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IFVtYnJlbGxhU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL1VtYnJlbGxhU3RhdGVcIjtcbmltcG9ydCBBY3QySW50cm9TdGF0ZSBmcm9tIFwiLi4vbHJyaC9zdGF0ZXMvQWN0MkludHJvU3RhdGVcIjtcbmltcG9ydCBXb2xmSG91c2VFbnRyYW5jZVZPU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL1dvbGZIb3VzZUVudHJhbmNlVk9TZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IFdvbGZIb3VzZUVudHJhbmNlU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL1dvbGZIb3VzZUVudHJhbmNlU3RhdGVcIjtcbmltcG9ydCBQcmlzb25TdGF0ZSBmcm9tIFwiLi4vbHJyaC9zdGF0ZXMvUHJpc29uU3RhdGVcIjtcbmltcG9ydCBHcmFubnlXYWxraW5nU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL0dyYW5ueVdhbGtpbmdTdGF0ZVwiO1xuaW1wb3J0IFdvbGZEaXNndWlzZVN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9Xb2xmRGlzZ3Vpc2VTdGF0ZVwiO1xuaW1wb3J0IERvb3JCZWxsU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL0Rvb3JCZWxsU3RhdGVcIjtcbmltcG9ydCBMUlJISG91c2VFbnRyYW5jZVN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9MUlJISG91c2VFbnRyYW5jZVN0YXRlXCI7XG5pbXBvcnQgQWN0M0FjdGlvblNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9BY3QzQWN0aW9uU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBBY3QzQWN0aW9uTW92ZW1lbnRTdGF0ZSBmcm9tIFwiLi4vbHJyaC9zdGF0ZXMvQWN0M0FjdGlvbk1vdmVtZW50U3RhdGVcIjtcbmltcG9ydCBHcmFubnlEaXNndWlzZVN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9HcmFubnlEaXNndWlzZVN0YXRlXCI7XG5pbXBvcnQgVGhyb3dpbmdQcm9wU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL1Rocm93aW5nUHJvcFNlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgVGhyb3dpbmdQcm9wQWN0aW9uU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL1Rocm93aW5nUHJvcEFjdGlvblN0YXRlXCI7XG5pbXBvcnQgV29sZkhvdXNlRXhpdFN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9Xb2xmSG91c2VFeGl0U3RhdGVcIjtcbmltcG9ydCBBY3QxU2V0dXBTdGF0ZSBmcm9tIFwiLi4vY29tbW9uL3N0YXRlcy9BY3QxU2V0dXBTdGF0ZVwiO1xuaW1wb3J0IHsgRGlhbG9nU3RhdGVGYWN0b3J5IH0gZnJvbSBcIi4vRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5pbXBvcnQgeyBEaWFsb2dUeXBlIH0gZnJvbSBcIi4uL2NvbW1vbi9BY3RNZWRpYXRvclwiO1xuaW1wb3J0IFdvbGZSZW1vdmVHbGFzc2VzU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL1dvbGZSZW1vdmVHbGFzc2VzU3RhdGVcIjtcbmltcG9ydCBXb2xmUmVtb3ZlSGFpclN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9Xb2xmUmVtb3ZlSGFpclN0YXRlXCI7XG5pbXBvcnQgV29sZlJldmVhbFN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9Xb2xmUmV2ZWFsU3RhdGVcIjtcbmltcG9ydCBXb2xmTW92ZVRvQmFza2V0U3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL1dvbGZNb3ZlVG9CYXNrZXRTdGF0ZVwiO1xuaW1wb3J0IExSUkhHb1RvR3Jhbm55c1N0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9MUlJIR29Ub0dyYW5ueXNTdGF0ZVwiO1xuaW1wb3J0IFdvbGZHb1RvR3Jhbm55c1N0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9Xb2xmR29Ub0dyYW5ueXNTdGF0ZVwiO1xuaW1wb3J0IEdyYW5ueUFmcmFpZFN0YXRlIGZyb20gXCIuLi9scnJoL3N0YXRlcy9HcmFubnlBZnJhaWRTdGF0ZVwiO1xuaW1wb3J0IExSUkhBbmRHcmFubnlXYWxraW5nU3RhdGUgZnJvbSBcIi4uL2xycmgvc3RhdGVzL0xSUkhBbmRHcmFubnlXYWxraW5nU3RhdGVcIjtcbmltcG9ydCB7IENvc3R1bWVzIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQ29zdHVtZXNcIjtcbmltcG9ydCBMUlJIQW5kR3Jhbm55Q2VsZWJyYXRpb25TdGF0ZSBmcm9tIFwiLi4vbHJyaC9zdGF0ZXMvTFJSSEFuZEdyYW5ueUNlbGVicmF0aW9uU3RhdGVcIjtcblxuZXhwb3J0IGVudW0gQ2hvaWNlVHlwZSB7XG4gICAgbHJyaENvc3R1bWVDaG9pY2UgPSBcImxycmgtY29zdHVtZS1jaG9pY2VcIixcbiAgICBwcm9wV2VhdGhlciA9IFwicHJvcC13ZWF0aGVyXCIsXG4gICAgYWN0aW9uID0gXCJhY3Rpb24tMVwiLFxuICAgIHByb3BGb3Jlc3QgPSBcInByb3AtZm9yZXN0XCIsXG4gICAgbHJyaEFjdGlvbjJKdW1waW5nID0gXCJhY3Rpb24tMi1qdW1waW5nXCIsXG4gICAgbHJyaEFjdGlvbjJXYWxraW5nID0gXCJhY3Rpb24tMi13YWxraW5nXCIsXG4gICAgbHJyaEFjdGlvbjJHcm9vdmluZyA9IFwiYWN0aW9uLTItZ3Jvb3ZpbmdcIixcbiAgICBpbnRyb1dvbGYxID0gXCJpbnRyby13b2xmLTFcIixcbiAgICBpbnRyb1dvbGYzID0gXCJpbnRyby13b2xmLTNcIixcbiAgICBiYXNrZXRUeXBlQ2hvaWNlID0gXCJiYXNrZXQtdHlwZS1jaG9pY2VcIixcbiAgICBkb29yQmVsbENob2ljZSA9IFwiZG9vci1iZWxsLWNob2ljZVwiLFxuICAgIHdob0lzSXQgPSBcIndoby1pcy1pdFwiLFxuICAgIHByb3AyID0gXCJwcm9wLTJcIixcbiAgICBhY3QzQWN0aW9uVm8xID0gXCJhY3QzLWFjdGlvbi12bzFcIixcbiAgICBhY3QzQWN0aW9uMlJ1biA9IFwiYWN0aW9uLTItcnVuXCIsXG4gICAgYWN0M0FjdGlvbjJMZWFwZnJvZyA9IFwiYWN0aW9uLTItbGVhcGZyb2dcIixcbiAgICBhY3QzQWN0aW9uMlNoYWtlID0gXCJhY3Rpb24tMi1zaGFrZVwiLFxuICAgIGFjdDNBY3Rpb24zUnVuID0gXCJhY3Rpb24tMy1ydW5cIixcbiAgICBhY3QzQWN0aW9uM0xlYXBmcm9nID0gXCJhY3Rpb24tMy1sZWFwZnJvZ1wiLFxuICAgIGFjdDNBY3Rpb24zU2hha2UgPSBcImFjdGlvbi0zLXNoYWtlXCIsXG4gICAgZ3Jhbm55Q29zdHVtZSA9IFwiZ3Jhbm55LWNvc3R1bWVcIixcbiAgICBwcm9wMyA9IFwicHJvcC0zXCIsXG59XG5cbmV4cG9ydCBlbnVtIFNpbXBsZURpYWxvZyB7XG4gICAgd2VhdGhlcjNDbG91ZCA9IFwid2VhdGhlci0zLWNsb3Vkc1wiLFxuICAgIGludHJvQWN0MiA9IFwiaW50cm8tYWN0Mi0xXCIsXG4gICAgaW50cm81YSA9IFwiaW50cm8tNWFcIixcbiAgICB3b2xmR3Jhbm55MSA9IFwid29sZi1ncmFubnktMVwiLFxuICAgIHByb3A1ID0gXCJwcm9wLTVcIixcbiAgICBpbnRybzEgPSBcImludHJvLTFcIixcbiAgICBpbnRybzViID0gXCJpbnRyby01YlwiLFxuICAgIGludHJvNiA9IFwiaW50cm8tNlwiLFxuICAgIHF1ZXN0aW9uMiA9IFwicXVlc3Rpb24tMlwiLFxuICAgIHF1ZXN0aW9uNSA9IFwicXVlc3Rpb24tNVwiLFxuICAgIHF1ZXN0aW9uOSA9IFwicXVlc3Rpb24tOVwiLFxuICAgIGludHJvV29sZjggPSBcImludHJvLXdvbGYtOFwiLFxuICAgIGludHJvV29sZjEzID0gXCJpbnRyby13b2xmLTEzXCIsXG4gICAgaW50cm9Xb2xmMTQgPSBcImludHJvLXdvbGYtMTRcIixcbiAgICBlbmRWbzIgPSBcImVuZC12by0yXCIsXG4gICAgZW5kVm80ID0gXCJlbmQtdm8tNFwiLFxuICAgIGFjdDNWbzEgPSBcImFjdC0zLXZvLTFcIixcbn1cblxuZXhwb3J0IGVudW0gTFJSSENvc3R1bWVDaG9pY2Uge1xuICAgIGxycmhDb3N0dW1lMUhvb2QgPSBcImNvc3R1bWUtMS1scnJoXCIsXG4gICAgbHJyaENvc3R1bWVDb3dib3kgPSBcImNvc3R1bWUtMS1jb3dib3lcIixcbiAgICBscnJoQ29zdHVtZVBpcmF0ZSA9IFwiY29zdHVtZS0xLXBpcmF0ZVwiLFxufVxuXG5leHBvcnQgZW51bSBMUlJIR3Jhbm55Q2hvaWNlIHtcbiAgICBjb3N0dW1lMkthcmF0ZSA9IFwiY29zdHVtZS0yLWthcmF0ZVwiLFxuICAgIGNvc3R1bWUyU3VwZXJoZXJvID0gXCJjb3N0dW1lLTItc3VwZXJoZXJvXCIsXG59XG5leHBvcnQgZW51bSBUaHJvd2luZ0Nob2ljZSB7XG4gICAgYWN0M0R1Y2tpZSA9IFwicHJvcC0zLXJ1YmJlcmR1Y2t5XCIsXG4gICAgYWN0M1RlZGR5ID0gXCJwcm9wLTMtdGVkZHliZWFyXCIsXG4gICAgYWN0M1VrdWxlbGUgPSBcInByb3AtMy11a2VsZWxlXCIsXG59XG5cbmV4cG9ydCBlbnVtIFdlYXRoZXJDaG9pY2Uge1xuICAgIGxycmhXZWF0aGVyMkNsb3VkcyA9IFwid2VhdGhlci0yLWNsb3Vkc1wiLFxuICAgIGxycmhXZWF0aGVyMlN1biA9IFwid2VhdGhlci0yLXN1blwiLFxufVxuXG5leHBvcnQgZW51bSBGb3Jlc3RDaG9pY2Uge1xuICAgIHRyZWUgPSBcInByb3AtMi10cmVlXCIsXG4gICAgY2FuZHkgPSBcInByb3AtMi1jYW5keVwiLFxuICAgIHNreVNjcmFwZXIgPSBcInByb3AtMi1za3lzY3JhcGVyc1wiLFxufVxuXG5leHBvcnQgZW51bSBCYXNrZXRDaG9pY2Uge1xuICAgIGJhc2tldCA9IFwiaW50cm8td29sZi1iYXNrZXRcIixcbiAgICB0b29sYm94ID0gXCJpbnRyby13b2xmLXRvb2xib3hcIixcbiAgICB0cmVhc3VyZUNoZXN0ID0gXCJpbnRyby13b2xmLXRyZWFzdXJlY2hlc3RcIixcbn1cblxuZXhwb3J0IGVudW0gQ3VlVHlwZSB7XG4gICAgbGl0dGxlUmVkSG9vZEVudHJhbmNlID0gXCJsaXR0bGUtcmVkLWhvb2QtZW50cmFuY2VcIixcbiAgICB3b2xmRW50cmFuY2UgPSBcIndvbGYtZW50cmFuY2VcIixcbiAgICB3b2xmSW50cm9MaW5lID0gXCJ3b2xmLWludHJvLWxpbmVcIixcbiAgICBvcGVuRG9vciA9IFwib3Blbi1kb29yXCIsXG4gICAgbHJyaEdyYW5tYUhvdXNlID0gXCJscnJoLWdyYW5tYS1ob3VzZVwiLFxufVxuXG5leHBvcnQgY2xhc3MgTFJSSERpYWxvZ1N0YXRlRmFjdG9yeSBleHRlbmRzIERpYWxvZ1N0YXRlRmFjdG9yeSB7XG5cbiAgICBwcm90ZWN0ZWQgYWN0MTogc3RyaW5nID0gU2ltcGxlRGlhbG9nLmludHJvMTtcbiAgICBwcm90ZWN0ZWQgYWN0Mjogc3RyaW5nID0gU2ltcGxlRGlhbG9nLmludHJvQWN0MjtcbiAgICBwcm90ZWN0ZWQgYWN0Mzogc3RyaW5nID0gU2ltcGxlRGlhbG9nLmFjdDNWbzE7XG5cbiAgICBwcm90ZWN0ZWQgaGFuZGxlQ2hvaWNlRGlhbG9nKGRhdGE6IERpYWxvZ1R5cGUsIGRpYWxvZzogQ2hvaWNlRGlhbG9nTGluZSwgcGFzc2FnZTogUGFzc2FnZSkge1xuICAgICAgICBzd2l0Y2ggKGRhdGEuY2hvaWNlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBDaG9pY2VUeXBlLmludHJvV29sZjE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXb2xmRW50cmFuY2VTdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlSWNvblNlbGVjdFBvcE92ZXIoW0ljb25UeXBlLmR1bWR1bWR1bSwgSWNvblR5cGUuYXBwbGF1c2UsIEljb25UeXBlLmdhc3BdKSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgY2FzZSBDaG9pY2VUeXBlLnByb3BXZWF0aGVyOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV2VhdGhlclNlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVJY29uU2VsZWN0UG9wT3ZlcihbSWNvblR5cGUuY2xvdWR5LCBJY29uVHlwZS5zdW5ueV0pLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBjYXNlIENob2ljZVR5cGUuYWN0aW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWN0aW9uTW92ZW1lbnRTZWxlY3Rpb25TdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlSWNvblNlbGVjdFBvcE92ZXIoW0ljb25UeXBlLndhbGssIEljb25UeXBlLmp1bXAsIEljb25UeXBlLmRhbmNlXSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5wcm9wRm9yZXN0OlxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcmVzdFByb3AgPSB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZm9yZXN0UHJvcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZWNvcnNQcm9wU2VsZWN0aW9uU3RhdGUoZGlhbG9nLCB0aGlzLmNyZWF0ZVByb3BzU2VsZWN0UG9wT3ZlcigpLCBmb3Jlc3RQcm9wLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBjYXNlIENob2ljZVR5cGUuYmFza2V0VHlwZUNob2ljZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJhc2tldFByb3BTZWxlY3Rpb25TdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlUHJvcHNTZWxlY3RQb3BPdmVyKFtQcm9wLmJhc2tldCwgUHJvcC50b29sYm94LCBQcm9wLmNoZXN0XSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS53aG9Jc0l0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV29sZkhvdXNlRW50cmFuY2VWT1NlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVJY29uU2VsZWN0UG9wT3ZlcihbSWNvblR5cGUuaGFwcHksIEljb25UeXBlLmFuZ3J5LCBJY29uVHlwZS5zaWxseV0pLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBjYXNlIENob2ljZVR5cGUucHJvcDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcmlzb25TdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlUHJvcHNTZWxlY3RQb3BPdmVyKFtQcm9wLnBhbnRyeSwgUHJvcC53YXJkcm9iZSwgUHJvcC5wcmVzZW50XSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5kb29yQmVsbENob2ljZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERvb3JCZWxsU3RhdGUoZGlhbG9nLCB0aGlzLmNyZWF0ZUljb25TZWxlY3RQb3BPdmVyKFtJY29uVHlwZS5hcm9vZ2EsIEljb25UeXBlLmRpbmdkb25nLCBJY29uVHlwZS5ob25raG9ua10pLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBjYXNlIENob2ljZVR5cGUuYWN0M0FjdGlvblZvMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFjdDNBY3Rpb25TZWxlY3Rpb25TdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlSWNvblNlbGVjdFBvcE92ZXIoW0ljb25UeXBlLndhbGssIEljb25UeXBlLmp1bXAsIEljb25UeXBlLnNoYWtlXSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5ncmFubnlDb3N0dW1lOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR3Jhbm55RGlzZ3Vpc2VTdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlQ29zdHVtZVNlbGVjdFBvcE92ZXIoW0Nvc3R1bWVzLmthcmF0ZSwgQ29zdHVtZXMuc3VwZXJoZXJvXSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5wcm9wMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRocm93aW5nUHJvcFNlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVQcm9wc1NlbGVjdFBvcE92ZXIoW1Byb3AucnViYmVyRHVja3ksIFByb3AudGVkZHksIFByb3AudWt1bGVsZV0pLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNpbXBsZURpYWxvZyhwYXNzYWdlLCBkaWFsb2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGhhbmRsZUN1ZURpYWxvZyhkYXRhOiBEaWFsb2dUeXBlLCBkaWFsb2c6IEN1ZURpYWxvZ0xpbmUpIHtcbiAgICAgICAgc3dpdGNoICgoZGF0YSBhcyBEaWFsb2dDdWVEYXRhKS5jdWUpIHtcbiAgICAgICAgICAgIGNhc2UgQ3VlVHlwZS5scnJoR3Jhbm1hSG91c2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMUlJISG91c2VFbnRyYW5jZVN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGhhbmRsZUN1ZUNob2ljZURpYWxvZyhkYXRhOiBEaWFsb2dUeXBlLCBkaWFsb2c6IEN1ZUNob2ljZURpYWxvZ0xpbmUpIHtcbiAgICAgICAgc3dpdGNoICgoZGF0YSBhcyBEaWFsb2dDdWVEYXRhKS5jdWUpIHtcbiAgICAgICAgICAgIGNhc2UgQ3VlVHlwZS5saXR0bGVSZWRIb29kRW50cmFuY2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMUlJIRW50cmFuY2VTdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlQ29zdHVtZVNlbGVjdFBvcE92ZXIoKSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFNpbXBsZURpYWxvZyhwYXNzYWdlOiBQYXNzYWdlLCBkaWFsb2c6IERpYWxvZ0xpbmUpOiBTdGFnZVN0YXRlIHtcbiAgICAgICAgY29uc3QgaXNMcnJoQWN0aW9uQ2hvaWNlID0gcGFzc2FnZS5uYW1lID09IENob2ljZVR5cGUubHJyaEFjdGlvbjJXYWxraW5nIHx8IHBhc3NhZ2UubmFtZSA9PSBDaG9pY2VUeXBlLmxycmhBY3Rpb24ySnVtcGluZyB8fCBwYXNzYWdlLm5hbWUgPT0gQ2hvaWNlVHlwZS5scnJoQWN0aW9uMkdyb292aW5nO1xuICAgICAgICBjb25zdCBpc0xycmhBY3QzQWN0aW9uQ2hvaWNlID0gcGFzc2FnZS5uYW1lID09IENob2ljZVR5cGUuYWN0M0FjdGlvbjNMZWFwZnJvZyB8fCBwYXNzYWdlLm5hbWUgPT0gQ2hvaWNlVHlwZS5hY3QzQWN0aW9uM1J1biB8fCBwYXNzYWdlLm5hbWUgPT0gQ2hvaWNlVHlwZS5hY3QzQWN0aW9uM1NoYWtlO1xuICAgICAgICBjb25zdCBpc0xycmhUaHJvd2luZ0Nob2ljZSA9IHBhc3NhZ2UubmFtZSA9PSBUaHJvd2luZ0Nob2ljZS5hY3QzRHVja2llIHx8IHBhc3NhZ2UubmFtZSA9PSBUaHJvd2luZ0Nob2ljZS5hY3QzVGVkZHkgfHwgcGFzc2FnZS5uYW1lID09IFRocm93aW5nQ2hvaWNlLmFjdDNVa3VsZWxlO1xuICAgICAgICBpZiAoaXNMcnJoQWN0aW9uQ2hvaWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFjdGlvbk1vdmVtZW50U3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy53ZWF0aGVyM0Nsb3VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVtYnJlbGxhU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5pbnRyb0FjdDIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWN0MkludHJvU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5pbnRybzVhKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdyYW5ueVdhbGtpbmdTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLndvbGZHcmFubnkxKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdvbGZEaXNndWlzZVN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTHJyaEFjdDNBY3Rpb25DaG9pY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWN0M0FjdGlvbk1vdmVtZW50U3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNMcnJoVGhyb3dpbmdDaG9pY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGhyb3dpbmdQcm9wQWN0aW9uU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5wcm9wNSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXb2xmSG91c2VFeGl0U3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5pbnRybzEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWN0MVNldHVwU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5pbnRybzViKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdvbGZIb3VzZUVudHJhbmNlU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5pbnRybzYpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgR3Jhbm55QWZyYWlkU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5pbnRyb1dvbGY4KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdvbGZNb3ZlVG9CYXNrZXRTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLmludHJvV29sZjEzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExSUkhHb1RvR3Jhbm55c1N0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhc3NhZ2UubmFtZSA9PSBTaW1wbGVEaWFsb2cuaW50cm9Xb2xmMTQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgV29sZkdvVG9HcmFubnlzU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5xdWVzdGlvbjIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgV29sZlJlbW92ZUdsYXNzZXNTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnF1ZXN0aW9uNSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXb2xmUmVtb3ZlSGFpclN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhc3NhZ2UubmFtZSA9PSBTaW1wbGVEaWFsb2cucXVlc3Rpb245KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdvbGZSZXZlYWxTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLmVuZFZvMikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMUlJIQW5kR3Jhbm55Q2VsZWJyYXRpb25TdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLmVuZFZvNCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMUlJIQW5kR3Jhbm55V2Fsa2luZ1N0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBTdGFnZVN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExSUkhBbmRHcmFubnlDZWxlYnJhdGlvblN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGdyYW5kbWEoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5ncmFuZG1hKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBscnJoKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCk7XG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JhbmRtYS5nZXRDZWxlYnJhdGVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxycmguZ2V0Q2VsZWJyYXRlQWN0aW9uKCksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIuZGlkVGVybWluYXRlKG5hbWUpKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgSG93bCwgSG93bGVyIH0gZnJvbSAnaG93bGVyJztcbmltcG9ydCBESVNlcnZpY2UgZnJvbSAnLi9ESVNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tICcuLi8uLi8uLi8uLi9hcHBsaWNhdGlvbi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZSc7XG5cbi8vIFNvdW5kQ2hhbm5lbHMgYWxsb3cgcGxheWluZyBtdWx0aXBsZSBzb3VuZHMgY29uY3VycmVudGx5LCBhcyB3ZWxsIGFzIGNvbnRyb2xsaW5nIHdoaWNoIHNvdW5kc1xuLy8gY2FuY2VsIHdoaWNoIG90aGVyIHNvdW5kcyBmb3IgcmVwbGFjZW1lbnQgZWZmZWN0cy5cbi8vIEdlbmVyYWxseSB5b3Ugd2FudCB0byB1c2UgdGhlIG5vbi1kZWZhdWx0IGNoYW5uZWxzIHRvIGd1YXJhbnRlZSBhIHNvdW5kIHdpbGwgbm90IHJlcGxhY2UgYW5vdGhlcixcbi8vIGFuZCBhbHNvIHdvbnQgYmUgcmVwbGFjZWQgYnkgYW5vdGhlciBzb3VuZCBsYXRlci5cbi8vIFVzZSB0aGUgREVGQVVMVCBjaGFubmVsIGZvciBzb3VuZHMgdGhhdCB5b3UgZG9uJ3QgY2FyZSBhYm91dCBiZWluZyByZXBsYWNlZC5cbi8vIFVzZSB0aGUgQUxMIGNoYW5uZWwgZm9yIGRvaW5nIHRoaW5ncyB0byBhbGwgU291bmRzLCBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgREVGQVVMVCBpZiB5b3UgdHJ5IGFuZCxcbi8vIHBsYXkgb24gaXQgYXMgYSBjaGFubmVsLlxuZXhwb3J0IGVudW0gU291bmRDaGFubmVsIHtcbiAgICBBTEwgPSAtMSwgLy8gYXBwbHkgYWN0aW9uIHRvIGFsbCBjaGFubmVscyAoY3VycmVudGx5IGp1c3Qgc3RvcHBpbmcpXG4gICAgRzEsIC8vIGdsb2JhbCBjaGFubmVsIHJldXNlZCBhY3Jvc3MgbXVsdGlwbGUgbWVkaWF0b3JzIHVzZWQgZm9yIFVJXG4gICAgRzIsIC8vIGdsb2JhbCBjaGFubmVsIHJldXNlZCBhY3Jvc3MgbXVsdGlwbGUgbWVkaWF0b3JzXG4gICAgREVGQVVMVCwgLy8gdGhpcyBjaGFubmVsIGlzIHRoZSBvbmUgYXNzaWduZWQgYnkgZGVmYXVsdFxuICAgIEMxLFxuICAgIEMyLFxuICAgIEMzLFxuICAgIENPVU5UXG59XG5cbmV4cG9ydCBlbnVtIFNvdW5kVm9sdW1lIHtcbiAgICB2byA9IDEuMCxcbiAgICBtdXNpYyA9IDAuMyxcbiAgICBzZnggPSAxLjAsXG4gICAgVUkgPSAwLjIsXG4gICAgbXV0ZWQgPSAwLjAsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdW5kU2VydmljZSB7XG5cbiAgICBzdGF0aWMgc291bmRzUGF0aDogc3RyaW5nID0gJy4vc291bmRzLydcbiAgICBzdGF0aWMgdm9zUGF0aDogc3RyaW5nID0gJy4vc291bmRzL3Zvcy8nXG5cbiAgICBwcml2YXRlIF92b1ZvbHVtZTogbnVtYmVyID0gU291bmRWb2x1bWUudm87XG4gICAgcHJpdmF0ZSBfbXVzaWNWb2x1bWU6IG51bWJlciA9IFNvdW5kVm9sdW1lLm11c2ljO1xuICAgIHByaXZhdGUgX3NmeFZvbHVtZTogbnVtYmVyID0gU291bmRWb2x1bWUuc2Z4O1xuICAgIHByaXZhdGUgX3VpVm9sdW1lOiBudW1iZXIgPSBTb3VuZFZvbHVtZS5VSTtcbiAgIFxuICAgIHByaXZhdGUgY3VycmVudFNvdW5kQ2hhbm5lbHM6IEhvd2xbXSA9IG5ldyBBcnJheShTb3VuZENoYW5uZWwuQ09VTlQpLmZpbGwobnVsbCk7XG5cbiAgICBwcml2YXRlIGN1cnJlbnRNdXNpYzogSG93bCA9IG51bGw7IC8vIDEgbXVzaWMgY2hhbm5lbFxuICAgIHByaXZhdGUgY3VycmVudFZPOiBIb3dsID0gbnVsbDsgLy8gMSB2byBjaGFubmVsXG4gICAgcHJpdmF0ZSBpbnN0cnVjdGlvblZPOiBIb3dsID0gbnVsbDsgLy8yIHZvIGNoYW5uZWxcblxuICAgIHB1YmxpYyBnZXQgaXNQbGF5aW5nVm8oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRWTyAhPSBudWxsO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IGlzUHJvbXB0U2hvd2luZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5pc1Byb21wdFNob3dpbmcpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpU2VydmljZTogRElTZXJ2aWNlKXt9XG5cbiAgICBwdWJsaWMgcHJlbG9hZFNGWChzb3VuZHNDb25maWc6IHN0cmluZ1tdLCBjb21wbGV0aW9uOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IHNvdW5kID0gbmV3IEhvd2woe1xuICAgICAgICAgICAgc3JjOiBzb3VuZHNDb25maWcsXG4gICAgICAgICAgICB2b2x1bWU6IHRoaXMuX3NmeFZvbHVtZSxcbiAgICAgICAgICAgIHByZWxvYWQ6IHRydWUsXG4gICAgICAgICAgICBvbmxvYWQ6IGNvbXBsZXRpb24sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5U291bmQoaWQ6IHN0cmluZywgY2hhbm5lbDogU291bmRDaGFubmVsID0gU291bmRDaGFubmVsLkRFRkFVTFQsIGNvbXBsZXRpb246ICgpID0+IHZvaWQgPSAoKSA9PiB7IH0sIGxvb3A6IGJvb2xlYW4gPSBmYWxzZSk6IFNvdW5kQ2hhbm5lbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYXlTb3VuZEF0Vm9sdW1lKGlkLCB0aGlzLl9zZnhWb2x1bWUsIGNoYW5uZWwsIGNvbXBsZXRpb24sIGxvb3ApO1xuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5VUlTRlgoaWQ6IHN0cmluZywgY2hhbm5lbDogU291bmRDaGFubmVsID0gU291bmRDaGFubmVsLkRFRkFVTFQsIGNvbXBsZXRpb246ICgpID0+IHZvaWQgPSAoKSA9PiB7IH0sIGxvb3A6IGJvb2xlYW4gPSBmYWxzZSk6IFNvdW5kQ2hhbm5lbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYXlTb3VuZEF0Vm9sdW1lKGlkLCB0aGlzLl91aVZvbHVtZSwgY2hhbm5lbCwgY29tcGxldGlvbiwgbG9vcCk7XG4gICAgfVxuXG4gICAgcHVibGljIHBsYXlTb3VuZEF0Vm9sdW1lKGlkOiBzdHJpbmcsIHZvbHVtZTogbnVtYmVyLCBjaGFubmVsOiBTb3VuZENoYW5uZWwgPSBTb3VuZENoYW5uZWwuREVGQVVMVCwgY29tcGxldGlvbjogKCkgPT4gdm9pZCA9ICgpID0+IHsgfSwgbG9vcDogYm9vbGVhbiA9IGZhbHNlKTogU291bmRDaGFubmVsIHtcbiAgICAgICAgaWYgKGNoYW5uZWwgPT0gU291bmRDaGFubmVsLkFMTCkge1xuICAgICAgICAgICAgLy8gd2UgZG9udCBwbGF5IG9uIGFsbCBjaGFubmVscywgd2UganVzdCBwbGF5IG9uIHRoZSBkZWZhdWx0XG4gICAgICAgICAgICBjaGFubmVsID0gU291bmRDaGFubmVsLkRFRkFVTFQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9wU291bmRDaGFubmVsKGNoYW5uZWwpO1xuICAgICAgICBjb25zdCBzb3VuZCA9IG5ldyBIb3dsKHtcbiAgICAgICAgICAgIHNyYzogW1NvdW5kU2VydmljZS5zb3VuZHNQYXRoICsgaWRdLFxuICAgICAgICAgICAgdm9sdW1lOiB2b2x1bWUsXG4gICAgICAgICAgICBsb29wOiBsb29wLFxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgICAgICAgICBvbnN0b3A6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyB3ZSB3YW50IHRvIGNsZWFudXAgdGhlIGNoYW5uZWwgb25jZSB0aGUgc291bmQgaXMgZmluaXNoZWRcbiAgICAgICAgICAgICAgICAvLyBXQVJOSU5HOiB3ZSBlbnN1cmUgdGhlIGN1cnJlbnQgc291bmQgY2hhbm5lbCBpcyBzdGlsbCBwbGF5aW5nIHRoaXMgaW5zdGFuY2Ugb2YgdGhlIHNvdW5kLFxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgaXQgaXMgcG9zc2libGUgd2UgaGF2ZSBhbHJlYWR5IHN0b3BwZWQgdGhpcyBzb3VuZCBhbmQgc3RhcnRlZCBwbGF5aW5nIGEgbmV3IHNvdW5kXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlIHRoaXMgaW5zdGFuY2UgaGFzIGV4ZWN1dGVkIGl0cyAnb25zdG9wJyBjYWxsLlxuICAgICAgICAgICAgICAgIGlmIChzb3VuZCA9PSB0aGlzLmN1cnJlbnRTb3VuZENoYW5uZWxzW2NoYW5uZWxdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcFNvdW5kQ2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcGxldGlvbigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uZW5kOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdW5kID09IHRoaXMuY3VycmVudFNvdW5kQ2hhbm5lbHNbY2hhbm5lbF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wU291bmRDaGFubmVsKGNoYW5uZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmN1cnJlbnRTb3VuZENoYW5uZWxzW2NoYW5uZWxdID0gc291bmQ7XG4gICAgICAgIHNvdW5kLnBsYXkoKTtcbiAgICAgICAgcmV0dXJuIGNoYW5uZWw7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgcGxheU11c2ljKGlkOiBzdHJpbmcsIGNvbXBsZXRpb246ICgpID0+IHZvaWQgPSAoKSA9PiB7IH0pIHtcbiAgICAgICAgdGhpcy5zdG9wTXVzaWMoKTtcbiAgICAgICAgY29uc3Qgc291bmQgPSBuZXcgSG93bCh7XG4gICAgICAgICAgICBzcmM6IFtTb3VuZFNlcnZpY2Uuc291bmRzUGF0aCArIGlkXSxcbiAgICAgICAgICAgIHZvbHVtZTogdGhpcy5fbXVzaWNWb2x1bWUsXG4gICAgICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgICAgICAgICBvbnN0b3A6IGNvbXBsZXRpb25cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3VycmVudE11c2ljID0gc291bmQ7XG4gICAgICAgIHNvdW5kLnBsYXkoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmFkZU11c2ljKCl7XG4gICAgICAgIHRoaXMuY3VycmVudE11c2ljLmZhZGUodGhpcy5fbXVzaWNWb2x1bWUsIDAsIDAuNSk7XG4gICAgfVxuXG4gICAgcHVibGljIHBsYXlWbyhpZDogc3RyaW5nLCBjb21wbGV0aW9uOiAoKSA9PiB2b2lkID0gKCkgPT4geyB9KSB7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubyB2byBpZCBwcm92aWRlZCcpO1xuXG4gICAgICAgICAgICBjb21wbGV0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9wVm8oKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJwbGF5IHZvOiB2byB2b2x1bWUgaXMgXCIsIHRoaXMuX3ZvVm9sdW1lKTtcbiAgICAgICAgY29uc3Qgc291bmQgPSBuZXcgSG93bCh7XG4gICAgICAgICAgICBzcmM6IFtTb3VuZFNlcnZpY2Uudm9zUGF0aCArIGlkXSxcbiAgICAgICAgICAgIHZvbHVtZTogdGhpcy5fdm9Wb2x1bWUsXG4gICAgICAgICAgICBwcmVsb2FkOnRydWUsXG4gICAgICAgICAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIG9ubG9hZGVycm9yOiAoc291bmRJZDogbnVtYmVyLCBlcnJvcjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvbmxvYWRlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25lbmQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVubG9hZFZPKClcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbnN0b3A6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVubG9hZFZPKClcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3VycmVudFZPID0gc291bmQ7XG4gICAgICAgIHNvdW5kLnBsYXkoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdW5sb2FkVk8oKXtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFZPKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWTy5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWTy51bmxvYWQoKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFZPID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5SW5zdHJ1Y3Rpb25WbyhpZDogc3RyaW5nLCBjb21wbGV0aW9uOiAoKSA9PiB2b2lkID0gKCkgPT4geyB9KSB7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubyB2byBpZCBwcm92aWRlZCcpO1xuXG4gICAgICAgICAgICBjb21wbGV0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9wSW5zdHJ1Y3Rpb25WbygpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInBsYXlJbnN0cnVjdGlvblZvOiB2byB2b2x1bWUgaXNcIiwgdGhpcy5fdm9Wb2x1bWUpO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgc291bmQgPSBuZXcgSG93bCh7XG4gICAgICAgICAgICBzcmM6IFtTb3VuZFNlcnZpY2Uudm9zUGF0aCArIGlkXSxcbiAgICAgICAgICAgIHZvbHVtZTogdGhpcy5fdm9Wb2x1bWUsXG4gICAgICAgICAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIG9uZW5kOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51bmxvYWRJbnN0cnVjdGlvbigpXG4gICAgICAgICAgICAgICAgY29tcGxldGlvbigpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25zdG9wOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51bmxvYWRJbnN0cnVjdGlvbigpXG4gICAgICAgICAgICAgICAgY29tcGxldGlvbigpXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvblZPID0gc291bmQ7XG4gICAgICAgIHNvdW5kLnBsYXkoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdW5sb2FkSW5zdHJ1Y3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RydWN0aW9uVk8pIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25WTy5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmluc3RydWN0aW9uVk8udW5sb2FkKCk7XG4gICAgICAgICAgICB0aGlzLmluc3RydWN0aW9uVk8gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0b3BBbGwoKSB7XG4gICAgICAgIHRoaXMuc3RvcFNvdW5kKCk7XG4gICAgICAgIHRoaXMuc3RvcFZvKCk7XG4gICAgICAgIHRoaXMuc3RvcEluc3RydWN0aW9uVm8oKTtcbiAgICAgICAgdGhpcy5zdG9wTXVzaWMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGF1c2VBbGwoKXtcbiAgICAgICAgdGhpcy5zdG9wU291bmQoKTtcbiAgICAgICAgdGhpcy5wYXVzZVZvKCk7XG4gICAgICAgIHRoaXMucGF1c2VJbnN0cnVjdGlvblZPKCk7XG4gICAgICAgIHRoaXMucGF1c2VTb3VuZHMoKTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE11c2ljKXtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE11c2ljLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIHBhdXNlQWxsSW5HYW1lKCl7XG4gICAgICAgIHRoaXMuc3RvcFNvdW5kKCk7XG4gICAgICAgIHRoaXMucGF1c2VWbygpO1xuICAgICAgICB0aGlzLnBhdXNlU291bmRzKCk7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRNdXNpYyl7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNdXNpYy5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHBhdXNlVm8oKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRWTykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Vk8ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgcGF1c2VJbnN0cnVjdGlvblZPKCkge1xuICAgICAgICBpZiAodGhpcy5pbnN0cnVjdGlvblZPKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RydWN0aW9uVk8ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZXN1bWVBbGwoKXtcbiAgICAgICAgdGhpcy5yZXN1bWVNdXNpYygpO1xuICAgICAgICB0aGlzLnJlc3VtZVNvdW5kcygpO1xuICAgICAgICBpZiAodGhpcy5pc1Byb21wdFNob3dpbmcpe1xuICAgICAgICAgICAgdGhpcy5yZXN1bWVJbnN0cnVjdGlvblZPKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZVZPKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcHVibGljIHJlc3VtZUFsbEluR2FtZSgpe1xuICAgICAgICB0aGlzLnJlc3VtZU11c2ljKCk7XG4gICAgICAgIHRoaXMucmVzdW1lU291bmRzKCk7XG5cbiAgICAgICAgdGhpcy5yZXN1bWVWTygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzdW1lTXVzaWMoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRNdXNpYyAmJiAhdGhpcy5jdXJyZW50TXVzaWMucGxheWluZygpKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNdXNpYy5wbGF5KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzdW1lVk8oKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRWTykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Vk8ucGxheSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJlc3VtZUluc3RydWN0aW9uVk8oKSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RydWN0aW9uVk8pIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25WTy5wbGF5KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcFNvdW5kKHN0b3BDaGFubmVsOiBTb3VuZENoYW5uZWwgPSBTb3VuZENoYW5uZWwuQUxMKSB7XG4gICAgICAgIGZvciAobGV0IGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgdGhpcy5jdXJyZW50U291bmRDaGFubmVscy5sZW5ndGg7IGNoYW5uZWwrKykge1xuICAgICAgICAgICAgaWYgKHN0b3BDaGFubmVsID09IFNvdW5kQ2hhbm5lbC5BTEwgfHwgc3RvcENoYW5uZWwgPT0gY2hhbm5lbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcFNvdW5kQ2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RvcFNvdW5kQ2hhbm5lbChzdG9wQ2hhbm5lbDogU291bmRDaGFubmVsKSB7XG4gICAgICAgIGNvbnN0IHNvdW5kID0gdGhpcy5jdXJyZW50U291bmRDaGFubmVsc1tzdG9wQ2hhbm5lbF07XG4gICAgICAgIGlmIChzb3VuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoc291bmQucGxheWluZygpKSB7XG4gICAgICAgICAgICAgICAgc291bmQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291bmQudW5sb2FkKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTb3VuZENoYW5uZWxzW3N0b3BDaGFubmVsXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcGF1c2VTb3VuZHMoc3RvcENoYW5uZWw6IFNvdW5kQ2hhbm5lbCA9IFNvdW5kQ2hhbm5lbC5BTEwpIHtcbiAgICAgICAgZm9yIChsZXQgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCB0aGlzLmN1cnJlbnRTb3VuZENoYW5uZWxzLmxlbmd0aDsgY2hhbm5lbCsrKSB7XG4gICAgICAgICAgICBpZiAoc3RvcENoYW5uZWwgPT0gU291bmRDaGFubmVsLkFMTCB8fCBzdG9wQ2hhbm5lbCA9PSBjaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXVzZVNvdW5kQ2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHBhdXNlU291bmRDaGFubmVsKHN0b3BDaGFubmVsOiBTb3VuZENoYW5uZWwpIHtcbiAgICAgICAgY29uc3Qgc291bmQgPSB0aGlzLmN1cnJlbnRTb3VuZENoYW5uZWxzW3N0b3BDaGFubmVsXTtcbiAgICAgICAgaWYgKHNvdW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChzb3VuZC5wbGF5aW5nKCkpIHtcbiAgICAgICAgICAgICAgICBzb3VuZC5wYXVzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJlc3VtZVNvdW5kcyhzdG9wQ2hhbm5lbDogU291bmRDaGFubmVsID0gU291bmRDaGFubmVsLkFMTCkge1xuICAgICAgICBmb3IgKGxldCBjaGFubmVsID0gMDsgY2hhbm5lbCA8IHRoaXMuY3VycmVudFNvdW5kQ2hhbm5lbHMubGVuZ3RoOyBjaGFubmVsKyspIHtcbiAgICAgICAgICAgIGlmIChzdG9wQ2hhbm5lbCA9PSBTb3VuZENoYW5uZWwuQUxMIHx8IHN0b3BDaGFubmVsID09IGNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtZVNvdW5kQ2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVzdW1lU291bmRDaGFubmVsKHN0b3BDaGFubmVsOiBTb3VuZENoYW5uZWwpIHtcbiAgICAgICAgY29uc3Qgc291bmQgPSB0aGlzLmN1cnJlbnRTb3VuZENoYW5uZWxzW3N0b3BDaGFubmVsXTtcbiAgICAgICAgaWYgKHNvdW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNvdW5kLnBsYXkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdG9wVm8oKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRWTykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Vk8uc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Vk8udW5sb2FkKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWTyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcEluc3RydWN0aW9uVm8oKSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RydWN0aW9uVk8pIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25WTy5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmluc3RydWN0aW9uVk8udW5sb2FkKCk7XG4gICAgICAgICAgICB0aGlzLmluc3RydWN0aW9uVk8gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0b3BNdXNpYygpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE11c2ljKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNdXNpYy5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNdXNpYy51bmxvYWQoKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE11c2ljID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtdXRlVk8oKSB7XG4gICAgICAgIHRoaXMuX3ZvVm9sdW1lID0gU291bmRWb2x1bWUubXV0ZWQ7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibXV0ZVZPOiB2byB2b2x1bWUgaXMgXCIsIHRoaXMuX3ZvVm9sdW1lKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRWTykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Vk8ubXV0ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbnN0cnVjdGlvblZPKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RydWN0aW9uVk8ubXV0ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtdXRlTXVzaWMoKSB7XG4gICAgICAgIHRoaXMuX211c2ljVm9sdW1lID0gU291bmRWb2x1bWUubXV0ZWQ7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRNdXNpYykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TXVzaWMubXV0ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtdXRlU0ZYKCkge1xuICAgICAgICB0aGlzLl9zZnhWb2x1bWUgPSBTb3VuZFZvbHVtZS5tdXRlZDtcbiAgICAgICAgdGhpcy5fdWlWb2x1bWUgPSBTb3VuZFZvbHVtZS5tdXRlZDtcbiAgICAgICAgdGhpcy5jdXJyZW50U291bmRDaGFubmVscy5mb3JFYWNoKGhvd2wgPT4geyBpZiAoaG93bCkgeyBob3dsLm11dGUodHJ1ZSk7IH0gfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHVubXV0ZVZPKCkge1xuICAgICAgICB0aGlzLl92b1ZvbHVtZSA9IFNvdW5kVm9sdW1lLnZvO1xuICAgICAgICBjb25zb2xlLmxvZyhcInVubXV0ZVZPOiB2byB2b2x1bWUgaXMgXCIsIHRoaXMuX3ZvVm9sdW1lKTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFZPKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWTy52b2x1bWUodGhpcy5fdm9Wb2x1bWUpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Vk8ubXV0ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5zdHJ1Y3Rpb25WTykge1xuICAgICAgICAgICAgdGhpcy5pbnN0cnVjdGlvblZPLnZvbHVtZSh0aGlzLl92b1ZvbHVtZSk7XG4gICAgICAgICAgICB0aGlzLmluc3RydWN0aW9uVk8ubXV0ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgdW5tdXRlTXVzaWMoKSB7XG4gICAgICAgIHRoaXMuX211c2ljVm9sdW1lID0gU291bmRWb2x1bWUubXVzaWM7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRNdXNpYykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TXVzaWMubXV0ZShmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNdXNpYy52b2x1bWUodGhpcy5fbXVzaWNWb2x1bWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHVubXV0ZVNGWCgpIHtcbiAgICAgICAgdGhpcy5fc2Z4Vm9sdW1lID0gU291bmRWb2x1bWUuc2Z4O1xuICAgICAgICB0aGlzLl91aVZvbHVtZSA9IFNvdW5kVm9sdW1lLlVJO1xuICAgICAgICB0aGlzLmN1cnJlbnRTb3VuZENoYW5uZWxzLmZvckVhY2goKGhvd2w6IEhvd2wsIGluZGV4OiBudW1iZXIpID0+IHsgXG4gICAgICAgICAgICBpZiAoaG93bCkgeyBcbiAgICAgICAgICAgICAgICBob3dsLm11dGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSBTb3VuZENoYW5uZWwuRzEpe1xuICAgICAgICAgICAgICAgICAgICBob3dsLnZvbHVtZSh0aGlzLl91aVZvbHVtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgICAgICBob3dsLnZvbHVtZSh0aGlzLl9zZnhWb2x1bWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyB1bmxvY2tBdWRpbygpIHtcbiAgICAgICAgbmV3IEhvd2woe1xuICAgICAgICAgICAgc3JjOiBbU291bmRTZXJ2aWNlLnNvdW5kc1BhdGggKyBcInNmeC1jbGljay5tcDNcIl0sXG4gICAgICAgICAgICB2b2x1bWU6IDAuMDFcbiAgICAgICAgfSkucGxheSgpO1xuICAgIH1cbn0iLCJpbXBvcnQgU2VsZWN0aW9uUG9wT3ZlciBmcm9tIFwiLi9TZWxlY3Rpb25Qb3BPdmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3BTZWxlY3Rpb25Qb3BPdmVyIGV4dGVuZHMgU2VsZWN0aW9uUG9wT3ZlcjxQcm9wPiB7XG4gICAgaW5pdCgpIHtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLnJlcG9zaXRpb24oKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0U2tpbk5hbWUoc2VsZWN0aW9uVHlwZTogUHJvcCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb25UeXBlLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZW51bSBQcm9we1xuICAgIHRyZWVzID0gXCJ0cmVlc1wiLFxuICAgIHNreVNjcmFwZXIgPSBcInNreXNjcmFwZXJzXCIsXG4gICAgY2FuZHkgPSBcImNhbmR5Y2FuZXNcIixcbiAgICBiYXNrZXQgPSBcImJhc2tldFwiLFxuICAgIHRvb2xib3ggPSBcInRvb2xib3hcIixcbiAgICBjaGVzdCA9IFwiY2hlc3RcIixcbiAgICBwYW50cnkgPSBcInBhbnRyeVwiLFxuICAgIHByZXNlbnQgPSBcInByZXNlbnRcIixcbiAgICB3YXJkcm9iZSA9IFwid2FyZHJvYmVcIixcbiAgICB0ZWRkeSA9IFwidGVkZHliZWFyXCIsXG4gICAgcnViYmVyRHVja3kgPSBcInJ1YmJlcmR1Y2tpZVwiLFxuICAgIHVrdWxlbGUgPSBcInVrdWxlbGVcIixcbiAgICBiZWFuc3RhbGtzID0gXCJiZWFuc3RhbGtzXCIsXG4gICAgZmxvd2VycyA9IFwiZmxvd2Vyc1wiLFxuICAgIGhvbmV5YmVlaGl2ZXMgPSBcImhvbmV5YmVlaGl2ZXNcIixcbiAgICBwb3JyaWRnZSA9IFwiYm93bC1wb3JyaWRnZVwiLFxuICAgIHRhY29zID0gXCJib3dsLXRhY29cIixcbiAgICBzcGFnaGV0dGkgPSBcImJvd2wtc3BhZ2hldHRpXCIsXG4gICAgYmVhbmJhZyA9IFwiYmVhbmJhZ1wiLFxuICAgIGNvdWNoID0gXCJjb3VjaFwiLFxuICAgIHRyYWluID0gXCJ0cmFpbnNlYXRcIixcbiAgICBjaGFpciA9IFwiY2hhaXJcIixcbiAgICBoYW1tb2NrID0gXCJoYW1tb2NrXCIsXG4gICAgd2F0ZXJiZWQgPSBcIndhdGVyYmVkXCIsXG4gICAgcHVtcGtpbmNhcnJpYWdlID0gXCJwdW1wa2luY2FycmlhZ2VcIixcbiAgICBwdW1wa2luY2FyID0gXCJwdW1wa2luY2FyXCIsXG4gICAgcHVtcGtpbnJvY2tldCA9IFwicHVtcGtpbnJvY2tldFwiLFxuICAgIGJhY2tncm91bmRHcmFuZG1hID0gXCJiYWNrZ3JvdW5kLWdyYW5kbWFcIixcbiAgICBiYWNrZ3JvdW5kQmFsbHJvb20gPSBcImJhY2tncm91bmQtYmFsbHJvb21cIixcbiAgICBiYWNrZ3JvdW5kM2JlYXJzID0gXCJiYWNrZ3JvdW5kLTNiZWFyc1wiLFxufSIsImltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFNvdW5kU2VydmljZSwgeyBTb3VuZENoYW5uZWwgfSBmcm9tIFwiLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvU291bmRTZXJ2aWNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlTmFtZSB9IGZyb20gXCIuLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTRlhBY3Rpb24gZXh0ZW5kcyBmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9ue1xuXG4gICAgcHJpdmF0ZSBfaXNQbGF5aW5nOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIHNvdW5kU2VydmljZTogU291bmRTZXJ2aWNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzb3VuZE5hbWU6IHN0cmluZywgcHJpdmF0ZSBzb3VuZENoYW5uZWw6IFNvdW5kQ2hhbm5lbCwgcHVibGljIGxvb3A6IGJvb2xlYW4sIGRpU2VydmljZTogRElTZXJ2aWNlKXtcbiAgICAgICAgc3VwZXIoKHBhcmVudCwgZGVsdGEsIGRlbHRhTVMpID0+IHtcbiAgICAgICAgICAgdGhpcy5wbGF5KHBhcmVudCwgZGVsdGEsIGRlbHRhTVMpXG4gICAgICAgIH0sIGxvb3ApO1xuICAgICAgICB0aGlzLnNvdW5kU2VydmljZSA9IGRpU2VydmljZS5nZXQoU2VydmljZU5hbWUuU291bmRTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgICAgIHN1cGVyLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgIH07XG5cbiAgICBwbGF5KHBhcmVudCwgZGVsdGEsIGRlbHRhTVMpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNvdW5kTmFtZSkge1xuICAgICAgICAgICAgcGFyZW50LmZpbmlzaCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXNQbGF5aW5nID0gdHJ1ZTtcblxuICAgICAgICAvLyBQcmVsb2FkIG5lY2Vzc2FyeSBmb3Igd2hlbiBtdWx0aXBsZSBzb3VuZHMgYXJlIHBsYXllZCBpbiBxdWljayBzdWNjZXNzaW9uLlxuICAgICAgICB0aGlzLnNvdW5kU2VydmljZS5wcmVsb2FkU0ZYKFtTb3VuZFNlcnZpY2Uuc291bmRzUGF0aCArIHRoaXMuc291bmROYW1lXSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2UucGxheVNvdW5kKHRoaXMuc291bmROYW1lLCB0aGlzLnNvdW5kQ2hhbm5lbCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHBhcmVudC5maW5pc2goKTsgIC8vIE1hcmsgdGhpcyBhY3Rpb24gYXMgY29tcGxldGUuXG4gICAgICAgICAgICB9LCB0aGlzLmxvb3AgKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUGxheWluZygpKSB7XG4gICAgICAgICAgICB0aGlzLnNvdW5kU2VydmljZS5zdG9wU291bmQodGhpcy5zb3VuZENoYW5uZWwpO1xuICAgICAgICAgICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaXNQbGF5aW5nICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUGxheWluZztcbiAgICB9O1xufSIsImltcG9ydCB7IElTdGFnZVByb3BzIH0gZnJvbSBcIi4vQWJzdHJhY3RTdGFnZVByb3BzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhY2tkcm9wIGltcGxlbWVudHMgSVN0YWdlUHJvcHMge1xuXG4gICAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb250U3BpbmUuc2tlbGV0b24uc2tpbi5hdHRhY2htZW50c1swXVsnYmFja2dyb3VuZCddLm5hbWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBmcm9udCgpOiBmcmFtZXdvcmsuU3BpbmVWaWV3IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbnRTcGluZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNwaW5lczogZnJhbWV3b3JrLlNwaW5lVmlld1tdO1xuICAgIGN1cnJlbnRBY3Q6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZnJvbnRTcGluZTogZnJhbWV3b3JrLlNwaW5lVmlldywgcHJpdmF0ZSBiYWNrU3BpbmU6IGZyYW1ld29yay5TcGluZVZpZXcpIHtcbiAgICAgICAgdGhpcy5zcGluZXMgPSBbdGhpcy5mcm9udFNwaW5lLCB0aGlzLmJhY2tTcGluZV07XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIGluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2hvd0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZnJvbnRTcGluZS52aXNpYmxlID0gdHJ1ZSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5mcm9udFNwaW5lLCBCYWNrRHJvcEFuaW0uc2hvdylcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9udFNwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCBCYWNrRHJvcEFuaW0uaWRsZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFja1NwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCBCYWNrRHJvcEFuaW0uaWRsZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFja1NwaW5lLnZpc2libGUgPSB0cnVlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QW5pbWF0ZWRBY3RDaGFuZ2VBY3Rpb24oYWN0OiBCYWNrRHJvcFNraW4pIHtcbiAgICAgICAgdGhpcy5mcm9udFNwaW5lLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zYXZlQ3VycmVudFNraW4oKTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZyb250U3BpbmUuc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShhY3QpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZyb250U3BpbmUudmlzaWJsZSA9IHRydWVcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLmZyb250U3BpbmUsIEJhY2tEcm9wQW5pbS5zaG93KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyb250U3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEJhY2tEcm9wQW5pbS5pZGxlLCBmYWxzZSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYmFja1NwaW5lLnNrZWxldG9uLnNldFNraW5CeU5hbWUoYWN0KTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0QmFja2Ryb3BUbyhhY3Q6IHN0cmluZywgdmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlKXtcbiAgICAgICAgdGhpcy5zYXZlQ3VycmVudFNraW4oKTtcbiAgICAgICAgdGhpcy5zcGluZXMuZm9yRWFjaChzcGluZSA9PiB7XG4gICAgICAgICAgICBzcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKGFjdCk7XG4gICAgICAgICAgICBzcGluZS52aXNpYmxlID0gdmlzaWJsZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzYXZlQ3VycmVudFNraW4oKSB7XG4gICAgICAgIGNvbnN0IHNraW4gPSB0aGlzLmZyb250U3BpbmUuc2tlbGV0b24uc2tpbjtcbiAgICAgICAgaWYgKHNraW4pIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEFjdCA9IHNraW4ubmFtZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgIHRoaXMuc2V0QmFja2Ryb3BUbyhCYWNrRHJvcFNraW4uYWN0MSlcbiAgICB9XG5cbn1cblxuZXhwb3J0IGVudW0gQmFja0Ryb3BTa2luIHtcbiAgICBhY3QxID0gXCJhY3QxXCIsXG4gICAgYWN0MiA9IFwiYWN0MlwiLFxuICAgIGFjdDMgPSBcImFjdDNcIixcbiAgICBhY3Q0ID0gXCJhY3Q0XCIsXG4gICAgYWN0NSA9IFwiYWN0NVwiLFxuICAgIGFjdDYgPSBcImFjdDZcIixcbn1cbmV4cG9ydCBlbnVtIEJhY2tEcm9wQW5pbSB7XG4gICAgaWRsZSA9IFwiaWRsZVwiLFxuICAgIHNob3cgPSBcInNob3dcIixcbn0iLCJpbXBvcnQgU0ZYQWN0aW9uIGZyb20gXCIuL1NGWEFjdGlvblwiO1xuaW1wb3J0IHsgU291bmRDaGFubmVsIH0gZnJvbSBcIi4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NvdW5kU2VydmljZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb24oc3BpbmU6IGZyYW1ld29yay5TcGluZVZpZXcsIGFuaW1hdGlvbk5hbWU6IHN0cmluZywgbG9vcDogYm9vbGVhbik6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgIGNvbnN0IG1pbkRlbGF5ID0gMDtcbiAgICBjb25zdCBtYXhEZWxheSA9IDAuNDtcbiAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5SYW5kb21EZWxheShtaW5EZWxheSwgbWF4RGVsYXkpLFxuICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZShzcGluZSwgYW5pbWF0aW9uTmFtZSwgeyBsb29wOiBsb29wIH0pXG4gICAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbkFuZFZpc2libGUoc3BpbmU6IGZyYW1ld29yay5TcGluZVZpZXcsIGFuaW1hdGlvbk5hbWU6IHN0cmluZywgbG9vcDogYm9vbGVhbik6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgIGNvbnN0IG1pbkRlbGF5ID0gMDtcbiAgICBjb25zdCBtYXhEZWxheSA9IDAuMztcbiAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5SYW5kb21EZWxheShtaW5EZWxheSwgbWF4RGVsYXkpLFxuICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICBzcGluZS52aXNpYmxlID0gdHJ1ZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZShzcGluZSwgYW5pbWF0aW9uTmFtZSwgeyBsb29wOiBsb29wIH0pXG4gICAgICAgIF0pXG4gICAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbkFuZFZpc2libGVXaXRoU0ZYKHNwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3LCBhbmltYXRpb25OYW1lOiBzdHJpbmcsIGxvb3A6IGJvb2xlYW4sIHNvdW5kTmFtZTogc3RyaW5nLCBzb3VuZERlbGF5OiBudW1iZXIsIGRpU2VydmljZTogYW55KTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgY29uc3QgbWluRGVsYXkgPSAwO1xuICAgIGNvbnN0IG1heERlbGF5ID0gMC4zO1xuICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlJhbmRvbURlbGF5KG1pbkRlbGF5LCBtYXhEZWxheSksXG4gICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNwaW5lLnZpc2libGUgPSB0cnVlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHNwaW5lLCBhbmltYXRpb25OYW1lLCB7IGxvb3A6IGxvb3AgfSksXG4gICAgICAgICAgICBjcmVhdGVEZWxheWVkU0ZYQWN0aW9uKHNvdW5kRGVsYXksIHNvdW5kTmFtZSwgZGlTZXJ2aWNlKVxuICAgICAgICBdKSxcbiAgICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbkFuZFZpc2libGVXaXRoU0ZYKHNwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3LCBhbmltYXRpb25OYW1lOiBzdHJpbmcsIGxvb3A6IGJvb2xlYW4sIHNvdW5kTmFtZTogc3RyaW5nLCBzb3VuZERlbGF5OiBudW1iZXIsIGRpU2VydmljZTogYW55KTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3BpbmUudmlzaWJsZSA9IHRydWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUoc3BpbmUsIGFuaW1hdGlvbk5hbWUsIHsgbG9vcDogbG9vcCB9KSxcbiAgICAgICAgICAgIGNyZWF0ZURlbGF5ZWRTRlhBY3Rpb24oc291bmREZWxheSwgc291bmROYW1lLCBkaVNlcnZpY2UpXG4gICAgICAgIF0pLFxuICAgIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVsYXllZFNGWEFjdGlvbihzb3VuZERlbGF5OiBudW1iZXIsIHNvdW5kTmFtZTogc3RyaW5nLCBkaVNlcnZpY2U6IGFueSk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KHNvdW5kRGVsYXkpLFxuICAgICAgICBuZXcgU0ZYQWN0aW9uKHNvdW5kTmFtZSwgU291bmRDaGFubmVsLkcyLCBmYWxzZSwgZGlTZXJ2aWNlKVxuICAgIF0pO1xufVxuIiwiaW1wb3J0IFN0b3J5RGF0YSBmcm9tIFwiLi4vY29tbW9uL1N0b3J5RGF0YVwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCB7IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyB9IGZyb20gXCIuLi9jb21tb24vQ2hhcmFjdGVyU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IHsgQ29zdHVtZXMgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Db3N0dW1lc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHb2xkaWxvY2tzU3RvcnlEYXRhIGV4dGVuZHMgU3RvcnlEYXRhe1xuICAgIHB1YmxpYyByZWFkb25seSB2b0lETWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuXG4gICAgc3RhdGljIGFjdDFQYXJlbnRCZWFyWFBvc2l0aW9uOiBudW1iZXIgPSAtMzAwO1xuICAgIHN0YXRpYyBhY3QxR29sZGlsb2Nrc09mZlNjcmVlblhQb3NpdGlvbjogbnVtYmVyID0gLTcwMDtcbiAgICBzdGF0aWMgYWN0MUdvbGRpbG9ja3NXYWxrVG9YUG9zaXRpb246IG51bWJlciA9IC0xMDA7XG4gICAgc3RhdGljIGFjdDFOZXh0VG9Eb29yWFBvc2l0aW9uOiBudW1iZXIgPSAyNTA7XG5cbiAgICBzdGF0aWMgYWN0Mk5hcnJhdG9yWFBvc2l0aW9uOiBudW1iZXIgPSAtNDUwO1xuICAgIHN0YXRpYyBhY3QyR29sZGlsb2Nrc1hQb3NpdGlvbjogbnVtYmVyID0gLTI1MDtcblxuICAgIHN0YXRpYyBhY3QzbmFycmF0b3JYUG9zaXRpb246IG51bWJlciA9IDQzMztcbiAgICBzdGF0aWMgYWN0M0dvbGRpbG9ja3NYUG9zaXRpb246IG51bWJlciA9IDI1MDtcblxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJzdW5ueVwiLCBcInN1bm55XCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiY2xvdWR5XCIsIFwiY2xvdWR5XCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiR29sZGlsb2Nrc1wiLCBcImxvY2tzXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiR29sZGktcm9ja3NcIiwgXCJyb2Nrc1wiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcIkdvbGRpLWZpc2hcIiwgXCJmaXNoXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiY2hhaXJzXCIsIFwiY2hhaXJcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJiZWFuIGJhZ3NcIiwgXCJiZWFuYmFnXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwidHJhaW5cIiwgXCJ0cmFpblwiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcIlBvcnJpZGdlXCIsIFwicG9ycmlkZ2VcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJUYWNvc1wiLCBcInRhY29zXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiU3BhZ2hldHRpXCIsIFwic3BhZ2hldHRpXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwicGFwYVwiLCBcInBhcGFcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJtYW1hXCIsIFwibWFtYVwiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcIldhdGVyIEJlZFwiLCBcIndhdGVyYmVkXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiQ291Y2hcIiwgXCJjb3VjaFwiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcIkhhbW1vY2tcIiwgXCJoYW1tb2NrXCIpO1xuICAgIH1cblxuICAgIGdldERlZmF1bHRWT0tleXMoKXtcbiAgICAgICAgcmV0dXJuIFtcInBhcmVudFwiLCBcImJlZFwiLCBcInNlYXRcIl07XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWRvbmx5IGNoYXJhY3RlclNlbGVjdGlvbkRpYWxvZ3M6IE1hcDxSb2xlLCBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2c+ID0gbmV3IE1hcChbXG4gICAgICAgIFtSb2xlLmJhYnlCZWFyLCBuZXcgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKFwiZ2wtY2hhci1zZWxlY3QtYmFieS1iZWFyLm1wM1wiLCBcIldobyBzaG91bGQgYmUgQmFieSBCZWFyP1wiKV0sXG4gICAgICAgIFtSb2xlLnBhcmVudEJlYXIsIG5ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJnbC1jaGFyLXNlbGVjdC1wYXJlbnQtYmVhci5tcDNcIiwgXCJXaG8gc2hvdWxkIGJlIEJhYnkgQmVhcidzIFBhcmVudD9cIildLFxuICAgIF0pXG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgbGVhZFJvbGU6IFJvbGUgPSBSb2xlLmdvbGRpbG9ja3M7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgcm9sZVVJTWFwOiBNYXA8Um9sZSwgQ29zdHVtZXM+ID0gbmV3IE1hcChbXG4gICAgICAgIFtSb2xlLmdvbGRpbG9ja3MsIENvc3R1bWVzLnJvbGVnb2xkaWVsb2Nrc10sXG4gICAgICAgIFtSb2xlLnBhcmVudEJlYXIsIENvc3R1bWVzLnJvbGVwYXJlbnRiZWFyXSxcbiAgICAgICAgW1JvbGUuYmFieUJlYXIsIENvc3R1bWVzLnJvbGViYWJ5YmVhcl0sXG4gICAgICAgIFtSb2xlLm5hcnJhdG9yLCBDb3N0dW1lcy5yb2xlbmFycmF0b3IgXSxcbiAgICBdKVxuXG59IiwiaW1wb3J0IEJhY2tncm91bmRlZFBvcE92ZXIgZnJvbSBcIi4vQmFja2dyb3VuZGVkUG9wT3ZlclwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCBTaGFkb3dTaGFkZXIgZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvU2hhZG93U2hhZGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbkFuZFZpc2libGUsIGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0FuaW1hdGlvbkFjdGlvbnNcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFNoYWRvd2VkU3BpbmVQb3BPdmVyIGV4dGVuZHMgQmFja2dyb3VuZGVkUG9wT3ZlciB7XG4gICAgcHJvdGVjdGVkIF9pc0JlaW5nRGVpbml0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBwdWJsaWMgYWN0aXZlYnV0dG9ucyA9IFtdO1xuXG4gICAgcHVibGljIGdldCBidXR0b25zKCk6IGZyYW1ld29yay5TcGluZVZpZXdbXSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdmlldyBcbiAgICAgKiBAcGFyYW0gZGlTZXJ2aWNlIFxuICAgICAqIEBwYXJhbSBzZWxlY3Rpb25UeXBlIFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcih2aWV3LCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIGluaXQoKXtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLl9pc0JlaW5nRGVpbml0ID0gZmFsc2VcbiAgICAgICAgdGhpcy5zZXRTaGFkb3coKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2V0U2hhZG93KCkge1xuICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9IG5ldyBQSVhJLlBvaW50KDAuMDUsIDEuMCk7XG5cbiAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goc3BpbmUgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyID0gbmV3IFNoYWRvd1NoYWRlcihvcmllbnRhdGlvbiwgMTIpO1xuICAgICAgICAgICAgc3BpbmUuZmlsdGVycyA9IFtmaWx0ZXJdXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVTaGFkb3coKSB7XG4gICAgICAgIGlmICghdGhpcy5idXR0b25zIHx8IHRoaXMuX2lzQmVpbmdEZWluaXQpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKHNwaW5lID0+IHtcbiAgICAgICAgICAgIGlmICghc3BpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0YWtlIGdyb3VuZCBZIGluIHNjcmVlbiBjb29yZHMgdG8gdW5pZm9ybXNcbiAgICAgICAgICAgIGNvbnN0IGdsb2JhbFBvcyA9IGZyYW1ld29yay5WZWN0b3IuZ2V0R2xvYmFsUG9zKHNwaW5lKVxuICAgICAgICAgICAgY29uc3QgZmlsdGVyID0gc3BpbmUuZmlsdGVycy5maXJzdCgpO1xuICAgICAgICAgICAgaWYgKCFmaWx0ZXIpeyByZXR1cm47IH1cbiAgICAgICAgICAgIGZpbHRlci51bmlmb3Jtcy5mbG9vclkgPSBnbG9iYWxQb3MueTtcblxuICAgICAgICAgICAgY29uc3QgYXBwV2lkdGggPSB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZ2FtZVdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvciA9IGdsb2JhbFBvcy54IDwgYXBwV2lkdGggLyAyID8gMSA6IC0xO1xuICAgICAgICAgICAgZmlsdGVyLnVuaWZvcm1zLmZhY3RvciA9IGZhY3RvcjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbW92ZVNoYWRvd3MoKXtcbiAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goc3BpbmUgPT4ge1xuICAgICAgICAgICAgc3BpbmUuZmlsdGVycyA9IFtdO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3VzdG9tU2hvd0FjdGlvbkhhbmRsZTogZnJhbWV3b3JrLkFjdGlvbjtcblxuICAgIHByb3RlY3RlZCBjdXN0b21TaG93QWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICB0aGlzLmN1c3RvbVNob3dBY3Rpb25IYW5kbGUgPSAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmFscGhhID0gMS4wO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbCh0aGlzLmJ1dHRvbnMubWFwKChzcGluZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVidXR0b25zW2luZGV4XSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb25BbmRWaXNpYmxlKHNwaW5lLCBBbmltYXRpb25zLnNob3csIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKTtcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKHRoaXMuYnV0dG9ucy5tYXAoKHNwaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZWJ1dHRvbnNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbihzcGluZSwgQW5pbWF0aW9ucy5pZGxlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKTtcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbVNob3dBY3Rpb25IYW5kbGU7XG4gICAgfTtcblxuICAgIHByb3RlY3RlZCBjdXN0b21IaWRlQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwodGhpcy5idXR0b25zLm1hcCgoc3BpbmUpID0+IGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uKHNwaW5lLCBBbmltYXRpb25zLmhpZGUsIGZhbHNlKSkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goc3BpbmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzcGluZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICB1cGRhdGUoZGVsdGE6IG51bWJlcil7XG4gICAgICAgIGlmICh0aGlzLl9pc0JlaW5nRGVpbml0KXsgcmV0dXJuOyB9XG4gICAgICAgIHN1cGVyLnVwZGF0ZShkZWx0YSk7XG4gICAgICAgIHRoaXMudXBkYXRlU2hhZG93KCk7XG4gICAgfVxuXG4gICAgZGVpbml0KCkge1xuICAgICAgICB0aGlzLl9pc0JlaW5nRGVpbml0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZW1vdmVTaGFkb3dzKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZW51bSBBbmltYXRpb25ze1xuICAgIHNob3cgPSBcInNob3dcIixcbiAgICBoaWRlID0gXCJoaWRlXCIsXG4gICAgaWRsZSA9IFwiaWRsZVwiLFxufSIsImltcG9ydCBTdG9yeURhdGEgZnJvbSBcIi4uL2NvbW1vbi9TdG9yeURhdGFcIjtcbmltcG9ydCB7IEJhc2tldENob2ljZSB9IGZyb20gXCIuLi9mYWN0b3JpZXMvTFJSSERpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IHsgQ29zdHVtZXMgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Db3N0dW1lc1wiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCB7IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyB9IGZyb20gXCIuLi9jb21tb24vQ2hhcmFjdGVyU2VsZWN0aW9uUG9wT3ZlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMUlJIU3RvcnlEYXRhIGV4dGVuZHMgU3RvcnlEYXRhe1xuICAgIHB1YmxpYyByZWFkb25seSB2b0lETWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuXG4gICAgc3RhdGljIGFjdDFXb2xmWFBvc2l0aW9uOiBudW1iZXIgPSAxMDM7XG4gICAgc3RhdGljIGFjdDFXb2xmQmFza2V0WFBvc2l0aW9uOiBudW1iZXIgPSAtNDA7XG4gICAgc3RhdGljIGFjdDJXb2xmWFBvc2l0aW9uOiBudW1iZXIgPSAyMDA7XG4gICAgc3RhdGljIGFjdDJOYXJyYXRvclhQb3NpdGlvbjogbnVtYmVyID0gMzc1O1xuICAgIHN0YXRpYyBhY3QyR3Jhbm1hWFBvc2l0aW9uOiBudW1iZXIgPSAtMTA7XG4gICAgc3RhdGljIGFjdDJMcnJoWFBvc2l0aW9uOiBudW1iZXIgPSAtMjAwIDtcbiAgICBzdGF0aWMgYWN0MldvbGZYU2NhbGU6IG51bWJlciA9IDE7XG4gICAgc3RhdGljIGFjdDJOYXJyYXRvclhTY2FsZTogbnVtYmVyID0gMTtcbiAgICBzdGF0aWMgYWN0MkxycmhYU2NhbGU6IG51bWJlciA9IC0xIDtcblxuICAgIHB1YmxpYyBiYXNrZXRDaG9pY2U6IHN0cmluZztcblxuICAgIHB1YmxpYyBiYXNrZXRDaG9pY2VGcm9tID0gKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBCYXNrZXRDaG9pY2UuYmFza2V0OlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5iYXNrZXQ7XG4gICAgICAgICAgICBjYXNlIEJhc2tldENob2ljZS50b29sYm94OlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy50b29sYm94O1xuICAgICAgICAgICAgY2FzZSBCYXNrZXRDaG9pY2UudHJlYXN1cmVDaGVzdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMudHJlYXN1cmVjaGVzdDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgJ0Jhc2tldENob2ljZSBub3QgZm91bmQgZm9yICcgKyB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZWFkb25seSBjaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2dzOiBNYXA8Um9sZSwgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nPiA9IG5ldyBNYXAoW1xuICAgICAgICBbUm9sZS53b2xmLCBuZXcgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKFwibHJyaC1jaGFyLXNlbGVjdC13b2xmLm1wM1wiLCBcIldobyBzaG91bGQgYmUgdGhlIEJpZyBCYWQgV29sZj9cIildLFxuICAgICAgICBbUm9sZS5ncmFuZG1hLCBuZXcgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKFwibHJyaC1jaGFyLXNlbGVjdC1ncmFubnkubXAzXCIsIFwiV2hvIHNob3VsZCBiZSBHcmFubnk/XCIpXSxcbiAgICBdKVxuXG4gICAgcHVibGljIHJlYWRvbmx5IHJvbGVVSU1hcDogTWFwPFJvbGUsIENvc3R1bWVzPiA9IG5ldyBNYXAoW1xuICAgICAgICBbUm9sZS5saXR0bGVSZWRIb29kLCBDb3N0dW1lcy5yb2xlbGxyaF0sXG4gICAgICAgIFtSb2xlLndvbGYsIENvc3R1bWVzLnJvbGV0aGV3b2xmXSxcbiAgICAgICAgW1JvbGUuZ3JhbmRtYSwgQ29zdHVtZXMucm9sZWdyYW5ueV0sXG4gICAgICAgIFtSb2xlLm5hcnJhdG9yLCBDb3N0dW1lcy5yb2xlbmFycmF0b3JdLFxuICAgIF0pXG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgbGVhZFJvbGU6IFJvbGUgPSBSb2xlLmxpdHRsZVJlZEhvb2Q7XG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiTGl0dGxlIFJlZCBSaWRpbmcgSG9vZFwiLCBcImxycmhcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJMaXR0bGUgT3JhbmdlIENvd2JveSBIYXRcIiwgXCJjb3dib3lcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJMaXR0bGUgR3JlZW4gUGlyYXRlIEhhdFwiLCBcInBpcmF0ZVwiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcInN1bm55XCIsIFwic3VubnlcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJjbG91ZHlcIiwgXCJjbG91ZHlcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJDbG9zZXRcIiwgXCJDbG9zZXRcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJQYW50cnlcIiwgXCJQYW50cnlcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJQcmVzZW50XCIsIFwiUHJlc2VudFwiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcInRyZWF0c1wiLCBcInRyZWF0c1wiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcInRvb2xib3hcIiwgXCJ0b29sYm94XCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwidHJlYXN1cmVjaGVzdFwiLCBcInRyZWFzdXJlY2hlc3RcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJ3YWxraW5nXCIsIFwid2Fsa2luZ1wiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcImp1bXBpbmdcIiwgXCJqdW1waW5nXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiZ3Jvb3ZpbmdcIiwgXCJncm9vdmluZ1wiKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmFjdG9yeUhlbHBlciB7XG4gICAgc3RhdGljIGFwcGx5QmFzZUNvbmZpZ1RvVmlldyhjb25maWcsIHZpZXcpIHtcbiAgICAgICAgdmlldy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgICAgIHZpZXcucG9zaXRpb24gPSBuZXcgUElYSS5Qb2ludChjb25maWcucG9zaXRpb24ueCwgY29uZmlnLnBvc2l0aW9uLnkpO1xuICAgICAgICB2aWV3LnJvdGF0aW9uID0gY29uZmlnLnJvdGF0aW9uO1xuICAgICAgICB2aWV3LnNjYWxlID0gbmV3IFBJWEkuUG9pbnQoY29uZmlnLnNjYWxlLngsIGNvbmZpZy5zY2FsZS55KTtcbiAgICAgICAgdmlldy5waXZvdCA9IG5ldyBQSVhJLlBvaW50KGNvbmZpZy5waXZvdC54LCBjb25maWcucGl2b3QueSk7XG4gICAgICAgIHZpZXcuYWxwaGEgPSBjb25maWcuYWxwaGE7XG4gICAgICAgIHZpZXcuaW50ZXJhY3RpdmUgPSBjb25maWcuaXNJbnRlcmFjdGl2ZTtcbiAgICAgICAgdmlldy52aXNpYmxlID0gY29uZmlnLmlzVmlzaWJsZTtcbiAgICAgICAgdmlldy56SW5kZXggPSBjb25maWcuekluZGV4O1xuICAgICAgICB2aWV3LnByZWRpY2F0ZSA9IGNvbmZpZy5wcmVkaWNhdGU7XG4gICAgICAgIGlmIChjb25maWcubWFzaykge1xuICAgICAgICAgICAgdmFyIG1hc2sgPSBhcHAuY3JlYXRlVmlldyhjb25maWcubWFzaywgbnVsbCk7XG4gICAgICAgICAgICBpZiAobWFzaykge1xuICAgICAgICAgICAgICAgIHZpZXcuYWRkQ2hpbGQobWFzayk7IC8vIEFkZCBtYXNrIGFzIGNoaWxkIHNvIGl0IGZvbGxvd3MgdGhpcyB2aWV3J3MgdHJhbnNmb3JtLlxuICAgICAgICAgICAgICAgIHZpZXcubWFzayA9IG1hc2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmlldy52aWV3Q29uZmlnID0gY29uZmlnO1xuICAgIH1cblxufSIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi9Sb2xlXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gXCIuL0RpcmVjdGlvblwiO1xuaW1wb3J0IHsgQ2hvaWNlVHlwZSB9IGZyb20gXCIuLi9zdGFnZS9mYWN0b3JpZXMvTFJSSERpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IHsgSVBvaW50IH0gZnJvbSBcInBpeGkuanNcIjtcblxuaW1wb3J0ICogYXMgVFdFRU4gZnJvbSBcIkB0d2VlbmpzL3R3ZWVuLmpzL2Rpc3QvdHdlZW4uY2pzLmpzXCI7XG5pbXBvcnQgU0ZYQWN0aW9uIGZyb20gXCIuLi91dGlscy9TRlhBY3Rpb25cIjtcbmltcG9ydCB7IFNvdW5kQ2hhbm5lbCB9IGZyb20gXCIuLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9Tb3VuZFNlcnZpY2VcIjtcblxuaW1wb3J0IHsgQ29zdHVtZXMsIGNvc3R1bWVzIH0gZnJvbSBcIi4vQ29zdHVtZXNcIjtcbmltcG9ydCBCYXNlQ2hhcmFjdGVyLCB7IEFuaW1hdGlvbnMsIENoYXJhY3RlclR5cGUsIENoYXJhY3RlclBvc2l0aW9uIH0gZnJvbSBcIi4vQmFzZUNoYXJhY3RlclwiO1xuaW1wb3J0IFNoYWRvd1NoYWRlciBmcm9tIFwiLi9TaGFkb3dTaGFkZXJcIjtcblxuXG5cbi8vVE9ETyBtYWtlIHRoaXMgYSBtZWRpYXRvciB0byByZXR1cm4gYWN0aW9ucyBmb3IgdGhlIHNwaW5lIHN0YXRlc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcmFjdGVyIGV4dGVuZHMgQmFzZUNoYXJhY3RlciB7XG4gICAgXG4gICAgcHJvdGVjdGVkIF9kZWZhdWx0QWN0aW9uOiBBbmltYXRpb25zO1xuICAgIHByb3RlY3RlZCBfZGVmYXVsdExvb3BBY3Rpb246IGJvb2xlYW47XG4gICAgcHVibGljIGdldCBkZWZhdWx0QWN0aW9uKCk6IEFuaW1hdGlvbnMge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdEFjdGlvbjtcbiAgICB9XG4gICAgcHJvdGVjdGVkIF9yZWFjdGlvbkFjdGlvbjogQW5pbWF0aW9ucztcbiAgICBwcm90ZWN0ZWQgX3JlYWN0aW9uTG9vcEFjdGlvbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgZ2V0IHJlYWN0aW9uQWN0aW9uKCk6IEFuaW1hdGlvbnMge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVhY3Rpb25BY3Rpb247XG4gICAgfVxuXG4gICAgc3RhdGljIGdldENvc3R1bWUoa2V5OiBzdHJpbmcpOiBDb3N0dW1lcyB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlIFwibGl0dGxlLXJlZC1yaWRpbmctaG9vZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5saXR0bGVSZWRIb29kO1xuICAgICAgICAgICAgY2FzZSBcIndvbGZcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMud29sZjtcbiAgICAgICAgICAgIGNhc2UgXCJjb3dib3lcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMuY293Ym95O1xuICAgICAgICAgICAgY2FzZSBcInBpcmF0ZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5waXJhdGU7XG4gICAgICAgICAgICBjYXNlIFwibmFycmF0b3JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMubmFycmF0b3I7XG4gICAgICAgICAgICBjYXNlIFwiZ3JhbmRtYVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5ncmFuZG1hO1xuICAgICAgICAgICAgY2FzZSBcIm5vbmVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMubm9uZTtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBcIm5vdCBmb3VuZCBcIiArIGtleTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBjb3N0dW1lRnJvbU5hbWUoaW5wdXQ6IHN0cmluZyk6IENvc3R1bWVze1xuICAgICAgICBzd2l0Y2ggKGlucHV0KSB7XG4gICAgICAgICAgICBjYXNlIFwiTGl0dGxlIFJlZCBSaWRpbmcgSG9vZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5saXR0bGVSZWRIb29kO1xuICAgICAgICAgICAgY2FzZSBcIkxpdHRsZSBPcmFuZ2UgQ293Ym95IEhhdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5jb3dib3k7XG4gICAgICAgICAgICBjYXNlIFwiTGl0dGxlIEdyZWVuIFBpcmF0ZSBIYXRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMucGlyYXRlO1xuICAgICAgICAgICAgY2FzZSBcIkdvbGRpbG9ja3NcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMuZ29sZGlsb2NrcztcbiAgICAgICAgICAgIGNhc2UgXCJHb2xkaS1yb2Nrc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5nb2xkaXJvY2tzO1xuICAgICAgICAgICAgY2FzZSBcIkdvbGRpLWZpc2hcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMuZ29sZGlmaXNoO1xuICAgICAgICAgICAgY2FzZSBcIkNpbmRlci1kaXZhXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvc3R1bWVzLm1vdmllc3RhcjtcbiAgICAgICAgICAgIGNhc2UgXCJDaW5kZXItbmF1dFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5hc3Ryb25hdXQ7XG4gICAgICAgICAgICBjYXNlIFwiQ2hhcm1pbmdcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMucHJpbmNlY2hhcm1pbmc7XG4gICAgICAgICAgICBjYXNlIFwiQm90XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvc3R1bWVzLnByaW5jZWJvdDtcbiAgICAgICAgICAgIGNhc2UgXCJNZWdhc3RhclwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5wcmluY2VtZWdhc3RhcjtcbiAgICAgICAgICAgIGNhc2UgXCJCb290c1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb3N0dW1lcy5zcGFjZWJvb3RzO1xuICAgICAgICAgICAgY2FzZSBcIlNuZWFrZXJzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvc3R1bWVzLnNuZWFrZXJzO1xuICAgICAgICAgICAgY2FzZSBcIlNsaXBwZXJzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvc3R1bWVzLmdsYXNzc2xpcHBlcnM7XG4gICAgICAgICAgICBjYXNlIFwiSW52ZW50b3JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMuaW52ZW50b3I7XG4gICAgICAgICAgICBjYXNlIFwiR29kbW90aGVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvc3R1bWVzLmZhaXJ5Z29kbW90aGVyO1xuICAgICAgICAgICAgY2FzZSBcIm1hbWFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMubXVtbWFiZWFyO1xuICAgICAgICAgICAgY2FzZSBcInBhcGFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29zdHVtZXMucHVwcGFiZWFyO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBcIm5vdCBmb3VuZCBcIiArIGlucHV0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9jb3N0dW1lOiBDb3N0dW1lcyA9IENvc3R1bWVzLm5vbmU7XG4gICBcbiAgICBzZXQgeCh4OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIueCA9IHg7XG4gICAgfVxuICAgIGdldCB4KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci54O1xuICAgIH1cbiAgICBzZXQgeSh5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIueSA9IHk7XG4gICAgfVxuICAgIGdldCB5KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci55O1xuICAgIH1cblxuICAgIGdldCBwb3NpdGlvbigpOiBJUG9pbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIucG9zaXRpb247XG4gICAgfVxuICAgIHNldCBwb3NpdGlvbihwb3MpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIueCA9IHBvcy54O1xuICAgICAgICB0aGlzLmNvbnRhaW5lci55ID0gcG9zLnk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoY2hhcmFjdGVyVHlwZTogQ2hhcmFjdGVyVHlwZSwgcm9sZTogUm9sZSwgcHVibGljIHJlYWRvbmx5IGNvbnRhaW5lcjogVmlldywgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoY2hhcmFjdGVyVHlwZSwgZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5fc3BpbmUgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy5jb250YWluZXIsIFwiYm9keVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLl9zbG90cyA9IHRoaXMuX3NwaW5lLnNwaW5lRGF0YS5zbG90cztcbiAgICAgICAgdGhpcy5fcm9sZSA9IHJvbGU7XG4gICAgICAgIHRoaXMuc2V0U2tpbkJ5TmFtZShjaGFyYWN0ZXJUeXBlKTtcbiAgICAgICAgdGhpcy5yZW1vdmVDb3N0dW1lKCk7XG4gICAgICAgIHRoaXMuc2V0U2hhZG93KCk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgc3VwZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgc3VwZXIuc2hvdygpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci52aXNpYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvL01PVkVNRU5UXG4gICAgcGxheUFuaW0oYW5pbTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3NwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCBhbmltLCB0cnVlKTtcbiAgICB9XG5cbiAgICBwbGF5V2Fsa09uKCkge1xuICAgICAgICB0aGlzLl9zcGluZS5zdGF0ZS5zZXRBbmltYXRpb24oMCwgQW5pbWF0aW9ucy53YWxrT24sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwbGF5V2FsaygpIHtcbiAgICAgICAgdGhpcy5fc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEFuaW1hdGlvbnMud2FsaywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcGxheVJ1bigpIHtcbiAgICAgICAgdGhpcy5fc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEFuaW1hdGlvbnMucnVuLCB0cnVlKTtcbiAgICB9XG5cbiAgICBwbGF5SGlkZURvd24oKSB7XG4gICAgICAgIHRoaXMuX3NwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCBBbmltYXRpb25zLmhpZGVEb3duLCBmYWxzZSk7XG4gICAgfVxuICAgIFxuICAgIHBsYXlIaWRlRG93blJpZ2h0KCkge1xuICAgICAgICB0aGlzLl9zcGluZS5zdGF0ZS5zZXRBbmltYXRpb24oMCwgQW5pbWF0aW9ucy5oaWRlUmlnaHQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBnZXRXYWxrT25BY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLl9zcGluZSwgQW5pbWF0aW9ucy53YWxrT24pO1xuICAgIH1cbiAgICBcbiAgICBnZXRMZWFwRnJvZ0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX3NwaW5lLCBBbmltYXRpb25zLmxlYXBmcm9nKTtcbiAgICB9XG5cbiAgICBnZXRTaGFrZUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX3NwaW5lLCBBbmltYXRpb25zLnNoYWtlKTtcbiAgICB9XG5cbiAgICBnZXRDZWxlYnJhdGVBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLl9zcGluZSwgQW5pbWF0aW9ucy5jZWxlYnJhdGUpO1xuICAgIH1cblxuICAgIGdldFdhbGtUb1Bvc2l0aW9uQWN0aW9uKHhQb3M6IG51bWJlciwgeVBvczogbnVtYmVyID0gdGhpcy55LCBkdXJhdGlvbj86IG51bWJlcik6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBsZXQgcG9zaXRpb24gPSBuZXcgUElYSS5Qb2ludCh4UG9zLCB5UG9zKTtcblxuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uVG9Qb2ludChwb3NpdGlvbiwgKCkgPT4gdGhpcy5wbGF5V2FsaygpLCBkdXJhdGlvbiksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMucGxheUlkbGUoKSlcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgc2V0RGVmYXVsdEFjdGlvbihjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgLy9ETyBOT1RISU5HXG4gICAgfVxuXG4gICAgc2V0UmVhY3Rpb25BY3Rpb24oY2hvaWNlSWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBhY3Rpb25zID0ge307XG4gICAgICAgIGFjdGlvbnNbQ2hvaWNlVHlwZS5hY3QzQWN0aW9uMlJ1bl0gPSBBbmltYXRpb25zLnJ1bjtcbiAgICAgICAgYWN0aW9uc1tDaG9pY2VUeXBlLmFjdDNBY3Rpb24yTGVhcGZyb2ddID0gQW5pbWF0aW9ucy5qdW1wO1xuICAgICAgICBhY3Rpb25zW0Nob2ljZVR5cGUuYWN0M0FjdGlvbjJTaGFrZV0gPSBBbmltYXRpb25zLnNoYWtlO1xuXG4gICAgICAgIGNvbnN0IGxvb3AgPSB7fTtcbiAgICAgICAgbG9vcFtDaG9pY2VUeXBlLmFjdDNBY3Rpb24yUnVuXSA9IHRydWU7XG4gICAgICAgIGxvb3BbQ2hvaWNlVHlwZS5hY3QzQWN0aW9uMkxlYXBmcm9nXSA9IHRydWU7XG4gICAgICAgIGxvb3BbQ2hvaWNlVHlwZS5hY3QzQWN0aW9uMlNoYWtlXSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fcmVhY3Rpb25BY3Rpb24gPSBhY3Rpb25zW2Nob2ljZUlkXTtcbiAgICAgICAgdGhpcy5fcmVhY3Rpb25Mb29wQWN0aW9uID0gbG9vcFtjaG9pY2VJZF07XG4gICAgfVxuXG4gICAgcGxheURlZmF1bHRBY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3NwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCB0aGlzLl9kZWZhdWx0QWN0aW9uLCB0aGlzLl9kZWZhdWx0TG9vcEFjdGlvbik7XG4gICAgfVxuXG4gICAgZ2V0RGVmYXVsdEFjdGlvbigpOmZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5fc3BpbmUsIHRoaXMuX2RlZmF1bHRBY3Rpb24pO1xuICAgIH1cblxuICAgIHBsYXlSZWFjdGlvbkFjdGlvbigpIHtcbiAgICAgICAgdGhpcy5fc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIHRoaXMuX3JlYWN0aW9uQWN0aW9uLCB0aGlzLl9yZWFjdGlvbkxvb3BBY3Rpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRhcmdldDogVmlldywgbW92ZUFjdGlvbjogKCkgPT4gdm9pZCwgZHVyYXRpb246IG51bWJlciA9IDAuNSk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBlYXNpbmcgPSBUV0VFTi5FYXNpbmcuTGluZWFyLk5vbmU7XG4gICAgICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gZnJhbWV3b3JrLlZlY3Rvci50cmFuc2Zvcm1Ubyh0YXJnZXQsIHRoaXMuY29udGFpbmVyLnBhcmVudCk7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKG1vdmVBY3Rpb24pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4odGhpcy5wb3NpdGlvbiwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHRhcmdldFBvc2l0aW9uLngsIHk6IHRhcmdldFBvc2l0aW9uLnkgfSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBlYXNpbmcsXG4gICAgICAgICAgICAgICAgZW5kT25DYW5jZWw6dHJ1ZVxuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgcHVibGljIGdldENoYXJhY3Rlck1vdmVBY3Rpb25Ub1BvaW50KHBvaW50OiBJUG9pbnQsIG1vdmVBY3Rpb246ICgpID0+IHZvaWQsIGR1cmF0aW9uOiBudW1iZXIgPSAwLjUpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3QgZWFzaW5nID0gVFdFRU4uRWFzaW5nLkxpbmVhci5Ob25lO1xuXG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKG1vdmVBY3Rpb24pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4odGhpcy5wb3NpdGlvbiwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHBvaW50LngsIHk6IHBvaW50LnkgfSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBlYXNpbmcsXG4gICAgICAgICAgICAgICAgZW5kT25DYW5jZWw6IHRydWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKVxuICAgIH1cblxuICAgIC8vIENPU1RVTUVTXG5cbiAgICBwcm90ZWN0ZWQgYXR0YWNoQ29zdHVtZVBhcnQoY29zdHVtZVBhcnQ6IHN0cmluZywgYXR0YWNobWVudD86IHN0cmluZykge1xuICAgICAgICBjb25zdCBjb3N0dW1lRm9yQ2hhcmFjdGVyID0gY29zdHVtZVBhcnQgKyBcIi1cIiArIHRoaXMuY2hhcmFjdGVyVHlwZTtcbiAgICAgICAgY29uc3QgYXR0YWNobWVudE5hbWUgPSBhdHRhY2htZW50IHx8IGNvc3R1bWVQYXJ0O1xuICAgICAgICB0aGlzLnNldEF0dGFjaG1lbnQoY29zdHVtZUZvckNoYXJhY3RlciwgYXR0YWNobWVudE5hbWUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRBdHRhY2htZW50KGNvc3R1bWVGb3JDaGFyYWN0ZXI6IHN0cmluZywgYXR0YWNobWVudE5hbWU6IHN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fc3BpbmUuc2tlbGV0b24uc2V0QXR0YWNobWVudChjb3N0dW1lRm9yQ2hhcmFjdGVyLCBhdHRhY2htZW50TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCByZW1vdmVBdHRhY2htZW50KGNvc3R1bWVQYXJ0OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgY29zdHVtZUZvckNoYXJhY3RlciA9IGNvc3R1bWVQYXJ0ICsgXCItXCIgKyB0aGlzLmNoYXJhY3RlclR5cGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9zcGluZS5za2VsZXRvbi5zZXRBdHRhY2htZW50KGNvc3R1bWVGb3JDaGFyYWN0ZXIsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkQ29zdHVtZShjb3N0dW1lOiBDb3N0dW1lcykge1xuICAgICAgICBjb25zdCBjb3N0dW1lUGFydHMgPSBjb3N0dW1lcy5nZXQoY29zdHVtZSk7XG4gICAgICAgIGNvc3R1bWVQYXJ0cy5mb3JFYWNoKGNvc3R1bWVQYXJ0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoQ29zdHVtZVBhcnQoY29zdHVtZVBhcnQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QWRkQ29zdHVtZUFjdGlvbihjb3N0dW1lOiBDb3N0dW1lcyk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuYWRkQ29zdHVtZShjb3N0dW1lKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUhpZGVBbmRSaXNlQWN0aW9uKGFjdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvc3R1bWVBY3Rpb24oY29zdHVtZTogQ29zdHVtZXMpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldENvc3R1bWUoY29zdHVtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVIaWRlQW5kUmlzZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgc2V0Q29zdHVtZShjb3N0dW1lOiBDb3N0dW1lcykge1xuICAgICAgICB0aGlzLnJlbW92ZUNvc3R1bWUoKTtcbiAgICAgICAgdGhpcy5fY29zdHVtZSA9IGNvc3R1bWU7XG4gICAgICAgIGNvbnN0IGNvc3R1bWVQYXJ0cyA9IGNvc3R1bWVzLmdldCh0aGlzLl9jb3N0dW1lKTtcbiAgICAgICAgY29zdHVtZVBhcnRzLmZvckVhY2goY29zdHVtZVBhcnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hDb3N0dW1lUGFydChjb3N0dW1lUGFydCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBoaWRlU0ZYOiBzdHJpbmcgPSBcImNoYXJhY3Rlci1vZmYubXAzXCI7XG4gICAgc3RhdGljIHNob3dTRlg6IHN0cmluZyA9IFwiY2hhcmFjdGVyLW9mZi5tcDNcIjtcblxuICAgIHByb3RlY3RlZCBjcmVhdGVIaWRlQW5kUmlzZUFjdGlvbihtaWRkbGVBY3Rpb246IGZyYW1ld29yay5BY3Rpb24sIHNvdW5kQ2hhbmVsOiBTb3VuZENoYW5uZWwgPSBTb3VuZENoYW5uZWwuRzIpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBuZXcgU0ZYQWN0aW9uKENoYXJhY3Rlci5oaWRlU0ZYLCBzb3VuZENoYW5lbCwgZmFsc2UsIHRoaXMuZGlTZXJ2aWNlKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBtaWRkbGVBY3Rpb24sXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTaG93QW5kUmlzZVVwQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgbmV3IFNGWEFjdGlvbihDaGFyYWN0ZXIuaGlkZVNGWCwgc291bmRDaGFuZWwsIGZhbHNlLCB0aGlzLmRpU2VydmljZSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnBsYXlJZGxlKCkpXG4gICAgICAgIF0pXG4gICAgfVxuXG5cbiAgICAvLyBESVJFQ1RJT05cblxuICAgIHNldERpcmVjdGlvbihkaXJlY3Rpb246IERpcmVjdGlvbil7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnNjYWxlLnggPSBkaXJlY3Rpb247XG4gICAgfVxuICAgIFxuICAgIGdldCBkaXJlY3Rpb24oKTogRGlyZWN0aW9ue1xuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuc2NhbGUueDtcbiAgICB9XG5cbiAgICBmbGlwWEF4aXMoKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2NhbGUueCA9IC10aGlzLmNvbnRhaW5lci5zY2FsZS54O1xuICAgIH1cblxuICAgIC8vIEZBRElOR1xuXG4gICAgcHVibGljIGdldEZhZGVJbkFjdGlvbihmaW5hbEFscGhhOiBudW1iZXIgPSAwLjYpIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlR3ZWVuKHRoaXMuY29udGFpbmVyLCB7XG4gICAgICAgICAgICBmcm9tOiB7IGFscGhhOiAwIH0sIHRvOiB7IGFscGhhOiBmaW5hbEFscGhhIH0sXG4gICAgICAgICAgICBkdXJhdGlvbjogMVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0RmFkZU91dEFjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlR3ZWVuKHRoaXMuY29udGFpbmVyLCB7XG4gICAgICAgICAgICB0bzogeyBhbHBoYTogMCB9LFxuICAgICAgICAgICAgZHVyYXRpb246IDFcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvL1NIQURPV1xuXG4gICAgcHJvdGVjdGVkIHNldFNoYWRvdygpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyID0gbmV3IFNoYWRvd1NoYWRlcihuZXcgUElYSS5Qb2ludCgwLjAyLCAxLjApKTtcbiAgICAgICAgdGhpcy5fc3BpbmUuZmlsdGVycyA9IFtmaWx0ZXJdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVTaGFkb3dQb3NpdGlvbigpIHtcbiAgICAgICAgLy8gdGFrZSBncm91bmQgWSBpbiBzY3JlZW4gY29vcmRzIHRvIHVuaWZvcm1zXG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuX3NwaW5lLmZpbHRlcnMgPyB0aGlzLl9zcGluZS5maWx0ZXJzWzBdIDogbnVsbDtcbiAgICAgICAgaWYgKCFmaWx0ZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIGZpbHRlci51bmlmb3Jtcy5mbG9vclkgPSB0aGlzLmNvbnRhaW5lci50b0dsb2JhbChuZXcgUElYSS5Qb2ludCgwLCAwKSkueTtcblxuICAgICAgICBjb25zdCBmYWN0b3IgPSB0aGlzLnggPCAwID8gLTEgOiAxO1xuICAgICAgICBmaWx0ZXIudW5pZm9ybXMuZmFjdG9yID0gZmFjdG9yO1xuICAgIH1cbn1cbiIsImltcG9ydCBNZWRpYXRvciBmcm9tIFwiLi9NZWRpYXRvclwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi9WaWV3XCI7XG5pbXBvcnQgQWN0aW9uTWFuYWdlckRlbGVnYXRlIGZyb20gXCIuLi9BY3Rpb25NYW5hZ2VyRGVsZWdhdGVcIjtcbmltcG9ydCBOYXZpZ2F0aW9uU2VydmljZSBmcm9tIFwiLi4vc2VydmljZXMvTmF2aWdhdGlvblNlcnZpY2VcIjtcbmltcG9ydCBTb3VuZFNlcnZpY2UsIHsgU291bmRDaGFubmVsIH0gZnJvbSBcIi4uL3NlcnZpY2VzL1NvdW5kU2VydmljZVwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlTmFtZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9hcHBsaWNhdGlvbi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBTY2VuZU1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3I8Vmlldz4gaW1wbGVtZW50cyBJbnRlcmFjdGlvbkhhbmRsZXIsIEFjdGlvbk1hbmFnZXJEZWxlZ2F0ZSB7XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJhY3RhYmxlczogUElYSS5Db250YWluZXJbXSA9IFtdO1xuXG4gICAgcHJvdGVjdGVkIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgc291bmRTZXJ2aWNlOiBTb3VuZFNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGRpU2VydmljZTogRElTZXJ2aWNlO1xuXG4gICAgcHJvdGVjdGVkIHNxdWFrUGFkQnV0dG9uOiBmcmFtZXdvcmsuQnV0dG9uVmlldztcbiAgICBwcm90ZWN0ZWQgbWFudWFsU3BpbmVzOiBmcmFtZXdvcmsuU3BpbmVWaWV3W10gPSBbXTtcblxuICAgIHN0YXRpYyBQcmVzc2VkTGlzdGVuZXJLZXk6IHN0cmluZyA9ICdzZXRCdXR0b25QcmVzc2VkTGlzdGVuZXInO1xuICAgIHN0YXRpYyBIb3Zlckxpc3RlbmVyS2V5OiBzdHJpbmcgPSAnc2V0QnV0dG9uSG92ZXJMaXN0ZW5lcic7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHpTb3J0T2JqOiBmcmFtZXdvcmsuQ29udGFpbmVyVmlldztcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGhvdmVyU0ZYc2NyaXB0S2V5OiBzdHJpbmcgPSAnaG92ZXJTRlhzY3JpcHRLZXknO1xuXG4gICAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nID0gXCJzY2VuZU1lZGlhdG9yXCI7XG4gICAgcHVibGljIHNldCBuYW1lKCB2YWx1ZTogc3RyaW5nKXtcbiAgICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKHZpZXcpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5kaVNlcnZpY2UgPSBkaVNlcnZpY2U7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnpTb3J0T2JqID0gdGhpcy52aWV3LmdldENoaWxkQnlOYW1lKFwiWnNvcnRpbmdcIikgYXMgZnJhbWV3b3JrLkNvbnRhaW5lclZpZXc7XG4gICAgICAgIHRoaXMuaW5pdGlhbGlzZVNlcnZpY2VzKCk7XG4gICAgfVxuXG4gICAgLyoqIEluaXRpYWxpc2UgaGVyZSB0aGUgc2VydmljZXMgeW91J2xsIG5lZWQgaW4geW91ciBzY2VuZSBtZWRpYXRvci4gaWU6XG4gICAgICogICAgdGhpcy5zb3VuZFNlcnZpY2UgPSB0aGlzLmRpU2VydmljZS5nZXQoU2VydmljZU5hbWUuU291bmRTZXJ2aWNlKTtcbiAgICAgKiAgIFNlcnZpY2VOYW1lIGlzIGp1c3QgYW4gZXhlbXBsZSwgYnV0IGl0IGNhbiBiZSBnb29kIHRvIGRlY2xhcmUgYW4gZW51bSB0byBzdG9yZSB0aGUgbGlzdCBvZiBzZXJ2aWNlcyB0aGF0IGV4aXN0LlxuICAgICoqL1xuICAgIHByb3RlY3RlZCBpbml0aWFsaXNlU2VydmljZXMoKTogdm9pZHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZSA9IHRoaXMuZGlTZXJ2aWNlLmdldChTZXJ2aWNlTmFtZS5OYXZpZ2F0aW9uU2VydmljZSk7XG4gICAgICAgIHRoaXMuc291bmRTZXJ2aWNlID0gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLlNvdW5kU2VydmljZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQoKSB7XG4gICAgICAgIHRoaXMuc291bmRTZXJ2aWNlLnN0b3BTb3VuZChTb3VuZENoYW5uZWwuQUxMKTsgLy8gY2xlYW51cCBhbnkgc291bmRzIGZyb20gcHJldmlvdXMgc2NlbmVcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlKGZyYW1lVGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShmcmFtZVRpbWUpO1xuXG4gICAgICAgIGlmICh0aGlzLnpTb3J0T2JqKSB7XG4gICAgICAgICAgICB0aGlzLnpTb3J0T2JqLnJlZnJlc2hPcmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYW51YWxTcGluZXMuZm9yRWFjaChzID0+IHMudXBkYXRlKGZyYW1lVGltZSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIoYnV0dG9uVGFyZ2V0OiBhbnksIGFjdGlvbjogKCkgPT4gdm9pZCwgc3RvcFByb3BhZ2F0aW9uOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXJOb0hvdmVyKGJ1dHRvblRhcmdldCwgYWN0aW9uLCBzdG9wUHJvcGFnYXRpb24pO1xuXG4gICAgICAgIHRoaXMuc2V0VW5pdmVyc2FsSG92ZXJTRlgoYnV0dG9uVGFyZ2V0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyTm9Ib3ZlcihidXR0b25UYXJnZXQ6IGFueSwgYWN0aW9uOiAoKSA9PiB2b2lkLCBzdG9wUHJvcGFnYXRpb246IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBzY3JpcHQgPSBuZXcgZnJhbWV3b3JrLkNsaWNrU2NyaXB0KHtcbiAgICAgICAgICAgIHZpZXc6IGJ1dHRvblRhcmdldCxcbiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogc3RvcFByb3BhZ2F0aW9uLFxuICAgICAgICAgICAgY2xpY2tTdGFydENhbGxiYWNrOiAoZXZlbnQsIHZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGVPdGhlckJ1dHRvbnModmlldyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpY2tFbmRDYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVBbGxCdXR0b25zKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2UucGxheVVJU0ZYKHRoaXMuZ2V0Q2xpY2tTRlgoKSwgU291bmRDaGFubmVsLkcxKTtcbiAgICAgICAgICAgICAgICBhY3Rpb24oKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGlja0VuZE91dHNpZGVDYWxsYmFjazogdGhpcy5hY3RpdmF0ZUFsbEJ1dHRvbnMuYmluZCh0aGlzKSxcbiAgICAgICAgfSlcbiAgICAgICAgYnV0dG9uVGFyZ2V0W1NjZW5lTWVkaWF0b3IuUHJlc3NlZExpc3RlbmVyS2V5XSA9IHNjcmlwdDtcbiAgICAgICAgdGhpcy5zY3JpcHRzLmFkZFNjcmlwdChzY3JpcHQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRCdXR0b25QcmVzc2VkTGlzdGVuZXJOb0hvdmVyTm9Tb3VuZChidXR0b25UYXJnZXQ6IGFueSwgYWN0aW9uOiAoKSA9PiB2b2lkLCBzdG9wUHJvcGFnYXRpb246IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBzY3JpcHQgPSBuZXcgZnJhbWV3b3JrLkNsaWNrU2NyaXB0KHtcbiAgICAgICAgICAgIHZpZXc6IGJ1dHRvblRhcmdldCxcbiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogc3RvcFByb3BhZ2F0aW9uLFxuICAgICAgICAgICAgY2xpY2tTdGFydENhbGxiYWNrOiAoZXZlbnQsIHZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGVPdGhlckJ1dHRvbnModmlldyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpY2tFbmRDYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVBbGxCdXR0b25zKCk7XG4gICAgICAgICAgICAgICAgYWN0aW9uKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpY2tFbmRPdXRzaWRlQ2FsbGJhY2s6IHRoaXMuYWN0aXZhdGVBbGxCdXR0b25zLmJpbmQodGhpcyksXG4gICAgICAgIH0pXG4gICAgICAgIGJ1dHRvblRhcmdldFtTY2VuZU1lZGlhdG9yLlByZXNzZWRMaXN0ZW5lcktleV0gPSBzY3JpcHQ7XG4gICAgICAgIHRoaXMuc2NyaXB0cy5hZGRTY3JpcHQoc2NyaXB0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFVuaXZlcnNhbEhvdmVyU0ZYKGJ1dHRvblRhcmdldDogYW55KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGhvdmVyU0ZYc2NyaXB0ID0gbmV3IGZyYW1ld29yay5Ib3ZlclNjcmlwdCh7XG4gICAgICAgICAgICB2aWV3OiBidXR0b25UYXJnZXQsXG4gICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgaG92ZXJTdGFydENhbGxiYWNrOiAoZXZlbnQsIHZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdW5kU2VydmljZS5wbGF5VUlTRlgodGhpcy5nZXRIb3ZlclNGWCgpLCBTb3VuZENoYW5uZWwuRzEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgYnV0dG9uVGFyZ2V0W1NjZW5lTWVkaWF0b3IuaG92ZXJTRlhzY3JpcHRLZXldID0gaG92ZXJTRlhzY3JpcHQ7XG4gICAgICAgIHRoaXMuc2NyaXB0cy5hZGRTY3JpcHQoaG92ZXJTRlhzY3JpcHQpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRIb3ZlclNGWCgpe1xuICAgICAgICByZXR1cm4gXCJzZngtaG92ZXIubXAzXCI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldENsaWNrU0ZYKCl7XG4gICAgICAgIHJldHVybiBcInNmeC1jbGljay5tcDNcIjtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlQnV0dG9uUHJlc3NlZExpc3RlbmVyKGJ1dHRvblRhcmdldDogYW55KSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGJ1dHRvblRhcmdldFtTY2VuZU1lZGlhdG9yLlByZXNzZWRMaXN0ZW5lcktleV07XG4gICAgICAgIGlmIChzY3JpcHQpIHtcbiAgICAgICAgICAgIHNjcmlwdC5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zY3JpcHRzLnJlbW92ZVNjcmlwdChzY3JpcHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW1vdmVVbml2ZXJzYWxIb3ZlclNGWChidXR0b25UYXJnZXQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlVW5pdmVyc2FsSG92ZXJTRlgoYnV0dG9uVGFyZ2V0OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaG92ZXJTRlhzY3JpcHQgPSBidXR0b25UYXJnZXRbU2NlbmVNZWRpYXRvci5ob3ZlclNGWHNjcmlwdEtleV07XG4gICAgICAgIGlmIChob3ZlclNGWHNjcmlwdCkge1xuICAgICAgICAgICAgaG92ZXJTRlhzY3JpcHQuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2NyaXB0cy5yZW1vdmVTY3JpcHQoaG92ZXJTRlhzY3JpcHQpOyAvLyBUT0RPIGFjdHVhbGx5IGZpeCB0aGlzIGJ1Z1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWFjdGl2YXRlT3RoZXJCdXR0b25zKGluQnV0dG9uOiBhbnkpIHtcbiAgICAgICAgdGhpcy5zZXRDbGlja2FibGUoaW5CdXR0b24sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWN0aXZhdGVBbGxCdXR0b25zKCkge1xuICAgICAgICB0aGlzLnNldENsaWNrYWJsZShudWxsLCB0cnVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVhY3RpdmF0ZUFsbEJ1dHRvbnMoKSB7XG4gICAgICAgIHRoaXMuc2V0Q2xpY2thYmxlKG51bGwsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldENsaWNrYWJsZShpbkJ1dHRvbjogZnJhbWV3b3JrLkJ1dHRvblZpZXcsIGNsaWNrYWJsZTogYm9vbGVhbikge1xuICAgICAgICBpZiAoIXRoaXMuc2NyaXB0cykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NyaXB0cy5zY3JpcHRzLmZvckVhY2goKHNjcmlwdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNjcmlwdCBpbnN0YW5jZW9mIGZyYW1ld29yay5DbGlja1NjcmlwdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmlwdFsndmlldyddO1xuICAgICAgICAgICAgICAgIGlmIChidXR0b24gIT0gaW5CdXR0b24pIHtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0LmlzQ2xpY2thYmxlID0gY2xpY2thYmxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldEJ1dHRvbkhvdmVyTGlzdGVuZXIoYnV0dG9uVGFyZ2V0OiBhbnksIG9uSG92ZXJTdGFydDogKCkgPT4gdm9pZCwgb25Ib3ZlclN0b3A6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gbmV3IGZyYW1ld29yay5Ib3ZlclNjcmlwdCh7XG4gICAgICAgICAgICB2aWV3OiBidXR0b25UYXJnZXQsXG4gICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgaG92ZXJTdGFydENhbGxiYWNrOiAoZXZlbnQsIHZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBvbkhvdmVyU3RhcnQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBob3ZlckVuZENhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgb25Ib3ZlclN0b3AoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICAgIGJ1dHRvblRhcmdldFtTY2VuZU1lZGlhdG9yLkhvdmVyTGlzdGVuZXJLZXldID0gc2NyaXB0O1xuICAgICAgICB0aGlzLnNjcmlwdHMuYWRkU2NyaXB0KHNjcmlwdCk7XG5cbiAgICAgICAgdGhpcy5zZXRVbml2ZXJzYWxIb3ZlclNGWChidXR0b25UYXJnZXQpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVCdXR0b25Ib3Zlckxpc3RlbmVyKGJ1dHRvblRhcmdldDogYW55KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGJ1dHRvblRhcmdldFtTY2VuZU1lZGlhdG9yLkhvdmVyTGlzdGVuZXJLZXldO1xuICAgICAgICBpZiAoc2NyaXB0KSB7XG4gICAgICAgICAgICBzY3JpcHQuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2NyaXB0cy5yZW1vdmVTY3JpcHQoc2NyaXB0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVtb3ZlVW5pdmVyc2FsSG92ZXJTRlgoYnV0dG9uVGFyZ2V0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVpbml0KCkge1xuICAgICAgICB0aGlzLnNvdW5kU2VydmljZS5zdG9wVm8oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkQ2hpbGRBc1BvcFVwKGNoaWxkOiBNZWRpYXRvcjxWaWV3Pik6dm9pZHsgICAgICAgIFxuICAgICAgICBjb25zdCBmcmFtZSA9IGZyYW1ld29yay5Db250YWluZXJWaWV3LmdldENoaWxkQnlOYW1lUmVjdXJzaXZlKHRoaXMudmlldywgXCJNYWluIENhbWVyYVwiKTtcbiAgICAgICAgaWYgKGZyYW1lKXtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy52aWV3LmdldENoaWxkSW5kZXgoZnJhbWUpO1xuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZEF0KGNoaWxkLCB0aGlzLnZpZXcsIHRoaXMuY2hpbGRyZW4ubGVuZ3RoLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJhY3Rpb25IYW5kbGVyIHtcbiAgICBzY3JpcHRzOiBmcmFtZXdvcmsuQ29tcG9zaXRlU2NyaXB0O1xuXG4gICAgc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKGJ1dHRvblRhcmdldDogYW55LCBhY3Rpb246ICgpID0+IHZvaWQsIHN0b3BQcm9wYWdhdGlvbj86IGJvb2xlYW4sIHNvdW5kTmFtZT86IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVtb3ZlQnV0dG9uUHJlc3NlZExpc3RlbmVyKGJ1dHRvblRhcmdldDogYW55KTogdm9pZDtcbiAgICBzZXRCdXR0b25Ib3Zlckxpc3RlbmVyKGJ1dHRvblRhcmdldDogYW55LCBvbkhvdmVyU3RhcnQ6ICgpID0+IHZvaWQsIG9uSG92ZXJTdG9wOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICByZW1vdmVCdXR0b25Ib3Zlckxpc3RlbmVyKGJ1dHRvblRhcmdldDogYW55KTogdm9pZDtcbn1cbiIsIi8qKlxuICogRnJvbSBodHRwczovL3BpeGlqcy5pby9leGFtcGxlcy8jL2ZpbHRlcnMtYWR2YW5jZWQvcGl4aWUtc2hhZG93LWZpbHRlci5qc1xuICogYWRkZWRcbiAqIHVuaWZvcm0gZmxvYXQgZmFjdG9yO1xuICogdW5pZm9ybSBmbG9hdCBhbHBoYTtcbiAqIHVuaWZvcm0gZmxvYXQgeE9mZnNldDtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhZG93U2hhZGVyIGV4dGVuZHMgUElYSS5GaWx0ZXJ7XG5cbiAgICBjb25zdHJ1Y3RvcihzaGFkb3dEaXJlY3Rpb246IFBJWEkuUG9pbnQgPSBuZXcgUElYSS5Qb2ludCgwLjEsIDEuMCksIHhPZmZzZXQ6IG51bWJlciA9IC0xNSl7XG4gICAgICAgIHN1cGVyKG15VmVydGV4LCBteUZyYWdtZW50KTtcblxuICAgICAgICAvLyBmaXJzdCBpcyB0aGUgaG9yaXpvbnRhbCBzaGlmdCwgcG9zaXRpdmUgaXMgdG8gdGhlIHJpZ2h0XG4gICAgICAgIC8vIHNlY29uZCBpcyB0aGUgc2FtZSBhcyBzY2FsZVlcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5zaGFkb3dEaXJlY3Rpb24gPSBbc2hhZG93RGlyZWN0aW9uLngsIHNoYWRvd0RpcmVjdGlvbi55XTtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5mbG9vclkgPSAwLjA7XG4gICAgICAgIC8vIGhvdyBiaWcgaXMgbWF4IHNoYWRvdyBzaGlmdCB0byB0aGUgc2lkZT9cbiAgICAgICAgLy8gdHJ5IHRvIHN3aXRjaCB0aGF0IG9mZiA7KVxuICAgICAgICB0aGlzLnBhZGRpbmcgPSAxMDA7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuYWxwaGEgPSAwLjU7XG4gICAgICAgIHRoaXMudW5pZm9ybXMueE9mZnNldCA9IHhPZmZzZXQ7XG5cbiAgICB9XG59XG5cbmNvbnN0IG15VmVydGV4ID0gYFxuYXR0cmlidXRlIHZlYzIgYVZlcnRleFBvc2l0aW9uO1xuYXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDtcblxudW5pZm9ybSBtYXQzIHByb2plY3Rpb25NYXRyaXg7XG5cbnZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xuXG52b2lkIG1haW4odm9pZCkge1xuICAgIGdsX1Bvc2l0aW9uID0gdmVjNCgocHJvamVjdGlvbk1hdHJpeCAqIHZlYzMoYVZlcnRleFBvc2l0aW9uLCAxLjApKS54eSwgMC4wLCAxLjApO1xuICAgIHZUZXh0dXJlQ29vcmQgPSBhVGV4dHVyZUNvb3JkO1xufVxuYDtcblxuY29uc3QgbXlGcmFnbWVudCA9IGBcbnZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xuXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcbnVuaWZvcm0gdmVjNCBpbnB1dFNpemU7XG51bmlmb3JtIHZlYzQgb3V0cHV0RnJhbWU7XG51bmlmb3JtIHZlYzIgc2hhZG93RGlyZWN0aW9uO1xudW5pZm9ybSBmbG9hdCBmbG9vclk7XG51bmlmb3JtIGZsb2F0IGZhY3RvcjtcbnVuaWZvcm0gZmxvYXQgYWxwaGE7XG51bmlmb3JtIGZsb2F0IHhPZmZzZXQ7XG5cbnZvaWQgbWFpbih2b2lkKSB7XG4gICAgLy8xLiBnZXQgdGhlIHNjcmVlbiBjb29yZGluYXRlXG4gICAgdmVjMiBzY3JlZW5Db29yZCA9IHZUZXh0dXJlQ29vcmQgKiBpbnB1dFNpemUueHkgKyBvdXRwdXRGcmFtZS54eTtcbiAgICAvLzIuIGNhbGN1bGF0ZSBZIHNoaWZ0IG9mIG91ciBkaW1lbnNpb24gdmVjdG9yXG4gICAgdmVjMiBzaGFkb3c7XG4gICAgLy9zaGFkb3cgY29vcmRpbmF0ZSBzeXN0ZW0gaXMgYSBiaXQgc2tld2VkLCBidXQgaXQgaGFzIHRvIGJlIHRoZSBzYW1lIGZvciBzY3JlZW5Db29yZC55ID0gZmxvb3JZXG4gICAgZmxvYXQgcGFyYW1ZID0gKHNjcmVlbkNvb3JkLnkgLSBmbG9vclkpIC8gc2hhZG93RGlyZWN0aW9uLnk7XG4gICAgc2hhZG93LnkgPSAgcGFyYW1ZICsgZmxvb3JZO1xuXG4gICAgLy90byBvZmZzZXQgdGhlIHNoYWRvd1xuICAgIHNoYWRvdy54ID0gKHhPZmZzZXQgKiBmYWN0b3IpICsgc2NyZWVuQ29vcmQueCArIHBhcmFtWSAqIHNoYWRvd0RpcmVjdGlvbi54ICogZmFjdG9yO1xuICAgIHZlYzIgYm9keUZpbHRlckNvb3JkID0gKHNoYWRvdyAtIG91dHB1dEZyYW1lLnh5KSAqIGlucHV0U2l6ZS56dzsgLy8gc2FtZSBhcyAvIGlucHV0U2l6ZS54eVxuXG4gICAgdmVjNCBvcmlnaW5hbENvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyLCB2VGV4dHVyZUNvb3JkKTtcbiAgICB2ZWM0IHNoYWRvd0NvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyLCBib2R5RmlsdGVyQ29vcmQpO1xuICAgIHNoYWRvd0NvbG9yLnJnYiA9IHZlYzMoMC4wKTtcbiAgICBzaGFkb3dDb2xvci5hICo9IGFscGhhO1xuXG4gICAgLy8gbm9ybWFsIGJsZW5kIG1vZGUgY29lZmZpY2llbnRzICgxLCAxLXNyY19hbHBoYSlcbiAgICAvLyBzaGFkb3cgaXMgZGVzdGluYXRpb24gKGJhY2tkcm9wKSwgb3JpZ2luYWwgaXMgc291cmNlXG4gICAgZ2xfRnJhZ0NvbG9yID0gb3JpZ2luYWxDb2xvciArIHNoYWRvd0NvbG9yICogKDEuMCAtIG9yaWdpbmFsQ29sb3IuYSk7XG59XG5gOyIsIlxuLyoqXG4gKiBJbnRlcmZhY2UgdG8gYWNjZXNzIFR3aW5lIGpzb24gZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JpcHRNb2RlbHtcblxuICAgIHB1YmxpYyBnZXQgcGFzc2FnZXMoKTogUGFzc2FnZVtde1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JpcHQucGFzc2FnZXM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBzY3JpcHQ6IGFueSl7XG4gICAgfVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIFBhc3NhZ2UgaW4gdHdpbmVcbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhc3NhZ2Uge1xuICAgIHBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgbGlua3M6IExpbmtbXTtcbiAgICB0YWdzOiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBUd2luZSBMaW5rXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGluayB7XG4gICAgcGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGxpbms6IHN0cmluZztcbn1cbiIsImltcG9ydCBTY2VuZU1lZGlhdG9yIGZyb20gXCIuLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9tZWRpYXRvcnMvU2NlbmVNZWRpYXRvclwiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCB7IFNjZW5lTmFtZSB9IGZyb20gXCIuLi9TY2VuZU5hbWVcIjtcbmltcG9ydCBTcGxhc2hTY3JlZW5Qb3BPdmVyLCB7IFNwbGFzaFNjcmVlblBvcE92ZXJEZWxlZ2F0ZSB9IGZyb20gXCIuLi9zdGFnZS9wb3BvdmVycy9TcGxhc2hTY3JlZW5Qb3BPdmVyXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCB7IFNlcnZpY2VOYW1lLCBEYXRhTmFtZSB9IGZyb20gXCIuLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IExvYWRpbmdTZXJ2aWNlIGZyb20gXCIuLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9Mb2FkaW5nU2VydmljZVwiO1xuaW1wb3J0IFNjcmlwdE1vZGVsIGZyb20gXCIuLi90d2luZS9Ud2luZVNjcmlwdFwiO1xuaW1wb3J0IEFydGh1ckJ1aWxkSW5mb1NlcnZpY2UgZnJvbSBcIi4uL1NlcnZpY2VzL0FydGh1ckJ1aWxkSW5mb1NlcnZpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BsYXNoTWVkaWF0b3IgZXh0ZW5kcyBTY2VuZU1lZGlhdG9yIGltcGxlbWVudHMgU3BsYXNoU2NyZWVuUG9wT3ZlckRlbGVnYXRlIHtcbiAgICBwcml2YXRlIHBvcG92ZXI6IFNwbGFzaFNjcmVlblBvcE92ZXI7XG4gICAgcHJvdGVjdGVkIGJsb2NraW5nQWN0aW9uOiBmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9uO1xuXG4gICAgcHJpdmF0ZSBzdG9yeTogU3RvcmllcztcblxuICAgIGluaXQoKSB7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAgY29uc3QgYnVpbGRJbmZvU2VydmljZSA9IHRoaXMuZGlTZXJ2aWNlLmdldChTZXJ2aWNlTmFtZS5CdWlsZEluZm9TZXJ2aWNlKSBhcyBBcnRodXJCdWlsZEluZm9TZXJ2aWNlO1xuICAgICAgICB0aGlzLnN0b3J5ID0gYnVpbGRJbmZvU2VydmljZS5zdG9yeUZsYXZvcjtcbiAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2UudW5sb2NrQXVkaW8oKTtcbiAgICAgICAgdGhpcy5jcmVhdGVTcGxhc2hTY3JlZW4oKTtcblxuICAgICAgICB0aGlzLnNob3dVSSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlU3BsYXNoU2NyZWVuKCkge1xuICAgICAgICBjb25zdCBwb3BPdmVyVmlldyA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwidWktcGFuZWxcIikgYXMgVmlldztcbiAgICAgICAgcG9wT3ZlclZpZXcuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnBvcG92ZXIgPSBuZXcgU3BsYXNoU2NyZWVuUG9wT3Zlcihwb3BPdmVyVmlldywgdGhpcy5kaVNlcnZpY2UsIHRoaXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2hvd1VJKCkge1xuICAgICAgICB0aGlzLnBvcG92ZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLmFkZENoaWxkTWVkaWF0b3JPbmx5KHRoaXMucG9wb3Zlcik7XG4gICAgICAgIHRoaXMucG9wb3Zlci5zaG93KCgpID0+IHRoaXMuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMucG9wb3Zlci5wbGF5QnV0dG9uLCAoKSA9PiB0aGlzLm9uU3RhcnRQcmVzc2VkKCkpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uU3RhcnRQcmVzc2VkKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUJ1dHRvblByZXNzZWRMaXN0ZW5lcih0aGlzLnBvcG92ZXIucGxheUJ1dHRvbik7XG4gICAgICAgIHRoaXMucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgIHRoaXMucG9wb3Zlci5nZXRIaWRlU3RhcnRCdXR0b24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgxLjUpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5yZXRyZWl2ZVNjcmlwdCgpKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmV0cmVpdmVTY3JpcHQoKSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdEtleSA9IFwic2NyaXB0XCI7XG4gICAgICAgIGNvbnN0IHNjcmlwdFBhdGggPSBcImFzc2V0cy9jb25maWcvXCIgKyB0aGlzLmdldFN0b3J5VHdpbmVGaWxlTmFtZSgpO1xuICAgICAgICBjb25zdCBsb2FkaW5nU2VydmljZSA9IHRoaXMuZGlTZXJ2aWNlLmdldChTZXJ2aWNlTmFtZS5Mb2FkaW5nU2VydmljZSkgYXMgTG9hZGluZ1NlcnZpY2U7XG4gICAgICAgIGNvbnN0IHNhdmVkSW5EYXRhID0gbG9hZGluZ1NlcnZpY2UubG9hZGVyLnJlc291cmNlc1tzY3JpcHRLZXldO1xuICAgICAgICBpZiAoc2F2ZWRJbkRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IG5ldyBTY3JpcHRNb2RlbChzYXZlZEluRGF0YS5kYXRhKTtcbiAgICAgICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLnN0b3J5U2NyaXB0LCBzY3JpcHQpO1xuICAgICAgICAgICAgdGhpcy5sb2FkKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvYWRpbmdTZXJ2aWNlLmxvYWRBZGRpdGlvbmFsQXNzZXQodGhpcy5uYXZpZ2F0aW9uU2VydmljZS5jdXJyZW50U2NlbmVOYW1lLCBzY3JpcHRLZXksIHNjcmlwdFBhdGgsIChzY3JpcHREYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0ID0gbmV3IFNjcmlwdE1vZGVsKHNjcmlwdERhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLnN0b3J5U2NyaXB0LCBzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZCgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZCgpIHtcbiAgICAgICAgY29uc3Qgc2NlbmVOYW1lID0gdGhpcy5nZXRTY2VuZU5hbWUodGhpcy5zdG9yeSk7XG4gICAgICAgIGNvbnN0IG9uQXNzZXRMb2FkZWRBY3Rpb24gPSBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLnBvcG92ZXIuZ2V0SGlkZVByb2dyZXNzQWN0aW9uKCksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMucG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkTWVkaWF0b3JPbmx5KHRoaXMucG9wb3Zlcik7XG4gICAgICAgICAgICB9KSlcbiAgICAgICAgXSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLnBvcG92ZXIuZ2V0U2hvd0xvYWRpbmdBY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgzKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibG9ja2luZ0FjdGlvbiA9IHRoaXMubmF2aWdhdGlvblNlcnZpY2UuZmFkZUluU2NlbmUoc2NlbmVOYW1lLCBvbkFzc2V0TG9hZGVkQWN0aW9uLCAocHJvZ3Jlc3M6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BvdmVyLnNldFByb2dyZXNzKHByb2dyZXNzIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0U2NlbmVOYW1lKHN0b3J5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKHN0b3J5KSB7XG4gICAgICAgICAgICBjYXNlIFN0b3JpZXMubHJyaDpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2NlbmVOYW1lLkxycmhTdGFnZVxuICAgICAgICAgICAgY2FzZSBTdG9yaWVzLmdvbGRpbG9ja3M6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNjZW5lTmFtZS5Hb2xkaWxvY2tzXG4gICAgICAgICAgICBjYXNlIFN0b3JpZXMuY2luZGVyZWxsYTpcbiAgICAgICAgICAgICAgICByZXR1cm4gU2NlbmVOYW1lLkNpbmRlcmVsbGFcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0U3RvcnlUd2luZUZpbGVOYW1lKCk6IHN0cmluZ3tcblxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RvcnkpIHtcbiAgICAgICAgICAgIGNhc2UgU3Rvcmllcy5scnJoOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImxycmgtdHdpbmUuanNvblwiO1xuICAgICAgICAgICAgY2FzZSBTdG9yaWVzLmdvbGRpbG9ja3M6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZ2wtdHdpbmUuanNvblwiO1xuICAgICAgICAgICAgY2FzZSBTdG9yaWVzLmNpbmRlcmVsbGE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY2luZGVyLXR3aW5lLmpzb25cIjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL1NwbGFzaFNjcmVlblBvcE92ZXJEZWxlZ2F0ZVxuICAgIG9uTG9hZGluZ0FuaW1Db21wbGV0ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ibG9ja2luZ0FjdGlvbi5maW5pc2goKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCl7XG4gICAgICAgIHRoaXMucG9wb3Zlci5kZWluaXQoKTtcbiAgICAgICAgdGhpcy5wb3BvdmVyLmRlc3Ryb3koKTtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGVudW0gU3RvcmllcyB7XG4gICAgZ29sZGlsb2NrcyA9IFwic3RvcnktZ29sZGlsb2Nrc1wiLFxuICAgIGNpbmRlcmVsbGEgPSBcInN0b3J5LWNpbmRlcmVsbGFcIixcbiAgICBscnJoID0gXCJzdG9yeS1scnJoXCIsXG59IiwiaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgU2hhZG93ZWRTcGluZVBvcE92ZXIgZnJvbSBcIi4uL3BvcG92ZXJzL1NoYWRvd2VkU3BpbmVQb3BPdmVyXCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IEJhc2VDaGFyYWN0ZXIsIHsgQ2hhcmFjdGVyVHlwZSB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0Jhc2VDaGFyYWN0ZXJcIjtcbmltcG9ydCB7IENvc3R1bWVzIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQ29zdHVtZXNcIjtcbmltcG9ydCBTdG9yeURhdGEgZnJvbSBcIi4vU3RvcnlEYXRhXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSwgU2VydmljZU5hbWUgfSBmcm9tIFwiLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBTaGFkb3dTaGFkZXIgZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvU2hhZG93U2hhZGVyXCI7XG5pbXBvcnQgeyBDYXB0aW9uU2VydmljZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9DYXB0aW9uU2VydmljZVwiO1xuaW1wb3J0IHsgQW5hbHl0aWNzU2VydmljZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9BbmFseXRpY3NTZXJ2aWNlXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcmFjdGVyU2VsZWN0aW9uUG9wT3ZlciBleHRlbmRzIFNoYWRvd2VkU3BpbmVQb3BPdmVyIHtcblxuICAgIHByb3RlY3RlZCBfYnV0dG9uQXJ0aHVyOiBmcmFtZXdvcmsuU3BpbmVWaWV3ID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgX2J1dHRvbkJ1c3RlcjogZnJhbWV3b3JrLlNwaW5lVmlldyA9IG51bGw7XG4gICAgcHJvdGVjdGVkIF9idXR0b25NdWZmeTogZnJhbWV3b3JrLlNwaW5lVmlldyA9IG51bGw7XG4gICAgcHJvdGVjdGVkIF9idXR0b25EVzogZnJhbWV3b3JrLlNwaW5lVmlldyA9IG51bGw7XG4gICAgcHJvdGVjdGVkIF9BcnRodXI6IEJhc2VDaGFyYWN0ZXIgPSBudWxsO1xuICAgIHByb3RlY3RlZCBfQnVzdGVyOiBCYXNlQ2hhcmFjdGVyID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgX011ZmZ5OiBCYXNlQ2hhcmFjdGVyID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgX0RXOiBCYXNlQ2hhcmFjdGVyID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgY2hhcmFjdGVyTWFwOiBNYXA8Q2hhcmFjdGVyVHlwZSwgQmFzZUNoYXJhY3Rlcj4gPSBudWxsO1xuICAgIHByb3RlY3RlZCBiYWNrZ3JvdW5kQWxwaGE6IG51bWJlciA9IDA7XG5cbiAgICBwcm90ZWN0ZWQgX3JvbGVVSTogZnJhbWV3b3JrLlNwaW5lVmlldyA9IG51bGw7XG4gICAgcHJvdGVjdGVkIHBvc2l0aW9uUm9sZVVJOiBQSVhJLlBvaW50O1xuICAgIHByb3RlY3RlZCBzY2FsZVJvbGVVSTogUElYSS5Qb2ludDtcblxuICAgIHB1YmxpYyBnZXQgYnV0dG9ucygpOiBmcmFtZXdvcmsuU3BpbmVWaWV3W10ge1xuICAgICAgICByZXR1cm4gW3RoaXMuX2J1dHRvbkFydGh1ciwgdGhpcy5fYnV0dG9uQnVzdGVyLCB0aGlzLl9idXR0b25NdWZmeSwgdGhpcy5fYnV0dG9uRFddO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgc3RvcnlEYXRhKCk6IFN0b3J5RGF0YSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuU3RvcnlEYXRhKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGxlYWRSb2xlKCk6IFJvbGUge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yeURhdGEubGVhZFJvbGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzZWxlY3Rpb25EaWFsb2coKTogTWFwPFJvbGUsIENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yeURhdGEuY2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9ncztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHVpUm9sZVNlbGVjdGlvbigpOiBNYXA8Um9sZSwgQ29zdHVtZXM+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcnlEYXRhLnJvbGVVSU1hcDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNhcHRpb25TZXJ2aWNlKCk6IENhcHRpb25TZXJ2aWNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldChTZXJ2aWNlTmFtZS5DYXB0aW9uU2VydmljZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBhbmFseXRpY3NTZXJ2aWNlKCk6IEFuYWx5dGljc1NlcnZpY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkFuYWx5dGljc1NlcnZpY2UpO1xuICAgIH1cbiAgICBwcml2YXRlIGluZGV4U2VsZWN0ZWRMaW5lczogbnVtYmVyW10gPSBbMCwgMSwgMl07XG4gICAgXG4gICAgcHJpdmF0ZSBpbnRybzogQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nW10gPSBbbmV3IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyhcImNoYXItc2VsZWN0LWludHJvLm1wM1wiLCBcIldlbGNvbWUgdG8gQXJ0aHVyJ3MgUHVwcGV0IFRoZWF0ZXIsIHdoZXJlIFlPVSBjaG9vc2Ugd2hhdCBoYXBwZW5zLlwiKV1cbiAgICBwcml2YXRlIGxlYWQ6IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZ1tdID0gW25ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaGFyLXNlbGVjdC1sZWFkLm1wM1wiLCBcIkZpcnN0LCBjaG9vc2Ugd2hvJ3MgcGxheWluZyBlYWNoIHBhcnQuIFdobyBkbyB5b3Ugd2FudCB0byBwbGF5IHRoZSBsZWFkIHJvbGU/XCIpXVxuICAgIHByaXZhdGUgb3V0cm86IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZ1tdID0gW25ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaGFyLXNlbGVjdC1lbmQubXAzXCIsIFwiQW5kIG5vdywgb24gd2l0aCB0aGUgc2hvdyFcIildXG5cbiAgICBwcml2YXRlIG5hcnJhdG9yRGlhbG9nOiBNYXA8Q2hhcmFjdGVyVHlwZSwgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nPiA9IG5ldyBNYXAoW1xuICAgICAgICBbQ2hhcmFjdGVyVHlwZS5hcnRodXIsIG5ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaGFyLXNlbGVjdC1hcnRodXItbmFycmF0b3IubXAzXCIsIFwiQW5kIHRoYXQgbWVhbnMgSSBhbSB0aGUgbmFycmF0b3IuXCIpXSxcbiAgICAgICAgW0NoYXJhY3RlclR5cGUuYnVzdGVyLCBuZXcgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKFwiY2hhci1zZWxlY3QtYnVzdGVyLW5hcnJhdG9yLm1wM1wiLCBcIkFuZCB0aGF0IG1lYW5zIEJ1c3RlciBpcyB0aGUgbmFycmF0b3IuXCIpXSxcbiAgICAgICAgW0NoYXJhY3RlclR5cGUubXVmZnksIG5ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaGFyLXNlbGVjdC1tdWZmeS1uYXJyYXRvci5tcDNcIiwgXCJBbmQgdGhhdCBtZWFucyBNdWZmeSBpcyB0aGUgbmFycmF0b3IuXCIpXSxcbiAgICAgICAgW0NoYXJhY3RlclR5cGUuZHcsIG5ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaGFyLXNlbGVjdC1kdy1uYXJyYXRvci5tcDNcIiwgXCJBbmQgdGhhdCBtZWFucyBELlcuIGlzIHRoZSBuYXJyYXRvci5cIildLFxuICAgIF0pXG4gICAgcHJpdmF0ZSBsZWFkRGlhbG9nOiBNYXA8Q2hhcmFjdGVyVHlwZSwgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nPiA9IG5ldyBNYXAoW1xuICAgICAgICBbQ2hhcmFjdGVyVHlwZS5hcnRodXIsIG5ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaGFyLXNlbGVjdC1hcnRodXItc2VsZWN0ZWQubXAzXCIsIFwiSGV5LCB0aGFua3MhXCIpXSxcbiAgICAgICAgW0NoYXJhY3RlclR5cGUuYnVzdGVyLCBuZXcgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKFwiY2hhci1zZWxlY3QtYnVzdGVyLXNlbGVjdGVkLWxlYWQubXAzXCIsIFwiV2hvby1ob28hXCIpXSxcbiAgICAgICAgW0NoYXJhY3RlclR5cGUubXVmZnksIG5ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaGFyLXNlbGVjdC1tdWZmeS1zZWxlY3RlZC1sZWFkLm1wM1wiLCBcIk5hdHVyYWxseSFcIildLFxuICAgICAgICBbQ2hhcmFjdGVyVHlwZS5kdywgbmV3IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyhcImNoYXItc2VsZWN0LWR3LXNlbGVjdGVkLWxlYWQubXAzXCIsIFwiSSdtIHJlYWR5IGZvciB0aGlzIVwiKV0sXG4gICAgXSlcblxuICAgIHByaXZhdGUgc2VsZWN0ZWRMaW5lczogTWFwPENoYXJhY3RlclR5cGUsIENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZ1tdPiA9IG5ldyBNYXAoW1xuICAgICAgICBbQ2hhcmFjdGVyVHlwZS5hcnRodXIsIFtuZXcgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKFwiY2hhci1zZWxlY3QtYXJ0aHVyLXNlbGVjdGVkLm1wM1wiLCBcIkhleSwgdGhhbmtzIVwiKV1dLFxuICAgICAgICBbQ2hhcmFjdGVyVHlwZS5idXN0ZXIsIFtcbiAgICAgICAgICAgIG5ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaGFyLXNlbGVjdC1idXN0ZXItc2VsZWN0ZWQtMS5tcDNcIiwgXCJZZXMhXCIpLFxuICAgICAgICAgICAgbmV3IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyhcImNoYXItc2VsZWN0LWJ1c3Rlci1zZWxlY3RlZC0yLm1wM1wiLCBcIkNvb2whXCIpLFxuICAgICAgICAgICAgbmV3IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyhcImNoYXItc2VsZWN0LWJ1c3Rlci1zZWxlY3RlZC0zLm1wM1wiLCBcIkFsbCByaWdodCFcIiksXVxuICAgICAgICBdLFxuICAgICAgICBbQ2hhcmFjdGVyVHlwZS5tdWZmeSwgW1xuICAgICAgICAgICAgbmV3IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyhcImNoYXItc2VsZWN0LW11ZmZ5LXNlbGVjdGVkLTEubXAzXCIsIFwiWWVzIVwiKSxcbiAgICAgICAgICAgIG5ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaGFyLXNlbGVjdC1tdWZmeS1zZWxlY3RlZC0yLm1wM1wiLCBcIkNvb2whXCIpLFxuICAgICAgICAgICAgbmV3IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyhcImNoYXItc2VsZWN0LW11ZmZ5LXNlbGVjdGVkLTMubXAzXCIsIFwiQWxsIHJpZ2h0IVwiKSxdXG4gICAgICAgIF0sXG4gICAgICAgIFtDaGFyYWN0ZXJUeXBlLmR3LCBbXG4gICAgICAgICAgICBuZXcgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKFwiY2hhci1zZWxlY3QtZHctc2VsZWN0ZWQtMS5tcDNcIiwgXCJZZXMhXCIpLFxuICAgICAgICAgICAgbmV3IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyhcImNoYXItc2VsZWN0LWR3LXNlbGVjdGVkLTIubXAzXCIsIFwiQ29vbCFcIiksXG4gICAgICAgICAgICBuZXcgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKFwiY2hhci1zZWxlY3QtZHctc2VsZWN0ZWQtMy5tcDNcIiwgXCJBbGwgcmlnaHQhXCIpLF1cbiAgICAgICAgXSxcbiAgICBdKVxuXG4gICAgcHJpdmF0ZSByZXN1bHRNYXA6IE1hcDxSb2xlLCBDaGFyYWN0ZXJUeXBlPiA9IG5ldyBNYXAoKTtcbiAgICBwcml2YXRlIGNoYXJhY3RlcnNUeXBlczogQ2hhcmFjdGVyVHlwZVtdID0gW0NoYXJhY3RlclR5cGUuYXJ0aHVyLCBDaGFyYWN0ZXJUeXBlLmJ1c3RlciwgQ2hhcmFjdGVyVHlwZS5tdWZmeSwgQ2hhcmFjdGVyVHlwZS5kd107XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdmlldzogVmlldyxcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZGVsZWdhdGU6IENoYXJhY3RlclNlbGVjdGlvbkRlbGVnYXRlKSB7XG4gICAgICAgIHN1cGVyKHZpZXcsIGRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuX2J1dHRvbkFydGh1ciA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiYXJ0aHVyXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMuX2J1dHRvbkJ1c3RlciA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiYnVzdGVyXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMuX2J1dHRvbk11ZmZ5ID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJtdWZmeVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLl9idXR0b25EVyA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiZHdcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJjb250YWluZXJcIik7XG4gICAgICAgIGNvbnRhaW5lci52aXNpYmxlID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9BcnRodXIgPSBuZXcgQmFzZUNoYXJhY3RlcihDaGFyYWN0ZXJUeXBlLmFydGh1ciwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLl9BcnRodXIuc3BpbmUgPSB0aGlzLl9idXR0b25BcnRodXI7XG5cbiAgICAgICAgdGhpcy5fQnVzdGVyID0gbmV3IEJhc2VDaGFyYWN0ZXIoQ2hhcmFjdGVyVHlwZS5idXN0ZXIsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5fQnVzdGVyLnNwaW5lID0gdGhpcy5fYnV0dG9uQnVzdGVyO1xuXG4gICAgICAgIHRoaXMuX011ZmZ5ID0gbmV3IEJhc2VDaGFyYWN0ZXIoQ2hhcmFjdGVyVHlwZS5tdWZmeSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLl9NdWZmeS5zcGluZSA9IHRoaXMuX2J1dHRvbk11ZmZ5O1xuXG4gICAgICAgIHRoaXMuX0RXID0gbmV3IEJhc2VDaGFyYWN0ZXIoQ2hhcmFjdGVyVHlwZS5kdywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLl9EVy5zcGluZSA9IHRoaXMuX2J1dHRvbkRXO1xuXG4gICAgICAgIHRoaXMuY2hhcmFjdGVyTWFwID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbQ2hhcmFjdGVyVHlwZS5hcnRodXIsIHRoaXMuX0FydGh1cl0sXG4gICAgICAgICAgICBbQ2hhcmFjdGVyVHlwZS5idXN0ZXIsIHRoaXMuX0J1c3Rlcl0sXG4gICAgICAgICAgICBbQ2hhcmFjdGVyVHlwZS5tdWZmeSwgdGhpcy5fTXVmZnldLFxuICAgICAgICAgICAgW0NoYXJhY3RlclR5cGUuZHcsIHRoaXMuX0RXXSxcbiAgICAgICAgXSk7XG5cbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJNYXAuZm9yRWFjaCgodmFsdWU6IEJhc2VDaGFyYWN0ZXIpID0+IHtcbiAgICAgICAgICAgIHZhbHVlLmhpZGUoKTtcbiAgICAgICAgICAgIHZhbHVlLnJlbW92ZUNvc3R1bWUoKTtcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLl9yb2xlVUkgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcInJvbGVcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5fcm9sZVVJLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wb3NpdGlvblJvbGVVSSA9IG5ldyBQSVhJLlBvaW50KHRoaXMuX3JvbGVVSS54LCB0aGlzLl9yb2xlVUkueSk7XG4gICAgICAgIHRoaXMuc2NhbGVSb2xlVUkgPSBuZXcgUElYSS5Qb2ludCh0aGlzLl9yb2xlVUkuc2NhbGUueCwgdGhpcy5fcm9sZVVJLnNjYWxlLnkpO1xuXG4gICAgICAgIHRoaXMuYWN0aXZlYnV0dG9ucyA9IFt0cnVlLCB0cnVlLCB0cnVlLCB0cnVlXTtcblxuICAgICAgICB0aGlzLnNjcmlwdHMuYWRkU2NyaXB0cyhbdGhpcy5fQXJ0aHVyLCB0aGlzLl9CdXN0ZXIsIHRoaXMuX011ZmZ5LCB0aGlzLl9EV10pO1xuXG4gICAgICAgIHdpbmRvd1tcInBsYXlEaWFsb2dzXCJdID0gdGhpcy5wbGF5RGlhbG9ncy5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBcbiAgICBwcm90ZWN0ZWQgc2V0U2hhZG93KCkge1xuICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9IG5ldyBQSVhJLlBvaW50KDAuMDIsIDEuMCk7XG5cbiAgICAgICAgY29uc3QgZmlsdGVyID0gbmV3IFNoYWRvd1NoYWRlcihvcmllbnRhdGlvbiwgMTIpO1xuICAgICAgICBmaWx0ZXIudW5pZm9ybXMuZmFjdG9yID0gLTE7XG4gICAgICAgIHRoaXMuX3JvbGVVSS5maWx0ZXJzID0gW2ZpbHRlcl1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdXBkYXRlU2hhZG93KCkge1xuICAgICAgICAvL0RPIE5PVEhJTkdcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVtb3ZlU2hhZG93cygpIHtcbiAgICAgICAgdGhpcy5fcm9sZVVJLmZpbHRlcnMgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGxheURpYWxvZ3MoKSB7XG4gICAgICAgIHRoaXMuaW5kZXhTZWxlY3RlZExpbmVzID0gWzAsIDEsIDJdO1xuXG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSBbXVxuXG4gICAgICAgIHRoaXMuYWRkSW50cm9BY3Rpb25zKGFjdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuYWRkTGVhZEFjdGlvbnMoYWN0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5hZGRDaGFyYWN0ZXJTZWxlY3Rpb25BY3Rpb25zKGFjdGlvbnMpO1xuXG4gICAgICAgIGFjdGlvbnMucHVzaChmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZW5kRGlhbG9nKCkpKVxuXG4gICAgICAgIHRoaXMucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKGFjdGlvbnMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEludHJvQWN0aW9ucyhhY3Rpb25zOiBhbnlbXSkge1xuICAgICAgICB0aGlzLmludHJvLmZvckVhY2goKGRpYWxvZzogQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKSA9PiB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2godGhpcy5nZXRWT0NhcHRpb25BY3Rpb24oZGlhbG9nKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Vk9DYXB0aW9uQWN0aW9uKGRpYWxvZzogQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKSB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG5cbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5jYXB0aW9uU2VydmljZS5kaXNwbGF5Q2FwdGlvbihkaWFsb2cudGV4dCkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkoMC4zKSwvLyB1bmxvYWRpbmcgdGhlIHZvIGNhdXNlcyBhIGVycm9yIGluIGRlY29kaW5nLCBuZWVkIHRvIGJlIGRlbGF5ZWRcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlZPKGRpYWxvZy52byksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2FwdGlvblNlcnZpY2UuY2xlYXJDYXB0aW9ucygpKSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRMZWFkQWN0aW9ucyhhY3Rpb25zOiBhbnlbXSkge1xuICAgICAgICB0aGlzLmxlYWQuZm9yRWFjaCgoZGlhbG9nOiBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2cpID0+IHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaCh0aGlzLmdldFZPQ2FwdGlvbkFjdGlvbihkaWFsb2cpKTtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaCh0aGlzLmdldFNob3dSb2xlU2VsZWN0aW9uVUlBY3Rpb24odGhpcy5sZWFkUm9sZSkpO1xuXG4gICAgICAgICAgICBjb25zdCBibG9ja2luZ0FjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkJsb2NraW5nRnVuYygoKSA9PiB7IH0pO1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0TGlzdGVuZXJGb3JMZWFkKGJsb2NraW5nQWN0aW9uKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChibG9ja2luZ0FjdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkQ2hhcmFjdGVyU2VsZWN0aW9uQWN0aW9ucyhhY3Rpb25zOiBhbnlbXSkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkRpYWxvZy5mb3JFYWNoKChkaWFsb2c6IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZywgcm9sZTogUm9sZSkgPT4ge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHRoaXMuZ2V0U2hvd1JvbGVTZWxlY3Rpb25VSUFjdGlvbihyb2xlKSk7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2godGhpcy5nZXRWT0NhcHRpb25BY3Rpb24oZGlhbG9nKSk7XG4gICAgICAgICAgICBjb25zdCBibG9ja2luZ0FjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkJsb2NraW5nRnVuYygoKSA9PiB7IH0pO1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0TGlzdGVuZXJGb3JSb2xlKHJvbGUsIGJsb2NraW5nQWN0aW9uKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChibG9ja2luZ0FjdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0TGlzdGVuZXJGb3JSb2xlKHJvbGU6IFJvbGUsIGJsb2NrZWRBY3Rpb246IGZyYW1ld29yay5CbG9ja2luZ0Z1bmNBY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIodGhpcy5fYnV0dG9uQXJ0aHVyLFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5vbkNoYXJhY3RlclNlbGVjdGVkKHRoaXMuX0FydGh1ciwgQ2hhcmFjdGVyVHlwZS5hcnRodXIsIHJvbGUsIGJsb2NrZWRBY3Rpb24pKTtcbiAgICAgICAgdGhpcy5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIodGhpcy5fYnV0dG9uQnVzdGVyLFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5vbkNoYXJhY3RlclNlbGVjdGVkKHRoaXMuX0J1c3RlciwgQ2hhcmFjdGVyVHlwZS5idXN0ZXIsIHJvbGUsIGJsb2NrZWRBY3Rpb24pKTtcbiAgICAgICAgdGhpcy5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIodGhpcy5fYnV0dG9uTXVmZnksXG4gICAgICAgICAgICAoKSA9PiB0aGlzLm9uQ2hhcmFjdGVyU2VsZWN0ZWQodGhpcy5fTXVmZnksIENoYXJhY3RlclR5cGUubXVmZnksIHJvbGUsIGJsb2NrZWRBY3Rpb24pKTtcbiAgICAgICAgdGhpcy5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIodGhpcy5fYnV0dG9uRFcsXG4gICAgICAgICAgICAoKSA9PiB0aGlzLm9uQ2hhcmFjdGVyU2VsZWN0ZWQodGhpcy5fRFcsIENoYXJhY3RlclR5cGUuZHcsIHJvbGUsIGJsb2NrZWRBY3Rpb24pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldExpc3RlbmVyRm9yTGVhZChibG9ja2VkQWN0aW9uOiBmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9uKSB7XG4gICAgICAgIHRoaXMuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMuX2J1dHRvbkFydGh1cixcbiAgICAgICAgICAgICgpID0+IHRoaXMub25DaGFyYWN0ZXJTZWxlY3RlZEZvckxlYWQodGhpcy5fQXJ0aHVyLCBDaGFyYWN0ZXJUeXBlLmFydGh1ciwgYmxvY2tlZEFjdGlvbikpO1xuICAgICAgICB0aGlzLnNldEJ1dHRvblByZXNzZWRMaXN0ZW5lcih0aGlzLl9idXR0b25CdXN0ZXIsXG4gICAgICAgICAgICAoKSA9PiB0aGlzLm9uQ2hhcmFjdGVyU2VsZWN0ZWRGb3JMZWFkKHRoaXMuX0J1c3RlciwgQ2hhcmFjdGVyVHlwZS5idXN0ZXIsIGJsb2NrZWRBY3Rpb24pKTtcbiAgICAgICAgdGhpcy5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIodGhpcy5fYnV0dG9uTXVmZnksXG4gICAgICAgICAgICAoKSA9PiB0aGlzLm9uQ2hhcmFjdGVyU2VsZWN0ZWRGb3JMZWFkKHRoaXMuX011ZmZ5LCBDaGFyYWN0ZXJUeXBlLm11ZmZ5LCBibG9ja2VkQWN0aW9uKSk7XG4gICAgICAgIHRoaXMuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMuX2J1dHRvbkRXLFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5vbkNoYXJhY3RlclNlbGVjdGVkRm9yTGVhZCh0aGlzLl9EVywgQ2hhcmFjdGVyVHlwZS5kdywgYmxvY2tlZEFjdGlvbikpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB0aGlzLnJlbW92ZUJ1dHRvblByZXNzZWRMaXN0ZW5lcihidXR0b24pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQ2hhcmFjdGVyU2VsZWN0ZWQoY2hhcmFjdGVyOiBCYXNlQ2hhcmFjdGVyLCB0eXBlOiBDaGFyYWN0ZXJUeXBlLCByb2xlOiBSb2xlLCBibG9ja2VkQWN0aW9uOiBmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9uKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuc2F2ZVJvbGVGb3JUeXBlKHJvbGUsIHR5cGUpO1xuICAgICAgICB0aGlzLnJ1bkFjdGlvbih0aGlzLmdldENoYXJhY3RlclNlbGVjdGVkQWN0aW9uKGNoYXJhY3RlciwgdGhpcy5nZXRDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2codHlwZSksIGJsb2NrZWRBY3Rpb24pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNhdmVSb2xlRm9yVHlwZShyb2xlOiBSb2xlLCB0eXBlOiBDaGFyYWN0ZXJUeXBlKSB7XG4gICAgICAgIHRoaXMucmVzdWx0TWFwLnNldChyb2xlLCB0eXBlKTtcbiAgICAgICAgdGhpcy5hbmFseXRpY3NTZXJ2aWNlLnNlbmRFdmVudENoYXJhY3RlclNlbGVjdCh0eXBlLCByb2xlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZyh0eXBlOiBDaGFyYWN0ZXJUeXBlKTogQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nIHtcbiAgICAgICAgY29uc3QgcmVhY3Rpb25BcnJheSA9IHRoaXMuc2VsZWN0ZWRMaW5lcy5nZXQodHlwZSk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleFNlbGVjdGVkTGluZXMucmFuZG9tSW5kZXgoKTtcblxuICAgICAgICBpZiAocmVhY3Rpb25BcnJheS5sZW5ndGggPiB0aGlzLmluZGV4U2VsZWN0ZWRMaW5lc1tpbmRleF0pIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5pbmRleFNlbGVjdGVkTGluZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHJldHVybiByZWFjdGlvbkFycmF5W3NlbGVjdGVkLmZpcnN0KCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWN0aW9uQXJyYXkuZmlyc3QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgb25DaGFyYWN0ZXJTZWxlY3RlZEZvckxlYWQoY2hhcmFjdGVyOiBCYXNlQ2hhcmFjdGVyLCB0eXBlOiBDaGFyYWN0ZXJUeXBlLCBibG9ja2VkQWN0aW9uOiBmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9uKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuc2F2ZVJvbGVGb3JUeXBlKHRoaXMubGVhZFJvbGUsIHR5cGUpO1xuICAgICAgICB0aGlzLnJ1bkFjdGlvbih0aGlzLmdldENoYXJhY3RlclNlbGVjdGVkQWN0aW9uKGNoYXJhY3RlciwgdGhpcy5sZWFkRGlhbG9nLmdldCh0eXBlKSwgYmxvY2tlZEFjdGlvbikpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q2hhcmFjdGVyU2VsZWN0ZWRBY3Rpb24oY2hhcmFjdGVyOiBCYXNlQ2hhcmFjdGVyLCBkaWFsb2c6IENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZywgYmxvY2tlZEFjdGlvbjogZnJhbWV3b3JrLkJsb2NraW5nRnVuY0FjdGlvbik6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5nZXRDaGFyYWN0ZXJUYWxraW5nQWN0aW9uKGNoYXJhY3RlciwgZGlhbG9nKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0SGlkZVJvbGVTZWxlY3Rpb25VSUFjdGlvbihjaGFyYWN0ZXIpLFxuICAgICAgICAgICAgY2hhcmFjdGVyLmdldFNlbGVjdEFjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBjaGFyYWN0ZXIuaGlkZSgpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gYmxvY2tlZEFjdGlvbi5maW5pc2goKSlcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDaGFyYWN0ZXJUYWxraW5nQWN0aW9uKGNoYXJhY3RlcjogQmFzZUNoYXJhY3RlciwgZGlhbG9nOiBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2cpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5jYXB0aW9uU2VydmljZS5kaXNwbGF5Q2FwdGlvbihkaWFsb2cudGV4dCkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlZPKGRpYWxvZy52byksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBjaGFyYWN0ZXIucGxheVRhbGsoKSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNhcHRpb25TZXJ2aWNlLmNsZWFyQ2FwdGlvbnMoKSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IGNoYXJhY3Rlci5wbGF5SWRsZSgpKVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNob3dSb2xlU2VsZWN0aW9uVUlBY3Rpb24ocm9sZTogUm9sZSkge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTa2luRm9yVUkocm9sZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcm9sZVVJLnNjYWxlID0gbmV3IFBJWEkuUG9pbnQodGhpcy5zY2FsZVJvbGVVSS54LCB0aGlzLnNjYWxlUm9sZVVJLnkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JvbGVVSS5wb3NpdGlvbiA9IG5ldyBQSVhJLlBvaW50KHRoaXMucG9zaXRpb25Sb2xlVUkueCwgdGhpcy5wb3NpdGlvblJvbGVVSS55KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yb2xlVUkudmlzaWJsZSA9IHRydWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLl9yb2xlVUkuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIFwic2hvd1wiLCBmYWxzZSkpXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgcHVibGljIHNldFNraW5Gb3JVSShyb2xlOiBSb2xlKSB7XG4gICAgICAgIHRoaXMuX3JvbGVVSS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKHRoaXMudWlSb2xlU2VsZWN0aW9uLmdldChyb2xlKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRIaWRlUm9sZVNlbGVjdGlvblVJQWN0aW9uKGNoYXJhdGVyOiBCYXNlQ2hhcmFjdGVyKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gZnJhbWV3b3JrLlZlY3Rvci50cmFuc2Zvcm1UbyhjaGFyYXRlci5zcGluZSwgY2hhcmF0ZXIuc3BpbmUucGFyZW50LnBhcmVudCk7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4odGhpcy5fcm9sZVVJLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvOiB7IHg6IHRhcmdldFBvc2l0aW9uLngsIHk6IHRhcmdldFBvc2l0aW9uLnkgfSxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDAuNVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlR3ZWVuKHRoaXMuX3JvbGVVSS5zY2FsZSwge1xuICAgICAgICAgICAgICAgICAgICB0bzogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuX3JvbGVVSS52aXNpYmxlID0gZmFsc2UpLFxuICAgICAgICBdKVxuICAgIH1cblxuICAgIHByaXZhdGUgZW5kRGlhbG9nKCkge1xuICAgICAgICBjb25zdCBhY3Rpb25zID0gW107XG5cbiAgICAgICAgdGhpcy5hZGROYXJyYXRvckFjdGlvbnMoYWN0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5hZGRPdXRyb0FjdGlvbnMoYWN0aW9ucyk7XG5cbiAgICAgICAgYWN0aW9ucy5wdXNoKGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNldFVJKCk7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLm9uVGVybWluYXRlZCh0aGlzLnJlc3VsdE1hcCk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICB0aGlzLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShhY3Rpb25zKSlcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZE5hcnJhdG9yQWN0aW9ucyhhY3Rpb25zOiBhbnlbXSkge1xuICAgICAgICBhY3Rpb25zLnB1c2goZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoXG4gICAgICAgICAgICB0aGlzLmNoYXJhY3RlcnNUeXBlcy5maWx0ZXIoKHZhbHVlOiBDaGFyYWN0ZXJUeXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5mcm9tKHRoaXMucmVzdWx0TWFwLnZhbHVlcygpKS5jb250YWlucyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLm1hcChsYXN0Q2hhcmFjdGVyID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVSb2xlRm9yVHlwZShSb2xlLm5hcnJhdG9yLCBsYXN0Q2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFZPQ2FwdGlvbkFjdGlvbih0aGlzLm5hcnJhdG9yRGlhbG9nLmdldChsYXN0Q2hhcmFjdGVyKSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2hvd1JvbGVTZWxlY3Rpb25VSUFjdGlvbihSb2xlLm5hcnJhdG9yKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRDaGFyYWN0ZXJUYWxraW5nQWN0aW9uKHRoaXMuY2hhcmFjdGVyTWFwLmdldChsYXN0Q2hhcmFjdGVyKSwgdGhpcy5nZXRDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2cobGFzdENoYXJhY3RlcikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRIaWRlUm9sZVNlbGVjdGlvblVJQWN0aW9uKHRoaXMuY2hhcmFjdGVyTWFwLmdldChsYXN0Q2hhcmFjdGVyKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlck1hcC5nZXQobGFzdENoYXJhY3RlcikuZ2V0U2VsZWN0QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2hhcmFjdGVyTWFwLmdldChsYXN0Q2hhcmFjdGVyKS5oaWRlKCkpLFxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICB9KVxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZE91dHJvQWN0aW9ucyhhY3Rpb25zOiBhbnlbXSkge1xuICAgICAgICB0aGlzLm91dHJvLmZvckVhY2goKGRpYWxvZzogQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKSA9PiB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2godGhpcy5nZXRWT0NhcHRpb25BY3Rpb24oZGlhbG9nKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjdXN0b21TaG93QWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBtaW5EZWxheSA9IDA7XG4gICAgICAgIGNvbnN0IG1heERlbGF5ID0gMTtcbiAgICAgICAgdGhpcy5jdXN0b21TaG93QWN0aW9uSGFuZGxlID0gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmFscGhhID0gMS4wO1xuICAgICAgICAgICAgICAgIHRoaXMuc291bmRTZXJ2aWNlLnBsYXlNdXNpYyhcImNoYXItc2VsZWN0LW11c2ljLm1wM1wiKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoXG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmNoYXJhY3Rlck1hcC52YWx1ZXMoKSkubWFwKChjaGFyYWN0ZXI6IEJhc2VDaGFyYWN0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlJhbmRvbURlbGF5KG1pbkRlbGF5LCBtYXhEZWxheSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIuZ2V0U2hvd0FuZFJpc2VVcEFjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbVNob3dBY3Rpb25IYW5kbGU7XG4gICAgfTtcblxuICAgIHByb3RlY3RlZCBjdXN0b21IaWRlQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBtaW5EZWxheSA9IDA7XG4gICAgICAgIGNvbnN0IG1heERlbGF5ID0gMC4zO1xuICAgICAgICBjb25zdCBhcnJheTogZnJhbWV3b3JrLkFjdGlvbltdID0gQXJyYXkuZnJvbSh0aGlzLmNoYXJhY3Rlck1hcC52YWx1ZXMoKSkubWFwKChjaGFyYWN0ZXI6IEJhc2VDaGFyYWN0ZXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUmFuZG9tRGVsYXkobWluRGVsYXksIG1heERlbGF5KSxcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXIuZ2V0SGlkZUFjdGlvbigpXG4gICAgICAgICAgICBdKVxuICAgICAgICB9KVxuICAgICAgICBhcnJheS5wdXNoKGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zb3VuZFNlcnZpY2UuZmFkZU11c2ljKCkpKTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKGFycmF5KVxuICAgIH1cblxuICAgIHByb3RlY3RlZCByZXNldFVJKCkge1xuICAgICAgICB0aGlzLl9yb2xlVUkudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yb2xlVUkuc2NhbGUgPSBuZXcgUElYSS5Qb2ludCh0aGlzLnNjYWxlUm9sZVVJLngsIHRoaXMuc2NhbGVSb2xlVUkueSk7XG4gICAgICAgIHRoaXMuX3JvbGVVSS5wb3NpdGlvbiA9IG5ldyBQSVhJLlBvaW50KHRoaXMucG9zaXRpb25Sb2xlVUkueCwgdGhpcy5wb3NpdGlvblJvbGVVSS55KTtcbiAgICAgICAgdGhpcy5zY3JpcHRzLnJlbW92ZVNjcmlwdHMoW3RoaXMuX0FydGh1ciwgdGhpcy5fQnVzdGVyLCB0aGlzLl9NdWZmeSwgdGhpcy5fRFddKTtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcmFjdGVyU2VsZWN0aW9uRGVsZWdhdGUge1xuICAgIG9uVGVybWluYXRlZChyZXN1bHRNYXA6IE1hcDxSb2xlLCBDaGFyYWN0ZXJUeXBlPik6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2cge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB2bzogc3RyaW5nLCBwdWJsaWMgcmVhZG9ubHkgdGV4dDogc3RyaW5nKSB7IH1cbn0iLCJleHBvcnQgZW51bSBTY2VuZU5hbWUge1xuICAgIFNwbGFzaCA9IFwic3BsYXNoXCIsXG4gICAgTHJyaFN0YWdlID0gXCJscnJoLXN0YWdlXCIsXG4gICAgR29sZGlsb2NrcyA9IFwiZ2wtc3RhZ2VcIixcbiAgICBDaW5kZXJlbGxhID0gXCJjaW5kZXItc3RhZ2VcIixcbn0iLCJpbXBvcnQgU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4vU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBJY29uU2VsZWN0aW9uUG9wT3ZlciBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvSWNvblNlbGVjdGlvblBvcE92ZXJcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IHsgQ2hvaWNlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0Nob2ljZURpYWxvZ0xpbmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU0ZYU2VsZWN0aW9uU3RhdGUgZXh0ZW5kcyBTZWxlY3Rpb25TdGF0ZSAge1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKGRpYWxvZzogQ2hvaWNlRGlhbG9nTGluZSxcbiAgICAgICAgcHJvdGVjdGVkIHNlbGVjdFBvcG92ZXI6IEljb25TZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZVxuICAgICAgICApIHtcbiAgICAgICAgc3VwZXIoZGlhbG9nLCBzZWxlY3RQb3BvdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRCdXR0b25MaXN0ZW5lcihidXR0b24sIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNob2ljZSA9IE9iamVjdC5rZXlzKHRoaXMuZGlhbG9nLnNmeENob2ljZXMpW2luZGV4XTtcbiAgICAgICAgaWYgKGNob2ljZSkge1xuICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXIuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKGJ1dHRvbiwgKCkgPT4gdGhpcy5vbkNob2ljZShjaG9pY2UpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuYWN0aXZlYnV0dG9uc1tpbmRleF0gPSAhIWNob2ljZTtcbiAgICB9XG5cbiAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmICh0aGlzLmRpYWxvZy50YXJnZXRSb2xlKXtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci52aWV3LnggPSB0aGlzLmNoYXJhY3RlcnMuZ2V0KHRoaXMuZGlhbG9nLnRhcmdldFJvbGUpLnNwaW5lLng7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIudmlldy54ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnRlcmF0aW9ucygpO1xuXG4gICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLmZpbmlzaENob2ljZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKHRoaXMuZGlhbG9nLmdldExpbmsoMCkubGluaykpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlldyc7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gJy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZSc7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gJy4vU2VydmljZU5hbWUnO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tICcuLi91dGlscy9VdGlscyc7XG5pbXBvcnQgKiBhcyBUV0VFTiBmcm9tIFwiQHR3ZWVuanMvdHdlZW4uanMvZGlzdC90d2Vlbi5janMuanNcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW1lcmFTZXJ2aWNlIHtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuXG4gICAgcHVibGljIGdldCB2aWV3KCk6IFZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlldztcbiAgICB9XG5cbiAgICBwcml2YXRlIF92aWV3OiBWaWV3O1xuICAgIHByaXZhdGUgcm9vdFZpZXc6IFZpZXc7XG5cbiAgICBwcml2YXRlIGNlbnRlcjogUElYSS5JUG9pbnQ7XG4gICAgcHJpdmF0ZSBzY2FsZTogUElYSS5JUG9pbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihwaXhpQXBwOiBQSVhJLkFwcGxpY2F0aW9uLCB2aWV3OiBWaWV3LCBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICB0aGlzLndpZHRoID0gZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5nYW1lV2lkdGgpO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZ2FtZUhlaWdodCk7XG4gICAgICAgIHRoaXMucm9vdFZpZXcgPSB2aWV3O1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMuX3ZpZXcgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy5yb290VmlldywgXCJDYW52YXNcIikgYXMgVmlldztcbiAgICAgICAgdGhpcy5jZW50ZXIgPSBuZXcgUElYSS5Qb2ludCgwLCAwKVxuICAgICAgICB0aGlzLl92aWV3LnBvc2l0aW9uLmNvcHlUbyh0aGlzLmNlbnRlcik7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgUElYSS5Qb2ludCgxLCAxKVxuICAgICAgICB0aGlzLl92aWV3LnNjYWxlLmNvcHlUbyh0aGlzLnNjYWxlKTtcbiAgICB9XG5cblxuICAgIHB1YmxpYyBnZXRab29tQW5kU2hha2VBY3Rpb24obWF4Wm9vbTogbnVtYmVyID0gMS4xLCBjZW50ZXI6IFBJWEkuSVBvaW50ID0gdGhpcy5jZW50ZXIpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuZ2V0Wm9vbUluQWN0aW9uKGNlbnRlciwgbWF4Wm9vbSksXG4gICAgICAgICAgICB0aGlzLmdldFNoYWtlQWN0aW9uKGNlbnRlciksXG4gICAgICAgICAgICB0aGlzLmdldFpvb21PdXRBY3Rpb24obWF4Wm9vbSksXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTaGFrZUFjdGlvbihjZW50ZXI6IFBJWEkuSVBvaW50ID0gdGhpcy5jZW50ZXIpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBjZW50ZXI7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbihwb2ludCwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHBvaW50LnggKyA1LCB5OiBwb2ludC55ICsgNyB9LFxuXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICh0d2VlbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVDZW50ZXIodHdlZW4pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC4wNixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4ocG9pbnQsIHtcbiAgICAgICAgICAgICAgICB0bzogeyB4OiBwb2ludC54IC0gNiwgeTogcG9pbnQueSArIDcgfSxcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHR3ZWVuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUNlbnRlcih0d2VlbilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjA3LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbihwb2ludCwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHBvaW50LnggLSAxMywgeTogcG9pbnQueSAtIDMgfSxcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHR3ZWVuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUNlbnRlcih0d2VlbilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjA3LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbihwb2ludCwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHBvaW50LnggKyAzLCB5OiBwb2ludC55IC0gNiB9LFxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAodHdlZW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlQ2VudGVyKHR3ZWVuKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuMDcsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlR3ZWVuKHBvaW50LCB7XG4gICAgICAgICAgICAgICAgdG86IHsgeDogcG9pbnQueCAtIDUsIHk6IHBvaW50LnkgKyA1IH0sXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICh0d2VlbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVDZW50ZXIodHdlZW4pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC4wNixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4ocG9pbnQsIHtcbiAgICAgICAgICAgICAgICB0bzogeyB4OiBwb2ludC54ICsgMiwgeTogcG9pbnQueSAtIDggfSxcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHR3ZWVuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUNlbnRlcih0d2VlbilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjA3LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbihwb2ludCwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHBvaW50LnggLSA4LCB5OiBwb2ludC55IC0gMTAgfSxcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHR3ZWVuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUNlbnRlcih0d2VlbilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjA3LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbihwb2ludCwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHBvaW50LnggKyAzLCB5OiBwb2ludC55ICsgMTAgfSxcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHR3ZWVuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUNlbnRlcih0d2VlbilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjA3LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbihwb2ludCwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IGNlbnRlci54LCB5OiBjZW50ZXIueSB9LFxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAodHdlZW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlQ2VudGVyKHR3ZWVuKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuMSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKVxuICAgIH1cblxuICAgIHByaXZhdGUgbW92ZUNlbnRlcih0YXJnZXRQb2ludDogUElYSS5JUG9pbnQpIHtcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih0YXJnZXRQb2ludC54LCB0YXJnZXRQb2ludC55KVxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0UG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fdmlldy54ID0geDtcbiAgICAgICAgdGhpcy5fdmlldy55ID0geTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFpvb20odmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl92aWV3LnNjYWxlLnggPSB0aGlzLl92aWV3LnNjYWxlLnkgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBvc2l0aW9uKCk6IFBJWEkuSVBvaW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXcucG9zaXRpb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldFpvb21JbkFjdGlvbihnbG9iYWxUYXJnZXRQb3NpdGlvbjogUElYSS5JUG9pbnQgPSB0aGlzLmNlbnRlciwgbWF4Wm9vbTogbnVtYmVyID0gMS4xKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLmdldFNjYWxlQWN0aW9uKHRoaXMuX3ZpZXcsIG1heFpvb20pLFxuICAgICAgICAgICAgdGhpcy5nZXRQYW5BY3Rpb24oZ2xvYmFsVGFyZ2V0UG9zaXRpb24pXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0U2NhbGVBY3Rpb24odmlldzogVmlldywgdmFsdWU6IG51bWJlciA9IDEsIGR1cmF0aW9uOiBudW1iZXIgPSAwLjE1KTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGlmICghdmlldykge1xuICAgICAgICAgICAgdGhyb3cgXCJyZXF1aXJlIHZpZXdcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4odmlldy5zY2FsZSwge1xuICAgICAgICAgICAgdG86IHsgeDogdmFsdWUsIHk6IHZhbHVlIH0sXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNpbmc6IFRXRUVOLkVhc2luZy5DdWJpYy5JblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Wm9vbU91dEFjdGlvbihtaW5ab29tOiBudW1iZXIgPSB0aGlzLnNjYWxlLngpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmdldFNjYWxlQWN0aW9uKHRoaXMuX3ZpZXcsIG1pblpvb20pLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UmVjZW50ZXJBY3Rpb24oKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNldFBvc2l0aW9uKHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkpIClcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFBhbkFjdGlvbihnbG9iYWxUYXJnZXRQb3NpdGlvbjogUElYSS5JUG9pbnQgPSB0aGlzLmNlbnRlcik6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBmcmFtZXdvcmsuVmVjdG9yLnRyYW5zZm9ybUdsb2JhbFRvQ2hpbGQoZ2xvYmFsVGFyZ2V0UG9zaXRpb24sIHRoaXMudmlldy5wYXJlbnQpIGFzIFBJWEkuSVBvaW50O1xuXG4gICAgICAgIHRhcmdldC54ID0gdGFyZ2V0LnggLSB0aGlzLmNlbnRlci54O1xuICAgICAgICB0YXJnZXQueSA9IHRhcmdldC55IC0gdGhpcy5jZW50ZXIueTtcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRUcmFuc2xhdGlvbkFjdGlvbih0aGlzLl92aWV3LCB0YXJnZXQpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRUcmFuc2xhdGlvbkFjdGlvbih2aWV3OiBWaWV3LCB0YXJnZXRQb3NpdGlvbjogUElYSS5JUG9pbnQsIGR1cmF0aW9uOiBudW1iZXIgPSAwLjE1KTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbih2aWV3LnBvc2l0aW9uLCB7XG4gICAgICAgICAgICB0bzogeyB4OiB0YXJnZXRQb3NpdGlvbi54LCB5OiB0YXJnZXRQb3NpdGlvbi55IH0sXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICBvblVwZGF0ZTogKHR3ZWVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdE1hcmdpbiA9IDIwO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpblggPSBkZWZhdWx0TWFyZ2luICogdmlldy5zY2FsZS54O1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pblggPSB0aGlzLmNlbnRlci54IC0gbWFyZ2luWDtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhYID0gdGhpcy5jZW50ZXIueCArIG1hcmdpblg7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IE1hdGhFeHQuY2xhbXAoKHR3ZWVuLngpIC8gdmlldy5zY2FsZS54LCBtaW5YLCBtYXhYKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpblkgPSAxMCAqIHZpZXcuc2NhbGUueTtcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5ZID0gdGhpcy5jZW50ZXIueSAtIG1hcmdpblk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF4WSA9IHRoaXMuY2VudGVyLnkgKyBtYXJnaW5ZO1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBNYXRoRXh0LmNsYW1wKCh0d2Vlbi55KSAvIHZpZXcuc2NhbGUueSwgbWluWSwgbWF4WSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSZWNlbnRlckFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHJhbnNsYXRpb25BY3Rpb24odGhpcy5fdmlldywgdGhpcy5jZW50ZXIpO1xuICAgIH1cblxufVxuXG5cbmV4cG9ydCBlbnVtIENhbWVyYUVmZmVjdCB7XG4gICAgcGFuID0gXCJwYW5cIixcbiAgICB6b29tT3V0ID0gXCJ6b29tT3V0XCIsXG4gICAgem9vbUluID0gXCJ6b29tSW5cIixcbiAgICBzaGFrZSA9IFwic2hha2VcIixcbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IHsgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nIH0gZnJvbSBcIi4vQ2hhcmFjdGVyU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IHsgQ29zdHVtZXMgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Db3N0dW1lc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBTdG9yeURhdGF7XG4gICAgZ2V0RGVmYXVsdFZPS2V5cygpIHtcbiAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHB1YmxpYyByZWFkb25seSBzYXZlOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHZvSURNYXA6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgY2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nczogTWFwPFJvbGUsIENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZz4gPSBuZXcgTWFwKCk7XG4gICAgcHVibGljIHJlYWRvbmx5IGxlYWRSb2xlOiBSb2xlID0gbnVsbDtcbiAgICBwdWJsaWMgcmVhZG9ubHkgcm9sZVVJTWFwOiBNYXA8Um9sZSwgQ29zdHVtZXM+ID0gbnVsbDtcbn0iLCJpbXBvcnQgQmFja2dyb3VuZGVkUG9wT3ZlciBmcm9tIFwiLi9CYWNrZ3JvdW5kZWRQb3BPdmVyXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBTaGFkb3dlZFNwaW5lUG9wT3ZlciBmcm9tIFwiLi9TaGFkb3dlZFNwaW5lUG9wT3ZlclwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3Rpb25Qb3BPdmVyIGV4dGVuZHMgQmFja2dyb3VuZGVkUG9wT3ZlcntcbiAgICBidXR0b25zOiBhbnk7XG4gICAgYnV0dG9uTGVmdDogZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICBidXR0b25SaWdodDogZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICBidXR0b25NaWRkbGU6IGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgZGVpbml0KCk6IHZvaWQ7XG4gICAgYWN0aXZlYnV0dG9uczogYm9vbGVhbltdO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uUG9wT3ZlckRlbGVnYXRlIHtcbiAgICBhdHRhY2hQb3BvdmVyKHNlbGVjdFBvcG92ZXI6IElTZWxlY3Rpb25Qb3BPdmVyKTogdm9pZDtcbiAgICBkZXR0YWNoUG9wb3ZlcihzZWxlY3RQb3BvdmVyOiBJU2VsZWN0aW9uUG9wT3Zlcik6IHZvaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFNlbGVjdGlvblBvcE92ZXI8VD4gZXh0ZW5kcyBTaGFkb3dlZFNwaW5lUG9wT3ZlciBpbXBsZW1lbnRzIElTZWxlY3Rpb25Qb3BPdmVye1xuICAgIFxuICAgIHByb3RlY3RlZCBfYnV0dG9uTGVmdDogZnJhbWV3b3JrLlNwaW5lVmlldyA9IG51bGw7XG4gICAgcHJvdGVjdGVkIF9idXR0b25SaWdodDogZnJhbWV3b3JrLlNwaW5lVmlldyA9IG51bGw7XG4gICAgcHJvdGVjdGVkIF9idXR0b25NaWRkbGU6IGZyYW1ld29yay5TcGluZVZpZXcgPSBudWxsO1xuICAgIFxuICAgIHB1YmxpYyBnZXQgYnV0dG9uTGVmdCgpOiBmcmFtZXdvcmsuU3BpbmVWaWV3IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvbkxlZnQ7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXQgYnV0dG9uUmlnaHQoKTogZnJhbWV3b3JrLlNwaW5lVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idXR0b25SaWdodDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGJ1dHRvbk1pZGRsZSgpOiBmcmFtZXdvcmsuU3BpbmVWaWV3IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvbk1pZGRsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGJ1dHRvbnMoKTogZnJhbWV3b3JrLlNwaW5lVmlld1tdIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmJ1dHRvbkxlZnQsIHRoaXMuYnV0dG9uTWlkZGxlLCB0aGlzLmJ1dHRvblJpZ2h0XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdmlldyBcbiAgICAgKiBAcGFyYW0gZGlTZXJ2aWNlIFxuICAgICAqIEBwYXJhbSBzZWxlY3Rpb25UeXBlIFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSwgcHJvdGVjdGVkIHNlbGVjdGlvblR5cGVzOiBUW10pIHtcbiAgICAgICAgc3VwZXIodmlldywgZGlTZXJ2aWNlKTtcblxuICAgICAgICB0aGlzLl9idXR0b25MZWZ0ID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJsZWZ0XCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMuX2J1dHRvblJpZ2h0ID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJyaWdodFwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLl9idXR0b25NaWRkbGUgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcIm1pZGRsZVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuXG4gICAgICAgIHRoaXMuYWN0aXZlYnV0dG9ucyA9IFt0cnVlLCB0cnVlLCB0cnVlXTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICBzdXBlci5pbml0KCk7XG4gICAgICAgIHRoaXMuc2V0SWNvbnModGhpcy5zZWxlY3Rpb25UeXBlcyk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldEljb25zKHNlbGVjdGlvblR5cGVzOiBUW10pIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25UeXBlcyA9IHNlbGVjdGlvblR5cGVzO1xuICAgICAgICB0aGlzLnJlcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5yZXNldFNwaW5lcygpO1xuICAgICAgICBzZWxlY3Rpb25UeXBlcy5mb3JFYWNoKCh2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IHRoaXMuYnV0dG9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLmJ1dHRvbnNbaW5kZXhdO1xuICAgICAgICAgICAgaWYoYnV0dG9uKXtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZWJ1dHRvbnNbaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBidXR0b24uc2tlbGV0b24uc2V0U2tpbkJ5TmFtZSh0aGlzLmdldFNraW5OYW1lKHZhbHVlKSk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc2V0U3BpbmVzKCkge1xuICAgICAgICBbdGhpcy5idXR0b25MZWZ0LCB0aGlzLmJ1dHRvbk1pZGRsZSwgdGhpcy5idXR0b25SaWdodF0uZm9yRWFjaCgodmFsdWU6IGZyYW1ld29yay5TcGluZVZpZXcsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSl7XG4gICAgICAgICAgICAgICAgdmFsdWUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlYnV0dG9uc1tpbmRleF0gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldFNraW5OYW1lKHNlbGVjdGlvblR5cGU6IFQpOiBzdHJpbmc7XG5cbiAgICBwcm90ZWN0ZWQgcmVwb3NpdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uVHlwZXMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy54ID0gMTYyO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0aW9uVHlwZXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy54ID0gMzQwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWV3LnggPSAwO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuL1N0YWdlU3RhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0MVNldHVwU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcblxuICAgIHB1YmxpYyBnZXQgY2hhcmFjdGVyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubmFycmF0b3IpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDAuNSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2hhcmFjdGVyLnBsYXlJZGxlKCkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSksXG4gICAgICAgIF0pKVxuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNob3coKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIucGxheUlkbGUoKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cblxufSIsImltcG9ydCBTY3JpcHQsIHsgUGFzc2FnZSB9IGZyb20gXCIuLi8uLi90d2luZS9Ud2luZVNjcmlwdFwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IFNjZW5lTWVkaWF0b3IgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL21lZGlhdG9ycy9TY2VuZU1lZGlhdG9yXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBmaW5kQ2hpbGRCeU5hbWUsIHsgYXBwbHlMaWdodE1hcCB9IGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IFN0YXRlQ29udGV4dCBmcm9tIFwiLi9zdGF0ZXMvU3RhdGVDb250ZXh0XCI7XG5pbXBvcnQgeyBEYXRhTmFtZSwgU2VydmljZU5hbWUgfSBmcm9tIFwiLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCB7IElTZWxlY3Rpb25Qb3BPdmVyLCBTZWxlY3Rpb25Qb3BPdmVyRGVsZWdhdGUgfSBmcm9tIFwiLi4vcG9wb3ZlcnMvU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IHsgRGlhbG9nU3RhdGVGYWN0b3J5IH0gZnJvbSBcIi4uL2ZhY3Rvcmllcy9EaWFsb2dTdGF0ZUZhY3RvcnlcIjtcbmltcG9ydCB7IFNpbXBsZUxpZ2h0bWFwRmlsdGVyIH0gZnJvbSAnQHBpeGkvZmlsdGVyLXNpbXBsZS1saWdodG1hcCc7XG5pbXBvcnQgQ2FtZXJhU2VydmljZSBmcm9tIFwiLi4vLi4vU2VydmljZXMvQ2FtZXJhU2VydmljZVwiO1xuaW1wb3J0IFN0YWdlU3RhdGUsIHsgU3RhZ2VTdGF0ZURlbGVnYXRlIH0gZnJvbSBcIi4vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCB7IERpYWxvZ0N1ZURhdGEsIERpYWxvZ0RhdGEgfSBmcm9tIFwiLi4vLi4vdHdpbmUvRGlhbG9nRGF0YVwiO1xuaW1wb3J0IHsgU3RhZ2VUcmFuc2l0aW9uIH0gZnJvbSBcIi4vU3RhZ2VUcmFuc2l0aW9uXCI7XG5pbXBvcnQgQmFja2Ryb3AgZnJvbSBcIi4uL3Byb3BzL0JhY2tkcm9wXCI7XG5pbXBvcnQgRGlzY29iYWxsIGZyb20gXCIuLi9wcm9wcy9zY2VuZVByb3BzL0Rpc2NvQmFsbFwiO1xuaW1wb3J0IFN0b3J5RGF0YSBmcm9tIFwiLi9TdG9yeURhdGFcIjtcbmltcG9ydCBCdWlsZEluZm9TZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9CdWlsZEluZm9TZXJ2aWNlXCI7XG5pbXBvcnQgQ3VydGFpbnMgZnJvbSBcIi4uL3Byb3BzL3NjZW5lUHJvcHMvQ3VydGFpbnNcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcbmltcG9ydCB7IENoYXJhY3RlclR5cGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9CYXNlQ2hhcmFjdGVyXCI7XG5pbXBvcnQgU291bmRTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9Tb3VuZFNlcnZpY2VcIjtcbmltcG9ydCAqIGFzICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBCb29tQm94IGZyb20gXCIuLi9wcm9wcy9zY2VuZVByb3BzL0Jvb21Cb3hcIjtcbmltcG9ydCBHYW1lIGZyb20gXCIuLi8uLi9HYW1lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEFjdE1lZGlhdG9yIGV4dGVuZHMgU2NlbmVNZWRpYXRvciBpbXBsZW1lbnRzIFN0YWdlU3RhdGVEZWxlZ2F0ZSwgU2VsZWN0aW9uUG9wT3ZlckRlbGVnYXRlIHtcblxuICAgIHByb3RlY3RlZCBjaGFyYWN0ZXI6IGZyYW1ld29yay5TcGluZVZpZXcgPSBudWxsO1xuICAgIHByb3RlY3RlZCBjaGFyYWN0ZXJTZWNvbmQ6IGZyYW1ld29yay5TcGluZVZpZXcgPSBudWxsO1xuICAgIHByb3RlY3RlZCBjaGFyYWN0ZXJUaGlyZDogZnJhbWV3b3JrLlNwaW5lVmlldyA9IG51bGw7XG4gICAgcHJvdGVjdGVkIG5hcnJhdG9yOiBmcmFtZXdvcmsuU3BpbmVWaWV3ID0gbnVsbDtcblxuICAgIHByb3RlY3RlZCBjaGFyYWN0ZXJzOiBNYXA8c3RyaW5nLCBDaGFyYWN0ZXI+ID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgc2NyaXB0OiBTY3JpcHQ7XG5cbiAgICBwcm90ZWN0ZWQgZGlhbG9nU3RhdGVGYWN0b3J5OiBEaWFsb2dTdGF0ZUZhY3Rvcnk7XG5cbiAgICBwcm90ZWN0ZWQgc3RhdGVzOiBTdGFnZVN0YXRlW10gPSBbXTtcbiAgICBwcm90ZWN0ZWQgbGlnaHRNYXBGaWx0ZXI6IFNpbXBsZUxpZ2h0bWFwRmlsdGVyO1xuXG4gICAgcHJvdGVjdGVkIHN0YXRlQ29udGV4dDogU3RhdGVDb250ZXh0ID0gbmV3IFN0YXRlQ29udGV4dCgpO1xuICAgIHByb3RlY3RlZCBfcmVwbGF5U3RhdGVzOiBTdGFnZVN0YXRlW10gPSBbXTtcblxuICAgIHByb3RlY3RlZCBjdXJyZW50UGFzc2FnZTogUGFzc2FnZSA9IG51bGw7XG5cblxuICAgIHByb3RlY3RlZCBnZXQgZ2FtZSgpOiBHYW1lIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5nYW1lKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHN0b3J5RGF0YSgpOiBTdG9yeURhdGEge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLlN0b3J5RGF0YSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBiYWNrZHJvcCgpOiBCYWNrZHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmFja2Ryb3ApO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IG11c2ljUGxheWVyKCk6IEJvb21Cb3gge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLm11c2ljQm94KTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBjdXJ0YWlucygpOiBDdXJ0YWlucyB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuY3VydGFpbnMpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGRpc2NvQmFsbCgpOiBEaXNjb2JhbGwge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmRpc2NvYmFsbCk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgcGF1c2VCdXR0b24oKTogZnJhbWV3b3JrLlNwcml0ZVZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLnBhdXNlQnV0dG9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHJlcGxheVN0YXRlcygpOiBTdGFnZVN0YXRlW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVwbGF5U3RhdGVzO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZ2V0IGJ1aWxkU2VydmljZSgpOiBCdWlsZEluZm9TZXJ2aWNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldChTZXJ2aWNlTmFtZS5CdWlsZEluZm9TZXJ2aWNlKSBhcyBCdWlsZEluZm9TZXJ2aWNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgYWN0MUNoYXJhY3RlclBvc2l0aW9uTWFwKCk6IE1hcDxzdHJpbmcsIFBJWEkuSVBvaW50PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUucG9zaXRpb25EYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGFjdDFDaGFyYWN0ZXJTY2FsZU1hcCgpOiBNYXA8c3RyaW5nLCBEaXJlY3Rpb24+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5zY2FsZURhdGEpO1xuICAgIH1cblxuXG4gICAgY29uc3RydWN0b3IodmlldzogVmlldywgZGlTZXJ2aWNlOiBESVNlcnZpY2UsIHB1YmxpYyByZWFkb25seSBjaGFyYWN0ZXJSb2xlTWFwOiBNYXA8Um9sZSwgQ2hhcmFjdGVyVHlwZT4sIHByb3RlY3RlZCBkZWxlZ2F0ZTogQWN0TWVkaWF0b3JEZWxlZ2F0ZSkge1xuICAgICAgICBzdXBlcih2aWV3LCBkaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5pc1JlcGxheSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuQWN0aW9uTWFuYWdlckRlbGVnYXRlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5pbml0Q2hhcmFjdGVycygpO1xuICAgICAgICB0aGlzLmRpYWxvZ1N0YXRlRmFjdG9yeSA9IHRoaXMuaW5pdEZhY3RvcnkoKTtcblxuICAgICAgICBjb25zdCBjYW1lcmFTZXJ2aWNlID0gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkNhbWVyYVNlcnZpY2UpIGFzIENhbWVyYVNlcnZpY2U7XG4gICAgICAgIGNhbWVyYVNlcnZpY2UuaW5pdCgpO1xuICAgICAgICB0aGlzLnNldHVwRGVidWdNb2RlSWZOZWVkZWQoKTtcblxuICAgIH1cblxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBpbml0RmFjdG9yeSgpOiBEaWFsb2dTdGF0ZUZhY3Rvcnk7XG5cbiAgICBwcm90ZWN0ZWQgaW5pdENoYXJhY3RlcnMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJjaGFyYWN0ZXJcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJTZWNvbmQgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImNoYXJhY3Rlci1zZWNvbmRcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJUaGlyZCA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiY2hhcmFjdGVyLXRoaXJkXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMubmFycmF0b3IgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcIm5hcnJhdG9yXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgfVxuXG4gICAgc3RhcnREaWFsb2coc2NyaXB0OiBTY3JpcHQpIHtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuU3RhZ2VTdGF0ZURlbGVnYXRlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuU2VsZWN0aW9uUG9wT3ZlckRlbGVnYXRlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zY3JpcHQgPSBzY3JpcHQ7XG4gICAgICAgIC8vIGlmICh0aGlzLmJ1aWxkU2VydmljZS5pc0RlYnVnKSB7XG4gICAgICAgIC8vICAgICAvLyB0aGlzLnRlc3RQYXNzYWdlcygpO1xuICAgICAgICAvLyB9XG4gICAgICAgIHRoaXMucnVuQWN0aW9uKHRoaXMuZ2V0QWN0U2V0dXBBY3Rpb24oKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEFjdFNldHVwQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBiYWNrZHJvcCA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5iYWNrZHJvcCkgYXMgQmFja2Ryb3A7XG4gICAgICAgIGNvbnN0IHN0YWdlVHJhbnNpdGlvbiA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5TdGFnZVRyYW5zaXRpb24pIGFzIFN0YWdlVHJhbnNpdGlvbjtcblxuICAgICAgICBzdGFnZVRyYW5zaXRpb24ucmVzZXQoKTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnRhaW5zLmdldE9wZW5DdXJ0YWluc0FjdGlvbigpLFxuICAgICAgICAgICAgICAgIHN0YWdlVHJhbnNpdGlvbi5nZXRUcmFuc2l0aW9uUGFyYWxheEFjdGlvbigpLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgLy9TaG93IFVJIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYyh0aGlzLnZpZ25ldHRlVmlzaWJsZS5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2NvQmFsbC5nZXRTaG93QWN0aW9uKCksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIC8vU2hvdyBCYWNrZ3JvdW5kIENhbnZhc1xuICAgICAgICAgICAgYmFja2Ryb3AuZ2V0U2hvd0FjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYyh0aGlzLnBsYXlGaXJzdERpYWxvZy5iaW5kKHRoaXMpKSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHBsYXlGaXJzdERpYWxvZyhpZDogc3RyaW5nID0gXCIxXCIpIHtcbiAgICAgICAgdGhpcy5tdXNpY1BsYXllci5zdGFydE11c2ljKCk7XG4gICAgICAgIGNvbnN0IGZpc3RQYXNzYWdlID0gdGhpcy5zY3JpcHQucGFzc2FnZXMuZmluZChpdGVtID0+IGl0ZW0ucGlkID09PSBpZCk7XG4gICAgICAgIHRoaXMuZ29UbyhmaXN0UGFzc2FnZS5uYW1lKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHZpZ25ldHRlVmlzaWJsZSgpIHtcbiAgICAgICAgdGhpcy5saWdodE1hcEZpbHRlciA9IGFwcGx5TGlnaHRNYXAodGhpcy52aWV3LCBmYWxzZSk7XG4gICAgfVxuICAgIHByaXZhdGUgcmVtb3ZlVmlnbmV0dGUoKSB7XG4gICAgICAgIHRoaXMudmlldy5maWx0ZXJzID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzc2lnblBvc2l0aW9uVG9DaGFyYWN0ZXJzKHJvbGVzOiBSb2xlW10pIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0MUNoYXJhY3RlclBvc2l0aW9uTWFwLnNpemUgPiAwKSB7XG4gICAgICAgICAgICByb2xlcy5mb3JFYWNoKHJvbGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJhY3RlciA9IHRoaXMuY2hhcmFjdGVycy5nZXQocm9sZSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuYWN0MUNoYXJhY3RlclBvc2l0aW9uTWFwLmdldChyb2xlKTtcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXIueCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyLnkgPSBwb3NpdGlvbi55O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5hY3QxQ2hhcmFjdGVyU2NhbGVNYXAuZ2V0KHJvbGUpO1xuICAgICAgICAgICAgICAgIGNoYXJhY3Rlci5zZXREaXJlY3Rpb24oZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm9sZXMuZm9yRWFjaChyb2xlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSB0aGlzLmNoYXJhY3RlcnMuZ2V0KHJvbGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0MUNoYXJhY3RlclBvc2l0aW9uTWFwLnNldChyb2xlLCBuZXcgUElYSS5Qb2ludChjaGFyYWN0ZXIueCwgY2hhcmFjdGVyLnkpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdDFDaGFyYWN0ZXJTY2FsZU1hcC5zZXQocm9sZSwgY2hhcmFjdGVyLmRpcmVjdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdvVG9OZXh0KCkge1xuICAgICAgICBpZiAoIXRoaXMuY3VycmVudFBhc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmNlbEFjdGlvbnMoKTtcblxuICAgICAgICAodGhpcy5zdGF0ZUNvbnRleHQuY3VycmVudFN0YXRlIGFzIFN0YWdlU3RhdGUpLnNraXAoKTtcbiAgICB9XG5cbiAgICBnb1RvKHBhc3NhZ2VOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgLy8gaWYodGhpcy5wYXVzZWQpe1xuICAgICAgICAvLyAgICAgcmV0dXJuO1xuICAgICAgICAvLyB9XG4gICAgICAgIGlmICghISFwYXNzYWdlTmFtZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCIgbm8gcGFzc2FnZSBuYW1lIHBhc3NlZCBpbiwgcmV0dXJuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNob3VsZEVuZERpYWxvZyhwYXNzYWdlTmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZW5kRGlhbG9nKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFzc2FnZSA9IHRoaXMuc2NyaXB0LnBhc3NhZ2VzLmZpbmQoKHBhc3NhZ2U6IFBhc3NhZ2UpID0+IHBhc3NhZ2UubmFtZSA9PT0gcGFzc2FnZU5hbWUpO1xuICAgICAgICB0aGlzLmN1cnJlbnRQYXNzYWdlID0gcGFzc2FnZTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmRpYWxvZ1N0YXRlRmFjdG9yeS5jcmVhdGVTdGF0ZUZvckRpYWxvZyhwYXNzYWdlKTtcblxuICAgICAgICB0aGlzLnN0YXRlcy5wdXNoKHN0YXRlKTtcblxuICAgICAgICB0aGlzLnNjcmlwdHMuYWRkU2NyaXB0KHN0YXRlKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVJlcGxheVN0YXRlcygpO1xuICAgICAgICB0aGlzLnN0YXRlQ29udGV4dC5jdXJyZW50U3RhdGUgPSBzdGF0ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2hvdWxkRW5kRGlhbG9nKHBhc3NhZ2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRlc3RQYXNzYWdlcygpIHtcbiAgICAgICAgdGhpcy5zY3JpcHQucGFzc2FnZXMuZm9yRWFjaChwYXNzYWdlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5kaWFsb2dTdGF0ZUZhY3RvcnkuY3JlYXRlU3RhdGVGb3JEaWFsb2cocGFzc2FnZSk7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBTb3VuZFNlcnZpY2Uudm9zUGF0aCArIHN0YXRlLnBhc3NhZ2VEaWFsb2cuZ2V0Vm9Gb3JDaGFyYWN0ZXIoKTtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgdHlwZTogJ0hFQUQnLFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJub3QgZm91bmRcIiwgdXJsKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgZm91bmRcIiwgdXJsICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVSZXBsYXlTdGF0ZXMoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMuc3RhdGVDb250ZXh0LmN1cnJlbnRTdGF0ZTtcbiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSBpbnN0YW5jZW9mIFN0YWdlU3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlcGxheVN0YXRlcy5wdXNoKGN1cnJlbnRTdGF0ZS5nZXRSZXBsYXkoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZW5kRGlhbG9nKCk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmxvZyhcInN0b3J5IGlzIHRlcm1pbmF0ZWRcIik7XG4gICAgICAgIHRoaXMudXBkYXRlUmVwbGF5U3RhdGVzKCk7XG5cbiAgICAgICAgdGhpcy5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkoMiksXG4gICAgICAgICAgICB0aGlzLmdldEVuZE9mQWN0QWN0aW9uKCksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlLm9uQWN0VGVybWluYXRlZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVZpZ25ldHRlKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEVuZE9mQWN0QWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJ0YWlucy5nZXRDbG9zZUN1cnRhaW5zQWN0aW9uKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRlaW5pdCgpIHtcbiAgICAgICAgdGhpcy5wYXVzZUJ1dHRvbi52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NyaXB0cy5yZW1vdmVTY3JpcHRzKHRoaXMuc3RhdGVzKTtcbiAgICAgICAgdGhpcy5zdGF0ZXMuZm9yRWFjaChzdGF0ZSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5vbkRlc3Ryb3koKTtcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZm9yRWFjaCgodmFsdWU6IENoYXJhY3Rlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXJhY3RlcjogQ2hhcmFjdGVyID0gdGhpcy5jaGFyYWN0ZXJzLmdldChrZXkpO1xuICAgICAgICAgICAgY2hhcmFjdGVyLmhpZGUoKTtcbiAgICAgICAgICAgIGNoYXJhY3Rlci5kZWluaXQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kaVNlcnZpY2UuZGVsZXRlRGF0YVdpdGhLZXkoRGF0YU5hbWUuU3RhZ2VTdGF0ZURlbGVnYXRlKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2UuZGVsZXRlRGF0YVdpdGhLZXkoRGF0YU5hbWUuU2VsZWN0aW9uUG9wT3ZlckRlbGVnYXRlKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2UuZGVsZXRlRGF0YVdpdGhLZXkoRGF0YU5hbWUuY2hhcmFjdGVycyk7XG4gICAgfVxuXG4gICAgLy9TZWxlY3Rpb25Qb3BPdmVyRGVsZWdhdGVcbiAgICBwdWJsaWMgYXR0YWNoUG9wb3ZlcihzZWxlY3RQb3BvdmVyOiBJU2VsZWN0aW9uUG9wT3Zlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZENoaWxkTWVkaWF0b3JPbmx5KHNlbGVjdFBvcG92ZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXR0YWNoUG9wb3ZlcihzZWxlY3RQb3BvdmVyOiBJU2VsZWN0aW9uUG9wT3Zlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkTWVkaWF0b3JPbmx5KHNlbGVjdFBvcG92ZXIpO1xuICAgIH1cblxuICAgIC8vU3RhZ2VTdGF0ZURlbGVnYXRlXG4gICAgcHVibGljIG9uU3RhdGVUZXJtaW5hdGVkKG5leHRTdGF0ZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAoISFuZXh0U3RhdGVOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmdvVG8obmV4dFN0YXRlTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVuZERpYWxvZygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9ERUJVR1xuXG4gICAgcHJpdmF0ZSBzZXR1cERlYnVnTW9kZUlmTmVlZGVkKCkge1xuICAgICAgICBpZiAodGhpcy5idWlsZFNlcnZpY2UuaXNEZWJ1Zykge1xuICAgICAgICAgICAgY29uc3QgYnV0dG9uU2tpcCA9IHRoaXMuZ2V0RGVidWdCdXR0b24obmV3IFBJWEkuUG9pbnQoNTAsIC00MDApLCBcInNraXBcIilcbiAgICAgICAgICAgIHRoaXMudmlldy5hZGRDaGlsZChidXR0b25Ta2lwKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKGJ1dHRvblNraXAsIHRoaXMuZ29Ub05leHQuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkFjdDIgPSB0aGlzLmdldERlYnVnQnV0dG9uKG5ldyBQSVhJLlBvaW50KDE2MCwgLTQwMCksIFwiYWN0MlwiKVxuICAgICAgICAgICAgdGhpcy52aWV3LmFkZENoaWxkKGJ1dHRvbkFjdDIpO1xuICAgICAgICAgICAgdGhpcy5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIoYnV0dG9uQWN0MiwgdGhpcy5nb1RvQWN0Mi5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkFjdDMgPSB0aGlzLmdldERlYnVnQnV0dG9uKG5ldyBQSVhJLlBvaW50KDI4MCwgLTQwMCksIFwiYWN0M1wiKVxuICAgICAgICAgICAgdGhpcy52aWV3LmFkZENoaWxkKGJ1dHRvbkFjdDMpO1xuICAgICAgICAgICAgdGhpcy5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIoYnV0dG9uQWN0MywgdGhpcy5nb1RvQWN0My5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ29Ub0FjdDIoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ29Ub0FjdDMoKTogdm9pZDtcblxuICAgIHByaXZhdGUgZ2V0RGVidWdCdXR0b24ocG9zaXRpb246IFBJWEkuSVBvaW50LCB0ZXh0OiBzdHJpbmcpOiBmcmFtZXdvcmsuUmVjdGFuZ2xlVmlldyB7XG4gICAgICAgIGNvbnN0IGJ1dHRvblNraXAgPSBuZXcgZnJhbWV3b3JrLlJlY3RhbmdsZVZpZXcoe1xuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgICAgd2lkdGg6IDkwLjAsXG4gICAgICAgICAgICBoZWlnaHQ6IDUwLjAsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHNraXBUZXh0ID0gbmV3IGZyYW1ld29yay5UZXh0Vmlldyh7XG4gICAgICAgICAgICBpbml0aWFsVGV4dDogdGV4dCxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgZmlsbDogXCIjMDAwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgYnV0dG9uU2tpcC5hZGRDaGlsZChza2lwVGV4dCk7XG4gICAgICAgIHJldHVybiBidXR0b25Ta2lwXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnRQYXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYW5jZWxBY3Rpb25zKCk7XG5cbiAgICAgICAgKHRoaXMuc3RhdGVDb250ZXh0LmN1cnJlbnRTdGF0ZSBhcyBTdGFnZVN0YXRlKS5jYW5jZWwoKTtcbiAgICB9XG5cbiAgICAvL0RFQlVHXG4gICAgcHJvdGVjdGVkIHNldFNhdmVGb3JLZXkoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0b3J5RGF0YS5zYXZlLmdldChrZXkpKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3J5RGF0YS5zYXZlLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZShmcmFtZXRpbWU6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5nYW1lLnNob3VsZFVwZGF0ZSl7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShmcmFtZXRpbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvL1BBVVNJTkdcbiAgICB1bnBhdXNlKCkge1xuICAgICAgICB0aGlzLnZpZ25ldHRlVmlzaWJsZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlQ29udGV4dC5jdXJyZW50U3RhdGUpIHtcbiAgICAgICAgICAgICh0aGlzLnN0YXRlQ29udGV4dC5jdXJyZW50U3RhdGUgYXMgU3RhZ2VTdGF0ZSkucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlVmlnbmV0dGUoKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IHR5cGUgRGlhbG9nVHlwZSA9IERpYWxvZ0N1ZURhdGEgfCBEaWFsb2dEYXRhO1xuZXhwb3J0IGludGVyZmFjZSBBY3RNZWRpYXRvckRlbGVnYXRlIHtcbiAgICBvbkFjdFRlcm1pbmF0ZWQoYWN0TWVkaWF0b3I6IEFjdE1lZGlhdG9yKTogdm9pZDtcbn1cbiIsImltcG9ydCBTY2VuZU1lZGlhdG9yIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9tZWRpYXRvcnMvU2NlbmVNZWRpYXRvclwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7RGF0YU5hbWUsIFNlcnZpY2VOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IFByb21wdFBvcE92ZXIgZnJvbSBcIi4uL3BvcG92ZXJzL1Byb21wdFBvcE92ZXJcIjtcbmltcG9ydCB7IFN0YWdlVHJhbnNpdGlvbiB9IGZyb20gXCIuL1N0YWdlVHJhbnNpdGlvblwiO1xuaW1wb3J0IFN0b3J5TWVkaWF0b3IsIHsgU3RvcnlNZWRpYXRvckRlbGVnYXRlIH0gZnJvbSBcIi4vU3RvcnlNZWRpYXRvclwiO1xuaW1wb3J0IHsgQW5hbHl0aWNzU2VydmljZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9BbmFseXRpY3NTZXJ2aWNlXCI7XG5pbXBvcnQgR2FtZSBmcm9tIFwiLi4vLi4vR2FtZVwiO1xuaW1wb3J0IHsgQ2FwdGlvblNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vU2VydmljZXMvQ2FwdGlvblNlcnZpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU3RhZ2VNZWRpYXRvciBleHRlbmRzIFNjZW5lTWVkaWF0b3IgaW1wbGVtZW50cyBTdG9yeU1lZGlhdG9yRGVsZWdhdGV7XG4gICAgcHJpdmF0ZSBzdG9yeU1lZGlhdG9yOiBTdG9yeU1lZGlhdG9yO1xuICAgIHByaXZhdGUgcHJvbXB0UG9wT3ZlcjogUHJvbXB0UG9wT3ZlcjtcbiAgICBwcml2YXRlIHN0YWdlVHJhbnNpdGlvbjogU3RhZ2VUcmFuc2l0aW9uO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGFjdDFDaGFyYWN0ZXJQb3NpdGlvbk1hcDogTWFwPHN0cmluZywgUElYSS5JUG9pbnQ+ID0gbmV3IE1hcCgpO1xuICAgIHB1YmxpYyByZWFkb25seSBhY3QxQ2hhcmFjdGVyU2NhbGVNYXA6IE1hcDxzdHJpbmcsIFBJWEkuSVBvaW50PiA9IG5ldyBNYXAoKTtcblxuICAgIHByb3RlY3RlZCBnZXQgYW5hbHl0aWNzU2VydmljZSgpOiBBbmFseXRpY3NTZXJ2aWNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldChTZXJ2aWNlTmFtZS5BbmFseXRpY3NTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGdhbWUoKTogR2FtZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZ2FtZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBjYXB0aW9uU2VydmljZSgpOiBDYXB0aW9uU2VydmljZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXQoU2VydmljZU5hbWUuQ2FwdGlvblNlcnZpY2UpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIGRpU2VydmljZTogRElTZXJ2aWNlKXtcbiAgICAgICAgc3VwZXIodmlldywgZGlTZXJ2aWNlKTtcblxuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5JbnRlcmFjdGlvbkhhbmRsZXIsIHRoaXMpO1xuICAgICAgICB0aGlzLnN0YWdlVHJhbnNpdGlvbiA9IG5ldyBTdGFnZVRyYW5zaXRpb24odGhpcy52aWV3KTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuU3RhZ2VUcmFuc2l0aW9uLCB0aGlzLnN0YWdlVHJhbnNpdGlvbik7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLnBvc2l0aW9uRGF0YSwgdGhpcy5hY3QxQ2hhcmFjdGVyUG9zaXRpb25NYXApO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5zY2FsZURhdGEsIHRoaXMuYWN0MUNoYXJhY3RlclNjYWxlTWFwKTtcblxuICAgICAgICBjb25zdCBwb3BPdmVyVmlldyA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwic3RvcnktZmxvdy1wYW5lbFwiKSBhcyBWaWV3O1xuICAgICAgICBwb3BPdmVyVmlldy52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldFN0b3J5TWVkaWF0b3IoKTogU3RvcnlNZWRpYXRvcjtcblxuICAgIGluaXQoKXtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLmNyZWF0ZVN0b3J5TWVkaWF0b3IoKTtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBjcmVhdGVTdG9yeU1lZGlhdG9yKCkge1xuICAgICAgICB0aGlzLnN0b3J5TWVkaWF0b3IgPSB0aGlzLmdldFN0b3J5TWVkaWF0b3IoKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZE1lZGlhdG9yT25seSh0aGlzLnN0b3J5TWVkaWF0b3IpO1xuICAgICAgICB0aGlzLnN0b3J5TWVkaWF0b3IuaW5pdCgpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKXtcbiAgICAgICAgdGhpcy5yZW1vdmVDaGlsZE1lZGlhdG9yT25seSh0aGlzLnN0b3J5TWVkaWF0b3IpO1xuICAgICAgICB0aGlzLnN0b3J5TWVkaWF0b3IuZGVzdHJveSgpO1xuICAgICAgICBzdXBlci5kZXN0cm95KClcbiAgICB9XG5cbiAgICAvLyBTdG9yeU1lZGlhdG9yRGVsZWdhdGVcbiAgICBvblN0b3J5VGVybWluYXRlZCgpOiB2b2lke1xuICAgICAgICB0aGlzLnNob3dSZXBsYXlQcm9tcHQoKTtcbiAgICB9XG5cbiAgICBvblN0b3J5UGF1c2VkKCk6IHZvaWR7XG4gICAgICAgIHRoaXMuc2hvd1BhdXNlUHJvbXB0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93UmVwbGF5UHJvbXB0KCl7XG4gICAgICAgIHRoaXMuc2hvd1Byb21wdCh0aGlzLmNyZWF0ZVJlcGxheVBvcHZlci5iaW5kKHRoaXMpLCB0aGlzLm9uTmV3U3RvcnkuYmluZCh0aGlzKSwgdGhpcy5vblJlcGxheVNlbGVjdGVkLmJpbmQodGhpcyksIHRoaXMucGxheVZPUHJvbXB0LmJpbmQodGhpcykpXG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgc2hvd1BhdXNlUHJvbXB0KCl7XG4gICAgICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZS5zZW5kRXZlbnRTdG9yeVBhdXNlKCk7XG4gICAgICAgIHRoaXMuc3RvcnlNZWRpYXRvci5wYXVzZSgpO1xuICAgICAgICB0aGlzLnNob3dQcm9tcHQodGhpcy5jcmVhdGVQYXVzZVBvcHZlci5iaW5kKHRoaXMpLCB0aGlzLm9uUGF1c2VOZXdTdG9yeS5iaW5kKHRoaXMpLCB0aGlzLm9uQ29udGludWVTZWxlY3RlZC5iaW5kKHRoaXMpLCB0aGlzLnBsYXlWT1Byb21wdC5iaW5kKHRoaXMpLCAoKSA9PiB0aGlzLnBhdXNlKCkpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93UHJvbXB0KGNyZWF0ZUhhbmRsZTogKCkgPT4gUHJvbXB0UG9wT3Zlciwgb25ZZXNIYW5kbGVyOiAoKSA9PiB2b2lkLCBvbk5vSGFuZGxlcjogKCkgPT4gdm9pZCwgb25UaXRsZUhhbmRsZXI6ICgpID0+IHZvaWQsIGNvbXBsZXRpb246ICgpPT4gdm9pZCA9ICgpID0+IHt9KXtcbiAgICAgICAgaWYgKHRoaXMucHJvbXB0UG9wT3Zlcil7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkTWVkaWF0b3JPbmx5KHRoaXMucHJvbXB0UG9wT3Zlcik7XG4gICAgICAgICAgICB0aGlzLnByb21wdFBvcE92ZXIuZGVpbml0KCk7XG4gICAgICAgICAgICB0aGlzLnByb21wdFBvcE92ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJvbXB0UG9wT3ZlciA9IGNyZWF0ZUhhbmRsZSgpO1xuICAgICAgICB0aGlzLmFkZENoaWxkTWVkaWF0b3JPbmx5KHRoaXMucHJvbXB0UG9wT3Zlcik7XG4gICAgICAgIHRoaXMucHJvbXB0UG9wT3Zlci5pbml0KCk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmlzUHJvbXB0U2hvd2luZywgdHJ1ZSk7XG4gICAgICAgIHRoaXMucHJvbXB0UG9wT3Zlci5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMucHJvbXB0UG9wT3Zlci55ZXNTcGluZSwgb25ZZXNIYW5kbGVyKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMucHJvbXB0UG9wT3Zlci5ub1NwaW5lLCBvbk5vSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLnNldEJ1dHRvblByZXNzZWRMaXN0ZW5lcih0aGlzLnByb21wdFBvcE92ZXIudGl0bGVTcGluZSwgb25UaXRsZUhhbmRsZXIpO1xuICAgICAgICAgICAgY29tcGxldGlvbigpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUGF1c2VQb3B2ZXIoKTogUHJvbXB0UG9wT3ZlciB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZVByb21wdERpYWxvZyA9IHRoaXMuY3JlYXRlUHJvbXB0RGlhbG9nKCk7XG4gICAgICAgIGNyZWF0ZVByb21wdERpYWxvZy5zZXRQYXVzZWQoKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVByb21wdERpYWxvZztcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVJlcGxheVBvcHZlcigpOiBQcm9tcHRQb3BPdmVyIHtcbiAgICAgICAgY29uc3QgY3JlYXRlUHJvbXB0RGlhbG9nID0gdGhpcy5jcmVhdGVQcm9tcHREaWFsb2coKTtcbiAgICAgICAgY3JlYXRlUHJvbXB0RGlhbG9nLnNldFJlcGxheSgpO1xuICAgICAgICByZXR1cm4gY3JlYXRlUHJvbXB0RGlhbG9nO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUHJvbXB0RGlhbG9nKCk6IFByb21wdFBvcE92ZXIge1xuICAgICAgICBjb25zdCBwb3BPdmVyVmlldyA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwic3RvcnktZmxvdy1wYW5lbFwiKSBhcyBWaWV3O1xuICAgICAgICBwb3BPdmVyVmlldy5hbHBoYSA9IDA7XG4gICAgICAgIGNvbnN0IHNlbGVjdFBvcG92ZXIgPSBuZXcgUHJvbXB0UG9wT3Zlcihwb3BPdmVyVmlldywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICByZXR1cm4gc2VsZWN0UG9wb3ZlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBsYXlWT1Byb21wdCgpe1xuICAgICAgICBpZiAodGhpcy5wcm9tcHRQb3BPdmVyKXtcbiAgICAgICAgICAgIHRoaXMucHJvbXB0UG9wT3Zlci5wbGF5Vk8oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgb25SZXBsYXlTZWxlY3RlZCgpe1xuICAgICAgICB0aGlzLmFuYWx5dGljc1NlcnZpY2Uuc2VuZEV2ZW50RW5kTWVudUNob2ljZShcIndhdGNoX3JlcGxheVwiKTtcbiAgICAgICAgdGhpcy5kZWluaXRQcm9tcHREaWFsb2coKTtcbiAgICAgICAgdGhpcy5zdG9yeU1lZGlhdG9yLnN0YXJ0UmVwbGF5U3RvcnkoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uTmV3U3RvcnkoKXtcbiAgICAgICAgdGhpcy5hbmFseXRpY3NTZXJ2aWNlLnNlbmRFdmVudEVuZE1lbnVDaG9pY2UoXCJuZXdfc3RvcnlcIik7XG4gICAgICAgIHRoaXMuZGVpbml0UHJvbXB0RGlhbG9nKCk7XG4gICAgICAgIHRoaXMuY2xlYW5VcFN0b3J5KCk7XG4gICAgICAgIHRoaXMuc2hvd05ld1N0b3J5U2NyZWVuKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNvbnRpbnVlU2VsZWN0ZWQoKXtcbiAgICAgICAgdGhpcy5hbmFseXRpY3NTZXJ2aWNlLnNlbmRFdmVudFBhdXNlTWVudUNob2ljZShcInJlc3VtZVwiKTtcbiAgICAgICAgdGhpcy5kZWluaXRQcm9tcHREaWFsb2coKTtcbiAgICAgICAgdGhpcy5zdG9yeU1lZGlhdG9yLnVucGF1c2UoKTtcbiAgICAgICAgdGhpcy51bnBhdXNlKCk7XG4gICAgfVxuICAgIFxuICAgIHBhdXNlKCkge1xuICAgICAgICB0aGlzLmdhbWUuc2hvdWxkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc291bmRTZXJ2aWNlLnBhdXNlQWxsSW5HYW1lKCk7XG4gICAgICAgIFBJWEkuc3BpbmUuU3BpbmUuZ2xvYmFsQXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICB1bnBhdXNlKCkge1xuICAgICAgICB0aGlzLmdhbWUuc2hvdWxkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgUElYSS5zcGluZS5TcGluZS5nbG9iYWxBdXRvVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2UucmVzdW1lQWxsSW5HYW1lKCk7XG4gICAgICAgIHRoaXMuY2FwdGlvblNlcnZpY2UuZGlzcGxheUNhcHRpb24oKTtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBvblBhdXNlTmV3U3RvcnkoKXtcbiAgICAgICAgdGhpcy5nYW1lLnNob3VsZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIFBJWEkuc3BpbmUuU3BpbmUuZ2xvYmFsQXV0b1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZS5zZW5kRXZlbnRQYXVzZU1lbnVDaG9pY2UoXCJuZXdfc3RvcnlcIik7XG4gICAgICAgIHRoaXMub25OZXdTdG9yeSgpO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGNsZWFuVXBTdG9yeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RvcnlNZWRpYXRvcil7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkTWVkaWF0b3JPbmx5KHRoaXMuc3RvcnlNZWRpYXRvcik7XG4gICAgICAgICAgICB0aGlzLnN0b3J5TWVkaWF0b3IuZGVpbml0KCk7XG4gICAgICAgICAgICB0aGlzLnN0b3J5TWVkaWF0b3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93TmV3U3RvcnlTY3JlZW4oKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlU3RvcnlNZWRpYXRvcigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVpbml0UHJvbXB0RGlhbG9nKG9uQ29tcGxldGU6ICgpID0+IHZvaWQgPSAoKSA9PiB7fSl7XG4gICAgICAgIHRoaXMucHJvbXB0UG9wT3Zlci5zdG9wVm9BbmRDYXB0aW9ucygpO1xuICAgICAgICB0aGlzLnJlbW92ZUJ1dHRvblByZXNzZWRMaXN0ZW5lcih0aGlzLnByb21wdFBvcE92ZXIueWVzU3BpbmUpO1xuICAgICAgICB0aGlzLnJlbW92ZUJ1dHRvblByZXNzZWRMaXN0ZW5lcih0aGlzLnByb21wdFBvcE92ZXIubm9TcGluZSk7XG4gICAgICAgIHRoaXMucmVtb3ZlQnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMucHJvbXB0UG9wT3Zlci50aXRsZVNwaW5lKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuaXNQcm9tcHRTaG93aW5nLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucHJvbXB0UG9wT3Zlci5oaWRlKCgpPT57XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkTWVkaWF0b3JPbmx5KHRoaXMucHJvbXB0UG9wT3Zlcik7XG4gICAgICAgICAgICB0aGlzLnByb21wdFBvcE92ZXIuZGVpbml0KCk7XG4gICAgICAgICAgICB0aGlzLnByb21wdFBvcE92ZXIgPSBudWxsO1xuICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn1cblxuIiwiaW1wb3J0IHsgRGlhbG9nVHlwZSB9IGZyb20gXCIuLi9zdGFnZS9jb21tb24vQWN0TWVkaWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHdpbmVQYXJzZXJ7XG5cbiAgICBzdGF0aWMgcGFyc2UoaW5wdXQ6IGFueSl7XG4gICAgICAgIGNvbnN0IHBhc3NhZ2VzID0gaW5wdXQucGFzc2FnZXM7XG4gICAgICAgIHBhc3NhZ2VzLmZvckVhY2goZWxlbWVudCA9PiB0aGlzLnBhcnNlVGV4dChlbGVtZW50LnRleHQpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcGFyc2VUZXh0KHRleHQ6IHN0cmluZyk6IERpYWxvZ1R5cGV7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gdGV4dC5zcGxpdChcIlxcblxcblwiKTtcbiAgICAgICAgY29uc3QganNvblN0cmluZyA9IGFycmF5Lmxhc3QoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJwYXJzaW5nXCIsIGpzb25TdHJpbmcpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc1NldFN0YXRlbWVudChpbnB1dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAvc2V0Olxcc1xcJFthLXpBLVpdKy8udGVzdChpbnB1dCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFNldFN0YXRlbWVudChpbnB1dDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgLy8gY29uc29sZS5sb2coJ2dldFNldFN0YXRlbWVudCcsIGlucHV0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gL3NldDpcXHNcXCRbYS16QS1aXSsuK1xcKS8uZXhlYyhpbnB1dCk7XG4gICAgICAgLy8gY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAmJiAocmVzdWx0Lmxlbmd0aCA+IDApID8gcmVzdWx0WzBdIDogbnVsbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNJZlN0YXRlbWVudChpbnB1dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAvaWY6XFxzXFwkW2EtekEtWl0rLy50ZXN0KGlucHV0KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SWZTdGF0ZW1lbnQoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgIC8vIGNvbnNvbGUubG9nKCdnZXRJZlN0YXRlbWVudCcsIGlucHV0KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IC9pZjpcXHNcXCRbYS16QS1aXSsuK1xcKS8uZXhlYyhpbnB1dCk7XG4gICAgICAgLy8gY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQgJiYgKHJlc3VsdC5sZW5ndGggPiAwKSA/IHJlc3VsdFswXSA6IG51bGw7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFR3aW5lVmFyaWFibGUoaW5wdXQ6IHN0cmluZyk6IFR3aW5lVmFyaWFibGUgfCBudWxsIHtcbiAgICAgICAgY29uc3QgcmVzdWx0TmFtZSA9IC9cXCRbYS16QS1aXSsvLmV4ZWMoaW5wdXQpO1xuICAgICAgICBjb25zdCByZXN1bHRWYXJpYWJsZSA9IC9cXCcuK1xcJ1xcKS8uZXhlYyhpbnB1dCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdE5hbWUgJiYgKHJlc3VsdE5hbWUubGVuZ3RoID4gMCkgJiZcbiAgICAgICAgICAgIHJlc3VsdFZhcmlhYmxlICYmIChyZXN1bHRWYXJpYWJsZS5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUd2luZVZhcmlhYmxlKHJlc3VsdE5hbWVbMF0ucmVwbGFjZSgnJCcsICcnKSxcbiAgICAgICAgICAgICAgICByZXN1bHRWYXJpYWJsZVswXS5yZXBsYWNlKFwiJ1wiLCAnJykucmVwbGFjZShcIidcXClcIiwgJycpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldFR3aW5lQ29uZGl0aW9ucyhpbnB1dENvbmRpdGlvbjogc3RyaW5nKTogKFR3aW5lVmFyaWFibGUgfCBudWxsKVtdIHtcbiAgICAgICAgbGV0IHJlc3VsdHM6IChUd2luZVZhcmlhYmxlIHwgbnVsbClbXSA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHNlcGFyYXRvciA9IFwiW1wiO1xuICAgICAgICBsZXQgaW5wdXQgPSBpbnB1dENvbmRpdGlvbjtcbiAgICAgICAgaWYgKGlucHV0Q29uZGl0aW9uLmluY2x1ZGVzKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXRDb25kaXRpb24uc3BsaXQoc2VwYXJhdG9yKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFuZCA9IFwiYW5kXCI7XG4gICAgICAgIGxldCBjb25kaXRpb25zID0gW2lucHV0XTtcblxuICAgICAgICBpZiAoaW5wdXQuaW5jbHVkZXMoYW5kKSkge1xuICAgICAgICAgICAgY29uZGl0aW9ucyA9IGlucHV0LnNwbGl0KGFuZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHRzID0gY29uZGl0aW9ucy5tYXAoY29uZGl0aW9uID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdE5hbWUgPSAvXFwkW2EtekEtWl0rLy5leGVjKGNvbmRpdGlvbik7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRWYWx1ZSA9IC9pcyAnLisnLy5leGVjKGNvbmRpdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gVHdpbmVQYXJzZXIuZ2V0VHdpbmVDb25kaXRpb24ocmVzdWx0TmFtZSwgcmVzdWx0VmFsdWUpXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VHdpbmVDb25kaXRpb24ocmVzdWx0TmFtZTogUmVnRXhwRXhlY0FycmF5IHwgbnVsbCwgcmVzdWx0VmFsdWU6IFJlZ0V4cEV4ZWNBcnJheSB8IG51bGwpOiBUd2luZVZhcmlhYmxlIHwgbnVsbCB7XG4gICAgICAgIGlmIChyZXN1bHROYW1lICYmIChyZXN1bHROYW1lLmxlbmd0aCA+IDApICYmXG4gICAgICAgICAgICByZXN1bHRWYWx1ZSAmJiAocmVzdWx0VmFsdWUubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHdpbmVWYXJpYWJsZShyZXN1bHROYW1lWzBdLnJlcGxhY2UoJyQnLCAnJyksXG4gICAgICAgICAgICAgICAgcmVzdWx0VmFsdWVbMF0ucmVwbGFjZShcImlzICdcIiwgJycpLnJlcGxhY2UoJ1xcJycsICcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldENvbmRpdGlvblJlc3VsdChpbnB1dDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgLy8gY29uc29sZS5sb2coJ2dldENvbmRpdGlvblJlc3VsdCcsIGlucHV0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gL1xcWyguKylcXF0vLmV4ZWMoaW5wdXQpO1xuICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0ICYmIChyZXN1bHQubGVuZ3RoID4gMCkgPyByZXN1bHRbMF0ucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpIDogbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUd2luZVZhcmlhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nLCBwdWJsaWMgcmVhZG9ubHkgdmFsdWU6IHN0cmluZyl7fVxufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBBY3Rpb25NYW5hZ2VyRGVsZWdhdGUgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL0FjdGlvbk1hbmFnZXJEZWxlZ2F0ZVwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgU291bmRTZXJ2aWNlLCB7IFNvdW5kQ2hhbm5lbCB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9Tb3VuZFNlcnZpY2VcIjtcbmltcG9ydCB7IFNlcnZpY2VOYW1lLCBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgRGlhbG9nVHlwZSB9IGZyb20gXCIuLi8uLi9zdGFnZS9jb21tb24vQWN0TWVkaWF0b3JcIjtcbmltcG9ydCBTRlhBY3Rpb24gZnJvbSBcIi4uLy4uL3V0aWxzL1NGWEFjdGlvblwiO1xuaW1wb3J0IENhbWVyYVNlcnZpY2UsIHsgQ2FtZXJhRWZmZWN0IH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL0NhbWVyYVNlcnZpY2VcIjtcbmltcG9ydCB7IERpYWxvZ0xpbmVEZWxlZ2F0ZSwgQ2hvaWNlRGlhbG9nTGluZURlbGVnYXRlLCBDdWVEaWFsb2dMaW5lRGVsZWdhdGUgfSBmcm9tIFwiLi9EaWFsb2dMaW5lRGVsZWdhdGVcIjtcbmltcG9ydCB7IElEaWFsb2dMaW5lLCBTRlhDaG9pY2UgfSBmcm9tIFwiLi9JRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCIuLi9Ud2luZVNjcmlwdFwiO1xuaW1wb3J0IFN0b3J5RGF0YSBmcm9tIFwiLi4vLi4vc3RhZ2UvY29tbW9uL1N0b3J5RGF0YVwiO1xuaW1wb3J0IFR3aW5lUGFyc2VyLCB7IFR3aW5lVmFyaWFibGUgfSBmcm9tIFwiLi4vVHdpbmVQYXJzZXJcIjtcbmltcG9ydCB7IENhcHRpb25TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL0NhcHRpb25TZXJ2aWNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpYWxvZ0xpbmUgaW1wbGVtZW50cyBJRGlhbG9nTGluZSB7XG4gICAgcHJvdGVjdGVkIHNvdW5kU2VydmljZTogU291bmRTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBjYW1lcmFTZXJ2aWNlOiBDYW1lcmFTZXJ2aWNlO1xuXG4gICAgcHJvdGVjdGVkIGN1cnJlbnRBbmltOiBQSVhJLnNwaW5lLmNvcmUuVHJhY2tFbnRyeSA9IG51bGw7XG5cbiAgICBwcm90ZWN0ZWQgX2RlbGF5OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGlzVGFsa2luZzogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBnZXQgZGVsYXkoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfdm9JZDogc3RyaW5nO1xuICAgIHB1YmxpYyBnZXQgdm9JZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fdm9JZDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX3JvbGU6IHN0cmluZztcbiAgICBwdWJsaWMgZ2V0IHJvbGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JvbGU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9jaG9pY2VUeXBlOiBzdHJpbmc7XG4gICAgcHVibGljIGdldCBjaG9pY2VUeXBlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaG9pY2VUeXBlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfdGFyZ2V0Um9sZTogc3RyaW5nO1xuICAgIHB1YmxpYyBnZXQgdGFyZ2V0Um9sZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0Um9sZTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIF9zZnhDaG9pY2VzOiBTRlhDaG9pY2U7XG4gICAgcHVibGljIGdldCBzZnhDaG9pY2VzKCk6IFNGWENob2ljZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZnhDaG9pY2VzO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgX3NmeDogc3RyaW5nO1xuICAgIHB1YmxpYyBnZXQgc2Z4KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZng7XG4gICAgfVxuICAgIHByb3RlY3RlZCBfc2Z4RGVsYXk6IG51bWJlcjtcbiAgICBwdWJsaWMgZ2V0IHNmeERlbGF5KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZnhEZWxheSB8fCAwO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgX2NhbWVyYTogc3RyaW5nO1xuICAgIHB1YmxpYyBnZXQgY2FtZXJhKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW1lcmEgfHwgbnVsbDtcbiAgICB9XG4gICAgcHJvdGVjdGVkIF9jYW1lcmFUYXJnZXQ6IHN0cmluZztcbiAgICBwdWJsaWMgZ2V0IGNhbWVyYVRhcmdldCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FtZXJhVGFyZ2V0IHx8IG51bGw7XG4gICAgfVxuICAgIHByb3RlY3RlZCBfY2FtZXJhRWZmZWN0RGVsYXk6IG51bWJlcjtcbiAgICBwdWJsaWMgZ2V0IGNhbWVyYUVmZmVjdERlbGF5KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW1lcmFFZmZlY3REZWxheSB8fCAwO1xuICAgIH1cblxuICAgIC8vbmFtZSBvZiB0aGUgdmlldyB0byBnZXQgdGhlIHBvc2l0aW9uIGZyb21cbiAgICBwcm90ZWN0ZWQgX2xvY2F0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIGdldCBsb2NhdGlvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYXRpb24gfHwgbnVsbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2NhcHRpb246IHN0cmluZztcbiAgICBwdWJsaWMgZ2V0IGNhcHRpb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcHRpb247XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBjYXB0aW9uU2VydmljZSgpOiBDYXB0aW9uU2VydmljZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXQoU2VydmljZU5hbWUuQ2FwdGlvblNlcnZpY2UpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IHN0b3J5RGF0YSgpOiBTdG9yeURhdGEge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLlN0b3J5RGF0YSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgYWN0aW9uRGVsZWdhdGUoKTogQWN0aW9uTWFuYWdlckRlbGVnYXRlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5BY3Rpb25NYW5hZ2VyRGVsZWdhdGUpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcnMoKTogTWFwPHN0cmluZywgQ2hhcmFjdGVyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuY2hhcmFjdGVycyk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgY2hhcmFjdGVyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KHRoaXMucm9sZSk7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgZ2V0IHRleHQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkaWFsb2dMaW5lRGVsZWdhdGUoKTogRGlhbG9nTGluZURlbGVnYXRlIHtcbiAgICAgICAgbGV0IGRpYWxvZ0xpbmVEZWxlZ2F0ZSA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5EaWFsb2dMaW5lRGVsZWdhdGUpIGFzIERpYWxvZ0xpbmVEZWxlZ2F0ZTtcbiAgICAgICAgaWYgKCFkaWFsb2dMaW5lRGVsZWdhdGUpIHtcbiAgICAgICAgICAgIGRpYWxvZ0xpbmVEZWxlZ2F0ZSA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5DaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUpIGFzIENob2ljZURpYWxvZ0xpbmVEZWxlZ2F0ZTtcbiAgICAgICAgICAgIGlmICghZGlhbG9nTGluZURlbGVnYXRlKSB7XG4gICAgICAgICAgICAgICAgZGlhbG9nTGluZURlbGVnYXRlID0gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSkgYXMgQ3VlRGlhbG9nTGluZURlbGVnYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWFsb2dMaW5lRGVsZWdhdGU7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBwaWQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZyxcbiAgICAgICAgcHJpdmF0ZSBfdGV4dDogc3RyaW5nLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgbGlua3M6IExpbmtbXSA9IFtdLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgZGlhbG9nRGF0YTogRGlhbG9nVHlwZSxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG5cbiAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2UgPSB0aGlzLmRpU2VydmljZS5nZXQoU2VydmljZU5hbWUuU291bmRTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5jYW1lcmFTZXJ2aWNlID0gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkNhbWVyYVNlcnZpY2UpO1xuXG4gICAgICAgIHRoaXMuaW5pdCh0aGlzLmRpYWxvZ0RhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0KGRhdGE6IERpYWxvZ1R5cGUpIHtcbiAgICAgICAgdGhpcy5fZGVsYXkgPSBkYXRhLmRlbGF5O1xuICAgICAgICB0aGlzLl92b0lkID0gZGF0YS52bztcbiAgICAgICAgdGhpcy5fcm9sZSA9IGRhdGEucm9sZTtcbiAgICAgICAgdGhpcy5fY2hvaWNlVHlwZSA9IGRhdGEuY2hvaWNlVHlwZTtcbiAgICAgICAgdGhpcy5fc2Z4ID0gZGF0YS5zZng7XG4gICAgICAgIHRoaXMuX3NmeERlbGF5ID0gZGF0YS5zZnhEZWxheTtcbiAgICAgICAgdGhpcy5fY2FtZXJhID0gZGF0YS5jYW1lcmE7XG4gICAgICAgIHRoaXMuX2NhbWVyYUVmZmVjdERlbGF5ID0gZGF0YS5jYW1lcmFFZmZlY3REZWxheTtcbiAgICAgICAgdGhpcy5fY2FtZXJhVGFyZ2V0ID0gZGF0YS5jYW1lcmFUYXJnZXQ7XG4gICAgICAgIHRoaXMuX3RhcmdldFJvbGUgPSBkYXRhLnRhcmdldFJvbGU7XG4gICAgICAgIHRoaXMuX3NmeENob2ljZXMgPSBkYXRhLnNmeENob2ljZXM7XG4gICAgICAgIHRoaXMuX2xvY2F0aW9uID0gZGF0YS5sb2NhdGlvbjtcblxuICAgICAgICB0aGlzLnNlYXJjaEZvclZhcmlhYmxlRGVjbGFyYXRpb24oKTtcbiAgICAgICAgdGhpcy5zZWFyY2hGb3JDb25kaXRpb24oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNlYXJjaEZvclZhcmlhYmxlRGVjbGFyYXRpb24oKSB7XG4gICAgICAgIGlmIChUd2luZVBhcnNlci5pc1NldFN0YXRlbWVudCh0aGlzLnRleHQpKSB7XG4gICAgICAgICAgICBjb25zdCBzZXRTdGF0ZW1lbnQgPSBUd2luZVBhcnNlci5nZXRTZXRTdGF0ZW1lbnQodGhpcy50ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IHR3aW5lVmFyaWFibGUgPSBUd2luZVBhcnNlci5nZXRUd2luZVZhcmlhYmxlKHNldFN0YXRlbWVudCk7XG4gICAgICAgICAgICB0aGlzLnN0b3J5RGF0YS5zYXZlLnNldCh0d2luZVZhcmlhYmxlLm5hbWUsIHR3aW5lVmFyaWFibGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZWFyY2hGb3JDb25kaXRpb24oKSB7XG4gICAgICAgIGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IHRoaXMudGV4dC5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzWzBdO1xuICAgICAgICB0aGlzLl9jYXB0aW9uID0gdGhpcy5wcm9jZXNzVGV4dChsaW5lKTtcbiAgICAgICAgY29uc3QgaWZTdGF0ZW1lbnRzID0gbGluZXMuZmlsdGVyKChpdGVtOiBzdHJpbmcsIGluZGV4PzogbnVtYmVyLCBhcnI/OiBzdHJpbmdbXSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFR3aW5lUGFyc2VyLmlzSWZTdGF0ZW1lbnQoaXRlbSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpZlN0YXRlbWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gaWZTdGF0ZW1lbnRzW2luZGV4XTtcblxuICAgICAgICAgICAgY29uc3QgaWZTdGF0ZW1lbnQgPSBUd2luZVBhcnNlci5nZXRJZlN0YXRlbWVudChlbGVtZW50KTtcblxuICAgICAgICAgICAgY29uc3QgdHdpbmVWYXJpYWJsZXMgPSBUd2luZVBhcnNlci5nZXRUd2luZUNvbmRpdGlvbnMoaWZTdGF0ZW1lbnQpO1xuICAgICAgICAgICAgaWYgKHR3aW5lVmFyaWFibGVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDb25kaXRpb25zKGVsZW1lbnQsIHR3aW5lVmFyaWFibGVzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlmU3RhdGVtZW50cy5sZW5ndGggPT0gMCl7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURlZmF1bHRWb09iamVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVDb25kaXRpb25zKGlucHV0OiBzdHJpbmcsIHR3aW5lVmFyaWFibGVzOiAoVHdpbmVWYXJpYWJsZSB8IG51bGwpW10pIHtcbiAgICAgICAgaWYgKHR3aW5lVmFyaWFibGVzLmV2ZXJ5KHR3aW5lVmFyaWFibGUgPT4geyByZXR1cm4gdGhpcy5jaGVja0NvbmRpdGlvbih0d2luZVZhcmlhYmxlKSB9KSkge1xuICAgICAgICAgICAgdGhpcy5fdGV4dCA9IFR3aW5lUGFyc2VyLmdldENvbmRpdGlvblJlc3VsdChpbnB1dCk7XG4gICAgICAgICAgICB0aGlzLl9jYXB0aW9uID0gdGhpcy5fdGV4dDtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHR3aW5lVmFyaWFibGVzLm1hcCh0d2luZVZhcmlhYmxlID0+IHR3aW5lVmFyaWFibGUudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWTyh2YWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTRlgodmFsdWVzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY2hlY2tDb25kaXRpb24odHdpbmVWYXJpYWJsZTogVHdpbmVWYXJpYWJsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yeURhdGEuc2F2ZS5nZXQodHdpbmVWYXJpYWJsZS5uYW1lKSA9PT0gdHdpbmVWYXJpYWJsZS52YWx1ZVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlVk8oY29uZGl0aW9uczogc3RyaW5nW10pIHsgICAgICAgIFxuICAgICAgICBpZiAoaXNPYmplY3QodGhpcy5fdm9JZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZvSWRLZXkgPSB0aGlzLnN0b3J5RGF0YS52b0lETWFwLmdldChjb25kaXRpb25zWzBdKTtcbiAgICAgICAgICAgIGNvbnN0IHZvSWQgPSB0aGlzLl92b0lkW3ZvSWRLZXldO1xuICAgICAgICAgICAgaWYgKHZvSWQpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZvSWQgPSB2b0lkO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Vm9Gb3JTZWNvbmRDb25kaXRpb24oY29uZGl0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRGVmYXVsdFZvT2JqZWN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRWb0ZvckNvbmRpdGlvbihjb25kaXRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRGVmYXVsdFZvT2JqZWN0KCl7XG4gICAgICAgIHRoaXMuc3RvcnlEYXRhLmdldERlZmF1bHRWT0tleXMoKS5mb3JFYWNoKGtleSA9PiB0aGlzLmNoZWNrVm9Gb3JLZXkoa2V5KSlcbiAgICB9XG5cbiAgICBwcml2YXRlIGNoZWNrVm9Gb3JLZXkoZGVmYXVsdEtleTpzdHJpbmcpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHRoaXMuX3ZvSWQpKSB7XG4gICAgICAgICAgICB0aGlzLmdldERlZmF1bHRWbyhkZWZhdWx0S2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RGVmYXVsdFZvKGRlZmF1bHRLZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJLZXkgPSB0aGlzLnN0b3J5RGF0YS5zYXZlLmdldChkZWZhdWx0S2V5KTtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5zdG9yeURhdGEudm9JRE1hcC5nZXQoY2hhcmFjdGVyS2V5KTtcbiAgICAgICAgY29uc3Qgdm9JZCA9IHRoaXMuX3ZvSWRba2V5XTtcbiAgICAgICAgaWYgKHZvSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZvSWQgPSB2b0lkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRWb0ZvclNlY29uZENvbmRpdGlvbihjb25kaXRpb25zOiBzdHJpbmdbXSl7XG4gICAgICAgIGlmIChpc09iamVjdCh0aGlzLl92b0lkKSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5zdG9yeURhdGEudm9JRE1hcC5nZXQoY29uZGl0aW9uc1sxXSk7XG4gICAgICAgICAgICBjb25zdCB2b0lkID0gdGhpcy5fdm9JZFtrZXldO1xuICAgICAgICAgICAgaWYgKHZvSWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92b0lkID0gdm9JZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBnZXRWb0ZvckNvbmRpdGlvbihjb25kaXRpb25zOiBzdHJpbmdbXSl7XG4gICAgICAgIGlmIChpc09iamVjdCh0aGlzLl92b0lkKSkge1xuICAgICAgICAgICAgY29uc3Qgdm9JZEtleSA9IHRoaXMuc3RvcnlEYXRhLnZvSURNYXAuZ2V0KGNvbmRpdGlvbnNbMF0pO1xuICAgICAgICAgICAgY29uc3Qgdm9JZCA9IHRoaXMuX3ZvSWRbdm9JZEtleV07XG4gICAgICAgICAgICBpZiAodm9JZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZvSWQgPSB2b0lkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU0ZYKGNvbmRpdGlvbnM6IHN0cmluZ1tdKSB7XG4gICAgICAgIGlmIChpc09iamVjdCh0aGlzLl9zZngpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLnN0b3J5RGF0YS52b0lETWFwLmdldChjb25kaXRpb25zWzBdKTtcbiAgICAgICAgICAgIGNvbnN0IHNmeCA9IHRoaXMuX3NmeFtrZXldO1xuICAgICAgICAgICAgaWYgKHNmeCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2Z4ID0gdGhpcy5fc2Z4W2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHRoaXMuX3NmeCkpIHsgLy9uZXN0ZWQgY29uZGl0aW9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NmeCA9IHRoaXMuX3NmeFtjb25kaXRpb25zWzFdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRLZXkgPSBcImNvc3R1bWVcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXJLZXkgPSB0aGlzLnN0b3J5RGF0YS5zYXZlLmdldChkZWZhdWx0S2V5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLnN0b3J5RGF0YS52b0lETWFwLmdldChjaGFyYWN0ZXJLZXkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NmeCA9IHRoaXMuX3NmeFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzVGV4dChpbnB1dDogc3RyaW5nKTogc3RyaW5ne1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5zdG9yeURhdGEuc2F2ZS5rZXlzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gXCIkXCIgKyBrZXk7XG4gICAgICAgICAgICBpbnB1dC5yZXBsYWNlKHBhdHRlcm4sIHRoaXMuc3RvcnlEYXRhLnNhdmUuZ2V0KGtleSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGxheURpYWxvZygpIHtcbiAgICAgICAgY29uc3QgZGlhbG9nTGluZURlbGVnYXRlID0gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLkRpYWxvZ0xpbmVEZWxlZ2F0ZSkgYXMgRGlhbG9nTGluZURlbGVnYXRlO1xuICAgICAgICBpZiAoIWRpYWxvZ0xpbmVEZWxlZ2F0ZSkge1xuICAgICAgICAgICAgdGhyb3cgXCJyZXF1aXJlIGEgRGlhbG9nTGluZURlbGVnYXRlIGluIHRoZSBkaXNlcnZpY2VcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSBbXTtcbiAgICAgICAgYWN0aW9ucy5wdXNoKHRoaXMuZ2V0RGVsYXlBY3Rpb24oKSk7XG4gICAgICAgIGFjdGlvbnMucHVzaCh0aGlzLmdldEV2ZW50QWN0aW9ucygpKTtcblxuICAgICAgICBhY3Rpb25zLnB1c2godGhpcy5nZXRFbmRPZkRpYWxvZ0FjdGlvbih0aGlzLmNoYXJhY3RlciwgZGlhbG9nTGluZURlbGVnYXRlKSk7XG5cbiAgICAgICAgY29uc3QgcmVhZExpbmVzQWN0aW9ucyA9IGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKGFjdGlvbnMpO1xuICAgICAgICB0aGlzLmFjdGlvbkRlbGVnYXRlLnJ1blVuaXF1ZUFjdGlvbihyZWFkTGluZXNBY3Rpb25zKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0RGVsYXlBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSh0aGlzLl9kZWxheSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXRFdmVudEFjdGlvbnMoKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLmdldFRhbGtBY3Rpb24oKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0U0ZYQWN0aW9uSWZOZWVkZWQoKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0Q2FtZXJhQWN0aW9uSWZOZWVkZWQoKSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFRhbGtBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2FwdGlvblNlcnZpY2UuZGlzcGxheUNhcHRpb24odGhpcy5fY2FwdGlvbikpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlZPKHRoaXMuZ2V0Vm9Gb3JDaGFyYWN0ZXIoKSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1RhbGtpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBbmltID0gdGhpcy5jaGFyYWN0ZXIuc3BpbmUuc3RhdGUuZ2V0Q3VycmVudCgwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIucGxheVRhbGsoKVxuICAgICAgICAgICAgICAgIH0gKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNhcHRpb25TZXJ2aWNlLmNsZWFyQ2FwdGlvbnMoKSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzVGFsa2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1OYW1lID0gKHRoaXMuY3VycmVudEFuaW0gJiYgdGhpcy5jdXJyZW50QW5pbS5hbmltYXRpb24gJiYgdGhpcy5jdXJyZW50QW5pbS5hbmltYXRpb24ubmFtZSApfHwgdGhpcy5jaGFyYWN0ZXIuaWRsZUFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5wbGF5QW5pbShhbmltTmFtZSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvd0NhcHRpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5pc1RhbGtpbmcpe1xuICAgICAgICAgICAgdGhpcy5jYXB0aW9uU2VydmljZS5kaXNwbGF5Q2FwdGlvbih0aGlzLl9jYXB0aW9uKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldFZvRm9yQ2hhcmFjdGVyKCl7XG4gICAgICAgIGlmICghdGhpcy5jaGFyYWN0ZXIpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gY2hhcmFjdGVyIGZvciBcIiArIHRoaXMpO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgdm8gPSB0aGlzLnZvSWQucmVwbGFjZShcIi5tcDNcIiwgXCItXCIgKyB0aGlzLmNoYXJhY3Rlci5jaGFyYWN0ZXJUeXBlICsgXCIubXAzXCIpO1xuICAgICAgICByZXR1cm4gdm87XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFNGWEFjdGlvbklmTmVlZGVkKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBpZiAoIXRoaXMuc2Z4KSB7XG4gICAgICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KHRoaXMuc2Z4RGVsYXkpLFxuICAgICAgICAgICAgbmV3IFNGWEFjdGlvbih0aGlzLnNmeCwgU291bmRDaGFubmVsLkcyLCBmYWxzZSwgdGhpcy5kaVNlcnZpY2UpXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRDYW1lcmFBY3Rpb25JZk5lZWRlZCgpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgbGV0IGNhbWVyYUFjdGlvbnM6IGZyYW1ld29yay5BY3Rpb25bXSA9IFtmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSh0aGlzLmNhbWVyYUVmZmVjdERlbGF5KV07XG4gICAgICAgIGlmICghdGhpcy5jYW1lcmEpIHtcbiAgICAgICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVmZmVjdHMgPSB0aGlzLmNhbWVyYS5zcGxpdChcInxcIik7XG4gICAgICAgIGxldCB0YXJnZXQgPSBudWxsO1xuICAgICAgICBsZXQgZ2xvYmFsVGFyZ2V0UG9zaXRpb24gPSBudWxsO1xuICAgICAgICBlZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAoZWZmZWN0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBDYW1lcmFFZmZlY3Quem9vbU91dDpcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhQWN0aW9ucy5wdXNoKHRoaXMuY2FtZXJhU2VydmljZS5nZXRab29tT3V0QWN0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIENhbWVyYUVmZmVjdC56b29tSW46XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jYW1lcmFUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwibm8gY2FtZXJhIHRhcmdlciBmb3IgcGFuIGFjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy5jaGFyYWN0ZXJzLmdldCh0aGlzLmNhbWVyYVRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFRhcmdldFBvc2l0aW9uID0gdGFyZ2V0LnNwaW5lLnRvR2xvYmFsKHRhcmdldC5zcGluZS5wb3NpdGlvbikgYXMgUElYSS5Qb2ludDtcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhQWN0aW9ucy5wdXNoKHRoaXMuY2FtZXJhU2VydmljZS5nZXRab29tSW5BY3Rpb24oZ2xvYmFsVGFyZ2V0UG9zaXRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBDYW1lcmFFZmZlY3Quc2hha2U6XG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYUFjdGlvbnMucHVzaCh0aGlzLmNhbWVyYVNlcnZpY2UuZ2V0U2hha2VBY3Rpb24oKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQ2FtZXJhRWZmZWN0LnBhbjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNhbWVyYVRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJubyBjYW1lcmEgdGFyZ2VyIGZvciBwYW4gYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSB0aGlzLmNoYXJhY3RlcnMuZ2V0KHRoaXMuY2FtZXJhVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVGFyZ2V0UG9zaXRpb24gPSB0YXJnZXQuc3BpbmUudG9HbG9iYWwodGFyZ2V0LnNwaW5lLnBvc2l0aW9uKSBhcyBQSVhJLlBvaW50O1xuICAgICAgICAgICAgICAgICAgICBjYW1lcmFBY3Rpb25zLnB1c2godGhpcy5jYW1lcmFTZXJ2aWNlLmdldFBhbkFjdGlvbihnbG9iYWxUYXJnZXRQb3NpdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShjYW1lcmFBY3Rpb25zKVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRFbmRPZkRpYWxvZ0FjdGlvbihjaGFyYWN0ZXI6IENoYXJhY3RlciwgZGlhbG9nTGluZURlbGVnYXRlOiBEaWFsb2dMaW5lRGVsZWdhdGUpOiBhbnkge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyLnBsYXlJZGxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlhbG9nTGluZURlbGVnYXRlKXtcbiAgICAgICAgICAgICAgICBkaWFsb2dMaW5lRGVsZWdhdGUuZGlkVGVybWluYXRlKHRoaXMuZ2V0VGhpcmRQYXNzYWdlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0TmV4dFBhc3NhZ2UoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgbGluayA9IHRoaXMubGlua3MuZmlyc3QoKTtcbiAgICAgICAgcmV0dXJuIGxpbmsgPyBsaW5rLmxpbmsgOiBudWxsO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0U2Vjb25kUGFzc2FnZSgpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBsaW5rID0gdGhpcy5saW5rc1sxXTtcbiAgICAgICAgcmV0dXJuIGxpbmsgPyBsaW5rLmxpbmsgOiB0aGlzLmdldE5leHRQYXNzYWdlKCk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXRUaGlyZFBhc3NhZ2UoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgbGluayA9IHRoaXMubGlua3NbMl07XG4gICAgICAgIHJldHVybiBsaW5rID8gbGluay5saW5rIDogdGhpcy5nZXROZXh0UGFzc2FnZSgpO1xuICAgIH1cblxuICAgIGdldExpbmsoaW5kZXg6IG51bWJlcik6IExpbmsge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5rc1tpbmRleF07XG4gICAgfVxuXG4gICAgZ2V0TGlua0J5SWQoaWQ6IHN0cmluZyk6IExpbmsge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5rcy5maW5kKChpdGVtOiBMaW5rKSA9PiBpdGVtLmxpbmsgPT09IGlkKTtcbiAgICB9XG5cbiAgICBnZXRSZXBsYXkoKTogSURpYWxvZ0xpbmUge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmFjdGlvbkRlbGVnYXRlLmNhbmNlbFVuaXF1ZUFjdGlvbigpO1xuICAgICAgICBpZiAodGhpcy5kaWFsb2dMaW5lRGVsZWdhdGUpe1xuICAgICAgICAgICAgdGhpcy5kaWFsb2dMaW5lRGVsZWdhdGUuZGlkVGVybWluYXRlKHRoaXMuZ2V0TmV4dFBhc3NhZ2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjYW5jZWwoKXtcbiAgICAgICAgdGhpcy5hY3Rpb25EZWxlZ2F0ZS5jYW5jZWxVbmlxdWVBY3Rpb24oKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgRGlhbG9nTGluZSBmcm9tIFwiLi9EaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgRGlhbG9nQ3VlRGF0YSB9IGZyb20gXCIuLi9EaWFsb2dEYXRhXCI7XG5pbXBvcnQgeyBDdWVEaWFsb2dMaW5lRGVsZWdhdGUgfSBmcm9tIFwiLi9EaWFsb2dMaW5lRGVsZWdhdGVcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5cblxuZXhwb3J0IGNsYXNzIEN1ZURpYWxvZ0xpbmUgZXh0ZW5kcyBEaWFsb2dMaW5lIHtcblxuICAgIHB1YmxpYyBnZXQgY3VlRGlhbG9nRGF0YSgpOiBEaWFsb2dDdWVEYXRhe1xuICAgICAgICByZXR1cm4gdGhpcy5kaWFsb2dEYXRhIGFzIERpYWxvZ0N1ZURhdGE7XG4gICAgfVxuXG4gICAgcHVibGljIHBsYXlEaWFsb2coKSB7XG4gICAgICAgIGNvbnN0IGN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5DdWVEaWFsb2dMaW5lRGVsZWdhdGUpO1xuICAgICAgICBpZiAoIWN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSkge1xuICAgICAgICAgICAgdGhyb3cgXCJyZXF1aXJlIGEgQ3VlRGlhbG9nTGluZURlbGVnYXRlIGluIHRoZSBkaXNlcnZpY2VcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSBbXTtcbiAgICAgICAgYWN0aW9ucy5wdXNoKGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KHRoaXMuZGVsYXkpKTtcbiAgICAgICAgYWN0aW9ucy5wdXNoKGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgIEN1ZURpYWxvZ0xpbmUuZ2V0Q3VlQWN0aW9ucyh0aGlzLmN1ZURpYWxvZ0RhdGEuY3VlRGVsYXksIHRoaXMuY3VlRGlhbG9nRGF0YS5jdWUsIGN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSksXG4gICAgICAgICAgICB0aGlzLmdldEV2ZW50QWN0aW9ucygpXG4gICAgICAgIF0pKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLm5hcnJhdG9yKTtcbiAgICAgICAgYWN0aW9ucy5wdXNoKHRoaXMuZ2V0RW5kT2ZEaWFsb2dBY3Rpb24oY2hhcmFjdGVyLGN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSkpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVhZExpbmVzQWN0aW9ucyA9IGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKGFjdGlvbnMpO1xuICAgICAgICB0aGlzLmFjdGlvbkRlbGVnYXRlLnJ1blVuaXF1ZUFjdGlvbihyZWFkTGluZXNBY3Rpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEN1ZUFjdGlvbnMoY3VlRGVsYXk6IG51bWJlciwgY3VlOiBzdHJpbmcsIGN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZTogQ3VlRGlhbG9nTGluZURlbGVnYXRlKTogZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KGN1ZURlbGF5IHx8IDApLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3VlRGlhbG9nTGluZURlbGVnYXRlLm9uQ3VlKCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSk7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQgU2VsZWN0aW9uUG9wT3ZlciBmcm9tIFwiLi9TZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBDb3N0dW1lcyB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0Nvc3R1bWVzXCI7XG5pbXBvcnQgeyBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbiB9IGZyb20gXCIuLi8uLi91dGlscy9BbmltYXRpb25BY3Rpb25zXCI7XG5cbmVudW0gQ29zdHVtZUFuaW1hdGlvbiB7XG4gICAgaWRsZSA9IFwiaWRsZVwiLFxuICAgIHNob3cgPSBcInNob3dcIixcbiAgICBoaWRlID0gXCJoaWRlXCIsXG4gICAgaGlkZUN1dG91dCA9IFwiaGlkZS1jdXRvdXRcIixcbiAgICBzZWxlY3QgPSBcInNlbGVjdFwiXG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb3N0dW1lU2VsZWN0aW9uUG9wT3ZlciBleHRlbmRzIFNlbGVjdGlvblBvcE92ZXI8Q29zdHVtZXM+IHtcblxuICAgIHByaXZhdGUgaGlkZUFuaW1hdGlvbk1hcDogTWFwPGZyYW1ld29yay5TcGluZVZpZXcsIHN0cmluZz4gPSBudWxsO1xuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLmhpZGVBbmltYXRpb25NYXAgPSBuZXcgTWFwKFtcbiAgICAgICAgICAgIFt0aGlzLl9idXR0b25MZWZ0LCBDb3N0dW1lQW5pbWF0aW9uLmhpZGVdLFxuICAgICAgICAgICAgW3RoaXMuX2J1dHRvbk1pZGRsZSwgQ29zdHVtZUFuaW1hdGlvbi5oaWRlXSxcbiAgICAgICAgICAgIFt0aGlzLl9idXR0b25SaWdodCwgQ29zdHVtZUFuaW1hdGlvbi5oaWRlXSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIFxuICAgIHByb3RlY3RlZCBnZXRTa2luTmFtZShzZWxlY3Rpb25UeXBlOiBDb3N0dW1lcyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb25UeXBlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRPblNlbGVjdEFuaW1BY3Rpb24oc3BpbmU6IGZyYW1ld29yay5TcGluZVZpZXcpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgdGhpcy5jYW5jZWxVbmlxdWVBY3Rpb24oKTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHNwaW5lLCBDb3N0dW1lQW5pbWF0aW9uLnNlbGVjdCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFNlbGVjdGVkKHNwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3KSB7XG4gICAgICAgIHRoaXMuaGlkZUFuaW1hdGlvbk1hcC5zZXQoc3BpbmUsIENvc3R1bWVBbmltYXRpb24uaGlkZUN1dG91dCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGN1c3RvbUhpZGVBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbCh0aGlzLmJ1dHRvbnMubWFwKChzcGluZSkgPT4gY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb24oc3BpbmUsIHRoaXMuaGlkZUFuaW1hdGlvbk1hcC5nZXQoc3BpbmUpLCBmYWxzZSkpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKHNwaW5lID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3BpbmUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pXG4gICAgfVxuXG59XG5cbiIsImltcG9ydCBEaWFsb2dMaW5lIGZyb20gXCIuL0RpYWxvZ0xpbmVcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUgfSBmcm9tIFwiLi9EaWFsb2dMaW5lRGVsZWdhdGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4vQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgRGlhbG9nVHlwZSB9IGZyb20gXCIuLi8uLi9zdGFnZS9jb21tb24vQWN0TWVkaWF0b3JcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJUmVwbGF5e31cblxuZXhwb3J0IGNsYXNzIENob2ljZURpYWxvZ1JlcGxheSBleHRlbmRzIERpYWxvZ0xpbmUgaW1wbGVtZW50cyBJUmVwbGF5e1xuXG4gICAgcHJvdGVjdGVkIF9yZWNvcmRlZENob2ljZTogc3RyaW5nID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjaG9pY2VEaWFsb2dMaW5lOiBDaG9pY2VEaWFsb2dMaW5lLCByZWNvcmRlZENob2ljZTogc3RyaW5nKXtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBjaG9pY2VEaWFsb2dMaW5lLnBpZCxcbiAgICAgICAgICAgIGNob2ljZURpYWxvZ0xpbmUubmFtZSxcbiAgICAgICAgICAgIGNob2ljZURpYWxvZ0xpbmUudGV4dCxcbiAgICAgICAgICAgIGNob2ljZURpYWxvZ0xpbmUubGlua3MsXG4gICAgICAgICAgICBjaG9pY2VEaWFsb2dMaW5lLmRpYWxvZ0RhdGEsXG4gICAgICAgICAgICBjaG9pY2VEaWFsb2dMaW5lLmRpU2VydmljZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9yZWNvcmRlZENob2ljZSA9IHJlY29yZGVkQ2hvaWNlO1xuXG4gICAgICAgIHRoaXMuX2NhcHRpb24gPSB0aGlzLmNob2ljZURpYWxvZ0xpbmUuY2FwdGlvbjtcbiAgICAgICAgdGhpcy5fZGVsYXkgPSB0aGlzLmNob2ljZURpYWxvZ0xpbmUuZGVsYXk7XG4gICAgICAgIHRoaXMuX3ZvSWQgPSB0aGlzLmNob2ljZURpYWxvZ0xpbmUudm9JZDtcbiAgICAgICAgdGhpcy5fcm9sZSA9IHRoaXMuY2hvaWNlRGlhbG9nTGluZS5yb2xlO1xuICAgICAgICB0aGlzLl9jaG9pY2VUeXBlID0gdGhpcy5jaG9pY2VEaWFsb2dMaW5lLmNob2ljZVR5cGU7XG4gICAgICAgIHRoaXMuX3NmeCA9IHRoaXMuY2hvaWNlRGlhbG9nTGluZS5zZng7XG4gICAgICAgIHRoaXMuX3NmeERlbGF5ID0gdGhpcy5jaG9pY2VEaWFsb2dMaW5lLnNmeERlbGF5O1xuICAgICAgICB0aGlzLl9jYW1lcmEgPSB0aGlzLmNob2ljZURpYWxvZ0xpbmUuY2FtZXJhO1xuICAgICAgICB0aGlzLl9jYW1lcmFFZmZlY3REZWxheSA9IHRoaXMuY2hvaWNlRGlhbG9nTGluZS5jYW1lcmFFZmZlY3REZWxheTtcbiAgICAgICAgdGhpcy5fY2FtZXJhVGFyZ2V0ID0gdGhpcy5jaG9pY2VEaWFsb2dMaW5lLmNhbWVyYVRhcmdldDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0Um9sZSA9IHRoaXMuY2hvaWNlRGlhbG9nTGluZS50YXJnZXRSb2xlO1xuICAgICAgICB0aGlzLl9zZnhDaG9pY2VzID0gdGhpcy5jaG9pY2VEaWFsb2dMaW5lLnNmeENob2ljZXM7XG4gICAgfVxuICAgIFxuICAgIHByb3RlY3RlZCBpbml0KGRhdGE6IERpYWxvZ1R5cGUpIHt9XG5cbiAgICBwdWJsaWMgcGxheURpYWxvZygpIHsgICAgICAgXG4gICAgICAgIGNvbnN0IGRpYWxvZ0xpbmVEZWxlZ2F0ZSA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5DaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUpO1xuICAgICAgICBpZighZGlhbG9nTGluZURlbGVnYXRlKXtcbiAgICAgICAgICAgIHRocm93IFwicmVxdWlyZSBhIENob2ljZURpYWxvZ0xpbmVEZWxlZ2F0ZSBpbiB0aGUgZGlzZXJ2aWNlXCI7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhY3Rpb25zID0gW107XG4gICAgICAgIGFjdGlvbnMucHVzaCh0aGlzLmdldERlbGF5QWN0aW9uKCkpO1xuICAgICAgICBhY3Rpb25zLnB1c2godGhpcy5nZXRFdmVudEFjdGlvbnMoKSk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlciA9IHRoaXMuY2hhcmFjdGVycy5nZXQodGhpcy5yb2xlKTtcbiAgICAgICAgYWN0aW9ucy5wdXNoKENob2ljZURpYWxvZ1JlcGxheS5nZXRDaG9pY2VBY3Rpb24oY2hhcmFjdGVyLCB0aGlzLl9yZWNvcmRlZENob2ljZSAsIGRpYWxvZ0xpbmVEZWxlZ2F0ZSkpO1xuXG4gICAgICAgIGNvbnN0IHJlYWRMaW5lc0FjdGlvbnMgPSBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShhY3Rpb25zKTtcbiAgICAgICAgdGhpcy5hY3Rpb25EZWxlZ2F0ZS5ydW5VbmlxdWVBY3Rpb24ocmVhZExpbmVzQWN0aW9ucyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRDaG9pY2VBY3Rpb24oXG4gICAgICAgIGNoYXJhY3RlcjogQ2hhcmFjdGVyLFxuICAgICAgICByZWNvcmRlZENob2ljZTogc3RyaW5nLFxuICAgICAgICBkaWFsb2dMaW5lRGVsZWdhdGU6IENob2ljZURpYWxvZ0xpbmVEZWxlZ2F0ZSk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBjaG9pY2VBY3Rpb24gPSBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3Rlci5wbGF5SWRsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaWFsb2dMaW5lRGVsZWdhdGUub25DaG9pY2UocmVjb3JkZWRDaG9pY2UpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBjaG9pY2VBY3Rpb247ICAgICBcbiAgICB9XG5cbiAgICBmaW5pc2hDaG9pY2UoY2hvaWNlSWQ6IHN0cmluZykge1xuICAgICAgIC8vRE8gTk9USElOR1xuICAgIH1cbn1cbiIsImltcG9ydCBEaWFsb2dMaW5lIGZyb20gXCIuL0RpYWxvZ0xpbmVcIjtcbmltcG9ydCB7IERhdGFOYW1lLCBTZXJ2aWNlTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgQ2hvaWNlRGlhbG9nTGluZURlbGVnYXRlIH0gZnJvbSBcIi4vRGlhbG9nTGluZURlbGVnYXRlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IHsgSURpYWxvZ0xpbmUgfSBmcm9tIFwiLi9JRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgQ2hvaWNlRGlhbG9nUmVwbGF5IH0gZnJvbSBcIi4vQ2hvaWNlRGlhbG9nUmVwbGF5XCI7XG5pbXBvcnQgQnVpbGRJbmZvU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvQnVpbGRJbmZvU2VydmljZVwiO1xuaW1wb3J0IHsgQW5hbHl0aWNzU2VydmljZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9BbmFseXRpY3NTZXJ2aWNlXCI7XG5cbmV4cG9ydCBjbGFzcyBDaG9pY2VEaWFsb2dMaW5lIGV4dGVuZHMgRGlhbG9nTGluZSB7XG5cbiAgICBwcm90ZWN0ZWQgZGlhbG9nVGltZXIgPSAwO1xuICAgIHByb3RlY3RlZCBtYXhUaW1lciA9IDEwO1xuXG4gICAgcHJvdGVjdGVkIGJsb2NraW5nQWN0aW9uOiBmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9uID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgX3JlcGxheTogQ2hvaWNlRGlhbG9nUmVwbGF5ID0gbnVsbDs7XG4gICAgY2hvaWNlSWQ6IHN0cmluZyA9IG51bGw7XG5cbiAgICBwcml2YXRlIGdldCBidWlsZFNlcnZpY2UgKCk6IEJ1aWxkSW5mb1NlcnZpY2V7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXQoU2VydmljZU5hbWUuQnVpbGRJbmZvU2VydmljZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBhbmFseXRpY3NTZXJ2aWNlKCk6IEFuYWx5dGljc1NlcnZpY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkFuYWx5dGljc1NlcnZpY2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5RGlhbG9nKCkge1xuICAgICAgICBjb25zdCBkaWFsb2dMaW5lRGVsZWdhdGUgPSB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuQ2hvaWNlRGlhbG9nTGluZURlbGVnYXRlKTtcbiAgICAgICAgaWYoIWRpYWxvZ0xpbmVEZWxlZ2F0ZSl7XG4gICAgICAgICAgICB0aHJvdyBcInJlcXVpcmUgYSBDaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUgaW4gdGhlIGRpc2VydmljZVwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5kaWFsb2dUaW1lciA9IDA7XG5cbiAgICAgICAgYWN0aW9ucy5wdXNoKHRoaXMuZ2V0RGVsYXlBY3Rpb24oKSk7XG4gICAgICAgIGFjdGlvbnMucHVzaCh0aGlzLmdldEV2ZW50QWN0aW9ucygpKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gdGhpcy5jaGFyYWN0ZXJzLmdldCh0aGlzLnJvbGUpO1xuICAgICAgICBhY3Rpb25zLnB1c2goQ2hvaWNlRGlhbG9nTGluZS5nZXRDaG9pY2VBY3Rpb24oY2hhcmFjdGVyLCB0aGlzLmRpYWxvZ0RhdGEuY2hvaWNlVHlwZSwgKHRoaXMud2FpdEZvckNob2ljZSkuYmluZCh0aGlzKSwgZGlhbG9nTGluZURlbGVnYXRlKSk7XG5cbiAgICAgICAgY29uc3QgcmVhZExpbmVzQWN0aW9ucyA9IGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKGFjdGlvbnMpO1xuICAgICAgICB0aGlzLmFjdGlvbkRlbGVnYXRlLnJ1blVuaXF1ZUFjdGlvbihyZWFkTGluZXNBY3Rpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldENob2ljZUFjdGlvbihcbiAgICAgICAgY2hhcmFjdGVyOiBDaGFyYWN0ZXIsIFxuICAgICAgICBjaG9pY2VUeXBlOiBzdHJpbmcsIFxuICAgICAgICB3YWl0Rm9yQ2hvaWNlOiAoYWN0aW9uLCBkZWx0YSwgZGVsdGFNUykgPT4gdm9pZCwgXG4gICAgICAgIGRpYWxvZ0xpbmVEZWxlZ2F0ZTogQ2hvaWNlRGlhbG9nTGluZURlbGVnYXRlKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgICAgICBjb25zdCBjaG9pY2VBY3Rpb24gPSBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcikge1xuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIucGxheUlkbGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlhbG9nTGluZURlbGVnYXRlLm9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZVR5cGUpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5CbG9ja2luZ0Z1bmMod2FpdEZvckNob2ljZSwgdHJ1ZSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3Rlci5wbGF5SWRsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gY2hvaWNlQWN0aW9uOyAgICAgXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNhdmVDaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyl7XG4gICAgICAgIHRoaXMuX3JlcGxheSA9IG5ldyBDaG9pY2VEaWFsb2dSZXBsYXkodGhpcywgY2hvaWNlSWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBoYXNDaG9pY2UoKTpib29sZWFue1xuICAgICAgICByZXR1cm4gdGhpcy5jaG9pY2VJZCAhPSBudWxsIDtcbiAgICB9XG4gICBcbiAgICB3YWl0Rm9yQ2hvaWNlKGFjdGlvbiwgZGVsdGEsIGRlbHRhTVMpIHtcbiAgICAgICAgaWYgKCEgdGhpcy5idWlsZFNlcnZpY2UuaXNEZWJ1Zyl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcy5kaWFsb2dUaW1lciArPSBkZWx0YTtcbiAgICAgICAgLy8gaWYgKHRoaXMuZGlhbG9nVGltZXIgPiAzKXtcblxuICAgICAgICAvLyAgICAgY29uc3QgY2hvaWNlRGVsZWdhdGUgPSB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuQ2hvaWNlRGlhbG9nTGluZURlbGVnYXRlKTtcbiAgICAgICAgLy8gICAgIGlmICh0aGlzLmxpbmtzLmxlbmd0aD4xKXtcbiAgICBcbiAgICAgICAgLy8gICAgICAgICBjaG9pY2VEZWxlZ2F0ZS5vbkNob2ljZSh0aGlzLmdldFNlY29uZFBhc3NhZ2UoKSk7XG4gICAgICAgIC8vICAgICB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IGNob2ljZSA9IE9iamVjdC5rZXlzKHRoaXMuc2Z4Q2hvaWNlcylbMF07XG4gICAgICAgIC8vICAgICAgICAgaWYgKGNob2ljZSl7XG4gICAgICAgIC8vICAgICAgICAgICAgIGNob2ljZURlbGVnYXRlLm9uQ2hvaWNlKGNob2ljZSk7XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgYWN0aW9uLmZpbmlzaCgpO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgZmluaXNoQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jaG9pY2VJZCA9IGNob2ljZUlkO1xuICAgICAgICB0aGlzLnNhdmVDaG9pY2UoY2hvaWNlSWQpO1xuICAgICAgICB0aGlzLmFuYWx5dGljc1NlcnZpY2Uuc2VuZEV2ZW50TmFycmF0aXZlSW50ZXJhY3Rpb24oY2hvaWNlSWQpO1xuICAgICAgICBpZiAodGhpcy5ibG9ja2luZ0FjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5ibG9ja2luZ0FjdGlvbi5maW5pc2goKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFJlcGxheSgpOiBJRGlhbG9nTGluZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXBsYXk7XG4gICAgfVxuXG4gICAgZ2V0RGVmYXVsdENob2ljZSgpe1xuICAgICAgICBjb25zdCBsaW5rID0gdGhpcy5nZXRMaW5rKDApLmxpbms7XG4gICAgICAgIGlmKCFsaW5rKXtcbiAgICAgICAgICAgIHRocm93IFwibm8gbGluayB0byBjaG9vc2UgZnJvbS4gXCIgKyB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5rO1xuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuYWN0aW9uRGVsZWdhdGUuY2FuY2VsVW5pcXVlQWN0aW9uKCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgRGlhbG9nTGluZSBmcm9tIFwiLi9EaWFsb2dMaW5lXCI7XG5cbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBEaWFsb2dDdWVEYXRhIH0gZnJvbSBcIi4uL0RpYWxvZ0RhdGFcIjtcbmltcG9ydCB7IEN1ZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi9DdWVEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dSZXBsYXkgfSBmcm9tIFwiLi9DaG9pY2VEaWFsb2dSZXBsYXlcIjtcblxuZXhwb3J0IGNsYXNzIEN1ZUNob2ljZURpYWxvZ1JlcGxheSBleHRlbmRzIENob2ljZURpYWxvZ1JlcGxheSB7XG5cbiAgICBwdWJsaWMgZ2V0IGN1ZURpYWxvZ0RhdGEoKTogRGlhbG9nQ3VlRGF0YSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpYWxvZ0RhdGEgYXMgRGlhbG9nQ3VlRGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGxheURpYWxvZygpIHtcbiAgICAgICAgY29uc3QgY3VlRGlhbG9nTGluZURlbGVnYXRlID0gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSk7XG4gICAgICAgIGNvbnN0IGNob2ljZURpYWxvZ0xpbmVEZWxlZ2F0ZSA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5DaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUpO1xuXG4gICAgICAgIGlmICghY3VlRGlhbG9nTGluZURlbGVnYXRlKSB7XG4gICAgICAgICAgICB0aHJvdyBcInJlcXVpcmUgYSBDdWVEaWFsb2dMaW5lRGVsZWdhdGUgaW4gdGhlIGRpc2VydmljZVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2hvaWNlRGlhbG9nTGluZURlbGVnYXRlKSB7XG4gICAgICAgICAgICB0aHJvdyBcInJlcXVpcmUgYSBDaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUgaW4gdGhlIGRpc2VydmljZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IFtdO1xuICAgICAgICBhY3Rpb25zLnB1c2goZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkodGhpcy5kZWxheSkpO1xuICAgICAgICBhY3Rpb25zLnB1c2goZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgQ3VlRGlhbG9nTGluZS5nZXRDdWVBY3Rpb25zKHRoaXMuY3VlRGlhbG9nRGF0YS5jdWVEZWxheSwgdGhpcy5jdWVEaWFsb2dEYXRhLmN1ZSwgY3VlRGlhbG9nTGluZURlbGVnYXRlKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0RXZlbnRBY3Rpb25zKClcbiAgICAgICAgXSkpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSB0aGlzLmNoYXJhY3RlcnMuZ2V0KHRoaXMucm9sZSk7XG4gICAgICAgIGFjdGlvbnMucHVzaChDaG9pY2VEaWFsb2dSZXBsYXkuZ2V0Q2hvaWNlQWN0aW9uKGNoYXJhY3RlciwgdGhpcy5fcmVjb3JkZWRDaG9pY2UsIGNob2ljZURpYWxvZ0xpbmVEZWxlZ2F0ZSkpO1xuXG4gICAgICAgIGNvbnN0IHJlYWRMaW5lc0FjdGlvbnMgPSBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShhY3Rpb25zKTtcbiAgICAgICAgdGhpcy5hY3Rpb25EZWxlZ2F0ZS5ydW5VbmlxdWVBY3Rpb24ocmVhZExpbmVzQWN0aW9ucyk7XG4gICAgfVxuXG5cbn0iLCJpbXBvcnQgRGlhbG9nTGluZSBmcm9tIFwiLi9EaWFsb2dMaW5lXCI7XG5cbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBEaWFsb2dDdWVEYXRhIH0gZnJvbSBcIi4uL0RpYWxvZ0RhdGFcIjtcbmltcG9ydCB7IEN1ZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi9DdWVEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4vQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgQ3VlQ2hvaWNlRGlhbG9nUmVwbGF5IH0gZnJvbSBcIi4vQ3VlQ2hvaWNlRGlhbG9nUmVwbGF5XCI7XG5cbmV4cG9ydCBjbGFzcyBDdWVDaG9pY2VEaWFsb2dMaW5lIGV4dGVuZHMgQ2hvaWNlRGlhbG9nTGluZSB7XG5cbiAgICBwdWJsaWMgZ2V0IGN1ZURpYWxvZ0RhdGEoKTogRGlhbG9nQ3VlRGF0YSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpYWxvZ0RhdGEgYXMgRGlhbG9nQ3VlRGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGxheURpYWxvZygpIHtcbiAgICAgICAgY29uc3QgY3VlRGlhbG9nTGluZURlbGVnYXRlID0gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLkN1ZURpYWxvZ0xpbmVEZWxlZ2F0ZSk7XG4gICAgICAgIGNvbnN0IGNob2ljZURpYWxvZ0xpbmVEZWxlZ2F0ZSA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5DaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUpO1xuXG4gICAgICAgIGlmICghY3VlRGlhbG9nTGluZURlbGVnYXRlKSB7XG4gICAgICAgICAgICB0aHJvdyBcInJlcXVpcmUgYSBDdWVEaWFsb2dMaW5lRGVsZWdhdGUgaW4gdGhlIGRpc2VydmljZVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2hvaWNlRGlhbG9nTGluZURlbGVnYXRlKSB7XG4gICAgICAgICAgICB0aHJvdyBcInJlcXVpcmUgYSBDaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUgaW4gdGhlIGRpc2VydmljZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IFtdO1xuICAgICAgICBhY3Rpb25zLnB1c2goZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkodGhpcy5kZWxheSkpO1xuICAgICAgICBhY3Rpb25zLnB1c2goZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgQ3VlRGlhbG9nTGluZS5nZXRDdWVBY3Rpb25zKHRoaXMuY3VlRGlhbG9nRGF0YS5jdWVEZWxheSwgdGhpcy5jdWVEaWFsb2dEYXRhLmN1ZSwgY3VlRGlhbG9nTGluZURlbGVnYXRlKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0RXZlbnRBY3Rpb25zKClcbiAgICAgICAgXSkpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSB0aGlzLmNoYXJhY3RlcnMuZ2V0KHRoaXMucm9sZSk7XG4gICAgICAgIGFjdGlvbnMucHVzaChDaG9pY2VEaWFsb2dMaW5lLmdldENob2ljZUFjdGlvbihjaGFyYWN0ZXIsIHRoaXMuZGlhbG9nRGF0YS5jaG9pY2VUeXBlLCAodGhpcy53YWl0Rm9yQ2hvaWNlKS5iaW5kKHRoaXMpLCBjaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUpKTtcblxuICAgICAgICBjb25zdCByZWFkTGluZXNBY3Rpb25zID0gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoYWN0aW9ucyk7XG4gICAgICAgIHRoaXMuYWN0aW9uRGVsZWdhdGUucnVuVW5pcXVlQWN0aW9uKHJlYWRMaW5lc0FjdGlvbnMpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzYXZlQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fcmVwbGF5ID0gbmV3IEN1ZUNob2ljZURpYWxvZ1JlcGxheSh0aGlzLCBjaG9pY2VJZCk7XG4gICAgfVxufSIsImltcG9ydCBEaWFsb2dMaW5lIGZyb20gXCIuLi8uLi90d2luZS9EaWFsb2dMaW5lL0RpYWxvZ0xpbmVcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IFR3aW5lUGFyc2VyIGZyb20gXCIuLi8uLi90d2luZS9Ud2luZVBhcnNlclwiO1xuaW1wb3J0IHsgQ3VlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi90d2luZS9EaWFsb2dMaW5lL0N1ZURpYWxvZ0xpbmVcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlld1wiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBJY29uU2VsZWN0aW9uUG9wT3ZlciwgeyBJY29uVHlwZSB9IGZyb20gXCIuLi9wb3BvdmVycy9JY29uU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyIGZyb20gXCIuLi9wb3BvdmVycy9Db3N0dW1lU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IFByb3BTZWxlY3Rpb25Qb3BPdmVyLCB7IFByb3AgfSBmcm9tIFwiLi4vcG9wb3ZlcnMvUHJvcFNlbGVjdGlvblBvcE92ZXJcIjtcbmltcG9ydCB7IFNlcnZpY2VOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBQYXNzYWdlIH0gZnJvbSBcIi4uLy4uL3R3aW5lL1R3aW5lU2NyaXB0XCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgQ3VlQ2hvaWNlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi90d2luZS9EaWFsb2dMaW5lL0N1ZUNob2ljZURpYWxvZ0xpbmVcIjtcbmltcG9ydCB7IERpYWxvZ1R5cGUgfSBmcm9tIFwiLi4vY29tbW9uL0FjdE1lZGlhdG9yXCI7XG5pbXBvcnQgeyBDb3N0dW1lcyB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0Nvc3R1bWVzXCI7XG5pbXBvcnQgeyBBbmFseXRpY3NTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL0FuYWx5dGljc1NlcnZpY2VcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERpYWxvZ1N0YXRlRmFjdG9yeSB7XG4gICAgcHJvdGVjdGVkIGdldCBhbmFseXRpY3NTZXJ2aWNlKCk6IEFuYWx5dGljc1NlcnZpY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkFuYWx5dGljc1NlcnZpY2UpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSxcbiAgICAgICAgcHJvdGVjdGVkIHZpZXc6IFZpZXcpIHsgfVxuXG4gICAgcHVibGljIGNyZWF0ZVN0YXRlRm9yRGlhbG9nKHBhc3NhZ2U6IFBhc3NhZ2UpOiBTdGFnZVN0YXRlIHtcbiAgICAgICAgdGhpcy5zZW5kQW5hbHl0aWNzSWZOZWVkZWQocGFzc2FnZS5uYW1lKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IFR3aW5lUGFyc2VyLnBhcnNlVGV4dChwYXNzYWdlLnRleHQpO1xuXG4gICAgICAgIGNvbnN0IGlzQ3VlRGlhbG9nID0gXCJjdWVcIiBpbiBkYXRhO1xuICAgICAgICBjb25zdCBoYXNDaG9pY2VzID0gcGFzc2FnZS5saW5rcyAmJiBkYXRhLmNob2ljZVR5cGU7XG4gICAgICAgIGNvbnN0IGlzQ3VlQW5kaGFzQ2hvaWNlcyA9IGlzQ3VlRGlhbG9nICYmIGhhc0Nob2ljZXM7XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGlmIChpc0N1ZUFuZGhhc0Nob2ljZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZyA9IG5ldyBDdWVDaG9pY2VEaWFsb2dMaW5lKHBhc3NhZ2UucGlkLFxuICAgICAgICAgICAgICAgIHBhc3NhZ2UubmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzYWdlLnRleHQsXG4gICAgICAgICAgICAgICAgcGFzc2FnZS5saW5rcyxcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuaGFuZGxlQ3VlQ2hvaWNlRGlhbG9nKGRhdGEsIGRpYWxvZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNDdWVEaWFsb2cpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZyA9IG5ldyBDdWVEaWFsb2dMaW5lKHBhc3NhZ2UucGlkLFxuICAgICAgICAgICAgICAgIHBhc3NhZ2UubmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzYWdlLnRleHQsXG4gICAgICAgICAgICAgICAgcGFzc2FnZS5saW5rcyxcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuaGFuZGxlQ3VlRGlhbG9nKGRhdGEsIGRpYWxvZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzQ2hvaWNlcykge1xuICAgICAgICAgICAgY29uc3QgZGlhbG9nID0gbmV3IENob2ljZURpYWxvZ0xpbmUocGFzc2FnZS5waWQsXG4gICAgICAgICAgICAgICAgcGFzc2FnZS5uYW1lLFxuICAgICAgICAgICAgICAgIHBhc3NhZ2UudGV4dCxcbiAgICAgICAgICAgICAgICBwYXNzYWdlLmxpbmtzLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5oYW5kbGVDaG9pY2VEaWFsb2coZGF0YSwgZGlhbG9nLCBwYXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZyA9IG5ldyBEaWFsb2dMaW5lKHBhc3NhZ2UucGlkLFxuICAgICAgICAgICAgICAgIHBhc3NhZ2UubmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzYWdlLnRleHQsXG4gICAgICAgICAgICAgICAgcGFzc2FnZS5saW5rcyxcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZ2V0U2ltcGxlRGlhbG9nKHBhc3NhZ2UsIGRpYWxvZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vIHN0YXRlIGZvciBcIiArIHBhc3NhZ2UpO1xuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaGFuZGxlQ2hvaWNlRGlhbG9nKGRhdGE6IERpYWxvZ1R5cGUsIGRpYWxvZzogQ2hvaWNlRGlhbG9nTGluZSwgcGFzc2FnZTogUGFzc2FnZSk6IFN0YWdlU3RhdGU7XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaGFuZGxlQ3VlRGlhbG9nKGRhdGE6IERpYWxvZ1R5cGUsIGRpYWxvZzogQ3VlRGlhbG9nTGluZSk6IFN0YWdlU3RhdGU7XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaGFuZGxlQ3VlQ2hvaWNlRGlhbG9nKGRhdGE6IERpYWxvZ1R5cGUsIGRpYWxvZzogQ3VlQ2hvaWNlRGlhbG9nTGluZSk6IFN0YWdlU3RhdGU7XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0U2ltcGxlRGlhbG9nKHBhc3NhZ2U6IFBhc3NhZ2UsIGRpYWxvZzogRGlhbG9nTGluZSk6IFN0YWdlU3RhdGU7XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlUHJvcHNTZWxlY3RQb3BPdmVyKHNlbGVjdGlvblR5cGVzOiBQcm9wW10gPSBbUHJvcC50cmVlcywgUHJvcC5za3lTY3JhcGVyLCBQcm9wLmNhbmR5XSk6IFByb3BTZWxlY3Rpb25Qb3BPdmVyIHtcbiAgICAgICAgY29uc3QgcG9wT3ZlclZpZXcgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImNvc3R1bWUtY2hvaWNlLXBhbmVsXCIpIGFzIFZpZXc7XG4gICAgICAgIHBvcE92ZXJWaWV3LmFscGhhID0gMDtcbiAgICAgICAgY29uc3Qgc2VsZWN0UG9wb3ZlciA9IG5ldyBQcm9wU2VsZWN0aW9uUG9wT3Zlcihwb3BPdmVyVmlldywgdGhpcy5kaVNlcnZpY2UsIHNlbGVjdGlvblR5cGVzKTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdFBvcG92ZXI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUNvc3R1bWVTZWxlY3RQb3BPdmVyKHNlbGVjdGlvblR5cGVzOiBDb3N0dW1lc1tdID0gW0Nvc3R1bWVzLmxpdHRsZVJlZEhvb2QsIENvc3R1bWVzLmNvd2JveSwgQ29zdHVtZXMucGlyYXRlXSk6IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyIHtcbiAgICAgICAgY29uc3QgcG9wT3ZlclZpZXcgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImNvc3R1bWUtY2hvaWNlLXBhbmVsXCIpIGFzIFZpZXc7XG4gICAgICAgIHBvcE92ZXJWaWV3LmFscGhhID0gMDtcbiAgICAgICAgY29uc3Qgc2VsZWN0UG9wb3ZlciA9IG5ldyBDb3N0dW1lU2VsZWN0aW9uUG9wT3Zlcihwb3BPdmVyVmlldywgdGhpcy5kaVNlcnZpY2UsIHNlbGVjdGlvblR5cGVzKTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdFBvcG92ZXI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUljb25TZWxlY3RQb3BPdmVyKHNlbGVjdGlvblR5cGVzOiBJY29uVHlwZVtdID0gW0ljb25UeXBlLmhhcHB5LCBJY29uVHlwZS5hbmdyeSwgSWNvblR5cGUuc2lsbHldKTogSWNvblNlbGVjdGlvblBvcE92ZXIge1xuICAgICAgICBjb25zdCBwb3BPdmVyVmlldyA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiY2hhcmFjdGVyLWNob2ljZS1wYW5lbFwiKSBhcyBWaWV3O1xuICAgICAgICBwb3BPdmVyVmlldy5hbHBoYSA9IDA7XG4gICAgICAgIGNvbnN0IHNlbGVjdFBvcG92ZXIgPSBuZXcgSWNvblNlbGVjdGlvblBvcE92ZXIocG9wT3ZlclZpZXcsIHRoaXMuZGlTZXJ2aWNlLCBzZWxlY3Rpb25UeXBlcyk7XG4gICAgICAgIHJldHVybiBzZWxlY3RQb3BvdmVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2VuZEFuYWx5dGljc0lmTmVlZGVkKHBhc3NhZ2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCFwYXNzYWdlTmFtZSl7IHJldHVybjt9XG4gICAgICAgIGlmICh0aGlzLmFjdDEgPT0gcGFzc2FnZU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZS5zZW5kRXZlbnRTdGFydFN0b3J5QWN0KDEpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3QyPT1wYXNzYWdlTmFtZSkge1xuICAgICAgICAgICAgdGhpcy5hbmFseXRpY3NTZXJ2aWNlLnNlbmRFdmVudFN0YXJ0U3RvcnlBY3QoMilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdDMgPT0gcGFzc2FnZU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZS5zZW5kRXZlbnRTdGFydFN0b3J5QWN0KDMpXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGFjdDE6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgYWN0Mjogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBhY3QzOiBzdHJpbmc7XG59XG5cbiIsImltcG9ydCB7IFRleHR1cmUsIFBvaW50IH0gZnJvbSBcInBpeGkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpY2VTcHJpdGVWaWV3IGV4dGVuZHMgUElYSS5OaW5lU2xpY2VQbGFuZXtcbiAgICBcbiAgICBwdWJsaWMgYW5jaG9yOiBQb2ludCA9IG5ldyBQb2ludCgwLDApO1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBhbnkpe1xuICAgICAgICBzdXBlcihQSVhJLnV0aWxzLlRleHR1cmVDYWNoZVtjb25maWcudGV4dHVyZU5hbWVdLCBjb25maWcuaW5zZXRMZWZ0LCBjb25maWcuaW5zZXRUb3AsIGNvbmZpZy5pbnNldFJpZ2h0LCBjb25maWcuaW5zZXRCb3R0b20pO1xuXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbmZpZy5uYW1lO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gY29uZmlnLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFuY2hvciA9IGNvbmZpZy5hbmNob3I7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5hbmNob3IgJiYgY29uZmlnLmhlaWdodCl7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnggPSB0aGlzLnBvc2l0aW9uLnggLSAoIGNvbmZpZy53aWR0aCAqIGNvbmZpZy5hbmNob3IueCk7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPSB0aGlzLnBvc2l0aW9uLnkgLSAoIGNvbmZpZy5oZWlnaHQgKiBjb25maWcuYW5jaG9yLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50aW50ID0gY29uZmlnLnRpbnQ7XG4gICAgICAgIHRoaXMud2lkdGggPSBjb25maWcud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY29uZmlnLmhlaWdodDtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgZ2V0Q2FjaGUobmFtZTogc3RyaW5nKTogVGV4dHVyZXtcbiAgICAgICAgcmV0dXJuIFBJWEkudXRpbHMuVGV4dHVyZUNhY2hlW25hbWVdO1xuICAgIH1cblxuICAgIGNlbnRlckNoaWxkcmVuKHZpZXc6IGFueSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB2aWV3ID8gdmlldzogdGhpcztcblxuICAgICAgICBpZiAodGFyZ2V0LmNoaWxkcmVuKXtcbiAgICAgICAgICAgIHRhcmdldC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGNoaWxkWydhbmNob3InXTtcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLnBvc2l0aW9uLnggPSBjaGlsZC5wb3NpdGlvbi54ICsgKGNoaWxkLnBhcmVudC53aWR0aCAqIGFuY2hvci54KTtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQucG9zaXRpb24ueSA9IGNoaWxkLnBvc2l0aW9uLnkgKyAoY2hpbGQucGFyZW50LmhlaWdodCAqIGFuY2hvci55KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jZW50ZXJDaGlsZHJlbihjaGlsZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG5cblxufSIsImltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vVmlld1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYXRvcjxUIGV4dGVuZHMgVmlldz4ge1xuICAgIHByb3RlY3RlZCBkZXN0cm95VmlldzogYm9vbGVhbjtcblxuICAgIHByb3RlY3RlZCBfdmlldzogVDtcbiAgICBnZXQgdmlldyAoKTogVCB7IHJldHVybiB0aGlzLl92aWV3OyB9XG5cbiAgICBwcm90ZWN0ZWQgX2NoaWxkcmVuOiBNZWRpYXRvcjxWaWV3PltdO1xuICAgIGdldCBjaGlsZHJlbiAoKTogTWVkaWF0b3I8Vmlldz5bXSB7IHJldHVybiB0aGlzLl9jaGlsZHJlbjsgfVxuXG4gICAgcHJvdGVjdGVkIF9wYXJlbnQ6IE1lZGlhdG9yPFZpZXc+O1xuICAgIGdldCBwYXJlbnQgKCk6IE1lZGlhdG9yPFZpZXc+IHsgcmV0dXJuIHRoaXMuX3BhcmVudDsgfVxuXG4gICAgcHVibGljIGlzQWN0aXZlOiBib29sZWFuO1xuXG4gICAgcHJvdGVjdGVkIF91bmlxdWVBY3Rpb246IGZyYW1ld29yay5BY3Rpb247XG5cbiAgICBwcm90ZWN0ZWQgX3NjcmlwdHM6IGZyYW1ld29yay5Db21wb3NpdGVTY3JpcHQ7XG4gICAgZ2V0IHNjcmlwdHMoKTogZnJhbWV3b3JrLkNvbXBvc2l0ZVNjcmlwdCB7IHJldHVybiB0aGlzLl9zY3JpcHRzOyB9XG5cbiAgICBwcm90ZWN0ZWQgX2FjdGlvbk1hbmFnZXI6IGZyYW1ld29yay5BY3Rpb25NYW5hZ2VyO1xuICAgIGdldCBhY3Rpb25NYW5hZ2VyKCk6IGZyYW1ld29yay5BY3Rpb25NYW5hZ2VyIHsgcmV0dXJuIHRoaXMuX2FjdGlvbk1hbmFnZXI7IH1cblxuICAgIGNvbnN0cnVjdG9yICh2aWV3OiBULCBkZXN0cm95VmlldzogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5fdmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuZGVzdHJveVZpZXcgPSBkZXN0cm95VmlldztcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcblxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fYWN0aW9uTWFuYWdlciA9IG5ldyBmcmFtZXdvcmsuQWN0aW9uTWFuYWdlcigpO1xuXG4gICAgICAgIHRoaXMuX3NjcmlwdHMgPSBuZXcgZnJhbWV3b3JrLkNvbXBvc2l0ZVNjcmlwdCgpO1xuICAgICAgICB0aGlzLl9zY3JpcHRzLmluaXQoKTtcblxuICAgICAgICB0aGlzLl91bmlxdWVBY3Rpb24gPSBudWxsXG4gICAgfVxuXG4gICAgdXBkYXRlIChmcmFtZVRpbWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9hY3Rpb25NYW5hZ2VyKSB7IHRoaXMuX2FjdGlvbk1hbmFnZXIudXBkYXRlKGZyYW1lVGltZSk7IH1cbiAgICAgICAgaWYgKHRoaXMuX3NjcmlwdHMpIHsgdGhpcy5fc2NyaXB0cy51cGRhdGUoZnJhbWVUaW1lKTsgfVxuXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7IGNoaWxkLnVwZGF0ZShmcmFtZVRpbWUpOyB9KTtcbiAgICB9XG5cbiAgICBkZXN0cm95KHNob3VsZERlc3Ryb3lUZXh0dXJlOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlaW5pdEFjdGlvbnMoKTtcblxuICAgICAgICBpZiAodGhpcy5fc2NyaXB0cykge1xuICAgICAgICAgICAgdGhpcy5fc2NyaXB0cy5kZWluaXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3NjcmlwdHMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2FjdGlvbk1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbk1hbmFnZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXN0cm95Q2hpbGRyZW4oKTtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcblxuICAgICAgICBpZiAodGhpcy5fdmlldykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveVZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3LmRlc3Ryb3koeyBjaGlsZHJlbjogdHJ1ZSwgdGV4dHVyZTogc2hvdWxkRGVzdHJveVRleHR1cmUsIGJhc2VUZXh0dXJlOiBzaG91bGREZXN0cm95VGV4dHVyZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ZpZXcgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VuZFRvUGFyZW50IChtZXNzYWdlSUQ6IHN0cmluZywgYXJncz86IGFueSwgY2hpbGQ/OiBNZWRpYXRvcjxWaWV3Pik6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuX3BhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQgPSB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGFyZW50LmhhbmRsZUNoaWxkTWVzc2FnZShtZXNzYWdlSUQsIGFyZ3MsIGNoaWxkKTtcbiAgICB9XG5cbiAgICBoYW5kbGVDaGlsZE1lc3NhZ2UgKG1lc3NhZ2VJRDogc3RyaW5nLCBhcmdzPzogYW55LCBjaGlsZD86IE1lZGlhdG9yPFZpZXc+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2VuZFRvUGFyZW50KG1lc3NhZ2VJRCwgYXJncywgY2hpbGQpO1xuICAgIH1cblxuICAgIGFkZENoaWxkIChjaGlsZDogTWVkaWF0b3I8Vmlldz4sIHBhcmVudFZpZXc6IFBJWEkuQ29udGFpbmVyID0gbnVsbCk6IHZvaWQge1xuICAgICAgICBpZiAoIWNoaWxkIHx8IHRoaXMuX2NoaWxkcmVuLmNvbnRhaW5zKGNoaWxkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXJlbnRWaWV3KSB7XG4gICAgICAgICAgICBwYXJlbnRWaWV3ID0gdGhpcy5fdmlldztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoPGFueT5jaGlsZCkuX3BhcmVudCkge1xuICAgICAgICAgICAgKDxhbnk+Y2hpbGQpLl9wYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgKDxhbnk+Y2hpbGQpLl9wYXJlbnQgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICBwYXJlbnRWaWV3LmFkZENoaWxkKGNoaWxkLnZpZXcpO1xuICAgIH1cblxuICAgIGFkZENoaWxkTWVkaWF0b3JPbmx5KGNoaWxkOiBNZWRpYXRvcjxWaWV3Pik6IHZvaWQge1xuICAgICAgICBpZiAoIWNoaWxkIHx8IHRoaXMuX2NoaWxkcmVuLmNvbnRhaW5zKGNoaWxkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCg8YW55PmNoaWxkKS5fcGFyZW50KSB7XG4gICAgICAgICAgICAoPGFueT5jaGlsZCkuX3BhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgKDxhbnk+Y2hpbGQpLl9wYXJlbnQgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgIH1cblxuICAgIGFkZENoaWxkcmVuIChjaGlsZHJlbjogTWVkaWF0b3I8Vmlldz5bXSwgcGFyZW50VmlldzogUElYSS5Db250YWluZXIgPSBudWxsKTogdm9pZCB7XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7IHRoaXMuYWRkQ2hpbGQoY2hpbGQsIHBhcmVudFZpZXcpOyB9KTtcbiAgICB9XG5cbiAgICByZW1vdmVDaGlsZCAoY2hpbGQ6IE1lZGlhdG9yPFZpZXc+KTogdm9pZCB7XG4gICAgICAgIGlmICghY2hpbGQgfHwgIXRoaXMuX2NoaWxkcmVuLmNvbnRhaW5zKGNoaWxkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoaWxkLnZpZXcgJiYgY2hpbGQudmlldy5wYXJlbnQpIHtcbiAgICAgICAgICAgIGNoaWxkLnZpZXcucGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkLnZpZXcpO1xuICAgICAgICB9XG5cbiAgICAgICAgKDxhbnk+Y2hpbGQpLl9wYXJlbnQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuLnJlbW92ZShjaGlsZCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQ2hpbGRNZWRpYXRvck9ubHkgKGNoaWxkOiBNZWRpYXRvcjxWaWV3Pik6IHZvaWQge1xuICAgICAgICBpZiAoIWNoaWxkIHx8ICF0aGlzLl9jaGlsZHJlbi5jb250YWlucyhjaGlsZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAoPGFueT5jaGlsZCkuX3BhcmVudCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fY2hpbGRyZW4ucmVtb3ZlKGNoaWxkKTtcbiAgICB9XG5cbiAgICByZW1vdmVDaGlsZHJlbiAoY2hpbGRyZW4/OiBNZWRpYXRvcjxWaWV3PltdKTogdm9pZCB7XG4gICAgICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZHJlbi5yZXZlcnNlRm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZXN0cm95Q2hpbGQgKGNoaWxkOiBNZWRpYXRvcjxWaWV3Pik6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkKTtcblxuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3lDaGlsZHJlbiAoY2hpbGRyZW4/OiBNZWRpYXRvcjxWaWV3PltdKTogdm9pZCB7XG4gICAgICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZHJlbi5yZXZlcnNlRm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveUNoaWxkKGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3dhcENoaWxkIChjdXJyZW50Q2hpbGQ6IE1lZGlhdG9yPFZpZXc+LCBuZXdDaGlsZDogTWVkaWF0b3I8Vmlldz4pOiB2b2lkIHtcbiAgICAgICAgaWYgKG5ld0NoaWxkID09IGN1cnJlbnRDaGlsZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5ld1BhcmVudFZpZXcgPSBudWxsO1xuICAgICAgICBsZXQgbmV3Q2hpbGRWaWV3SW5kZXggPSAtMTtcbiAgICAgICAgbGV0IG5ld0NoaWxkSW5kZXggPSAtMTtcblxuICAgICAgICBpZiAoY3VycmVudENoaWxkKSB7XG4gICAgICAgICAgICBuZXdDaGlsZEluZGV4ID0gdGhpcy5fY2hpbGRyZW4uaW5kZXhPZihjdXJyZW50Q2hpbGQpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudENoaWxkLnZpZXcgJiYgY3VycmVudENoaWxkLnZpZXcucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgbmV3UGFyZW50VmlldyA9IGN1cnJlbnRDaGlsZC52aWV3LnBhcmVudDtcbiAgICAgICAgICAgICAgICBuZXdDaGlsZFZpZXdJbmRleCA9IG5ld1BhcmVudFZpZXcuZ2V0Q2hpbGRJbmRleChjdXJyZW50Q2hpbGQudmlldyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoY3VycmVudENoaWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdDaGlsZCkge1xuICAgICAgICAgICAgbmV3UGFyZW50VmlldyA9IChuZXdQYXJlbnRWaWV3KSA/IG5ld1BhcmVudFZpZXcgOiB0aGlzLnZpZXc7XG4gICAgICAgICAgICBuZXdDaGlsZEluZGV4ID0gKG5ld0NoaWxkSW5kZXggPT0gLTEpID8gdGhpcy5jaGlsZHJlbi5sZW5ndGggOiBuZXdDaGlsZEluZGV4O1xuICAgICAgICAgICAgbmV3Q2hpbGRWaWV3SW5kZXggPSAobmV3Q2hpbGRWaWV3SW5kZXggPT0gLTEpID8gbmV3UGFyZW50Vmlldy5jaGlsZHJlbi5sZW5ndGggOiBuZXdDaGlsZFZpZXdJbmRleDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZEF0KG5ld0NoaWxkLCBuZXdQYXJlbnRWaWV3LCBuZXdDaGlsZEluZGV4LCBuZXdDaGlsZFZpZXdJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYWRkQ2hpbGRBdCAoY2hpbGQ6IE1lZGlhdG9yPFZpZXc+LCBwYXJlbnRWaWV3OiBWaWV3LCBjaGlsZEluZGV4OiBudW1iZXIsIGNoaWxkVmlld0luZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCFjaGlsZCB8fCB0aGlzLl9jaGlsZHJlbi5jb250YWlucyhjaGlsZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoPGFueT5jaGlsZCkuX3BhcmVudCkge1xuICAgICAgICAgICAgKDxhbnk+Y2hpbGQpLl9wYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgKDxhbnk+Y2hpbGQpLl9wYXJlbnQgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZShjaGlsZEluZGV4LCAwLCBjaGlsZCk7XG4gICAgICAgIHBhcmVudFZpZXcuYWRkQ2hpbGRBdChjaGlsZC52aWV3LCBjaGlsZFZpZXdJbmRleCk7XG4gICAgfVxuXG5cbiAgICAvLyBFeGVjdXRlIGFuIGFjdGlvbi4gJ2NhbGxiYWNrcycgY2FuIGJlIGE6XG4gICAgLy8gLSBmaW5pc2hlZENhbGxiYWNrIGZ1bmN0aW9uIChpcyBhbHNvIGNhbGxlZCBmb3IgY2FuY2VsbGVkIGV2ZW50IGJ5IGRlZmF1bHQpLlxuICAgIC8vIC0gU3RydWN0IG9mIHN0YXJ0ZWRDYWxsYmFjaywgZmluaXNoZWRDYWxsYmFjayBhbmQgY2FuY2VsbGVkQ2FsbGJhY2suXG4gICAgcnVuQWN0aW9uKGFjdGlvbjogZnJhbWV3b3JrLkFjdGlvbiwgY2FsbGJhY2tzPzogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RhcnRBY3Rpb24oYWN0aW9uLCBjYWxsYmFja3MpO1xuICAgIH1cblxuICAgIC8vIEV4ZWN1dGUgYSB1bmlxdWUgYWN0aW9uIHdoaWNoIGNhbmNlbHMgdGhlIGxhc3QgXCJ1bmlxdWVcIiBhY3Rpb24gc3RhcnRlZCBmcm9tIGFcbiAgICAvLyBwcmV2aW91cyBjYWxsIHRvIHJ1blVuaXF1ZUFjdGlvbigpLiBTZWUgcnVuQWN0aW9uKCkgZm9yIGRldGFpbHMgb24gcGFyYW1ldGVycy5cbiAgICBydW5VbmlxdWVBY3Rpb24oYWN0aW9uOiBmcmFtZXdvcmsuQWN0aW9uLCBjYWxsYmFja3M/OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdGFydFVuaXF1ZUFjdGlvbihhY3Rpb24sIGNhbGxiYWNrcyk7XG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsIGFuIGFjdGlvbiBvYmplY3QuXG4gICAgY2FuY2VsQWN0aW9uKGFjdGlvbjogZnJhbWV3b3JrLkFjdGlvbik6IHZvaWQge1xuICAgICAgICBsZXQgYWN0aW9ucyA9IFthY3Rpb25dO1xuICAgICAgICB0aGlzLmNhbmNlbEFjdGlvbnMoYWN0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsIHRoZSB1bmlxdWUgYWN0aW9uLlxuICAgIGNhbmNlbFVuaXF1ZUFjdGlvbigpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX3VuaXF1ZUFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWxBY3Rpb24odGhpcy5fdW5pcXVlQWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuX3VuaXF1ZUFjdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYW5jZWwgYW4gYXJyYXkgb2YgYWN0aW9ucy4gSWYgbm8gYWN0aW9ucyBhcmUgcHJvdmlkZWQsIGFsbCB3aWxsIGJlIHJlbW92ZWQuXG4gICAgY2FuY2VsQWN0aW9ucyhhY3Rpb25zOiBmcmFtZXdvcmsuQWN0aW9uW10gPSBudWxsKTogdm9pZCB7XG4gICAgICAgIGxldCBhY3Rpb25JbnN0YW5jZXMgPSBPYmplY3QudmFsdWVzKHRoaXMuX2FjdGlvbk1hbmFnZXIuYWN0aW9ucyk7XG5cbiAgICAgICAgaWYgKGFjdGlvbnMpIHtcbiAgICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zLmZpbHRlcihhY3Rpb24gPT4gISFhY3Rpb24pO1xuXG4gICAgICAgICAgICBhY3Rpb25JbnN0YW5jZXMgPSBhY3Rpb25JbnN0YW5jZXNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb25JbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCEhYWN0aW9uSW5zdGFuY2UpICYmIChhY3Rpb25zLmNvbnRhaW5zKGFjdGlvbkluc3RhbmNlLmFjdGlvbikpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYW5jZWxBY3Rpb25JbnN0YW5jZXMoYWN0aW9uSW5zdGFuY2VzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXJ0VW5pcXVlQWN0aW9uKGFjdGlvbjogZnJhbWV3b3JrLkFjdGlvbiwgY2FsbGJhY2tzPzogYW55KTogdm9pZCB7XG4gICAgICAgIC8vIE92ZXJ3cml0ZSB0aGUgcHJldmlvdXMgdW5pcXVlIGFjdGlvbi5cbiAgICAgICAgdGhpcy5jYW5jZWxVbmlxdWVBY3Rpb24oKTtcbiAgICAgICAgdGhpcy5fdW5pcXVlQWN0aW9uID0gYWN0aW9uO1xuICAgICAgICB0aGlzLnN0YXJ0QWN0aW9uKGFjdGlvbiwgY2FsbGJhY2tzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXJ0QWN0aW9uKGFjdGlvbjogZnJhbWV3b3JrLkFjdGlvbiwgY2FsbGJhY2tzPzogYW55KTogdm9pZCB7XG4gICAgICAgIGlmICghYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFja3MgPSB0aGlzLmNyZWF0ZUNhbGxiYWNrc0NvbmZpZyhjYWxsYmFja3MpO1xuXG4gICAgICAgIC8vIEVuc3VyZSBzdGF0ZSBpcyByZXNldCBzbyBzYW1lIGFjdGlvbiBvYmplY3QgY2FuIGJlIHJldXNlZC5cbiAgICAgICAgYWN0aW9uLnJlc2V0KCk7XG5cbiAgICAgICAgLy8gU3RhcnQgYWN0aW9uIGFuZCBhZGQgY2FsbGJhY2tzIG9uIHRoZSBydW5uaW5nIGluc3RhbmNlIGlmIHByb3ZpZGVkLlxuICAgICAgICB2YXIgYWN0aW9uSW5zdGFuY2UgPSB0aGlzLl9hY3Rpb25NYW5hZ2VyLnJ1bkFjdGlvbihhY3Rpb24pO1xuXG4gICAgICAgIGlmIChjYWxsYmFja3Muc3RhcnRlZENhbGxiYWNrKSB7IGFjdGlvbkluc3RhbmNlLm9uY2UoXCJzdGFydFwiLCBjYWxsYmFja3Muc3RhcnRlZENhbGxiYWNrKTsgfVxuICAgICAgICBpZiAoY2FsbGJhY2tzLmZpbmlzaGVkQ2FsbGJhY2spIHsgYWN0aW9uSW5zdGFuY2Uub25jZShcImVuZFwiLCBjYWxsYmFja3MuZmluaXNoZWRDYWxsYmFjayk7IH1cbiAgICAgICAgaWYgKGNhbGxiYWNrcy5jYW5jZWxsZWRDYWxsYmFjaykgeyBhY3Rpb25JbnN0YW5jZS5vbmNlKFwiY2FuY2VsXCIsIGNhbGxiYWNrcy5jYW5jZWxsZWRDYWxsYmFjayk7IH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUNhbGxiYWNrc0NvbmZpZyhjYWxsYmFja3M/OiBhbnkpOiBhbnkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihjYWxsYmFja3MpKSB7XG4gICAgICAgICAgICBjYWxsYmFja3MgPSB7XG4gICAgICAgICAgICAgICAgZmluaXNoZWRDYWxsYmFjazogY2FsbGJhY2tzLFxuICAgICAgICAgICAgICAgIGNhbmNlbGxlZENhbGxiYWNrOiBjYWxsYmFja3NcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFja3MgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIHN0YXJ0ZWRDYWxsYmFjazogbnVsbCxcbiAgICAgICAgICAgIGZpbmlzaGVkQ2FsbGJhY2s6IG51bGwsXG4gICAgICAgICAgICBjYW5jZWxsZWRDYWxsYmFjazogbnVsbFxuICAgICAgICB9LCBjYWxsYmFja3MpO1xuXG4gICAgICAgIHJldHVybiBjYWxsYmFja3M7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYW5jZWxBY3Rpb25JbnN0YW5jZXMoYWN0aW9uSW5zdGFuY2VzOiBmcmFtZXdvcmsuQWN0aW9uSW5zdGFuY2VbXSk6IHZvaWQge1xuICAgICAgICBhY3Rpb25JbnN0YW5jZXNcbiAgICAgICAgICAgIC5maWx0ZXIoYWN0aW9uSW5zdGFuY2UgPT4gISFhY3Rpb25JbnN0YW5jZSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGFjdGlvbkluc3RhbmNlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25NYW5hZ2VyLmNhbmNlbEFjdGlvbihhY3Rpb25JbnN0YW5jZSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlaW5pdEFjdGlvbnMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2FuY2VsQWN0aW9ucygpO1xuICAgICAgICB0aGlzLl91bmlxdWVBY3Rpb24gPSBudWxsO1xuICAgIH1cblxuXG59XG4iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uTW92ZW1lbnRTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnBsYXlBY3Rpb24oKSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgzLjUpLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZ2V0Q2hhcmFjdGVyKCkucGxheUlkbGUoKSksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIuZGlkVGVybWluYXRlKG5hbWUpKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHBsYXlBY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZ2V0Q2hhcmFjdGVyKCkucGxheURlZmF1bHRBY3Rpb24oKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0Q2hhcmFjdGVyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCk7XG4gICAgfVxuXG59IiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgVmlld1NjcmlwdCA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuVmlld1NjcmlwdFwiKTtcbiAgICB2YXIgV2luZG93VXRpbHMgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLldpbmRvd1V0aWxzXCIpO1xuICAgIHZhciBWZWN0b3IgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLlZlY3RvclwiKTtcbiAgICB2YXIgVmlld1RyYW5zZm9ybWVyID0gaW5jbHVkZShcImZyYW1ld29yay5WaWV3VHJhbnNmb3JtZXJcIik7XG4gICAgdmFyIFBvc2l0aW9uVmlld1RyYW5zZm9ybWVyID0gaW5jbHVkZShcImZyYW1ld29yay5Qb3NpdGlvblZpZXdUcmFuc2Zvcm1lclwiKTtcblxuICAgIC8vIFBpY2sgdXAgYW5kIGRyYWcgYSB2aWV3LiBUaGlzIGNsYXNzIHVzZXMgYSBWaWV3VHJhbnNmb3JtZXIgdG8gcHJvY2VzcyBob3cgdGhlXG4gICAgLy8gZHJhZyBhZmZlY3RzIHRoZSB2aWV3LiBCeSBkZWZhdWx0LCBhIFBvc2l0aW9uVmlld1RyYW5zZm9ybWVyIG1vZGlmaWVzIHRoZVxuICAgIC8vIHBvc2l0aW9uIG9mIHRoZSB2aWV3IHRvIGZvbGxvdyB0aGUgY2xpY2sgLyB0b3VjaCBwb3NpdGlvbiwgYnV0IGFueSBjdXN0b20gY2xhc3NcbiAgICAvLyAod2hpY2ggaW5oZXJpdHMgZnJvbSBWaWV3VHJhbnNmb3JtZXIpIGNhbiBiZSBwcm92aWRlZCB0byB0d2VhayByb3RhdGlvbiwgc2NhbGVcbiAgICAvLyBvciBhbnkgb3RoZXIgcHJvcGVydHkgb2YgdGhlIHZpZXcgeW91IGxpa2UuXG4gICAgdmFyIERyYWdWaWV3U2NyaXB0ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICBkcmFnU3RhcnRlZENhbGxiYWNrOiBmdW5jdGlvbiAoZXZlbnQsIHZpZXcpIHsgfSxcbiAgICAgICAgICAgIGRyYWdNb3ZlZENhbGxiYWNrOiBmdW5jdGlvbiAoZXZlbnQsIHZpZXcpIHsgfSxcbiAgICAgICAgICAgIGRyYWdFbmRlZENhbGxiYWNrOiBmdW5jdGlvbiAoZXZlbnQsIHZpZXcpIHsgfSxcbiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIHZpZXdEcmFnUmVzY2FsZTogMS4wLFxuICAgICAgICAgICAgdmlld1RyYW5zZm9ybWVyOiBudWxsLCAgLy8gSWYgbnVsbCwgYSBQb3NpdGlvblZpZXdUcmFuc2Zvcm1lciBpcyBjcmVhdGVkIGJ5IGRlZmF1bHQuXG4gICAgICAgICAgICBzb3VyY2VWaWV3OiBudWxsLFxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgVmlld1NjcmlwdC5jYWxsKHRoaXMsIGZpbmFsQ29uZmlnKTtcblxuICAgICAgICB0aGlzLl9kcmFnU3RhcnRlZENhbGxiYWNrID0gZmluYWxDb25maWcuZHJhZ1N0YXJ0ZWRDYWxsYmFjaztcbiAgICAgICAgdGhpcy5fZHJhZ01vdmVkQ2FsbGJhY2sgPSBmaW5hbENvbmZpZy5kcmFnTW92ZWRDYWxsYmFjaztcbiAgICAgICAgdGhpcy5fZHJhZ0VuZGVkQ2FsbGJhY2sgPSBmaW5hbENvbmZpZy5kcmFnRW5kZWRDYWxsYmFjaztcbiAgICAgICAgdGhpcy5fc3RvcFByb3BhZ2F0aW9uID0gZmluYWxDb25maWcuc3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICB0aGlzLl92aWV3RHJhZ1Jlc2NhbGUgPSBmaW5hbENvbmZpZy52aWV3RHJhZ1Jlc2NhbGU7XG5cbiAgICAgICAgdGhpcy5fc291cmNlVmlldyA9IGZpbmFsQ29uZmlnLnNvdXJjZVZpZXcgPyBmaW5hbENvbmZpZy5zb3VyY2VWaWV3IDogdGhpcy52aWV3O1xuXG4gICAgICAgIHRoaXMuX3ZpZXdJbml0aWFsbHlJbnRlcmFjdGl2ZSA9IHRoaXMuX3NvdXJjZVZpZXcuaW50ZXJhY3RpdmU7XG4gICAgICAgIHRoaXMuX3ZpZXdJc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX21vdXNlT2Zmc2V0VmVjID0gVmVjdG9yLmNyZWF0ZSgwLjAsIDAuMCk7ICAvLyBJbiB2aWV3J3MgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICAgIHRoaXMuX2xhc3RNb3VzZVBvc2l0aW9uID0gVmVjdG9yLmNyZWF0ZSgwLjAsIDAuMCk7ICAvLyBJbiBnbG9iYWwgKHdvcmxkKSBzcGFjZS5cbiAgICAgICAgdGhpcy5fcG9pbnRlcklEID0gMDtcblxuICAgICAgICB0aGlzLl92aWV3VHJhbnNmb3JtZXIgPSBudWxsO1xuICAgICAgICBpZiAoZmluYWxDb25maWcudmlld1RyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlT2YoZmluYWxDb25maWcudmlld1RyYW5zZm9ybWVyLCBWaWV3VHJhbnNmb3JtZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJEcmFnVmlld1NjcmlwdDogdmlld1RyYW5zZm9ybWVyQ2xhc3MgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBWaWV3VHJhbnNmb3JtZXIuXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3ZpZXdUcmFuc2Zvcm1lciA9IGZpbmFsQ29uZmlnLnZpZXdUcmFuc2Zvcm1lcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdUcmFuc2Zvcm1lciA9IG5ldyBQb3NpdGlvblZpZXdUcmFuc2Zvcm1lcihPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBoZWxwZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgdmlldzogdGhpcy5fdmlld1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmlld1RyYW5zZm9ybWVyLmhlbHBlciA9IHRoaXMuX3ZpZXdUcmFuc2Zvcm1lci5oZWxwZXIgfHwgdGhpcztcbiAgICAgICAgdGhpcy5fdmlld1RyYW5zZm9ybWVyLnZpZXcgPSB0aGlzLl92aWV3VHJhbnNmb3JtZXIudmlldyB8fCB0aGlzLl92aWV3O1xuXG4gICAgICAgIHRoaXMuX29uVmlld01vdXNlRG93biA9IHRoaXMuX29uVmlld01vdXNlRG93bi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblZpZXdNb3VzZVVwID0gdGhpcy5fb25WaWV3TW91c2VVcC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblZpZXdNb3VzZVVwT3V0c2lkZSA9IHRoaXMuX29uVmlld01vdXNlVXBPdXRzaWRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX29uVmlld01vdXNlTW92ZSA9IHRoaXMuX29uVmlld01vdXNlTW92ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblZpZXdNb3VzZU1vdmVPdXRPZldpbmRvdyA9IHRoaXMuX29uVmlld01vdXNlTW92ZU91dE9mV2luZG93LmJpbmQodGhpcyk7XG4gICAgfTtcbiAgICB2YXIgcyA9IFZpZXdTY3JpcHQucHJvdG90eXBlO1xuICAgIHZhciBwID0gZXh0ZW5kKERyYWdWaWV3U2NyaXB0LCBWaWV3U2NyaXB0KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImlzQWN0aXZlXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaXNBY3RpdmUpIHsgdGhpcy5fc2V0QWN0aXZlKGlzQWN0aXZlKTsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9pc0FjdGl2ZTsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInZpZXdcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2aWV3KSB7IHRoaXMuX3NldFZpZXcodmlldyk7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdmlldzsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImRyYWdTdGFydGVkQ2FsbGJhY2tcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjYWxsYmFjaykgeyB0aGlzLl9kcmFnU3RhcnRlZENhbGxiYWNrID0gY2FsbGJhY2s7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZHJhZ1N0YXJ0ZWRDYWxsYmFjazsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImRyYWdNb3ZlZENhbGxiYWNrXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoY2FsbGJhY2spIHsgdGhpcy5fZHJhZ01vdmVkQ2FsbGJhY2sgPSBjYWxsYmFjazsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kcmFnTW92ZWRDYWxsYmFjazsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImRyYWdFbmRlZENhbGxiYWNrXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoY2FsbGJhY2spIHsgdGhpcy5fZHJhZ0VuZGVkQ2FsbGJhY2sgPSBjYWxsYmFjazsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kcmFnRW5kZWRDYWxsYmFjazsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInN0b3BQcm9wYWdhdGlvblwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHRoaXMuX3N0b3BQcm9wYWdhdGlvbiA9IGNhbGxiYWNrOyB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3N0b3BQcm9wYWdhdGlvbjsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInZpZXdEcmFnUmVzY2FsZVwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHRoaXMuX3ZpZXdEcmFnUmVzY2FsZSA9IGNhbGxiYWNrOyB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3ZpZXdEcmFnUmVzY2FsZTsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInZpZXdUcmFuc2Zvcm1lclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdmlld1RyYW5zZm9ybWVyOyB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwibW91c2VPZmZzZXRWZWNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21vdXNlT2Zmc2V0VmVjOyB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwibGFzdE1vdXNlUG9zaXRpb25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2xhc3RNb3VzZVBvc2l0aW9uOyB9XG4gICAgfSk7XG5cbiAgICBwLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHMuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3NvdXJjZVZpZXcuaW50ZXJhY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWdpc3RlckludGVyYWN0aW9uRXZlbnRzKCk7XG4gICAgfTtcblxuICAgIHAuZGVpbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBFbnN1cmUgdGhlIGRyYWcgaXMgY29tcGxldGVkIGJlZm9yZSBkZWluaXRpYWxpc2luZy5cbiAgICAgICAgaWYgKHRoaXMuX3ZpZXdJc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmREcmFnKG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGVyZWdpc3RlckludGVyYWN0aW9uRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuX3NvdXJjZVZpZXcuaW50ZXJhY3RpdmUgPSB0aGlzLl92aWV3SW5pdGlhbGx5SW50ZXJhY3RpdmU7XG5cbiAgICAgICAgcy5kZWluaXQuY2FsbCh0aGlzKTtcbiAgICB9O1xuXG4gICAgcC5fdXBkYXRlSW1wbCA9IGZ1bmN0aW9uIChmcmFtZVRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ZpZXdJc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl92aWV3VHJhbnNmb3JtZXIudXBkYXRlU3RhdGUoZnJhbWVUaW1lKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBTdGFydCBkcmFnIG1vZGUgbWFudWFsbHkgZ2l2ZW4gZXhpc3RpbmcgY2xpY2sgZXZlbnQgZGF0YSBpcyBwcm92aWRlZC5cbiAgICBwLnN0YXJ0RHJhZyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl9vblZpZXdNb3VzZURvd24oZXZlbnQpO1xuICAgIH07XG5cbiAgICAvLyBTdG9wIGRyYWcgbW9kZSBtYW51YWxseSBnaXZlbiBleGlzdGluZyBjbGljayBldmVudCBkYXRhIGlzIHByb3ZpZGVkLlxuICAgIHAuc3RvcERyYWcgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fb25WaWV3TW91c2VVcChldmVudCk7XG4gICAgfTtcblxuICAgIHAuZ2V0TG9jYWxNb3VzZVBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUcmFuc2Zvcm0gdGhlIG1vdXNlIHBvc2l0aW9uIGludG8gdGhlIGxvY2FsIHNwYWNlIG9mIHRoZSB2aWV3IG9iamVjdC5cbiAgICAgICAgdmFyIHZpZXdQYXJlbnQgPSB0aGlzLl92aWV3VHJhbnNmb3JtZXIudmlldy5wYXJlbnQgfHxcbiAgICAgICAgICAgIHRoaXMuX3ZpZXcucGFyZW50IHx8XG4gICAgICAgICAgICB0aGlzLl92aWV3O1xuICAgICAgICByZXR1cm4gVmVjdG9yLnRyYW5zZm9ybUdsb2JhbFRvQ2hpbGQodGhpcy5fbGFzdE1vdXNlUG9zaXRpb24sIHZpZXdQYXJlbnQpO1xuICAgIH07XG5cbiAgICBwLl9zZXRBY3RpdmUgPSBmdW5jdGlvbiAoaXNBY3RpdmUpIHtcbiAgICAgICAgdGhpcy5faXNBY3RpdmUgPSBpc0FjdGl2ZTtcblxuICAgICAgICBpZiAoIXRoaXMuX2lzQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmREcmFnKG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX3NldFZpZXcgPSBmdW5jdGlvbiAodmlldykge1xuICAgICAgICB0aGlzLl92aWV3ID0gdmlldztcblxuICAgICAgICBpZiAodGhpcy5fdmlld1RyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgICB0aGlzLl92aWV3VHJhbnNmb3JtZXIudmlldyA9IHZpZXc7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fcmVnaXN0ZXJJbnRlcmFjdGlvbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc291cmNlVmlldy5vbihcIm1vdXNlZG93blwiLCB0aGlzLl9vblZpZXdNb3VzZURvd24pO1xuICAgICAgICB0aGlzLl9zb3VyY2VWaWV3Lm9uKFwidG91Y2hzdGFydFwiLCB0aGlzLl9vblZpZXdNb3VzZURvd24pO1xuICAgICAgICB0aGlzLl9zb3VyY2VWaWV3Lm9uKFwibW91c2V1cFwiLCB0aGlzLl9vblZpZXdNb3VzZVVwKTtcbiAgICAgICAgdGhpcy5fc291cmNlVmlldy5vbihcInRvdWNoZW5kXCIsIHRoaXMuX29uVmlld01vdXNlVXApO1xuICAgICAgICB0aGlzLl9zb3VyY2VWaWV3Lm9uKFwibW91c2V1cG91dHNpZGVcIiwgdGhpcy5fb25WaWV3TW91c2VVcE91dHNpZGUpO1xuICAgICAgICB0aGlzLl9zb3VyY2VWaWV3Lm9uKFwidG91Y2hlbmRvdXRzaWRlXCIsIHRoaXMuX29uVmlld01vdXNlVXBPdXRzaWRlKTtcbiAgICAgICAgdGhpcy5fc291cmNlVmlldy5vbihcIm1vdXNlbW92ZVwiLCB0aGlzLl9vblZpZXdNb3VzZU1vdmUpO1xuICAgICAgICB0aGlzLl9zb3VyY2VWaWV3Lm9uKFwidG91Y2htb3ZlXCIsIHRoaXMuX29uVmlld01vdXNlTW92ZSk7XG4gICAgICAgIFdpbmRvd1V0aWxzLnJlZ2lzdGVyTW91c2VPdXQodGhpcy5fb25WaWV3TW91c2VNb3ZlT3V0T2ZXaW5kb3cpO1xuICAgIH07XG5cbiAgICBwLl9kZXJlZ2lzdGVySW50ZXJhY3Rpb25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFdpbmRvd1V0aWxzLmRlcmVnaXN0ZXJNb3VzZU91dCh0aGlzLl9vblZpZXdNb3VzZU1vdmVPdXRPZldpbmRvdyk7XG4gICAgICAgIHRoaXMuX3NvdXJjZVZpZXcucmVtb3ZlTGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5fb25WaWV3TW91c2VNb3ZlKTtcbiAgICAgICAgdGhpcy5fc291cmNlVmlldy5yZW1vdmVMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLl9vblZpZXdNb3VzZU1vdmUpO1xuICAgICAgICB0aGlzLl9zb3VyY2VWaWV3LnJlbW92ZUxpc3RlbmVyKFwidG91Y2hlbmRvdXRzaWRlXCIsIHRoaXMuX29uVmlld01vdXNlVXBPdXRzaWRlKTtcbiAgICAgICAgdGhpcy5fc291cmNlVmlldy5yZW1vdmVMaXN0ZW5lcihcIm1vdXNldXBvdXRzaWRlXCIsIHRoaXMuX29uVmlld01vdXNlVXBPdXRzaWRlKTtcbiAgICAgICAgdGhpcy5fc291cmNlVmlldy5yZW1vdmVMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMuX29uVmlld01vdXNlVXApO1xuICAgICAgICB0aGlzLl9zb3VyY2VWaWV3LnJlbW92ZUxpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLl9vblZpZXdNb3VzZVVwKTtcbiAgICAgICAgdGhpcy5fc291cmNlVmlldy5yZW1vdmVMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5fb25WaWV3TW91c2VEb3duKTtcbiAgICAgICAgdGhpcy5fc291cmNlVmlldy5yZW1vdmVMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9vblZpZXdNb3VzZURvd24pO1xuICAgIH07XG5cbiAgICBwLl9vblZpZXdNb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2JlZ2luRHJhZyhldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fb25WaWV3TW91c2VVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5fZW5kRHJhZyhldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fb25WaWV3TW91c2VVcE91dHNpZGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2VuZERyYWcoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX29uVmlld01vdXNlTW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5fZHJhZ01vdmUoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX29uVmlld01vdXNlTW92ZU91dE9mV2luZG93ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmREcmFnKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwLl9iZWdpbkRyYWcgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ZpZXdJc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wb2ludGVySUQgPSBldmVudC5kYXRhLmlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMuX3ZpZXdJc1NlbGVjdGVkID0gdHJ1ZTtcblxuICAgICAgICAvLyBTYXZlIG1vdXNlIHBvc2l0aW9uIGFuZCBvZmZzZXQuXG4gICAgICAgIHRoaXMuX2xhc3RNb3VzZVBvc2l0aW9uID0gZXZlbnQuZGF0YS5nbG9iYWw7XG5cbiAgICAgICAgdmFyIG1vdXNlTG9jYWxQb3MgPSB0aGlzLmdldExvY2FsTW91c2VQb3NpdGlvbigpO1xuICAgICAgICB0aGlzLl9tb3VzZU9mZnNldFZlYyA9IFZlY3Rvci5zdWIobW91c2VMb2NhbFBvcywgdGhpcy5fdmlld1RyYW5zZm9ybWVyLnZpZXcucG9zaXRpb24pO1xuXG4gICAgICAgIC8vIFB1dCB0aGUgdmlldyBpbiBhIGRyYWcgc3RhcnRlZCBzdGF0ZS5cbiAgICAgICAgdGhpcy5fdmlldy5zY2FsZS54ICo9IHRoaXMuX3ZpZXdEcmFnUmVzY2FsZTtcbiAgICAgICAgdGhpcy5fdmlldy5zY2FsZS55ICo9IHRoaXMuX3ZpZXdEcmFnUmVzY2FsZTtcblxuICAgICAgICB0aGlzLl92aWV3VHJhbnNmb3JtZXIuY2FwdHVyZVN0YXRlKCk7XG4gICAgICAgIHRoaXMuX3ZpZXdUcmFuc2Zvcm1lci51cGRhdGVTdGF0ZSgwLjApO1xuXG4gICAgICAgIC8vIE5vdGlmeSB0aGUgY2FsbGJhY2suXG4gICAgICAgIGlmICh0aGlzLl9kcmFnU3RhcnRlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9kcmFnU3RhcnRlZENhbGxiYWNrKGV2ZW50LCB0aGlzLl92aWV3KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3AgZXZlbnQgcHJvcGFnYXRpb24gaWYgc3BlY2lmaWVkLlxuICAgICAgICBpZiAodGhpcy5fc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwLl9kcmFnTW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBVcGRhdGUgdGhlIGRyYWcgcG9zaXRpb24gb25seSBmb3IgY2xpY2sgLyB0b3VjaCBJRCB0aGF0IGJlZ2FuIHRoZSBkcmFnLlxuICAgICAgICBpZiAoIXRoaXMuX3ZpZXdJc1NlbGVjdGVkIHx8IChldmVudC5kYXRhLmlkZW50aWZpZXIgIT09IHRoaXMuX3BvaW50ZXJJRCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RNb3VzZVBvc2l0aW9uID0gZXZlbnQuZGF0YS5nbG9iYWw7XG5cbiAgICAgICAgLy8gTm90aWZ5IHRoZSBjYWxsYmFjay5cbiAgICAgICAgaWYgKHRoaXMuX2RyYWdNb3ZlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9kcmFnTW92ZWRDYWxsYmFjayhldmVudCwgdGhpcy5fdmlldyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fZW5kRHJhZyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX3ZpZXdJc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92aWV3SXNTZWxlY3RlZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIFJlc3RvcmUgdGhlIHZpZXcgYmFjayB0byBhIG5vbi1kcmFnIHN0YXRlLlxuICAgICAgICB0aGlzLl92aWV3LnNjYWxlLnggLz0gdGhpcy5fdmlld0RyYWdSZXNjYWxlO1xuICAgICAgICB0aGlzLl92aWV3LnNjYWxlLnkgLz0gdGhpcy5fdmlld0RyYWdSZXNjYWxlO1xuXG4gICAgICAgIHRoaXMuX3ZpZXdUcmFuc2Zvcm1lci5yZXN0b3JlU3RhdGUoKTtcblxuICAgICAgICAvLyBOb3RpZnkgdGhlIGNhbGxiYWNrLlxuICAgICAgICBpZiAodGhpcy5fZHJhZ0VuZGVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdFbmRlZENhbGxiYWNrKGV2ZW50LCB0aGlzLl92aWV3KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3AgZXZlbnQgcHJvcGFnYXRpb24gaWYgc3BlY2lmaWVkLlxuICAgICAgICBpZiAodGhpcy5fc3RvcFByb3BhZ2F0aW9uICYmIGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuRHJhZ1ZpZXdTY3JpcHQgPSBEcmFnVmlld1NjcmlwdDtcbn0oKSk7XG4iLCJpbXBvcnQgU2xpY2VTcHJpdGVWaWV3IGZyb20gXCIuL1NsaWNlU3ByaXRlVmlld1wiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwicGl4aS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbGljZUJ1dHRvblZpZXcgZXh0ZW5kcyBTbGljZVNwcml0ZVZpZXd7XG4gICAgXG4gICAgcHVibGljIGltYWdlRnJhbWVzOiBhbnkgPSB7fTtcbiAgICBwdWJsaWMgdHJhbnNpdGlvbkNvbG9yVGludHM6IGFueSA9IHt9O1xuICAgIHB1YmxpYyBhbmNob3I6IFBvaW50ID0gbmV3IFBvaW50KDAsIDApO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBhbnkpe1xuICAgICAgICBzdXBlcihjb25maWcpO1xuICAgICAgICB0aGlzLmltYWdlRnJhbWVzID0ge1xuICAgICAgICAgICAgdXA6IHRoaXMuZ2V0Q2FjaGUoY29uZmlnLmltYWdlRnJhbWVOYW1lcy51cCksXG4gICAgICAgICAgICBvdmVyOiB0aGlzLmdldENhY2hlKGNvbmZpZy5pbWFnZUZyYW1lTmFtZXMub3ZlciksXG4gICAgICAgICAgICBkb3duOiB0aGlzLmdldENhY2hlKGNvbmZpZy5pbWFnZUZyYW1lTmFtZXMuZG93biksXG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5nZXRDYWNoZShjb25maWcuaW1hZ2VGcmFtZU5hbWVzLmRpc2FibGVkKVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbkNvbG9yVGludHMgPSBjb25maWcudHJhbnNpdGlvbkNvbG9yVGludHM7XG5cbiAgICAgICAgdGhpcy5pbnRlcmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuYnV0dG9uTW9kZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy50ZXh0dXJlID0gdGhpcy5pbWFnZUZyYW1lcy51cDtcbiAgICAgICAgaWYgKGNvbmZpZy5hbmNob3Ipe1xuICAgICAgICAgICAgdGhpcy5hbmNob3IgPSBjb25maWcuYW5jaG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbihcInBvaW50ZXJkb3duXCIsIHRoaXMub25Eb3duLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLm9uKFwicG9pbnRlcnVwXCIsIHRoaXMub25VcC5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLm9uKFwicG9pbnRlcm92ZXJcIiwgdGhpcy5vbkhvdmVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLm9uKFwicG9pbnRlcmxlYXZlXCIsIHRoaXMub25MZWF2ZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLm9uKFwicG9pbnRlcm91dFwiLCB0aGlzLm9uVXBPdXRzaWRlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLm9uKFwicG9pbnRlcmNhbmNlbFwiLCB0aGlzLm9uVXBPdXRzaWRlLmJpbmQodGhpcykpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXRVcFN0YXRlKCk7XG4gICAgfVxuXG4gICAgZ2V0IGlzRW5hYmxlZCgpOmJvb2xlYW57XG4gICAgICAgIHJldHVybiB0aGlzLmJ1dHRvbk1vZGU7XG4gICAgfVxuXG4gICAgc2V0IGlzRW5hYmxlZCh2YWx1ZTogYm9vbGVhbil7XG4gICAgICAgIHRoaXMuYnV0dG9uTW9kZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGhhc1Nwcml0ZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5pbWFnZUZyYW1lcy51cDtcbiAgICB9XG5cbiAgICBpc1RyYW5zaXRpb25Db2xvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy50cmFuc2l0aW9uQ29sb3JUaW50cztcbiAgICB9O1xuXG4gICAgb25VcChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRVcFN0YXRlKCk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgc2V0VXBTdGF0ZSgpe1xuICAgICAgICBpZiAodGhpcy5oYXNTcHJpdGUoKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlID0gdGhpcy5pbWFnZUZyYW1lcy51cDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1RyYW5zaXRpb25Db2xvcigpKSB7XG4gICAgICAgICAgICB0aGlzLnRpbnQgPSBmcmFtZXdvcmsuQ29sb3VyVXRpbHMuY29sb3VyVG9OdW1iZXIoXCIjXCIgKyB0aGlzLnRyYW5zaXRpb25Db2xvclRpbnRzLnVwKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgb25Eb3duKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNTcHJpdGUoKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlID0gdGhpcy5pbWFnZUZyYW1lcy5kb3duO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzVHJhbnNpdGlvbkNvbG9yKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGludCA9IGZyYW1ld29yay5Db2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihcIiNcIiArIHRoaXMudHJhbnNpdGlvbkNvbG9yVGludHMuZG93bik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblVwT3V0c2lkZShldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzU3ByaXRlKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IHRoaXMuaW1hZ2VGcmFtZXMudXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNUcmFuc2l0aW9uQ29sb3IoKSkge1xuICAgICAgICAgICAgdGhpcy50aW50ID0gZnJhbWV3b3JrLkNvbG91clV0aWxzLmNvbG91clRvTnVtYmVyKFwiI1wiICsgdGhpcy50cmFuc2l0aW9uQ29sb3JUaW50cy51cCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkhvdmVyKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNTcHJpdGUoKSkge1xuXG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSB0aGlzLmltYWdlRnJhbWVzLm92ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNUcmFuc2l0aW9uQ29sb3IoKSkge1xuICAgICAgICAgICAgdGhpcy50aW50ID0gZnJhbWV3b3JrLkNvbG91clV0aWxzLmNvbG91clRvTnVtYmVyKFwiI1wiICsgdGhpcy50cmFuc2l0aW9uQ29sb3JUaW50cy5vdmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTGVhdmUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1Nwcml0ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSB0aGlzLmltYWdlRnJhbWVzLnVwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzVHJhbnNpdGlvbkNvbG9yKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGludCA9IGZyYW1ld29yay5Db2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihcIiNcIiArIHRoaXMudHJhbnNpdGlvbkNvbG9yVGludHMudXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vZmYoXCJwb2ludGVyZG93blwiLCB0aGlzLm9uRG93bik7XG4gICAgICAgIHRoaXMub2ZmKFwicG9pbnRlcnVwXCIsIHRoaXMub25VcCk7XG5cbiAgICAgICAgdGhpcy5vZmYoXCJwb2ludGVyb3ZlclwiLCB0aGlzLm9uSG92ZXIpO1xuICAgICAgICB0aGlzLm9mZihcInBvaW50ZXJsZWF2ZVwiLCB0aGlzLm9uTGVhdmUpO1xuXG4gICAgICAgIHRoaXMub2ZmKFwicG9pbnRlcm91dFwiLCB0aGlzLm9uVXBPdXRzaWRlKTtcbiAgICAgICAgdGhpcy5vZmYoXCJwb2ludGVyY2FuY2VsXCIsIHRoaXMub25VcE91dHNpZGUpO1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgVGV4dHVyZSwgUG9pbnQgfSBmcm9tIFwicGl4aS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaXRtYXBUZXh0VmlldyBleHRlbmRzIFBJWEkuQml0bWFwVGV4dHtcbiAgICBcbiAgICBwdWJsaWMgYW5jaG9yOiBQb2ludCA9IG5ldyBQb2ludCgwLDApO1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIHB1YmxpYyB2aWV3Q29uZmlnOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IGFueSl7XG4gICAgICAgIHN1cGVyKGNvbmZpZy50ZXh0LCBjb25maWcuZm9udCk7XG5cbiAgICAgICAgdGhpcy52aWV3Q29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGNvbmZpZy5wb3NpdGlvbjtcbiAgICAgICAgdGhpcy5hbmNob3IgPSBjb25maWcuYW5jaG9yO1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gY29uZmlnLm1heFdpZHRoOyAgICAgICBcbiAgICB9XG5cbiAgICBjZW50ZXJJblBhcmVudCgpe1xuICAgICAgICBpZiAodGhpcy5hbmNob3IpIHtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueCA9ICh0aGlzLnBhcmVudC53aWR0aCAqIHRoaXMuYW5jaG9yLngpO1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0gKHRoaXMucGFyZW50LmhlaWdodCAqIHRoaXMuYW5jaG9yLnkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHN0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0O1xuICAgIH1cbiAgICBzZXQgc3RyaW5nKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50ZXh0ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IG5vZGUoKTogUElYSS5Db250YWluZXIge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59IiwiLyoqXG4gKiBVc2UgUElYSS5Mb2FkZXIgdG8gbG9hZCBhc3NldHMuXG4gKlxuICogQXNzZXRzIGFyZSBkaXZpZGVkIGluIHtzY2VuZS1uYW1lfS1zY2VuZS5qc29uIGFuZCB7c2NlbmUtbmFtZX0tYXNzZXRzLmpzb25cbiAqXG4gKiBTdGVwcyB0byBsb2FkIGEgc2NlbmUgYXJlOlxuICogMS4gTG9hZCB0aGUgZGVzY3JpcHRpb24gZmlsZXMoIHtzY2VuZS1uYW1lfS1zY2VuZS5qc29uIGFuZCB7c2NlbmUtbmFtZX0tYXNzZXRzLmpzb24pLlxuICogMi4gTG9hZCB0aGUgcHJlZmFicyBhc3NldCBsaXN0LlxuICogIFRoZSB7c2NlbmUtbmFtZX0tYXNzZXRzLmpzb24gZ2l2ZXMgYSBsaXN0IG9mIGFzc2V0cyB0byBsb2FkOlxuICogICAgICAqIGxvb2tzIGZvciBhIHByZWZhYiBhc3NldCBkZXNjcmlwdGlvbiBmaWxlcyB0byBsb2FkLCBsb2FkIHRoZW0uXG4gKiAgICAgICogaW5zZXJ0IHRoZSBwcmVmYWJzIGFzc2V0cyBpbnRvIHRoZSBzY2VuZSdzIGFzc2V0IGxpc3QuXG4gKiAzLiBMb2FkIHRoZSBhc3NldHMgZnJvbSB0aGUgYXNzZXRzIGxpc3Qgb2J0YWluZWQgZnJvbSBzdGVwcyAyLlxuICogNC4gQ2FjaGUgdGhlIGFzc2V0cyBpZHMgYW5kIHJlZmVyZW5jZSBpdCBieSB0aGUgc2NlbmUncyBuYW1lLiAoIHRvIHVubG9hZCB0aGUgc2NlbmUncyBhc3NldHMpXG4gKlxuICovXG5cbmV4cG9ydCBjbGFzcyBBc3NldERlZmluaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGlkOiBzdHJpbmcsIHJlYWRvbmx5IHBhdGg6IHN0cmluZykgeyB9XG59XG5leHBvcnQgY2xhc3MgUHJlZmFiQXNzZXREZWZpbml0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihyZWFkb25seSBpZDogc3RyaW5nLCByZWFkb25seSBwcmVmYWJWaWV3Q29uZmlnOiBzdHJpbmcsIHJlYWRvbmx5IHByZWZhYjogc3RyaW5nKSB7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGluZ1NlcnZpY2Uge1xuXG4gICAgcHVibGljIHNjZW5lQXNzZXRzOiBhbnkgPSB7fTtcbiAgICBwdWJsaWMgYXNzZXRMaXN0Q29uZmlnOiBhbnkgPSB7fTtcblxuXG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgbG9hZGVyOiBQSVhJLkxvYWRlcikgeyB9XG5cbiAgICAvKipcbiAgICAgKiBsb2FkQXNzZXRzXG4gICAgICogQHBhcmFtIHNjZW5lTmFtZSA6IHN0cmluZ1xuICAgICAqIEBwYXJhbSBvblByb2dyZXNzIDogKHByb2dyZXNzOiBudW1iZXIpID0+IHZvaWQgLy8gWzAlIC0gMTAwJV1cbiAgICAgKiBAcGFyYW0gb25TY2VuZUFzc2V0c0xvYWRlZCA6IG9uU2NlbmVBc3NldHNMb2FkZWQ6IChzY2VuZVZpZXdDb25maWc6IGFueSkgPT4gdm9pZCAvLyAgcmV0dXJucyB0aGUgdmlldyBjb25maWcsIGF0IHRoYXQgcG9pbnRzIGFsbCBhc3NldHMgYXJlIGxvYWRlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZEFzc2V0cyhsb2FkZXI6IFBJWEkuTG9hZGVyLCBzY2VuZU5hbWU6IHN0cmluZywgb25Qcm9ncmVzczogKHByb2dyZXNzOiBudW1iZXIpID0+IHZvaWQsIG9uU2NlbmVBc3NldHNMb2FkZWQ6IChzY2VuZVZpZXdDb25maWc6IGFueSkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmxvYWRBc3NldHNEZXNjcmlwdGlvbkZpbGVzKGxvYWRlciwgc2NlbmVOYW1lLCBvblByb2dyZXNzLCBvblNjZW5lQXNzZXRzTG9hZGVkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRBc3NldHNEZXNjcmlwdGlvbkZpbGVzKGxvYWRlcjogUElYSS5Mb2FkZXIsIHNjZW5lTmFtZTogc3RyaW5nLCBvblByb2dyZXNzOiAocHJvZ3Jlc3M6IG51bWJlcikgPT4gdm9pZCwgb25TY2VuZUFzc2V0c0xvYWRlZDogKHZpZXdDb25maWc6IGFueSkgPT4gdm9pZCkge1xuICAgICAgICBsb2FkZXIuYWRkKHRoaXMuZ2V0Rm9ybWF0U2NlbmVQYXRoS2V5KHNjZW5lTmFtZSksIHRoaXMuZ2V0Rm9ybWF0U2NlbmVQYXRoKHNjZW5lTmFtZSkpO1xuICAgICAgICBsb2FkZXIuYWRkKHRoaXMuZ2V0Rm9ybWF0U2NlbmVBc3NldHNLZXkoc2NlbmVOYW1lKSwgdGhpcy5nZXRGb3JtYXRTY2VuZUFzc2V0cyhzY2VuZU5hbWUpKTtcbiAgICAgICAgbG9hZGVyLmxvYWQodGhpcy5vbkFzc2V0RGVzY3JpcHRpb25GaWxlc0xvYWRlZChsb2FkZXIsIHNjZW5lTmFtZSwgb25Qcm9ncmVzcywgb25TY2VuZUFzc2V0c0xvYWRlZCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Bc3NldERlc2NyaXB0aW9uRmlsZXNMb2FkZWQobG9hZGVyOiBQSVhJLkxvYWRlciwgc2NlbmVOYW1lOiBzdHJpbmcsIG9uUHJvZ3Jlc3M6IChwcm9ncmVzczogbnVtYmVyKSA9PiB2b2lkLCBvblNjZW5lQXNzZXRzTG9hZGVkOiAodmlld0NvbmZpZzogYW55KSA9PiB2b2lkKTogKC4uLnBhcmFtczogYW55W10pID0+IGFueSB7XG4gICAgICAgIHJldHVybiAoXywgcmVzb3VyY2VzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhc3NldExpc3QgPSByZXNvdXJjZXNbdGhpcy5nZXRGb3JtYXRTY2VuZUFzc2V0c0tleShzY2VuZU5hbWUpXS5kYXRhO1xuICAgICAgICAgICAgdGhpcy5hc3NldExpc3RDb25maWdbc2NlbmVOYW1lXSA9IGFzc2V0TGlzdDtcbiAgICAgICAgICAgIGNvbnN0IHZpZXdDb25maWcgPSByZXNvdXJjZXNbdGhpcy5nZXRGb3JtYXRTY2VuZVBhdGhLZXkoc2NlbmVOYW1lKV0uZGF0YTtcblxuICAgICAgICAgICAgdGhpcy5sb2FkUHJlZmFiQXNzZXRzKGxvYWRlciwgYXNzZXRMaXN0LCAoY29tYmluZWRBc3NldExpc3Q6IGFueVtdKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkFzc2V0c0Rlc2NyaXB0aW9uRmlsZXNMb2FkZWQobG9hZGVyLCBzY2VuZU5hbWUsIGNvbWJpbmVkQXNzZXRMaXN0LCB2aWV3Q29uZmlnLCBvblByb2dyZXNzLCBvblNjZW5lQXNzZXRzTG9hZGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZFByZWZhYkFzc2V0cyhsb2FkZXI6IFBJWEkuTG9hZGVyLCBhc3NldExpc3Q6IGFueVtdLCBjb21wbGV0aW9uOiAoY29tYmluZWRBc3NldExpc3Q6IGFueVtdKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IGlkcyA9IFtdO1xuICAgICAgICBhc3NldExpc3QuZm9yRWFjaCgoZWxlbWVudDogUHJlZmFiQXNzZXREZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc1ByZWZhYjogYm9vbGVhbiA9IGVsZW1lbnQgJiYgZWxlbWVudC5pZCAmJiAoXCJwcmVmYWJcIiBpbiBlbGVtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGlzTm90TG9hZGVkOiBib29sZWFuID0gbG9hZGVyLnJlc291cmNlc1tlbGVtZW50LmlkXSA9PSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzUHJlZmFiICYmIGlzTm90TG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgaWRzLnB1c2goZWxlbWVudC5pZCk7XG4gICAgICAgICAgICAgICAgbG9hZGVyLmFkZChlbGVtZW50LmlkLCBlbGVtZW50LnByZWZhYik7XG4gICAgICAgICAgICAgICAgbG9hZGVyLmFkZChlbGVtZW50LmlkICsgZnJhbWV3b3JrLlZpZXdGYWN0b3J5LnZpZXdDb25maWdTdWZmaXgsIGVsZW1lbnQucHJlZmFiVmlld0NvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChpZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgb25QcmVmYWJBc3NldHNMb2FkZWQgPSAoXzogUElYSS5Mb2FkZXIsIHJlc291cmNlczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvdXJjZVByZWZhYkFzc2V0cyA9IHJlc291cmNlc1tpZF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZVByZWZhYkFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXRMaXN0ID0gYXNzZXRMaXN0LmNvbmNhdChyZXNvdXJjZVByZWZhYkFzc2V0cy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZFByZWZhYkFzc2V0cyhsb2FkZXIsIGFzc2V0TGlzdCwgY29tcGxldGlvbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbG9hZGVyLmxvYWQob25QcmVmYWJBc3NldHNMb2FkZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGxldGlvbihhc3NldExpc3QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkFzc2V0c0Rlc2NyaXB0aW9uRmlsZXNMb2FkZWQobG9hZGVyOiBQSVhJLkxvYWRlciwgc2NlbmVOYW1lOiBzdHJpbmcsIGFzc2V0czogYW55LCB2aWV3Q29uZmlnOiBhbnksIG9uUHJvZ3Jlc3M6IChwcm9ncmVzczogbnVtYmVyKSA9PiB2b2lkLCBvblNjZW5lQXNzZXRzTG9hZGVkOiAoY29uZmlnOiBhbnkpID0+IHZvaWQpIHtcbiAgICAgICAgbG9hZGVyLm9uUHJvZ3Jlc3MuYWRkKChsb2FkZXI6IFBJWEkuTG9hZGVyLCByZXNvdXJjZTogUElYSS5Mb2FkZXJSZXNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgb25Qcm9ncmVzcyhsb2FkZXIucHJvZ3Jlc3MpO1xuICAgICAgICB9KTtcblxuICAgICAgICBsb2FkZXIub25FcnJvci5hZGQoKGVyck1lc3NhZ2U6IHN0cmluZywgbG9hZGVyOiBQSVhJLkxvYWRlciwgcmVzb3VyY2U6IFBJWEkuTG9hZGVyUmVzb3VyY2UpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3JcIiwgZXJyTWVzc2FnZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFzc2V0cy5mb3JFYWNoKHRoaXMubG9hZEFzc2V0SWZOZWVkZWQobG9hZGVyKSk7XG5cbiAgICAgICAgbG9hZGVyLmxvYWQodGhpcy5vbkFzc2V0TG9hZGVkKHNjZW5lTmFtZSwgb25TY2VuZUFzc2V0c0xvYWRlZCwgdmlld0NvbmZpZykpO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBsb2FkQXNzZXRJZk5lZWRlZChsb2FkZXI6IFBJWEkuTG9hZGVyKTogYW55IHtcbiAgICAgICAgcmV0dXJuIChlbGVtZW50OiBBc3NldERlZmluaXRpb24pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzRWxlbWVudExvYWRlZEFuZE5vdEluVGV4dHVyZUNhY2hlOiBib29sZWFuID0gZWxlbWVudC5wYXRoICYmIGxvYWRlci5yZXNvdXJjZXNbZWxlbWVudC5pZF0gPT0gbnVsbCAmJiBQSVhJLnV0aWxzLlRleHR1cmVDYWNoZVtlbGVtZW50LmlkXSA9PSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzRWxlbWVudExvYWRlZEFuZE5vdEluVGV4dHVyZUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyhgYWRkaW5nIGFzc2V0ICR7ZWxlbWVudC5pZH0sICR7ZWxlbWVudC5wYXRofWApO1xuICAgICAgICAgICAgICAgIGxvYWRlci5hZGQoZWxlbWVudC5pZCwgZWxlbWVudC5wYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQXNzZXRMb2FkZWQoc2NlbmVOYW1lOiBzdHJpbmcsIG9uU2NlbmVBc3NldHNMb2FkZWQ6IChjb25maWc6IGFueSkgPT4gdm9pZCwgdmlld0NvbmZpZzogYW55KTogKC4uLnBhcmFtczogYW55W10pID0+IGFueSB7XG4gICAgICAgIHJldHVybiAoXywgcmVzb3VyY2VzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFNwaW5lRGF0YSh2aWV3Q29uZmlnLCByZXNvdXJjZXMpO1xuICAgICAgICAgICAgdGhpcy5zYXZlU2NlbmVBc3NldHNJbkNhY2hlKHNjZW5lTmFtZSwgcmVzb3VyY2VzKTtcblxuICAgICAgICAgICAgb25TY2VuZUFzc2V0c0xvYWRlZCh2aWV3Q29uZmlnKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNhdmVTY2VuZUFzc2V0c0luQ2FjaGUoc2NlbmVOYW1lOiBzdHJpbmcsIHJlc291cmNlczogYW55KSB7XG5cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5hc3NldExpc3RDb25maWdbc2NlbmVOYW1lXTtcbiAgICAgICAgaWYgKCF0aGlzLnNjZW5lQXNzZXRzW3NjZW5lTmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuc2NlbmVBc3NldHNbc2NlbmVOYW1lXSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGVsZW1lbnQuaWRcbiAgICAgICAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VzW2lkXVxuICAgICAgICAgICAgaWYgKHJlc291cmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2VuZUFzc2V0c1tzY2VuZU5hbWVdLnB1c2goaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEFzc2V0VG9TY2VuZUNhY2hlKHNjZW5lTmFtZTogc3RyaW5nLCBpZDogc3RyaW5nLCByZXNvdXJjZXM6IGFueSkge1xuICAgICAgICBpZiAoIXRoaXMuc2NlbmVBc3NldHNbc2NlbmVOYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5zY2VuZUFzc2V0c1tzY2VuZU5hbWVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZXNbaWRdXG4gICAgICAgIGlmIChyZXNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5zY2VuZUFzc2V0c1tzY2VuZU5hbWVdLnB1c2goaWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdW5sb2FkQXNzZXRzRm9yU2NlbmVcbiAgICAgKiBTeW5jaHJvbm91c2x5IHVubG9hZCBhc3NldHMgZm9yIGEgc2NlbmUgcmVmZXJlZCB0byBieSBzY2VuZU5hbWUuXG4gICAgICogQ2xlYXIgUElYSSBjYWNoZVxuICAgICAqIENsZWFyIExvYWRpbmdTZXJ2aWNlIGNhY2hlXG4gICAgICogQHBhcmFtIHNjZW5lTmFtZSA6IHN0cmluZ1xuICAgICAqL1xuICAgIHB1YmxpYyB1bmxvYWRBc3NldHNGb3JTY2VuZShzY2VuZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBhc3NldHMgPSB0aGlzLnNjZW5lQXNzZXRzW3NjZW5lTmFtZV07XG4gICAgICAgIHRoaXMudW5sb2FkQXNzZXRzKGFzc2V0cyk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMuc2NlbmVBc3NldHNbc2NlbmVOYW1lXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdW5sb2FkQXNzZXRzKGFzc2V0czogc3RyaW5nW10pIHtcbiAgICAgICAgYXNzZXRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkVW5sb2FkVGV4dHVyZShpZCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0dXJlID0gUElYSS51dGlscy5UZXh0dXJlQ2FjaGVbaWRdO1xuICAgICAgICAgICAgICAgIHRleHR1cmUgJiYgdGV4dHVyZS5kZXN0cm95KHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL0ZJWCBNRTogUmVtb3ZlIGF0bGFzIHRleHR1cmVzIGdlbmVyYXRlZCBieSBQSVhJIHNwaW5lXG4gICAgICAgICAgICBjb25zdCBhdGxhc1BhdHRlcm4gPSBpZCtcIl9hdGxhc1wiXG4gICAgICAgICAgICBjb25zdCBhdGxhc1Jlc291cmNlcyA9IE9iamVjdC5rZXlzKHRoaXMubG9hZGVyLnJlc291cmNlcykuZmlsdGVyKHZhbHVlID0+IHZhbHVlLmluY2x1ZGVzKGF0bGFzUGF0dGVybikpO1xuICAgICAgICAgICAgYXRsYXNSZXNvdXJjZXMuZm9yRWFjaCggYXRsYXNSZXNvdWNlID0+IGRlbGV0ZSB0aGlzLmxvYWRlci5yZXNvdXJjZXNbYXRsYXNSZXNvdWNlXSk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmxvYWRlci5yZXNvdXJjZXNbaWRdO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZVNjZW5lQ29uZmlnRmlsZXNGcm9tUmVzb3VyY2VzKHNjZW5lTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHNjZW5lVmlld0NvbmZpZyA9IHRoaXMuZ2V0Rm9ybWF0U2NlbmVQYXRoS2V5KHNjZW5lTmFtZSk7XG4gICAgICAgIGNvbnN0IHNjZW5lQXNzZXRzID0gdGhpcy5nZXRGb3JtYXRTY2VuZUFzc2V0c0tleShzY2VuZU5hbWUpO1xuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxvYWRlci5yZXNvdXJjZXNbc2NlbmVWaWV3Q29uZmlnXTtcbiAgICAgICAgZGVsZXRlIHRoaXMubG9hZGVyLnJlc291cmNlc1tzY2VuZUFzc2V0c107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNob3VsZFVubG9hZFRleHR1cmUoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldExvYWRlZEFzc2V0KGxvYWRlcjogUElYSS5Mb2FkZXIsIGlkOiBzdHJpbmcpOiBhbnkge1xuICAgICAgICBpZiAoIWxvYWRlci5yZXNvdXJjZXNbaWRdKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9hZGVyLnJlc291cmNlc1tpZF0uZGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldExvYWRlZEltYWdlKGlkOiBzdHJpbmcpOiBhbnkge1xuICAgICAgICByZXR1cm4gUElYSS51dGlscy5UZXh0dXJlQ2FjaGVbaWRdO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Rm9ybWF0U2NlbmVQYXRoS2V5KHNjZW5lTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHNjZW5lTmFtZSArIFwiU2NlbmVcIjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEZvcm1hdFNjZW5lUGF0aChzY2VuZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIi4vYXNzZXRzL3NjZW5lcy9cIiArIHNjZW5lTmFtZSArIFwiLXNjZW5lLmpzb25cIjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEZvcm1hdFNjZW5lQXNzZXRzS2V5KHNjZW5lTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHNjZW5lTmFtZSArIFwiQXNzZXRzXCI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRGb3JtYXRTY2VuZUFzc2V0cyhzY2VuZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIi4vYXNzZXRzL3NjZW5lcy9cIiArIHNjZW5lTmFtZSArIFwiLWFzc2V0cy5qc29uXCI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRTcGluZURhdGEoY29uZmlnOiBhbnksIHJlc291cmNlczogUElYSS5Mb2FkZXJSZXNvdXJjZVtdKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNvbmZpZ1trZXldO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VDb25maWdFbGVtZW50KGVsZW1lbnQsIHJlc291cmNlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlQ29uZmlnRWxlbWVudChlbGVtZW50OiBhbnksIHJlc291cmNlczogUElYSS5Mb2FkZXJSZXNvdXJjZVtdKSB7XG4gICAgICAgIGlmIChlbGVtZW50W1widHlwZVwiXSA9PSBcInNwaW5lXCIpIHtcbiAgICAgICAgICAgIGVsZW1lbnRbXCJzcGluZURhdGFcIl0gPSByZXNvdXJjZXNbZWxlbWVudFtcInNwaW5lTmFtZVwiXV1bXCJzcGluZURhdGFcIl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnRbJ2NoaWxkcmVuJ10gJiYgZWxlbWVudFsnY2hpbGRyZW4nXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBlbGVtZW50WydjaGlsZHJlbiddLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VDb25maWdFbGVtZW50KGNoaWxkLCByZXNvdXJjZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZEFkZGl0aW9uYWxBc3NldChzY2VuZU5hbWU6IHN0cmluZywgaWQ6IHN0cmluZywgcGF0aDogc3RyaW5nLCBvbkNvbXBsZXRlOiAoZGF0YSkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmxvYWRlci5hZGQoaWQsIHBhdGgpO1xuICAgICAgICB0aGlzLmxvYWRlci5sb2FkKChfLCByZXNvdXJjZXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkQXNzZXRUb1NjZW5lQ2FjaGUoc2NlbmVOYW1lLCBpZCwgcmVzb3VyY2VzKTtcbiAgICAgICAgICAgIG9uQ29tcGxldGUocmVzb3VyY2VzW2lkXS5kYXRhKTtcbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBTaGFkb3dlZFNwaW5lUG9wT3ZlciwgeyBBbmltYXRpb25zIH0gZnJvbSBcIi4vU2hhZG93ZWRTcGluZVBvcE92ZXJcIjtcbmltcG9ydCBTaGFkb3dTaGFkZXIgZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvU2hhZG93U2hhZGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbiwgY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb25BbmRWaXNpYmxlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0FuaW1hdGlvbkFjdGlvbnNcIjtcbmltcG9ydCB7IFNlcnZpY2VOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgQXJ0aHVyQnVpbGRJbmZvU2VydmljZSBmcm9tIFwiLi4vLi4vU2VydmljZXMvQXJ0aHVyQnVpbGRJbmZvU2VydmljZVwiO1xuaW1wb3J0IHsgU3RvcmllcyB9IGZyb20gXCIuLi8uLi9zcGxhc2gvU3BsYXNoTWVkaWF0b3JcIjtcbmltcG9ydCB7IENhcHRpb25TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL0NhcHRpb25TZXJ2aWNlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BsYXNoU2NyZWVuUG9wT3ZlckRlbGVnYXRlIHtcbiAgICBvbkxvYWRpbmdBbmltQ29tcGxldGUoKTogdm9pZDtcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwbGFzaFNjcmVlblBvcE92ZXIgZXh0ZW5kcyBTaGFkb3dlZFNwaW5lUG9wT3ZlciB7XG5cbiAgICBwcml2YXRlIF9wbGF5QnV0dG9uOiBmcmFtZXdvcmsuU3BpbmVWaWV3ID0gbnVsbDtcbiAgICBwcml2YXRlIF9sb2dvOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHByaXZhdGUgX2xvYWRpbmdBbmltOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHB1YmxpYyBhY3RpdmVidXR0b25zID0gW107XG4gICAgcHJvdGVjdGVkIGJhY2tncm91bmRBbHBoYSA9IDA7XG5cbiAgICBwcm90ZWN0ZWQgbWFzazogUElYSS5TcHJpdGU7XG4gICAgcHJvdGVjdGVkIGlzUHJvZ3Jlc3Npbmc6IGFueTtcbiAgICBwcm90ZWN0ZWQgcHJvZ3Jlc3M6IG51bWJlciA9IDA7XG4gICAgc2hvd0FjdGlvbnM6IGZyYW1ld29yay5TZXF1ZW5jZUFjdGlvbjtcblxuICAgIHB1YmxpYyBnZXQgcGxheUJ1dHRvbigpOiBmcmFtZXdvcmsuU3BpbmVWaWV3IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsYXlCdXR0b247XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBsb2dvKCk6IGZyYW1ld29yay5TcGluZVZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9nbztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGxvYWRpbmdBbmltKCk6IGZyYW1ld29yay5TcGluZVZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZGluZ0FuaW07XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBidXR0b25zKCk6IGZyYW1ld29yay5TcGluZVZpZXdbXSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5sb2dvLCB0aGlzLmxvYWRpbmdBbmltLCB0aGlzLl9wbGF5QnV0dG9uXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBidWlsZEluZm9TZXJ2aWNlKCk6IEFydGh1ckJ1aWxkSW5mb1NlcnZpY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkJ1aWxkSW5mb1NlcnZpY2UpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgY2FwdGlvblNlcnZpY2UoKTogQ2FwdGlvblNlcnZpY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkNhcHRpb25TZXJ2aWNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdmlldyBcbiAgICAgKiBAcGFyYW0gZGlTZXJ2aWNlIFxuICAgICAqIEBwYXJhbSBzZWxlY3Rpb25UeXBlIFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSwgcHJvdGVjdGVkIGRlbGVnYXRlOiBTcGxhc2hTY3JlZW5Qb3BPdmVyRGVsZWdhdGUpIHtcbiAgICAgICAgc3VwZXIodmlldywgZGlTZXJ2aWNlKTtcblxuICAgICAgICB0aGlzLl9sb2dvID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJsb2dvLWFuaW1cIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5fbG9hZGluZ0FuaW0gPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImxvYWRpbmctYW5pbVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLl9wbGF5QnV0dG9uID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJwbGF5LWJ1dHRvblwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLnNldFRpdGxlRm9yTG9hZGluZ0JhcigpO1xuICAgICAgICB0aGlzLmFjdGl2ZWJ1dHRvbnMgPSBbZmFsc2UsIGZhbHNlLCB0cnVlXTtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBzZXRTaGFkb3coKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IG5ldyBTaGFkb3dTaGFkZXIobmV3IFBJWEkuUG9pbnQoMC4wNSwgMS4wKSwgMTUpO1xuICAgICAgICB0aGlzLl9sb2dvLmZpbHRlcnMgPSBbZmlsdGVyXTtcbiAgICAgICAgY29uc3QgZmlsdGVyTG9hZGluZyA9IG5ldyBTaGFkb3dTaGFkZXIobmV3IFBJWEkuUG9pbnQoLTAuMDUsIDEuMCksIDE1KTtcbiAgICAgICAgdGhpcy5fbG9hZGluZ0FuaW0uZmlsdGVycyA9IFtmaWx0ZXJMb2FkaW5nXTtcbiAgICAgICAgY29uc3QgZmlsdGVyUGxheSA9IG5ldyBTaGFkb3dTaGFkZXIobmV3IFBJWEkuUG9pbnQoLTAuMDUsIDEuMCksIDE1KTtcbiAgICAgICAgdGhpcy5fcGxheUJ1dHRvbi5maWx0ZXJzID0gW2ZpbHRlclBsYXldO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjdXN0b21TaG93QWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBtaW5EZWxheSA9IDA7XG4gICAgICAgIGNvbnN0IG1heERlbGF5ID0gMC4zO1xuXG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuYWxwaGEgPSAxLjA7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nby52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2dvLnN0YXRlLnNldEFuaW1hdGlvbigwLCBBbmltYXRpb25zLmlkbGUsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BsYXlCdXR0b24udmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdBbmltLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdBbmltLmFscGhhID0gMDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uQW5kVmlzaWJsZSh0aGlzLl9wbGF5QnV0dG9uLCBBbmltYXRpb25zLnNob3csIGZhbHNlKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLl9wbGF5QnV0dG9uLCBBbmltYXRpb25zLmlkbGUsIHsgbG9vcDogdHJ1ZSB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgIF0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZ2V0U2hvd0xvYWRpbmdBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHRoaXMuY2FuY2VsVW5pcXVlQWN0aW9uKCk7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLmdldFZvQWN0aW9uKCksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkaW5nQW5pbS52aXNpYmxlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdBbmltLmFscGhhID0gMTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX2xvYWRpbmdBbmltLCBBbmltYXRpb25zLnNob3csIHsgbG9vcDogZmFsc2UgfSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5fbG9hZGluZ0FuaW0sIEFuaW1hdGlvbnMuaWRsZSwgeyBsb29wOiB0cnVlIH0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRWb0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgbGV0IHZvID0gXCJzcGxhc2gtc3RhcnQtc2VsZWN0ZWQubXAzXCI7XG4gICAgICAgIGxldCB0ZXh0ID0gXCJBcnRodXIncyBQdXBwZXQgVGhlYXRlciBwcmVzZW50czogTGl0dGxlIFJlZCBSaWRpbmcgSG9vZFwiO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuYnVpbGRJbmZvU2VydmljZS5zdG9yeUZsYXZvcikge1xuICAgICAgICAgICAgY2FzZSBTdG9yaWVzLmxycmg6XG4gICAgICAgICAgICAgICAgdm8gPSBcImxycmgtXCIgKyB2bztcbiAgICAgICAgICAgICAgICB0ZXh0ID0gXCJBcnRodXIncyBQdXBwZXQgVGhlYXRlciBwcmVzZW50czogTGl0dGxlIFJlZCBSaWRpbmcgSG9vZFwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdG9yaWVzLmNpbmRlcmVsbGE6XG4gICAgICAgICAgICAgICAgdm8gPSBcImNpbmRlci1cIiArIHZvO1xuICAgICAgICAgICAgICAgIHRleHQgPSBcIkFydGh1cidzIFB1cHBldCBUaGVhdGVyIHByZXNlbnRzOiBDaW5kZXJlbGxhXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0b3JpZXMuZ29sZGlsb2NrczpcbiAgICAgICAgICAgICAgICB2byA9IFwiZ2wtXCIgKyB2bztcbiAgICAgICAgICAgICAgICB0ZXh0ID0gXCJBcnRodXIncyBQdXBwZXQgVGhlYXRlciBwcmVzZW50czogR29sZGlsb2NrcyBhbmQgdGhlIFRocmVlIEJlYXJzXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZPQ2FwdGlvbkFjdGlvbih2bywgdGV4dCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRWT0NhcHRpb25BY3Rpb24odm86IHN0cmluZywgdGV4dDogc3RyaW5nLCkge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNhcHRpb25TZXJ2aWNlLmRpc3BsYXlDYXB0aW9uKHRleHQpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlZPKHZvKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5jYXB0aW9uU2VydmljZS5jbGVhckNhcHRpb25zKCkpLFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFRpdGxlRm9yTG9hZGluZ0JhcigpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmJ1aWxkSW5mb1NlcnZpY2Uuc3RvcnlGbGF2b3IpIHtcbiAgICAgICAgICAgIGNhc2UgU3Rvcmllcy5scnJoOlxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdBbmltLnNrZWxldG9uLnNldFNraW5CeU5hbWUoXCJscnJoXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdG9yaWVzLmNpbmRlcmVsbGE6XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9hZGluZ0FuaW0uc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShcImNpbmRlcmVsbGFcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0b3JpZXMuZ29sZGlsb2NrczpcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkaW5nQW5pbS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKFwiZ29sZGllbG9ja3NcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldEhpZGVTdGFydEJ1dHRvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgdGhpcy5jYW5jZWxVbmlxdWVBY3Rpb24oKTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX3BsYXlCdXR0b24sIEFuaW1hdGlvbnMuaGlkZSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVNwaW5lKHRoaXMuX3BsYXlCdXR0b24pXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNYXNrKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SGlkZVByb2dyZXNzQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX2xvYWRpbmdBbmltLCBBbmltYXRpb25zLmhpZGUpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVNwaW5lKHRoaXMuX2xvYWRpbmdBbmltKVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5fbG9nbywgQW5pbWF0aW9ucy5oaWRlKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTcGluZSh0aGlzLl9sb2dvKVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlU3BpbmUoc3BpbmU6IGZyYW1ld29yay5TcGluZVZpZXcpIHtcbiAgICAgICAgc3BpbmUuYXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICBzcGluZS5zdGF0ZS5zZXRFbXB0eUFuaW1hdGlvbigwLCAwKTtcbiAgICAgICAgc3BpbmUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICBzcGluZS5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMudmlldy5yZW1vdmVDaGlsZChzcGluZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldE1hc2soKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuX2xvYWRpbmdBbmltLmNoaWxkcmVuWzJdIGFzIFBJWEkuQ29udGFpbmVyO1xuICAgICAgICBjb25zdCBzcHJpdGUgPSBjb250YWluZXIuY2hpbGRyZW5bMF0gYXMgUElYSS5TcHJpdGU7XG5cbiAgICAgICAgaWYgKCF0aGlzLm1hc2spIHtcbiAgICAgICAgICAgIHRoaXMubWFzayA9IFBJWEkuU3ByaXRlLmZyb20oc3ByaXRlLnRleHR1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXNrLnggPSBzcHJpdGUueCAtIHNwcml0ZS5oZWlnaHQgLyAyOztcbiAgICAgICAgdGhpcy5tYXNrLnkgPSBzcHJpdGUueSArIHNwcml0ZS53aWR0aCAvIDI7XG4gICAgICAgIHRoaXMubWFzay5yb3RhdGlvbiA9IHNwcml0ZS5yb3RhdGlvbjtcblxuICAgICAgICB0aGlzLm1hc2suc2NhbGUueCA9IDA7XG5cbiAgICAgICAgc3ByaXRlLnBhcmVudC5hZGRDaGlsZCh0aGlzLm1hc2spO1xuICAgICAgICBzcHJpdGUubWFzayA9IHRoaXMubWFzaztcbiAgICB9XG5cbiAgICBzZXRQcm9ncmVzcyhwcm9ncmVzczogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuaXNQcm9ncmVzc2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICB9XG5cbiAgICByZW1vdmVNYXNrKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLl9sb2FkaW5nQW5pbS5jaGlsZHJlblsyXSBhcyBQSVhJLkNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgc3ByaXRlID0gY29udGFpbmVyLmNoaWxkcmVuWzBdIGFzIFBJWEkuU3ByaXRlO1xuICAgICAgICBzcHJpdGUucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMubWFzayk7XG4gICAgICAgIHNwcml0ZS5tYXNrID0gbnVsbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3VzdG9tSGlkZUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKHRoaXMuYnV0dG9ucy5tYXAoKHNwaW5lKSA9PiBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbigoc3BpbmUgYXMgZnJhbWV3b3JrLlNwaW5lVmlldyksIEFuaW1hdGlvbnMuaGlkZSwgZmFsc2UpKSk7XG4gICAgfVxuXG4gICAgdXBkYXRlKGRlbHRhOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzQmVpbmdEZWluaXQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN1cGVyLnVwZGF0ZShkZWx0YSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVQcm9ncmVzcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlUHJvZ3Jlc3MoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUHJvZ3Jlc3NpbmcpIHtcbiAgICAgICAgICAgIHRoaXMubWFzay5zY2FsZS54ID0gdGhpcy5wcm9ncmVzcztcbiAgICAgICAgICAgIC8vIHRoaXMubWFzay5zY2FsZS54ID0gTWF0aEV4dC5sZXJwKHRoaXMubWFzay5zY2FsZS54LCB0aGlzLnByb2dyZXNzLCBkZWx0YSk7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXNrLnNjYWxlLnggPj0gMC45OSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFzay5zY2FsZS54ID0gMS4wO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNQcm9ncmVzc2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUub25Mb2FkaW5nQW5pbUNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KHRydWUpO1xuICAgIH1cbn1cbiIsImltcG9ydCBTY2VuZU1lZGlhdG9yIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9tZWRpYXRvcnMvU2NlbmVNZWRpYXRvclwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYWNrZ3JvdW5kZWRQb3BPdmVyIGV4dGVuZHMgU2NlbmVNZWRpYXRvciB7XG4gICAgcHJvdGVjdGVkIGJhY2tncm91bmQ6IGZyYW1ld29yay5HcmFwaGljc1ZpZXcgPSBudWxsO1xuICAgIHByb3RlY3RlZCByZWFkb25seSBwb3BVcERpYWxvZ0hpZGRlblkgPSAxMDAwO1xuICAgIHByb3RlY3RlZCByZWFkb25seSBwb3BVcERpYWxvZ1Nob3duWSA9IDE1MDtcbiAgICBwcm90ZWN0ZWQgYmFja2dyb3VuZEFscGhhID0gMC40O1xuXG4gICAgc3RhdGljIGJhY2tncm91bmROYW1lOiBzdHJpbmcgPSBcIkJhY2tncm91bmRlZFBvcE92ZXJCYWNrZ3JvdW5kXCI7XG5cbiAgICBwcm90ZWN0ZWQgcm9vdFZpZXc6IGZyYW1ld29yay5Db250YWluZXJWaWV3ID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgYW5jaG9yVmlld0luZGV4OiBudW1iZXIgPSAwO1xuXG4gICAgaW5pdCgpIHtcbiAgICBsZXQgdGVtcFZpZXcgPSB0aGlzLnZpZXc7XG4gICAgICAgIHdoaWxlICh0ZW1wVmlldy5wYXJlbnQpIHtcbiAgICAgICAgICAgIHRlbXBWaWV3ID0gdGVtcFZpZXcucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm9vdFZpZXcgPSB0ZW1wVmlldyBhcyBmcmFtZXdvcmsuQ29udGFpbmVyVmlldztcbiAgICAgICAgY29uc3QgY2FudmFzID0gZnJhbWV3b3JrLkNvbnRhaW5lclZpZXcuZ2V0Q2hpbGRCeU5hbWVSZWN1cnNpdmUodGhpcy5yb290VmlldywgXCJDYW52YXNcIikgYXMgZnJhbWV3b3JrLkNvbnRhaW5lclZpZXc7XG4gICAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgICAgIHRoaXMucm9vdFZpZXcgPSBjYW52YXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDYW52YXMgbm9kZSBub3QgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNyZWF0ZUJhY2tncm91bmQoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0QW5jaG9yVmlldygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Vmlldy5jaGlsZHJlbi5pbmRleE9mKHRoaXMudmlldyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVCYWNrZ3JvdW5kKCkge1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5nYW1lV2lkdGgpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZ2FtZUhlaWdodCk7XG4gICAgICAgIGlmICh0aGlzLmJhY2tncm91bmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBuZXcgZnJhbWV3b3JrLkdyYXBoaWNzVmlldygpO1xuICAgICAgICB0aGlzLmJhY2tncm91bmQubmFtZSA9IEJhY2tncm91bmRlZFBvcE92ZXIuYmFja2dyb3VuZE5hbWU7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZC5iZWdpbkZpbGwoMHgwMDAwMDApO1xuICAgICAgICB0aGlzLmJhY2tncm91bmQuZHJhd1JlY3QoLXdpZHRoIC8gMiwgLWhlaWdodCAvIDIsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmJhY2tncm91bmQuaW50ZXJhY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyTm9Ib3Zlck5vU291bmQodGhpcy5iYWNrZ3JvdW5kLCAoKSA9PiB7IH0sIHRydWUpO1xuXG4gICAgICAgIGlmICh0aGlzLmJhY2tncm91bmQuaGFzT3duUHJvcGVydHkoJ2N1cnNvcicpKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmQuY3Vyc29yID0gbnVsbDtcbiAgICAgICAgfSBcblxuICAgICAgICB0aGlzLmJhY2tncm91bmQuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMudmlldy5pbnRlcmFjdGl2ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFkZEJhY2tncm91bmQoKSB7XG4gICAgICAgIHRoaXMucm9vdFZpZXcuYWRkQ2hpbGRBdCh0aGlzLmJhY2tncm91bmQsIHRoaXMuZ2V0QW5jaG9yVmlldygpKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVtb3ZlQmFja2dyb3VuZCgpIHtcbiAgICAgICAgdGhpcy5yb290Vmlldy5yZW1vdmVDaGlsZCh0aGlzLmJhY2tncm91bmQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93KG9uU2hvd246ICgpID0+IHZvaWQgPSAoKSA9PiB7IH0pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5iZWZvcmVTaG93KCk7XG4gICAgICAgIHRoaXMudmlldy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hZGRCYWNrZ3JvdW5kKCk7XG4gICAgICAgIHRoaXMucnVuVW5pcXVlQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMob25TaG93biksXG4gICAgICAgICAgICAgICAgdGhpcy5jdXN0b21TaG93QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4odGhpcy5iYWNrZ3JvdW5kLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvOiB7IGFscGhhOiB0aGlzLmJhY2tncm91bmRBbHBoYSB9LFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC4xXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBiZWZvcmVTaG93KCk6IHZvaWQge1xuICAgICAgICAvL0RPIE5PVEhJTkdcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3VzdG9tU2hvd0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlR3ZWVuKHRoaXMudmlldywge1xuICAgICAgICAgICAgdG86IHsgYWxwaGE6IDEuMCB9LFxuICAgICAgICAgICAgZHVyYXRpb246IDAuM1xuICAgICAgICB9KVxuICAgIH07XG5cbiAgICBwdWJsaWMgaGlkZShhZnRlckhpZGVGdW5jOiAoKSA9PiB2b2lkID0gKCkgPT4geyB9KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnZpZXcudmlzaWJsZSA9PSBmYWxzZSl7XG4gICAgICAgICAgICBhZnRlckhpZGVGdW5jKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMucnVuVW5pcXVlQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXN0b21IaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlR3ZWVuKHRoaXMuYmFja2dyb3VuZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG86IHsgYWxwaGE6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjFcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCYWNrZ3JvdW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGFmdGVySGlkZUZ1bmMoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSlcbiAgICAgICAgKTtcblxuICAgIH1cblxuICAgIHByb3RlY3RlZCBjdXN0b21IaWRlQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4odGhpcy52aWV3LCB7XG4gICAgICAgICAgICB0bzogeyBhbHBoYTogMCB9LFxuICAgICAgICAgICAgZHVyYXRpb246IDAuM1xuICAgICAgICB9KTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBBY3Rpb25Nb3ZlbWVudFN0YXRlIGZyb20gXCIuL0FjdGlvbk1vdmVtZW50U3RhdGVcIjtcbmltcG9ydCB7IEFuaW1hdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9CYXNlQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0M0FjdGlvbk1vdmVtZW50U3RhdGUgZXh0ZW5kcyBBY3Rpb25Nb3ZlbWVudFN0YXRlIHtcbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBwbGF5QWN0aW9uKCkge1xuICAgICAgICBsZXQgYWN0aW9uID0gbnVsbFxuICAgICAgICBpZiAodGhpcy5jaGFyYWN0ZXIucmVhY3Rpb25BY3Rpb24gPT0gQW5pbWF0aW9ucy5ydW4gfHxcbiAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLnJlYWN0aW9uQWN0aW9uID09IEFuaW1hdGlvbnMuanVtcCkge1xuXG4gICAgICAgICAgICBhY3Rpb24gPSBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5UmVhY3Rpb25BY3Rpb24oKSksXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRSdW5BY3Rpb24oKVxuICAgICAgICAgICAgXSlcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aW9uID0gZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5UmVhY3Rpb25BY3Rpb24oKSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oYWN0aW9uKVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFJ1bkFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuZ2V0VHJhbnNsYXRpb25BY3Rpb24oKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0VHJhbnNsYXRpb25BY3Rpb24oKSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZmluYWxQb3NpdGlvblg6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgZ2V0VHJhbnNsYXRpb25BY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gMTtcbiAgICAgICAgY29uc3QgbWF4ID0gNTAwXG4gICAgICAgIGNvbnN0IG1pbiA9IDI4MFxuICAgICAgICB0aGlzLmZpbmFsUG9zaXRpb25YID0gdGhpcy5jaGFyYWN0ZXIueDtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldENoYXJhY3Rlck1vdmVBY3Rpb25Ub1BvaW50KG5ldyBQSVhJLlBvaW50KG1heCwgdGhpcy5jaGFyYWN0ZXIueSksICgpID0+IHRoaXMuY2hhcmFjdGVyLnBsYXlSZWFjdGlvbkFjdGlvbigpLCBkdXJhdGlvbiksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2hhcmFjdGVyLnNldERpcmVjdGlvbihEaXJlY3Rpb24ubGVmdCkpLFxuICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvblRvUG9pbnQobmV3IFBJWEkuUG9pbnQodGhpcy5maW5hbFBvc2l0aW9uWCwgdGhpcy5jaGFyYWN0ZXIueSksICgpID0+IHRoaXMuY2hhcmFjdGVyLnBsYXlSZWFjdGlvbkFjdGlvbigpLCBkdXJhdGlvbiksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2hhcmFjdGVyLnNldERpcmVjdGlvbihEaXJlY3Rpb24ucmlnaHQpKSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICBpZiAodGhpcy5maW5hbFBvc2l0aW9uWCkge1xuICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIueCA9IHRoaXMuZmluYWxQb3NpdGlvblg7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cblxufSIsImltcG9ydCBTdGF0ZSBmcm9tIFwiLi9TdGF0ZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0ZUNvbnRleHR7XG4gICAgY3VycmVudFN0YXRlOiBTdGF0ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGVDb250ZXh0IGltcGxlbWVudHMgSVN0YXRlQ29udGV4dCB7XG5cbiAgICBwcml2YXRlIF9jdXJyZW50U3RhdGU6IFN0YXRlID0gbnVsbFxuICAgIHNldCBjdXJyZW50U3RhdGUodmFsdWU6IFN0YXRlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJuZXcgdmFsdWUgaXMgbnVsbFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY3VycmVudFN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50U3RhdGUub25EZWluaXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTdGF0ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9jdXJyZW50U3RhdGUuY29udGV4dCA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRTdGF0ZS5vbkluaXQoKTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudFN0YXRlKCk6IFN0YXRle1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFN0YXRlO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBTaGFkb3dlZFNwaW5lUG9wT3ZlciwgeyBBbmltYXRpb25zIH0gZnJvbSBcIi4vU2hhZG93ZWRTcGluZVBvcE92ZXJcIjtcbmltcG9ydCB7IGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uQW5kVmlzaWJsZSwgY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb24gfSBmcm9tIFwiLi4vLi4vdXRpbHMvQW5pbWF0aW9uQWN0aW9uc1wiO1xuaW1wb3J0IFNoYWRvd1NoYWRlciBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9TaGFkb3dTaGFkZXJcIjtcbmltcG9ydCB7IENhcHRpb25TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL0NhcHRpb25TZXJ2aWNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IFZPSW5zdHJ1Y3Rpb25BY3Rpb24gZnJvbSBcIi4uLy4uL3V0aWxzL1ZPSW5zdHJ1Y3Rpb25BY3Rpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvbXB0UG9wT3ZlciBleHRlbmRzIFNoYWRvd2VkU3BpbmVQb3BPdmVyIHtcblxuXG4gICAgcHJvdGVjdGVkIF95ZXNTcGluZTogZnJhbWV3b3JrLlNwaW5lVmlldyA9IG51bGw7XG4gICAgcHJvdGVjdGVkIF9ub1NwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3ID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgX3RpdGxlU3BpbmU6IGZyYW1ld29yay5TcGluZVZpZXcgPSBudWxsO1xuICAgIHByb3RlY3RlZCB2bzogc3RyaW5nO1xuICAgIHByb3RlY3RlZCB0ZXh0OiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGNhcHRpb25BY3Rpb246IGZyYW1ld29yay5BY3Rpb247XG5cbiAgICBwdWJsaWMgZ2V0IHllc1NwaW5lKCk6IGZyYW1ld29yay5TcGluZVZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy5feWVzU3BpbmU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBub1NwaW5lKCk6IGZyYW1ld29yay5TcGluZVZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9TcGluZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHRpdGxlU3BpbmUoKTogZnJhbWV3b3JrLlNwaW5lVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZVNwaW5lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYnV0dG9ucygpOiBmcmFtZXdvcmsuU3BpbmVWaWV3W10ge1xuICAgICAgICByZXR1cm4gW3RoaXMubm9TcGluZSwgdGhpcy55ZXNTcGluZSwgdGhpcy5fdGl0bGVTcGluZV07XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBjYXB0aW9uU2VydmljZSgpOiBDYXB0aW9uU2VydmljZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXQoU2VydmljZU5hbWUuQ2FwdGlvblNlcnZpY2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB2aWV3IFxuICAgICAqIEBwYXJhbSBkaVNlcnZpY2UgXG4gICAgICogQHBhcmFtIHNlbGVjdGlvblR5cGUgW2xlZnQsIG1pZGRsZSwgcmlnaHRdXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmlldzogVmlldywgcHJvdGVjdGVkIGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKHZpZXcsIGRpU2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5fdGl0bGVTcGluZSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwidWktb2stYW5pbS10aXRsZVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLl95ZXNTcGluZSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwidWktb2stYW5pbS1wb3NpdGl2ZVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLl9ub1NwaW5lID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJ1aS1vay1hbmltLW5lZ2F0aXZlXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG5cbiAgICAgICAgdGhpcy5fdGl0bGVTcGluZS5hdXRvVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3llc1NwaW5lLmF1dG9VcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbm9TcGluZS5hdXRvVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWN0aXZlYnV0dG9ucyA9IFt0cnVlLCB0cnVlLCB0cnVlXTtcblxuICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCggYnV0dG9uID0+IGJ1dHRvbi52aXNpYmxlID0gZmFsc2UpO1xuICAgICAgICB0aGlzLm1hbnVhbFNwaW5lcy5wdXNoKHRoaXMubm9TcGluZSwgdGhpcy55ZXNTcGluZSwgdGhpcy5fdGl0bGVTcGluZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldFNoYWRvdygpIHtcbiAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlciA9IG5ldyBTaGFkb3dTaGFkZXIobmV3IFBJWEkuUG9pbnQoLTAuMDUsIDEuMCksIDE1KTtcbiAgICAgICAgICAgIGJ1dHRvbi5maWx0ZXJzID0gW2ZpbHRlcl07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFJlcGxheSgpIHtcbiAgICAgICAgdGhpcy5fdGl0bGVTcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKFNraW4ud2F0Y2hUaGVSZXBsYXkpO1xuICAgICAgICB0aGlzLl95ZXNTcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKFNraW4uY2hhcmFjdGVyc2VsZWN0KTtcbiAgICAgICAgdGhpcy5fbm9TcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKFNraW4ucGxheSk7XG4gICAgICAgIHRoaXMudm8gPSBcImVuZC1tZW51LXZvLm1wM1wiXG4gICAgICAgIHRoaXMudGV4dCA9IFwiVGFwIHRoZSBQTEFZIEJVVFRPTiB0byB3YXRjaCB0aGUgc2hvdyB5b3UgbWFkZSwgb3IgdGFwIHRoZSBORVcgYnV0dG9uIHRvIG1ha2UgYSBuZXcgc3Rvcnkgd2l0aCBkaWZmZXJlbnQgY2hvaWNlcy5cIlxuICAgIH1cblxuICAgIHNldFBhdXNlZCgpIHtcbiAgICAgICAgdGhpcy5fdGl0bGVTcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKFNraW4ucGF1c2VkKTtcbiAgICAgICAgdGhpcy5feWVzU3BpbmUuc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShTa2luLmNoYXJhY3RlcnNlbGVjdCk7XG4gICAgICAgIHRoaXMuX25vU3BpbmUuc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShTa2luLmJhY2spO1xuICAgICAgICB0aGlzLnZvID0gXCJwYXVzZS1tZW51LXZvLm1wM1wiXG4gICAgICAgIHRoaXMudGV4dCA9IFwiVGFwIHRoZSBBUlJPVyB0byBnbyBiYWNrIHdoZXJlIHlvdSB3ZXJlLCBvciB0aGUgTkVXIGJ1dHRvbiB0byBtYWtlIGEgbmV3IHN0b3J5IHdpdGggZGlmZmVyZW50IGNob2ljZXMuXCJcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3VzdG9tU2hvd0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgdGhpcy5jdXN0b21TaG93QWN0aW9uSGFuZGxlID0gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmFscGhhID0gMS4wO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRWT0NhcHRpb25BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKHRoaXMuYnV0dG9ucy5tYXAoKHNwaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlYnV0dG9uc1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb25BbmRWaXNpYmxlKHNwaW5lLCBBbmltYXRpb25zLnNob3csIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwodGhpcy5idXR0b25zLm1hcCgoc3BpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVidXR0b25zW2luZGV4XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbihzcGluZSwgQW5pbWF0aW9ucy5pZGxlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gdGhpcy5jdXN0b21TaG93QWN0aW9uSGFuZGxlO1xuICAgIH1cblxuICAgIHBsYXlWTygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FwdGlvbkFjdGlvbil7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbEFjdGlvbih0aGlzLmNhcHRpb25BY3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5jYXB0aW9uQWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJ1bkFjdGlvbih0aGlzLmdldFZPQ2FwdGlvbkFjdGlvbigpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFZPQ2FwdGlvbkFjdGlvbigpIHtcbiAgICAgICAgdGhpcy5jYXB0aW9uQWN0aW9uID0gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNhcHRpb25TZXJ2aWNlLmRpc3BsYXlDYXB0aW9uKHRoaXMudGV4dCkpLFxuICAgICAgICAgICAgbmV3IFZPSW5zdHJ1Y3Rpb25BY3Rpb24odGhpcy52bywgdGhpcy5kaVNlcnZpY2UpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNhcHRpb25TZXJ2aWNlLmNsZWFyQ2FwdGlvbnMoKSksXG4gICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gdGhpcy5jYXB0aW9uQWN0aW9uO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjdXN0b21IaWRlQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwodGhpcy5idXR0b25zLm1hcCgoc3BpbmUpID0+IGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uKHNwaW5lLCBBbmltYXRpb25zLmhpZGUsIGZhbHNlKSkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goc3BpbmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzcGluZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcFZvQW5kQ2FwdGlvbnMoKXtcbiAgICAgICAgaWYgKHRoaXMuY2FwdGlvbkFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWxBY3Rpb24odGhpcy5jYXB0aW9uQWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuY2FwdGlvbkFjdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2Uuc3RvcEluc3RydWN0aW9uVm8oKTtcbiAgICAgICAgdGhpcy5jYXB0aW9uU2VydmljZS5jbGVhckNhcHRpb25zKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlKGZyYW1lVGltZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0JlaW5nRGVpbml0KSB7IHJldHVybjsgfVxuICAgICAgICBzdXBlci51cGRhdGUoZnJhbWVUaW1lKTtcbiAgICAgICAgY29uc3QgdXBkYXRlU3BpbmVUaW1lID0gZnJhbWVUaW1lLzI7XG4gICAgICAgIHRoaXMubWFudWFsU3BpbmVzLmZvckVhY2gocyA9PiBzLnVwZGF0ZSh1cGRhdGVTcGluZVRpbWUpKTtcbiAgICAgICAgdGhpcy51cGRhdGVTaGFkb3coKTtcbiAgICB9XG5cbn1cblxuZW51bSBTa2luIHtcbiAgICBwYXVzZWQgPSBcInBhdXNlZFwiLFxuICAgIHdhdGNoVGhlUmVwbGF5ID0gXCJ3YXRjaC10aGUtcmVwbGF5XCIsXG4gICAgYmFjayA9IFwiYmFja1wiLFxuICAgIGNoYXJhY3RlcnNlbGVjdCA9IFwiY2hhcmFjdGVyc2VsZWN0XCIsXG4gICAgcGxheSA9IFwicGxheVwiLFxufVxuIiwiaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgU291bmRTZXJ2aWNlIGZyb20gXCIuLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9Tb3VuZFNlcnZpY2VcIjtcbmltcG9ydCB7IFNlcnZpY2VOYW1lIH0gZnJvbSBcIi4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZPSW5zdHJ1Y3Rpb25BY3Rpb24gZXh0ZW5kcyBmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9ue1xuXG4gICAgcHJpdmF0ZSBfaXNQbGF5aW5nOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIHNvdW5kU2VydmljZTogU291bmRTZXJ2aWNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzb3VuZE5hbWU6IHN0cmluZywgZGlTZXJ2aWNlOiBESVNlcnZpY2Upe1xuICAgICAgICBzdXBlcigocGFyZW50LCBkZWx0YSwgZGVsdGFNUykgPT4ge1xuICAgICAgICAgICB0aGlzLnBsYXkocGFyZW50LCBkZWx0YSwgZGVsdGFNUylcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc291bmRTZXJ2aWNlID0gZGlTZXJ2aWNlLmdldChTZXJ2aWNlTmFtZS5Tb3VuZFNlcnZpY2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldCgpIHtcbiAgICAgICAgc3VwZXIucmVzZXQoKTtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgfTtcblxuICAgIHBsYXkocGFyZW50LCBkZWx0YSwgZGVsdGFNUykge1xuICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICBpZiAoIXRoaXMuc291bmROYW1lKSB7XG4gICAgICAgICAgICBwYXJlbnQuZmluaXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuc291bmRTZXJ2aWNlLnBsYXlJbnN0cnVjdGlvblZvKHRoaXMuc291bmROYW1lLCAoKSA9PiB7ICAgXG4gICAgICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5maW5pc2goKTsgIC8vIE1hcmsgdGhpcyBhY3Rpb24gYXMgY29tcGxldGUuXG4gICAgICAgIH0gKTtcbiAgICAgICAgXG4gICAgfTtcblxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUGxheWluZygpKSB7XG4gICAgICAgICAgICB0aGlzLnNvdW5kU2VydmljZS5zdG9wSW5zdHJ1Y3Rpb25WbygpO1xuICAgICAgICAgICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaXNQbGF5aW5nICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUGxheWluZztcbiAgICB9O1xufSIsImltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlld1wiXG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0ICogYXMgVFdFRU4gZnJvbSBcIkB0d2VlbmpzL3R3ZWVuLmpzL2Rpc3QvdHdlZW4uY2pzLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBTdGFnZVRyYW5zaXRpb257XG4gICAgcHJpdmF0ZSBzdGFnZUJhY2t3YWxsUG9pbnQ6IFRyYW5zaXRpb25Qb2ludCA9IG5ldyBUcmFuc2l0aW9uUG9pbnQobmV3IFBJWEkuUG9pbnQoMCwgLTIxMCksIG5ldyBQSVhJLlBvaW50KDEuNSwgLTEzMykpXG4gICAgcHJpdmF0ZSBzdGFnZUJhY2t3YWxsU2NhbGU6IFRyYW5zaXRpb25Qb2ludCA9IG5ldyBUcmFuc2l0aW9uUG9pbnQobmV3IFBJWEkuUG9pbnQoMS40LCAxLjQpLCBuZXcgUElYSS5Qb2ludCgxLCAxKSlcblxuICAgIHByaXZhdGUgc3RhZ2VGbG9vclBvaW50OiBUcmFuc2l0aW9uUG9pbnQgPSBuZXcgVHJhbnNpdGlvblBvaW50KG5ldyBQSVhJLlBvaW50KDAsIDM2NSksIG5ldyBQSVhJLlBvaW50KDAsIDI4NikpXG4gICAgcHJpdmF0ZSBzdGFnZUZsb29yU2NhbGU6IFRyYW5zaXRpb25Qb2ludCA9IG5ldyBUcmFuc2l0aW9uUG9pbnQobmV3IFBJWEkuUG9pbnQoMS4zODUsIDEuMzg1KSwgbmV3IFBJWEkuUG9pbnQoMSwgMSkpXG5cbiAgICBwcml2YXRlIHN0YWdlU2lkZXdhbGxQb2ludDogVHJhbnNpdGlvblBvaW50ID0gbmV3IFRyYW5zaXRpb25Qb2ludChuZXcgUElYSS5Qb2ludCgwLCAtMTQ1KSwgbmV3IFBJWEkuUG9pbnQoMCwgLTg5KSlcbiAgICBwcml2YXRlIHN0YWdlU2lkZXdhbGxTY2FsZTogVHJhbnNpdGlvblBvaW50ID0gbmV3IFRyYW5zaXRpb25Qb2ludChuZXcgUElYSS5Qb2ludCgxLjUsIDEuNSksIG5ldyBQSVhJLlBvaW50KDEsIDEpKVxuXG4gICAgcHJpdmF0ZSBzdGFnZU1haW5DdXJ0YWluUG9pbnQ6IFRyYW5zaXRpb25Qb2ludCA9IG5ldyBUcmFuc2l0aW9uUG9pbnQobmV3IFBJWEkuUG9pbnQoLTIuNSwgNDMwKSwgbmV3IFBJWEkuUG9pbnQoMCwgNDAwKSlcbiAgICBwcml2YXRlIHN0YWdlTWFpbkN1cnRhaW5TY2FsZTogVHJhbnNpdGlvblBvaW50ID0gbmV3IFRyYW5zaXRpb25Qb2ludChuZXcgUElYSS5Qb2ludCgxLjI3LCAxLjI3KSwgbmV3IFBJWEkuUG9pbnQoMS4xLCAxLjEpKVxuXG4gICAgcHJpdmF0ZSBzdGFnZTogZnJhbWV3b3JrLlNwcml0ZVZpZXc7XG4gICAgcHJpdmF0ZSBzaWRld2FsbHM6IGZyYW1ld29yay5TcHJpdGVWaWV3O1xuICAgIHByaXZhdGUgYmFja3dhbGw6IGZyYW1ld29yay5TcHJpdGVWaWV3O1xuICAgIHByaXZhdGUgbWFpbkN1cnRhaW46IGZyYW1ld29yay5TcGluZVZpZXc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXc6IFZpZXcpe1xuICAgICAgICB0aGlzLnN0YWdlID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJzdGFnZS1zdGFnZVwiKSBhcyBmcmFtZXdvcmsuU3ByaXRlVmlldztcbiAgICAgICAgdGhpcy5zaWRld2FsbHMgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcInN0YWdlLXNpZGV3YWxsc1wiKSBhcyBmcmFtZXdvcmsuU3ByaXRlVmlldztcbiAgICAgICAgdGhpcy5iYWNrd2FsbCA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwic3RhZ2UtYmFja3dhbGxcIikgYXMgZnJhbWV3b3JrLlNwcml0ZVZpZXc7XG4gICAgICAgIHRoaXMubWFpbkN1cnRhaW4gPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcIm1haW5jdXJ0YWluLWFuaW1cIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH0gXG5cbiAgICBwdWJsaWMgcmVzZXQoKXtcblxuICAgICAgICB0aGlzLnN0YWdlLnBvc2l0aW9uID0gdGhpcy5zdGFnZUZsb29yUG9pbnQuc3RhcnQ7XG4gICAgICAgIHRoaXMuc2lkZXdhbGxzLnBvc2l0aW9uID0gdGhpcy5zdGFnZVNpZGV3YWxsUG9pbnQuc3RhcnQ7XG4gICAgICAgIHRoaXMuYmFja3dhbGwucG9zaXRpb24gPSB0aGlzLnN0YWdlQmFja3dhbGxQb2ludC5zdGFydDtcbiAgICAgICAgdGhpcy5tYWluQ3VydGFpbi5wb3NpdGlvbiA9IHRoaXMuc3RhZ2VNYWluQ3VydGFpblBvaW50LnN0YXJ0O1xuXG4gICAgICAgIHRoaXMuc3RhZ2Uuc2NhbGUgPSB0aGlzLnN0YWdlRmxvb3JTY2FsZS5zdGFydDtcbiAgICAgICAgdGhpcy5zaWRld2FsbHMuc2NhbGUgPSB0aGlzLnN0YWdlU2lkZXdhbGxTY2FsZS5zdGFydDtcbiAgICAgICAgdGhpcy5iYWNrd2FsbC5zY2FsZSA9IHRoaXMuc3RhZ2VCYWNrd2FsbFNjYWxlLnN0YXJ0O1xuICAgICAgICB0aGlzLm1haW5DdXJ0YWluLnNjYWxlID0gdGhpcy5zdGFnZU1haW5DdXJ0YWluU2NhbGUuc3RhcnQ7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgZ2V0VHJhbnNpdGlvblBhcmFsYXhBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSAzLjA7XG4gICAgICAgIC8vIGNvbnN0IGR1cmF0aW9uID0gMDtcbiAgICAgICAgY29uc3QgZWFzaW5nID0gIFRXRUVOLkVhc2luZy5DdWJpYy5PdXQ7XG4gICAgICAgIC8vY29uc3QgZWFzaW5nID0gVFdFRU4uRWFzaW5nLkxpbmVhci5Ob25lO1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4odGhpcy5tYWluQ3VydGFpbi5zY2FsZSwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHRoaXMuc3RhZ2VNYWluQ3VydGFpblNjYWxlLmVuZC54LCB5OiB0aGlzLnN0YWdlTWFpbkN1cnRhaW5TY2FsZS5lbmQueSB9LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgICAgICBlYXNpbmc6IGVhc2luZ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbih0aGlzLm1haW5DdXJ0YWluLnBvc2l0aW9uLCB7XG4gICAgICAgICAgICAgICAgdG86IHsgeDogdGhpcy5zdGFnZU1haW5DdXJ0YWluUG9pbnQuZW5kLngsIHk6IHRoaXMuc3RhZ2VNYWluQ3VydGFpblBvaW50LmVuZC55IH0sXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGVhc2luZzogZWFzaW5nXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlR3ZWVuKHRoaXMuYmFja3dhbGwuc2NhbGUsIHtcbiAgICAgICAgICAgICAgICB0bzogeyB4OiB0aGlzLnN0YWdlQmFja3dhbGxTY2FsZS5lbmQueCwgeTogdGhpcy5zdGFnZUJhY2t3YWxsU2NhbGUuZW5kLnkgfSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBlYXNpbmdcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuVHdlZW4odGhpcy5iYWNrd2FsbC5wb3NpdGlvbiwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHRoaXMuc3RhZ2VCYWNrd2FsbFBvaW50LmVuZC54LCB5OiB0aGlzLnN0YWdlQmFja3dhbGxQb2ludC5lbmQueSB9LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgICAgICBlYXNpbmc6IGVhc2luZ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbih0aGlzLnNpZGV3YWxscy5zY2FsZSwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHRoaXMuc3RhZ2VTaWRld2FsbFNjYWxlLmVuZC54LCB5OiB0aGlzLnN0YWdlU2lkZXdhbGxTY2FsZS5lbmQueSB9LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgICAgICBlYXNpbmc6IGVhc2luZ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbih0aGlzLnNpZGV3YWxscy5wb3NpdGlvbiwge1xuICAgICAgICAgICAgICAgIHRvOiB7IHg6IHRoaXMuc3RhZ2VTaWRld2FsbFBvaW50LmVuZC54LCB5OiB0aGlzLnN0YWdlU2lkZXdhbGxQb2ludC5lbmQueSB9LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgICAgICBlYXNpbmc6IGVhc2luZ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5Ud2Vlbih0aGlzLnN0YWdlLnNjYWxlLCB7XG4gICAgICAgICAgICAgICAgdG86IHsgeDogdGhpcy5zdGFnZUZsb29yU2NhbGUuZW5kLngsIHk6IHRoaXMuc3RhZ2VGbG9vclNjYWxlLmVuZC55IH0sXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGVhc2luZzogZWFzaW5nXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlR3ZWVuKHRoaXMuc3RhZ2UucG9zaXRpb24sIHtcbiAgICAgICAgICAgICAgICB0bzogeyB4OiB0aGlzLnN0YWdlRmxvb3JQb2ludC5lbmQueCwgeTogdGhpcy5zdGFnZUZsb29yUG9pbnQuZW5kLnkgfSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBlYXNpbmdcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2l0aW9uUG9pbnR7XG4gICAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHN0YXJ0OiBQSVhJLlBvaW50LCBwdWJsaWMgcmVhZG9ubHkgZW5kOiBQSVhJLlBvaW50KXt9XG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIgZnJvbSBcIi4uLy4uL3BvcG92ZXJzL0Nvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lRGVsZWdhdGUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9EaWFsb2dMaW5lRGVsZWdhdGVcIjtcbmltcG9ydCBTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IHsgUGFyZW50Q2hvaWNlIH0gZnJvbSBcIi4uLy4uL2ZhY3Rvcmllcy9Hb2xkaWxvY2tzRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IEdvbGRpbG9ja3NTdG9yeURhdGEgZnJvbSBcIi4uL0dvbGRpbG9ja3NTdG9yeURhdGFcIjtcbmltcG9ydCB7IENvc3R1bWVzIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ29zdHVtZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyZW50QmVhckVudHJhbmNlU3RhdGUgZXh0ZW5kcyBTZWxlY3Rpb25TdGF0ZSBpbXBsZW1lbnRzIENob2ljZURpYWxvZ0xpbmVEZWxlZ2F0ZSB7XG5cbiAgICBwcml2YXRlIGNob2ljZVRvQ29zdHVtZU1hcDogTWFwPHN0cmluZywgQ29zdHVtZXM+ID0gbmV3IE1hcChbXG4gICAgICAgIFtQYXJlbnRDaG9pY2UucGFyZW50MUZhdGhlciwgQ29zdHVtZXMucHVwcGFiZWFyXSxcbiAgICAgICAgW1BhcmVudENob2ljZS5wYXJlbnQxTW90aGVyLCBDb3N0dW1lcy5tdW1tYWJlYXJdLFxuICAgIF0pO1xuXG4gICAgcHJpdmF0ZSBzcGluZXM6IE1hcDxzdHJpbmcsIGZyYW1ld29yay5TcGluZVZpZXc+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHVibGljIGdldCBwYXJlbnRCZWFyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUucGFyZW50QmVhcik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBiYWJ5QmVhcigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmJhYnlCZWFyKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihkaWFsb2c6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHByaXZhdGUgY29zdHVtZVNlbGVjdGlvblBvcE92ZXI6IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihkaWFsb2csIGNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuQ3VlRGlhbG9nTGluZURlbGVnYXRlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5jb3N0dW1lU2VsZWN0aW9uUG9wT3Zlci5zZXRJY29ucyhbQ29zdHVtZXMubXVtbWFiZWFyLCBDb3N0dW1lcy5wdXBwYWJlYXJdKTtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG4gICAgICAgIHRoaXMuc2V0UG9wT3ZlckJ1dHRvbkluYWN0aXZlKCk7XG4gICAgICAgIHRoaXMuc2hvd0NoYXJhY3RlcigpO1xuICAgIH1cblxuICAgIHNob3dDaGFyYWN0ZXIoKSB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICB0aGlzLmJhYnlCZWFyLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuYmFieUJlYXIucGxheUlkbGUoKSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcblxuICAgICAgICB0aGlzLnNldENvc3R1bWUoY2hvaWNlSWQpO1xuXG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmdldE9uU2VsZWN0QW5pbUFjdGlvbih0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4gdGhpcy5vblBvcG92ZXJIaWRkZW4oY2hvaWNlSWQpKSksXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBvblBvcG92ZXJIaWRkZW4oY2hvaWNlSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNldFBhcmVudEJlYXJQb3NpdGlvbigpO1xuXG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudEJlYXIuZ2V0U2hvd0FuZFJpc2VVcEFjdGlvbigpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5wYXJlbnRCZWFyLnBsYXlJZGxlKCkpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFBhcmVudEJlYXJQb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5wYXJlbnRCZWFyLnBvc2l0aW9uID0gbmV3IFBJWEkuUG9pbnQoR29sZGlsb2Nrc1N0b3J5RGF0YS5hY3QxUGFyZW50QmVhclhQb3NpdGlvbiwgdGhpcy5wYXJlbnRCZWFyLnkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0Q29zdHVtZShjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLmZpbmlzaENob2ljZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuY29zdHVtZVNlbGVjdGlvblBvcE92ZXIuc2V0U2VsZWN0ZWQodGhpcy5zcGluZXMuZ2V0KGNob2ljZUlkKSk7XG4gICAgICAgIHRoaXMucGFyZW50QmVhci5zZXRDb3N0dW1lKHRoaXMuY2hvaWNlVG9Db3N0dW1lTWFwLmdldChjaG9pY2VJZCkpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0UG9wT3ZlckJ1dHRvbkFjdGl2ZSgpO1xuXG4gICAgICAgICAgICB0aGlzLnNwaW5lcy5zZXQoUGFyZW50Q2hvaWNlLnBhcmVudDFNb3RoZXIsIHRoaXMuY29zdHVtZVNlbGVjdGlvblBvcE92ZXIuYnV0dG9uTGVmdCk7XG4gICAgICAgICAgICB0aGlzLnNwaW5lcy5zZXQoUGFyZW50Q2hvaWNlLnBhcmVudDFGYXRoZXIsIHRoaXMuY29zdHVtZVNlbGVjdGlvblBvcE92ZXIuYnV0dG9uTWlkZGxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBvbkRlaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuQ3VlRGlhbG9nTGluZURlbGVnYXRlLCBudWxsKTtcbiAgICAgICAgc3VwZXIub25EZWluaXQoKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLnNldFBhcmVudEJlYXJQb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmJhYnlCZWFyLnNob3coKVxuICAgICAgICB0aGlzLnBhcmVudEJlYXIuc2hvdygpO1xuICAgICAgICB0aGlzLnNldENvc3R1bWUodGhpcy5jaG9pY2VEaWFsb2cuZ2V0RGVmYXVsdENob2ljZSgpKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IEJvd2xQcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9Cb3dsUHJvcFwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgR29sZGlsb2Nrc1N0b3J5RGF0YSBmcm9tIFwiLi4vR29sZGlsb2Nrc1N0b3J5RGF0YVwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgQmVkUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQmVkUHJvcFwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgRG9vciBmcm9tIFwiLi4vLi4vcHJvcHMvRG9vclwiO1xuaW1wb3J0IEdvbGRpbG9ja3NDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvR29sZGlsb2Nrc0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3QzSW50cm9TdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuXG4gICAgcHJvdGVjdGVkIGdldCBkb29yKCk6IERvb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmRvb3IpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IGJvd2woKTogQm93bFByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmJvd2wpIGFzIEJvd2xQcm9wXG4gICAgfVxuICAgIHB1YmxpYyBnZXQgYmVkKCk6IEJlZFByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmJlZCkgYXMgQmVkUHJvcFxuICAgIH1cbiAgICBwdWJsaWMgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcikgYXMgTG9jYXRvclxuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IG5hcnJhdG9yKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubmFycmF0b3IpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBnb2xkaWxvY2tzKCk6IEdvbGRpbG9ja3NDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdvbGRpbG9ja3MpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXJcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGJhYnlCZWFyKCk6IEdvbGRpbG9ja3NDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmJhYnlCZWFyKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBwYXJlbnRCZWFyKCk6IEdvbGRpbG9ja3NDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnBhcmVudEJlYXIpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXJcbiAgICB9XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0dXAoKTtcblxuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgyKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXROYXJyYXRvckFjdGlvbigpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkoMyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm93bC5nZXRTaG93RW1wdHlTbWFsbEJvd2xBY3Rpb24oKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWQuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nb2xkaWxvY2tzLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9vci5nZXRTaG93QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvb3IuZ2V0T3BlbkFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRCZWFyU2hvd0FjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvb3IuZ2V0Q2xvc2VBbmltQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9vci5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgc2V0dXAoKSB7XG4gICAgICAgIHRoaXMuc2V0QmVhclBvc2l0aW9ucygpO1xuICAgICAgICB0aGlzLnNldERvb3JQb3NpdGlvbigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TmFycmF0b3JBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLm5hcnJhdG9yLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZXROYXJyYXRvclBvc2l0aW9uKCkpLFxuICAgICAgICAgICAgdGhpcy5uYXJyYXRvci5nZXRTaG93QW5kUmlzZVVwQWN0aW9uKCksXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0QmVhclNob3dBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLmdldFBhcmVudEJlYXJBY3Rpb24oKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0QmFieUJlYXJBY3Rpb24oKSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBhcmVudEJlYXJBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHRoaXMucGFyZW50QmVhci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMucGFyZW50QmVhci5nZXRTaG93QW5kUmlzZVVwQWN0aW9uKCksXG4gICAgICAgICAgICB0aGlzLnBhcmVudEJlYXIuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmxvY2F0b3IucGFyZW50QmVhckRvb3JQb3NpdGlvbiwgKCkgPT4gdGhpcy5wYXJlbnRCZWFyLnBsYXlXYWxrKCkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnBhcmVudEJlYXIucGxheUlkbGUoKSksXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRCYWJ5QmVhckFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgdGhpcy5iYWJ5QmVhci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuYmFieUJlYXIuZ2V0U2hvd0FuZFJpc2VVcEFjdGlvbigpLFxuICAgICAgICAgICAgdGhpcy5iYWJ5QmVhci5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRoaXMubG9jYXRvci5iYWJ5QmVhckRvb3JQb3NpdGlvbiwgKCkgPT4gdGhpcy5iYWJ5QmVhci5wbGF5V2FsaygpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5iYWJ5QmVhci5wbGF5SWRsZSgpKSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEJlYXJQb3NpdGlvbnMoKSB7XG4gICAgICAgIHRoaXMuYmFieUJlYXIueCA9IHRoaXMubG9jYXRvci5leGl0TGVmdC54O1xuICAgICAgICB0aGlzLnBhcmVudEJlYXIueCA9IHRoaXMubG9jYXRvci5leGl0TGVmdC54O1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0RG9vclBvc2l0aW9uKCkge1xuICAgICAgICBsZXQgZG9vclBvc2l0aW9uID0gbmV3IFBJWEkuUG9pbnQodGhpcy5sb2NhdG9yLmV4aXRMZWZ0LngsIHRoaXMuZG9vci55KTtcbiAgICAgICAgdGhpcy5kb29yLnNldFBvc2l0aW9uKGRvb3JQb3NpdGlvbik7XG4gICAgICAgIHRoaXMuZG9vci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLmxlZnQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0TmFycmF0b3JQb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5uYXJyYXRvci54ID0gR29sZGlsb2Nrc1N0b3J5RGF0YS5hY3QzbmFycmF0b3JYUG9zaXRpb247XG4gICAgICAgIHRoaXMubmFycmF0b3Iuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5sZWZ0KTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLnNldHVwKClcbiAgICAgICAgdGhpcy5ib3dsLnNraXAoKTtcbiAgICAgICAgdGhpcy5iZWQuaGlkZUFsbCgpO1xuICAgICAgICB0aGlzLnNldE5hcnJhdG9yUG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5uYXJyYXRvci5zaG93KCk7XG4gICAgICAgIHRoaXMuZ29sZGlsb2Nrcy5oaWRlKCk7XG4gICAgICAgIHRoaXMucGFyZW50QmVhci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KTtcbiAgICAgICAgdGhpcy5iYWJ5QmVhci5zaG93KCk7XG4gICAgICAgIHRoaXMucGFyZW50QmVhci5zaG93KCk7XG4gICAgICAgIHN1cGVyLmRpZFRlcm1pbmF0ZSh0aGlzLmRpYWxvZy5nZXRMaW5rKDApLmxpbmspO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgQmVhckZ1cm5pdHVyZVByb3AgZnJvbSBcIi4uLy4uL3Byb3BzL0JlYXJGdXJuaXR1cmVQcm9wXCI7XG5pbXBvcnQgQmVkUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQmVkUHJvcFwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5pbXBvcnQgR29sZGlsb2Nrc0NoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Hb2xkaWxvY2tzQ2hhcmFjdGVyXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL0xvY2F0b3JcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCZWFyTm90aWNlQmVkU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcblxuICAgIHB1YmxpYyBnZXQgYmVhckZ1cm5pdHVyZSgpOiBCZWFyRnVybml0dXJlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmVhckZ1cm5pdHVyZSkgYXMgQmVhckZ1cm5pdHVyZVByb3BcbiAgICB9XG4gICAgcHVibGljIGdldCBiZWQoKTogQmVkUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmVkKSBhcyBCZWRQcm9wXG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgbmFycmF0b3IoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcilcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGdvbGRpbG9ja3MoKTogR29sZGlsb2Nrc0NoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ29sZGlsb2NrcykgYXMgR29sZGlsb2Nrc0NoYXJhY3RlclxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgYmFieUJlYXIoKTogR29sZGlsb2Nrc0NoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuYmFieUJlYXIpIGFzIEdvbGRpbG9ja3NDaGFyYWN0ZXJcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHBhcmVudEJlYXIoKTogR29sZGlsb2Nrc0NoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUucGFyZW50QmVhcikgYXMgR29sZGlsb2Nrc0NoYXJhY3RlclxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgbG9jYXRvcigpOiBMb2NhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5sb2NhdG9yKTtcbiAgICB9XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0dXBDaGFyYWN0ZXJzKCk7XG4gICAgICAgIHRoaXMuc2V0dXBCZWQoKTtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWFyRnVybml0dXJlLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWJ5QmVhci5nZXRXYWxrVG9Qb3NpdGlvbkFjdGlvbih0aGlzLmxvY2F0b3IuYmFieUJlYXJQb3NpdGlvbi54KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWQuZ2V0U2hvd0FjdGlvbigpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkoNCksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5nb2xkaWxvY2tzLnNob3coKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nb2xkaWxvY2tzLmdldFRvTGF5QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmdvbGRpbG9ja3MucGxheVNub3JlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXR1cENoYXJhY3RlcnMoKSB7XG4gICAgICAgIHRoaXMuZ29sZGlsb2Nrcy5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLmxlZnQpO1xuICAgICAgICBjb25zdCBnb2xkaWxvY2tzUG9zaXRpb24gPSBmcmFtZXdvcmsuVmVjdG9yLnRyYW5zZm9ybVRvKHRoaXMuYmVkLmdldEJhYnlCZWFyQmVkKCksIHRoaXMuZ29sZGlsb2Nrcy5jb250YWluZXIucGFyZW50KTtcbiAgICAgICAgdGhpcy5nb2xkaWxvY2tzLnBvc2l0aW9uID0gbmV3IFBJWEkuUG9pbnQoZ29sZGlsb2Nrc1Bvc2l0aW9uLngsIGdvbGRpbG9ja3NQb3NpdGlvbi55KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwQmVkKCkge1xuICAgICAgICB0aGlzLmJlZC5zZXRTa2luRm9yVHlwZSh0aGlzLmJlZC5jaG9pY2VJZCk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5zZXR1cEJlZCgpO1xuICAgICAgICB0aGlzLnNldHVwQ2hhcmFjdGVycygpO1xuICAgICAgICB0aGlzLmJlYXJGdXJuaXR1cmUuc2hvd0FsbCgpO1xuICAgICAgICB0aGlzLmJlZC5oaWRlQWxsKCk7XG4gICAgICAgIHRoaXMuZ29sZGlsb2Nrcy5wbGF5VG9MYXkoKTtcbiAgICAgICAgdGhpcy5nb2xkaWxvY2tzLnNob3coKTtcbiAgICAgICAgdGhpcy5iYWJ5QmVhci54ID0gdGhpcy5sb2NhdG9yLmJhYnlCZWFyUG9zaXRpb24ueDtcbiAgICAgICAgdGhpcy5wYXJlbnRCZWFyLnggPSB0aGlzLmxvY2F0b3IucGFyZW50QmVhclBvc2l0aW9uLng7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IERvb3IgZnJvbSBcIi4uLy4uL3Byb3BzL0Rvb3JcIjtcbmltcG9ydCBHb2xkaWxvY2tzU3RvcnlEYXRhIGZyb20gXCIuLi9Hb2xkaWxvY2tzU3RvcnlEYXRhXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcbmltcG9ydCBTRlhBY3Rpb24gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL1NGWEFjdGlvblwiO1xuaW1wb3J0IHsgU291bmRDaGFubmVsIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NvdW5kU2VydmljZVwiO1xuaW1wb3J0IEdvbGRpbG9ja3NDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvR29sZGlsb2Nrc0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYWxrVG9Eb29yU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlICB7XG4gICAgcHJvdGVjdGVkIGdldCBjaGFyYWN0ZXIoKTogR29sZGlsb2Nrc0NoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ29sZGlsb2NrcykgYXMgR29sZGlsb2Nrc0NoYXJhY3RlcjtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBuYXJyYXRvcigpOkNoYXJhY3RlcntcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcik7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgZG9vcigpOiBEb29yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5kb29yKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXREb29yUG9zaXRpb24oKTtcblxuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuZ2V0TmFycmF0b3JBY3Rpb24oKSxcbiAgICAgICAgICAgIHRoaXMuZG9vci5nZXRTaG93QWN0aW9uKCksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5SWRsZSgpKSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldEtub2NrT25Eb29yQWN0aW9uKClcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0TmFycmF0b3JBY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMubmFycmF0b3IuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNldE5hcnJhdG9yUG9zaXRpb24oKSksXG4gICAgICAgICAgICB0aGlzLm5hcnJhdG9yLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKVxuICAgICAgICBdKVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXROYXJyYXRvclBvc2l0aW9uKCl7XG4gICAgICAgIHRoaXMubmFycmF0b3IucG9zaXRpb24gPSB0aGlzLmxvY2F0b3IuZXhpdExlZnQucG9zaXRpb247XG4gICAgICAgIHRoaXMubmFycmF0b3Iuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5yaWdodCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEtub2NrT25Eb29yQWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0V2Fsa1RvUG9zaXRpb25BY3Rpb24oR29sZGlsb2Nrc1N0b3J5RGF0YS5hY3QxTmV4dFRvRG9vclhQb3NpdGlvbiksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgxLjUpLFxuICAgICAgICAgICAgdGhpcy5kb29yLmdldEtub2NrQW5pbUFjdGlvbigpXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0RG9vclBvc2l0aW9uKCkge1xuICAgICAgICBsZXQgZG9vclBvc2l0aW9uID0gbmV3IFBJWEkuUG9pbnQodGhpcy5sb2NhdG9yLmV4aXRSaWdodC54LCB0aGlzLmRvb3IueSk7XG4gICAgICAgIHRoaXMuZG9vci5zZXRQb3NpdGlvbihkb29yUG9zaXRpb24pO1xuICAgICAgICB0aGlzLmRvb3Iuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5yaWdodCk7XG4gICAgfVxuXG4gICAgc2tpcCgpe1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgICAgIHRoaXMuc2V0TmFycmF0b3JQb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci54ID0gR29sZGlsb2Nrc1N0b3J5RGF0YS5hY3QxTmV4dFRvRG9vclhQb3NpdGlvblxuICAgICAgICB0aGlzLmNoYXJhY3Rlci5wbGF5SWRsZSgpO1xuICAgICAgICB0aGlzLm5hcnJhdG9yLnBsYXlJZGxlKCk7XG4gICAgfVxufSIsImltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBHb2xkaWxvY2tzQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0dvbGRpbG9ja3NDaGFyYWN0ZXJcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCB7IElEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvSURpYWxvZ0xpbmVcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvVXRpbHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFzdGluZ1N0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcigpOiBHb2xkaWxvY2tzQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB0YXJnZXQ6IFZpZXc7XG5cbiAgICBjb25zdHJ1Y3RvcihkaWFsb2c6IElEaWFsb2dMaW5lLCBkaVNlcnZpY2U6IERJU2VydmljZSwgdmlldzogVmlldykge1xuICAgICAgICBzdXBlcihkaWFsb2csIGRpU2VydmljZSk7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gZmluZENoaWxkQnlOYW1lKHZpZXcsIGRpYWxvZy5sb2NhdGlvbikgYXMgVmlldztcbiAgICB9XG4gICAgb25Jbml0KCkge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvblRvUG9pbnQodGhpcy5nZXRUYXJnZXRQb3NpdGlvbigpLCAoKSA9PiB0aGlzLmNoYXJhY3Rlci5wbGF5V2FsaygpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoICgpID0+IHRoaXMuY2hhcmFjdGVyLnBsYXlJZGxlKCkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIGdldFRhcmdldFBvc2l0aW9uKCkge1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMjUwO1xuICAgICAgICByZXR1cm4gbmV3IFBJWEkuUG9pbnQoKHRoaXMudGFyZ2V0LnggLSBvZmZzZXQpLCB0aGlzLmNoYXJhY3Rlci55KVxuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnBvc2l0aW9uID0gdGhpcy5nZXRUYXJnZXRQb3NpdGlvbigpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxufSIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IENhcnJpYWdlUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQ2FycmlhZ2VQcm9wXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBDb3N0dW1lcyB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0Nvc3R1bWVzXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcbmltcG9ydCBDaW5kZXJlbGxhQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NpbmRlcmVsbGFDaGFyYWN0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2luZGVyZWxsYUVudHJhbmNlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG4gICAgcHJvdGVjdGVkIGdldCBjaW5kZXJlbGxhKCk6IENpbmRlcmVsbGFDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmNpbmRlcmVsbGEpIGFzIENpbmRlcmVsbGFDaGFyYWN0ZXJcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGNhcnJpYWdlKCk6IENhcnJpYWdlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuY2FycmlhZ2UpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2hhcmFjdGVyUG9zaXRpb246IFBJWEkuUG9pbnQ7XG5cbiAgICBwcml2YXRlIGFjdGlvbjogZnJhbWV3b3JrLlNlcXVlbmNlQWN0aW9uID0gbnVsbDtcblxuICAgIG9uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zZXR1cENpbmRlcmVsbGEoKTtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpLFxuICAgICAgICAgICAgdGhpcy5jYXJyaWFnZS5nZXRTaG93UHVtcGtpbkFjdGlvbigpLFxuICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0TW9wcGluZ0FjdGlvbigpXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwQ2luZGVyZWxsYSgpIHtcbiAgICAgICAgdGhpcy5jaW5kZXJlbGxhLnNldENvc3R1bWUoQ29zdHVtZXMuY2luZGVyZWxsYSk7XG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS5hZGRDb3N0dW1lKENvc3R1bWVzLm1vcCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNb3BwaW5nQWN0aW9uKCkge1xuICAgICAgICB0aGlzLmNoYXJhY3RlclBvc2l0aW9uID0gbmV3IFBJWEkuUG9pbnQodGhpcy5jaW5kZXJlbGxhLngsIHRoaXMuY2luZGVyZWxsYS55KTtcblxuICAgICAgICB0aGlzLmFjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuY2luZGVyZWxsYS5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRoaXMubG9jYXRvci5leGl0TGVmdCwgKCkgPT4gdGhpcy5jaW5kZXJlbGxhLnBsYXlNb3BwaW5nKCksIDUpLFxuXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2luZGVyZWxsYS5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KSksXG4gICAgICAgICAgICB0aGlzLmNpbmRlcmVsbGEuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmxvY2F0b3IubWlkZGxlUmlnaHQsICgpID0+IHRoaXMuY2luZGVyZWxsYS5wbGF5TW9wcGluZygpLCA1KSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5jaW5kZXJlbGxhLnNldERpcmVjdGlvbihEaXJlY3Rpb24ubGVmdCkpLFxuXG4gICAgICAgICAgICB0aGlzLmNpbmRlcmVsbGEuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmxvY2F0b3IuZXhpdExlZnQsICgpID0+IHRoaXMuY2luZGVyZWxsYS5wbGF5TW9wcGluZygpLCA1KSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5jaW5kZXJlbGxhLnNldERpcmVjdGlvbihEaXJlY3Rpb24ucmlnaHQpKSxcblxuICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmdldENoYXJhY3Rlck1vdmVBY3Rpb24odGhpcy5sb2NhdG9yLm1pZGRsZVJpZ2h0LCAoKSA9PiB0aGlzLmNpbmRlcmVsbGEucGxheU1vcHBpbmcoKSwgNSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2luZGVyZWxsYS5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLmxlZnQpKSxcblxuICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmdldENoYXJhY3Rlck1vdmVBY3Rpb25Ub1BvaW50KHRoaXMuY2hhcmFjdGVyUG9zaXRpb24sICgpID0+IHRoaXMuY2luZGVyZWxsYS5wbGF5TW9wcGluZygpLCAyKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5jaW5kZXJlbGxhLnBsYXlJZGxlKCkpLFxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uO1xuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUuY2FuY2VsQWN0aW9uKHRoaXMuYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldHVwQ2luZGVyZWxsYSgpO1xuICAgICAgICB0aGlzLmNhcnJpYWdlLnNob3dQdW1wa2luKCk7XG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS5zaG93KCk7XG4gICAgICAgIGlmICh0aGlzLmNoYXJhY3RlclBvc2l0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNpbmRlcmVsbGEueCA9IHRoaXMuY2hhcmFjdGVyUG9zaXRpb24ueDtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG59XG4iLCIvLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9qc2Vyei9qc19waWVjZS9ibG9iL21hc3Rlci9ET00vUGFyZW50Tm9kZS9hcHBlbmQoKS9hcHBlbmQoKS5tZFxuKGZ1bmN0aW9uIChhcnIpIHtcbiAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYXBwZW5kJykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaXRlbSwgJ2FwcGVuZCcsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIGRvY0ZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAgICAgICAgICAgICBhcmdBcnIuZm9yRWFjaChmdW5jdGlvbiAoYXJnSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNOb2RlID0gYXJnSXRlbSBpbnN0YW5jZW9mIE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQoaXNOb2RlID8gYXJnSXRlbSA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhhcmdJdGVtKSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChkb2NGcmFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KShbRWxlbWVudC5wcm90b3R5cGUsIERvY3VtZW50LnByb3RvdHlwZSwgRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGVdKTtcbiIsIihmdW5jdGlvbiAoQXJyYXksIE9iamVjdCwgd2luZG93KSB7XG4gICAgdmFyIGlzQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIChhcnJheSAmJiAoYXJyYXkuY29uc3RydWN0b3IgPT09IEFycmF5KSk7XG4gICAgfTtcbiAgICB3aW5kb3cuaXNBcnJheSA9IGlzQXJyYXk7XG5cbiAgICAvLyBGb3JtcyBhcnJheSB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LCBvciByZXR1cm5zIGlucHV0IGVsZW1lbnQgaWYgYWxyZWFkeSBhbiBhcnJheS5cbiAgICB2YXIgYXJyYXlpZnkgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KG9iaikgPyBvYmogOiBbb2JqXTtcbiAgICB9O1xuICAgIHdpbmRvdy5hcnJheWlmeSA9IGFycmF5aWZ5O1xuXG4gICAgLy8gRHVwbGljYXRlIGFuIGFycmF5IGFzIHNoYWxsb3cgb3IgZGVlcCBjb3B5LlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiY2xvbmVcIiwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGlzRGVlcENvcHkpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZXBDb3B5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsb25lZEFycmF5ID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lZEFycmF5LnB1c2goT2JqZWN0LmNsb25lKGVsZW1lbnQsIHRydWUpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVkQXJyYXk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNsaWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFJlbW92ZSBlbGVtZW50IGZyb20gYXJyYXkgKElFOSsgc3VwcG9ydCBvbmx5KS5cbiAgICB2YXIgcmVtb3ZlSXRlbUZyb21BcnJheSA9IGZ1bmN0aW9uIChhcnJheSwgaXRlbSkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihBcnJheS5wcm90b3R5cGUuaW5kZXhPZikpIHtcbiAgICAgICAgICAgIHZhciBpdGVtSW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtSW5kZXggPiAtMSkgPyBhcnJheS5zcGxpY2UoaXRlbUluZGV4LCAxKVswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgb25lIG9yIG11bHRpcGxlIGVsZW1lbnRzLCBhbmQgcmV0dXJucyB0aG9zZSBlbGVtZW50cy5cbiAgICAvLyAtIElmIHNpbmdsZSBpdGVtLCByZXR1cm5zIHNpbmdsZSBpdGVtIGlmIGZvdW5kLCBvdGhlcndpc2UgdW5kZWZpbmVkLlxuICAgIC8vIC0gSWYgbXVsdGlwbGUgaXRlbXMsIHJldHVybnMgYXJyYXkgY29udGFpbmluZyBhbGwgaXRlbXMgcmVtb3ZlZCBmcm9tIGFycmF5IHN1Y2Nlc3NmdWxseS5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcInJlbW92ZVwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KGl0ZW1zKSkge1xuICAgICAgICAgICAgICAgIHZhciByZW1vdmVkSXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlZEl0ZW0gPSByZW1vdmVJdGVtRnJvbUFycmF5KHNlbGYsIGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWRJdGVtcy5wdXNoKHJlbW92ZWRJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmVkSXRlbXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gaXRlbXM7ICAvLyBJdGVtcyA9IHNpbmdsZSBpdGVtLlxuICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmVJdGVtRnJvbUFycmF5KHRoaXMsIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDbGVhciBhbGwgZWxlbWVudHMgaW4gYXJyYXkgd2l0aG91dCBjcmVhdGluZyBuZXcgaW5zdGFuY2UuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJjbGVhclwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNwbGljZSgwLCB0aGlzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLmhhc0l0ZW1zKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiaGFzSXRlbXNcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5sZW5ndGggPiAwKTsgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LnByb3RvdHlwZS5hcHBlbmQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJhcHBlbmRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoLmFwcGx5KHRoaXMsIGFycmF5aWZ5KGl0ZW1zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNodWZmbGVzIHRoZSBhcnJheVxuICAgICAqIEBtZXRob2Qgc2h1ZmZsZVxuICAgICAqL1xuICAgIGlmICghQXJyYXkucHJvdG90eXBlLnNodWZmbGUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ3NodWZmbGUnLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiwgeCwgaSA9IHRoaXMubGVuZ3RoOyBpOyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSksIHggPSB0aGlzWy0taV0sIHRoaXNbaV0gPSB0aGlzW2pdLCB0aGlzW2pdID0geCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHJhbmRvbSBpdGVtIGZyb20gYW4gYXJyYXlcbiAgICAgKiBAbWV0aG9kIHJhbmRvbVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheVxuICAgICAqIEByZXR1cm4geyp9IFRoZSByYW5kb20gaXRlbVxuICAgICAqL1xuICAgIGlmICghQXJyYXkucHJvdG90eXBlLnJhbmRvbSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAncmFuZG9tJywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMubGVuZ3RoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLmZpcnN0KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiZmlyc3RcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIGl0ZW0gaGFsZndheSBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBlbGVtZW50cy4gSWYgdGhlIGFycmF5IGhhc1xuICAgIC8vIGFuIGV2ZW4gbnVtYmVyIG9mIGNoaWxkcmVuLCB0aGlzIHdpbGwgYmUgb25lIGl0ZW0gY2xvc2VyIHRvIHRoZSBzdGFydCBvZiB0aGVcbiAgICAvLyBhcnJheSAoZS5nLiBmb3IgYW4gYXJyYXkgb2YgNiBpdGVtcywgdGhpcyB3aWxsIGJlIGFycmF5WzJdKS5cbiAgICBpZiAoIUFycmF5LnByb3RvdHlwZS5taWRkbGUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJtaWRkbGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3RoaXMubWlkZGxlSW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXlcbiAgICAgKiBAbWV0aG9kIGxhc3RcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXlcbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgbGFzdCBpdGVtXG4gICAgICovXG4gICAgaWYgKCFBcnJheS5wcm90b3R5cGUubGFzdCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnbGFzdCcsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBXcmFwIHRoZSBzcGVjaWZpZWQgaW5kZXggd2hlbiBpdCBleGNlZWRzIHRoZSBib3VuZHMgb2YgdGhlIGFycmF5LlxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLndyYXBJbmRleCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcIndyYXBJbmRleFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoaW5kZXgsIG1pbiwgbWF4KSB7XG4gICAgICAgICAgICAgICAgbWluID0gbWluIHx8IDA7XG4gICAgICAgICAgICAgICAgbWF4ID0gbWF4IHx8IHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLndyYXAoaW5kZXgsIG1pbiwgbWF4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2xhbXAgdGhlIHNwZWNpZmllZCBpbmRleCB3aGVuIGl0IGV4Y2VlZHMgdGhlIGJvdW5kcyBvZiB0aGUgYXJyYXkuXG4gICAgaWYgKCFBcnJheS5wcm90b3R5cGUuY2xhbXBJbmRleCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcImNsYW1wSW5kZXhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGluZGV4LCBtaW4sIG1heCkge1xuICAgICAgICAgICAgICAgIG1pbiA9IG1pbiB8fCAwO1xuICAgICAgICAgICAgICAgIG1heCA9IG1heCB8fCAodGhpcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5jbGFtcChpbmRleCwgbWluLCBtYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWlkZGxlIGl0ZW0gaW4gdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFuIGV2ZW5cbiAgICAvLyBudW1iZXIgb2YgY2hpbGRyZW4sIHRoaXMgd2lsbCBiZSB0aGUgaW5kZXggb2YgdGhlIGl0ZW0ganVzdCBiZWZvcmUgdGhlIG1pZGRsZVxuICAgIC8vIChlLmcuIGZvciBhbiBhcnJheSBvZiA2IGl0ZW1zLCB0aGlzIHdpbGwgcmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgM3JkIGVsZW1lbnQsXG4gICAgLy8gaS5lLiAyKS5cbiAgICBpZiAoIUFycmF5LnByb3RvdHlwZS5taWRkbGVJbmRleCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcIm1pZGRsZUluZGV4XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLmNlaWwoKHRoaXMubGVuZ3RoICogMC41KSAtIDEpLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBhcnJheSAoLTEgaWYgdGhlIGFycmF5IGlzIGVtcHR5KS5cbiAgICBpZiAoIUFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXgpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJsYXN0SW5kZXhcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIGluZGV4IGlzIGluIHJhbmdlIGdpdmVuIGl0cyBjdXJyZW50IG51bWJlciBvZiBjaGlsZHJlbi5cbiAgICBpZiAoIUFycmF5LnByb3RvdHlwZS5jb250YWluc0luZGV4KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiY29udGFpbnNJbmRleFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5pc0luUmFuZ2UoaW5kZXgsIDAsICh0aGlzLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBpbmRleCBvZiBhIHJhbmRvbSBlbGVtZW50IGZyb20gdGhlIGFycmF5LiBDYW4gb3B0aW9uYWxseSBzcGVjaWZ5XG4gICAgLy8gdGhlIHByZXZpb3VzIHZhbHVlIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kIHNvIHRoYXQgaXQgd29uJ3QgYmUgY2hvc2VuIGFnYWluXG4gICAgLy8gb24gdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLnJhbmRvbUluZGV4KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwicmFuZG9tSW5kZXhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHByZXZpb3VzSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0ZUxhc3RJbmRleCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICgocHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSAmJiAocHJldmlvdXNJbmRleCA+PSAwKSAmJiAocHJldmlvdXNJbmRleCA8IHRoaXMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZUxhc3RJbmRleCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbmRleCBvZiBhIHJhbmRvbSBlbGVtZW50IG9mIHRoaXMgdGhpcywgZWxpbWluYXRpbmcgdGhlIGxhc3RcbiAgICAgICAgICAgICAgICAvLyBjaG9zZW4gaW5kZXggKGlmIHNwZWNpZmllZCkuXG4gICAgICAgICAgICAgICAgdmFyIHJhbmRvbUluZGV4O1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoc2VwYXJhdGVMYXN0SW5kZXggJiYgKHJhbmRvbUluZGV4ID09PSBwcmV2aW91c0luZGV4KSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmFuZG9tSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENvdW50IGhvdyBtYW55IGl0ZW1zIGluIHRoZSBhcnJheSBzYXRpc3kgdGhlIGNvbmRpdGlvbiBwcm92aWRlZCBieSB0aGUgY2FsbGJhY2suIFdvcmtzIHRoZVxuICAgIC8vIHNhbWUgd2F5IGFzIGZpbHRlcigpLCBidXQgcmV0dXJucyB0aGUgbnVtYmVyIG9mIGl0ZW1zIHJhdGhlciB0aGFuIHRoZSBpdGVtcyB0aGVtc2VsdmVzLlxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLmNvdW50KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiY291bnRcIiwge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKGVsZW1lbnRDYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENhbGxiYWNrLmNhbGwodGhpcywgdGhpc1tpXSwgaSwgdGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gICAgaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcImZpbmRcIiwge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgICAgICAgICAgIC8vIDEuIExldCBPIGJlID8gVG9PYmplY3QodGhpcyB2YWx1ZSkuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBvID0gT2JqZWN0KHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgLy8gMi4gTGV0IGxlbiBiZSA/IFRvTGVuZ3RoKD8gR2V0KE8sIFwibGVuZ3RoXCIpKS5cbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gby5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgICAgICAgICAvLyAzLiBJZiBJc0NhbGxhYmxlKHByZWRpY2F0ZSkgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmVkaWNhdGUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gNC4gSWYgdGhpc0FyZyB3YXMgc3VwcGxpZWQsIGxldCBUIGJlIHRoaXNBcmc7IGVsc2UgbGV0IFQgYmUgdW5kZWZpbmVkLlxuICAgICAgICAgICAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuXG4gICAgICAgICAgICAgICAgLy8gNS4gTGV0IGsgYmUgMC5cbiAgICAgICAgICAgICAgICB2YXIgayA9IDA7XG5cbiAgICAgICAgICAgICAgICAvLyA2LiBSZXBlYXQsIHdoaWxlIGsgPCBsZW5cbiAgICAgICAgICAgICAgICB3aGlsZSAoayA8IGxlbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBhLiBMZXQgUGsgYmUgISBUb1N0cmluZyhrKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gYi4gTGV0IGtWYWx1ZSBiZSA/IEdldChPLCBQaykuXG4gICAgICAgICAgICAgICAgICAgIC8vIGMuIExldCB0ZXN0UmVzdWx0IGJlIFRvQm9vbGVhbig/IENhbGwocHJlZGljYXRlLCBULCDCqyBrVmFsdWUsIGssIE8gwrspKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gZC4gSWYgdGVzdFJlc3VsdCBpcyB0cnVlLCByZXR1cm4ga1ZhbHVlLlxuICAgICAgICAgICAgICAgICAgICB2YXIga1ZhbHVlID0gb1trXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIGtWYWx1ZSwgaywgbykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZS4gSW5jcmVhc2UgayBieSAxLlxuICAgICAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gNy4gUmV0dXJuIHVuZGVmaW5lZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gICAgaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiZmluZEluZGV4XCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgICAgICAgICAgICAvLyAxLiBMZXQgTyBiZSA/IFRvT2JqZWN0KHRoaXMgdmFsdWUpLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widGhpc1wiIGlzIG51bGwgb3Igbm90IGRlZmluZWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbyA9IE9iamVjdCh0aGlzKTtcblxuICAgICAgICAgICAgICAgIC8vIDIuIExldCBsZW4gYmUgPyBUb0xlbmd0aCg/IEdldChPLCBcImxlbmd0aFwiKSkuXG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IG8ubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgICAgICAgICAgLy8gMy4gSWYgSXNDYWxsYWJsZShwcmVkaWNhdGUpIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIDQuIElmIHRoaXNBcmcgd2FzIHN1cHBsaWVkLCBsZXQgVCBiZSB0aGlzQXJnOyBlbHNlIGxldCBUIGJlIHVuZGVmaW5lZC5cbiAgICAgICAgICAgICAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTtcblxuICAgICAgICAgICAgICAgIC8vIDUuIExldCBrIGJlIDAuXG4gICAgICAgICAgICAgICAgdmFyIGsgPSAwO1xuXG4gICAgICAgICAgICAgICAgLy8gNi4gUmVwZWF0LCB3aGlsZSBrIDwgbGVuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYS4gTGV0IFBrIGJlICEgVG9TdHJpbmcoaykuXG4gICAgICAgICAgICAgICAgICAgIC8vIGIuIExldCBrVmFsdWUgYmUgPyBHZXQoTywgUGspLlxuICAgICAgICAgICAgICAgICAgICAvLyBjLiBMZXQgdGVzdFJlc3VsdCBiZSBUb0Jvb2xlYW4oPyBDYWxsKHByZWRpY2F0ZSwgVCwgwqsga1ZhbHVlLCBrLCBPIMK7KSkuXG4gICAgICAgICAgICAgICAgICAgIC8vIGQuIElmIHRlc3RSZXN1bHQgaXMgdHJ1ZSwgcmV0dXJuIGsuXG4gICAgICAgICAgICAgICAgICAgIHZhciBrVmFsdWUgPSBvW2tdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywga1ZhbHVlLCBrLCBvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZS4gSW5jcmVhc2UgayBieSAxLlxuICAgICAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gNy4gUmV0dXJuIC0xLlxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUHJvZHVjdGlvbiBzdGVwcyBvZiBFQ01BLTI2MiwgRWRpdGlvbiA1LCAxNS40LjQuMTRcbiAgICAvLyBSZWZlcmVuY2U6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuNC40LjE0XG4gICAgaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkge1xuXG4gICAgICAgICAgICB2YXIgaztcblxuICAgICAgICAgICAgLy8gMS4gTGV0IG8gYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIFRvT2JqZWN0IHBhc3NpbmdcbiAgICAgICAgICAgIC8vICAgIHRoZSB0aGlzIHZhbHVlIGFzIHRoZSBhcmd1bWVudC5cbiAgICAgICAgICAgIGlmICh0aGlzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbyA9IE9iamVjdCh0aGlzKTtcblxuICAgICAgICAgICAgLy8gMi4gTGV0IGxlblZhbHVlIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgR2V0XG4gICAgICAgICAgICAvLyAgICBpbnRlcm5hbCBtZXRob2Qgb2YgbyB3aXRoIHRoZSBhcmd1bWVudCBcImxlbmd0aFwiLlxuICAgICAgICAgICAgLy8gMy4gTGV0IGxlbiBiZSBUb1VpbnQzMihsZW5WYWx1ZSkuXG4gICAgICAgICAgICB2YXIgbGVuID0gby5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgICAgIC8vIDQuIElmIGxlbiBpcyAwLCByZXR1cm4gLTEuXG4gICAgICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyA1LiBJZiBhcmd1bWVudCBmcm9tSW5kZXggd2FzIHBhc3NlZCBsZXQgbiBiZVxuICAgICAgICAgICAgLy8gICAgVG9JbnRlZ2VyKGZyb21JbmRleCk7IGVsc2UgbGV0IG4gYmUgMC5cbiAgICAgICAgICAgIHZhciBuID0gZnJvbUluZGV4IHwgMDtcblxuICAgICAgICAgICAgLy8gNi4gSWYgbiA+PSBsZW4sIHJldHVybiAtMS5cbiAgICAgICAgICAgIGlmIChuID49IGxlbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gNy4gSWYgbiA+PSAwLCB0aGVuIExldCBrIGJlIG4uXG4gICAgICAgICAgICAvLyA4LiBFbHNlLCBuPDAsIExldCBrIGJlIGxlbiAtIGFicyhuKS5cbiAgICAgICAgICAgIC8vICAgIElmIGsgaXMgbGVzcyB0aGFuIDAsIHRoZW4gbGV0IGsgYmUgMC5cbiAgICAgICAgICAgIGsgPSBNYXRoLm1heChuID49IDAgPyBuIDogbGVuIC0gTWF0aC5hYnMobiksIDApO1xuXG4gICAgICAgICAgICAvLyA5LiBSZXBlYXQsIHdoaWxlIGsgPCBsZW5cbiAgICAgICAgICAgIHdoaWxlIChrIDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgLy8gYS4gTGV0IFBrIGJlIFRvU3RyaW5nKGspLlxuICAgICAgICAgICAgICAgIC8vICAgVGhpcyBpcyBpbXBsaWNpdCBmb3IgTEhTIG9wZXJhbmRzIG9mIHRoZSBpbiBvcGVyYXRvclxuICAgICAgICAgICAgICAgIC8vIGIuIExldCBrUHJlc2VudCBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlXG4gICAgICAgICAgICAgICAgLy8gICAgSGFzUHJvcGVydHkgaW50ZXJuYWwgbWV0aG9kIG9mIG8gd2l0aCBhcmd1bWVudCBQay5cbiAgICAgICAgICAgICAgICAvLyAgIFRoaXMgc3RlcCBjYW4gYmUgY29tYmluZWQgd2l0aCBjXG4gICAgICAgICAgICAgICAgLy8gYy4gSWYga1ByZXNlbnQgaXMgdHJ1ZSwgdGhlblxuICAgICAgICAgICAgICAgIC8vICAgIGkuICBMZXQgZWxlbWVudEsgYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBHZXRcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgaW50ZXJuYWwgbWV0aG9kIG9mIG8gd2l0aCB0aGUgYXJndW1lbnQgVG9TdHJpbmcoaykuXG4gICAgICAgICAgICAgICAgLy8gICBpaS4gIExldCBzYW1lIGJlIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIFN0cmljdCBFcXVhbGl0eSBDb21wYXJpc29uIEFsZ29yaXRobSB0b1xuICAgICAgICAgICAgICAgIC8vICAgICAgICBzZWFyY2hFbGVtZW50IGFuZCBlbGVtZW50Sy5cbiAgICAgICAgICAgICAgICAvLyAgaWlpLiAgSWYgc2FtZSBpcyB0cnVlLCByZXR1cm4gay5cbiAgICAgICAgICAgICAgICBpZiAoayBpbiBvICYmIG9ba10gPT09IHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRydWUgaWYgaXRlbSBpcyBpbiBhcnJheSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLmNvbnRhaW5zKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiY29udGFpbnNcIiwge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKGl0ZW0pIHsgXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBhcnJheSBpbiByZXZlcnNlLlxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLnJldmVyc2VGb3JFYWNoKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwicmV2ZXJzZUZvckVhY2hcIiwge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKGVsZW1lbnRDYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9ICh0aGlzLmxlbmd0aCAtIDEpOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Q2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzW2ldLCBpLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEZpbHRlciBvdXQgZHVwbGljYXRlIGl0ZW1zIGZyb20gdGhlIGFycmF5IChkb2VzIG5vdCBtb2RpZnkgb3JpZ2luYWwgYXJyYXkpLlxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLmZpbHRlck91dER1cGxpY2F0ZXMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJmaWx0ZXJPdXREdXBsaWNhdGVzXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtLCBpLCBpdGVtcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGl0ZW1zLmluZGV4T2YoaXRlbSkgPT0gaSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEZpbHRlciBvdXQgbnVsbCBvciB1bmRlZmluZWQgaXRlbXMgZnJvbSB0aGUgYXJyYXkgKGRvZXMgbm90IG1vZGlmeSBvcmlnaW5hbCBhcnJheSkuXG4gICAgaWYgKCFBcnJheS5wcm90b3R5cGUuZmlsdGVyT3V0TnVsbHMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJmaWx0ZXJPdXROdWxsc1wiLCB7XG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSwgaSwgaXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhaXRlbTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRmlsdGVyIG91dCBvbmUgaXRlbSwgb3IgYW4gYXJyYXkgb2YgaXRlbXMsIGZyb20gdGhlIGFycmF5IGFuZCByZXR1cm4gdGhlIHJlc3VsdC4gRG9lcyBub3QgbW9kaWZ5IG9yaWdpbmFsXG4gICAgLy8gYXJyYXkgbGlrZSByZW1vdmUoKSBkb2VzLlxuICAgIGlmICghQXJyYXkucHJvdG90eXBlLmZpbHRlck91dEl0ZW1zKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiZmlsdGVyT3V0SXRlbXNcIiwge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChpdGVtc1RvRXhjbHVkZSkge1xuICAgICAgICAgICAgICAgIGl0ZW1zVG9FeGNsdWRlID0gYXJyYXlpZnkoaXRlbXNUb0V4Y2x1ZGUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtLCBpLCBpdGVtcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWl0ZW1zVG9FeGNsdWRlLmNvbnRhaW5zKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59KEFycmF5LCBPYmplY3QsIHdpbmRvdykpO1xuIiwiKGZ1bmN0aW9uIChCb29sZWFuKSB7XG4gICAgLy8gQ29udmVydCB0cnV0aHkgdmFsdWUgdG8gMSwgb3IgZmFsc2V5IHZhbHVlIHRvIC0xLlxuICAgIGlmICghQm9vbGVhbi50b1NpZ25lZEludCkge1xuICAgICAgICBCb29sZWFuLnRvU2lnbmVkSW50ID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbCA/IDEgOiAtMTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IHRydXRoeSB2YWx1ZSB0byAxLCBvciBmYWxzZXkgdmFsdWUgdG8gMC5cbiAgICBpZiAoIUJvb2xlYW4udG9VbnNpZ25lZEludCkge1xuICAgICAgICBCb29sZWFuLnRvVW5zaWduZWRJbnQgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsID8gMSA6IDA7XG4gICAgICAgIH07XG4gICAgfVxufShCb29sZWFuKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIGlmICghSFRNTEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuc3RvcCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEF1ZGlvRWxlbWVudC5wcm90b3R5cGUsIFwic3RvcFwiLCB7XG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnNyYyA9IFwiXCI7ICAvLyBTb21ldGltZXMgdHJpZ2dlcnMgd2FybmluZ3MsIGJ1dCBzaG91bGQgYmUgaGFybWxlc3MuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn0pKEhUTUxBdWRpb0VsZW1lbnQpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTENhbnZhc0VsZW1lbnQvdG9CbG9iXG4gICAgaWYgKCFIVE1MQ2FudmFzRWxlbWVudC5wcm90b3R5cGUudG9CbG9iKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIVE1MQ2FudmFzRWxlbWVudC5wcm90b3R5cGUsICd0b0Jsb2InLCB7XG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGNhbGxiYWNrLCB0eXBlLCBxdWFsaXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhbnZhcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJpblN0ciA9IGF0b2IoIGNhbnZhcy50b0RhdGFVUkwodHlwZSwgcXVhbGl0eSkuc3BsaXQoJywnKVsxXSApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gYmluU3RyLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyciA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycltpXSA9IGJpblN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soIG5ldyBCbG9iKCBbYXJyXSwge3R5cGU6IHR5cGUgfHwgJ2ltYWdlL3BuZyd9ICkgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSgpKTtcbiIsIihmdW5jdGlvbiAoTWF0aCkge1xuICAgIC8vIFdyYXBwaW5nIG9mIE1hdGggY2xhc3MgZm9yIFR5cGVTY3JpcHQgdHlwZSBiaW5kaW5ncy5cbiAgICB3aW5kb3cuTWF0aEV4dCA9IE1hdGg7XG5cbiAgICB2YXIgUkFEX1RPX0RFRyA9ICgxODAuMCAvIE1hdGguUEkpO1xuICAgIHZhciBERUdfVE9fUkFEID0gKE1hdGguUEkgLyAxODAuMCk7XG5cbiAgICBNYXRoLlFVQVJURVJfUEkgPSAoTWF0aC5QSSAqIDAuMjUpO1xuICAgIE1hdGguSEFMRl9QSSA9IChNYXRoLlBJICogMC41KTtcbiAgICBNYXRoLlRXT19QSSA9IChNYXRoLlBJICogMi4wKTtcblxuICAgIE1hdGgudG9EZWdyZWVzID0gZnVuY3Rpb24gKHJhZGlhbnMpIHtcbiAgICAgICAgcmV0dXJuIChyYWRpYW5zICogUkFEX1RPX0RFRyk7XG4gICAgfTtcblxuICAgIE1hdGgudG9SYWRpYW5zID0gZnVuY3Rpb24gKGRlZ3JlZXMpIHtcbiAgICAgICAgcmV0dXJuIChkZWdyZWVzICogREVHX1RPX1JBRCk7XG4gICAgfTtcblxuICAgIC8vIExpbmVhciBpbnRlcnBvbGF0aW9uIGZyb20gYSB0byBiLiBBbW91bnQgPSBwZXJjZW50YWdlIG9mIGIgdG8gdXNlLlxuICAgIE1hdGgubGVycCA9IGZ1bmN0aW9uIChhLCBiLCBhbW91bnQpIHtcbiAgICAgICAgcmV0dXJuICgoMS4wIC0gYW1vdW50KSAqIGEgKyBhbW91bnQgKiBiKTtcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJucyAnYW1vdW50JyB2YWx1ZSAoYmV0d2VlbiBbMCwgMV0gaWYgaW4gcmFuZ2UpIHRoYXQgY2FuIGJlIHBhc3NlZCBpbnRvIE1hdGgubGVycCgpIHRvXG4gICAgLy8gb2J0YWluICd2YWx1ZScgYWdhaW4uXG4gICAgTWF0aC5pbnZlcnNlTGVycCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlIC0gc3RhcnQpIC8gKGVuZCAtIHN0YXJ0KTtcbiAgICB9O1xuXG4gICAgLy8gV3JhcCB0aGUgc3BlY2lmaWVkIHZhbHVlIHdoZW4gaXQgZXhjZWVkcyB0aGUgcmFuZ2UgW21pbiwgbWF4KS5cbiAgICBNYXRoLndyYXAgPSBmdW5jdGlvbiAodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgICAgIHZhciBhY3R1YWxNaW4gPSBNYXRoLm1pbihtaW4sIG1heCk7XG4gICAgICAgIHZhciBhY3R1YWxNYXggPSBNYXRoLm1heChtaW4sIG1heCk7XG4gICAgICAgIHZhciByYW5nZSA9IE1hdGguYWJzKGFjdHVhbE1heCAtIGFjdHVhbE1pbik7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgbWF4IGFuZCBtaW4gYXJlIGVxdWFsLlxuICAgICAgICBpZiAocmFuZ2UgPCAwLjAwMDEpIHtcbiAgICAgICAgICAgIHJldHVybiBhY3R1YWxNaW47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gKCh2YWx1ZSAtIGFjdHVhbE1pbikgLyByYW5nZSk7XG4gICAgICAgIHJlc3VsdCAtPSBNYXRoLmZsb29yKHJlc3VsdCk7ICAgLy8gTm90IHRoZSBjb3JyZWN0IHdheSB0byBnZXQgZnJhY3Rpb25hbCBwYXJ0IGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5lZ2F0aXZlIG51bWJlcnMsIGJ1dCB3b3JrcyBjb3JyZWN0bHkgZm9yIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3cmFwIGFsZ29yaXRobS5cbiAgICAgICAgcmVzdWx0ID0gYWN0dWFsTWluICsgKHJlc3VsdCAqIHJhbmdlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLy8gQ2xhbXAgdGhlIHNwZWNpZmllZCB2YWx1ZSB3aGVuIGl0IGV4Y2VlZHMgdGhlIHJhbmdlIFttaW4sIG1heF0uXG4gICAgTWF0aC5jbGFtcCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBtaW4pLCBtYXgpO1xuICAgIH07XG5cbiAgICAvLyBDbGFtcCB2YWx1ZSB0byAwLjAgdG8gMS4wIHJhbmdlLlxuICAgIE1hdGguc2F0dXJhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2xhbXAodmFsdWUsIDAuMCwgMS4wKTtcbiAgICB9O1xuXG4gICAgLy8gQ2hlY2tzIGlmIHZhbHVlIGlzIGJldHdlZW4gbWluIGFuZCBtYXggKGJvdGggaW5jbHVzaXZlKS5cbiAgICBNYXRoLmlzSW5SYW5nZSA9IGZ1bmN0aW9uICh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICAgICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtYXggPSBtaW47XG4gICAgICAgICAgICBtaW4gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgodmFsdWUgPD0gbWF4KSAmJiAodmFsdWUgPj0gbWluKSk7XG4gICAgfTtcblxuICAgIC8vIE1hcCB2YWx1ZSB3aXRoaW4gcmFuZ2UgKGEsIGIpIHRvIGFzc29jaWF0ZWQgdmFsdWUgaW4gcmFuZ2UgKGMsIGQpLlxuICAgIE1hdGgubWFwVmFsdWVUb1JhbmdlID0gZnVuY3Rpb24gKHZhbHVlLCByYW5nZTFNaW4sIHJhbmdlMU1heCwgcmFuZ2UyTWluLCByYW5nZTJNYXgpIHtcbiAgICAgICAgdmFyIGxlcnBGYWN0b3IgPSBNYXRoLmludmVyc2VMZXJwKHJhbmdlMU1pbiwgcmFuZ2UxTWF4LCB2YWx1ZSk7ICAvLyBPbGQgcmFuZ2UuXG4gICAgICAgIHJldHVybiBNYXRoLmxlcnAocmFuZ2UyTWluLCByYW5nZTJNYXgsIGxlcnBGYWN0b3IpOyAgLy8gTmV3IHJhbmdlLlxuICAgIH07XG5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3NpZ25cbiAgICBpZiAoIU1hdGguc2lnbikge1xuICAgICAgICBNYXRoLnNpZ24gPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAvLyBJZiB4IGlzIE5hTiwgdGhlIHJlc3VsdCBpcyBOYU4uXG4gICAgICAgICAgICAvLyBJZiB4IGlzIC0wLCB0aGUgcmVzdWx0IGlzIC0wLlxuICAgICAgICAgICAgLy8gSWYgeCBpcyArMCwgdGhlIHJlc3VsdCBpcyArMC5cbiAgICAgICAgICAgIC8vIElmIHggaXMgbmVnYXRpdmUgYW5kIG5vdCAtMCwgdGhlIHJlc3VsdCBpcyAtMS5cbiAgICAgICAgICAgIC8vIElmIHggaXMgcG9zaXRpdmUgYW5kIG5vdCArMCwgdGhlIHJlc3VsdCBpcyArMS5cbiAgICAgICAgICAgIHJldHVybiAoKHggPiAwKSAtICh4IDwgMCkpIHx8ICt4O1xuICAgICAgICAgICAgLy8gQSBtb3JlIGFlc3RoZXRpY2FsIHBlcnN1YWRvLXJlcHJlc2VudGF0aW9uIGlzIHNob3duIGJlbG93XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gKCAoeCA+IDApID8gMCA6IDEgKSAgLy8gaWYgeCBpcyBuZWdhdGl2ZSB0aGVuIG5lZ2F0aXZlIG9uZVxuICAgICAgICAgICAgLy8gICAgICAgICAgKyAgICAgICAgICAgLy8gZWxzZSAoYmVjYXVzZSB5b3UgY2FudCBiZSBib3RoIC0gYW5kICspXG4gICAgICAgICAgICAvLyAoICh4IDwgMCkgPyAwIDogLTEgKSAvLyBpZiB4IGlzIHBvc2l0aXZlIHRoZW4gcG9zaXRpdmUgb25lXG4gICAgICAgICAgICAvLyAgICAgICAgIHx8ICAgICAgICAgICAvLyBpZiB4IGlzIDAsIC0wLCBvciBOYU4sIG9yIG5vdCBhIG51bWJlcixcbiAgICAgICAgICAgIC8vICAgICAgICAgK3ggICAgICAgICAgIC8vIFRoZW4gdGhlIHJlc3VsdCB3aWxsIGJlIHgsIChvcikgaWYgeCBpc1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgLy8gbm90IGEgbnVtYmVyLCB0aGVuIHggY29udmVydHMgdG8gbnVtYmVyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgcmFuZG9tIGludCBiZXR3ZWVuIG1pbmltdW0gYW5kIG1heGltdW0gdmFsdWVzLlxuICAgICAqIElmIGEgc2luZ2xlIHZhbHVlIGlzIHN1cHBsaWVkLCBpdCB3aWxsIHJldHVybiBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIHRoZSBzdXBwbGllZCB2YWx1ZS5cbiAgICAgKiBAbWV0aG9kIHJhbmRvbUludFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge2ludH0gbWluIExvd2VzdCBudW1iZXIuIElmIG1heCBpcyBvbWl0dGVkLCB0aGVuIHRoaXMgYmVjb21lcyBtYXguXG4gICAgICogQHBhcmFtIHtpbnR9IG1heCBIaWdoZXN0IG51bWJlci5cbiAgICAgKiBAcmV0dXJuIHtpbnR9IFRoZSByYW5kb20gdmFsdWVcbiAgICAgKi9cbiAgICBNYXRoLnJhbmRvbUludCA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgICAgIG1pbiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgcmFuZG9tIGZsb2F0IGJldHdlZW4gbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMuXG4gICAgICogSWYgYSBzaW5nbGUgdmFsdWUgaXMgc3VwcGxpZWQsIGl0IHdpbGwgcmV0dXJuIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgdGhlIHN1cHBsaWVkIHZhbHVlLlxuICAgICAqIEBtZXRob2QgcmFuZG9tRmxvYXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG1pbiBMb3dlc3QgbnVtYmVyLiBJZiBtYXggaXMgb21pdHRlZCwgdGhlbiB0aGlzIGJlY29tZXMgbWF4LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtYXggSGlnaGVzdCBudW1iZXIuXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBUaGUgcmFuZG9tIHZhbHVlXG4gICAgICovXG4gICAgTWF0aC5yYW5kb21GbG9hdCA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgICAgIG1pbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XG4gICAgfTtcbn0oTWF0aCkpO1xuIiwiKGZ1bmN0aW9uIChOdW1iZXIpIHtcbiAgICBOdW1iZXIuaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBcbiAgICAgICAgaXNGaW5pdGUodmFsdWUpICYmIFxuICAgICAgICBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG4gICAgfTtcblxuICAgIC8vIENoZWNrIGlmIGFuIGludGVnZXIgaXMgemVybywgb3IgYSBmbG9hdGluZyBwb2ludCBpcyBuZWFyIGVub3VnaCB0byBiZSBjb25zaWRlcmVkXG4gICAgLy8gemVybyAoZ292ZXJuZWQgYnkgYW4gb3B0aW9uYWwgdGhyZXNob2xkIHZhbHVlKS5cbiAgICBOdW1iZXIuaXNaZXJvID0gZnVuY3Rpb24gKG51bSwgdGhyZXNob2xkKSB7XG4gICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKG51bSkpIHtcbiAgICAgICAgICAgIHJldHVybiAobnVtID09PSAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaXNEZWZpbmVkKHRocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQgPSAwLjAwMDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKE1hdGguYWJzKG51bSkgPCB0aHJlc2hvbGQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIENoZWNrIGlmIHR3byBpbnRlZ2VycyBhcmUgZXF1YWwsIG9yIHR3byBmbG9hdHMgYXJlIG5lYXIgZW5vdWdoIHRvIGJlIGNvbnNpZGVyZWRcbiAgICAvLyBlcXVhbCAoZ292ZXJuZWQgYnkgYW4gb3B0aW9uYWwgdGhyZXNob2xkIHZhbHVlKS5cbiAgICBOdW1iZXIuZXF1YWxzID0gZnVuY3Rpb24gKHZhbHVlMSwgdmFsdWUyLCB0aHJlc2hvbGQpIHtcbiAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUxKSAmJiBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlMikpIHtcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUxID09PSB2YWx1ZTIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFpc0RlZmluZWQodGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgIHRocmVzaG9sZCA9IDAuMDAwMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIuaXNaZXJvKE1hdGguYWJzKHZhbHVlMSAtIHZhbHVlMiksIHRocmVzaG9sZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgTnVtYmVyLmlzRXZlbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKCh2YWx1ZSAlIDIpID09PSAwKTtcbiAgICB9O1xuXG4gICAgTnVtYmVyLmlzT2RkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhKE51bWJlci5pc0V2ZW4odmFsdWUpKTtcbiAgICB9O1xuXG4gICAgLy9zb2x2ZSB0aGUgamF2YXNjcmlwdCBtb2R1bG8gYnVnIHdpdGggbmVnYXRpdmUgdmFsdWVzLlxuICAgIE51bWJlci5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuICgodGhpcyAlIG4pICsgbikgJSBuO1xuICAgIH07XG59KE51bWJlcikpO1xuIiwiKGZ1bmN0aW9uIChPYmplY3QpIHtcbiAgICBPYmplY3QuZXh0ZW5kID0gZnVuY3Rpb24gKG9iaiwgaXNEZWVwQ29weSkge1xuICAgICAgICB2YXIgYXJnc1N0YXJ0LFxuICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgIGRlZXBDbG9uZTtcblxuICAgICAgICBpZiAodHlwZW9mIGlzRGVlcENvcHkgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICBhcmdzU3RhcnQgPSAyO1xuICAgICAgICAgICAgZGVlcENsb25lID0gaXNEZWVwQ29weTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyZ3NTdGFydCA9IDE7XG4gICAgICAgICAgICBkZWVwQ2xvbmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gb2JqIHx8IHt9O1xuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCBhcmdzU3RhcnQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3NbaV07XG5cbiAgICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVlcENsb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlW3Byb3BdICYmIHNvdXJjZVtwcm9wXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmpbcHJvcF0gfHwgb2JqW3Byb3BdLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW3Byb3BdID0gb2JqW3Byb3BdIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZXh0ZW5kKG9ialtwcm9wXSwgZGVlcENsb25lLCBzb3VyY2VbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoc291cmNlW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IERlZXAgY29weSBvZiBhcnJheSAoYXJyYXkuY2xvbmUodHJ1ZSkpIHNlZW1zIHRvIGhhdmUgaXNzdWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIGRvIGEgc2hhbGxvdyBjb3B5IG9mIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaW5zdGVhZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF0uY2xvbmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KHNvdXJjZVtwcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF0uY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmNsb25lID0gZnVuY3Rpb24gKG9iaiwgaXNEZWVwQ29weSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmV4dGVuZCh7fSwgaXNEZWVwQ29weSwgb2JqKTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LnZhbHVlcyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICBvYmogPSBvYmogfHwge307XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChvYmpba2V5c1tpXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF2b2lkIGhhc093blByb3BlcnR5IGZvciBwZXJmb3JtYW5jZS5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iailcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKG9ialtrZXldKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9O1xuXG4gICAgT2JqZWN0Lm9taXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwgb21pdHRlZFByb3BzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgdmFyIG9taXR0ZWRQcm9wZXJ0aWVzID0gb21pdHRlZFByb3BzIHx8IFtdO1xuICAgICAgICBpZiAob21pdHRlZFByb3BlcnRpZXMuY29uc3RydWN0b3IgIT09IEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gb2JqIHx8IHt9O1xuXG4gICAgICAgIGZvciAodmFyIHggaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAob21pdHRlZFByb3BlcnRpZXMuaW5kZXhPZih4KSA9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFt4XSA9IG9ialt4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBBbGxvdyBvYmouZm9ySW4oZnVuY3Rpb24gKHByb3AsIHByb3BJRCkge30pIGNhbGxiYWNrIGZvciBhIGZvci4uLmluIGxvb3AuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsIFwiZm9ySW5cIiwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAocHJvcGVydHlDYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzQXJnKSB7XG4gICAgICAgICAgICAgICAgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIHByb3BJRCBpbiB0aGlzKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHlDYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXNbcHJvcElEXSwgcHJvcElEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2FtZSBhcyBmb3JJbigpLCBidXQgaXRlcmF0ZXMgdGhyb3VnaCBvYmplY3QncyBrZXlzIGluIHJldmVyc2UuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsIFwicmV2ZXJzZUZvckluXCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHByb3BlcnR5Q2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgICAgIGlmICghcHJvcGVydHlDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpc0FyZykge1xuICAgICAgICAgICAgICAgIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcHJvcElEO1xuICAgICAgICAgICAgdmFyIHByb3BJRHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAocHJvcElEIGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICBwcm9wSURzLnB1c2gocHJvcElEKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAocHJvcElEcy5sZW5ndGggLSAxKTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgICAgICAgICAgICAgIHByb3BJRCA9IHByb3BJRHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHByb3BlcnR5Q2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzW3Byb3BJRF0sIHByb3BJRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEZvciBhIGRpY3Rpb25hcnkgJ29iaicsIHJldHVybiBhbiBhcnJheSBhbGwgdmFsdWVzIHBlciBrZXkgb2Ygb2JqLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCBcImFycmF5aWZ5XCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdFxuICAgICAgICAgICAgICAgIC5rZXlzKHRoaXMpXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2tleV07XG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNhbWUgYXMgbWFwIGZvciBhcnJheXMsIGJ1dCBvbiBvYmplY3QgcHJvcGVydGllcy4gUmV0dXJucyBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzLCB3aXRoIHRoZSB2YWx1ZXNcbiAgICAvLyBiZWluZyBkZWZpbmVkIGJ5IHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGNhbGxiYWNrIGNhbGwgZm9yIGVhY2gga2V5LlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCBcIm1hcFwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChwcm9wZXJ0eUNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgICAgICBpZiAoIXByb3BlcnR5Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmNsb25lKHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzQXJnKSB7XG4gICAgICAgICAgICAgICAgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvYmogPSB7fTtcblxuICAgICAgICAgICAgZm9yICh2YXIgcHJvcElEIGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICBvYmpbcHJvcElEXSA9IHByb3BlcnR5Q2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzW3Byb3BJRF0sIHByb3BJRCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICB9KTtcbn0oT2JqZWN0KSk7XG4iLCIoZnVuY3Rpb24gKFN0cmluZykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91eGl0dGVuL3BvbHlmaWxsL2Jsb2IvbWFzdGVyL3N0cmluZy5wb2x5ZmlsbC5qc1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9wYWRTdGFydFxuICAgIGlmICghU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydCkge1xuICAgICAgICBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0ID0gZnVuY3Rpb24gcGFkU3RhcnQodGFyZ2V0TGVuZ3RoLCBwYWRTdHJpbmcpIHtcbiAgICAgICAgICAgIHRhcmdldExlbmd0aCA9IHRhcmdldExlbmd0aCA+PiAwOyAvL2Zsb29yIGlmIG51bWJlciBvciBjb252ZXJ0IG5vbi1udW1iZXIgdG8gMDtcbiAgICAgICAgICAgIHBhZFN0cmluZyA9IFN0cmluZyhwYWRTdHJpbmcgfHwgJyAnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA+IHRhcmdldExlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZW5ndGggPSB0YXJnZXRMZW5ndGggLSB0aGlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TGVuZ3RoID4gcGFkU3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwYWRTdHJpbmcgKz0gcGFkU3RyaW5nLnJlcGVhdCh0YXJnZXRMZW5ndGggLyBwYWRTdHJpbmcubGVuZ3RoKTsgLy9hcHBlbmQgdG8gb3JpZ2luYWwgdG8gZW5zdXJlIHdlIGFyZSBsb25nZXIgdGhhbiBuZWVkZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZFN0cmluZy5zbGljZSgwLCB0YXJnZXRMZW5ndGgpICsgU3RyaW5nKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91eGl0dGVuL3BvbHlmaWxsL2Jsb2IvbWFzdGVyL3N0cmluZy5wb2x5ZmlsbC5qc1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9yZXBlYXRcbiAgICBpZiAoIVN0cmluZy5wcm90b3R5cGUucGFkRW5kKSB7XG4gICAgICAgIFN0cmluZy5wcm90b3R5cGUucGFkRW5kID0gZnVuY3Rpb24gcGFkRW5kKHRhcmdldExlbmd0aCwgcGFkU3RyaW5nKSB7XG4gICAgICAgICAgICB0YXJnZXRMZW5ndGggPSB0YXJnZXRMZW5ndGggPj4gMDsgLy9mbG9vciBpZiBudW1iZXIgb3IgY29udmVydCBub24tbnVtYmVyIHRvIDA7XG4gICAgICAgICAgICBwYWRTdHJpbmcgPSBTdHJpbmcocGFkU3RyaW5nIHx8ICcgJyk7XG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPiB0YXJnZXRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVuZ3RoID0gdGFyZ2V0TGVuZ3RoIC0gdGhpcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldExlbmd0aCA+IHBhZFN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkU3RyaW5nICs9IHBhZFN0cmluZy5yZXBlYXQodGFyZ2V0TGVuZ3RoIC8gcGFkU3RyaW5nLmxlbmd0aCk7IC8vYXBwZW5kIHRvIG9yaWdpbmFsIHRvIGVuc3VyZSB3ZSBhcmUgbG9uZ2VyIHRoYW4gbmVlZGVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcykgKyBwYWRTdHJpbmcuc2xpY2UoMCwgdGFyZ2V0TGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59KFN0cmluZykpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0Ly8gQmFzZSBjbGFzcyBmYWN0b3J5IHRoYXQgYWxsb3dzIHlvdSB0byByZWdpc3RlciBjcmVhdG9yIGZ1bmN0aW9ucy5cblx0dmFyIEJhc2VGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuX2NyZWF0b3JzID0ge307XG5cdH07XG5cdHZhciBwID0gQmFzZUZhY3RvcnkucHJvdG90eXBlO1xuXG5cdHAucmVnaXN0ZXJDcmVhdG9yID0gZnVuY3Rpb24gKGNyZWF0b3JLZXksIGNyZWF0b3JGdW5jKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0b3JzW2NyZWF0b3JLZXldID0gY3JlYXRvckZ1bmM7XG4gICAgfTtcblxuICAgIHAucmVnaXN0ZXJDcmVhdG9ycyA9IGZ1bmN0aW9uIChjcmVhdG9ycykge1xuICAgICAgICBjcmVhdG9ycyA9IGNyZWF0b3JzIHx8IFtdO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNyZWF0b3JzLmZvckVhY2goZnVuY3Rpb24gKGNyZWF0b3IpIHtcbiAgICAgICAgICAgIHNlbGYuX2NyZWF0b3JzW2NyZWF0b3IuY3JlYXRvcktleV0gPSBjcmVhdG9yLmNyZWF0b3JGdW5jO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcC5kZXJlZ2lzdGVyQ3JlYXRvciA9IGZ1bmN0aW9uIChjcmVhdG9yS2V5KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jcmVhdG9yc1tjcmVhdG9yS2V5XTtcbiAgICB9O1xuXG4gICAgcC5kZXJlZ2lzdGVyQ3JlYXRvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0b3JzID0ge307XG4gICAgfTtcblxuICAgIHAuZGVmYXVsdENyZWF0b3IgPSBmdW5jdGlvbiAoVHlwZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbmZpZywgY2FsbGluZ0Z1bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHlwZShjb25maWcpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuQmFzZUZhY3RvcnkgPSBCYXNlRmFjdG9yeTtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBDb2xvdXJVdGlscyA9IHt9O1xuXG4gICAgLy8gQ29udmVydCBcIiNmZmZmZmZcIiB0byAweGZmZmZmZi5cbiAgICBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlciA9IGZ1bmN0aW9uIChjb2xvdXJTdHJpbmcpIHtcbiAgICAgICAgY29sb3VyU3RyaW5nID0gY29sb3VyU3RyaW5nLnJlcGxhY2UoJyMnLCcnKTtcblxuICAgICAgICBpZiAoY29sb3VyU3RyaW5nLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICBjb2xvdXJTdHJpbmcgPSBjb2xvdXJTdHJpbmcuY2hhckF0KDApICsgY29sb3VyU3RyaW5nLmNoYXJBdCgwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3VyU3RyaW5nLmNoYXJBdCgxKSArIGNvbG91clN0cmluZy5jaGFyQXQoMSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG91clN0cmluZy5jaGFyQXQoMikgKyBjb2xvdXJTdHJpbmcuY2hhckF0KDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGNvbG91clN0cmluZywgMTYpO1xuICAgIH07XG5cbiAgICAvLyBDb252ZXJ0IDB4ZmZmZmZmIHRvIFwiI2ZmZmZmZlwiLlxuICAgIENvbG91clV0aWxzLm51bWJlclRvQ29sb3VyID0gZnVuY3Rpb24gKGNvbG91ck51bSkge1xuICAgICAgICByZXR1cm4gXCIjXCIgKyBjb2xvdXJOdW0udG9TdHJpbmcoMTYpO1xuICAgIH07XG5cbiAgICAvLyBDb252ZXJ0IFJHQiBzdHJ1Y3QgdG8gaGV4IChlLmcuIDB4ZmZmZmZmKS4gU2ltaWxhciB0byBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlci5cbiAgICBDb2xvdXJVdGlscy5yZ2JUb0hleCA9IGZ1bmN0aW9uIChyZ2IpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KChcIjBcIiArIHJnYi5yLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpICtcbiAgICAgICAgICAgIChcIjBcIiArIHJnYi5nLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpICtcbiAgICAgICAgICAgIChcIjBcIiArIHJnYi5iLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpLCAxNik7XG4gICAgfTtcblxuICAgIC8vIENvbnZlcnQgaGV4IChlLmcuIDB4ZmZmZmZmKSB0byBSR0Igc3RydWN0LlxuICAgIENvbG91clV0aWxzLmhleFRvUkdCID0gZnVuY3Rpb24gKGhleCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogKCgoaGV4ID4+IDE2KSAmIDB4RkYpIC8gMjU1KSxcbiAgICAgICAgICAgIGc6ICgoKGhleCA+PiA4KSAmIDB4RkYpIC8gMjU1KSxcbiAgICAgICAgICAgIGI6ICgoaGV4ICYgMHhGRikgLyAyNTUpXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8vIENvbnZlcnQgXCJyZ2IociwgZywgYilcIiBvciBcInJnYmEociwgZywgYiwgYSlcIiB0byBSR0JBIHN0cnVjdC5cbiAgICBDb2xvdXJVdGlscy5jc3NDb2xvdXJUb1JHQiA9IGZ1bmN0aW9uIChjc3NDb2xvdXIpIHtcbiAgICAgICAgdmFyIG91dCA9IHsgcjogMCwgZzogMCwgYjogMCwgYTogMSB9O1xuICAgICAgICB2YXIgcmVzdWx0ID0gL15yZ2JhP1xcKFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqKD86LFxccyooXFxkKyg/OlxcLlxcZCspPykpP1xccypcXCkkLy5leGVjKGNzc0NvbG91cik7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIG91dC5yID0gcGFyc2VJbnQocmVzdWx0WzFdLCAxMCk7XG4gICAgICAgICAgICBvdXQuZyA9IHBhcnNlSW50KHJlc3VsdFsyXSwgMTApO1xuICAgICAgICAgICAgb3V0LmIgPSBwYXJzZUludChyZXN1bHRbM10sIDEwKTtcbiAgICAgICAgICAgIG91dC5hID0gKHJlc3VsdFs0XSAhPT0gdW5kZWZpbmVkKSA/IHBhcnNlRmxvYXQocmVzdWx0WzRdKSA6IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuXG4gICAgLy8gQ29udmVydCBSR0IgdmFsdWVzIChvciBSR0Igc3RydWN0KSBpbiBbMCwgMV0gcmFuZ2UgdG8gc2luZ2xlIGhleCB2YWx1ZSwgZS5nLiAweGFiY2RlZi5cbiAgICBDb2xvdXJVdGlscy5yZ2JGbG9hdFRvSGV4ID0gZnVuY3Rpb24ocmVkLCBncmVlbiwgYmx1ZSkge1xuICAgICAgICB2YXIgcmdiID0ge1xuICAgICAgICAgICAgcjogcmVkLFxuICAgICAgICAgICAgZzogZ3JlZW4sXG4gICAgICAgICAgICBiOiBibHVlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFpc0RlZmluZWQocmVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHsgciwgZywgYiB9IHdhcyBwYXNzZWQgaW4gcmF0aGVyIHRoYW4gaW5kaXZpZHVhbCBjb21wb25lbnRzLlxuICAgICAgICBpZiAoIWlzRGVmaW5lZChncmVlbikgJiYgIWlzRGVmaW5lZChibHVlKSkge1xuICAgICAgICAgICAgcmdiID0ge1xuICAgICAgICAgICAgICAgIHI6IHJlZC5yLFxuICAgICAgICAgICAgICAgIGc6IHJlZC5nLFxuICAgICAgICAgICAgICAgIGI6IHJlZC5iXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmdiLnIgPSBNYXRoLmZsb29yKHJnYi5yICogMjU1KTtcbiAgICAgICAgcmdiLmcgPSBNYXRoLmZsb29yKHJnYi5nICogMjU1KTtcbiAgICAgICAgcmdiLmIgPSBNYXRoLmZsb29yKHJnYi5iICogMjU1KTtcblxuICAgICAgICB2YXIgaGV4U3RyaW5nID0gKHJnYi5yLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChyZ2IuZy50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAocmdiLmIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSk7XG5cbiAgICAgICAgcmV0dXJuIENvbG91clV0aWxzLmNvbG91clRvTnVtYmVyKGhleFN0cmluZyk7XG4gICAgfTtcblxuICAgIC8vIENvbnZlcnQgaGV4IFJHQiB2YWx1ZSBpbnRvIHN0cnVjdCBjb250YWluaW5nIHIsIGcgYW5kIGIgY29tcG9uZW50cy5cbiAgICBDb2xvdXJVdGlscy5yZ2JIZXhUb0Zsb2F0ID0gZnVuY3Rpb24gKHJnYkhleCkge1xuICAgICAgICBpZiAoIWlzRGVmaW5lZChyZ2JIZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWQgPSAocmdiSGV4ID4+IDE2KSAmJiAweGZmO1xuICAgICAgICB2YXIgZ3JlZW4gPSAocmdiSGV4ID4+IDgpICYmIDB4ZmY7XG4gICAgICAgIHZhciBibHVlID0gKHJnYkhleCkgJiYgMHhmZjtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogKHJlZCAvIDI1NS4wKSxcbiAgICAgICAgICAgIGc6IChncmVlbiAvIDI1NS4wKSxcbiAgICAgICAgICAgIGI6IChibHVlIC8gMjU1LjApXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8vIENvbnZlcnNpb24gZm9ybXVsYSBmcm9tIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSFNMX2NvbG9yX3NwYWNlLlxuICAgIC8vIEJhc2VkIG9uIGNvZGUgYnkgTWljaGFlbCBKYWNrc29uIChodHRwczovL2dpc3QuZ2l0aHViLmNvbS9tamFja3Nvbi81MzExMjU2KS5cbiAgICB2YXIgX2h1ZVRvUmdiQ29tcG9uZW50ID0gZnVuY3Rpb24gKHAsIHEsIHQpIHtcbiAgICAgICAgaWYgKHQgPCAwLjApIHtcbiAgICAgICAgICAgIHQgKz0gMS4wO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ID4gMS4wKSB7XG4gICAgICAgICAgICB0IC09IDEuMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8ICgxLjAgLyA2LjApKSB7XG4gICAgICAgICAgICByZXR1cm4gKHAgKyAocSAtIHApICogNi4wICogdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgPCAoMS4wIC8gMi4wKSkge1xuICAgICAgICAgICAgcmV0dXJuIHE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgPCAoMi4wIC8gMy4wKSkge1xuICAgICAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogKCgyLjAgLyAzLjApIC0gdCkgKiA2LjA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcDtcbiAgICB9O1xuXG4gICAgLy8gQ29udmVyc2lvbiBmb3JtdWxhIGZyb20gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU0xfY29sb3Jfc3BhY2UuXG4gICAgLy8gQmFzZWQgb24gY29kZSBieSBNaWNoYWVsIEphY2tzb24gKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL21qYWNrc29uLzUzMTEyNTYpLlxuICAgIC8vIC0gSHVlID0gMC0zNjAgYW5nbGUgaW4gcmFuZ2UgWzAsIDFdXG4gICAgLy8gLSBTYXR1cmF0aW9uID0gMC0xMDAlIGluIHJhbmdlIFswLCAxXS4uLiAwID0gYWxsIGxpZ2h0bmVzcyB2YWx1ZSwgMSA9IGFsbCBodWUgdmFsdWVzXG4gICAgLy8gLSBMaWdodG5lc3MgPSAwLTEwMCUgaW4gcmFuZ2UgWzAsIDFdLi4uIDAgPSBibGFjaywgMC41ID0gY29sb3VyLCAxLjAgPSB3aGl0ZVxuICAgIC8vIC0gT3V0cHV0IFJHQiB2YWx1ZSA9IFswLCAxXSByYW5nZSBwZXIgY29tcG9uZW50LlxuICAgIENvbG91clV0aWxzLmhzbFRvUmdiID0gZnVuY3Rpb24gKGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzKSB7XG4gICAgICAgIGlmICghaXNEZWZpbmVkKGxpZ2h0bmVzcykpIHtcbiAgICAgICAgICAgIGxpZ2h0bmVzcyA9IDAuNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRGVmaW5lZChzYXR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2F0dXJhdGlvbiA9IDEuMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvdXRwdXRDb2xvdXIgPSB7XG4gICAgICAgICAgICByOiAwLjAsXG4gICAgICAgICAgICBnOiAwLjAsXG4gICAgICAgICAgICBiOiAwLjBcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoc2F0dXJhdGlvbiA+IDAuMDAwMSkge1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGNocm9tYSwgZmluZCBSR0IgbWF0Y2hpbmcgaHVlL2Nocm9tYSwgc2NhbGUgYnkgbGlnaHRuZXNzLlxuICAgICAgICAgICAgdmFyIHEgPSAobGlnaHRuZXNzIDwgMC41KSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAobGlnaHRuZXNzICogKDEuMCArIHNhdHVyYXRpb24pKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAobGlnaHRuZXNzICsgc2F0dXJhdGlvbiAtIChsaWdodG5lc3MgKiBzYXR1cmF0aW9uKSk7XG4gICAgICAgICAgICB2YXIgcCA9ICgoMi4wICogbGlnaHRuZXNzKSAtIHEpO1xuXG4gICAgICAgICAgICBvdXRwdXRDb2xvdXIuciA9IF9odWVUb1JnYkNvbXBvbmVudChwLCBxLCAoaHVlICsgKDEuMCAvIDMuMCkpKTtcbiAgICAgICAgICAgIG91dHB1dENvbG91ci5nID0gX2h1ZVRvUmdiQ29tcG9uZW50KHAsIHEsIGh1ZSk7XG4gICAgICAgICAgICBvdXRwdXRDb2xvdXIuYiA9IF9odWVUb1JnYkNvbXBvbmVudChwLCBxLCAoaHVlIC0gKDEuMCAvIDMuMCkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlZCA9IGxpZ2h0bmVzcztcbiAgICAgICAgICAgIGdyZWVuID0gbGlnaHRuZXNzO1xuICAgICAgICAgICAgYmx1ZSA9IGxpZ2h0bmVzcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXRwdXRDb2xvdXI7XG4gICAgfTtcblxuICAgIC8vIFVzZSB0aGlzIHRvIGNvbnZlcnQgaW5wdXQgaHVlIGZvciBoc2xUb1JnYigpIHNvIHRoYXQgY29sb3VycyBhcmUgZGlzdHJpYnV0ZWQgbW9yZVxuICAgIC8vIGV2ZW5seSBhbmQgbGVzcyBiaWFzZWQgdG93YXJkcyB0aGUgUkdCIHBvbGVzIGluIHRoZSBodWUgY29sb3VyIHdoZWVsLlxuICAgIENvbG91clV0aWxzLmJpYXNIdWVBbmdsZSA9IGZ1bmN0aW9uIChodWUpIHtcbiAgICAgICAgdmFyIGRpc3BsYWNlbWVudCA9ICgxLjAgLyAxMi4wKTtcbiAgICAgICAgaHVlIC09IGRpc3BsYWNlbWVudDtcbiAgICAgICAgdmFyIGFuZ2xlQmlhcyA9IChNYXRoLmNvcyg2LjAgKiBodWUgKiBNYXRoLlBJKSAqIDAuNSkgKyAwLjU7XG4gICAgICAgIGFuZ2xlQmlhcyAqPSBkaXNwbGFjZW1lbnQ7XG4gICAgICAgIGFuZ2xlQmlhcyArPSAoMC41ICogZGlzcGxhY2VtZW50KTtcblxuICAgICAgICByZXR1cm4gKGh1ZSArIGFuZ2xlQmlhcyk7XG4gICAgfTtcblxuICAgIC8vIExlcnAgYmV0d2VlbiAyIGNvbG91ciB2YWx1ZXMuXG4gICAgQ29sb3VyVXRpbHMubGVycCA9IGZ1bmN0aW9uIChjb2xvdXIxLCBjb2xvdXIyLCBsZXJwRmFjdG9yKSB7XG4gICAgICAgIHJldHVybiBDb2xvdXJVdGlscy5sZXJwQXJyYXkoWyBjb2xvdXIxLCBjb2xvdXIyIF0sIGxlcnBGYWN0b3IpO1xuICAgIH07XG5cbiAgICAvLyBMZXJwIGJldHdlZW4gMiBvciBtb3JlIGNvbG91cnMgaW4gYW4gYXJyYXksIHdoZXJlIGVhY2ggY29sb3VyIGlzIGEgaGV4IC8gbnVtYmVyIHZhbHVlLiBSZXR1cm5zIGEgc2luZ2xlIGhleCAvIG51bWJlci5cbiAgICBDb2xvdXJVdGlscy5sZXJwQXJyYXkgPSBmdW5jdGlvbiAoY29sb3VycywgbGVycEZhY3Rvcikge1xuICAgICAgICBpZiAoIWlzQXJyYXkoY29sb3VycykgfHwgIWNvbG91cnMuaGFzSXRlbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoY29sb3Vycy5sZW5ndGggPT0gMSkgfHwgKGxlcnBGYWN0b3IgPD0gMC4wKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbG91cnNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlcnBGYWN0b3IgPj0gMS4wKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sb3Vycy5sYXN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbnVtU2VjdGlvbnMgPSAoY29sb3Vycy5sZW5ndGggLSAxKTtcblxuICAgICAgICB2YXIgc3RhcnRDb2xvdXJJbmRleCA9IE1hdGguZmxvb3IobGVycEZhY3RvciAqIG51bVNlY3Rpb25zKTtcbiAgICAgICAgdmFyIGVuZENvbG91ckluZGV4ID0gKHN0YXJ0Q29sb3VySW5kZXggKyAxKTtcblxuICAgICAgICB2YXIgc3RhcnRDb2xvdXJSR0IgPSBDb2xvdXJVdGlscy5oZXhUb1JHQihjb2xvdXJzW3N0YXJ0Q29sb3VySW5kZXhdKTtcbiAgICAgICAgdmFyIGVuZENvbG91clJHQiA9IENvbG91clV0aWxzLmhleFRvUkdCKGNvbG91cnNbZW5kQ29sb3VySW5kZXhdKTtcblxuICAgICAgICB2YXIgc2VnbWVudE1pbiA9IChzdGFydENvbG91ckluZGV4IC8gbnVtU2VjdGlvbnMpO1xuICAgICAgICB2YXIgc2VnbWVudE1heCA9IChlbmRDb2xvdXJJbmRleCAvIG51bVNlY3Rpb25zKTtcbiAgICAgICAgdmFyIHNlZ21lbnRMZXJwRmFjdG9yID0gTWF0aC5pbnZlcnNlTGVycChzZWdtZW50TWluLCBzZWdtZW50TWF4LCBsZXJwRmFjdG9yKTtcblxuICAgICAgICBsZXQgb3V0cHV0UkdCID0ge1xuICAgICAgICAgICAgcjogTWF0aC5sZXJwKHN0YXJ0Q29sb3VyUkdCLnIsIGVuZENvbG91clJHQi5yLCBzZWdtZW50TGVycEZhY3RvciksXG4gICAgICAgICAgICBnOiBNYXRoLmxlcnAoc3RhcnRDb2xvdXJSR0IuZywgZW5kQ29sb3VyUkdCLmcsIHNlZ21lbnRMZXJwRmFjdG9yKSxcbiAgICAgICAgICAgIGI6IE1hdGgubGVycChzdGFydENvbG91clJHQi5iLCBlbmRDb2xvdXJSR0IuYiwgc2VnbWVudExlcnBGYWN0b3IpXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIENvbG91clV0aWxzLnJnYkZsb2F0VG9IZXgob3V0cHV0UkdCKTtcbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkNvbG91clV0aWxzID0gQ29sb3VyVXRpbHM7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgRGV2aWNlVXRpbHMgPSB7fTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2VVdGlscywgXCJpc1RvdWNoRGV2aWNlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAoKFwib250b3VjaHN0YXJ0XCIgaW4gd2luZG93KSB8fFxuICAgICAgICAgICAgICAgICAgICAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCkpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGV2aWNlVXRpbHMsIFwiaXNEZXNrdG9wXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuICghRGV2aWNlVXRpbHMuaXNUb3VjaERldmljZSk7IH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2VVdGlscywgXCJpc1dpbmRvd3NQaG9uZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICAgICAgcmV0dXJuICgvV2luZG93cyBQaG9uZS9pLnRlc3QodWEpIHx8IC9JRU1vYmlsZS9pLnRlc3QodWEpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERldmljZVV0aWxzLCBcImlzQ2hyb21lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAgICAgICByZXR1cm4gKC9DaHJvbWVcXC8oXFxkKykvLnRlc3QodWEpICYmICFEZXZpY2VVdGlscy5pc1dpbmRvd3NQaG9uZSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2VVdGlscywgXCJpc0lFMTFcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgICAgICAgIHJldHVybiAodWEuaW5kZXhPZihcIlRyaWRlbnQvNy4wXCIpID4gMCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGV2aWNlVXRpbHMsIFwiaXNBbmRyb2lkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICAgICAgcmV0dXJuICgvQW5kcm9pZC9pLnRlc3QodWEpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2VVdGlscywgXCJpc2lPU1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICgvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pIHx8XG4gICAgICAgICAgICAgICAgKG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gJ01hY0ludGVsJyAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxKSkgJiZcbiAgICAgICAgICAgICAgICAhd2luZG93Lk1TU3RyZWFtXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5EZXZpY2VVdGlscyA9IERldmljZVV0aWxzO1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEdlbmVyYWxVdGlscyA9IHt9O1xuXG4gICAgLy8gU2ltcGxlIEdVSUQgZ2VuZXJhdG9yLlxuICAgIHZhciBndWlkID0gMDtcbiAgICBHZW5lcmFsVXRpbHMuZ2VuZXJhdGVHVUlEID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ3VpZCsrO1xuICAgIH07XG5cbiAgICBHZW5lcmFsVXRpbHMuZ2VuZXJhdGVHVUlEU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJcIiArIGd1aWQrKztcbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkdlbmVyYWxVdGlscyA9IEdlbmVyYWxVdGlscztcbn0oKSk7XG4iLCIoZnVuY3Rpb24oKVxue1xuICAgIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIHZhciBicm93c2VyO1xuICAgIHZhciBvcztcblxuICAgIGlmKHVzZXJBZ2VudC5pbmRleE9mKFwiU2FmYXJpXCIpID49IDApXG4gICAge1xuICAgICAgICBicm93c2VyID0gXCJTYWZhcmlcIjtcbiAgICB9XG4gICAgZWxzZSBpZih1c2VyQWdlbnQuaW5kZXhPZihcIkZpcmVmb3hcIikgPj0gMClcbiAgICB7XG4gICAgICAgIGJyb3dzZXIgPSBcIkZpcmVmb3hcIjtcbiAgICB9XG4gICAgZWxzZSBpZih1c2VyQWdlbnQuaW5kZXhPZihcIklFXCIpID49IDAgfHwgdXNlckFnZW50LmluZGV4T2YoXCJFZGdlXCIpKVxuICAgIHtcbiAgICAgICAgYnJvd3NlciA9IFwiSUVcIjtcbiAgICB9XG4gICAgZWxzZS8vQXNzdW1lIGJyb3dzZXIgd2l0aCB0aGUgcXVhbGl0aWVzIG9mIENocm9tZVxuICAgIHtcbiAgICAgICAgYnJvd3NlciA9IFwiQ2hyb21lXCI7XG4gICAgfVxuXG4gICAgaWYodXNlckFnZW50LmluZGV4T2YoXCJXaW5kb3dzXCIpID49IDApXG4gICAge1xuICAgICAgICBvcyA9IFwiV2luZG93c1wiO1xuICAgIH1cbiAgICBlbHNlIGlmKHVzZXJBZ2VudC5pbmRleE9mKFwiTWFjXCIpID49IDApXG4gICAge1xuICAgICAgICBvcyA9IFwiTWFjXCI7XG4gICAgfVxuICAgIGVsc2UgaWYodXNlckFnZW50LmluZGV4T2YoXCJpT1NcIikgPj0gMCB8fCB1c2VyQWdlbnQuaW5kZXhPZignaVBob25lJykgPj0gMCB8fCB1c2VyQWdlbnQuaW5kZXhPZignaVBhZCcpID49IDApXG4gICAge1xuICAgICAgICBvcyA9IFwiTWFjXCI7XG4gICAgfVxuICAgIGVsc2UvL0Fzc3VtZSBzb21lIGZvcm0gb2YgTGludXgsIGluY2x1ZGluZyBBbmRyb2lkXG4gICAge1xuICAgICAgICBvcyA9IFwiTGludXhcIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgVVNMb2NhbGUgaXMgdGhlIHN0YW5kYXJkIGtleWJvYXJkIGxheW91dCBmb3IgVVMgY29tcHV0ZXJzLiBBbGwgc3RhbmRhcmQga2V5cyBhcmUgaW5jbHVkZWQuXG4gICAgICogIEtleXMgdG8gbm90ZTpcbiAgICAgKlxuICAgICAqICAqICdPUycgcmVwcmVzZW50cyBib3RoIHRoZSBXaW5kb3dzIGtleSBhbmQgdGhlICdjb21tYW5kJyBrZXksIGFsdGhvdWdoICdjb21tYW5kJ1xuICAgICAqICAgIGlzIGFsc28gYXZhaWxhYmxlIHdoZW4gdGhlIGNsaWVudCBpcyBydW5uaW5nIE1hY09TLlxuICAgICAqXG4gICAgICogICogJ21ldGEnIHJlcHJlc2VudHMgJ2N0cmwnIG9uIFdpbmRvd3MgYW5kIExpbnV4LCBhbmQgJ2NvbW1hbmQnIG9uIE9TWC4gVXNlIHRoaXMgd2hlbiBjcmVhdGluZ1xuICAgICAqICAgIGtleWJvYXJkIHNob3J0Y3V0cyBpbiB3ZWIgYXBwcy5cbiAgICAgKlxuICAgICAqICBAY2xhc3MgVVNMb2NhbGVcbiAgICAgKiAgQHN0YXRpY1xuICAgICAqL1xuICAgIHZhciBVU0xvY2FsZSA9XG4gICAgICAgIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FuY2VsIGtleVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IGNhbmNlbFxuICAgICAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFwiY2FuY2VsXCI6MyxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBiYWNrc3BhY2Uga2V5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gYmFja3NwYWNlXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCJiYWNrc3BhY2VcIjo4LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHRhYiBrZXlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSB0YWJcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcInRhYlwiOjksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogZW50ZXIga2V5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gZW50ZXJcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcImVudGVyXCI6MTMsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogc2hpZnQga2V5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gc2hpZnRcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcInNoaWZ0XCI6MTYsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogY3RybCBrZXlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBjdHJsXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCJjdHJsXCI6MTcsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYWx0IGtleVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IGFsdFxuICAgICAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFwiYWx0XCI6MTgsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGF1c2Ugb3IgYnJlYWsga2V5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gcGF1c2UvYnJlYWtcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcInBhdXNlL2JyZWFrXCI6IG9zID09IFwiTWFjXCIgJiYgYnJvd3NlciAhPSBcIkZpcmVmb3hcIiA/IDEyNiA6IDE5LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENBUFMgbG9jayBrZXlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBjYXBzX2xvY2tcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcImNhcHNfbG9ja1wiOjIwLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVzY2FwZSBrZXlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBlc2NcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcImVzY1wiOjI3LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNwYWNlYmFyIGtleVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IHNwYWNlYmFyXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCJzcGFjZWJhclwiOjMyLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFBhZ2UgVXAga2V5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gcGFnZXVwXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCJwYWdldXBcIjozMyxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQYWdlIERvd24ga2V5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gcGFnZWRvd25cbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcInBhZ2Vkb3duXCI6MzQsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogZW5kIGtleVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IGVuZFxuICAgICAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFwiZW5kXCI6MzUsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogaG9tZSBrZXlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBob21lXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCJob21lXCI6MzYsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVG9nZ2xlIGxlZnQga2V5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gYXJyb3dfbGVmdFxuICAgICAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFwiYXJyb3dfbGVmdFwiOjM3LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRvZ2dsZSB1cCBrZXlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBhcnJvd191cFxuICAgICAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFwiYXJyb3dfdXBcIjozOCxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUb2dnbGUgcmlnaHQga2V5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gYXJyb3dfcmlnaHRcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcImFycm93X3JpZ2h0XCI6MzksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVG9nZ2xlIGRvd24ga2V5XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gYXJyb3dfZG93blxuICAgICAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFwiYXJyb3dfZG93blwiOjQwLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByaW50IHNjcmVlbiBrZXlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBwcmludF9zY3JlZW5cbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvL05vdGU6IG9uIHdpbmRvd3MsIG9ubHkga2V5VXAgaXMgZmlyZWQgZm9yIHByaW50X3NjcmVlblxuICAgICAgICAgICAgXCJwcmludF9zY3JlZW5cIjogb3MgPT0gXCJMaW51eFwiID8gNDIgOiAob3MgPT0gXCJNYWNcIiAmJiBicm93c2VyICE9IFwiRmlyZWZveFwiID8gMTI0IDogNDQpLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGluc2VydCBrZXlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBpbnNlcnRcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcImluc2VydFwiOjQ1LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGRlbGV0ZSBrZXlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBkZWxldGVcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcImRlbGV0ZVwiOjQ2LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNjcm9sbCBsb2NrIGtleVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IHNjcm9sbF9sb2NrXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCJzY3JvbGxfbG9ja1wiOiBvcyA9PSBcIk1hY1wiICYmIGJyb3dzZXIgIT0gXCJGaXJlZm94XCIgPyAxMjUgOiAxNDUsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIE9TIGJ1dHRvbiwgZWl0aGVyIFdpbmRvd3Mgb3IgQXBwbGUgQnV0dG9uXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gT1NcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvL2NvbW1hbmQvd2luZG93cyAtIG1heSBiZSBkaWZmZXJlbnQgZm9yIGxlZnQvcmlnaHQsIGRlcGVuZGluZyBvbiBicm93c2VyXG4gICAgICAgICAgICAvL2Fsc28gbWlnaHQgYmUgOTMsIGRlcGVuZGluZyBvbiBPU1xuICAgICAgICAgICAgXCJPU1wiOiBicm93c2VyID09IFwiRmlyZWZveFwiID9cbiAgICAgICAgICAgICAgICAvL0ZpcmVmb3ggdXNlcyB0aGUgc2FtZSBrZXljb2RlIGZvciBsZWZ0ICYgcmlnaHRcbiAgICAgICAgICAgICAgICAob3MgPT0gXCJNYWNcIiA/IDIyNCA6IDkxKSA6XG4gICAgICAgICAgICAgICAgLy9vdGhlciBicm93c2VycyB1c2UgZGlmZmVyZW50IGNvZGVzIGZvciBsZWZ0L3JpZ2h0LCBhbHRob3VnaCB3ZWJraXQgdXNlcyBhIGRpZmZlcmVudFxuICAgICAgICAgICAgICAgIC8vY29kZSBvbiBPU1ggdGhhbiBXaW5kb3dzL0xpbnV4XG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICA5MSxcbiAgICAgICAgICAgICAgICAgICAgb3MgPT0gXCJNYWNcIiA/IDkzIDogOTJcbiAgICAgICAgICAgICAgICBdLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIG9uIHdpbmRvd3Mga2V5Ym9hcmQsIGxvY2F0ZWQgd2hlcmUgdGhlIHJpZ2h0ICd3aW5kb3dzJyBrZXkgbWlnaHQgYmVcbiAgICAgICAgICAgICAqIG5vdCBmaXJlZCBieSBTYWZhcmkvQ2hyb21lIG9uIE9TWCAoYnV0IGlzIG9uIEZGPylcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBjb250ZXh0X21lbnVcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcImNvbnRleHRfbWVudVwiOiBvcyA9PSBcIk1hY1wiID8gMCA6IDkzLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNlbWktY29sb25cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSA7XG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCI7XCI6MTg2LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVxdWFsc1xuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9ID1cbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIj1cIjoxODcsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29tbWFcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSAsXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCIsXCI6MTg4LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEh5cGhlblxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IC1cbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIi1cIjoxODksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGVyaW9kXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gLlxuICAgICAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFwiLlwiOjE5MCxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBCYWNrc2xhc2hcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSAvXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCIvXCI6MTkxLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRpY2sgbWFya1xuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IGBcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcImBcIjoxOTIsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRm9yd2FyZCBzbGFzaFxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IFxcXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCJcXFxcXCI6MjIwLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExlZnQgYnJhY2tldFxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IFtcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIltcIjoyMTksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmlnaHQgYnJhY2tldFxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IF1cbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIl1cIjoyMjEsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW4gYXBvc3Ryb3BoZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9ICdcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIidcIjoyMjIsXG5cbiAgICAgICAgICAgIC8vbnVtYmVyIHBhZCBrZXlzXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE51bWJlciBwYWQgdGltZXNcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBudW1fKlxuICAgICAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFwibnVtXypcIjoxMDYsXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTnVtYmVyIHBhZCBwbHVzXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gbnVtXytcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIm51bV8rXCI6MTA3LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE51bWJlciBwYWQgZW50ZXJcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7aW50fSBudW1fZW50ZXJcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIm51bV9lbnRlclwiOjEwOCxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOdW1iZXIgcGFkIG1pbnVzXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gbnVtXy1cbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIm51bV8tXCI6MTA5LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE51bWJlciBwYWQgZGVjaW1hbFxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IG51bV8uXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCJudW1fLlwiOjExMCxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOdW1iZXIgcGFkIGRpdmlkZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtpbnR9IG51bV8vXG4gICAgICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgXCJudW1fL1wiOjExMSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOdW1iZXIgcGFkIGxvY2ssICdudW0gbG9jaycgaXMgJ2NsZWFyJyBvbiBNYWMga2V5Ym9hcmRzXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gbnVtX2xvY2tcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIm51bV9sb2NrXCI6IG9zID09IFwiTWFjXCIgPyAxMiA6IDE0NCxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOdW1iZXIgcGFkIGNsZWFyXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gY2xlYXJcbiAgICAgICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcImNsZWFyXCI6IG9zID09IFwiTWFjXCIgPyAxMiA6IDE0NFxuICAgICAgICB9O1xuICAgIHZhciBpO1xuICAgIC8qKlxuICAgICAqIEFscGhhIGxldHRlciBBXG4gICAgICogQHByb3BlcnR5IHtpbnR9IEFcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBbHBoYSBsZXR0ZXIgQlxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBCXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQWxwaGEgbGV0dGVyIENcbiAgICAgKiBAcHJvcGVydHkge2ludH0gQ1xuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEFscGhhIGxldHRlciBEXG4gICAgICogQHByb3BlcnR5IHtpbnR9IERcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBbHBoYSBsZXR0ZXIgRVxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBFXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQWxwaGEgbGV0dGVyIEZcbiAgICAgKiBAcHJvcGVydHkge2ludH0gRlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEFscGhhIGxldHRlciBHXG4gICAgICogQHByb3BlcnR5IHtpbnR9IEdcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBbHBoYSBsZXR0ZXIgSFxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBIXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQWxwaGEgbGV0dGVyIElcbiAgICAgKiBAcHJvcGVydHkge2ludH0gSVxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEFscGhhIGxldHRlciBKXG4gICAgICogQHByb3BlcnR5IHtpbnR9IEpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBbHBoYSBsZXR0ZXIgS1xuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBLXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQWxwaGEgbGV0dGVyIExcbiAgICAgKiBAcHJvcGVydHkge2ludH0gTFxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEFscGhhIGxldHRlciBNXG4gICAgICogQHByb3BlcnR5IHtpbnR9IE1cbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBbHBoYSBsZXR0ZXIgTlxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBOXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQWxwaGEgbGV0dGVyIE9cbiAgICAgKiBAcHJvcGVydHkge2ludH0gT1xuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEFscGhhIGxldHRlciBQXG4gICAgICogQHByb3BlcnR5IHtpbnR9IFBcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBbHBoYSBsZXR0ZXIgUVxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBRXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQWxwaGEgbGV0dGVyIFJcbiAgICAgKiBAcHJvcGVydHkge2ludH0gUlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEFscGhhIGxldHRlciBTXG4gICAgICogQHByb3BlcnR5IHtpbnR9IFNcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBbHBoYSBsZXR0ZXIgVFxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBUXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQWxwaGEgbGV0dGVyIFVcbiAgICAgKiBAcHJvcGVydHkge2ludH0gVVxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEFscGhhIGxldHRlciBWXG4gICAgICogQHByb3BlcnR5IHtpbnR9IFZcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBbHBoYSBsZXR0ZXIgV1xuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBXXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQWxwaGEgbGV0dGVyIFhcbiAgICAgKiBAcHJvcGVydHkge2ludH0gWFxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEFscGhhIGxldHRlciBZXG4gICAgICogQHByb3BlcnR5IHtpbnR9IFlcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBbHBoYSBsZXR0ZXIgWlxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBaXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLy9BLVpcbiAgICBmb3IoaSA9IDY1OyBpIDw9IDkwOyArK2kpXG4gICAge1xuICAgICAgICAvL3VzZSB0aGUgY2FwaXRhbCBsZXR0ZXIgYXMgdGhlIHZhbHVlIGZvciB0aGUga2V5Q29kZVxuICAgICAgICBVU0xvY2FsZVtTdHJpbmcuZnJvbUNoYXJDb2RlKGkgKyAzMildID0gaTtcbiAgICB9XG4gICAgLy8wLTlcbiAgICBmb3IoaSA9IDQ4OyBpIDw9IDU3OyArK2kpXG4gICAge1xuICAgICAgICBVU0xvY2FsZVtTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG4gICAgfVxuICAgIC8vMC05LCBudW1iZXIgcGFkOiBudW1fMC1udW1fOVxuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCAxXG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV8xXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCAyXG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV8yXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCAzXG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV8zXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCA0XG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV80XG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCA1XG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV81XG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCA2XG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV82XG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCA3XG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV83XG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCA4XG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV84XG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCA5XG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV85XG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogTnVtYmVyIHBhZCAwXG4gICAgICogQHByb3BlcnR5IHtpbnR9IG51bV8wXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgZm9yKGkgPSA5NjsgaSA8PSAxMDU7ICsraSlcbiAgICB7XG4gICAgICAgIFVTTG9jYWxlW1wibnVtX1wiICsgKGktOTYpXSA9IGk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGMVxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGMVxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGMlxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGMlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGM1xuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGM1xuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGNFxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGNFxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGNVxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGNVxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGNlxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGNlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGN1xuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGN1xuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGOFxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGOFxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGOVxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGOVxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGtleSBGMTBcbiAgICAgKiBAcHJvcGVydHkge2ludH0gRjEwXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24ga2V5IEYxMVxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBGMTFcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiBrZXkgRjEyXG4gICAgICogQHByb3BlcnR5IHtpbnR9IEYxMlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIGZvcihpID0gMTEyOyBpIDw9IDEyMzsgKytpKVxuICAgIHtcbiAgICAgICAgVVNMb2NhbGVbXCJGXCIgKyAoaSAtIDExMSldID0gaTtcbiAgICB9XG5cbiAgICAvL09TIHNwZWNmaWMgJ21ldGEnIGtleSAtIHBpY2sgY3RybCBvciBjb21tYW5kXG4gICAgaWYob3MgPT0gXCJNYWNcIilcbiAgICB7XG4gICAgICAgIC8vYWxzbyBjcmVhdGUgJ2NvbW1hbmQnIGZvciBwZW9wbGUgdGhhdCBvbmx5IHdhbnQgY29tbWFuZFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbW1hbmQgKE1hYyBPU1gpIG9yIGN0cmwgKFdpbmRvd3MpIGtleVxuICAgICAgICAgKiBAcHJvcGVydHkge2ludH0gbWV0YVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICovXG4gICAgICAgIFVTTG9jYWxlLm1ldGEgPSBVU0xvY2FsZS5jb21tYW5kID0gVVNMb2NhbGUuT1M7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIFVTTG9jYWxlLm1ldGEgPSBVU0xvY2FsZS5jdHJsO1xuICAgICAgICBVU0xvY2FsZS5jb21tYW5kID0gMDtcbiAgICB9XG5cbiAgICAvLyBBc3NpZ24gdG8gbmFtZXNwYWNlXG4gICAgbmFtZXNwYWNlKCdmcmFtZXdvcmsnKS5VU0xvY2FsZSA9IFVTTG9jYWxlO1xuXG59KCkpO1xuXG4oZnVuY3Rpb24oKVxue1xuICAgIHZhciBVU0xvY2FsZSA9IGluY2x1ZGUoJ2ZyYW1ld29yay5VU0xvY2FsZScpO1xuXG4gICAgdmFyIERPV04gPSAxO1xuICAgIHZhciBSRVBFQVQgPSAyO1xuICAgIHZhciBVUCA9IDM7XG5cbiAgICAvKipcbiAgICAgKiAgQSBjbGFzcyBmb3IgZWFzaWVyIGtleWJvYXJkIGNvbnRyb2xzLCBmcm9tIHNpbXBsZSBrZXkgZXZlbnRzIHRvIGNvbXBsZXgga2V5IGNvbWJpbmF0aW9ucy5cbiAgICAgKlxuICAgICAqICBAY2xhc3MgS2V5Ym9hcmRcbiAgICAgKiAgQGNvbnN0cnVjdG9yXG4gICAgICogIEBwYXJhbSB7RE9NRWxlbWVudH0gdGFyZ2V0IFRoZSBET00gZWxlbWVudCB0byBsaXN0ZW4gdG8ga2V5IGV2ZW50cyBvbi5cbiAgICAgKiAgQHBhcmFtIHtPYmplY3R9IGxvY2FsZSBUaGUga2V5Ym9hcmQgbG9jYWxlLCBsaWtlIHNwcmluZ3JvbGwuVVNMb2NhbGUsIHdoaWNoIGRlZmluZXMga2V5cyB0b1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIGtlZXAgdHJhY2sgb2YuXG4gICAgICovXG4gICAgdmFyIEtleWJvYXJkID0gZnVuY3Rpb24odGFyZ2V0KVxuICAgIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IFVTTG9jYWxlO1xuXG4gICAgICAgIC8vYmluZCBjYWxsYmFja3MvbGlzdGVuZXJzXG4gICAgICAgIHRoaXMuX29uRm9jdXNMb3N0ID0gdGhpcy5fb25Gb2N1c0xvc3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fb25QYXVzZWQgPSB0aGlzLl9vblBhdXNlZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblJlc3VtZWQgPSB0aGlzLl9vblJlc3VtZWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlID0gdGhpcy5fdXBkYXRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2tleURvd24gPSB0aGlzLl9rZXlEb3duLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2tleVVwID0gdGhpcy5fa2V5VXAuYmluZCh0aGlzKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIERPTSBlbGVtZW50IHRoYXQgdGhlIGtleSBldmVudCBsaXN0ZW5lcnMgYXJlIGF0dGFjaGVkIHRvLlxuICAgICAgICAgKiBAcHJvcGVydHkge0RPTUVsZW1lbnR9IHRhcmdldFxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignb25ibHVyJywgdGhpcy5fb25Gb2N1c0xvc3QpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGwga2V5cyB0aGF0IGFyZSBsaXN0ZW5lZCB0bywgYXJyYW5nZWQgYnkga2V5IGNvZGUuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfa2V5c0J5Q29kZVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIF9rZXlzQnlDb2RlID0gdGhpcy5fa2V5c0J5Q29kZSA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIGtleXMgdGhhdCBhcmUgbGlzdGVuZWQgdG8sIGFycmFuZ2VkIGJ5IGtleSBuYW1lLlxuICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gX2tleXNCeU5hbWVcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHZhciBfa2V5c0J5TmFtZSA9IHRoaXMuX2tleXNCeU5hbWUgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCBrZXkgY29tYmluYXRpb25zIHRoYXQgaGF2ZSBiZWVuIHJlZ2lzdGVyZWRcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheX0gX2FjdGl2ZUNvbWJvc1xuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYWN0aXZlQ29tYm9zID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLZXlzIHRoYXQgaGF2ZSBiZWVuIHVwZGF0ZWQgc2luY2UgdGhlIG1vc3QgcmVjZW50IGZyYW1lIHVwZGF0ZS4gVGhpcyBhcnJheSBnZXRzIHdpcGVkXG4gICAgICAgICAqIGVhY2ggX3VwZGF0ZSBjYWxsLlxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5fSBfdXBkYXRlZEtleXNcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3VwZGF0ZWRLZXlzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjYWxsYmFjayB1c2VkIHdoZW4ga2V5IGRldGVjdGlvbiBoYXMgZW5kZWQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRldGVjdEtleUNhbGxiYWNrXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRldGVjdEtleUNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBrZXkgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBjYW5jZWwga2V5IGRldGVjdGlvbi5cbiAgICAgICAgICogQHByb3BlcnR5IHtLZXl9IGRldGVjdENhbmNlbEtleVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZXRlY3RDYW5jZWxLZXkgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBrZXkgZGV0ZWN0aW9uIHNob3VsZCBhbGxvdyBrZXkgbW9kaWZpZXJzLCBpbnN0ZWFkIG9mIGp1c3QgZGV0ZWN0aW5nIHRob3NlIGtleXNcbiAgICAgICAgICogYnkgdGhlbXNlbHZlc1xuICAgICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGRldGVjdE1vZGlmaWVyc1xuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZXRlY3RNb2RpZmllcnMgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxpc3Qgb2Yga2V5IG5hbWVzIGZvciBtb2RpZmllciBrZXlzIC0gJ2N0cmwnLCAnYWx0JywgJ3NoaWZ0JywgYW5kICdjb21tYW5kJy5cbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheX0gbW9kaWZpZXJzXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vZGlmaWVycyA9IFtcImN0cmxcIiwgXCJhbHRcIiwgXCJzaGlmdFwiLCBcImNvbW1hbmRcIl07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsaXN0IG9mIGtleSBuYW1lcyBmb3Igc2Nyb2xsaW5nIGNvbnRyb2wga2V5c1xuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5fSBzY3JvbGxLZXlzXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjcm9sbEtleXMgPSBbJ2Fycm93X2Rvd24nLCAnYXJyb3dfdXAnLCAnYXJyb3dfbGVmdCcsICdhcnJvd19yaWdodCcsICdzcGFjZWJhciddO1xuXG4gICAgICAgIGZvcih2YXIga2V5TmFtZSBpbiBsb2NhbGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBjb2RlcyA9IGxvY2FsZVtrZXlOYW1lXTtcbiAgICAgICAgICAgIGlmKCFBcnJheS5pc0FycmF5KGNvZGVzKSlcbiAgICAgICAgICAgICAgICBjb2RlcyA9IFtjb2Rlc107XG4gICAgICAgICAgICB2YXIgaSwga2V5ID0gbnVsbDtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGNvZGVzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmKF9rZXlzQnlDb2RlW2NvZGVzW2ldXSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IF9rZXlzQnlDb2RlW2NvZGVzW2ldXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIWtleSlcbiAgICAgICAgICAgICAgICBrZXkgPSBuZXcgS2V5KCk7XG4gICAgICAgICAgICBrZXkuYWRkTmFtZShrZXlOYW1lKTtcbiAgICAgICAgICAgIGtleS5hZGRDb2RlKGNvZGVzKTtcbiAgICAgICAgICAgIF9rZXlzQnlOYW1lW2tleU5hbWVdID0ga2V5O1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgY29kZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX2tleXNCeUNvZGVbY29kZXNbaV1dID0ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICBhcHAub25QYXVzZWQodGhpcy5fb25QYXVzZWQpO1xuICAgICAgICBhcHAub25SZXN1bWVkKHRoaXMuX29uUmVzdW1lZCk7XG4gICAgfTtcblxuICAgIC8vIFJlZmVyZW5jZSB0byB0aGUgcHJvdG90eXBlXG4gICAgdmFyIHAgPSBLZXlib2FyZC5wcm90b3R5cGU7XG5cbiAgICAvLz09PT09PT1cbiAgICAvL2V2ZW50IHR5cGUgZnVuY3Rpb25zXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgZm9yIGtleWRvd24gZXZlbnRzIG9uIGEgc3BlY2lmaWMga2V5LCB3aGVuIGEga2V5IGlzIGZpcnN0IHByZXNzZWQgZG93bi4gVGhlXG4gICAgICogY2FsbGJhY2sgd2lsbCBiZSBwYXNzZWQgdGhlIGtleSBuYW1lLCBpbiBjYXNlIHRoZSBzYW1lIGNhbGxiYWNrIGlzIHVzZWQgZm9yIG11bHRpcGxlIGtleXMuXG4gICAgICogQG1ldGhvZCBhZGRLZXlEb3duXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGtleU5hbWUgVGhlIG5hbWUocykgb2YgdGhlIGtleSwgZnJvbSB0aGUgbG9jYWxlLCB0byBsaXN0ZW4gZm9yLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGtleSBpcyBmaXJzdCBwcmVzc2VkLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3ByZXZlbnREZWZhdWx0PWZhbHNlXSBJZiB0aGUga2V5IHNob3VsZCBoYXZlIHRoZSBkZWZhdWx0IGFjdGlvbiBwcmV2ZW50ZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgdGhpcyBsaXN0ZW5lciBpcyBhdHRhY2hlZC5cbiAgICAgKi9cbiAgICBwLmFkZEtleURvd24gPSBmdW5jdGlvbihrZXlOYW1lLCBjYWxsYmFjaywgcHJldmVudERlZmF1bHQpXG4gICAge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXlOYW1lKSlcbiAgICAgICAge1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGtleU5hbWUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRLZXlEb3duKGtleU5hbWVbaV0sIGNhbGxiYWNrLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5c0J5TmFtZVtrZXlOYW1lXTtcbiAgICAgICAgaWYoIWtleSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5LmFkZExpc3RlbmVyKGNhbGxiYWNrLCBET1dOLCBrZXlOYW1lLCAhIXByZXZlbnREZWZhdWx0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGxpc3RlbmVyIGZvciBrZXlkb3duIGV2ZW50cyBvbiBhIHNwZWNpZmljIGtleS5cbiAgICAgKiBAbWV0aG9kIHJlbW92ZUtleURvd25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0ga2V5TmFtZSBUaGUgbmFtZShzKSBvZiB0aGUga2V5LCBmcm9tIHRoZSBsb2NhbGUsIHRvIGxpc3RlbiBmb3IuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgbGlzdGVuZXIgbGlzdC5cbiAgICAgKi9cbiAgICBwLnJlbW92ZUtleURvd24gPSBmdW5jdGlvbihrZXlOYW1lLCBjYWxsYmFjaywgcHJldmVudERlZmF1bHQpXG4gICAge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXlOYW1lKSlcbiAgICAgICAge1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGtleU5hbWUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVLZXlEb3duKGtleU5hbWVbaV0sIGNhbGxiYWNrLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5c0J5TmFtZVtrZXlOYW1lXTtcbiAgICAgICAgaWYoa2V5KVxuICAgICAgICAgICAga2V5LnJlbW92ZUxpc3RlbmVyKGNhbGxiYWNrLCBET1dOKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGxpc3RlbmVyIGZvciByZXBlYXRlZCBrZXlkb3duIGV2ZW50cyBvbiBhIHNwZWNpZmljIGtleS4gVGhlIGNhbGxiYWNrIHdpbGwgYmUgcGFzc2VkXG4gICAgICogdGhlIGtleSBuYW1lLCBpbiBjYXNlIHRoZSBzYW1lIGNhbGxiYWNrIGlzIHVzZWQgZm9yIG11bHRpcGxlIGtleXMuXG4gICAgICogQG1ldGhvZCBhZGRLZXlSZXBlYXRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0ga2V5TmFtZSBUaGUgbmFtZShzKSBvZiB0aGUga2V5LCBmcm9tIHRoZSBsb2NhbGUsIHRvIGxpc3RlbiBmb3IuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUga2V5IGlzIGZpcnN0IHByZXNzZWQuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbcHJldmVudERlZmF1bHQ9ZmFsc2VdIElmIHRoZSBrZXkgc2hvdWxkIGhhdmUgdGhlIGRlZmF1bHQgYWN0aW9uIHByZXZlbnRlZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSB0aGlzIGxpc3RlbmVyIGlzIGF0dGFjaGVkLlxuICAgICAqL1xuICAgIHAuYWRkS2V5UmVwZWF0ID0gZnVuY3Rpb24oa2V5TmFtZSwgY2FsbGJhY2ssIHByZXZlbnREZWZhdWx0KVxuICAgIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5TmFtZSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBrZXlOYW1lLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHRoaXMuYWRkS2V5UmVwZWF0KGtleU5hbWVbaV0sIGNhbGxiYWNrLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5c0J5TmFtZVtrZXlOYW1lXTtcbiAgICAgICAgaWYoIWtleSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5LmFkZExpc3RlbmVyKGNhbGxiYWNrLCBSRVBFQVQsIGtleU5hbWUsICEhcHJldmVudERlZmF1bHQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIgZm9yIHJlcGVhdGVkIGtleWRvd24gZXZlbnRzIG9uIGEgc3BlY2lmaWMga2V5LlxuICAgICAqIEBtZXRob2QgcmVtb3ZlS2V5UmVwZWF0XG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGtleU5hbWUgVGhlIG5hbWUocykgb2YgdGhlIGtleSwgZnJvbSB0aGUgbG9jYWxlLCB0byBsaXN0ZW4gZm9yLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBiZSByZW1vdmVkIGZyb20gdGhlIGxpc3RlbmVyIGxpc3QuXG4gICAgICovXG4gICAgcC5yZW1vdmVLZXlSZXBlYXQgPSBmdW5jdGlvbihrZXlOYW1lLCBjYWxsYmFjaylcbiAgICB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGtleU5hbWUpKVxuICAgICAgICB7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwga2V5TmFtZS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUtleVJlcGVhdChrZXlOYW1lW2ldLCBjYWxsYmFjaywgcHJldmVudERlZmF1bHQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleXNCeU5hbWVba2V5TmFtZV07XG4gICAgICAgIGlmKGtleSlcbiAgICAgICAgICAgIGtleS5yZW1vdmVMaXN0ZW5lcihjYWxsYmFjaywgUkVQRUFUKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGxpc3RlbmVyIGZvciBrZXl1cCBldmVudHMgb24gYSBzcGVjaWZpYyBrZXkuIFRoZSBjYWxsYmFjayB3aWxsIGJlIHBhc3NlZCB0aGUga2V5XG4gICAgICogbmFtZSwgaW4gY2FzZSB0aGUgc2FtZSBjYWxsYmFjayBpcyB1c2VkIGZvciBtdWx0aXBsZSBrZXlzLlxuICAgICAqIEBtZXRob2QgYWRkS2V5VXBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0ga2V5TmFtZSBUaGUgbmFtZShzKSBvZiB0aGUga2V5LCBmcm9tIHRoZSBsb2NhbGUsIHRvIGxpc3RlbiBmb3IuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUga2V5IGlzIHJlbGVhc2VkLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3ByZXZlbnREZWZhdWx0PWZhbHNlXSBJZiB0aGUga2V5IHNob3VsZCBoYXZlIHRoZSBkZWZhdWx0IGFjdGlvbiBwcmV2ZW50ZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgdGhpcyBsaXN0ZW5lciBpcyBhdHRhY2hlZC5cbiAgICAgKi9cbiAgICBwLmFkZEtleVVwID0gZnVuY3Rpb24oa2V5TmFtZSwgY2FsbGJhY2ssIHByZXZlbnREZWZhdWx0KVxuICAgIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5TmFtZSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBrZXlOYW1lLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHRoaXMuYWRkS2V5VXAoa2V5TmFtZVtpXSwgY2FsbGJhY2ssIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlzQnlOYW1lW2tleU5hbWVdO1xuICAgICAgICBpZigha2V5KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBrZXkuYWRkTGlzdGVuZXIoY2FsbGJhY2ssIFVQLCBrZXlOYW1lLCAhIXByZXZlbnREZWZhdWx0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGxpc3RlbmVyIGZvciBrZXl1cCBldmVudHMgb24gYSBzcGVjaWZpYyBrZXkuXG4gICAgICogQG1ldGhvZCByZW1vdmVLZXlVcFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBrZXlOYW1lIFRoZSBuYW1lKHMpIG9mIHRoZSBrZXksIGZyb20gdGhlIGxvY2FsZSwgdG8gbGlzdGVuIGZvci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0ZW5lciBsaXN0LlxuICAgICAqL1xuICAgIHAucmVtb3ZlS2V5VXAgPSBmdW5jdGlvbihrZXlOYW1lLCBjYWxsYmFjaylcbiAgICB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGtleU5hbWUpKVxuICAgICAgICB7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwga2V5TmFtZS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUtleVVwKGtleU5hbWVbaV0sIGNhbGxiYWNrLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5c0J5TmFtZVtrZXlOYW1lXTtcbiAgICAgICAgaWYoa2V5KVxuICAgICAgICAgICAga2V5LnJlbW92ZUxpc3RlbmVyKGNhbGxiYWNrLCBVUCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgaWYgdGhlIGRlZmF1bHQgYnJvd3NlciBhY3Rpb24gc2hvdWxkIGJlIHByZXZlbnRlZCBvbiBhIHNwZWNpZmljIGtleS4gVGhpcyBpcyBnb29kXG4gICAgICogZm9yIGtleXMgdGhhdCBhcmUgb25seSBjaGVja2VkIHdpdGgganVzdFByZXNzZWQoKSwgaXNEb3duKCksIGFuZCBqdXN0UmVsZWFzZWQoKS5cbiAgICAgKiBAbWV0aG9kIHNldFByZXZlbnREZWZhdWx0T25LZXlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0ga2V5TmFtZSBUaGUgbmFtZShzKSBvZiB0aGUga2V5LCBmcm9tIHRoZSBsb2NhbGUsIHRvIGxpc3RlbiBmb3IuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBwcmV2ZW50RGVmYXVsdCBJZiB0aGUga2V5IHNob3VsZCBoYXZlIHRoZSBkZWZhdWx0IGFjdGlvbiBwcmV2ZW50ZWQuXG4gICAgICovXG4gICAgcC5zZXRQcmV2ZW50RGVmYXVsdE9uS2V5ID0gZnVuY3Rpb24oa2V5TmFtZSwgcHJldmVudERlZmF1bHQpXG4gICAge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXlOYW1lKSlcbiAgICAgICAge1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGtleU5hbWUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQcmV2ZW50RGVmYXVsdE9uS2V5KGtleU5hbWVbaV0sIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlzQnlOYW1lW2tleU5hbWVdO1xuICAgICAgICBpZihrZXkpXG4gICAgICAgICAgICBrZXkuc2V0TWFudWFsUHJldmVudERlZmF1bHQocHJldmVudERlZmF1bHQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEga2V5IGNvbWJpbmF0aW9uLiBDb21iaW5hdGlvbiBzeW50YXggaXMga2V5IG5hbWVzIHNlcGFyYXRlZCBieSAnKycgZm9yIHNpbXVsdGFuZW91c1xuICAgICAqIGtleXMgYW5kICc+JyBmb3Igc2VxdWVudGlhbCBrZXlzLiBXaGl0ZXNwYWNlIGlzIHJlcXVpcmVkIGFyb3VuZCB0aGUgJysnIGFuZCAnPicgc2VwYXJhdG9ycy5cbiAgICAgKiBLZXlzIG11c3QgYmUgZnVsbHkgcmVsZWFzZWQgYmV0d2VlbiAnPicgc3RhZ2VzLlxuICAgICAqIEBtZXRob2QgYWRkQ29tYm9cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29tYm9TdHJpbmcgQSBzdHJpbmcgZGVmaW5pbmcgaG93IHRoZSBrZXkgY29tYmluYXRpb24gZnVuY3Rpb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjYWxsZWQgd2hlbiB0aGUgY29tYmluYXRpb24gc3VjY2Vzc2Z1bGx5IGZpcmVzLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3ByZXZlbnREZWZhdWx0PXRydWVdIElmIHRoZSBjb21ibyBzaG91bGQgaGF2ZSB0aGUgZGVmYXVsdCBhY3Rpb24gcHJldmVudGVkLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBhbnkgc3VjY2Vzc2Z1bCBzdGVwIG9mIGl0IHRoYXQgaXMgY29tcGxldGVkLlxuICAgICAqL1xuICAgIHAuYWRkQ29tYm8gPSBmdW5jdGlvbihjb21ib1N0cmluZywgY2FsbGJhY2ssIHByZXZlbnREZWZhdWx0KVxuICAgIHtcbiAgICAgICAgLy9wcmV2ZW50RGVmYXVsdCBkZWZhdWx0cyB0byB0cnVlIGhlcmUsIHRvIGNhbmNlbCBzdHVmZiBsaWtlIGN0cmwrc1xuICAgICAgICBpZihwcmV2ZW50RGVmYXVsdCAhPT0gZmFsc2UpXG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG5cbiAgICAgICAgdmFyIGNvbWJvLFxuICAgICAgICAgICAgX2FjdGl2ZUNvbWJvcyA9IHRoaXMuX2FjdGl2ZUNvbWJvcztcbiAgICAgICAgZm9yKHZhciBpID0gX2FjdGl2ZUNvbWJvcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYoX2FjdGl2ZUNvbWJvc1tpXS5uYW1lID09IGNvbWJvU3RyaW5nICYmXG4gICAgICAgICAgICAgICAgX2FjdGl2ZUNvbWJvc1tpXS5wcmV2ZW50RGVmYXVsdCA9PSBwcmV2ZW50RGVmYXVsdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21ibyA9IF9hY3RpdmVDb21ib3NbaV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoIWNvbWJvKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb21ibyA9IG5ldyBDb21ibyhjb21ib1N0cmluZywgcHJldmVudERlZmF1bHQsIHRoaXMuX2tleXNCeU5hbWUpO1xuICAgICAgICAgICAgX2FjdGl2ZUNvbWJvcy5wdXNoKGNvbWJvKTtcbiAgICAgICAgfVxuICAgICAgICBjb21iby5hZGRMaXN0ZW5lcihjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBsaXN0ZW5lciBmb3IgYSBrZXkgY29tYmluYXRpb24uIElmIG5vIGxpc3RlbmVycyByZW1haW4sIHRoYXQga2V5XG4gICAgICogY29tYmluYXRpb24gaXMgZGVzdHJveWVkLlxuICAgICAqIEBtZXRob2QgcmVtb3ZlS2V5VXBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29tYm9TdHJpbmcgVGhlIGNvbWJvU3RyaW5nIHVzZWQgdG8gY3JlYXRlIHRoZSBjb21iaW5hdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0ZW5lciBsaXN0LlxuICAgICAqL1xuICAgIHAucmVtb3ZlQ29tYm8gPSBmdW5jdGlvbihjb21ib1N0cmluZywgY2FsbGJhY2spXG4gICAge1xuICAgICAgICB2YXIgX2FjdGl2ZUNvbWJvcyA9IHRoaXMuX2FjdGl2ZUNvbWJvcztcbiAgICAgICAgZm9yKHZhciBpID0gX2FjdGl2ZUNvbWJvcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYoX2FjdGl2ZUNvbWJvc1tpXS5uYW1lID09IGNvbWJvU3RyaW5nKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmKF9hY3RpdmVDb21ib3NbaV0ucmVtb3ZlTGlzdGVuZXIoY2FsbGJhY2spKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoaSA9PSBfYWN0aXZlQ29tYm9zLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWN0aXZlQ29tYm9zLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWN0aXZlQ29tYm9zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQmVnaW5zIGxpc3RlbmluZyBmb3IgdGhlIG5leHQga2V5IHRvIGJlIHByZXNzZWQgKG9yIHJlcGVhdGVkKS4gVGhlIGNhbGxiYWNrIGlzIHBhc3NlZFxuICAgICAqIHRoZSBuYW1lIG9mIHRoYXQga2V5LCBzbyB0aGF0IGl0IGNhbiB0aGVuIGJlIHVzZWQgd2l0aCBvdGhlciBmdW5jdGlvbnMuIEFkZGl0aW9uYWxseSwgaWZcbiAgICAgKiB0aGUga2V5IHByZXNzZWQgZG9lcyBub3QgaGF2ZSBhIHJlY29nbml6ZWQga2V5Q29kZSwgdGhlbiBhbiBlbnRyeSBpcyBjcmVhdGVkIGZvciBpdCB3aXRoIHRoZVxuICAgICAqIG5hbWUgPGNvZGU+J2tleV8la2V5Q29kZSUnPC9jb2RlPi4gSWYgdGhlIGNhbmNlbCBrZXkgaXMgcHJlc3NlZCwgdGhlbiB0aGUgY2FsbGJhY2sgaXMgcGFzc2VkXG4gICAgICogPGNvZGU+bnVsbDwvY29kZT4uIElmIGFsbG93TW9kaWZpZXJzIGlzIHRydWUsIHRoZW4gdGhlIHJlc3VsdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhIGtleVxuICAgICAqIGNvbWJpbmF0aW9uIHRvIGJlIHVzZWQgd2l0aCBhZGRDb21ibygpLlxuICAgICAqIEBtZXRob2QgZGV0ZWN0TmV4dEtleVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBhIGtleSBpcyBwcmVzc2VkLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY2FuY2VsS2V5PVwiZXNjXCJdIFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gY2FuY2VsIHRoZSBsaXN0ZW5lci4gSWYgZXhwbGljdGx5XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCA8Y29kZT5udWxsPC9jb2RlPiwgdGhlbiB0aGUgXCJlc2NcIiBrZXkgY2FuIGJlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdGVkIGFuZCB0aGlzIGFjdGlvbiBjYW4gb25seSBiZSBjYW5jZWxsZWQgd2l0aFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wRGV0ZWN0aW5nKCkuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbYWxsb3dNb2RpZmllcnM9ZmFsc2VdIElmIGtleSBtb2RpZmllcnMgKGN0cmwsIGFsdCwgc2hpZnQsIGNvbW1hbmQpIHNob3VsZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBkZXRlY3RlZCBhcyBtb2RpZmljYXRpb25zIG9mIHRoZSBwcmVzc2VkIGtleVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIGFzIHRoZWlyIG93biBrZXlwcmVzc2VzLlxuICAgICAqL1xuICAgIHAuZGV0ZWN0TmV4dEtleSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBjYW5jZWxLZXksIGFsbG93TW9kaWZpZXJzKVxuICAgIHtcbiAgICAgICAgaWYoY2FuY2VsS2V5ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBjYW5jZWxLZXkgPSB0aGlzLl9rZXlzQnlOYW1lLmVzYztcbiAgICAgICAgZWxzZSBpZihjYW5jZWxLZXkpXG4gICAgICAgICAgICBjYW5jZWxLZXkgPSB0aGlzLl9rZXlzQnlOYW1lW2NhbmNlbEtleV07XG5cbiAgICAgICAgdGhpcy5kZXRlY3RLZXlDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB0aGlzLmRldGVjdENhbmNlbEtleSA9IGNhbmNlbEtleSB8fCBudWxsO1xuICAgICAgICB0aGlzLmRldGVjdE1vZGlmaWVycyA9ICEhYWxsb3dNb2RpZmllcnM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgYSBkZXRlY3ROZXh0S2V5KCkgYWN0aW9uLlxuICAgICAqIEBtZXRob2Qgc3RvcERldGVjdGluZ1xuICAgICAqL1xuICAgIHAuc3RvcERldGVjdGluZyA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICAgIHRoaXMuZGV0ZWN0S2V5Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLmRldGVjdENhbmNlbEtleSA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vPT09PT09PVxuICAgIC8vdXBkYXRlIGNoZWNrZXIgZnVuY3Rpb25zXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdG8gc2VlIGlmIGEga2V5IGhhcyBiZWd1biB0byBiZSBwcmVzc2VkIHNpbmNlIHRoZSBsYXN0IEFwcGxpY2F0aW9uICd1cGRhdGUnIGV2ZW50LlxuICAgICAqIEBtZXRob2QganVzdFByZXNzZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5TmFtZSBUaGUgbmFtZSBvZiB0aGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBrZXkgd2FzIGp1c3QgcHJlc3NlZCBvciBub3QuXG4gICAgICovXG4gICAgcC5qdXN0UHJlc3NlZCA9IGZ1bmN0aW9uKGtleU5hbWUpXG4gICAge1xuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5c0J5TmFtZVtrZXlOYW1lXTtcbiAgICAgICAgaWYoa2V5KVxuICAgICAgICAgICAgcmV0dXJuIGtleS5qdXN0RG93bjtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdG8gc2VlIGlmIGEga2V5IGlzIGJlaW5nIGhlbGQgZG93bi5cbiAgICAgKiBAbWV0aG9kIGlzRG93blxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlOYW1lIFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gSWYgdGhlIGtleSBpcyBkb3duIG9yIG5vdC5cbiAgICAgKi9cbiAgICBwLmlzRG93biA9IGZ1bmN0aW9uKGtleU5hbWUpXG4gICAge1xuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5c0J5TmFtZVtrZXlOYW1lXTtcbiAgICAgICAgaWYoa2V5KVxuICAgICAgICAgICAgcmV0dXJuIGtleS5pc0Rvd247XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRvIHNlZSBpZiBhIGtleSBoYXMgYmVlbiByZWxlYXNlZCBzaW5jZSB0aGUgbGFzdCBBcHBsaWNhdGlvbiAndXBkYXRlJyBldmVudC5cbiAgICAgKiBAbWV0aG9kIGp1c3RSZWxlYXNlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlOYW1lIFRoZSBuYW1lIG9mIHRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gSWYgdGhlIGtleSB3YXMganVzdCByZWxlYXNlZCBvciBub3QuXG4gICAgICovXG4gICAgcC5qdXN0UmVsZWFzZWQgPSBmdW5jdGlvbihrZXlOYW1lKVxuICAgIHtcbiAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleXNCeU5hbWVba2V5TmFtZV07XG4gICAgICAgIGlmKGtleSlcbiAgICAgICAgICAgIHJldHVybiBrZXkuanVzdFVwO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIElmIHRoZSBLZXlib2FyZCBzaG91bGQgYmUgaGFuZGxpbmcga2V5IGV2ZW50cyBvciBub3QuIFNldHRpbmcgdGhpcyB0byBmYWxzZSBpbW1lZGlhdGVseVxuICAgICAqIHJlc2V0cyB0aGUgc3RhdHVzIG9mIGFueSBrZXlzIHRoYXQgYXJlIGN1cnJlbnRseSBwcmVzc2VkLlxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBlbmFibGVkXG4gICAgICovXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiZW5hYmxlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9lbmFibGVkOyB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9lbmFibGVkID0gdmFsdWU7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gICAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2tleURvd24sIHRydWUpO1xuICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fa2V5VXAsIHRydWUpO1xuICAgICAgICAgICAgYXBwLm9mZlVwZGF0ZSh0aGlzLl91cGRhdGUpO1xuICAgICAgICAgICAgaWYodmFsdWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9rZXlEb3duLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9rZXlVcCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgLy91c2UgYSByZWFsbHkgbG93IHByaW9yaXR5IHRvIGNsZWFyIHRoZSBrZXkgc3RhdGVzIGFmdGVyIGV2ZXJ5dGhpbmcgZWxzZSBoYXMgaGFkXG4gICAgICAgICAgICAgICAgLy9hIGNoYW5jZSB0byBjaGVjayB0aGVtXG4gICAgICAgICAgICAgICAgYXBwLm9uVXBkYXRlKHRoaXMuX3VwZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcktleXMoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBzdGF0dXMgb2YgYWxsIGtleXMgdGhhdCBhcmUgcHJlc3NlZCwgcmVxdWlyaW5nIHRoZW0gdG8gYmUgcmVsZWFzZWQgYW5kIHByZXNzZWRcbiAgICAgKiBhZ2Fpbi5cbiAgICAgKiBAbWV0aG9kIGNsZWFyS2V5c1xuICAgICAqL1xuICAgIHAuY2xlYXJLZXlzID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgICAgdmFyIF9rZXlzQnlDb2RlID0gdGhpcy5fa2V5c0J5Q29kZTtcblxuICAgICAgICBpZighX2tleXNCeUNvZGUpIHJldHVybjtcblxuICAgICAgICBmb3IodmFyIGNvZGUgaW4gX2tleXNCeUNvZGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBfa2V5c0J5Q29kZVtjb2RlXTtcbiAgICAgICAgICAgIGtleS5pc0Rvd24gPSBrZXkuanVzdERvd24gPSBrZXkuanVzdFVwID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTGlzdGVuZXIgZm9yIHdoZW4gdGhlIHRhcmdldCBoYXMgbG9zdCBmb2N1cywgdG8gY2FsbCBjbGVhcktleXMoKS5cbiAgICAgKiBAbWV0aG9kIF9vbkZvY3VzTG9zdFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXYgVGhlIGV2ZW50IGZyb20gdGhlIERPTS5cbiAgICAgKi9cbiAgICBwLl9vbkZvY3VzTG9zdCA9IGZ1bmN0aW9uKGV2KVxuICAgIHtcbiAgICAgICAgdGhpcy5jbGVhcktleXMoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTGlzdGVuZXIgZm9yIEFwcGxpY2F0aW9uICdwYXVzZWQnIGV2ZW50cy4gRGlzYWJsZXMgdGhlIEtleWJvYXJkLlxuICAgICAqIEBtZXRob2QgX29uUGF1c2VkXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwLl9vblBhdXNlZCA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZW5lciBmb3IgQXBwbGljYXRpb24gJ3Jlc3VtZWQnIGV2ZW50cy4gRW5hYmxlcyB0aGUgS2V5Ym9hcmQgYW5kIGdpdmVzIGJyb3dzZXIgZm9jdXNcbiAgICAgKiB0byB0aGUgdGFyZ2V0LlxuICAgICAqIEBtZXRob2QgX29uUmVzdW1lZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcC5fb25SZXN1bWVkID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gICAgICAgIGlmKHRhcmdldCAmJiB0YXJnZXQuZm9jdXMpXG4gICAgICAgICAgICB0YXJnZXQuZm9jdXMoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTGlzdGVuZXIgZm9yIEFwcGxpY2F0aW9uICd1cGRhdGUnIGV2ZW50cy4gVGhpcyBpcyBjcmVhdGVkIHdpdGggYSBwcmlvcml0eSBvZiAtMTAwMCBzbyB0aGF0XG4gICAgICogaXQgY2FuIHJlc2V0IGp1c3RQcmVzc2VkKCkgYW5kIGp1c3RSZWxlYXNlZCgpIHN0YXRlcyBhZnRlciBvdGhlciBjb2RlIGhhcyBoYWQgYSBjaGFuY2UgdG9cbiAgICAgKiBjaGVjayB0aGVtLlxuICAgICAqIEBtZXRob2QgX3VwZGF0ZVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBlbGFwc2VkIE1pbGxpc2Vjb25kcyBlbGFwc2VkIHNpbmNlIHRoZSBwcmV2aW91cyB1cGRhdGUuXG4gICAgICovXG4gICAgcC5fdXBkYXRlID0gZnVuY3Rpb24oZWxhcHNlZClcbiAgICB7XG4gICAgICAgIHZhciBfdXBkYXRlZEtleXMgPSB0aGlzLl91cGRhdGVkS2V5cztcbiAgICAgICAgaWYoIV91cGRhdGVkS2V5cyB8fCAhX3VwZGF0ZWRLZXlzLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgICAgIGZvcih2YXIgaSA9IF91cGRhdGVkS2V5cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGtleSA9IF91cGRhdGVkS2V5c1tpXTtcbiAgICAgICAgICAgIGtleS5qdXN0RG93biA9IGtleS5qdXN0VXAgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBfdXBkYXRlZEtleXMubGVuZ3RoID0gMDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTGlzdGVuZXIgZm9yIGtleWRvd24gZXZlbnRzIG9uIHRoZSB0YXJnZXQuXG4gICAgICogQG1ldGhvZCBfa2V5RG93blxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtICB7S2V5Ym9hcmRFdmVudH0gZXYgVGhlIGtleWJvYXJkIGV2ZW50LlxuICAgICAqL1xuICAgIHAuX2tleURvd24gPSBmdW5jdGlvbihldilcbiAgICB7XG4gICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlzQnlDb2RlW2V2LmtleUNvZGVdO1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBpZih0aGlzLmRldGVjdEtleUNhbGxiYWNrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLmRldGVjdEtleUNhbGxiYWNrO1xuXG4gICAgICAgICAgICBpZihrZXkgJiYga2V5ID09IHRoaXMuZGV0ZWN0Q2FuY2VsS2V5KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuZGV0ZWN0S2V5Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGl0IHdhc24ndCBhIG1vZGlmaWVyIHdlIHNob3VsZCBoYW5kbGVcbiAgICAgICAgICAgICAgICB2YXIgd2FzTW9kaWZpZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gdGhpcy5tb2RpZmllcnM7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5kZXRlY3RNb2RpZmllcnMpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBtb2RpZmllcnMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGtleSA9PT0gdGhpcy5fa2V5c0J5TmFtZVttb2RpZmllcnNbaV1dKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhc01vZGlmaWVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL3NraXAgbW9kaWZpZXIga2V5cyB3aGVuIHRoZXkgYXJlIHVzZWQgYXMgbW9kaWZpZXJzXG4gICAgICAgICAgICAgICAgaWYoIXdhc01vZGlmaWVyKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRlY3RLZXlDYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIC8vYmVjYXVzZSB3ZSBhcmUgZGV0ZWN0aW5nIHRoZSBuZXh0IGtleSBwcmVzc2VkLCB3ZSBzaG91bGQgY3JlYXRlXG4gICAgICAgICAgICAgICAgICAgIC8vYSBuZXcga2V5IC0gdGhpcyBmZWF0dXJlIGlzIGxhcmdlbHkgZm9yIGNyZWF0aW5nIGtleWJpbmRpbmdzLCBhbmQgaXQncyBwcm9iYWJsZVxuICAgICAgICAgICAgICAgICAgICAvL3dlIGFyZW4ndCBleHBlY3RpbmcgYWxsIGtleWNvZGVzXG4gICAgICAgICAgICAgICAgICAgIGlmKCFrZXkpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IG5ldyBLZXkoZXYua2V5Q29kZSwgXCJrZXlfXCIgKyBldi5rZXlDb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXNCeUNvZGVbZXYua2V5Q29kZV0gPSBrZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzQnlOYW1lW2tleS5uYW1lXSA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgZGV0ZWN0ZWQgPSBrZXkucHJlZmVycmVkTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5kZXRlY3RNb2RpZmllcnMpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IG1vZGlmaWVycy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLl9rZXlzQnlOYW1lW21vZGlmaWVyc1tpXV0uaXNEb3duKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZWN0ZWQgPSBtb2RpZmllcnNbaV0gKyBcIiArIFwiICsgZGV0ZWN0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRldGVjdGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5KVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmKGtleS5pc0Rvd24pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5LnRyaWdnZXIoUkVQRUFUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXkuaXNEb3duID0ga2V5Lmp1c3REb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLl91cGRhdGVkS2V5cy5pbmRleE9mKGtleSkgPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICBrZXkudHJpZ2dlcihET1dOKTtcblxuICAgICAgICAgICAgICAgIC8vaGFuZGxlIGNvbWJvc1xuICAgICAgICAgICAgICAgIGZvcihpID0gdGhpcy5fYWN0aXZlQ29tYm9zLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5fYWN0aXZlQ29tYm9zW2ldLnRlc3RLZXlEb3duKGV2LmtleUNvZGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGtleS5zaG91bGRQcmV2ZW50RGVmYXVsdCB8fCBwcmV2ZW50RGVmYXVsdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIExpc3RlbmVyIGZvciBrZXl1cCBldmVudHMgb24gdGhlIHRhcmdldC5cbiAgICAgKiBAbWV0aG9kIF9rZXlVcFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtICB7S2V5Ym9hcmRFdmVudH0gZXYgVGhlIGtleWJvYXJkIGV2ZW50LlxuICAgICAqL1xuICAgIHAuX2tleVVwID0gZnVuY3Rpb24oZXYpXG4gICAge1xuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5c0J5Q29kZVtldi5rZXlDb2RlXTtcbiAgICAgICAgaWYoa2V5KVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChrZXkuaXNEb3duKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtleS5pc0Rvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBrZXkuanVzdFVwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLl91cGRhdGVkS2V5cy5pbmRleE9mKGtleSkgPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICBrZXkudHJpZ2dlcihVUCk7XG5cbiAgICAgICAgICAgICAgICAvL2hhbmRsZSBjb21ib3NcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSB0aGlzLl9hY3RpdmVDb21ib3MubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLl9hY3RpdmVDb21ib3NbaV0udGVzdEtleVVwKGV2LmtleUNvZGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGtleS5zaG91bGRQcmV2ZW50RGVmYXVsdCB8fCBwcmV2ZW50RGVmYXVsdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBrZXlib2FyZCBhbmQgcmVtb3ZlcyBhbGwgbGlzdGVuZXJzLiBEbyBub3QgdXNlIGFmdGVyIHRoaXMgaXMgY2FsbGVkLlxuICAgICAqIEBtZXRob2QgZGVzdHJveVxuICAgICAqL1xuICAgIHAuZGVzdHJveSA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICBpZihhcHApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFwcC5vZmZQYXVzZWQodGhpcy5fb25QYXVzZWQpO1xuICAgICAgICAgICAgYXBwLm9mZlJlc3VtZWQodGhpcy5fb25SZXN1bWVkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdvbmJsdXInLCB0aGlzLl9vbkZvY3VzTG9zdCk7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IoaSBpbiB0aGlzLl9rZXlzQnlDb2RlKVxuICAgICAgICAgICAgdGhpcy5fa2V5c0J5Q29kZVtpXS5kZXN0cm95KCk7XG4gICAgICAgIGZvcihpID0gdGhpcy5fYWN0aXZlQ29tYm9zLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKVxuICAgICAgICAgICAgdGhpcy5fYWN0aXZlQ29tYm9zW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fa2V5c0J5Q29kZSA9IHRoaXMuX2tleXNCeU5hbWUgPSB0aGlzLl91cGRhdGVkS2V5cyA9IHRoaXMuX2FjdGl2ZUNvbWJvcyA9XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSA9IHRoaXMuX2tleURvd24gPSB0aGlzLl9rZXlVcCA9IHRoaXMuX29uUmVzdW1lZCA9IHRoaXMuX29uUGF1c2VkID1cbiAgICAgICAgICAgIHRoaXMuX29uRm9jdXNMb3N0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQXNzaWduIHRvIG5hbWVzcGFjZVxuICAgIG5hbWVzcGFjZSgnZnJhbWV3b3JrJykuS2V5Ym9hcmQgPSBLZXlib2FyZDtcblxuXG4gICAgLy89PT09PT09PT09PT09PT09PSBJbnRlcm5hbCBIZWxwZXIgQ2xhc3NlcyA9PT09PT09PT09PT1cbiAgICB2YXIgS2V5ID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgICAgdGhpcy5jb2RlcyA9IFtdO1xuICAgICAgICB0aGlzLm5hbWVzID0gW107XG4gICAgICAgIC8vZGVjaWRlcyB3aGljaCBuYW1lIHRvIHNlbmQgd2l0aCBrZXkgdXAvZG93biBldmVudHMgaW4gY2FzZSB0aGVyZSBpcyBtb3JlXG4gICAgICAgIC8vdGhhbiBvbmUgbmFtZSAtIGZvciBleGFtcGxlLCBjaG9vc2luZyAnY2xlYXInIG92ZXIgJ251bV9sb2NrJ1xuICAgICAgICB0aGlzLnByZWZlcnJlZE5hbWUgPSBudWxsO1xuICAgICAgICAvL2xpc3RlbmVyIGZ1bmN0aW9uc1xuICAgICAgICB0aGlzLnVwTGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMucmVwZWF0TGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMuZG93bkxpc3RlbmVycyA9IFtdO1xuICAgICAgICB0aGlzLm1hbnVhbFByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvdWxkUHJldmVudERlZmF1bHQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmlzRG93biA9IGZhbHNlO1xuICAgICAgICB0aGlzLmp1c3REb3duID0gZmFsc2U7XG4gICAgICAgIHRoaXMuanVzdFVwID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHAgPSBLZXkucHJvdG90eXBlO1xuXG4gICAgcC5hZGRDb2RlID0gZnVuY3Rpb24oY29kZSlcbiAgICB7XG4gICAgICAgIGlmKEFycmF5LmlzQXJyYXkoY29kZSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjb2RlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHRoaXMuY29kZXMucHVzaChjb2RlW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmNvZGVzLnB1c2goY29kZSk7XG4gICAgfTtcblxuICAgIHAuYWRkTmFtZSA9IGZ1bmN0aW9uKG5hbWUpXG4gICAge1xuICAgICAgICBpZighdGhpcy5uYW1lcy5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLnByZWZlcnJlZE5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLm5hbWVzLnB1c2gobmFtZSk7XG4gICAgfTtcblxuICAgIHAuc2V0TWFudWFsUHJldmVudERlZmF1bHQgPSBmdW5jdGlvbihwcmV2ZW50RGVmYXVsdClcbiAgICB7XG4gICAgICAgIHRoaXMubWFudWFsUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdDtcbiAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnNob3VsZFByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJMaXN0ID0gW3RoaXMuZG93bkxpc3RlbmVycywgdGhpcy5yZXBlYXRMaXN0ZW5lcnMsIHRoaXMudXBMaXN0ZW5lcnNdO1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxpc3RlbmVyTGlzdC5sZW5ndGggJiYgIXByZXZlbnREZWZhdWx0OyArK2kpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IGxpc3RlbmVyTGlzdFtpXTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGluZGV4ID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZihsaXN0ZW5lcnNbaW5kZXhdICYmIGxpc3RlbmVyc1tpbmRleF0ucHJldmVudERlZmF1bHQpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lciwgdHlwZSwgcmVxdWVzdGVkTmFtZSwgcHJldmVudERlZmF1bHQpXG4gICAge1xuICAgICAgICB2YXIgbGlzdGVuZXJzO1xuICAgICAgICBzd2l0Y2godHlwZSlcbiAgICAgICAge1xuICAgICAgICAgICAgY2FzZSBET1dOOlxuICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IHRoaXMuZG93bkxpc3RlbmVycztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUkVQRUFUOlxuICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IHRoaXMucmVwZWF0TGlzdGVuZXJzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBVUDpcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSB0aGlzLnVwTGlzdGVuZXJzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmKGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA9PSAtMSlcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgaWYodGhpcy5wcmVmZXJyZWROYW1lICE9IHJlcXVlc3RlZE5hbWUpXG4gICAgICAgICAgICB0aGlzLnByZWZlcnJlZE5hbWUgPSByZXF1ZXN0ZWROYW1lO1xuICAgICAgICBsaXN0ZW5lci5wcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0O1xuICAgICAgICBpZihwcmV2ZW50RGVmYXVsdClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zaG91bGRQcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyLCB0eXBlKVxuICAgIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycztcbiAgICAgICAgc3dpdGNoKHR5cGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhc2UgRE9XTjpcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSB0aGlzLmRvd25MaXN0ZW5lcnM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFJFUEVBVDpcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSB0aGlzLnJlcGVhdExpc3RlbmVycztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgVVA6XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzID0gdGhpcy51cExpc3RlbmVycztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgIGlmKGluZGV4ID49IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmKGluZGV4IDwgMSlcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc2hpZnQoKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICAvL3NlZSBpZiB3ZSBzaG91bGQgY2xlYXIgdGhlIHByZXZlbnQgZGVmYXVsdCBzdGF0dXNcbiAgICAgICAgdGhpcy5zZXRNYW51YWxQcmV2ZW50RGVmYXVsdCh0aGlzLm1hbnVhbFByZXZlbnREZWZhdWx0KTtcbiAgICB9O1xuXG4gICAgcC50cmlnZ2VyID0gZnVuY3Rpb24odHlwZSlcbiAgICB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnM7XG4gICAgICAgIHN3aXRjaCh0eXBlKVxuICAgICAgICB7XG4gICAgICAgICAgICBjYXNlIERPV046XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzID0gdGhpcy5kb3duTGlzdGVuZXJzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBSRVBFQVQ6XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzID0gdGhpcy5yZXBlYXRMaXN0ZW5lcnM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFVQOlxuICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IHRoaXMudXBMaXN0ZW5lcnM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7ICsraSlcbiAgICAgICAge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2ldKHRoaXMucHJlZmVycmVkTmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5kZXN0cm95ID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgICAgdGhpcy5jb2RlcyA9IHRoaXMubmFtZXMgPSB0aGlzLnVwTGlzdGVuZXJzID0gdGhpcy5yZXBlYXRMaXN0ZW5lcnMgPVxuICAgICAgICAgICAgdGhpcy5kb3duTGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIENvbWJvID0gZnVuY3Rpb24obmFtZSwgcHJldmVudERlZmF1bHQsIGtleXNCeU5hbWVSZWYpXG4gICAge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgICAgICB0aGlzLnN0ZXBzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSAwO1xuICAgICAgICB0aGlzLnByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQ7XG5cbiAgICAgICAgLy8yOiBzcGxpdCBiYXNlZCBvbiBzdGVwcywgPiBzdXJyb3VuZGVkIGJ5IHdoaXRlc3BhY2VcbiAgICAgICAgdmFyIHN0ZXBzID0gbmFtZS5zcGxpdCgvXFxzKz5cXHMrL2cpO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgc3RlcHMubGVuZ3RoOyArK2kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vMzogc3BsaXQgc3RlcCBjb21wb25lbnRzLCArIHN1cnJvdW5kZWQgYnkgd2hpdGVzcGFjZVxuICAgICAgICAgICAgdmFyIHN0ZXBOYW1lcyA9IHN0ZXBzW2ldLnNwbGl0KC9cXHMrXFwrXFxzKy9nKTtcbiAgICAgICAgICAgIHZhciBzdGVwID0gW107XG4gICAgICAgICAgICBmb3IodmFyIGogPSAwOyBqIDwgc3RlcE5hbWVzLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vZ2V0IHRoZSBhY3R1YWwga2V5XG4gICAgICAgICAgICAgICAgdmFyIGtleU5hbWUgPSBzdGVwTmFtZXNbal07XG4gICAgICAgICAgICAgICAgaWYoa2V5TmFtZSA9PSBcIlxcXFw+XCIpXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBcIj5cIjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGtleU5hbWUgPT0gXCJcXFxcK1wiKVxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gXCIrXCI7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNCeU5hbWVSZWZba2V5TmFtZV07XG4gICAgICAgICAgICAgICAgaWYoIWtleSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL3B1c2ggYW4gb2JqZWN0IHRvIHRyYWNrIHRoYXQga2V5XG4gICAgICAgICAgICAgICAgc3RlcC5wdXNoKHtzYXRlZDogZmFsc2UsIHJlbGVhc2VkOiBmYWxzZSwgY29kZXM6IGtleS5jb2Rlc30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9pZiB0aGUgc3RlcCBpcyB2YWxpZCwgYWRkIHRoZSBzdGVwIHRvIHRoZSBsaXN0XG4gICAgICAgICAgICBpZihzdGVwLmxlbmd0aClcbiAgICAgICAgICAgICAgICB0aGlzLnN0ZXBzLnB1c2goc3RlcCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcCA9IENvbWJvLnByb3RvdHlwZTtcblxuICAgIHAudGVzdEtleURvd24gPSBmdW5jdGlvbihrZXlDb2RlKVxuICAgIHtcbiAgICAgICAgdmFyIHN0ZXAgPSB0aGlzLnN0ZXBzW3RoaXMuY3VycmVudFN0ZXBdO1xuICAgICAgICB2YXIgZm91bmQgPSBmYWxzZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBrZXk7XG4gICAgICAgIC8vc2VlIGlmIHdlIGFyZSB3YWl0aW5nIG9uIHRoYXQga2V5XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHN0ZXAubGVuZ3RoOyArK2kpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleSA9IHN0ZXBbaV07XG4gICAgICAgICAgICBpZihrZXkuY29kZXMuaW5kZXhPZihrZXlDb2RlKSA+PSAwKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmKGtleS5zYXRlZCkvL2tleSB3YXMgcHJlc3NlZCB0d2ljZSAtIGNhbmNlbCBldmVyeXRoaW5nXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGtleS5zYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vaWYgdGhlIGtleSBpcyBub3Qgb25lIG9mIG91cnMsIHJlc2V0IHRoZSBjb21ibyB0byB0aGUgYmVnaW5uaW5nXG4gICAgICAgIGlmKCFmb3VuZClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5yZXNldFN0ZXAoKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vc2VlIGlmIHdlIGFyZSByZWFkeSB0byBjb21wbGV0ZSB0aGUgY29tYm8gb3IgbW92ZSBvbiB0byB0aGUgbmV4dCBzdGVwXG4gICAgICAgIHZhciBhbGxTdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgc3RlcC5sZW5ndGg7ICsraSlcbiAgICAgICAge1xuICAgICAgICAgICAga2V5ID0gc3RlcFtpXTtcbiAgICAgICAgICAgIGlmKCFrZXkuc2F0ZWQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYWxsU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB0aGF0IHdhcyB0aGUgbGFzdCBzdGVwLCB0cmlnZ2VyIGxpc3RlbmVycyBpbW1lZGlhdGVseVxuICAgICAgICBpZihhbGxTdWNjZXNzICYmIHRoaXMuY3VycmVudFN0ZXAgKyAxID09IHRoaXMuc3RlcHMubGVuZ3RoKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoKTtcbiAgICAgICAgICAgIHRoaXMucmVzZXRTdGVwKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vbGV0IEtleWJvYXJkIGtub3cgaWYgdGhlIGRlZmF1bHQga2V5IGJlaGF2aW9yIHNob3VsZCBiZSBwcmV2ZW50ZWRcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldmVudERlZmF1bHQ7XG4gICAgfTtcblxuICAgIHAudGVzdEtleVVwID0gZnVuY3Rpb24oa2V5Q29kZSlcbiAgICB7XG4gICAgICAgIHZhciBzdGVwID0gdGhpcy5zdGVwc1t0aGlzLmN1cnJlbnRTdGVwXTtcbiAgICAgICAgdmFyIGZvdW5kID0gZmFsc2UsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAga2V5O1xuICAgICAgICAvL3NlZSBpZiB3ZSBhcmUgd2FpdGluZyBvbiB0aGF0IGtleVxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBzdGVwLmxlbmd0aDsgKytpKVxuICAgICAgICB7XG4gICAgICAgICAgICBrZXkgPSBzdGVwW2ldO1xuICAgICAgICAgICAgLy9vbmx5IG5vdGUga2V5cyB0aGF0IGhhdmUgYmVlbiBzYXRlZCwgdG8gYXZvaWQgbWFya2luZyBrZXlzIGFzIHJlbGVhc2VkXG4gICAgICAgICAgICAvL3doZW4gdGhlIGNvbWJvIHdhcyBjYW5jZWxsZWQgd2hpbGUgYmVpbmcgaGVsZFxuICAgICAgICAgICAgaWYoa2V5LnNhdGVkICYmIGtleS5jb2Rlcy5pbmRleE9mKGtleUNvZGUpID49IDApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAga2V5LnJlbGVhc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZihmb3VuZClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGFsbFJlbGVhc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IHN0ZXAubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYoIXN0ZXBbaV0ucmVsZWFzZWQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGxSZWxlYXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2lmIGFsbCBrZXlzIGZvciB0aGUgY3VycmVudCBzdGVwIGhhdmUgYmVlbiByZWxlYXNlZCxcbiAgICAgICAgICAgIC8vbW92ZSBvbiB0byB0aGUgbmV4dCBvbmVcbiAgICAgICAgICAgIGlmKGFsbFJlbGVhc2VkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRTdGVwKCk7XG4gICAgICAgICAgICAgICAgKyt0aGlzLmN1cnJlbnRTdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB0aGUga2V5IHdhcyB2YWxpZCwgdGhlbiBsZXQgS2V5Ym9hcmQga25vdyBpZiB3ZSBzaG91bGQgcHJldmVudCBkZWZhdWx0IGJlaGF2aW9yXG4gICAgICAgIHJldHVybiBmb3VuZCAmJiB0aGlzLnByZXZlbnREZWZhdWx0O1xuICAgIH07XG5cbiAgICBwLnJlc2V0U3RlcCA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICAgIHZhciBzdGVwID0gdGhpcy5zdGVwc1t0aGlzLmN1cnJlbnRTdGVwXTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgc3RlcC5sZW5ndGg7ICsraSlcbiAgICAgICAge1xuICAgICAgICAgICAga2V5ID0gc3RlcFtpXTtcbiAgICAgICAgICAgIGtleS5zYXRlZCA9IGtleS5yZWxlYXNlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAudHJpZ2dlciA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycztcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7ICsraSlcbiAgICAgICAge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2ldKHRoaXMubmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyKVxuICAgIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzO1xuICAgICAgICBpZihsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikgPT0gLTEpXG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfTtcblxuICAgIHAucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcilcbiAgICB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyxcbiAgICAgICAgICAgIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICBpZihpbmRleCA+PSAwKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZihpbmRleCA8IDEpXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNoaWZ0KCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy9pZiB0aGVyZSBhcmUgbm8gbW9yZSBsaXN0ZW5lcnMsIHJldHVybiB0cnVlIHRvIHRlbGwgdGhlIEtleWJvYXJkIHRvIGRlc3Ryb3kgaXRcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGggPCAxO1xuICAgIH07XG5cbiAgICBwLmRlc3Ryb3kgPSBmdW5jdGlvbigpXG4gICAge1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHRoaXMuc3RlcHMgPSBudWxsO1xuICAgIH07XG5cbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBDYWNoZXMgYSBwb29sIG9mIG9iamVjdHMuIEFsbG93cyBmb3IgY3VzdG9tIGNyZWF0aW9uLCBkZXN0cnVjdGlvbiwgaW5pdGlhbGlzYXRpb24gYW5kIGRlaW5pdGlhbGlzYXRpb24gb2ZcbiAgICAvLyB0aGVzZSBvYmplY3RzLCBlYWNoIHdpdGggYXJiaXRyYXJ5IHBhcmFtZXRlcmlzYXRpb24uIENhbGwgZ2V0KCkgaW4gcmVwbGFjZW1lbnQgb2YgY3JlYXRpbmcgYW4gb2JqZWN0LCBhbmRcbiAgICAvLyBjYWxsIHJlbGVhc2UoKSBpbiByZXBsYWNlbWVudCBvZiBkZXN0cm95aW5nIGFuIG9iamVjdC5cbiAgICAvLyAtIE5vdGU6IGVuc3VyZSB5b3UgY2FsbCByZWxlYXNlKCkgb24gdW51c2VkIG9iamVjdHMgcmV0cmlldmVkIGJ5IGdldCgpLCBvdGhlcndpc2UgdGhlIHBvb2wgd2lsbCBjb250aW51ZSB0b1xuICAgIC8vICAgZ3JvdyByYXBpZGx5IGluIHNpemUuXG4gICAgdmFyIE9iamVjdFBvb2wgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIGNyZWF0ZUZ1bmM6IGZ1bmN0aW9uIChjcmVhdGVBcmdzLCBpbmRleCkgeyByZXR1cm4ge307IH0sICAvLyBmdW5jdGlvbiAoY3JlYXRlQXJncywgaW5kZXgpOiBvYmplY3RcbiAgICAgICAgICAgIGRlc3Ryb3lGdW5jOiBudWxsLCAgLy8gZnVuY3Rpb24gKG9iaiwgZGVzdHJveUFyZ3MsIGluZGV4KTogdm9pZFxuICAgICAgICAgICAgaW5pdEZ1bmM6IG51bGwsICAvLyBmdW5jdGlvbiAob2JqLCBpbml0QXJncywgaW5kZXgpOiB2b2lkXG4gICAgICAgICAgICBkZWluaXRGdW5jOiBudWxsLCAgLy8gZnVuY3Rpb24gKG9iaiwgZGVpbml0QXJncywgaW5kZXgpOiB2b2lkXG4gICAgICAgICAgICBjcmVhdGVBcmdzOiB7fSxcbiAgICAgICAgICAgIGRlc3Ryb3lBcmdzOiB7fSxcbiAgICAgICAgICAgIGluaXRBcmdzOiB7fSxcbiAgICAgICAgICAgIGRlaW5pdEFyZ3M6IHt9LFxuICAgICAgICAgICAgY2FwYWNpdHk6IDVcbiAgICAgICAgfSwgY29uZmlnKTtcblxuICAgICAgICBpZiAoIWZpbmFsQ29uZmlnLmNyZWF0ZUZ1bmMpIHtcbiAgICAgICAgICAgIHRocm93IFwiT2JqZWN0UG9vbDogY3JlYXRlRnVuYyBpcyBudWxsLlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGVmYXVsdEdyb3dDYXBhY2l0eSA9IGZpbmFsQ29uZmlnLmNhcGFjaXR5O1xuXG4gICAgICAgIHRoaXMuX2NyZWF0ZUZ1bmMgPSBmaW5hbENvbmZpZy5jcmVhdGVGdW5jO1xuICAgICAgICB0aGlzLl9kZXN0cm95RnVuYyA9IGZpbmFsQ29uZmlnLmRlc3Ryb3lGdW5jO1xuICAgICAgICB0aGlzLl9pbml0RnVuYyA9IGZpbmFsQ29uZmlnLmluaXRGdW5jO1xuICAgICAgICB0aGlzLl9kZWluaXRGdW5jID0gZmluYWxDb25maWcuZGVpbml0RnVuYztcblxuICAgICAgICB0aGlzLl9jcmVhdGVBcmdzID0gZmluYWxDb25maWcuY3JlYXRlQXJncztcbiAgICAgICAgdGhpcy5fZGVzdHJveUFyZ3MgPSBmaW5hbENvbmZpZy5kZXN0cm95QXJncztcbiAgICAgICAgdGhpcy5faW5pdEFyZ3MgPSBmaW5hbENvbmZpZy5pbml0QXJncztcbiAgICAgICAgdGhpcy5fZGVpbml0QXJncyA9IGZpbmFsQ29uZmlnLmRlaW5pdEFyZ3M7XG5cbiAgICAgICAgdGhpcy5fb2JqcyA9IFtdO1xuICAgICAgICB0aGlzLl91c2VkSW5kaWNlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuZ3Jvdyh0aGlzLl9kZWZhdWx0R3Jvd0NhcGFjaXR5KTtcbiAgICB9O1xuICAgIHZhciBwID0gT2JqZWN0UG9vbC5wcm90b3R5cGU7XG5cbiAgICBwLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX29ianMgPSBudWxsO1xuICAgICAgICB0aGlzLl91c2VkSW5kaWNlcyA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fY3JlYXRlRnVuYyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lGdW5jID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW5pdEZ1bmMgPSBudWxsO1xuICAgICAgICB0aGlzLl9kZWluaXRGdW5jID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9jcmVhdGVBcmdzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGVzdHJveUFyZ3MgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbml0QXJncyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2RlaW5pdEFyZ3MgPSBudWxsO1xuICAgIH07XG5cbiAgICBwLmdldCA9IGZ1bmN0aW9uIChpbml0QXJncykge1xuICAgICAgICBpbml0QXJncyA9IGluaXRBcmdzIHx8IHRoaXMuX2luaXRBcmdzO1xuXG4gICAgICAgIGlmICh0aGlzLmlzQXRGdWxsQ2FwYWNpdHkoKSkge1xuICAgICAgICAgICAgdmFyIG51bUVsZW1lbnRzID0gdGhpcy5jYXBhY2l0eSgpIHx8IHRoaXMuX2RlZmF1bHRHcm93Q2FwYWNpdHk7XG4gICAgICAgICAgICB0aGlzLmdyb3cobnVtRWxlbWVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IHRoaXMuZ2V0TmV4dEF2YWlsYWJsZUluZGV4KCk7XG5cbiAgICAgICAgdGhpcy5fdXNlZEluZGljZXMucHVzaChjdXJyZW50SW5kZXgpO1xuICAgICAgICB0aGlzLl91c2VkSW5kaWNlcy5zb3J0KChhLCBiKSA9PiB7IHJldHVybiAoYSAtIGIpOyB9KTtcblxuICAgICAgICB2YXIgb2JqID0gdGhpcy5fb2Jqc1tjdXJyZW50SW5kZXhdO1xuICAgICAgICAodGhpcy5faW5pdEZ1bmMgJiYgdGhpcy5faW5pdEZ1bmMob2JqLCBpbml0QXJncywgY3VycmVudEluZGV4KSk7XG5cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuXG4gICAgcC5yZWxlYXNlID0gZnVuY3Rpb24gKG9iaiwgZGVpbml0QXJncykge1xuICAgICAgICBkZWluaXRBcmdzID0gZGVpbml0QXJncyB8fCB0aGlzLl9kZWluaXRBcmdzO1xuXG4gICAgICAgIGxldCBjdXJyZW50SW5kZXggPSB0aGlzLl9vYmpzLmluZGV4T2Yob2JqKTtcbiAgICAgICAgbGV0IHVzZWRJbmRleCA9IHRoaXMuX3VzZWRJbmRpY2VzLmluZGV4T2YoY3VycmVudEluZGV4KTtcbiAgICAgICAgaWYgKHVzZWRJbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgKHRoaXMuX2RlaW5pdEZ1bmMgJiYgdGhpcy5fZGVpbml0RnVuYyhvYmosIGRlaW5pdEFyZ3MsIHVzZWRJbmRleCkpO1xuXG4gICAgICAgIHRoaXMuX3VzZWRJbmRpY2VzLnNwbGljZSh1c2VkSW5kZXgsIDEpO1xuICAgIH07XG5cbiAgICBwLmdyb3cgPSBmdW5jdGlvbiAobnVtRWxlbWVudHMpIHtcbiAgICAgICAgbnVtRWxlbWVudHMgPSBudW1FbGVtZW50cyB8fCB0aGlzLmNhcGFjaXR5KCk7XG5cbiAgICAgICAgaWYgKG51bUVsZW1lbnRzID4gMCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRDYXBhY2l0eSA9IHRoaXMuY2FwYWNpdHkoKTtcbiAgICAgICAgICAgIHRoaXMuX29ianMubGVuZ3RoICs9IE51bWJlcihudW1FbGVtZW50cyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjdXJyZW50Q2FwYWNpdHk7IGkgPCB0aGlzLmNhcGFjaXR5KCk7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX29ianNbaV0gPSB0aGlzLl9jcmVhdGVGdW5jKHRoaXMuX2NyZWF0ZUFyZ3MsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FwYWNpdHkoKTtcbiAgICB9O1xuXG4gICAgcC5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdXNlZEluZGljZXMucmV2ZXJzZUZvckVhY2goZnVuY3Rpb24gKHVzZWRJbmRleCkge1xuICAgICAgICAgICAgbGV0IG9iaiA9IHRoaXMuX29ianNbdXNlZEluZGV4XTtcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZShvYmopO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3VzZWRJbmRpY2VzID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuX2Rlc3Ryb3lGdW5jKSB7XG4gICAgICAgICAgICB0aGlzLl9vYmpzLnJldmVyc2VGb3JFYWNoKGZ1bmN0aW9uIChvYmosIGkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RnVuYyhvYmosIHRoaXMuX2Rlc3Ryb3lBcmdzLCBpKTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb2JqcyA9IFtdO1xuICAgIH07XG5cbiAgICAvLyBOdW1iZXIgb2YgZWxlbWVudHMgcmV0cmlldmVkIGJ5IGdldCgpIHRoYXQgaGF2ZW4ndCBiZWVuIHJldHVybmVkIHVzaW5nIHJlbGVhc2UoKS5cbiAgICBwLm51bVVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VkSW5kaWNlcy5sZW5ndGg7XG4gICAgfTtcblxuICAgIC8vIFRvdGFsIG51bWJlciBvZiBvYmplY3RzIHRoaXMgcG9vbCBjYW4gY3VycmVudGx5IHN0b3JlLlxuICAgIHAuY2FwYWNpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vYmpzLmxlbmd0aDtcbiAgICB9O1xuXG4gICAgcC5pc0F0RnVsbENhcGFjaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMubnVtVXNlZCgpID09IHRoaXMuY2FwYWNpdHkoKSk7XG4gICAgfTtcblxuICAgIHAuZ2V0TmV4dEF2YWlsYWJsZUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gMDtcblxuICAgICAgICBpZiAodGhpcy5pc0F0RnVsbENhcGFjaXR5KCkpIHtcbiAgICAgICAgICAgIG5leHRJbmRleCA9IC0xO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3VzZWRJbmRpY2VzLmhhc0l0ZW1zKSB7XG4gICAgICAgICAgICBuZXh0SW5kZXggPSAoMSArIHRoaXMuX3VzZWRJbmRpY2VzLmZpbmQoKHVzZWRJbmRleCwgaSwgYXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHRVc2VkSW5kZXggPSAoaSA9PSBhcnIubGFzdEluZGV4KSA/ICh0aGlzLl9vYmpzLmxhc3RJbmRleCArIDEpIDogYXJyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKChuZXh0VXNlZEluZGV4IC0gdXNlZEluZGV4KSA+IDEpOyAgLy8gQXNzdW1lcyB0aGlzLl91c2VkSW5kaWNlcyBpcyBzb3J0ZWQuXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dEluZGV4O1xuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuT2JqZWN0UG9vbCA9IE9iamVjdFBvb2w7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgV2luZG93VXRpbHMgPSB7fTtcblxuICAgIFdpbmRvd1V0aWxzLnJlZ2lzdGVyTW91c2VPdXQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIC8vICBEZXJlZ2lzdGVyIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICBXaW5kb3dVdGlscy5kZXJlZ2lzdGVyTW91c2VPdXQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5XaW5kb3dVdGlscyA9IFdpbmRvd1V0aWxzO1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIERldmljZVV0aWxzID0gaW5jbHVkZShcImZyYW1ld29yay5EZXZpY2VVdGlsc1wiKTtcblxuICAgIHZhciBBdWRpb1V0aWxzID0ge307XG5cbiAgICAvLyBDaG9vc2UgYSByYW5kb20gVk8gbmFtZSBmcm9tIHRoZSBsaXN0LCBhbmQgYXBwZW5kIGEgcGxhdGZvcm0gc3BlY2lmaWMgKGRlc2t0b3BcbiAgICAvLyBvciBtb2JpbGUpIGV4dGVuc2lvbiB0byB0aGUgbmFtZSBpZiByZXF1aXJlZC5cbiAgICBBdWRpb1V0aWxzLmdldFJhbmRvbWlzZWRWTyA9IGZ1bmN0aW9uICh2b0xpc3QsIGluZGV4LCBwcm9iYWJpbGl0eSkge1xuICAgICAgICBpZiAoIWlzRGVmaW5lZChpbmRleCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gTWF0aC5yYW5kb21JbnQoTWF0aC5tYXgoKHZvTGlzdC5sZW5ndGggLSAxKSwgMCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNEZWZpbmVkKHByb2JhYmlsaXR5KSkge1xuICAgICAgICAgICAgcHJvYmFiaWxpdHkgPSAxLjA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmFuZG9tVk8gPSB2b0xpc3RbaW5kZXhdLm5hbWU7XG4gICAgICAgIGlmIChyYW5kb21WTyAmJiB2b0xpc3RbaW5kZXhdLnBsYXRmb3JtU3BlY2lmaWMpIHtcbiAgICAgICAgICAgIHZhciBkZXZpY2VUeXBlID0gKERldmljZVV0aWxzLmlzRGVza3RvcCkgPyBcIi1kZXNrdG9wXCIgOiBcIi1tb2JpbGVcIjtcbiAgICAgICAgICAgIHJhbmRvbVZPICs9IGRldmljZVR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvYmFiaWxpdHkgPCAxLjApIHtcbiAgICAgICAgICAgIHJhbmRvbVZPID0gKE1hdGgucmFuZG9tKCkgPCBwcm9iYWJpbGl0eSkgPyByYW5kb21WTyA6IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmFuZG9tVk87XG4gICAgfTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5BdWRpb1V0aWxzID0gQXVkaW9VdGlscztcbn0oKSk7XG4iLCIvKlxuICAgIENsb25lZCBmcm9tIE1hdHRlci5qcyBwaHlzaWNzIGZyYW1ld29yayB3aXRoIHNvbWUgbW9kaWZpY2F0aW9ucy5cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbiAgICBDb3B5cmlnaHQgKGMpIDIwMTQgTGlhbSBCcnVtbWl0dFxuXG4gICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICAgIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAgICBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gICAgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICAgIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICAgIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICAgIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICAgIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAgICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICAgIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAgICBUSEUgU09GVFdBUkUuXG4qL1xuXG4vKipcbiogVGhlIGBNYXR0ZXIuVmVjdG9yYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyB2ZWN0b3JzLlxuKiBWZWN0b3JzIGFyZSB0aGUgYmFzaXMgb2YgYWxsIHRoZSBnZW9tZXRyeSByZWxhdGVkIG9wZXJhdGlvbnMgaW4gdGhlIGVuZ2luZS5cbiogQSBgTWF0dGVyLlZlY3RvcmAgb2JqZWN0IGlzIG9mIHRoZSBmb3JtIGB7IHg6IDAsIHk6IDAgfWAuXG4qXG4qIFNlZSBbRGVtby5qc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvYmxvYi9tYXN0ZXIvZGVtby9qcy9EZW1vLmpzKSBcbiogYW5kIFtEZW1vTW9iaWxlLmpzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy9ibG9iL21hc3Rlci9kZW1vL2pzL0RlbW9Nb2JpbGUuanMpIGZvciB1c2FnZSBleGFtcGxlcy5cbipcbiogQGNsYXNzIFZlY3RvclxuKi9cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBWZWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMueCA9IDA7XG4gICAgICAgIHRoaXMueSA9IDA7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdmVjdG9yLlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggKGRlZmF1bHRzIHRvIDApXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgKG9wdGlvbmFsLCBkZWZhdWx0cyB0byB4IGlmIHggaXMgbm9uLXplcm8sIG90aGVyd2lzZSAwKVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLmNyZWF0ZSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHggPSB4IHx8IDA7XG4gICAgICAgIHkgPSB5IHx8ICgoeSAhPT0gMCkgPyB4IDogMCk7XG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbiAgICB9O1xuXG4gICAgLy8gQWRkZWQgYnkgQ2FtZXJvbiBIYXJ2ZXkuXG4gICAgLy8gQ3JlYXRlIGEgdmVjdG9yIGRlc2NyaWJlZCBieSBhIHN0YXJ0IGFuZCBlbmQgcG9pbnQuXG4gICAgVmVjdG9yLmNyZWF0ZUZyb21Qb2ludHMgPSBmdW5jdGlvbiAoc3RhcnRQb2ludCwgZW5kUG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5zdWIoZW5kUG9pbnQsIHN0YXJ0UG9pbnQpO1xuICAgIH07XG5cbiAgICAvLyBBZGRlZCBieSBDYW1lcm9uIEhhcnZleS5cbiAgICAvLyBDcmVhdGVzIGEgdmVjdG9yIGZyb20gYSByb3RhdGlvbiwgd2l0aCBvcHRpb25hbCB6ZXJvIHJvdGF0aW9uIG9yaWVudGF0aW9uIHZlY3RvciBhbmQgYSBwb3N0LXNjYWxlIGZhY3RvciBvblxuICAgIC8vIHRoZSByZXN1bHQgdmVjdG9yLlxuICAgIFZlY3Rvci5jcmVhdGVGcm9tUm90YXRpb24gPSBmdW5jdGlvbiAocm90YXRpb24sIHplcm9Sb3RhdGlvbkRpciwgbGVuZ3RoKSB7XG4gICAgICAgIHplcm9Sb3RhdGlvbkRpciA9IHplcm9Sb3RhdGlvbkRpciB8fCBWZWN0b3IuY3JlYXRlKDEsIDApO1xuXG4gICAgICAgIHZhciBiYXNlUm90YXRpb25EaXIgPSBWZWN0b3Iubm9ybWFsaXNlKHplcm9Sb3RhdGlvbkRpcik7XG4gICAgICAgIHZhciBvcmllbnRhdGlvblZlYyA9IFZlY3Rvci5yb3RhdGUoYmFzZVJvdGF0aW9uRGlyLCByb3RhdGlvbik7XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNEZWZpbmVkKGxlbmd0aCkpIHtcbiAgICAgICAgICAgIG9yaWVudGF0aW9uVmVjID0gVmVjdG9yLm11bHQob3JpZW50YXRpb25WZWMsIGxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3JpZW50YXRpb25WZWM7XG4gICAgfTtcblxuICAgIC8vIENvbnZlcnRzIGEgMUQgaW5kZXggaW50byBhIDJEIGluZGV4LiBSZXF1aXJlcyBhIHdpZHRoIChtYXggWCB2YWx1ZSkgdG8ga25vdyBob3cgbGFyZ2UgdGhlIHRhcmdldFxuICAgIC8vIDJEIHNwYWNlIGlzIHdoaWNoIHRoZSBpbmRleCBpcyBiZWluZyBtYXBwZWQgdG8uXG4gICAgVmVjdG9yLmNyZWF0ZUZyb21JbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgd2lkdGgpIHtcbiAgICAgICAgdmFyIHhJbmRleCA9IChpbmRleCAlIHdpZHRoKTtcbiAgICAgICAgdmFyIHlJbmRleCA9IChNYXRoLmZsb29yKGluZGV4IC8gd2lkdGgpKTtcblxuICAgICAgICByZXR1cm4gVmVjdG9yLmNyZWF0ZSh4SW5kZXgsIHlJbmRleCk7XG4gICAgfTtcblxuICAgIC8vIENvbnZlcnRzIGEgMkQgaW5kZXggKGFzIGEgdmVjdG9yKSB0byBhIDFEIGluZGV4LiBSZXF1aXJlcyBhIHdpZHRoIChtYXggWCB2YWx1ZSkgdG8ga25vdyBob3dcbiAgICAvLyBsYXJnZSB0aGUgc291cmNlIDJEIHNwYWNlIGlzIHdoaWNoIHRoZSBpbmRleCBpcyBiZWluZyBtYXBwZWQgZnJvbS5cbiAgICBWZWN0b3IuY29udmVydFRvSW5kZXggPSBmdW5jdGlvbiAodmVjdG9yLCB3aWR0aCkge1xuICAgICAgICByZXR1cm4gKCh2ZWN0b3IueSAqIHdpZHRoKSArIHZlY3Rvci54KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyB2ZWN0b3Igd2l0aCBgeGAgYW5kIGB5YCBjb3BpZWQgZnJvbSB0aGUgZ2l2ZW4gYHZlY3RvcmAuXG4gICAgICogQG1ldGhvZCBjbG9uZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IGNsb25lZCB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IuY2xvbmUgPSBmdW5jdGlvbiAodmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB7IHg6IHZlY3Rvci54LCB5OiB2ZWN0b3IueSB9O1xuICAgIH07XG5cbiAgICAvLyBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBpcyBhIHZlY3Rvci5cbiAgICBWZWN0b3IuaXNWZWN0b3IgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiAoaXNEZWZpbmVkKG9iai54KSAmJiBpc0RlZmluZWQob2JqLnkpKTtcbiAgICB9O1xuXG4gICAgLy8gU2V0IHZlY3RvckEgZXF1YWwgdG8gdmVjdG9yQiBieSBwZXJmb3JtaW5nIGNvbXBvbmVudC13aXNlIGNvcHkuXG4gICAgVmVjdG9yLnNldEVxdWFsID0gZnVuY3Rpb24gKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgICAgICAgdmVjdG9yQS54ID0gdmVjdG9yQi54O1xuICAgICAgICB2ZWN0b3JBLnkgPSB2ZWN0b3JCLnk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hZ25pdHVkZSAobGVuZ3RoKSBvZiBhIHZlY3Rvci5cbiAgICAgKiBAbWV0aG9kIG1hZ25pdHVkZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBtYWduaXR1ZGUgb2YgdGhlIHZlY3RvclxuICAgICAqL1xuICAgIFZlY3Rvci5tYWduaXR1ZGUgPSBmdW5jdGlvbiAodmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoKHZlY3Rvci54ICogdmVjdG9yLngpICsgKHZlY3Rvci55ICogdmVjdG9yLnkpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFnbml0dWRlIChsZW5ndGgpIG9mIGEgdmVjdG9yICh0aGVyZWZvcmUgc2F2aW5nIGEgYHNxcnRgIG9wZXJhdGlvbikuXG4gICAgICogQG1ldGhvZCBtYWduaXR1ZGVTcXVhcmVkXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZWQgbWFnbml0dWRlIG9mIHRoZSB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IubWFnbml0dWRlU3F1YXJlZCA9IGZ1bmN0aW9uICh2ZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuICh2ZWN0b3IueCAqIHZlY3Rvci54KSArICh2ZWN0b3IueSAqIHZlY3Rvci55KTtcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJuIHRoZSB2ZWN0b3IgcmVzY2FsZWQgdG8gdGhlIHNwZWNpZmllZCBsZW5ndGggKG1hZ25pdHVkZSkuXG4gICAgVmVjdG9yLnNldE1hZ25pdHVkZSA9IGZ1bmN0aW9uICh2ZWN0b3IsIG1hZ25pdHVkZSkge1xuICAgICAgICB2YXIgY3VycmVudE1hZ25pdHVkZSA9IFZlY3Rvci5tYWduaXR1ZGUodmVjdG9yKTtcbiAgICAgICAgaWYgKGN1cnJlbnRNYWduaXR1ZGUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IuY3JlYXRlKDAsIDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBWZWN0b3IubXVsdCh2ZWN0b3IsIChtYWduaXR1ZGUgLyBjdXJyZW50TWFnbml0dWRlKSk7XG4gICAgfTtcblxuICAgIC8vIFJldHVybiB0aGUgdmVjdG9yIHJlc2NhbGVkIHRvIHRoZSBzcGVjaWZpYyBzcXVhcmVkIGxlbmd0aCAobWFnbml0dWRlKS5cbiAgICBWZWN0b3Iuc2V0TWFnbml0dWRlU3F1YXJlZCA9IGZ1bmN0aW9uICh2ZWN0b3IsIG1hZ25pdHVkZVNxdWFyZWQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRNYWduaXR1ZGVTcXVhcmVkID0gVmVjdG9yLm1hZ25pdHVkZVNxdWFyZWQodmVjdG9yKTtcbiAgICAgICAgaWYgKGN1cnJlbnRNYWduaXR1ZGVTcXVhcmVkID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yLmNyZWF0ZSgwLCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVmVjdG9yLm11bHQodmVjdG9yLCBNYXRoLnNxcnQobWFnbml0dWRlU3F1YXJlZCAvIGN1cnJlbnRNYWduaXR1ZGVTcXVhcmVkKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIHZlY3RvciBhYm91dCAoMCwgMCkgYnkgc3BlY2lmaWVkIGFuZ2xlLlxuICAgICAqIC0gSWYgcG9zaXRpdmUgWSA9IGRvd24sIHRoZW4gdmVjdG9yIGlzIHJvdGF0ZWQgY2xvY2t3aXNlLlxuICAgICAqIEBtZXRob2Qgcm90YXRlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIHJvdGF0ZWQgYWJvdXQgKDAsIDApXG4gICAgICovXG4gICAgVmVjdG9yLnJvdGF0ZSA9IGZ1bmN0aW9uICh2ZWN0b3IsIGFuZ2xlKSB7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHZlY3Rvci54ICogY29zIC0gdmVjdG9yLnkgKiBzaW4sXG4gICAgICAgICAgICB5OiB2ZWN0b3IueCAqIHNpbiArIHZlY3Rvci55ICogY29zXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIHZlY3RvciBhYm91dCBhIHNwZWNpZmllZCBwb2ludCBieSBzcGVjaWZpZWQgYW5nbGUuXG4gICAgICogQG1ldGhvZCByb3RhdGVBYm91dFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9pbnRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gW291dHB1dF1cbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvciByb3RhdGVkIGFib3V0IHRoZSBwb2ludFxuICAgICAqL1xuICAgIFZlY3Rvci5yb3RhdGVBYm91dCA9IGZ1bmN0aW9uICh2ZWN0b3IsIGFuZ2xlLCBwb2ludCwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgaWYgKCFwb2ludCkgcG9pbnQgPSBWZWN0b3IuY3JlYXRlKDAuMCwgMC4wKTtcbiAgICAgICAgaWYgKCFvdXRwdXQpIG91dHB1dCA9IHt9O1xuICAgICAgICB2YXIgeCA9IHBvaW50LnggKyAoKHZlY3Rvci54IC0gcG9pbnQueCkgKiBjb3MgLSAodmVjdG9yLnkgLSBwb2ludC55KSAqIHNpbik7XG4gICAgICAgIG91dHB1dC55ID0gcG9pbnQueSArICgodmVjdG9yLnggLSBwb2ludC54KSAqIHNpbiArICh2ZWN0b3IueSAtIHBvaW50LnkpICogY29zKTtcbiAgICAgICAgb3V0cHV0LnggPSB4O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpc2VzIGEgdmVjdG9yIChzdWNoIHRoYXQgaXRzIG1hZ25pdHVkZSBpcyBgMWApLlxuICAgICAqIEBtZXRob2Qgbm9ybWFsaXNlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIG5vcm1hbGlzZWRcbiAgICAgKi9cbiAgICBWZWN0b3Iubm9ybWFsaXNlID0gZnVuY3Rpb24gKHZlY3Rvcikge1xuICAgICAgICB2YXIgbWFnbml0dWRlID0gVmVjdG9yLm1hZ25pdHVkZSh2ZWN0b3IpO1xuICAgICAgICBpZiAobWFnbml0dWRlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgICAgICByZXR1cm4geyB4OiB2ZWN0b3IueCAvIG1hZ25pdHVkZSwgeTogdmVjdG9yLnkgLyBtYWduaXR1ZGUgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZG90LXByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBkb3RcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgZG90IHByb2R1Y3Qgb2YgdGhlIHR3byB2ZWN0b3JzXG4gICAgICovXG4gICAgVmVjdG9yLmRvdCA9IGZ1bmN0aW9uICh2ZWN0b3JBLCB2ZWN0b3JCKSB7XG4gICAgICAgIHJldHVybiAodmVjdG9yQS54ICogdmVjdG9yQi54KSArICh2ZWN0b3JBLnkgKiB2ZWN0b3JCLnkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjcm9zcy1wcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgY3Jvc3NcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgdHdvIHZlY3RvcnNcbiAgICAgKi9cbiAgICBWZWN0b3IuY3Jvc3MgPSBmdW5jdGlvbiAodmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gKHZlY3RvckEueCAqIHZlY3RvckIueSkgLSAodmVjdG9yQS55ICogdmVjdG9yQi54KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3Jvc3MtcHJvZHVjdCBvZiB0aHJlZSB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgY3Jvc3MzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JDXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgdGhyZWUgdmVjdG9yc1xuICAgICAqL1xuICAgIFZlY3Rvci5jcm9zczMgPSBmdW5jdGlvbiAodmVjdG9yQSwgdmVjdG9yQiwgdmVjdG9yQykge1xuICAgICAgICByZXR1cm4gKHZlY3RvckIueCAtIHZlY3RvckEueCkgKiAodmVjdG9yQy55IC0gdmVjdG9yQS55KSAtICh2ZWN0b3JCLnkgLSB2ZWN0b3JBLnkpICogKHZlY3RvckMueCAtIHZlY3RvckEueCk7XG4gICAgfTtcblxuICAgIC8vIExpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdmVjdG9ycy5cbiAgICBWZWN0b3IubGVycCA9IGZ1bmN0aW9uICh2ZWN0b3JBLCB2ZWN0b3JCLCBhbW91bnQpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5jcmVhdGUoXG4gICAgICAgICAgICBNYXRoLmxlcnAodmVjdG9yQS54LCB2ZWN0b3JCLngsIGFtb3VudCksXG4gICAgICAgICAgICBNYXRoLmxlcnAodmVjdG9yQS55LCB2ZWN0b3JCLnksIGFtb3VudClcbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJuIHRoZSAnYW1vdW50JyAoYmV0d2VlbiBbMCwgMV0gaWYgaW4gcmFuZ2UpIHRoYXQgY2FuIGJlIHBhc3NlZCBpbnRvIFZlY3Rvci5sZXJwKCkgdG8gb2J0YWluICdsZXJwZWRWZWN0b3InIGFnYWluLlxuICAgIFZlY3Rvci5pbnZlcnNlTGVycCA9IGZ1bmN0aW9uICh2ZWN0b3JBLCB2ZWN0b3JCLCBsZXJwZWRWZWN0b3IpIHtcbiAgICAgICAgbGV0IHhMZXJwID0gKE51bWJlci5lcXVhbHModmVjdG9yQS54LCB2ZWN0b3JCLngpKSA/IEluZmluaXR5IDogTWF0aC5pbnZlcnNlTGVycCh2ZWN0b3JBLngsIHZlY3RvckIueCwgbGVycFZlY3Rvci54KTtcbiAgICAgICAgbGV0IHlMZXJwID0gKE51bWJlci5lcXVhbHModmVjdG9yQS55LCB2ZWN0b3JCLnkpKSA/IEluZmluaXR5IDogTWF0aC5pbnZlcnNlTGVycCh2ZWN0b3JBLnksIHZlY3RvckIueSwgbGVycFZlY3Rvci55KTtcblxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoeExlcnAsIHlMZXJwKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBhZGRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtvdXRwdXRdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3Igb2YgdmVjdG9yQSBhbmQgdmVjdG9yQiBhZGRlZFxuICAgICAqL1xuICAgIFZlY3Rvci5hZGQgPSBmdW5jdGlvbiAodmVjdG9yQSwgdmVjdG9yQiwgb3V0cHV0KSB7XG4gICAgICAgIGlmICghb3V0cHV0KSBvdXRwdXQgPSB7fTtcbiAgICAgICAgb3V0cHV0LnggPSB2ZWN0b3JBLnggKyB2ZWN0b3JCLng7XG4gICAgICAgIG91dHB1dC55ID0gdmVjdG9yQS55ICsgdmVjdG9yQi55O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdGhlIHR3byB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2Qgc3ViXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBbb3V0cHV0XVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIG9mIHZlY3RvckEgYW5kIHZlY3RvckIgc3VidHJhY3RlZFxuICAgICAqL1xuICAgIFZlY3Rvci5zdWIgPSBmdW5jdGlvbiAodmVjdG9yQSwgdmVjdG9yQiwgb3V0cHV0KSB7XG4gICAgICAgIGlmICghb3V0cHV0KSBvdXRwdXQgPSB7fTtcbiAgICAgICAgb3V0cHV0LnggPSB2ZWN0b3JBLnggLSB2ZWN0b3JCLng7XG4gICAgICAgIG91dHB1dC55ID0gdmVjdG9yQS55IC0gdmVjdG9yQi55O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIGEgdmVjdG9yIGFuZCBhIHNjYWxhci5cbiAgICAgKiBAbWV0aG9kIG11bHRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhclxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIG11bHRpcGxpZWQgYnkgc2NhbGFyXG4gICAgICovXG4gICAgVmVjdG9yLm11bHQgPSBmdW5jdGlvbiAodmVjdG9yLCBzY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogdmVjdG9yLnggKiBzY2FsYXIsIHk6IHZlY3Rvci55ICogc2NhbGFyIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZGVkIGJ5IENhbWVyb24gSGFydmV5LlxuICAgICAqIE11bHRpcGx5IGVhY2ggY29tcG9uZW50IG9mIG9uZSB2ZWN0b3IgYnkgdGhlIG90aGVyIHZlY3Rvci5cbiAgICAgKi9cbiAgICBWZWN0b3IuY29tcG9uZW50TXVsdCA9IGZ1bmN0aW9uICh2ZWN0b3IxLCB2ZWN0b3IyKSB7XG4gICAgICAgIHJldHVybiB7IHg6IHZlY3RvcjEueCAqIHZlY3RvcjIueCwgeTogdmVjdG9yMS55ICogdmVjdG9yMi55IH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZXMgYSB2ZWN0b3IgYW5kIGEgc2NhbGFyLlxuICAgICAqIEBtZXRob2QgZGl2XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvciBkaXZpZGVkIGJ5IHNjYWxhclxuICAgICAqL1xuICAgIFZlY3Rvci5kaXYgPSBmdW5jdGlvbiAodmVjdG9yLCBzY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogdmVjdG9yLnggLyBzY2FsYXIsIHk6IHZlY3Rvci55IC8gc2NhbGFyIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZGVkIGJ5IENhbWVyb24gSGFydmV5LlxuICAgICAqIERpdmlkZSBlYWNoIGNvbXBvbmVudCBvZiBvbmUgdmVjdG9yIGJ5IHRoZSBvdGhlciB2ZWN0b3IuXG4gICAgICovXG4gICAgVmVjdG9yLmNvbXBvbmVudERpdiA9IGZ1bmN0aW9uICh2ZWN0b3IxLCB2ZWN0b3IyKSB7XG4gICAgICAgIHJldHVybiB7IHg6IHZlY3RvcjEueCAvIHZlY3RvcjIueCwgeTogdmVjdG9yMS55IC8gdmVjdG9yMi55IH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBlcnBlbmRpY3VsYXIgdmVjdG9yLiBTZXQgYG5lZ2F0ZWAgdG8gdHJ1ZSBmb3IgdGhlIHBlcnBlbmRpY3VsYXIgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi5cbiAgICAgKiBOT1RFOiBJZiBwb3NpdGl2ZSBZID0gZG93biwgdGhlbiBwZXJwKHZlYykgcm90YXRlcyBjbG9ja3dpc2UsIGFuZCBwZXJwKHZlYywgdHJ1ZSkgcm90YXRlcyBhbnRpY2xvY2t3aXNlLlxuICAgICAqIEBtZXRob2QgcGVycFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtuZWdhdGU9ZmFsc2VdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBUaGUgcGVycGVuZGljdWxhciB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IucGVycCA9IGZ1bmN0aW9uICh2ZWN0b3IsIG5lZ2F0ZSkge1xuICAgICAgICBuZWdhdGUgPSBuZWdhdGUgPT09IHRydWUgPyAtMSA6IDE7XG4gICAgICAgIHJldHVybiB7IHg6IG5lZ2F0ZSAqIC12ZWN0b3IueSwgeTogbmVnYXRlICogdmVjdG9yLnggfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTmVnYXRlcyBib3RoIGNvbXBvbmVudHMgb2YgYSB2ZWN0b3Igc3VjaCB0aGF0IGl0IHBvaW50cyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuICAgICAqIEBtZXRob2QgbmVnXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gVGhlIG5lZ2F0ZWQgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLm5lZyA9IGZ1bmN0aW9uICh2ZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogLXZlY3Rvci54LCB5OiAtdmVjdG9yLnkgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYW5nbGUgaW4gcmFkaWFucyBiZXR3ZWVuIHRoZSB0d28gdmVjdG9ycyByZWxhdGl2ZSB0byB0aGUgeC1heGlzLlxuICAgICAqIE5vdGUgYnkgQ2FtZXJvbiBIYXJ2ZXk6IGRvZXNuJ3Qgbm9ybWFsaXNlLiBVc2UgVmVjdG9yLmFuZ2xlQmV0d2VlbiBpbnN0ZWFkIVxuICAgICAqIEBtZXRob2QgYW5nbGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFuc1xuICAgICAqL1xuICAgIFZlY3Rvci5hbmdsZSA9IGZ1bmN0aW9uICh2ZWN0b3JBLCB2ZWN0b3JCKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmF0YW4yKHZlY3RvckIueSAtIHZlY3RvckEueSwgdmVjdG9yQi54IC0gdmVjdG9yQS54KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkZWQgYnkgQ2FtZXJvbiBIYXJ2ZXkuXG4gICAgICogR2V0cyB0aGUgYW5nbGUgYmV0d2VlbiB0d28gdmVjdG9ycyAod2hpY2ggZG9uJ3QgaGF2ZSB0byBiZSBub3JtYWxpc2VkKS5cbiAgICAgKiBOb3RlIHRoYXQgdGhlIHJldHVybmVkIGFuZ2xlIGFzc3VtZXMgcG9zaXRpdmUgYW5nbGUgPSBjbG9ja3dpc2UuXG4gICAgICovXG4gICAgVmVjdG9yLmFuZ2xlQmV0d2VlbiA9IGZ1bmN0aW9uICh2ZWN0b3JBLCB2ZWN0b3JCKSB7XG4gICAgICAgIHZhciBhbmdsZUEgPSBNYXRoLmF0YW4yKHZlY3RvckEueSwgdmVjdG9yQS54KTtcbiAgICAgICAgdmFyIGFuZ2xlQiA9IE1hdGguYXRhbjIodmVjdG9yQi55LCB2ZWN0b3JCLngpO1xuICAgICAgICB2YXIgYW5nbGVCZXR3ZWVuID0gKGFuZ2xlQiAtIGFuZ2xlQSk7XG4gICAgICAgIGlmIChhbmdsZUJldHdlZW4gPiBNYXRoLlBJKSB7XG4gICAgICAgICAgICBhbmdsZUJldHdlZW4gLT0gTWF0aC5UV09fUEk7XG4gICAgICAgIH0gZWxzZSBpZiAoYW5nbGVCZXR3ZWVuIDwgLU1hdGguUEkpIHtcbiAgICAgICAgICAgIGFuZ2xlQmV0d2VlbiArPSBNYXRoLlRXT19QSTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5nbGVCZXR3ZWVuO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRlZCBieSBDYW1lcm9uIEhhcnZleS5cbiAgICAgKiBHZXRzIHRoZSBhbmdsZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJvdmlkZWQgdmVjdG9yICh2ZWN0b3IgZG9lcyBub3QgaGF2ZSB0b1xuICAgICAqIGJlIG5vcm1hbGlzZWQpLlxuICAgICAqIE5vdGUgdGhhdCB0aGUgcmV0dXJuZWQgYW5nbGUgYXNzdW1lcyBhIHZlY3RvciBvZiAoeCwgMCkgcmV0dXJucyBhbiBhbmdsZSBvZiAwLFxuICAgICAqIGFuZCBwb3NpdGl2ZSBhbmdsZXMgPSBjbG9ja3dpc2UuXG4gICAgICovXG4gICAgVmVjdG9yLnRvQW5nbGUgPSBmdW5jdGlvbiAodmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmF0YW4yKHZlY3Rvci55LCB2ZWN0b3IueCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZGVkIGJ5IENhbWVyb24gSGFydmV5LlxuICAgICAqIFJvdGF0ZSBhIHBvaW50IFwiYW5nbGVcIiBudW1iZXIgb2YgcmFkaWFucyBhcm91bmQgYW5vdGhlciBwb2ludCAob3JiaXRDZW50cmUpIGNsb2Nrd2lzZS5cbiAgICAgKi9cbiAgICBWZWN0b3Iucm90YXRlQXJvdW5kUG9pbnQgPSBmdW5jdGlvbiAocG9pbnQsIG9yYml0Q2VudHJlLCBhbmdsZSkge1xuICAgICAgICAvLyBHZXQgZGlzcGxhY2VtZW50IHZlY3RvciBiZXR3ZWVuIHRoZSB0d28gcG9pbnRzLlxuICAgICAgICB2YXIgZGlzcGxhY2VtZW50VmVjID0gVmVjdG9yLnN1Yihwb2ludCwgb3JiaXRDZW50cmUpO1xuXG4gICAgICAgIC8vIFJvdGF0ZSB0aGlzIHZlY3RvciBieSB0aGUgc3BlY2lmaWVkIGFuZ2xlLlxuICAgICAgICB2YXIgcm90YXRlZFZlYyA9IFZlY3Rvci5yb3RhdGUoZGlzcGxhY2VtZW50VmVjLCBhbmdsZSk7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBuZXcgdmVjdG9yIHRvIHRoZSBvcmJpdCBjZW50cmUgdG8gb2J0YWluIHRoZSBuZXcgcm90YXRlZCBwb2ludC5cbiAgICAgICAgcmV0dXJuIFZlY3Rvci5hZGQob3JiaXRDZW50cmUsIHJvdGF0ZWRWZWMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRlZCBieSBDYW1lcm9uIEhhcnZleS5cbiAgICAgKiBHZXQgdGhlIHNjYWxhciBwcm9qZWN0aW9uIG9mIHBvaW50IG9udG8gbGluZSBkZXNjcmliZWQgYnkgKGxpbmVNaW5Qb2ludCwgbGluZU1heFBvaW50KS5cbiAgICAgKi9cbiAgICBWZWN0b3Iuc2NhbGFyUHJvamVjdE9udG9MaW5lID0gZnVuY3Rpb24gKGxpbmVNaW5Qb2ludCwgbGluZU1heFBvaW50LCBwb2ludCkge1xuICAgICAgICB2YXIgbGluZVZlYyA9IFZlY3Rvci5zdWIobGluZU1heFBvaW50LCBsaW5lTWluUG9pbnQpO1xuICAgICAgICB2YXIgbGluZVZlY1VuaXQgPSBWZWN0b3Iubm9ybWFsaXNlKGxpbmVWZWMpO1xuICAgICAgICB2YXIgbGluZU1pblRvUG9pbnRWZWMgPSBWZWN0b3Iuc3ViKHBvaW50LCBsaW5lTWluUG9pbnQpO1xuICAgICAgICByZXR1cm4gVmVjdG9yLmRvdChsaW5lVmVjVW5pdCwgbGluZU1pblRvUG9pbnRWZWMpO1xuICAgIH07XG5cbiAgICAvLyBHZXQgdGhlIHNjYWxhciBwcm9qZWN0aW9uIG9mIG9uZSB2ZWN0b3Igb250byBhIG5vcm1hbCB2ZWN0b3IuXG4gICAgVmVjdG9yLnNjYWxhclByb2plY3RPbnRvTm9ybWFsID0gZnVuY3Rpb24gKHZlY3Rvciwgbm9ybWFsKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IuZG90KG5vcm1hbCwgdmVjdG9yKTtcbiAgICB9O1xuXG4gICAgLy8gR2V0IHRoZSB2ZWN0b3IgcHJvamVjdGlvbiBvZiBvbmUgdmVjdG9yIG9udG8gYSBub3JtYWwgdmVjdG9yLlxuICAgIFZlY3Rvci52ZWN0b3JQcm9qZWN0T250b05vcm1hbCA9IGZ1bmN0aW9uICh2ZWN0b3IsIG5vcm1hbCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yLm11bHQobm9ybWFsLCBWZWN0b3Iuc2NhbGFyUHJvamVjdE9udG9Ob3JtYWwodmVjdG9yLCBub3JtYWwpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkZWQgYnkgQ2FtZXJvbiBIYXJ2ZXkuXG4gICAgICogR2V0IFswLCAxXSByYW5nZSByZXR1cm4gdmFsdWUgZnJvbSBWZWN0b3Iuc2NhbGFyUHJvamVjdE9udG9MaW5lKCkgKG9yIG91dHNpZGUgb2YgdGhpc1xuICAgICAqIHJhbmdlIGlmIHRoZSBwb2ludCBkb2Vzbid0IG1hcCB3aXRoaW4gdGhlIGxpbmUgc2VnbWVudCkuXG4gICAgICovXG4gICAgVmVjdG9yLnByb2dyZXNzQWxvbmdMaW5lID0gZnVuY3Rpb24gKGxpbmVNaW5Qb2ludCwgbGluZU1heFBvaW50LCBwb2ludCkge1xuICAgICAgICB2YXIgbGluZVZlYyA9IFZlY3Rvci5zdWIobGluZU1heFBvaW50LCBsaW5lTWluUG9pbnQpO1xuICAgICAgICB2YXIgbGluZVZlY0xlbiA9IFZlY3Rvci5tYWduaXR1ZGUobGluZVZlYyk7XG4gICAgICAgIHZhciBsaW5lVmVjVW5pdCA9IFZlY3Rvci5ub3JtYWxpc2UobGluZVZlYyk7XG4gICAgICAgIHZhciBsaW5lTWluVG9Qb2ludFZlYyA9IFZlY3Rvci5zdWIocG9pbnQsIGxpbmVNaW5Qb2ludCk7XG4gICAgICAgIHZhciBwcm9qZWN0aW9uID0gVmVjdG9yLmRvdChsaW5lVmVjVW5pdCwgbGluZU1pblRvUG9pbnRWZWMpO1xuICAgICAgICByZXR1cm4gKHByb2plY3Rpb24gLyBsaW5lVmVjTGVuKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkZWQgYnkgQ2FtZXJvbiBIYXJ2ZXkuXG4gICAgICogUHJvamVjdCBwb2ludCBvbnRvIGNsb3Nlc3QgcG9pbnQgb2YgbGluZSBkZXNjcmliZWQgYnkgKGxpbmVNaW5Qb2ludCwgbGluZU1heFBvaW50KS5cbiAgICAgKiBDbG9zZXN0IHBvaW50IGNhcHMgdG8gdGhlIGxpbmUgZW5kIHBvaW50cy5cbiAgICAgKi9cbiAgICBWZWN0b3IuY2xvc2VzdFBvaW50VG9MaW5lID0gZnVuY3Rpb24gKGxpbmVNaW5Qb2ludCwgbGluZU1heFBvaW50LCBwb2ludCkge1xuICAgICAgICB2YXIgbGluZVZlYyA9IFZlY3Rvci5zdWIobGluZU1heFBvaW50LCBsaW5lTWluUG9pbnQpO1xuICAgICAgICB2YXIgbGluZUxlbmd0aCA9IFZlY3Rvci5tYWduaXR1ZGUobGluZVZlYyk7XG4gICAgICAgIHZhciBsaW5lVmVjVW5pdCA9IFZlY3Rvci5kaXYobGluZVZlYywgbGluZUxlbmd0aCk7XG4gICAgICAgIHZhciBsaW5lTWluVG9Qb2ludFZlYyA9IFZlY3Rvci5zdWIocG9pbnQsIGxpbmVNaW5Qb2ludCk7XG4gICAgICAgIHZhciBzY2FsYXJQcm9qID0gVmVjdG9yLmRvdChsaW5lVmVjVW5pdCwgbGluZU1pblRvUG9pbnRWZWMpO1xuXG4gICAgICAgIC8vIENsYW1wIHRoZSBzY2FsYXIgcHJvamVjdGlvbiB0byB0aGUgbGluZSBtaW4gLyBtYXggcG9pbnRzLlxuICAgICAgICBpZiAoc2NhbGFyUHJvaiA8IDAuMCkge1xuICAgICAgICAgICAgc2NhbGFyUHJvaiA9IDAuMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NhbGFyUHJvaiA+IGxpbmVMZW5ndGgpIHtcbiAgICAgICAgICAgIHNjYWxhclByb2ogPSBsaW5lTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFZlY3Rvci5hZGQobGluZU1pblBvaW50LCBWZWN0b3IubXVsdChsaW5lVmVjVW5pdCwgc2NhbGFyUHJvaikpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRlZCBieSBDYW1lcm9uIEhhcnZleS5cbiAgICAgKiBHZXQgZGlzdGFuY2Ugb2YgcG9pbnQgZnJvbSBsaW5lIGRlc2NyaWJlZCBieSAobGluZU1pblBvaW50LCBsaW5lTWF4UG9pbnQpLlxuICAgICAqL1xuICAgIFZlY3Rvci5kaXN0YW5jZUZyb21MaW5lID0gZnVuY3Rpb24gKGxpbmVNaW5Qb2ludCwgbGluZU1heFBvaW50LCBwb2ludCkge1xuICAgICAgICB2YXIgY2xvc2VzdFBvaW50ID0gVmVjdG9yLmNsb3Nlc3RQb2ludFRvTGluZShsaW5lTWluUG9pbnQsIGxpbmVNYXhQb2ludCwgcG9pbnQpO1xuICAgICAgICByZXR1cm4gVmVjdG9yLm1hZ25pdHVkZShWZWN0b3Iuc3ViKHBvaW50LCBjbG9zZXN0UG9pbnQpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkZWQgYnkgQ2FtZXJvbiBIYXJ2ZXkuXG4gICAgICogR2V0IHNxdWFyZWQgZGlzdGFuY2Ugb2YgcG9pbnQgZnJvbSBsaW5lIGRlc2NyaWJlZCBieSAobGluZU1pblBvaW50LCBsaW5lTWF4UG9pbnQpLlxuICAgICAqL1xuICAgIFZlY3Rvci5kaXN0YW5jZUZyb21MaW5lU3F1YXJlZCA9IGZ1bmN0aW9uIChsaW5lTWluUG9pbnQsIGxpbmVNYXhQb2ludCwgcG9pbnQpIHtcbiAgICAgICAgdmFyIGNsb3Nlc3RQb2ludCA9IFZlY3Rvci5jbG9zZXN0UG9pbnRUb0xpbmUobGluZU1pblBvaW50LCBsaW5lTWF4UG9pbnQsIHBvaW50KTtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5tYWduaXR1ZGVTcXVhcmVkKFZlY3Rvci5zdWIocG9pbnQsIGNsb3Nlc3RQb2ludCkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRlZCBieSBDYW1lcm9uIEhhcnZleS5cbiAgICAgKiBSZWZsZWN0IGluY29taW5nIHZlY3RvciB0aHJvdWdoIG5vcm1hbC5cbiAgICAgKi9cbiAgICBWZWN0b3IucmVmbGVjdCA9IGZ1bmN0aW9uIChpbmNvbWluZ1ZlYywgbm9ybWFsKSB7XG4gICAgICAgIC8vIG91dGdvaW5nVmVjID0gaW5jb21pbmdWZWMgLSAyICogKChpbmNvbWluZ1ZlYy5ub3JtYWwpLm5vcm1hbClcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5zdWIoaW5jb21pbmdWZWMsIFZlY3Rvci5tdWx0KFZlY3Rvci5tdWx0KG5vcm1hbCwgVmVjdG9yLmRvdChpbmNvbWluZ1ZlYywgbm9ybWFsKSksIDIuMCkpO1xuICAgIH07XG5cbiAgICAvLyBGbG9vcnMgYWxsIGNvbXBvbmVudHMgb2YgdmVjdG9yLlxuICAgIFZlY3Rvci5mbG9vciA9IGZ1bmN0aW9uICh2ZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5jcmVhdGUoTWF0aC5mbG9vcih2ZWN0b3IueCksIE1hdGguZmxvb3IodmVjdG9yLnkpKTtcbiAgICB9O1xuXG4gICAgLy8gQ2VpbHMgYWxsIGNvbXBvbmVudHMgb2YgdmVjdG9yLlxuICAgIFZlY3Rvci5jZWlsID0gZnVuY3Rpb24gKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gVmVjdG9yLmNyZWF0ZShNYXRoLmNlaWwodmVjdG9yLngpLCBNYXRoLmNlaWwodmVjdG9yLnkpKTtcbiAgICB9O1xuXG4gICAgLy8gQWJzb2x1dGUgdmFsdWVzIGFsbCBjb21wb25lbnRzIG9mIHZlY3Rvci5cbiAgICBWZWN0b3IuYWJzID0gZnVuY3Rpb24gKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gVmVjdG9yLmNyZWF0ZShNYXRoLmFicyh2ZWN0b3IueCksIE1hdGguYWJzKHZlY3Rvci55KSk7XG4gICAgfTtcblxuICAgIC8vIFJldHVybnMgd2hldGhlciBhbGwgY29tcG9uZW50cyBvZiB2ZWN0b3JBIGFyZSBlcXVhbCB0byB2ZWN0b3JCIHdpdGhpbiBhbiBvcHRpb25hbCB0aHJlc2hvbGQuXG4gICAgVmVjdG9yLmVxdWFsVG8gPSBmdW5jdGlvbiAodmVjdG9yQSwgdmVjdG9yQiwgdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBOdW1iZXIuZXF1YWxzKHZlY3RvckEueCwgdmVjdG9yQi54LCB0aHJlc2hvbGQpICYmXG4gICAgICAgICAgICBOdW1iZXIuZXF1YWxzKHZlY3RvckEueSwgdmVjdG9yQi55LCB0aHJlc2hvbGQpXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIFJldHVybnMgd2hldGhlciBhbGwgY29tcG9uZW50cyBvZiB2ZWN0b3JBIGFyZSBsZXNzIHRoYW4gdmVjdG9yQi5cbiAgICBWZWN0b3IubGVzc1RoYW4gPSBmdW5jdGlvbiAodmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHZlY3RvckEueCA8IHZlY3RvckIueCkgJiZcbiAgICAgICAgICAgICh2ZWN0b3JCLnkgPCB2ZWN0b3JCLnkpXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIFJldHVybnMgd2hldGhlciBhbGwgY29tcG9uZW50cyBvZiB2ZWN0b3JBIGFyZSBsZXNzL2VxdWFsIHRvIHZlY3RvckIuXG4gICAgVmVjdG9yLmxlc3NFcXVhbFRvID0gZnVuY3Rpb24gKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh2ZWN0b3JBLnggPD0gdmVjdG9yQi54KSAmJlxuICAgICAgICAgICAgKHZlY3RvckIueSA8PSB2ZWN0b3JCLnkpXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIFJldHVybnMgd2hldGhlciBhbGwgY29tcG9uZW50cyBvZiB2ZWN0b3JBIGFyZSBncmVhdGVyIHRoYW4gdmVjdG9yQi5cbiAgICBWZWN0b3IuZ3JlYXRlclRoYW4gPSBmdW5jdGlvbiAodmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHZlY3RvckEueCA+IHZlY3RvckIueCkgJiZcbiAgICAgICAgICAgICh2ZWN0b3JCLnkgPiB2ZWN0b3JCLnkpXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIFJldHVybnMgd2hldGhlciBhbGwgY29tcG9uZW50cyBvZiB2ZWN0b3JBIGFyZSBncmVhdGVyL2VxdWFsIHRvIHZlY3RvckIuXG4gICAgVmVjdG9yLmdyZWF0ZXJFcXVhbFRvID0gZnVuY3Rpb24gKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh2ZWN0b3JBLnggPj0gdmVjdG9yQi54KSAmJlxuICAgICAgICAgICAgKHZlY3RvckIueSA+PSB2ZWN0b3JCLnkpXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIE1vZGlmaWVzIHZlY3RvckEgdG8gYmUgdGhlIHN1bSBvZiBpdHNlbGYgYW5kIHZlY3RvckIuXG4gICAgVmVjdG9yLmFkZFRvID0gZnVuY3Rpb24gKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgICAgICAgdmVjdG9yQS54ICs9IHZlY3RvckIueDtcbiAgICAgICAgdmVjdG9yQS55ICs9IHZlY3RvckIueTtcbiAgICB9O1xuXG4gICAgLy8gTW9kaWZpZXMgdmVjdG9yQSB0byBiZSB0aGUgcmVzdWx0IG9mICh2ZWN0b3JBIC0gdmVjdG9yQikuXG4gICAgVmVjdG9yLnN1YnRyYWN0RnJvbSA9IGZ1bmN0aW9uICh2ZWN0b3JBLCB2ZWN0b3JCKSB7XG4gICAgICAgIHZlY3RvckEueCAtPSB2ZWN0b3JCLng7XG4gICAgICAgIHZlY3RvckEueSAtPSB2ZWN0b3JCLnk7XG4gICAgfTtcblxuICAgIC8vIFBpeGktc3BlY2lmaWM6IGdldCB0aGUgcG9zaXRpb24gb2YgdGhlIHNwZWNpZmllZCBEaXNwbGF5T2JqZWN0ICd2aWV3JyBpbiB0ZXJtc1xuICAgIC8vIG9mIHRoZSB1cHBlcm1vc3QgcGFyZW50LlxuICAgIFZlY3Rvci5nZXRHbG9iYWxQb3MgPSBmdW5jdGlvbiAodmlldykge1xuICAgICAgICByZXR1cm4gKHZpZXcpID8gdmlldy50b0dsb2JhbChuZXcgUElYSS5Qb2ludCgwLCAwKSkgOiBudWxsO1xuICAgIH07XG5cbiAgICAvLyBQaXhpLXNwZWNpZmljOiB0cmFuc2Zvcm1zIGEgcm9vdCB2aWV3IHNwYWNlIHBvc2l0aW9uIChlLmcuIHN0YWdlIGNoaWxkIGVsZW1lbnRcbiAgICAvLyBvciBtb3VzZSBjbGljayBwb3NpdGlvbiBmcm9tIGV2ZW50LmRhdGEuZ2xvYmFsKSBpbnRvIHRoZSBzcGFjZSBvZiB0aGVcbiAgICAvLyBEaXNwbGF5T2JqZWN0ICduZXdQYXJlbnRWaWV3JywgYXMgaWYgJ25ld1BhcmVudFZpZXcnIHdhcyBpdHMgcGFyZW50LlxuICAgIFZlY3Rvci50cmFuc2Zvcm1HbG9iYWxUb0NoaWxkID0gZnVuY3Rpb24gKGdsb2JhbFBvcywgbmV3UGFyZW50Vmlldykge1xuICAgICAgICByZXR1cm4gKGdsb2JhbFBvcyAmJiBuZXdQYXJlbnRWaWV3KSA/IG5ld1BhcmVudFZpZXcudG9Mb2NhbChnbG9iYWxQb3MpIDogZ2xvYmFsUG9zO1xuICAgIH07XG5cbiAgICAvLyBQaXhpLXNwZWNpZmljOiB0cmFuc2Zvcm1zIGEgRGlzcGxheU9iamVjdCAndmlldycgaW50byB0aGUgc3BhY2Ugb2YgdGhlXG4gICAgLy8gRGlzcGxheU9iamVjdCAnbmV3UGFyZW50VmlldycuIEluIG90aGVyIHdvcmRzLCB0aGUgcmV0dXJuZWQgcG9zaXRpb24gaXNcbiAgICAvLyB2aWV3LnBvc2l0aW9uIGFzIGlmICduZXdQYXJlbnRWaWV3JyB3YXMgaXRzIHBhcmVudCwgbm90IGl0cyBjdXJyZW50IHBhcmVudC5cbiAgICAvLyBUaGlzIGlzIHVzZWZ1bCB3aGVuIHJlLXBhcmVudGluZyBhIERpc3BsYXlPYmplY3QgdW5kZXIgYSBuZXcgcGFyZW50LCBidXRcbiAgICAvLyB5b3UgZG9uJ3Qgd2FudCB0byBtb3ZlIGl0IHBoeXNpY2FsbHkgb24gdGhlIHNjcmVlbiBpbiB0aGUgcHJvY2VzcywgZS5nLlxuICAgIC8vIC0gdmFyIG5ld1Bvc2l0aW9uID0gVmVjdG9yLnRyYW5zZm9ybVRvKHZpZXcsIG5ld1BhcmVudFZpZXcpO1xuICAgIC8vIC0gdmlldy5wb3NpdGlvbi5jb3B5KG5ld1Bvc2l0aW9uKTtcbiAgICAvLyAtIG5ld1BhcmVudFZpZXcuYWRkQ2hpbGQodmlldyk7XG4gICAgVmVjdG9yLnRyYW5zZm9ybVRvID0gZnVuY3Rpb24gKHZpZXcsIG5ld1BhcmVudFZpZXcpIHtcbiAgICAgICAgLy8gVHJhbnNmb3JtIHRoZSB2aWV3J3MgcG9zaXRpb24gdXAgdG8gdGhlIHJvb3QgdmlldydzIChnbG9iYWwpIHNwYWNlLlxuICAgICAgICB2YXIgZ2xvYmFsUG9zID0gVmVjdG9yLmdldEdsb2JhbFBvcyh2aWV3KTtcblxuICAgICAgICAvLyBUcmFuc2Zvcm0gdGhlIGdsb2JhbCBwb3NpdGlvbiBiYWNrIGRvd24gaW50byB0aGUgc3BhY2Ugb2YgdGhlIGRlc2lyZWRcbiAgICAgICAgLy8gcGFyZW50IHZpZXcuXG4gICAgICAgIHJldHVybiBWZWN0b3IudHJhbnNmb3JtR2xvYmFsVG9DaGlsZChnbG9iYWxQb3MsIG5ld1BhcmVudFZpZXcpO1xuICAgIH07XG5cbiAgICAvLyBDb21tb24gdmVjdG9ycy5cbiAgICBWZWN0b3IuWmVybyA9IFZlY3Rvci5jcmVhdGUoMC4wLCAwLjApO1xuICAgIFZlY3Rvci5VcCA9IFZlY3Rvci5jcmVhdGUoMC4wLCAtMS4wKTtcbiAgICBWZWN0b3IuRG93biA9IFZlY3Rvci5jcmVhdGUoMC4wLCAxLjApO1xuICAgIFZlY3Rvci5MZWZ0ID0gVmVjdG9yLmNyZWF0ZSgtMS4wLCAwLjApO1xuICAgIFZlY3Rvci5SaWdodCA9IFZlY3Rvci5jcmVhdGUoMS4wLCAwLjApO1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlZlY3RvciA9IFZlY3Rvcjtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHQvLyBQaWVjZXdpc2UgQmV6aWVyIGN1cnZlIHNwZWNpZmllZCBieSBhbiBhcnJheSBvZiBwb2ludHMgaW4gdGhlIGZvcm1hdDpcblx0Ly8gLSBbcG9pbnQsIGNvbnRyb2xQb2ludCwgY29udHJvbFBvaW50LCBwb2ludCwgY29udHJvbFBvaW50LCBjb250cm9sUG9pbnQsIHBvaW50XSBldGNcblx0Ly8gVGltZSBpcyBjb21wdXRlZCBhcyBbMCwgMV0gZm9yIGVhY2ggc2VnbWVudC5cblx0dmFyIEJlemllckN1cnZlID0gZnVuY3Rpb24gKHBvaW50cykge1xuXHRcdHRoaXMuX3BvaW50cyA9IGlzRGVmaW5lZChwb2ludHMpID8gYXJyYXlpZnkocG9pbnRzKSA6IFtdO1xuXG5cdFx0aWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQmV6aWVyQ3VydmU6IHBvaW50IGxpc3QgaXMgaW52YWxpZC5cIik7XG5cdFx0fVxuXHR9O1xuXHR2YXIgcCA9IEJlemllckN1cnZlLnByb3RvdHlwZTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJwb2ludHNcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdQb2ludHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50cyA9IGlzRGVmaW5lZChwb2ludHMpID8gYXJyYXlpZnkocG9pbnRzKSA6IFtdO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJCZXppZXJDdXJ2ZTogcHJvdmlkZWQgcG9pbnQgbGlzdCBpcyBpbnZhbGlkLlwiKTtcblx0XHRcdH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRzO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJzZWdtZW50Q291bnRcIiwge1xuICAgIFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgXHRcdHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IE1hdGguZmxvb3IodGhpcy5fcG9pbnRzLmxlbmd0aCAvIDMpIDogMDtcbiAgICBcdH1cbiAgICB9KTtcblxuXHQvLyBPYnRhaW5zIHRoZSAyRCBsb2NhdGlvbiBhbG9uZyB0aGUgcGllY2V3aXNlIGN1cnZlIGF0IHRpbWUgdCwgd2hlcmUgTWF0aC5mbG9vcih0KSBkZXRlcm1pbmVzXG5cdC8vIHRoZSBzdWItY3VydmUgdG8gc2FtcGxlIGZyb20sIGFuZCB0aGUgZnJhY3Rpb25hbCBwYXJ0IGVxdWF0ZXMgdG8gdGhlIFswLCAxXSByYW5nZSB0aW1lIHZhbHVlXG5cdC8vIGZvciB0aGF0IHN1Yi1jdXJ2ZS5cblx0cC5nZXRQb3NpdGlvbkF0ID0gZnVuY3Rpb24gKHQpIHtcblx0XHRpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHQgPD0gMC4wKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcG9pbnRzLmZpcnN0KCk7XG5cdFx0fVxuXHRcdGlmICh0ID49IHRoaXMuc2VnbWVudENvdW50KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcG9pbnRzLmxhc3QoKTtcblx0XHR9XG5cblx0XHR2YXIgc3RhcnRJbmRleCA9IChNYXRoLmZsb29yKHQpICogMyk7XG5cdFx0dmFyIHVuaXRUID0gKHQgLSBNYXRoLmZsb29yKHQpKTtcblxuICAgIFx0dmFyIHN0YXJ0UG9pbnQgPSB0aGlzLl9wb2ludHNbc3RhcnRJbmRleF07XG4gICAgXHR2YXIgY29udHJvbFBvaW50MSA9IHRoaXMuX3BvaW50c1tzdGFydEluZGV4ICsgMV07XG4gICAgXHR2YXIgY29udHJvbFBvaW50MiA9IHRoaXMuX3BvaW50c1tzdGFydEluZGV4ICsgMl07XG4gICAgXHR2YXIgZW5kUG9pbnQgPSB0aGlzLl9wb2ludHNbc3RhcnRJbmRleCArIDNdO1xuXG4gICAgXHR2YXIgeCA9IHRoaXMuX3NvbHZlKHN0YXJ0UG9pbnQueCwgY29udHJvbFBvaW50MS54LCBjb250cm9sUG9pbnQyLngsIGVuZFBvaW50LngsIHVuaXRUKTtcbiAgICBcdHZhciB5ID0gdGhpcy5fc29sdmUoc3RhcnRQb2ludC55LCBjb250cm9sUG9pbnQxLnksIGNvbnRyb2xQb2ludDIueSwgZW5kUG9pbnQueSwgdW5pdFQpO1xuXG4gICAgXHRpZiAoIWlzRGVmaW5lZCh4KSB8fCAhaXNEZWZpbmVkKHkpKSB7XG4gICAgXHRcdHJldHVybiBudWxsO1xuICAgIFx0fVxuXG4gICAgXHRyZXR1cm4geyB4OiB4LCB5OiB5IH07XG5cdH07XG5cbiAgICAvLyBDYWxscyBnZXRQb3NpdGlvbkF0KCkgd2l0aCB1bml0IHRpbWUgdmFsdWUgaW4gcmFuZ2UgWzAsIDFdIHRyYW5zZm9ybWVkIGFjY29yZGluZ2x5IChhdm9pZHNcbiAgICAvLyBoYXZpbmcgdG8ga25vdyBzcGVjaWZpY2FsbHkgaG93IG1hbnkgc2VnbWVudHMgdGhlcmUgYXJlIGluIHRoZSBwaWVjZXdpc2UgY3VydmUpLlxuICAgIHAuZ2V0UG9zaXRpb25BdFVuaXQgPSBmdW5jdGlvbiAodW5pdFQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9zaXRpb25BdCh1bml0VCAqIHRoaXMuc2VnbWVudENvdW50KTtcbiAgICB9O1xuXG5cdHAuZ2V0WEF0ID0gZnVuY3Rpb24gKHksIHN0b3BBdEZpcnN0UmVzdWx0KSB7XG5cdFx0Ly8gVE9ETzogVW5pbXBsZW1lbnRlZC5cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9O1xuXG5cdHAuZ2V0WUF0ID0gZnVuY3Rpb24gKHgsIHN0b3BBdEZpcnN0UmVzdWx0KSB7XG5cdFx0Ly8gVE9ETzogVW5pbXBsZW1lbnRlZC5cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9O1xuXG4gICAgcC5pc1ZhbGlkID0gZnVuY3Rpb24gKCkge1xuICAgIFx0cmV0dXJuICh0aGlzLl9wb2ludHMubGVuZ3RoID49IDQpICYmICh0aGlzLl9wb2ludHMubGVuZ3RoICUgMyA9PT0gMSk7XG4gICAgfTtcblxuICAgIC8vIFNvbHZlcyAxRCBCZXppZXIgZXF1YXRpb24uXG4gICAgcC5fc29sdmUgPSBmdW5jdGlvbiAoc3RhcnQsIGNwMSwgY3AyLCBlbmQsIHVuaXRUKSB7XG4gICAgXHRpZiAoIXRoaXMuaXNWYWxpZCgpIHx8XG4gICAgXHRcdCFNYXRoLmlzSW5SYW5nZSh1bml0VCwgMC4wLCAxLjApKSB7XG4gICAgXHRcdHJldHVybiB1bmRlZmluZWQ7XG4gICAgXHR9XG5cbiAgICBcdHZhciBhID0gKGVuZCAtICgzLjAgKiBjcDIpICsgKDMuMCAqIGNwMSkgLSBzdGFydCk7XG4gICAgXHR2YXIgYiA9ICgoMy4wICogY3AyKSAtICg2LjAgKiBjcDEpICsgKDMuMCAqIHN0YXJ0KSk7XG4gICAgXHR2YXIgYyA9ICgoMy4wICogY3AxKSAtICgzLjAgKiBzdGFydCkpO1xuXG4gICAgXHR2YXIgZGlzcGxhY2VtZW50ID0gKHVuaXRUICogYSk7XG4gICAgXHRkaXNwbGFjZW1lbnQgKz0gYjtcbiAgICBcdGRpc3BsYWNlbWVudCAqPSB1bml0VDtcbiAgICBcdGRpc3BsYWNlbWVudCArPSBjO1xuICAgIFx0ZGlzcGxhY2VtZW50ICo9IHVuaXRUO1xuXG4gICAgXHRyZXR1cm4gKHN0YXJ0ICsgZGlzcGxhY2VtZW50KTtcbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkJlemllckN1cnZlID0gQmV6aWVyQ3VydmU7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0dmFyIEJlemllckN1cnZlID0gaW5jbHVkZShcImZyYW1ld29yay5CZXppZXJDdXJ2ZVwiKTtcblxuXHQvLyBFeHRlbnNpb24gb24gQmV6aWVyQ3VydmUgY2xhc3Mgd2hpY2ggcHJlY29tcHV0ZXMgYW4gYXBwcm94aW1hdGluZyBoaWdoLXJlc29sdXRpb24gbGluZWFyXG5cdC8vIHBpZWNld2lzZSBjdXJ2ZSB0byBtYXRjaCB0aGUgcGllY2V3aXNlIEJlemllciBjdXJ2ZS4gVGhlIHJlc29sdXRpb24gb2YgdGhpcyBhcHByb3hpbWF0aW9uXG5cdC8vIGNhbiBiZSBzcGVjaWZpZWQgZGVwZW5kaW5nIG9uIHBlcmZvcm1hbmNlIG5lZWRzLlxuXHR2YXIgQmV6aWVyQ3VydmVBcHByb3ggPSBmdW5jdGlvbiAocG9pbnRzLCBzdWJkaXZpc2lvbnNQZXJTZWdtZW50KSB7XG5cdFx0QmV6aWVyQ3VydmUuY2FsbCh0aGlzLCBwb2ludHMpO1xuXG5cdFx0dGhpcy5fc3ViZGl2aXNpb25zUGVyU2VnbWVudCA9IHN1YmRpdmlzaW9uc1BlclNlZ21lbnQgfHwgMjA7ICAvLyAxIHN1YmRpdmlzaW9uID0gbGluZSBzZWdtZW50LlxuXHRcdHRoaXMuX3ByZWNvbXB1dGVkTFVUID0gW107XG5cdFx0dGhpcy5fcHJlY29tcHV0ZWRSYW5nZXMgPSBbXTsgIC8vIE1pbi9tYXggWCBhbmQgWSBwZXIgc2VnbWVudC5cblxuXHRcdC8vIFByZWNvbXB1dGUgcG9zaXRpb25zIGFsb25nIGN1cnZlLlxuXHRcdHRoaXMuX2NyZWF0ZUxVVCgpO1xuXHR9O1xuXHR2YXIgcyA9IEJlemllckN1cnZlLnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoQmV6aWVyQ3VydmVBcHByb3gsIEJlemllckN1cnZlKTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJwb2ludHNcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdQb2ludHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50cyA9IGlzRGVmaW5lZChwb2ludHMpID8gYXJyYXlpZnkocG9pbnRzKSA6IFtdO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJCZXppZXJDdXJ2ZTogcHJvdmlkZWQgcG9pbnQgbGlzdCBpcyBpbnZhbGlkLlwiKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY3JlYXRlTFVUKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwicHJlY29tcHV0ZWRMVVRcIiwge1xuICAgIFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgXHRcdHJldHVybiB0aGlzLl9wcmVjb21wdXRlZExVVDtcbiAgICBcdH1cbiAgICB9KTtcblxuICAgIC8vIEdldCBYIGNvb3JkaW5hdGUgb24gY3VydmUgd2hpY2ggYmVzdCBtYXRjaGVzIHByb3ZpZGVkIFkgdmFsdWUuIFJldHVybnMgZWl0aGVyIGZpcnN0XG4gICAgLy8gZm91bmQgcmVzdWx0LCBvciBhbGwgcmVzdWx0cyBpbiBhbiBhcnJheS5cblx0cC5nZXRYQXQgPSBmdW5jdGlvbiAoeSwgc3RvcEF0Rmlyc3RSZXN1bHQpIHtcblx0XHRpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdGlmICghaXNEZWZpbmVkKHN0b3BBdEZpcnN0UmVzdWx0KSkge1xuXHRcdFx0c3RvcEF0Rmlyc3RSZXN1bHQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgbWF0Y2hpbmdTZWdtZW50ID0gLTE7XG5cdFx0dmFyIGxvd2VzdCA9IHtcblx0XHRcdHNlZ21lbnRJbmRleDogLTEsXG5cdFx0XHR2YWx1ZTogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG5cdFx0fTtcblx0XHR2YXIgaGlnaGVzdCA9IHtcblx0XHRcdHNlZ21lbnRJbmRleDogLTEsXG5cdFx0XHR2YWx1ZTogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG5cdFx0fTtcblx0XHR2YXIgaTtcblxuXHRcdC8vIEZpbmQgYSBjdXJ2ZSBzZWdtZW50IHdoaWNoIGVuY2Fwc3VsYXRlcyB0aGUgcHJvdmlkZWQgY29vcmRpbmF0ZS5cblx0XHRmb3IgKGkgPSAwOyBpIDwgdGhpcy5zZWdtZW50Q291bnQ7IGkrKykge1xuXHRcdFx0dmFyIHNlZ21lbnRCb3VuZHMgPSB0aGlzLl9nZXRTZWdtZW50Qm91bmRzKGkpO1xuXHRcdFx0aWYgKCFzZWdtZW50Qm91bmRzKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VnbWVudEJvdW5kcy5taW5ZIDwgbG93ZXN0LnZhbHVlKSB7XG5cdFx0XHRcdGxvd2VzdC5zZWdtZW50SW5kZXggPSBpO1xuXHRcdFx0XHRsb3dlc3QudmFsdWUgPSBzZWdtZW50Qm91bmRzLm1pblk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2VnbWVudEJvdW5kcy5tYXhZID4gaGlnaGVzdC52YWx1ZSkge1xuXHRcdFx0XHRoaWdoZXN0LnNlZ21lbnRJbmRleCA9IGk7XG5cdFx0XHRcdGhpZ2hlc3QudmFsdWUgPSBzZWdtZW50Qm91bmRzLm1heFk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChNYXRoLmlzSW5SYW5nZSh5LCBzZWdtZW50Qm91bmRzLm1pblksIHNlZ21lbnRCb3VuZHMubWF4WSkpIHtcblx0XHRcdFx0bWF0Y2hpbmdTZWdtZW50ID0gaTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGNsb3Nlc3QgbWF0Y2hpbmcgc2VnbWVudCBpZiBubyBlbmNhcHN1bGF0aW5nIHNlZ21lbnQgY2FuIGJlIGZvdW5kLlxuXHRcdGlmIChtYXRjaGluZ1NlZ21lbnQgPT09IC0xKSB7XG5cdFx0XHRpZiAoeSA8IGxvd2VzdC52YWx1ZSkge1xuXHRcdFx0XHRtYXRjaGluZ1NlZ21lbnQgPSBsb3dlc3Quc2VnbWVudEluZGV4O1xuXHRcdFx0XHR5ID0gbG93ZXN0LnZhbHVlO1xuXHRcdFx0fSBlbHNlIGlmICh5ID4gaGlnaGVzdC52YWx1ZSkge1xuXHRcdFx0XHRtYXRjaGluZ1NlZ21lbnQgPSBoaWdoZXN0LnNlZ21lbnRJbmRleDtcblx0XHRcdFx0eSA9IGhpZ2hlc3QudmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIHN0YXJ0SW5kZXggPSBtYXRjaGluZ1NlZ21lbnQgKiB0aGlzLl9zdWJkaXZpc2lvbnNQZXJTZWdtZW50O1xuXHRcdHZhciByZXN1bHRzID0gW107XG5cblx0XHQvLyBQZXJmb3JtIDFEIGNsb3Nlc3QgcG9pbnQgdG8gbGluZSB0ZXN0cyBwZXIgZGl2aWRlZCBzZWN0aW9uIG9mIG1hdGNoaW5nIHNlZ21lbnQuXG5cdFx0Zm9yIChpID0gMDsgaSA8IHRoaXMuX3N1YmRpdmlzaW9uc1BlclNlZ21lbnQ7IGkrKykge1xuXHRcdFx0dmFyIGN1cnJlbnRJbmRleCA9IChzdGFydEluZGV4ICsgaSk7XG5cdFx0XHR2YXIgc3RhcnRQb3MgPSB0aGlzLl9wcmVjb21wdXRlZExVVFtjdXJyZW50SW5kZXhdO1xuXHRcdFx0dmFyIGVuZFBvcyA9IHRoaXMuX3ByZWNvbXB1dGVkTFVUW2N1cnJlbnRJbmRleCArIDFdO1xuXHRcdFx0dmFyIGxvY2FsVCA9IE1hdGguaW52ZXJzZUxlcnAoc3RhcnRQb3MueSwgZW5kUG9zLnksIHkpO1xuXG5cdFx0XHRpZiAoIU1hdGguaXNJblJhbmdlKGxvY2FsVCwgMC4wLCAxLjApKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxjdWxhdGUgdGhlIHJlbWFpbmluZyBjb29yZGluYXRlIHVzaW5nIGludGVycG9sYXRpb24uXG5cdFx0XHR2YXIgcmVzdWx0ID0gKHN0YXJ0UG9zLnggKyAobG9jYWxUICogKGVuZFBvcy54IC0gc3RhcnRQb3MueCkpKTtcblxuXHRcdFx0Ly8gRWl0aGVyIHJldHVybiBmaXJzdCBmb3VuZCByZXN1bHQsIG9yIGFjY3VtdWxhdGUgcmVzdWx0cy5cblx0XHRcdGlmIChzdG9wQXRGaXJzdFJlc3VsdCkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0cy5wdXNoKHJlc3VsdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH07XG5cbiAgICAvLyBHZXQgWSBjb29yZGluYXRlIG9uIGN1cnZlIHdoaWNoIGJlc3QgbWF0Y2hlcyBwcm92aWRlZCBYIHZhbHVlLiBSZXR1cm5zIGVpdGhlciBmaXJzdFxuICAgIC8vIGZvdW5kIHJlc3VsdCwgb3IgYWxsIHJlc3VsdHMgaW4gYW4gYXJyYXkuXG5cdHAuZ2V0WUF0ID0gZnVuY3Rpb24gKHgsIHN0b3BBdEZpcnN0UmVzdWx0KSB7XG5cdFx0aWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoIWlzRGVmaW5lZChzdG9wQXRGaXJzdFJlc3VsdCkpIHtcblx0XHRcdHN0b3BBdEZpcnN0UmVzdWx0ID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dmFyIG1hdGNoaW5nU2VnbWVudCA9IC0xO1xuXHRcdHZhciBsb3dlc3QgPSB7XG5cdFx0XHRzZWdtZW50SW5kZXg6IC0xLFxuXHRcdFx0dmFsdWU6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuXHRcdH07XG5cdFx0dmFyIGhpZ2hlc3QgPSB7XG5cdFx0XHRzZWdtZW50SW5kZXg6IC0xLFxuXHRcdFx0dmFsdWU6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuXHRcdH07XG5cdFx0dmFyIGk7XG5cblx0XHQvLyBGaW5kIGEgY3VydmUgc2VnbWVudCB3aGljaCBlbmNhcHN1bGF0ZXMgdGhlIHByb3ZpZGVkIGNvb3JkaW5hdGUuXG5cdFx0Zm9yIChpID0gMDsgaSA8IHRoaXMuc2VnbWVudENvdW50OyBpKyspIHtcblx0XHRcdHZhciBzZWdtZW50Qm91bmRzID0gdGhpcy5fZ2V0U2VnbWVudEJvdW5kcyhpKTtcblx0XHRcdGlmICghc2VnbWVudEJvdW5kcykge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHNlZ21lbnRCb3VuZHMubWluWCA8IGxvd2VzdC52YWx1ZSkge1xuXHRcdFx0XHRsb3dlc3Quc2VnbWVudEluZGV4ID0gaTtcblx0XHRcdFx0bG93ZXN0LnZhbHVlID0gc2VnbWVudEJvdW5kcy5taW5YO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNlZ21lbnRCb3VuZHMubWF4WCA+IGhpZ2hlc3QudmFsdWUpIHtcblx0XHRcdFx0aGlnaGVzdC5zZWdtZW50SW5kZXggPSBpO1xuXHRcdFx0XHRoaWdoZXN0LnZhbHVlID0gc2VnbWVudEJvdW5kcy5tYXhYO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoTWF0aC5pc0luUmFuZ2UoeCwgc2VnbWVudEJvdW5kcy5taW5YLCBzZWdtZW50Qm91bmRzLm1heFgpKSB7XG5cdFx0XHRcdG1hdGNoaW5nU2VnbWVudCA9IGk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEdldCBjbG9zZXN0IG1hdGNoaW5nIHNlZ21lbnQgaWYgbm8gZW5jYXBzdWxhdGluZyBzZWdtZW50IGNhbiBiZSBmb3VuZC5cblx0XHRpZiAobWF0Y2hpbmdTZWdtZW50ID09PSAtMSkge1xuXHRcdFx0aWYgKHggPCBsb3dlc3QudmFsdWUpIHtcblx0XHRcdFx0bWF0Y2hpbmdTZWdtZW50ID0gbG93ZXN0LnNlZ21lbnRJbmRleDtcblx0XHRcdFx0eCA9IGxvd2VzdC52YWx1ZTtcblx0XHRcdH0gZWxzZSBpZiAoeCA+IGhpZ2hlc3QudmFsdWUpIHtcblx0XHRcdFx0bWF0Y2hpbmdTZWdtZW50ID0gaGlnaGVzdC5zZWdtZW50SW5kZXg7XG5cdFx0XHRcdHggPSBoaWdoZXN0LnZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBzdGFydEluZGV4ID0gbWF0Y2hpbmdTZWdtZW50ICogdGhpcy5fc3ViZGl2aXNpb25zUGVyU2VnbWVudDtcblx0XHR2YXIgcmVzdWx0cyA9IFtdO1xuXG5cdFx0Ly8gUGVyZm9ybSAxRCBjbG9zZXN0IHBvaW50IHRvIGxpbmUgdGVzdHMgcGVyIGRpdmlkZWQgc2VjdGlvbiBvZiBtYXRjaGluZyBzZWdtZW50LlxuXHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLl9zdWJkaXZpc2lvbnNQZXJTZWdtZW50OyBpKyspIHtcblx0XHRcdHZhciBjdXJyZW50SW5kZXggPSAoc3RhcnRJbmRleCArIGkpO1xuXHRcdFx0dmFyIHN0YXJ0UG9zID0gdGhpcy5fcHJlY29tcHV0ZWRMVVRbY3VycmVudEluZGV4XTtcblx0XHRcdHZhciBlbmRQb3MgPSB0aGlzLl9wcmVjb21wdXRlZExVVFtjdXJyZW50SW5kZXggKyAxXTtcblx0XHRcdHZhciBsb2NhbFQgPSBNYXRoLmludmVyc2VMZXJwKHN0YXJ0UG9zLngsIGVuZFBvcy54LCB4KTtcblxuXHRcdFx0aWYgKCFNYXRoLmlzSW5SYW5nZShsb2NhbFQsIDAuMCwgMS4wKSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHRoZSByZW1haW5pbmcgY29vcmRpbmF0ZSB1c2luZyBpbnRlcnBvbGF0aW9uLlxuXHRcdFx0dmFyIHJlc3VsdCA9IChzdGFydFBvcy55ICsgKGxvY2FsVCAqIChlbmRQb3MueSAtIHN0YXJ0UG9zLnkpKSk7XG5cblx0XHRcdC8vIEVpdGhlciByZXR1cm4gZmlyc3QgZm91bmQgcmVzdWx0LCBvciBhY2N1bXVsYXRlIHJlc3VsdHMuXG5cdFx0XHRpZiAoc3RvcEF0Rmlyc3RSZXN1bHQpIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdHMucHVzaChyZXN1bHQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9O1xuXG5cdC8vIENyZWF0ZSBsb29rdXAgdGFibGUgKExVVCkgb2YgbGluZWFyIGN1cnZlIHBvaW50cyBhbmQgY29tcHV0ZSBtaW4vbWF4IHJhbmdlcyBwZXIgc2VnbWVudC5cbiAgICBwLl9jcmVhdGVMVVQgPSBmdW5jdGlvbiAoKSB7XG4gICAgXHR0aGlzLl9wcmVjb21wdXRlZExVVC5jbGVhcigpO1xuICAgIFx0dGhpcy5fcHJlY29tcHV0ZWRSYW5nZXMuY2xlYXIoKTtcblxuICAgIFx0dGhpcy5fcHJlY29tcHV0ZWRMVVQucHVzaCh0aGlzLmdldFBvc2l0aW9uQXQoMC4wKSk7XG5cbiAgICBcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zZWdtZW50Q291bnQ7IGkrKykge1xuICAgIFx0XHQvLyBQcmVjb21wdXRlIHBvc2l0aW9ucyBhdCBpbmNyZW1lbnRhbCB0aW1lcyBwZXIgc2VnbWVudC5cbiAgICBcdFx0Zm9yICh2YXIgaiA9IDE7IGogPD0gdGhpcy5fc3ViZGl2aXNpb25zUGVyU2VnbWVudDsgaisrKSB7XG4gICAgXHRcdFx0dmFyIHQgPSAoaSArIChqIC8gdGhpcy5fc3ViZGl2aXNpb25zUGVyU2VnbWVudCkpO1xuICAgIFx0XHRcdHZhciBjdXJyZW50UG9zID0gdGhpcy5nZXRQb3NpdGlvbkF0KHQpO1xuXG4gICAgXHRcdFx0aWYgKGN1cnJlbnRQb3MpIHtcbiAgICBcdFx0XHRcdHRoaXMuX3ByZWNvbXB1dGVkTFVULnB1c2goY3VycmVudFBvcyk7XG4gICAgXHRcdFx0fSBlbHNlIHtcbiAgICBcdFx0XHRcdGNvbnNvbGUud2FybihcIkNhbGN1bGF0ZWQgY3VydmUgcG9zaXRpb24gaXMgaW52YWxpZC5cIik7XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9XG5cbiAgICBcdFx0Ly8gQ2FsY3VsYXRlIFgvWSByYW5nZXMgb2YgZWFjaCBzZWdtZW50LlxuXHQgICAgXHR2YXIgc2VnbWVudFN0YXJ0SW5kZXggPSAodGhpcy5fc3ViZGl2aXNpb25zUGVyU2VnbWVudCAqIGkpO1xuXHQgICAgXHR2YXIgc2VnbWVudEVuZEluZGV4ID0gdGhpcy5fcHJlY29tcHV0ZWRMVVQubGVuZ3RoOyAgLy8gSW5jbHVkZSBzZWdtZW50IGVuZCBwb2ludC5cblx0ICAgIFx0dmFyIHNlZ21lbnRQb2ludHMgPSB0aGlzLl9wcmVjb21wdXRlZExVVC5zbGljZShzZWdtZW50U3RhcnRJbmRleCwgc2VnbWVudEVuZEluZGV4KTtcblxuXHQgICAgXHR2YXIgc2VnbWVudFJhbmdlID0gdGhpcy5fY3JlYXRlUmFuZ2VGcm9tUG9pbnRzKHNlZ21lbnRQb2ludHMpO1xuXHQgICAgXHR0aGlzLl9wcmVjb21wdXRlZFJhbmdlcy5wdXNoKHNlZ21lbnRSYW5nZSk7XG4gICAgXHR9XG4gICAgfTtcblxuICAgIHAuX2dldFNlZ21lbnRCb3VuZHMgPSBmdW5jdGlvbiAoc2VnbWVudEluZGV4KSB7XG4gICAgXHRpZiAoIU1hdGguaXNJblJhbmdlKHNlZ21lbnRJbmRleCwgMCwgdGhpcy5zZWdtZW50Q291bnQgLSAxKSkge1xuICAgIFx0XHRyZXR1cm4gbnVsbDtcbiAgICBcdH1cblxuICAgIFx0cmV0dXJuIHRoaXMuX3ByZWNvbXB1dGVkUmFuZ2VzW3NlZ21lbnRJbmRleF07XG4gICAgfTtcblxuICAgIC8vIEJ1aWxkIGEgc3RydWN0dXJlIGNvbnRhaW5pbmcgbWluWCwgbWF4WCwgbWluWSBhbmQgbWF4WSBvZiBhIHNldCBvZiBwb2ludHMuXG4gICAgcC5fY3JlYXRlUmFuZ2VGcm9tUG9pbnRzID0gZnVuY3Rpb24gKHBvaW50cykge1xuICAgIFx0cmV0dXJuIHtcbiAgICBcdFx0bWluWDogcG9pbnRzXG5cdFx0XHRcdFx0Lm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHBvaW50Lng7IH0pXG5cdFx0XHRcdFx0LnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gTWF0aC5taW4oYSwgYik7IH0pLFxuICAgIFx0XHRtYXhYOiBwb2ludHNcblx0XHRcdFx0XHQubWFwKGZ1bmN0aW9uIChwb2ludCkgeyByZXR1cm4gcG9pbnQueDsgfSlcblx0XHRcdFx0XHQucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBNYXRoLm1heChhLCBiKTsgfSksXG4gICAgXHRcdG1pblk6IHBvaW50c1xuXHRcdFx0XHRcdC5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiBwb2ludC55OyB9KVxuXHRcdFx0XHRcdC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIE1hdGgubWluKGEsIGIpOyB9KSxcbiAgICBcdFx0bWF4WTogcG9pbnRzXG5cdFx0XHRcdFx0Lm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHBvaW50Lnk7IH0pXG5cdFx0XHRcdFx0LnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gTWF0aC5tYXgoYSwgYik7IH0pXG4gICAgXHR9O1xuICAgIH07XG5cblx0bmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkJlemllckN1cnZlQXBwcm94ID0gQmV6aWVyQ3VydmVBcHByb3g7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0Ly8gUGllY2V3aXNlIGxpbmVhciBjdXJ2ZSBzcGVjaWZpZWQgYnkgYW4gYXJyYXkgb2YgcG9pbnRzLCBpLmUuIFt7eCwgeX0sIHt4LCB5fV0uIFRpbWUgaXNcblx0Ly8gY29tcHV0ZWQgYXMgWzAsIDFdIGZvciBlYWNoIHNlZ21lbnQuXG5cdHZhciBMaW5lYXJDdXJ2ZSA9IGZ1bmN0aW9uIChwb2ludHMsIHVzZVByZWNvbXB1dGVkUmFuZ2VzKSB7XG5cdFx0dGhpcy5fcG9pbnRzID0gaXNEZWZpbmVkKHBvaW50cykgPyBhcnJheWlmeShwb2ludHMpIDogW107XG4gICAgICAgIHRoaXMuX3ByZWNvbXB1dGVkUmFuZ2VzID0gW107ICAvLyBNaW4vbWF4IFggYW5kIFkgcGVyIHNlZ21lbnQuXG4gICAgICAgIHRoaXMuX3VzZVByZWNvbXB1dGVkUmFuZ2VzID0gISF1c2VQcmVjb21wdXRlZFJhbmdlcztcblxuXHRcdGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkxpbmVhckN1cnZlOiBwb2ludCBsaXN0IGlzIGludmFsaWQuXCIpO1xuXHRcdH1cblxuICAgICAgICAvLyBQcmVjb21wdXRlIG1pbi9tYXggdmFsdWVzIHBlciBsaW5lIHNlZ21lbnQuXG4gICAgICAgIGlmICh0aGlzLl91c2VQcmVjb21wdXRlZFJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy5fcHJlY29tcHV0ZVJhbmdlcygpO1xuICAgICAgICB9XG5cdH07XG5cdHZhciBwID0gTGluZWFyQ3VydmUucHJvdG90eXBlO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwicG9pbnRzXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3UG9pbnRzKSB7XG4gICAgICAgICAgICB0aGlzLl9wb2ludHMgPSBpc0RlZmluZWQocG9pbnRzKSA/IGFycmF5aWZ5KHBvaW50cykgOiBbXTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJMaW5lYXJDdXJ2ZTogcHJvdmlkZWQgcG9pbnQgbGlzdCBpcyBpbnZhbGlkLlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuX3VzZVByZWNvbXB1dGVkUmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJlY29tcHV0ZVJhbmdlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wb2ludHM7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInNlZ21lbnRDb3VudFwiLCB7XG4gICAgXHRnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBcdFx0cmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gKHRoaXMuX3BvaW50cy5sZW5ndGggLSAxKSA6IDA7XG4gICAgXHR9XG4gICAgfSk7XG5cblx0Ly8gT2J0YWlucyB0aGUgMkQgbG9jYXRpb24gYWxvbmcgdGhlIHBpZWNld2lzZSBjdXJ2ZSBhdCB0aW1lIHQsIHdoZXJlIE1hdGguZmxvb3IodCkgZGV0ZXJtaW5lc1xuXHQvLyB0aGUgbGluZSBzZWdtZW50IHRvIHNhbXBsZSBmcm9tLCBhbmQgdGhlIGZyYWN0aW9uYWwgcGFydCBlcXVhdGVzIHRvIHRoZSBbMCwgMV0gcmFuZ2UgdGltZVxuICAgIC8vIHZhbHVlIGZvciB0aGF0IGxpbmUgc2VnbWVudC5cblx0cC5nZXRQb3NpdGlvbkF0ID0gZnVuY3Rpb24gKHQpIHtcblx0XHRpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHQgPD0gMC4wKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcG9pbnRzLmZpcnN0KCk7XG5cdFx0fVxuXHRcdGlmICh0ID49IHRoaXMuc2VnbWVudENvdW50KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcG9pbnRzLmxhc3QoKTtcblx0XHR9XG5cblx0XHR2YXIgc3RhcnRJbmRleCA9IE1hdGguZmxvb3IodCk7XG5cdFx0dmFyIHVuaXRUID0gKHQgLSBNYXRoLmZsb29yKHQpKTtcblxuICAgIFx0dmFyIHN0YXJ0UG9pbnQgPSB0aGlzLl9wb2ludHNbc3RhcnRJbmRleF07XG4gICAgXHR2YXIgZW5kUG9pbnQgPSB0aGlzLl9wb2ludHNbc3RhcnRJbmRleCArIDFdO1xuXG4gICAgXHR2YXIgeCA9IHRoaXMuX3NvbHZlKHN0YXJ0UG9pbnQueCwgZW5kUG9pbnQueCwgdW5pdFQpO1xuICAgIFx0dmFyIHkgPSB0aGlzLl9zb2x2ZShzdGFydFBvaW50LnksIGVuZFBvaW50LnksIHVuaXRUKTtcblxuICAgIFx0aWYgKCFpc0RlZmluZWQoeCkgfHwgIWlzRGVmaW5lZCh5KSkge1xuICAgIFx0XHRyZXR1cm4gbnVsbDtcbiAgICBcdH1cblxuICAgIFx0cmV0dXJuIHsgeDogeCwgeTogeSB9O1xuXHR9O1xuXG4gICAgLy8gQ2FsbHMgZ2V0UG9zaXRpb25BdCgpIHdpdGggdW5pdCB0aW1lIHZhbHVlIGluIHJhbmdlIFswLCAxXSB0cmFuc2Zvcm1lZCBhY2NvcmRpbmdseSAoYXZvaWRzXG4gICAgLy8gaGF2aW5nIHRvIGtub3cgc3BlY2lmaWNhbGx5IGhvdyBtYW55IHNlZ21lbnRzIHRoZXJlIGFyZSBpbiB0aGUgcGllY2V3aXNlIGN1cnZlKS5cbiAgICBwLmdldFBvc2l0aW9uQXRVbml0ID0gZnVuY3Rpb24gKHVuaXRUKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvc2l0aW9uQXQodW5pdFQgKiB0aGlzLnNlZ21lbnRDb3VudCk7XG4gICAgfTtcblxuXHRwLmdldFhBdCA9IGZ1bmN0aW9uICh5KSB7XG5cdFx0aWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXRjaGluZ1NlZ21lbnQgPSAtMTtcbiAgICAgICAgdmFyIGxvd2VzdCA9IHtcbiAgICAgICAgICAgIHNlZ21lbnRJbmRleDogLTEsXG4gICAgICAgICAgICB2YWx1ZTogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgICAgIH07XG4gICAgICAgIHZhciBoaWdoZXN0ID0ge1xuICAgICAgICAgICAgc2VnbWVudEluZGV4OiAtMSxcbiAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgLy8gRmluZCBhIGN1cnZlIHNlZ21lbnQgd2hpY2ggZW5jYXBzdWxhdGVzIHRoZSBwcm92aWRlZCBjb29yZGluYXRlLlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zZWdtZW50Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNlZ21lbnRCb3VuZHMgPSB0aGlzLl9nZXRTZWdtZW50Qm91bmRzKGkpO1xuICAgICAgICAgICAgaWYgKCFzZWdtZW50Qm91bmRzKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWdtZW50Qm91bmRzLm1pblkgPCBsb3dlc3QudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBsb3dlc3Quc2VnbWVudEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBsb3dlc3QudmFsdWUgPSBzZWdtZW50Qm91bmRzLm1pblk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VnbWVudEJvdW5kcy5tYXhZID4gaGlnaGVzdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGhpZ2hlc3Quc2VnbWVudEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBoaWdoZXN0LnZhbHVlID0gc2VnbWVudEJvdW5kcy5tYXhZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoTWF0aC5pc0luUmFuZ2UoeSwgc2VnbWVudEJvdW5kcy5taW5ZLCBzZWdtZW50Qm91bmRzLm1heFkpKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdTZWdtZW50ID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBjbG9zZXN0IG1hdGNoaW5nIHNlZ21lbnQgaWYgbm8gZW5jYXBzdWxhdGluZyBzZWdtZW50IGNhbiBiZSBmb3VuZC5cbiAgICAgICAgaWYgKG1hdGNoaW5nU2VnbWVudCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlmICh5IDwgbG93ZXN0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdTZWdtZW50ID0gbG93ZXN0LnNlZ21lbnRJbmRleDtcbiAgICAgICAgICAgICAgICB5ID0gbG93ZXN0LnZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh5ID4gaGlnaGVzdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIG1hdGNoaW5nU2VnbWVudCA9IGhpZ2hlc3Quc2VnbWVudEluZGV4O1xuICAgICAgICAgICAgICAgIHkgPSBoaWdoZXN0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5fcG9pbnRzW21hdGNoaW5nU2VnbWVudF07XG4gICAgICAgIHZhciBlbmRQb3MgPSB0aGlzLl9wb2ludHNbbWF0Y2hpbmdTZWdtZW50ICsgMV07XG4gICAgICAgIHZhciBsb2NhbFQgPSBNYXRoLmludmVyc2VMZXJwKHN0YXJ0UG9zLnksIGVuZFBvcy55LCB5KTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHJlbWFpbmluZyBjb29yZGluYXRlIHVzaW5nIGludGVycG9sYXRpb24uXG4gICAgICAgIHJldHVybiAoc3RhcnRQb3MueCArIChsb2NhbFQgKiAoZW5kUG9zLnggLSBzdGFydFBvcy54KSkpO1xuXHR9O1xuXG5cdHAuZ2V0WUF0ID0gZnVuY3Rpb24gKHgpIHtcblx0XHRpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1hdGNoaW5nU2VnbWVudCA9IC0xO1xuICAgICAgICB2YXIgbG93ZXN0ID0ge1xuICAgICAgICAgICAgc2VnbWVudEluZGV4OiAtMSxcbiAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhpZ2hlc3QgPSB7XG4gICAgICAgICAgICBzZWdtZW50SW5kZXg6IC0xLFxuICAgICAgICAgICAgdmFsdWU6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICB9O1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICAvLyBGaW5kIGEgY3VydmUgc2VnbWVudCB3aGljaCBlbmNhcHN1bGF0ZXMgdGhlIHByb3ZpZGVkIGNvb3JkaW5hdGUuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnNlZ21lbnRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnbWVudEJvdW5kcyA9IHRoaXMuX2dldFNlZ21lbnRCb3VuZHMoaSk7XG4gICAgICAgICAgICBpZiAoIXNlZ21lbnRCb3VuZHMpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNlZ21lbnRCb3VuZHMubWluWCA8IGxvd2VzdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGxvd2VzdC5zZWdtZW50SW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGxvd2VzdC52YWx1ZSA9IHNlZ21lbnRCb3VuZHMubWluWDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWdtZW50Qm91bmRzLm1heFggPiBoaWdoZXN0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaGlnaGVzdC5zZWdtZW50SW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGhpZ2hlc3QudmFsdWUgPSBzZWdtZW50Qm91bmRzLm1heFg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmlzSW5SYW5nZSh4LCBzZWdtZW50Qm91bmRzLm1pblgsIHNlZ21lbnRCb3VuZHMubWF4WCkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGluZ1NlZ21lbnQgPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGNsb3Nlc3QgbWF0Y2hpbmcgc2VnbWVudCBpZiBubyBlbmNhcHN1bGF0aW5nIHNlZ21lbnQgY2FuIGJlIGZvdW5kLlxuICAgICAgICBpZiAobWF0Y2hpbmdTZWdtZW50ID09PSAtMSkge1xuICAgICAgICAgICAgaWYgKHggPCBsb3dlc3QudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGluZ1NlZ21lbnQgPSBsb3dlc3Quc2VnbWVudEluZGV4O1xuICAgICAgICAgICAgICAgIHggPSBsb3dlc3QudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHggPiBoaWdoZXN0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdTZWdtZW50ID0gaGlnaGVzdC5zZWdtZW50SW5kZXg7XG4gICAgICAgICAgICAgICAgeCA9IGhpZ2hlc3QudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLl9wb2ludHNbbWF0Y2hpbmdTZWdtZW50XTtcbiAgICAgICAgdmFyIGVuZFBvcyA9IHRoaXMuX3BvaW50c1ttYXRjaGluZ1NlZ21lbnQgKyAxXTtcbiAgICAgICAgdmFyIGxvY2FsVCA9IE1hdGguaW52ZXJzZUxlcnAoc3RhcnRQb3MueCwgZW5kUG9zLngsIHgpO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcmVtYWluaW5nIGNvb3JkaW5hdGUgdXNpbmcgaW50ZXJwb2xhdGlvbi5cbiAgICAgICAgcmV0dXJuIChzdGFydFBvcy55ICsgKGxvY2FsVCAqIChlbmRQb3MueSAtIHN0YXJ0UG9zLnkpKSk7XG5cdH07XG5cbiAgICBwLmlzVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgXHRyZXR1cm4gKHRoaXMuX3BvaW50cy5sZW5ndGggPj0gMik7XG4gICAgfTtcblxuICAgIC8vIFNvbHZlcyAxRCBsaW5lYXIgY3VydmUgZXF1YXRpb24uXG4gICAgcC5fc29sdmUgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgdW5pdFQpIHtcbiAgICBcdGlmICghdGhpcy5pc1ZhbGlkKCkgfHxcbiAgICBcdFx0IU1hdGguaXNJblJhbmdlKHVuaXRULCAwLjAsIDEuMCkpIHtcbiAgICBcdFx0cmV0dXJuIHVuZGVmaW5lZDtcbiAgICBcdH1cblxuICAgIFx0cmV0dXJuIE1hdGgubGVycChzdGFydCwgZW5kLCB1bml0VCk7XG4gICAgfTtcblxuICAgIHAuX3ByZWNvbXB1dGVSYW5nZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3ByZWNvbXB1dGVkUmFuZ2VzLmNsZWFyKCk7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIFgvWSByYW5nZXMgb2YgZWFjaCBsaW5lIHNlZ21lbnQuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zZWdtZW50Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNlZ21lbnRQb2ludHMgPSBbXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9pbnRzW2ldLFxuICAgICAgICAgICAgICAgIHRoaXMuX3BvaW50c1tpICsgMV1cbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIHZhciBzZWdtZW50UmFuZ2UgPSB0aGlzLl9jcmVhdGVSYW5nZUZyb21Qb2ludHMoc2VnbWVudFBvaW50cyk7XG4gICAgICAgICAgICB0aGlzLl9wcmVjb21wdXRlZFJhbmdlcy5wdXNoKHNlZ21lbnRSYW5nZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fZ2V0U2VnbWVudEJvdW5kcyA9IGZ1bmN0aW9uIChzZWdtZW50SW5kZXgpIHtcbiAgICAgICAgaWYgKCFNYXRoLmlzSW5SYW5nZShzZWdtZW50SW5kZXgsIDAsIHRoaXMuc2VnbWVudENvdW50IC0gMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlZ21lbnRCb3VuZHM7XG4gICAgICAgIGlmICh0aGlzLl91c2VQcmVjb21wdXRlZFJhbmdlcykge1xuICAgICAgICAgICAgc2VnbWVudEJvdW5kcyA9IHRoaXMuX3ByZWNvbXB1dGVkUmFuZ2VzW3NlZ21lbnRJbmRleF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWdtZW50Qm91bmRzID0gdGhpcy5fY3JlYXRlUmFuZ2VGcm9tUG9pbnRzKFtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb2ludHNbc2VnbWVudEluZGV4XSxcbiAgICAgICAgICAgICAgICB0aGlzLl9wb2ludHNbc2VnbWVudEluZGV4ICsgMV1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlZ21lbnRCb3VuZHM7XG4gICAgfTtcblxuICAgIC8vIEJ1aWxkIGEgc3RydWN0dXJlIGNvbnRhaW5pbmcgbWluWCwgbWF4WCwgbWluWSBhbmQgbWF4WSBvZiBhIHNldCBvZiBwb2ludHMuXG4gICAgcC5fY3JlYXRlUmFuZ2VGcm9tUG9pbnRzID0gZnVuY3Rpb24gKHBvaW50cykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluWDogcG9pbnRzXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiBwb2ludC54OyB9KVxuICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBNYXRoLm1pbihhLCBiKTsgfSksXG4gICAgICAgICAgICBtYXhYOiBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocG9pbnQpIHsgcmV0dXJuIHBvaW50Lng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIE1hdGgubWF4KGEsIGIpOyB9KSxcbiAgICAgICAgICAgIG1pblk6IHBvaW50c1xuICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChwb2ludCkgeyByZXR1cm4gcG9pbnQueTsgfSlcbiAgICAgICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gTWF0aC5taW4oYSwgYik7IH0pLFxuICAgICAgICAgICAgbWF4WTogcG9pbnRzXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHBvaW50KSB7IHJldHVybiBwb2ludC55OyB9KVxuICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBNYXRoLm1heChhLCBiKTsgfSlcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkxpbmVhckN1cnZlID0gTGluZWFyQ3VydmU7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgVmVjdG9yID0gaW5jbHVkZShcImZyYW1ld29yay5WZWN0b3JcIik7XG5cbiAgICAvLyBIb2xkcyBhIG1pbiBhbmQgbWF4IHZhbHVlLCBhbmQgaGFzIGNvbnZlbmllbmNlIG1ldGhvZHMgcmVsYXRpbmcgdG8gdGhpcyByYW5nZSBvZiB2YWx1ZXMuXG4gICAgdmFyIE1pbk1heCA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgICAgICB0aGlzLm1pbiA9IG1pbiB8fCAwO1xuICAgICAgICB0aGlzLm1heCA9IG1heCB8fCAwO1xuICAgIH07XG4gICAgdmFyIHAgPSBNaW5NYXgucHJvdG90eXBlO1xuXG4gICAgTWluTWF4LmZyb20gPSBmdW5jdGlvbiAobWluTWF4KSB7XG4gICAgICAgIG1pbk1heCA9IG1pbk1heCB8fCBuZXcgTWluTWF4KDAsIDApO1xuXG4gICAgICAgIHJldHVybiBuZXcgTWluTWF4KG1pbk1heC5taW4sIG1pbk1heC5tYXgpO1xuICAgIH07XG5cbiAgICBwLnRvVmVjdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yLmNyZWF0ZSh0aGlzLm1pbiwgdGhpcy5tYXgpO1xuICAgIH07XG5cbiAgICBwLmxlcnAgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmxlcnAodGhpcy5taW4sIHRoaXMubWF4LCBhbW91bnQpO1xuICAgIH07XG5cbiAgICBwLmludmVyc2VMZXJwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmludmVyc2VMZXJwKHRoaXMubWluLCB0aGlzLm1heCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBwLndyYXAgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgud3JhcCh2YWx1ZSwgdGhpcy5taW4sIHRoaXMubWF4KTtcbiAgICB9O1xuXG4gICAgcC5jbGFtcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5jbGFtcCh2YWx1ZSwgdGhpcy5taW4sIHRoaXMubWF4KTtcbiAgICB9O1xuXG4gICAgcC5pc0luUmFuZ2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguaXNJblJhbmdlKHZhbHVlLCB0aGlzLm1pbiwgdGhpcy5tYXgpO1xuICAgIH07XG5cbiAgICBwLm1hcEZyb20gPSBmdW5jdGlvbiAodmFsdWUsIG90aGVyTWluLCBvdGhlck1heCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXBWYWx1ZVRvUmFuZ2UodmFsdWUsIG90aGVyTWluLCBvdGhlck1heCwgdGhpcy5taW4sIHRoaXMubWF4KTtcbiAgICB9O1xuXG4gICAgcC5tYXBGcm9tT3RoZXIgPSBmdW5jdGlvbiAodmFsdWUsIG1pbk1heCkge1xuICAgICAgICBtaW5NYXggPSBtaW5NYXggfHwgbmV3IE1pbk1heCgwLCAwKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5tYXBGcm9tKHZhbHVlLCBtaW5NYXgubWluLCBtaW5NYXgubWF4KTtcbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLk1pbk1heCA9IE1pbk1heDtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHQvLyBCYXNlIEFjdGlvbiBpbnRlcmZhY2UgZnJvbSBQaXhpLWFjdGlvbiBsaWJyYXJ5IHdoaWNoIGlzbid0IGluY2x1ZGVkIGluXG5cdC8vIHRoZSBsaWJyYXJ5IGV4cG9ydC5cblx0dmFyIEFjdGlvbiA9IGZ1bmN0aW9uICgpIHt9O1xuXHR2YXIgcCA9IEFjdGlvbi5wcm90b3R5cGU7XG5cblx0cC5yZXNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXHRwLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWx0YSwgZGVsdGFNUykge307XG5cblx0bmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkFjdGlvbiA9IEFjdGlvbjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgQWN0aW9ucyA9IEFjdGlvbnMgfHwge307XG5cblx0Ly8gUmVnaXN0ZXIgYSBuZXcgZmFjdG9yeSBtZXRob2QgZm9yIHVzZSBvbiBBY3Rpb25zIChpLmUuIEFjdGlvbnMua2V5KS5cblx0QWN0aW9ucy5yZWdpc3RlciA9IGZ1bmN0aW9uIChrZXksIGNyZWF0b3JGdW5jKSB7XG5cdFx0aWYgKGtleSAmJiBjcmVhdG9yRnVuYykge1xuXHRcdFx0aWYgKGlzRGVmaW5lZChBY3Rpb25zW2tleV0pKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIk92ZXJyaWRpbmcgQWN0aW9ucy5cIiArIGtleSArIFwiIGZhY3RvcnkgbWV0aG9kLlwiKTtcblx0XHRcdH1cblx0XHRcdEFjdGlvbnNba2V5XSA9IGNyZWF0b3JGdW5jO1xuXHRcdH1cblx0fTtcblxuXHRuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuQWN0aW9ucyA9IEFjdGlvbnM7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0dmFyIEFjdGlvbiA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uXCIpO1xuXHR2YXIgQWN0aW9ucyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uc1wiKTtcblxuXHQvLyBDYWxsIGEgZnVuY3Rpb24gb25jZSBhbmQgd2FpdCB1bnRpbCBmaW5pc2goKSBpcyBjYWxsZWQsIG9yIGNhbGwgYSBmdW5jdGlvbiByZXBlYXRlZGx5XG5cdC8vIHVudGlsIGZpbmlzaCgpIGlzIGNhbGxlZC5cblx0dmFyIEJsb2NraW5nRnVuY0FjdGlvbiA9IGZ1bmN0aW9uIChmdW5jLCBpc0xvb3BlZCkge1xuXHRcdEFjdGlvbi5jYWxsKHRoaXMpO1xuXG5cdFx0dGhpcy5mdW5jID0gZnVuYyB8fCBmdW5jdGlvbiAocGFyZW50LCBkZWx0YSwgZGVsdGFNUykgeyBwYXJlbnQuZmluaXNoKCk7IH07XG5cdFx0dGhpcy5sb29wID0gaXNMb29wZWQ7XG5cblx0XHR0aGlzLnJlc2V0KCk7XG5cdH07XG5cdHZhciBzID0gQWN0aW9uLnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoQmxvY2tpbmdGdW5jQWN0aW9uLCBBY3Rpb24pO1xuXG5cdHAucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5faGFzRXhlY3V0ZWRPbmNlID0gZmFsc2U7XG5cdFx0dGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcblx0fTtcblxuXHRwLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWx0YSwgZGVsdGFNUykge1xuXHRcdGlmICh0aGlzLl9maW5pc2hlZCkge1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMubG9vcCB8fCAhdGhpcy5faGFzRXhlY3V0ZWRPbmNlKSB7XG5cdFx0XHR0aGlzLmZ1bmModGhpcywgZGVsdGEsIGRlbHRhTVMpO1xuXHRcdFx0dGhpcy5faGFzRXhlY3V0ZWRPbmNlID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0cC5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5fZmluaXNoZWQgPSB0cnVlO1xuXHR9O1xuXG5cdC8vIFJlZ2lzdGVyIGEgZmFjdG9yeSBtZXRob2QgZm9yIHRoaXMgYWN0aW9uLlxuXHRBY3Rpb25zLnJlZ2lzdGVyKFwiQmxvY2tpbmdGdW5jXCIsIGZ1bmN0aW9uIChmdW5jLCBpc0xvb3BlZCkge1xuXHRcdHJldHVybiBuZXcgQmxvY2tpbmdGdW5jQWN0aW9uKGZ1bmMsIGlzTG9vcGVkKTtcblx0fSk7XG5cblx0bmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkJsb2NraW5nRnVuY0FjdGlvbiA9IEJsb2NraW5nRnVuY0FjdGlvbjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgQWN0aW9uID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25cIik7XG5cdHZhciBBY3Rpb25zID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25zXCIpO1xuXG5cdC8vIEFjdGlvbiB3aGljaCBkb2VzIG5vdGhpbmcgZm9yIGEgcGVyaW9kIG9mICd0aW1lJyBzZWNvbmRzLlxuXHR2YXIgRGVsYXlBY3Rpb24gPSBmdW5jdGlvbiAodGltZSkge1xuXHRcdEFjdGlvbi5jYWxsKHRoaXMpO1xuXG5cdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdHRoaXMucmVzZXQoKTtcblx0fTtcblx0dmFyIHMgPSBBY3Rpb24ucHJvdG90eXBlO1xuXHR2YXIgcCA9IGV4dGVuZChEZWxheUFjdGlvbiwgQWN0aW9uKTtcblxuXHRwLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuX3RpbWUgPSB0aGlzLnRpbWU7XG5cdH07XG5cblx0cC51cGRhdGUgPSBmdW5jdGlvbiAoZGVsdGEsIGRlbHRhTVMpIHtcblx0XHR0aGlzLl90aW1lIC09IGRlbHRhO1xuXG5cdFx0aWYgKHRoaXMuX3RpbWUgPD0gMCkge1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdC8vIFJlZ2lzdGVyIGEgZmFjdG9yeSBtZXRob2QgZm9yIHRoaXMgYWN0aW9uLlxuXHRBY3Rpb25zLnJlZ2lzdGVyKFwiRGVsYXlcIiwgZnVuY3Rpb24gKHRpbWUpIHtcblx0XHRyZXR1cm4gbmV3IERlbGF5QWN0aW9uKHRpbWUpO1xuXHR9KTtcblxuXHRuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuRGVsYXlBY3Rpb24gPSBEZWxheUFjdGlvbjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgQmxvY2tpbmdGdW5jQWN0aW9uID0gaW5jbHVkZShcImZyYW1ld29yay5CbG9ja2luZ0Z1bmNBY3Rpb25cIik7XG5cdHZhciBBY3Rpb25zID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25zXCIpO1xuXG5cdC8vIFNlcXVlbmNlIFZPIGFzIGFuIGFjdGlvbi4gTWFya3MgaXRzZWxmIGFzIGZpbmlzaGVkIHdoZW4gdGhlIFZPIGhhcyBlaXRoZXJcblx0Ly8gZmluaXNoZWQgb3IgYmVlbiBjYW5jZWxsZWQuIFRoaXMgc2hvdWxkIGJlIHVzZWQgYXMgcGFydCBvZiBhIHVuaXF1ZSBhY3Rpb25cblx0Ly8gKGUuZy4gVmlld0NvbnRyb2xsZXIucnVuVW5pcXVlQWN0aW9uKCkpLlxuXHR2YXIgVk9BY3Rpb24gPSBmdW5jdGlvbiAodm9OYW1lKSB7XG5cdFx0dGhpcy5fdm9OYW1lID0gdm9OYW1lOyAgLy8gSUQgb2YgVk8gZmlsZS5cblx0XHR0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHRcdEJsb2NraW5nRnVuY0FjdGlvbi5jYWxsKHRoaXMsIHRoaXMuX3BsYXlWTy5iaW5kKHRoaXMpLCBmYWxzZSk7XG5cdH07XG5cdHZhciBzID0gQmxvY2tpbmdGdW5jQWN0aW9uLnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoVk9BY3Rpb24sIEJsb2NraW5nRnVuY0FjdGlvbik7XG5cblx0cC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcblx0XHRzLnJlc2V0LmNhbGwodGhpcyk7XG5cdFx0XG5cdFx0dGhpcy5fc3RvcFZPKCk7XG5cdH07XG5cblx0cC5fcGxheVZPID0gZnVuY3Rpb24gKHBhcmVudCwgZGVsdGEsIGRlbHRhTVMpIHtcblx0XHR0aGlzLl9zdG9wVk8oKTtcblxuXHRcdGlmICghdGhpcy5fdm9OYW1lIHx8ICFhcHAuY2FuUGxheVZPKCkpIHtcblx0XHRcdHBhcmVudC5maW5pc2goKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9pc1BsYXlpbmcgPSB0cnVlO1xuXHRcdFxuXHRcdGFwcC5wbGF5Vk8odGhpcy5fdm9OYW1lLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcblx0XHRcdHBhcmVudC5maW5pc2goKTsgIC8vIE1hcmsgdGhpcyBhY3Rpb24gYXMgY29tcGxldGUuXG5cdFx0fS5iaW5kKHRoaXMpLCB0cnVlKTtcblx0fTtcblxuXHRwLl9zdG9wVk8gPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuX3RoaXNWT0lzUGxheWluZygpKSB7XG5cdFx0XHRhcHAuc3RvcFZPKCk7XG5cdFx0XHR0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0cC5fdGhpc1ZPSXNQbGF5aW5nID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHR0aGlzLl9pc1BsYXlpbmcgJiZcblx0XHRcdGFwcC5jYW5QbGF5Vk8oKSAmJlxuXHRcdFx0YXBwLmlzUGxheWluZ1ZPKHRoaXMuX3ZvTmFtZSlcblx0XHQpO1xuXHR9O1xuXG5cdC8vIFJlZ2lzdGVyIGEgZmFjdG9yeSBtZXRob2QgZm9yIHRoaXMgYWN0aW9uLlxuXHRBY3Rpb25zLnJlZ2lzdGVyKFwiVk9cIiwgZnVuY3Rpb24gKHZvTmFtZSkge1xuXHRcdHJldHVybiBuZXcgVk9BY3Rpb24odm9OYW1lKTtcblx0fSk7XG5cblx0bmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlZPQWN0aW9uID0gVk9BY3Rpb247XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0dmFyIEJsb2NraW5nRnVuY0FjdGlvbiA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9uXCIpO1xuXHR2YXIgQWN0aW9ucyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uc1wiKTtcblx0dmFyIFR3ZWVuID0gaW5jbHVkZShcIlRXRUVOLlR3ZWVuXCIpO1xuXHR2YXIgRWFzaW5nID0gaW5jbHVkZShcIlRXRUVOLkVhc2luZ1wiKTtcblx0dmFyIEludGVycG9sYXRpb24gPSBpbmNsdWRlKFwiVFdFRU4uSW50ZXJwb2xhdGlvblwiKTtcblxuXHQvLyBSZXByZXNlbnQgYSB0d2VlbiBhcyBhbiBBY3Rpb24uXG5cdHZhciBUd2VlbkFjdGlvbiA9IGZ1bmN0aW9uIChvYmosIHR3ZWVuUGFyYW1zKSB7XG5cdFx0dHdlZW5QYXJhbXMgPSBPYmplY3QuZXh0ZW5kKHtcblx0XHRcdGZyb206IHt9LCAgLy8gU3RhcnQgdmFsdWVzIGZvciBwcm9wZXJ0aWVzIG9mIG9iai5cblx0XHRcdHRvOiB7fSwgIC8vIFRhcmdldCB2YWx1ZXMgZm9yIHByb3BlcnRpZXMgb2Ygb2JqLlxuXHRcdFx0ZHVyYXRpb246IDEuMCwgIC8vIEFuaW1hdGUgdGltZSBpbiBzZWNvbmRzLlxuXHRcdFx0ZWFzaW5nOiBFYXNpbmcuTGluZWFyLk5vbmUsXG5cdFx0XHRkZWxheVRpbWU6IHVuZGVmaW5lZCxcblx0XHRcdHJlcGVhdDogdW5kZWZpbmVkLFxuXHRcdFx0cmVwZWF0RGVsYXlUaW1lOiB1bmRlZmluZWQsXG5cdFx0XHR5b3lvOiBmYWxzZSxcblx0XHRcdGludGVycG9sYXRpb25GdW5jOiBJbnRlcnBvbGF0aW9uLkxpbmVhcixcblx0XHRcdG9uU3RhcnQ6IG51bGwsICAvLyBDYWxsYmFjay5cblx0XHRcdG9uVXBkYXRlOiBudWxsLCAgLy8gQ2FsbGJhY2suXG5cdFx0XHRvbkNvbXBsZXRlOiBudWxsLCAgLy8gQ2FsbGJhY2suXG5cdFx0XHRvblN0b3A6IG51bGwsICAvLyBDYWxsYmFjay5cblx0XHRcdGVuZE9uQ2FuY2VsOiBmYWxzZSwgIC8vIElmIHRydWUsIGp1bXBzIHRvIHRhcmdldCAoJ3RvJykgdmFsdWVzIGlmIGFjdGlvbiBpcyBjYW5jZWxsZWQuXG5cdFx0XHRyZXNldFZhbHVlc09uU3RvcDogZmFsc2UgIC8vIElmIHRydWUsIHNldHMgcHJvcGVydGllcyBiYWNrIHRvICdmcm9tJ1xuXHRcdFx0XHRcdFx0XHRcdFx0ICAvLyB2YWx1ZXMgb24gY29tcGxldGUgLyBjYW5jZWwgKG5vdGU6IHRoaXMgZG9lc1xuXHRcdFx0XHRcdFx0XHRcdFx0ICAvLyBub3QgdHJpZ2dlciBhbiBvblVwZGF0ZSgpLCB1c2Ugb25TdG9wKCkgaW5zdGVhZCkuXG5cdFx0fSwgdHdlZW5QYXJhbXMpO1xuXG5cdFx0aWYgKCFvYmopIHtcblx0XHRcdHRocm93IFwiVHdlZW5BY3Rpb246IG9iaiBpcyBudWxsLlwiO1xuXHRcdH1cblxuXHRcdHRoaXMuX29iaiA9IG9iajtcblx0XHR0aGlzLl90d2VlblBhcmFtcyA9IHR3ZWVuUGFyYW1zO1xuXHRcdHRoaXMuX3R3ZWVuID0gbnVsbDtcblxuXHRcdEJsb2NraW5nRnVuY0FjdGlvbi5jYWxsKHRoaXMsIHRoaXMuX3N0YXJ0VHdlZW4uYmluZCh0aGlzKSwgZmFsc2UpO1xuXHR9O1xuXHR2YXIgcyA9IEJsb2NraW5nRnVuY0FjdGlvbi5wcm90b3R5cGU7XG5cdHZhciBwID0gZXh0ZW5kKFR3ZWVuQWN0aW9uLCBCbG9ja2luZ0Z1bmNBY3Rpb24pO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInR3ZWVuXCIsIHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3R3ZWVuOyB9XG5cdH0pO1xuXG5cdHAucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cy5yZXNldC5jYWxsKHRoaXMpO1xuXHRcdFxuXHRcdHRoaXMuX3N0b3BUd2VlbigpO1xuXHR9O1xuXG5cdHAuX3N0YXJ0VHdlZW4gPSBmdW5jdGlvbiAocGFyZW50LCBkZWx0YSwgZGVsdGFNUykge1xuXHRcdHZhciB0d2VlblBhcmFtcyA9IHRoaXMuX3R3ZWVuUGFyYW1zO1xuXG5cdFx0Ly8gRW5kIHRoZSBwcmV2aW91cyB0d2VlbiBpZiBvbmUgZXhpc3RzLlxuXHRcdHRoaXMuX3N0b3BUd2VlbigpO1xuXG5cdFx0Ly8gQ3JlYXRlIHRoZSB0d2Vlbi5cblx0XHR0aGlzLl90d2VlbiA9IG5ldyBUd2Vlbih0aGlzLl9vYmopO1xuXG4gICAgICAgIC8vIFNldCB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICAgIE9iamVjdC5leHRlbmQodGhpcy5fb2JqLCB0d2VlblBhcmFtcy5mcm9tKTtcbiAgICAgICAgdGhpcy5fdHdlZW4udG8odHdlZW5QYXJhbXMudG8sICh0d2VlblBhcmFtcy5kdXJhdGlvbiAqIDEwMDApKTtcblxuICAgICAgICAvLyBBZGQgbWFpbiB0d2VlbiBwYXJhbWV0ZXJzLlxuICAgICAgICB0aGlzLl90d2VlblxuICAgICAgICBcdC5lYXNpbmcodHdlZW5QYXJhbXMuZWFzaW5nKVxuICAgICAgICAgICAgLmludGVycG9sYXRpb24odHdlZW5QYXJhbXMuaW50ZXJwb2xhdGlvbkZ1bmMpXG4gICAgICAgICAgICAub25TdG9wKGZ1bmN0aW9uIChvYmopIHsgIC8vIFRyaWdnZXJlZCBieSBzdG9wcGVkIG9yIGNvbXBsZXRlZCB0d2VlbnMuXG4gICAgICAgICAgICBcdHRoaXMuX3R3ZWVuID0gbnVsbDtcbiAgICAgICAgICAgIFx0cGFyZW50LmZpbmlzaCgpOyAgLy8gTWFyayB0aGlzIGFjdGlvbiBhcyBjb21wbGV0ZS5cblxuICAgICAgICAgICAgXHRpZiAodHdlZW5QYXJhbXMucmVzZXRWYWx1ZXNPblN0b3ApIHtcbiAgICAgICAgICAgIFx0XHRPYmplY3QuZXh0ZW5kKHRoaXMuX29iaiwgdHdlZW5QYXJhbXMuZnJvbSk7XG4gICAgICAgICAgICBcdH1cblxuICAgICAgICAgICAgXHRpZiAodHdlZW5QYXJhbXMub25TdG9wKSB7XG4gICAgICAgICAgICBcdFx0dHdlZW5QYXJhbXMub25TdG9wKG9iaik7XG4gICAgICAgICAgICBcdH1cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgIC5vbkNvbXBsZXRlKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIFx0dGhpcy5fdHdlZW4uc3RvcCgpO1x0XHRcblxuICAgICAgICAgICAgXHRpZiAodHdlZW5QYXJhbXMub25Db21wbGV0ZSkge1xuICAgICAgICAgICAgXHRcdHR3ZWVuUGFyYW1zLm9uQ29tcGxldGUob2JqKTtcbiAgICAgICAgICAgIFx0fVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuXHRcdC8vIEFkZCBvcHRpb25hbCB0d2VlbiBwYXJhbWV0ZXJzLlxuICAgICAgICBpZiAoaXNEZWZpbmVkKHR3ZWVuUGFyYW1zLmRlbGF5VGltZSkpIHtcblx0XHRcdHRoaXMuX3R3ZWVuLmRlbGF5KHR3ZWVuUGFyYW1zLmRlbGF5VGltZSAqIDEwMDApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZmluZWQodHdlZW5QYXJhbXMucmVwZWF0KSkge1xuICAgICAgICBcdHRoaXMuX3R3ZWVuLnJlcGVhdCh0d2VlblBhcmFtcy5yZXBlYXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZmluZWQodHdlZW5QYXJhbXMucmVwZWF0RGVsYXlUaW1lKSkge1xuXHRcdFx0dGhpcy5fdHdlZW4ucmVwZWF0RGVsYXkodHdlZW5QYXJhbXMucmVwZWF0RGVsYXlUaW1lICogMTAwMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR3ZWVuUGFyYW1zLnlveW8pIHtcbiAgICAgICAgXHR0aGlzLl90d2Vlbi55b3lvKHR3ZWVuUGFyYW1zLnlveW8pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0d2VlblBhcmFtcy5vblN0YXJ0KSB7XG4gICAgICAgIFx0dGhpcy5fdHdlZW4ub25TdGFydCh0d2VlblBhcmFtcy5vblN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHdlZW5QYXJhbXMub25VcGRhdGUpIHtcbiAgICAgICAgXHR0aGlzLl90d2Vlbi5vblVwZGF0ZSh0d2VlblBhcmFtcy5vblVwZGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGFydCB0aGUgdHdlZW4uXG4gICAgICAgIHRoaXMuX3R3ZWVuLnN0YXJ0KCk7XG5cdH07XG5cblx0cC5fc3RvcFR3ZWVuID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLl90d2Vlbikge1xuXHRcdFx0aWYgKHRoaXMuX3R3ZWVuUGFyYW1zLmVuZE9uQ2FuY2VsKSB7XG5cdFx0XHRcdHRoaXMuX3R3ZWVuLmVuZCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fdHdlZW4uc3RvcCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvLyBSZWdpc3RlciBhIGZhY3RvcnkgbWV0aG9kIGZvciB0aGlzIGFjdGlvbi5cblx0QWN0aW9ucy5yZWdpc3RlcihcIlR3ZWVuXCIsIGZ1bmN0aW9uIChvYmosIHR3ZWVuUGFyYW1zKSB7XG5cdFx0cmV0dXJuIG5ldyBUd2VlbkFjdGlvbihvYmosIHR3ZWVuUGFyYW1zKTtcblx0fSk7XG5cblx0bmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlR3ZWVuQWN0aW9uID0gVHdlZW5BY3Rpb247XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0dmFyIEJsb2NraW5nRnVuY0FjdGlvbiA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9uXCIpO1xuXHR2YXIgQWN0aW9ucyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uc1wiKTtcblxuXHQvLyBTZXF1ZW5jZSBhIHNwcml0ZSBhbmltYXRpb24gYXMgYW4gYWN0aW9uLiBNYXJrcyBpdHNlbGYgYXMgZmluaXNoZWQgd2hlbiB0aGVcblx0Ly8gYW5pbWF0aW9uIGhhcyBlaXRoZXIgZmluaXNoZWQgb3IgYmVlbiBjYW5jZWxsZWQuXG5cdHZhciBBbmltYXRlU3ByaXRlQWN0aW9uID0gZnVuY3Rpb24gKGFuaW1hdGVkU3ByaXRlLCBhbmltYXRpb25OYW1lLCBwYXJhbXMpIHtcblx0XHR0aGlzLl9hbmltYXRlZFNwcml0ZSA9IGFuaW1hdGVkU3ByaXRlO1xuXHRcdHRoaXMuX2FuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lO1xuXHRcdHRoaXMuX3BhcmFtcyA9IHBhcmFtcztcblx0XHR0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHRcdEJsb2NraW5nRnVuY0FjdGlvbi5jYWxsKHRoaXMsIHRoaXMuX3BsYXlBbmltYXRpb24uYmluZCh0aGlzKSwgZmFsc2UpO1xuXHR9O1xuXHR2YXIgcyA9IEJsb2NraW5nRnVuY0FjdGlvbi5wcm90b3R5cGU7XG5cdHZhciBwID0gZXh0ZW5kKEFuaW1hdGVTcHJpdGVBY3Rpb24sIEJsb2NraW5nRnVuY0FjdGlvbik7XG5cblx0cC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcblx0XHRzLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0XHR0aGlzLl9zdG9wQW5pbWF0aW9uKCk7XG5cdH07XG5cblx0cC5fcGxheUFuaW1hdGlvbiA9IGZ1bmN0aW9uIChwYXJlbnQsIGRlbHRhLCBkZWx0YU1TKSB7XG5cdFx0dGhpcy5fc3RvcEFuaW1hdGlvbigpO1xuXG5cdFx0aWYgKCF0aGlzLl9hbmltYXRlZFNwcml0ZSB8fCAhdGhpcy5fYW5pbWF0aW9uTmFtZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX2lzUGxheWluZyA9IHRydWU7XG5cblx0XHR0aGlzLl9hbmltYXRlZFNwcml0ZS5wbGF5KHRoaXMuX2FuaW1hdGlvbk5hbWUsIHRoaXMuX3BhcmFtcywgZnVuY3Rpb24gKCkge1xuXHRcdFx0cGFyZW50LmZpbmlzaCgpOyAgLy8gTWFyayB0aGlzIGFjdGlvbiBhcyBjb21wbGV0ZS5cblx0XHR9LmJpbmQodGhpcykpO1xuXHR9O1xuXG5cdHAuX3N0b3BBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuX2lzUGxheWluZyAmJiB0aGlzLl9hbmltYXRlZFNwcml0ZSkge1xuXHRcdFx0dGhpcy5fYW5pbWF0ZWRTcHJpdGUuc3RvcCgpO1xuXHRcdFx0dGhpcy5fYW5pbWF0ZWRTcHJpdGUuZ290b0FuZFN0b3AoMCk7XG5cblx0XHRcdHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHQvLyBSZWdpc3RlciBhIGZhY3RvcnkgbWV0aG9kIGZvciB0aGlzIGFjdGlvbi5cblx0QWN0aW9ucy5yZWdpc3RlcihcIkFuaW1hdGVTcHJpdGVcIiwgZnVuY3Rpb24gKGFuaW1hdGVkU3ByaXRlLCBhbmltYXRpb25OYW1lLCBwYXJhbXMpIHtcblx0XHRyZXR1cm4gbmV3IEFuaW1hdGVTcHJpdGVBY3Rpb24oYW5pbWF0ZWRTcHJpdGUsIGFuaW1hdGlvbk5hbWUsIHBhcmFtcyk7XG5cdH0pO1xuXG5cdG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5BbmltYXRlU3ByaXRlQWN0aW9uID0gQW5pbWF0ZVNwcml0ZUFjdGlvbjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgQWN0aW9uID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25cIik7XG5cdHZhciBBY3Rpb25zID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25zXCIpO1xuXG5cdC8vIENhbGwgYW4gYWN0aW9uIG9uY2Ugb3IgaW5maW5pdGVseSB1bnRpbCBmaW5pc2goKSBtZXRob2QgaXMgY2FsbGVkLlxuXHR2YXIgQmxvY2tpbmdBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uLCBpc0xvb3BlZCkge1xuXHRcdEFjdGlvbi5jYWxsKHRoaXMpO1xuXG5cdFx0dGhpcy5hY3Rpb24gPSBhY3Rpb247XG5cdFx0dGhpcy5sb29wID0gaXNMb29wZWQ7XG5cblx0XHR0aGlzLnJlc2V0KCk7XG5cdH07XG5cdHZhciBzID0gQWN0aW9uLnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoQmxvY2tpbmdBY3Rpb24sIEFjdGlvbik7XG5cblx0cC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9oYXNFeGVjdXRlZE9uY2UgPSBmYWxzZTtcblx0XHR0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuXHR9O1xuXG5cdHAudXBkYXRlID0gZnVuY3Rpb24gKGRlbHRhLCBkZWx0YU1TKSB7XG5cdFx0aWYgKHRoaXMubG9vcCB8fCAhdGhpcy5faGFzRXhlY3V0ZWRPbmNlKSB7XG5cdFx0XHR2YXIgaXNFbmQgPSB0aGlzLmFjdGlvbi51cGRhdGUoZGVsdGEsIGRlbHRhTVMpO1xuXG5cdFx0XHRpZiAoaXNFbmQpIHtcblx0XHRcdFx0dGhpcy5faGFzRXhlY3V0ZWRPbmNlID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5hY3Rpb24ucmVzZXQoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodGhpcy5fZmluaXNoZWQpIHtcblx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXHRwLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9maW5pc2hlZCA9IHRydWU7XG5cdH07XG5cblx0Ly8gUmVnaXN0ZXIgYSBmYWN0b3J5IG1ldGhvZCBmb3IgdGhpcyBhY3Rpb24uXG5cdEFjdGlvbnMucmVnaXN0ZXIoXCJCbG9ja2luZ1wiLCBmdW5jdGlvbiAoYWN0aW9uLCBpc0xvb3BlZCkge1xuXHRcdHJldHVybiBuZXcgQmxvY2tpbmdBY3Rpb24oYWN0aW9uLCBpc0xvb3BlZCk7XG5cdH0pO1xuXG5cdG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5CbG9ja2luZ0FjdGlvbiA9IEJsb2NraW5nQWN0aW9uO1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEFjdGlvbiA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uXCIpO1xuICAgIHZhciBBY3Rpb25zID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25zXCIpO1xuICAgIHZhciBUd2VlbkFjdGlvbiA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuVHdlZW5BY3Rpb25cIik7XG5cbiAgICAvLyBUd2VlbnMgYSBudW1iZXIgZnJvbSBzdGFydCB0byBlbmQgdmFsdWUsIGFuZCBwcm92aWRlcyBhbiB1cGRhdGUgY2FsbGJhY2sgb24gdGhpcyB2YWx1ZSBzbyB0aGF0XG4gICAgLy8gaXQgY2FuIGJlIHN5bmNocm9uaXNlZCB3aXRoIG90aGVyIHRoaW5ncy4gVGhpcyBzaW1wbGlmaWVzIGhhdmluZyB0byBjcmVhdGUgYSBkdW1teSBvYmplY3Qgd2l0aFxuICAgIC8vIHByb3BlcnR5IHRvIGZlZWQgdGhyb3VnaCBhIFR3ZWVuQWN0aW9uLiBUaGlzIGlzIHJlYWxseSB1c2VmdWwgZm9yIHRoaW5ncyBzdWNoIGFzOlxuICAgIC8vIC0gVHlwZXdyaXRlci1zdHlsZSB0ZXh0XG4gICAgLy8gLSBDb3VudGRvd25zXG4gICAgLy8gLSBTaW11bGF0aW5nIHByb2dyZXNzICh0aGlzIGFjdGlvbiBpcyB1c2VkIGFzIGEgZm91bmRhdGlvbiBmb3IgdGhlIElFMTFMb2FkQWN0aW9uKVxuICAgIHZhciBDb3VudGVyQWN0aW9uID0gZnVuY3Rpb24gKHN0YXJ0TnVtLCBlbmROdW0sIGR1cmF0aW9uLCBvblVwZGF0ZSwgdHdlZW5QYXJhbXMpIHtcbiAgICAgICAgQWN0aW9uLmNhbGwodGhpcyk7XG5cbiAgICAgICAgaWYgKCFvblVwZGF0ZSkge1xuICAgICAgICAgICAgdGhyb3cgXCJDb3VudGVyQWN0aW9uOiBvblVwZGF0ZSh2YWw6IG51bWJlcikgY2FsbGJhY2sgaXMgbnVsbC5cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3N0YXJ0TnVtID0gc3RhcnROdW07XG4gICAgICAgIHRoaXMuX2VuZE51bSA9IGVuZE51bTtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5vblVwZGF0ZSA9IG9uVXBkYXRlO1xuXG4gICAgICAgIHZhciBmaW5hbFR3ZWVuUGFyYW1zID0gdGhpcy5fY3JlYXRlVHdlZW5QYXJhbXModHdlZW5QYXJhbXMpO1xuICAgICAgICB0aGlzLl9kdW1teU9iaiA9IHsgdmFsOiAwIH07XG4gICAgICAgIHRoaXMuX3R3ZWVuQWN0aW9uID0gbmV3IFR3ZWVuQWN0aW9uKHRoaXMuX2R1bW15T2JqLCBmaW5hbFR3ZWVuUGFyYW1zKTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfTtcbiAgICB2YXIgcyA9IEFjdGlvbi5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoQ291bnRlckFjdGlvbiwgQWN0aW9uKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInN0YXJ0TnVtXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zdGFydE51bTsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImVuZE51bVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZW5kTnVtOyB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiZHVyYXRpb25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2R1cmF0aW9uOyB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwidHdlZW5BY3Rpb25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3R3ZWVuQWN0aW9uOyB9XG4gICAgfSk7XG5cbiAgICBwLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnR3ZWVuQWN0aW9uLnJlc2V0KCk7XG4gICAgfTtcblxuICAgIHAudXBkYXRlID0gZnVuY3Rpb24gKGRlbHRhLCBkZWx0YU1TKSB7XG4gICAgICAgIHZhciBpc0VuZCA9IHRoaXMudHdlZW5BY3Rpb24udXBkYXRlKGRlbHRhLCBkZWx0YU1TKTtcbiAgICAgICAgaWYgKGlzRW5kKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBwLl9jcmVhdGVUd2VlblBhcmFtcyA9IGZ1bmN0aW9uIChpbnB1dFR3ZWVuUGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBPYmplY3QuZXh0ZW5kKHt9LCBpbnB1dFR3ZWVuUGFyYW1zKTtcblxuICAgICAgICB2YXIgb25VcGRhdGVDYWxsYmFjayA9IHBhcmFtcy5vblVwZGF0ZTtcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmV4dGVuZChwYXJhbXMsIHtcbiAgICAgICAgICAgIGZyb206IHsgdmFsOiB0aGlzLl9zdGFydE51bSB9LFxuICAgICAgICAgICAgdG86IHsgdmFsOiB0aGlzLl9lbmROdW0gfSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLl9kdXJhdGlvbixcbiAgICAgICAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9uVXBkYXRlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgb25VcGRhdGVDYWxsYmFjayhvYmopO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25VcGRhdGUob2JqLnZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBSZWdpc3RlciBhIGZhY3RvcnkgbWV0aG9kIGZvciB0aGlzIGFjdGlvbi5cbiAgICBBY3Rpb25zLnJlZ2lzdGVyKFwiQ291bnRlclwiLCBmdW5jdGlvbiAoc3RhcnROdW0sIGVuZE51bSwgZHVyYXRpb24sIG9uVXBkYXRlLCB0d2VlblBhcmFtcykge1xuICAgICAgICByZXR1cm4gbmV3IENvdW50ZXJBY3Rpb24oc3RhcnROdW0sIGVuZE51bSwgZHVyYXRpb24sIG9uVXBkYXRlLCB0d2VlblBhcmFtcyk7XG4gICAgfSk7XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuQ291bnRlckFjdGlvbiA9IENvdW50ZXJBY3Rpb247XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0dmFyIEFjdGlvbiA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uXCIpO1xuXHR2YXIgQWN0aW9ucyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uc1wiKTtcblxuXHQvLyBBY3Rpb24gd2hpY2ggY2FsbHMgYSBmdW5jdGlvbiBhbmQgZW5kcy5cblx0dmFyIEZ1bmNBY3Rpb24gPSBmdW5jdGlvbiAoZnVuYykge1xuXHRcdEFjdGlvbi5jYWxsKHRoaXMpO1xuXG5cdFx0dGhpcy5mdW5jID0gZnVuYyB8fCBmdW5jdGlvbiAoKSB7fTtcblxuXHRcdHRoaXMucmVzZXQoKTtcblx0fTtcblx0dmFyIHMgPSBBY3Rpb24ucHJvdG90eXBlO1xuXHR2YXIgcCA9IGV4dGVuZChGdW5jQWN0aW9uLCBBY3Rpb24pO1xuXG5cdHAucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG5cdH07XG5cblx0cC51cGRhdGUgPSBmdW5jdGlvbiAoZGVsdGEsIGRlbHRhTVMpIHtcblx0XHR0aGlzLmZ1bmMoKTtcblx0XHR0aGlzLnJlc2V0KCk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvLyBSZWdpc3RlciBhIGZhY3RvcnkgbWV0aG9kIGZvciB0aGlzIGFjdGlvbi5cblx0QWN0aW9ucy5yZWdpc3RlcihcIkZ1bmNcIiwgZnVuY3Rpb24gKGZ1bmMpIHtcblx0XHRyZXR1cm4gbmV3IEZ1bmNBY3Rpb24oZnVuYyk7XG5cdH0pO1xuXG5cdG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5GdW5jQWN0aW9uID0gRnVuY0FjdGlvbjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgQWN0aW9uID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25cIik7XG5cdHZhciBBY3Rpb25zID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25zXCIpO1xuXG5cdC8vIEFycmF5IG9mIEFjdGlvbnMgZXhlY3V0ZWQgaW4gcGFyYWxsZWwgdG8gb25lIGFub3RoZXIuIFVzZSAnZW5kT25GaXJzdENvbXBsZXRlJyBvclxuXHQvLyAnZW5kT25OZXh0QWN0aW9uJyBwcm9wZXJ0eSB0byBmaW5pc2ggdGhpcyBhY3Rpb24gZWFybHkuXG5cdC8vIC0gTm90ZTogaWYgdGhpcyBQYXJhbGxlbEFjdGlvbiBpcyBleGVjdXRlZCBhIHNlY29uZCB0aW1lLCBvbmx5IHRoZSBhY3Rpb25zIHdoaWNoXG5cdC8vICAgZXhpc3Qgb24gcmVzZXQoKSB3aWxsIGJlIHJlc3RvcmVkLCBhbmQgYW55IGFjdGlvbnMgZHluYW1pY2FsbHkgYWRkZWQgdG8gdGhlXG5cdC8vICAgYWN0aW9ucyBhcnJheSB3aWxsIG5vdC4gVG8gY2lyY3VtdmVudCB0aGlzLCBhIG5ldyBQYXJhbGxlbEFjdGlvbiB3aWxsIG5lZWQgdG9cblx0Ly8gICBiZSBpbnN0YW50aWF0ZWQgd2l0aCB0aGUgZGVzaXJlZCBhY3Rpb24gbGlzdC5cblx0dmFyIFBhcmFsbGVsQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbnMsIGVuZE9uRmlyc3RDb21wbGV0ZSkge1xuXHRcdEFjdGlvbi5jYWxsKHRoaXMpO1xuXG5cdFx0dGhpcy5hY3Rpb25zID0gYWN0aW9ucztcblx0XHR0aGlzLmVuZE9uTmV4dEFjdGlvbiA9IGVuZE9uRmlyc3RDb21wbGV0ZTtcblxuXHRcdHRoaXMuX2VuZE9uRmlyc3RDb21wbGV0ZSA9IGVuZE9uRmlyc3RDb21wbGV0ZTtcblx0XHR0aGlzLl9vcmlnaW5hbEFjdGlvbnMgPSBbXTtcblxuXHRcdHRoaXMuX2NhY2hlQWN0aW9ucygpO1xuXHRcdHRoaXMucmVzZXQoKTtcblx0fTtcblx0dmFyIHMgPSBBY3Rpb24ucHJvdG90eXBlO1xuXHR2YXIgcCA9IGV4dGVuZChQYXJhbGxlbEFjdGlvbiwgQWN0aW9uKTtcblxuXHRwLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuYWN0aW9ucyA9IHRoaXMuX29yaWdpbmFsQWN0aW9ucy5zbGljZSgpO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFjdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhY3Rpb24gPSB0aGlzLmFjdGlvbnNbaV07XG5cdFx0XHRhY3Rpb24ucmVzZXQoKTtcblx0XHR9XG5cblx0XHR0aGlzLmVuZE9uTmV4dEFjdGlvbiA9IHRoaXMuX2VuZE9uRmlyc3RDb21wbGV0ZTtcblx0fTtcblxuXHRwLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWx0YSwgZGVsdGFNUykge1xuXHRcdGlmICghdGhpcy5hY3Rpb25zIHx8ICF0aGlzLmFjdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHR2YXIgcmVzdWx0ID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBpID0gdGhpcy5hY3Rpb25zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHR2YXIgYWN0aW9uID0gdGhpcy5hY3Rpb25zW2ldO1xuXG5cdFx0XHR2YXIgaXNFbmQgPSBhY3Rpb24udXBkYXRlKGRlbHRhLCBkZWx0YU1TKTtcblx0XHRcdGlmIChpc0VuZCkge1xuXHRcdFx0XHRhY3Rpb24ucmVzZXQoKTtcblx0XHRcdFx0dGhpcy5hY3Rpb25zLnNwbGljZShpLCAxKTtcblxuXHRcdFx0XHRpZiAodGhpcy5lbmRPbk5leHRBY3Rpb24pIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBLZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGlzdCBvZiBhY3Rpb25zICh0byBiZSByZXN0b3JlZCBvbiByZXNldCgpKS5cblx0cC5fY2FjaGVBY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zIHx8IFtdO1xuXHRcdHRoaXMuX29yaWdpbmFsQWN0aW9ucyA9IGFjdGlvbnMuc2xpY2UoKTtcblx0fTtcblxuXHQvLyBSZWdpc3RlciBhIGZhY3RvcnkgbWV0aG9kIGZvciB0aGlzIGFjdGlvbi5cblx0QWN0aW9ucy5yZWdpc3RlcihcIlBhcmFsbGVsXCIsIGZ1bmN0aW9uIChhY3Rpb25zLCBlbmRPbkZpcnN0Q29tcGxldGUpIHtcblx0XHRyZXR1cm4gbmV3IFBhcmFsbGVsQWN0aW9uKGFjdGlvbnMsIGVuZE9uRmlyc3RDb21wbGV0ZSk7XG5cdH0pO1xuXG5cdG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5QYXJhbGxlbEFjdGlvbiA9IFBhcmFsbGVsQWN0aW9uO1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEFjdGlvbiA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uXCIpO1xuICAgIHZhciBBY3Rpb25zID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25zXCIpO1xuXG4gICAgLy8gQWxsb3dzIHBsYXlpbmcsIHVwZGF0ZSBhbmQgc2VxdWVuY2luZyBvZiBhIFBhcnRpY2xlc1ZpZXcgcGFydGljbGUgZWZmZWN0LiBUaGUgYWN0aW9uXG4gICAgLy8gaXMgY29uc2lkZXJlZCBmaW5pc2hlZCB3aGVuIHRoZSBwYXJ0aWNsZXMgaGF2ZSBjb21wbGV0ZWQgYW5pbWF0aW5nLCBub3QganVzdCB3aGVuXG4gICAgLy8gdGhlIGVtaXR0ZXIgZmluaXNoZXMgZW1pdHRpbmcgcGFydGljbGVzLlxuICAgIHZhciBQYXJ0aWNsZXNBY3Rpb24gPSBmdW5jdGlvbiAocGFydGljbGVzVmlldykge1xuICAgICAgICBBY3Rpb24uY2FsbCh0aGlzKTtcblxuICAgICAgICBpZiAoIXBhcnRpY2xlc1ZpZXcpIHtcbiAgICAgICAgICAgIHRocm93IFwiUGFydGljbGVzQWN0aW9uOiBwYXJ0aWNsZXNWaWV3IGlzIG51bGwuXCI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IHBhcnRpY2xlc1ZpZXc7XG4gICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfTtcbiAgICB2YXIgcyA9IEFjdGlvbi5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoUGFydGljbGVzQWN0aW9uLCBBY3Rpb24pO1xuXG4gICAgcC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXMuZW5hYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGFydGljbGVzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBwLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWx0YSwgZGVsdGFNUykge1xuICAgICAgICBpZiAoIXRoaXMuX3N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzLmVuYWJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wYXJ0aWNsZXMudXBkYXRlKGRlbHRhKTtcblxuICAgICAgICBpZiAodGhpcy5fcGFydGljbGVzRmluaXNoZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgcC5fcGFydGljbGVzRmluaXNoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoIXRoaXMuX2VtaXR0ZXJJc0FjdGl2ZSgpICYmICF0aGlzLl9oYXNBY3RpdmVQYXJ0aWNsZXMoKSk7XG4gICAgfTtcblxuICAgIHAuX2VtaXR0ZXJJc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFydGljbGVzLmVuYWJsZTtcbiAgICB9O1xuXG4gICAgcC5faGFzQWN0aXZlUGFydGljbGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMucGFydGljbGVzLmVtaXR0ZXIucGFydGljbGVDb3VudCA+IDApO1xuICAgIH07XG5cbiAgICAvLyBSZWdpc3RlciBhIGZhY3RvcnkgbWV0aG9kIGZvciB0aGlzIGFjdGlvbi5cbiAgICBBY3Rpb25zLnJlZ2lzdGVyKFwiUGFydGljbGVzXCIsIGZ1bmN0aW9uIChwYXJ0aWNsZXNWaWV3KSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFydGljbGVzQWN0aW9uKHBhcnRpY2xlc1ZpZXcpO1xuICAgIH0pO1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlBhcnRpY2xlc0FjdGlvbiA9IFBhcnRpY2xlc0FjdGlvbjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgQWN0aW9uID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25cIik7XG5cdHZhciBBY3Rpb25zID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25zXCIpO1xuXG5cdC8vIEFycmF5IG9mIEFjdGlvbnMgZXhlY3V0ZWQgaW4gcGFyYWxsZWwgdG8gb25lIGFub3RoZXIuXG5cdHZhciBSZXBlYXRBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uLCBjb3VudCwgb25Mb29wRmluaXNoZWQpIHtcblx0XHRBY3Rpb24uY2FsbCh0aGlzKTtcblx0XHRcblx0XHR0aGlzLmFjdGlvbiA9IGFjdGlvbjtcblx0XHR0aGlzLmNvdW50ID0gY291bnQ7XG5cdFx0dGhpcy5vbkxvb3BGaW5pc2hlZCA9IG9uTG9vcEZpbmlzaGVkIHx8IGZ1bmN0aW9uIChjb3VudCkge307XG5cblx0XHR0aGlzLnJlc2V0KCk7XG5cdH07XG5cdHZhciBzID0gQWN0aW9uLnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoUmVwZWF0QWN0aW9uLCBBY3Rpb24pO1xuXG5cdHAucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5fY291bnQgPSB0aGlzLmNvdW50O1xuXG5cdFx0aWYgKCF0aGlzLl9jb3VudCkge1xuXHRcdFx0dGhpcy5fY291bnQgPSBJbmZpbml0eTtcblx0XHR9XG5cblx0XHR0aGlzLmFjdGlvbi5yZXNldCgpO1xuXHR9O1xuXG5cdHAudXBkYXRlID0gZnVuY3Rpb24gKGRlbHRhLCBkZWx0YU1TKSB7XG5cdFx0dmFyIGlzRW5kID0gdGhpcy5hY3Rpb24udXBkYXRlKGRlbHRhLCBkZWx0YU1TKTtcblx0XHRpZiAoaXNFbmQpIHtcblx0XHRcdHRoaXMuYWN0aW9uLnJlc2V0KCk7XG5cdFx0XHR0aGlzLl9jb3VudCA9ICh0aGlzLl9jb3VudCAtIDEpO1xuXG5cdFx0XHRpZiAodGhpcy5vbkxvb3BGaW5pc2hlZCkge1xuXHRcdFx0XHR0aGlzLm9uTG9vcEZpbmlzaGVkKHRoaXMuX2NvdW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodGhpcy5fY291bnQgPD0gMCkge1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdC8vIFJlZ2lzdGVyIGEgZmFjdG9yeSBtZXRob2QgZm9yIHRoaXMgYWN0aW9uLlxuXHRBY3Rpb25zLnJlZ2lzdGVyKFwiUmVwZWF0XCIsIGZ1bmN0aW9uIChhY3Rpb24sIGNvdW50LCBvbkxvb3BGaW5pc2hlZCkge1xuXHRcdHJldHVybiBuZXcgUmVwZWF0QWN0aW9uKGFjdGlvbiwgY291bnQsIG9uTG9vcEZpbmlzaGVkKTtcblx0fSk7XG5cblx0bmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlJlcGVhdEFjdGlvbiA9IFJlcGVhdEFjdGlvbjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgQWN0aW9uID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25cIik7XG5cdHZhciBBY3Rpb25zID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25zXCIpO1xuXG5cdC8vIEFycmF5IG9mIEFjdGlvbnMgZXhlY3V0ZWQgc2VxdWVudGlhbGx5IG9uZSBhZnRlciBhbm90aGVyLlxuXHR2YXIgU2VxdWVuY2VBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9ucykge1xuXHRcdEFjdGlvbi5jYWxsKHRoaXMpO1xuXHRcdHRoaXMuYWN0aW9ucyA9IGFjdGlvbnM7XG5cblx0XHR0aGlzLnJlc2V0KCk7XG5cdH07XG5cdHZhciBzID0gQWN0aW9uLnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoU2VxdWVuY2VBY3Rpb24sIEFjdGlvbik7XG5cblx0cC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9pbmRleCA9IDA7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYWN0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFjdGlvbiA9IHRoaXMuYWN0aW9uc1tpXTtcblx0XHRcdGFjdGlvbi5yZXNldCgpO1xuXHRcdH1cblx0fTtcblxuXHRwLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWx0YSwgZGVsdGFNUykge1xuXHRcdGlmICh0aGlzLl9pbmRleCA+PSB0aGlzLmFjdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0dmFyIGFjdGlvbiA9IHRoaXMuYWN0aW9uc1t0aGlzLl9pbmRleF07XG5cblx0XHR2YXIgaXNFbmQgPSBhY3Rpb24udXBkYXRlKGRlbHRhLCBkZWx0YU1TKTtcblx0XHRpZiAoaXNFbmQpIHtcblx0XHRcdGFjdGlvbi5yZXNldCgpO1xuXHRcdFx0dGhpcy5faW5kZXgrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0Ly8gUmVnaXN0ZXIgYSBmYWN0b3J5IG1ldGhvZCBmb3IgdGhpcyBhY3Rpb24uXG5cdEFjdGlvbnMucmVnaXN0ZXIoXCJTZXF1ZW5jZVwiLCBmdW5jdGlvbiAoYWN0aW9ucykge1xuXHRcdHJldHVybiBuZXcgU2VxdWVuY2VBY3Rpb24oYWN0aW9ucyk7XG5cdH0pO1xuXG5cdG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5TZXF1ZW5jZUFjdGlvbiA9IFNlcXVlbmNlQWN0aW9uO1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIERlbGF5QWN0aW9uID0gaW5jbHVkZShcImZyYW1ld29yay5EZWxheUFjdGlvblwiKTtcbiAgICB2YXIgQWN0aW9ucyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uc1wiKTtcblxuICAgIHZhciBSYW5kb21EZWxheUFjdGlvbiA9IGZ1bmN0aW9uIChtaW5UaW1lLCBtYXhUaW1lKSB7XG4gICAgICAgIERlbGF5QWN0aW9uLmNhbGwodGhpcywgMCk7XG5cbiAgICAgICAgdGhpcy5taW5UaW1lID0gbWluVGltZTtcbiAgICAgICAgdGhpcy5tYXhUaW1lID0gbWF4VGltZTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfTtcbiAgICB2YXIgcyA9IERlbGF5QWN0aW9uLnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChSYW5kb21EZWxheUFjdGlvbiwgRGVsYXlBY3Rpb24pO1xuXG4gICAgcC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJhbmRvbUZsb2F0ID0gTWF0aC5yYW5kb21GbG9hdCgwLCAxKTtcbiAgICAgICAgdGhpcy50aW1lID0gTWF0aC5sZXJwKHRoaXMubWluVGltZSwgdGhpcy5tYXhUaW1lLCByYW5kb21GbG9hdCk7XG5cbiAgICAgICAgcy5yZXNldC5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICAvLyBSZWdpc3RlciBhIGZhY3RvcnkgbWV0aG9kIGZvciB0aGlzIGFjdGlvbi5cbiAgICBBY3Rpb25zLnJlZ2lzdGVyKFwiUmFuZG9tRGVsYXlcIiwgZnVuY3Rpb24gKG1pblRpbWUsIG1heFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5kb21EZWxheUFjdGlvbihtaW5UaW1lLCBtYXhUaW1lKTtcbiAgICB9KTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5SYW5kb21EZWxheUFjdGlvbiA9IFJhbmRvbURlbGF5QWN0aW9uO1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEFjdGlvbiA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQWN0aW9uXCIpO1xuICAgIHZhciBBY3Rpb25zID0gaW5jbHVkZShcImZyYW1ld29yay5BY3Rpb25zXCIpO1xuXG4gICAgLy8gUGxheSBhIFNwaW5lIGFuaW1hdGlvbiAoYWxsb3dzIHNlcXVlbmNpbmcgb2Ygc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKCkpLlxuICAgIHZhciBTcGluZUFjdGlvbiA9IGZ1bmN0aW9uIChzcGluZSwgYW5pbU5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGZpbmFsT3B0aW9ucyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAgbG9vcDogZmFsc2UsXG4gICAgICAgICAgICB0cmFja0luZGV4OiAwLFxuICAgICAgICAgICAgZW5kT25DYW5jZWw6IGZhbHNlLCAgLy8gSWYgdHJ1ZSwgc2tpcHMgdG8gbGFzdCBmcmFtZSBvZiBhbmltYXRpb24uXG4gICAgICAgICAgICByZXNldFZhbHVlc09uU3RvcDogZmFsc2UgIC8vIElmIHRydWUsIHJlc2V0cyB0byBmcmFtZSAwIG9mIGFuaW1hdGlvbiAoaWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kT25DYW5jZWwgaXMgc2V0IHRvIHRydWUsIHRoaXMgaGFzIG5vIGVmZmVjdCkuXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIEFjdGlvbi5jYWxsKHRoaXMpO1xuXG4gICAgICAgIGlmICghc3BpbmUpIHtcbiAgICAgICAgICAgIHRocm93IFwiU3BpbmVBY3Rpb246IHNwaW5lIGlzIG51bGwuXCI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNwaW5lID0gc3BpbmU7XG4gICAgICAgIHRoaXMuYW5pbU5hbWUgPSBhbmltTmFtZTtcbiAgICAgICAgdGhpcy5sb29wID0gZmluYWxPcHRpb25zLmxvb3A7XG4gICAgICAgIHRoaXMudHJhY2tJbmRleCA9IGZpbmFsT3B0aW9ucy50cmFja0luZGV4O1xuICAgICAgICB0aGlzLmVuZE9uQ2FuY2VsID0gZmluYWxPcHRpb25zLmVuZE9uQ2FuY2VsO1xuICAgICAgICB0aGlzLnJlc2V0VmFsdWVzT25TdG9wID0gZmluYWxPcHRpb25zLnJlc2V0VmFsdWVzT25TdG9wO1xuXG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX2FjdGlvbiA9IHRoaXMuX2NyZWF0ZUFjdGlvbigpO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9O1xuICAgIHZhciBzID0gQWN0aW9uLnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChTcGluZUFjdGlvbiwgQWN0aW9uKTtcblxuICAgIHAucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2FjdGlvbi5yZXNldCgpO1xuXG4gICAgICAgIHRoaXMuX3N0b3BBbmltYXRpb24oKTtcbiAgICB9O1xuXG4gICAgcC51cGRhdGUgPSBmdW5jdGlvbiAoZGVsdGEsIGRlbHRhTVMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNFbmQgPSB0aGlzLl9hY3Rpb24udXBkYXRlKGRlbHRhLCBkZWx0YU1TKTtcbiAgICAgICAgaWYgKGlzRW5kKSB7XG4gICAgICAgICAgICB0aGlzLl9maW5pc2hlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHAuX2NyZWF0ZUFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlbGF5QWN0aW9uID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5sb29wKSB7XG4gICAgICAgICAgICBkZWxheUFjdGlvbiA9IEFjdGlvbnMuUmVwZWF0KEFjdGlvbnMuRnVuYygpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLnNwaW5lLnN0YXRlLmRhdGEuc2tlbGV0b25EYXRhLmZpbmRBbmltYXRpb24odGhpcy5hbmltTmFtZSk7XG4gICAgICAgICAgICBpZiAoIWFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHRocm93IFwiU3BpbmVBY3Rpb246IGNvdWxkIG5vdCBmaW5kIGFuaW1hdGlvbiBmb3IgYW5pbU5hbWUgJ1wiICsgdGhpcy5hbmltTmFtZSArIFwiJy5cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGFuaW1UaW1lID0gYW5pbWF0aW9uLmR1cmF0aW9uO1xuICAgICAgICAgICAgZGVsYXlBY3Rpb24gPSBBY3Rpb25zLkRlbGF5KGFuaW1UaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBBY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgIEFjdGlvbnMuRnVuYyh0aGlzLl9wbGF5QW5pbWF0aW9uLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgZGVsYXlBY3Rpb25cbiAgICAgICAgXSk7XG4gICAgfTtcblxuICAgIHAuX3BsYXlBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKHRoaXMudHJhY2tJbmRleCwgdGhpcy5hbmltTmFtZSwgdGhpcy5sb29wKTtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcC5fc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucnVubmluZykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZW5kT25DYW5jZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmRBbmltYXRpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZXNldFZhbHVlc09uU3RvcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0QW5pbWF0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhdXNlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX2VuZEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRyYWNrRW50cnkgPSB0aGlzLnNwaW5lLnN0YXRlLmV4cGFuZFRvSW5kZXgodGhpcy50cmFja0luZGV4KTtcbiAgICAgICAgaWYgKHRyYWNrRW50cnkpIHtcbiAgICAgICAgICAgIHRyYWNrRW50cnkudHJhY2tUaW1lID0gdHJhY2tFbnRyeS50cmFja0VuZDtcbiAgICAgICAgICAgIHRoaXMuc3BpbmUudXBkYXRlKDApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX3Jlc2V0QW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNwaW5lLnN0YXRlLnNldEFuaW1hdGlvbih0aGlzLnRyYWNrSW5kZXgsIHRoaXMuYW5pbU5hbWUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zcGluZS51cGRhdGUoMCk7XG4gICAgICAgIHRoaXMuc3BpbmUuc3RhdGUuY2xlYXJUcmFjayh0aGlzLnRyYWNrSW5kZXgpO1xuICAgIH07XG5cbiAgICBwLl9wYXVzZUFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zcGluZS5zdGF0ZS5jbGVhclRyYWNrKHRoaXMudHJhY2tJbmRleCk7XG4gICAgfTtcblxuICAgIHAuX2ZpbmlzaGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9hY3Rpb24ucmVzZXQoKTtcbiAgICB9O1xuXG4gICAgLy8gUmVnaXN0ZXIgYSBmYWN0b3J5IG1ldGhvZCBmb3IgdGhpcyBhY3Rpb24uXG4gICAgQWN0aW9ucy5yZWdpc3RlcihcIlNwaW5lXCIsIGZ1bmN0aW9uIChzcGluZSwgYW5pbU5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTcGluZUFjdGlvbihzcGluZSwgYW5pbU5hbWUsIG9wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlNwaW5lQWN0aW9uID0gU3BpbmVBY3Rpb247XG59KCkpO1xuIiwiXG4oZnVuY3Rpb24gKCkge1xuXHR2YXIgRXZlbnRFbWl0dGVyID0gaW5jbHVkZShcIlBJWEkudXRpbHMuRXZlbnRFbWl0dGVyXCIpO1xuXHR2YXIgR2VuZXJhbFV0aWxzID0gaW5jbHVkZShcImZyYW1ld29yay5HZW5lcmFsVXRpbHNcIik7XG5cblx0Ly8gR2VuZXJhdGVkIGJ5IHRoZSBBY3Rpb25NYW5hZ2VyIHRvIG1hbmFnZSBhIHJ1bm5pbmcgQWN0aW9uLlxuXHR2YXIgQWN0aW9uSW5zdGFuY2UgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG5cdFx0RXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cblx0XHR0aGlzLl9pZCA9IEdlbmVyYWxVdGlscy5nZW5lcmF0ZUdVSURTdHJpbmcoKTtcblx0XHR0aGlzLmFjdGlvbiA9IGFjdGlvbjtcblxuXHRcdHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLl9lbmRlZCA9IGZhbHNlO1xuXHRcdHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXHR9O1xuXHR2YXIgcyA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGU7XG5cdHZhciBwID0gZXh0ZW5kKEFjdGlvbkluc3RhbmNlLCBFdmVudEVtaXR0ZXIpO1xuXHRcblx0cC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9zdGFydGVkID0gZmFsc2U7XG5cdFx0dGhpcy5fZW5kZWQgPSBmYWxzZTtcblx0XHR0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblx0fTtcblxuXHRwLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWx0YSwgZGVsdGFNUykge1xuXHRcdGlmICghdGhpcy5fc3RhcnRlZCkge1xuXHRcdFx0dGhpcy5lbWl0KFwic3RhcnRcIik7XG5cblx0XHRcdHRoaXMuX3N0YXJ0ZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy5fYWN0aXZlID0gdHJ1ZTtcblx0XHR9XG5cblx0XHR2YXIgZW5kZWQgPSB0aGlzLmFjdGlvbi51cGRhdGUoZGVsdGEsIGRlbHRhTVMpO1xuXG5cdFx0aWYgKGVuZGVkICYmIHRoaXMuX2FjdGl2ZSkge1xuXHRcdFx0dGhpcy5lbmQoKTtcblx0XHR9XG5cdH07XG5cblx0cC5lbmQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuX2VuZGVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fZmluaXNoKCk7XG5cdFx0dGhpcy5lbWl0KFwiZW5kXCIpO1xuXHR9O1xuXG5cdHAuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLl9lbmRlZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLl9maW5pc2goKTtcblx0XHR0aGlzLmFjdGlvbi5yZXNldCgpO1xuICAgICAgICB0aGlzLmVtaXQoXCJjYW5jZWxcIik7XG5cdH07XG5cblx0cC5pc0VuZGVkID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLl9lbmRlZDtcblx0fTtcblxuXHRwLl9maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xuXHRcdHRoaXMuX2VuZGVkID0gdHJ1ZTtcblx0XHR0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblx0fTtcblxuXHRuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuQWN0aW9uSW5zdGFuY2UgPSBBY3Rpb25JbnN0YW5jZTtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgQWN0aW9uSW5zdGFuY2UgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkFjdGlvbkluc3RhbmNlXCIpO1xuXG5cdHZhciBBY3Rpb25NYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuYWN0aW9ucyA9IHt9O1xuXHRcdHRoaXMuX2FjdGlvbnNUb0RlbGV0ZSA9IFtdO1xuXG5cdFx0dGhpcy5fbGFzdCA9IDA7XG5cdH07XG5cdHZhciBwID0gQWN0aW9uTWFuYWdlci5wcm90b3R5cGU7XG5cblx0Ly8gVXBkYXRlIGFjdGlvbnMgYW5kIHJlbW92ZSB0aG9zZSBxdWV1ZWQgdG8gYmUgZGVsZXRlZC5cblx0cC51cGRhdGUgPSBmdW5jdGlvbiAoZGVsdGEpIHtcblx0XHR2YXIgZGVsdGFNUztcblxuXHRcdGlmICghZGVsdGEgJiYgKGRlbHRhICE9PSAwKSkge1xuXHRcdFx0ZGVsdGFNUyA9IHRoaXMuX2dldERlbHRhTVMoKTtcblx0XHRcdGRlbHRhID0gKGRlbHRhTVMgLyAxMDAwKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVsdGFNUyA9IChkZWx0YSAqIDEwMDApO1xuXHRcdH1cblxuXHRcdC8vIFVwZGF0ZSBhY3Rpb25zIGFuZCBxdWV1ZSBjb21wbGV0ZWQgYWN0aW9ucyBmb3IgZGVsZXRpb24uXG5cdFx0Zm9yICh2YXIgaWQgaW4gdGhpcy5hY3Rpb25zKSB7XG5cdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYWN0aW9ucywgaWQpKSB7XG5cdFx0XHRcdHZhciBhY3Rpb25JbnN0YW5jZSA9IHRoaXMuYWN0aW9uc1tpZF07XG5cblx0XHRcdFx0Ly8gRG8gbm90IHByb2Nlc3MgYWN0aW9uIGlmIGl0IGlzIHF1ZXVlZCB0byBiZSBkZWxldGVkLlxuXHRcdFx0XHRpZiAodGhpcy5faXNRdWV1ZWRGb3JEZWxldGlvbihhY3Rpb25JbnN0YW5jZSkpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFjdGlvbkluc3RhbmNlLnVwZGF0ZShkZWx0YSwgZGVsdGFNUyk7XG5cblx0XHRcdFx0aWYgKGFjdGlvbkluc3RhbmNlLmlzRW5kZWQoKSkge1xuXHRcdFx0XHRcdHRoaXMuX2FjdGlvbnNUb0RlbGV0ZS5wdXNoKGFjdGlvbkluc3RhbmNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIERlbGV0ZSBhY3Rpb25zLlxuXHRcdGlmICh0aGlzLl9hY3Rpb25zVG9EZWxldGUubGVuZ3RoKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2FjdGlvbnNUb0RlbGV0ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR0aGlzLl9kZWxldGVBY3Rpb24odGhpcy5fYWN0aW9uc1RvRGVsZXRlW2ldKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2FjdGlvbnNUb0RlbGV0ZS5sZW5ndGggPSAwO1xuXHRcdH1cblx0fTtcblxuXHQvLyBTdGFydCB0aGUgcHJvdmlkZWQgYWN0aW9uLlxuXHRwLnJ1bkFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcblx0XHR2YXIgYWN0aW9uSW5zdGFuY2UgPSBuZXcgQWN0aW9uSW5zdGFuY2UoYWN0aW9uKTtcblx0XHRhY3Rpb25JbnN0YW5jZS51cGRhdGUoMCwgMCk7XG5cblx0XHR0aGlzLmFjdGlvbnNbYWN0aW9uSW5zdGFuY2UuX2lkXSA9IGFjdGlvbkluc3RhbmNlO1xuXG5cdFx0cmV0dXJuIGFjdGlvbkluc3RhbmNlO1xuXHR9O1xuXG5cdC8vIEltbWVkaWF0ZWx5IGNhbmNlbCBhY3Rpb24gaW5zdGFuY2UgdG8gYmUgZGVsZXRlZC5cblx0cC5jYW5jZWxBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uSW5zdGFuY2UpIHtcblx0XHRpZiAoYWN0aW9uSW5zdGFuY2UpIHtcblx0XHRcdGFjdGlvbkluc3RhbmNlLmNhbmNlbCgpO1xuXHRcdFx0dGhpcy5fZGVsZXRlQWN0aW9uKGFjdGlvbkluc3RhbmNlKTtcblx0XHR9XG5cdH07XG5cblx0cC5fZ2V0RGVsdGFNUyA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodGhpcy5fbGFzdCA9PT0gMCkge1xuXHRcdFx0dGhpcy5fbGFzdCA9IERhdGUubm93KCk7XG5cdFx0fVxuXG5cdFx0dmFyIG5vdyA9IERhdGUubm93KCk7XG5cdFx0dmFyIGRlbHRhTVMgPSAobm93IC0gdGhpcy5fbGFzdCk7XG5cdFx0dGhpcy5fbGFzdCA9IG5vdztcblxuXHRcdHJldHVybiBkZWx0YU1TO1xuXHR9O1xuXG5cdHAuX2lzUXVldWVkRm9yRGVsZXRpb24gPSBmdW5jdGlvbiAoYWN0aW9uSW5zdGFuY2UpIHtcblx0XHRyZXR1cm4gKHRoaXMuX2FjdGlvbnNUb0RlbGV0ZS5pbmRleE9mKGFjdGlvbkluc3RhbmNlKSAhPT0gLTEpO1xuXHR9O1xuXG5cdHAuX2RlbGV0ZUFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb25JbnN0YW5jZSkge1xuXHRcdGlmIChhY3Rpb25JbnN0YW5jZSAmJiB0aGlzLmFjdGlvbnNbYWN0aW9uSW5zdGFuY2UuX2lkXSkge1xuXHRcdFx0ZGVsZXRlICh0aGlzLmFjdGlvbnNbYWN0aW9uSW5zdGFuY2UuX2lkXSk7XG5cdFx0fVxuXHR9O1xuXG5cdG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5BY3Rpb25NYW5hZ2VyID0gQWN0aW9uTWFuYWdlcjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBSZWN0YW5nbGUgPSBpbmNsdWRlKFwiUElYSS5SZWN0YW5nbGVcIik7XG5cbiAgICB2YXIgcCA9IFJlY3RhbmdsZS5wcm90b3R5cGU7XG4gICAgcC5vdmVybGFwc1JlY3QgPSBmdW5jdGlvbiAocmVjdCkge1xuICAgICAgICByZXR1cm4gIShcbiAgICAgICAgICAgICh0aGlzLnJpZ2h0IDwgcmVjdC5sZWZ0KSB8fFxuICAgICAgICAgICAgKHJlY3QucmlnaHQgPCB0aGlzLmxlZnQpIHx8XG4gICAgICAgICAgICAodGhpcy5ib3R0b20gPCByZWN0LnRvcCkgfHxcbiAgICAgICAgICAgIChyZWN0LmJvdHRvbSA8IHRoaXMudG9wKVxuICAgICAgICApO1xuICAgIH07XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAvL1RPRE86IE1pZ2h0IG5vdCB3b3JrIHdpdGggdHJpbW1pbmcuIEluIHRoYXQgY2FzZSBoYW5kbGUgdGhlIHRyaW1pbmcuXG4gICAgdmFyIFRyYW5zcGFyZW5jeUhpdEFyZWEgPSBmdW5jdGlvbiAoc3ByaXRlLCBhbHBoYVRocmVzaG9sZCkge1xuICAgICAgICBpZiAoIXNwcml0ZSkge1xuICAgICAgICAgICAgdGhyb3cgXCJUcmFuc3BhcmVuY3lIaXRBcmVhOiBzcHJpdGUgaXMgbnVsbC5cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3ByaXRlID0gc3ByaXRlO1xuICAgICAgICB0aGlzLmFscGhhVGhyZXNob2xkID0gaXNEZWZpbmVkKGFscGhhVGhyZXNob2xkKSA/IGFscGhhVGhyZXNob2xkIDogMjsgIC8vIFswLCAyNTVdIHZhbHVlLlxuICAgICAgICB0aGlzLnRleHR1cmVEYXRhID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9pbml0KCk7XG4gICAgfTtcbiAgICB2YXIgcCA9IFRyYW5zcGFyZW5jeUhpdEFyZWEucHJvdG90eXBlO1xuXG4gICAgcC5jb250YWlucyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIC8vIGZpcnN0IG9mIGFsbCBwZXJmb3JtIGEgcmVjdGFuZ2xlIGJvdW5kcyBjaGVja1xuICAgICAgICAvLyB3aXRoIG5lZ2F0aXZlIHNjYWxlLCB3aWR0aC9oZWlnaHQgY2FuIGFsc28gYmUgbmVnYXRpdmVcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc3ByaXRlLndpZHRoKSA9PT0gMCB8fCBNYXRoLmFicyh0aGlzLnNwcml0ZS5oZWlnaHQpID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHggPSB0aGlzLl90cmFuc2xhdGVYRm9yQW5jaG9yKHRoaXMuc3ByaXRlLCB4LCB0aGlzLnNwcml0ZS5zY2FsZS54KTtcbiAgICAgICAgeSA9IHRoaXMuX3RyYW5zbGF0ZVlGb3JBbmNob3IodGhpcy5zcHJpdGUsIHksIHRoaXMuc3ByaXRlLnNjYWxlLnkpO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc0luUmVuZGVyZWRCb3VuZHMoeCwgeSwgdGhpcy5zcHJpdGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNUZXh0dXJlVHJhbnNwYXJlbnRBdChNYXRoLnJvdW5kKHgpLCBNYXRoLnJvdW5kKHkpLCB0aGlzLnNwcml0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHAuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNwYXJlbmN5SGl0QXJlYSh0aGlzLnNwcml0ZSk7XG4gICAgfTtcblxuICAgIHAuaXNUZXh0dXJlVHJhbnNwYXJlbnRBdCA9IGZ1bmN0aW9uICh4LCB5LCBzcHJpdGUpIHtcbiAgICAgICAgLy8gdGhlIHRleHR1cmVEYXRhIGNvbnRhaW5zIDQgZWxlbWVudHMgcGVyIHBpeGVsLCB0aGUgNHRoIGJlaW5nIGFscGhhIGNoYW5uZWxcbiAgICAgICAgdmFyIGluZGV4ID0gKHggKyB5ICogc3ByaXRlLnRleHR1cmUud2lkdGgpICogNCArIDM7XG5cbiAgICAgICAgLy8gdmFsdWUgMjU1IG1lYW5zIGZ1bGx5IG9wYXF1ZSwgPCAyNTUgbWVhbnMgKGF0IGxlYXN0IHBhcnRpYWxseSkgdHJhbnNwYXJlbnRcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZURhdGFbaW5kZXhdIDwgdGhpcy5hbHBoYVRocmVzaG9sZDtcbiAgICB9O1xuXG4gICAgcC5nZXRUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuc3ByaXRlKSA/IHRoaXMuc3ByaXRlLnRleHR1cmUuYmFzZVRleHR1cmUuc291cmNlIDogbnVsbDtcbiAgICB9O1xuXG4gICAgcC5faW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dHVyZURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ZXh0dXJlID0gdGhpcy5nZXRUZXh0dXJlKCk7XG5cbiAgICAgICAgdGhpcy50ZXh0dXJlRGF0YSA9IHRoaXMuX2NyZWF0ZVRleHR1cmVEYXRhKHRleHR1cmUpO1xuICAgIH07XG5cbiAgICBwLl90cmFuc2xhdGVYRm9yQW5jaG9yID0gZnVuY3Rpb24gKHNwcml0ZSwgeCwgc2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIHggKyAoc3ByaXRlLnRleHR1cmUud2lkdGggKiBzcHJpdGUuYW5jaG9yLngpO1xuICAgIH07XG5cbiAgICBwLl90cmFuc2xhdGVZRm9yQW5jaG9yID0gZnVuY3Rpb24gKHNwcml0ZSwgeSwgc2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIHkgKyAoc3ByaXRlLnRleHR1cmUuaGVpZ2h0ICogc3ByaXRlLmFuY2hvci55KTtcbiAgICB9O1xuXG4gICAgcC5faXNJblJlbmRlcmVkQm91bmRzID0gZnVuY3Rpb24gKHgsIHksIHNwcml0ZSkge1xuICAgICAgICB2YXIgeEluVGV4dHVyZSA9IE1hdGgucm91bmQoeCk7XG4gICAgICAgIHZhciB5SW5UZXh0dXJlID0gTWF0aC5yb3VuZCh5KTtcblxuICAgICAgICB2YXIgdyA9IHNwcml0ZS50ZXh0dXJlLndpZHRoO1xuICAgICAgICB2YXIgaCA9IHNwcml0ZS50ZXh0dXJlLmhlaWdodDtcbiAgICBcbiAgICAgICAgcmV0dXJuICgoeEluVGV4dHVyZSA+PSAwICYmIHhJblRleHR1cmUgPD0gdykgJiYgKHlJblRleHR1cmUgPj0gMCAmJiB5SW5UZXh0dXJlIDw9IGgpKTtcbiAgICB9O1xuXG4gICAgcC5fY3JlYXRlVGV4dHVyZURhdGEgPSBmdW5jdGlvbiAodGV4dHVyZSkge1xuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgXG4gICAgICAgIHZhciBzcHJpdGVUZXh0dXJlID0gdGhpcy5zcHJpdGUudGV4dHVyZTtcbiAgICAgICBcbiAgICAgICAgdmFyIHggPSBzcHJpdGVUZXh0dXJlLm9yaWcueDtcbiAgICAgICAgdmFyIHkgPSBzcHJpdGVUZXh0dXJlLm9yaWcueTtcbiAgICAgICAgdmFyIHdpZHRoID0gc3ByaXRlVGV4dHVyZS5vcmlnLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gc3ByaXRlVGV4dHVyZS5vcmlnLmhlaWdodDtcblxuICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0ZXh0dXJlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdmFyIHBpeGVsRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTtcblxuICAgICAgICByZXR1cm4gcGl4ZWxEYXRhO1xuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuVHJhbnNwYXJlbmN5SGl0QXJlYSA9IFRyYW5zcGFyZW5jeUhpdEFyZWE7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0dmFyIFZpZXdVdGlscyA9IFZpZXdVdGlscyB8fCB7fTtcblxuXHQvLyBDb252ZXJ0IHZpZXcgdG8gUE5HIGFzIGJhc2UtNjQgZW5jb2RlZCBzdHJpbmcuIFF1YWxpdHkgaXMgb3B0aW9uYWwgKGRlZmF1bHQgPSAwLjkyKS5cblx0Vmlld1V0aWxzLmNvbnZlcnRWaWV3VG9CYXNlNjRQTkcgPSBmdW5jdGlvbiAodmlldywgcXVhbGl0eSkge1xuXHRcdHZhciBjYW52YXMgPSBWaWV3VXRpbHMuY29udmVydFZpZXdUb0NhbnZhcyh2aWV3KTtcblx0XHRyZXR1cm4gY2FudmFzLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiLCBxdWFsaXR5KTtcblx0fTtcblxuXHQvLyBDb252ZXJ0IHZpZXcgdG8gSlBFRyBhcyBiYXNlLTY0IGVuY29kZWQgc3RyaW5nLiBRdWFsaXR5IGlzIG9wdGlvbmFsIChkZWZhdWx0ID0gMC45MikuXG5cdFZpZXdVdGlscy5jb252ZXJ0Vmlld1RvQmFzZTY0SlBFRyA9IGZ1bmN0aW9uICh2aWV3LCBxdWFsaXR5KSB7XG5cdFx0dmFyIGNhbnZhcyA9IFZpZXdVdGlscy5jb252ZXJ0Vmlld1RvQ2FudmFzKHZpZXcpO1xuXHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvanBlZ1wiLCBxdWFsaXR5KTtcblx0fTtcblxuXHQvLyBDb252ZXJ0IHZpZXcgdG8gSFRNTCA8aW1hZ2U+IGVsZW1lbnQuXG5cdFZpZXdVdGlscy5jb252ZXJ0Vmlld1RvSW1hZ2UgPSBmdW5jdGlvbiAodmlldykge1xuXHRcdHZhciBleHRyYWN0TWFuYWdlciA9IGFwcC5nZXRSZW5kZXJlcigpLmV4dHJhY3Q7XG5cdFx0cmV0dXJuIGV4dHJhY3RNYW5hZ2VyLmltYWdlKHZpZXcpO1xuXHR9O1xuXG5cdC8vIENvbnZlcnQgdmlldyB0byBIVE1MIDxjYW52YXM+IGVsZW1lbnQuXG5cdFZpZXdVdGlscy5jb252ZXJ0Vmlld1RvQ2FudmFzID0gZnVuY3Rpb24gKHZpZXcpIHtcblx0XHRjb25zb2xlLndhcm4oXCJWaWV3VXRpbHMuY29udmVydFZpZXdUb0NhbnZhcygpIGRvZXMgbm90IHdvcmsgaW4gY2FudmFzIG1vZGUuXCIpO1xuXG5cdFx0dmFyIGV4dHJhY3RNYW5hZ2VyID0gYXBwLmdldFJlbmRlcmVyKCkuZXh0cmFjdDtcblx0XHRyZXR1cm4gZXh0cmFjdE1hbmFnZXIuY2FudmFzKHZpZXcpO1xuXHR9O1xuXG5cdC8vIE9idGFpbiAxRCBhcnJheSBvZiBVaW50OCBSR0JBIGRhdGEgcmVwcmVzZW50aW5nIHRoaXMgdmlldyBpbiB0ZXh0dXJlIGZvcm0uXG5cdFZpZXdVdGlscy5nZXRUZXh0dXJlRGF0YUZyb21WaWV3ID0gZnVuY3Rpb24gKHZpZXcpIHtcblx0XHRjb25zb2xlLndhcm4oXCJWaWV3VXRpbHMuZ2V0VGV4dHVyZURhdGFGcm9tVmlldygpIGRvZXMgbm90IHdvcmsgaW4gYm90aCBXZWJHTCBhbmQgY2FudmFzIG1vZGUuXCIpO1xuXG5cdFx0dmFyIGV4dHJhY3RNYW5hZ2VyID0gYXBwLmdldFJlbmRlcmVyKCkuZXh0cmFjdDtcblx0XHRyZXR1cm4gZXh0cmFjdE1hbmFnZXIucGl4ZWxzKHZpZXcpO1xuXHR9O1xuXG5cdC8vIERvd25sb2FkIHZpZXcgYXMgYSBQTkcgaW1hZ2UgdG8gZmlsZSBzeXN0ZW0uXG5cdC8vIC0gVmlldyBpcyBtYW5kYXRvcnksIG90aGVyIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsLlxuXHRWaWV3VXRpbHMuZG93bmxvYWRWaWV3QXNQTkcgPSBmdW5jdGlvbiAodmlldywgZmlsZU5hbWUsIGZpbmlzaGVkQ2FsbGJhY2ssIHF1YWxpdHkpIHtcblx0XHRmaWxlTmFtZSA9IGZpbGVOYW1lIHx8IFwib3V0cHV0LnBuZ1wiO1xuXHRcdGRvd25sb2FkVmlldyh2aWV3LCBmaWxlTmFtZSwgZmluaXNoZWRDYWxsYmFjaywgcXVhbGl0eSwgXCJpbWFnZS9wbmdcIik7XG5cdH07XG5cblx0Ly8gRG93bmxvYWQgdmlldyBhcyBhIEpQRUcgaW1hZ2UgdG8gZmlsZSBzeXN0ZW0uXG5cdC8vIC0gVmlldyBpcyBtYW5kYXRvcnksIG90aGVyIHBhcmFtZXRlcnMgYXJlIG9wdGlvbmFsLlxuXHRWaWV3VXRpbHMuZG93bmxvYWRWaWV3QXNKUEVHID0gZnVuY3Rpb24gKHZpZXcsIGZpbGVOYW1lLCBmaW5pc2hlZENhbGxiYWNrLCBxdWFsaXR5KSB7XG5cdFx0ZmlsZU5hbWUgPSBmaWxlTmFtZSB8fCBcIm91dHB1dC5qcGVnXCI7XG5cdFx0ZG93bmxvYWRWaWV3KHZpZXcsIGZpbGVOYW1lLCBmaW5pc2hlZENhbGxiYWNrLCBxdWFsaXR5LCBcImltYWdlL2pwZWdcIik7XG5cdH07XG5cblx0dmFyIGRvd25sb2FkVmlldyA9IGZ1bmN0aW9uICh2aWV3LCBmaWxlTmFtZSwgZmluaXNoZWRDYWxsYmFjaywgcXVhbGl0eSwgdHlwZSkge1xuXHRcdHZhciBjYW52YXMgPSBWaWV3VXRpbHMuY29udmVydFZpZXdUb0NhbnZhcyh2aWV3KTtcblxuXHRcdGNhbnZhcy50b0Jsb2IoZnVuY3Rpb24gKGJsb2IpIHtcblx0XHRcdHZhciBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kKGFuY2hvcik7XG5cdFx0XHRhbmNob3IuZG93bmxvYWQgPSBmaWxlTmFtZTtcblx0XHRcdGFuY2hvci5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRcdFx0YW5jaG9yLmNsaWNrKCk7XG5cdFx0XHRhbmNob3IucmVtb3ZlKCk7XG5cblx0XHRcdGlmIChmaW5pc2hlZENhbGxiYWNrKSB7XG5cdFx0XHRcdGZpbmlzaGVkQ2FsbGJhY2sodmlldywgZmlsZU5hbWUpO1xuXHRcdFx0fVxuXHRcdH0sIHR5cGUsIHF1YWxpdHkpO1xuXHR9O1xuXG5cdG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5WaWV3VXRpbHMgPSBWaWV3VXRpbHM7XG59KCkpO1xuIiwiaW1wb3J0IEZhY3RvcnlIZWxwZXIgZnJvbSBcIi4vdXRpbHMvRmFjdG9yeUhlbHBlclwiO1xuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgU3ByaXRlID0gaW5jbHVkZShcIlBJWEkuU3ByaXRlXCIpO1xuICAgIHZhciBSZWN0YW5nbGUgPSBpbmNsdWRlKFwiUElYSS5SZWN0YW5nbGVcIik7XG4gICAgdmFyIEJsZW5kTW9kZXMgPSBpbmNsdWRlKFwiUElYSS5CTEVORF9NT0RFU1wiKTtcbiAgICB2YXIgQ29sb3VyVXRpbHMgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkNvbG91clV0aWxzXCIpO1xuXG4gICAgdmFyIFNwcml0ZVZpZXcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IDAuMCxcbiAgICAgICAgICAgICAgICB5OiAwLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb3RhdGlvbjogMC4wLFxuICAgICAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgICAgICB4OiAxLjAsXG4gICAgICAgICAgICAgICAgeTogMS4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGl2b3Q6IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxwaGE6IDEuMCxcbiAgICAgICAgICAgIGlzSW50ZXJhY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgbWFzazogbnVsbCxcbiAgICAgICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgICAgIGNvbG91clRpbnQ6IFwiI2ZmZmZmZlwiLCAgLy8gQWxsIGNvbG91cnMgaW4gdGhlIHZpZXcgYXJlIG1vZHVsYXRlZCB3aXRoIHRoaXMuXG4gICAgICAgICAgICB0ZXh0dXJlTmFtZTogbnVsbCxcbiAgICAgICAgICAgIHRleHR1cmU6IG51bGwsXG4gICAgICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2tldzoge1xuICAgICAgICAgICAgICAgIHg6IDAuMCxcbiAgICAgICAgICAgICAgICB5OiAwLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibGVuZE1vZGU6IFwiTk9STUFMXCIgIC8vIENvcnJlc3BvbmRzIHRvIHZhbHVlIGluIFBJWEkuQkxFTkRfTU9ERVMgZW51bS5cbiAgICAgICAgfSwgY29uZmlnKTtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIHZhciB0ZXh0dXJlID0gKGZpbmFsQ29uZmlnLnRleHR1cmVOYW1lKSA/IGFwcC5nZXRDYWNoZShmaW5hbENvbmZpZy50ZXh0dXJlTmFtZSkgOiBmaW5hbENvbmZpZy50ZXh0dXJlO1xuICAgICAgICBTcHJpdGUuY2FsbCh0aGlzLCB0ZXh0dXJlKTtcbiAgICAgICAgdGhpcy50aW50ID0gQ29sb3VyVXRpbHMuY29sb3VyVG9OdW1iZXIoZmluYWxDb25maWcuY29sb3VyVGludCk7XG4gICAgICAgIHRoaXMuYW5jaG9yID0gbmV3IFBJWEkuUG9pbnQoZmluYWxDb25maWcuYW5jaG9yLngsIGZpbmFsQ29uZmlnLmFuY2hvci55KTtcbiAgICAgICAgdGhpcy5za2V3ID0gbmV3IFBJWEkuUG9pbnQoZmluYWxDb25maWcuc2tldy54LCBmaW5hbENvbmZpZy5za2V3LnkpO1xuICAgICAgICB0aGlzLmJsZW5kTW9kZSA9IEJsZW5kTW9kZXNbZmluYWxDb25maWcuYmxlbmRNb2RlXTtcblxuICAgICAgICBGYWN0b3J5SGVscGVyLmFwcGx5QmFzZUNvbmZpZ1RvVmlldyhmaW5hbENvbmZpZywgdGhpcyk7XG4gICAgfTtcbiAgICB2YXIgcyA9IFNwcml0ZS5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoU3ByaXRlVmlldywgU3ByaXRlKTtcblxuICAgIHAudXBkYXRlVGV4dHVyZSA9IGZ1bmN0aW9uICh0ZXh0dXJlTmFtZSkge1xuICAgICAgICB0aGlzLnRleHR1cmUgPSAodGV4dHVyZU5hbWUpID8gYXBwLmdldENhY2hlKHRleHR1cmVOYW1lKSA6IG51bGw7XG4gICAgfTtcblxuICAgIHAucG9zdEluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Bvc3RJbml0SW1wbCgpO1xuICAgIH07XG5cbiAgICAvLyBGaXggaW5jb3JyZWN0IGhlaWdodCBidWcgaW4gU3ByaXRlLmdldExvY2FsQm91bmRzKCksIHdoaWNoIGhhcyBiZWVuIGZpeGVkIGluIFBpeGkgZGV2LCBidXRcbiAgICAvLyBub3QgYXMgb2YgdmVyc2lvbiA0LjUuMy5cbiAgICBwLmdldExvY2FsQm91bmRzID0gZnVuY3Rpb24gKHJlY3QpIHtcbiAgICAgICAgcmVjdCA9IHJlY3QgfHwgbmV3IFJlY3RhbmdsZSgpO1xuICAgICAgICBzLmdldExvY2FsQm91bmRzLmNhbGwodGhpcywgcmVjdCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9ib3VuZHMubWluWSA9ICh0aGlzLl90ZXh0dXJlLm9yaWcuaGVpZ2h0ICogLXRoaXMuX2FuY2hvci5feSk7XG4gICAgICAgICAgICB0aGlzLl9ib3VuZHMubWF4WSA9ICh0aGlzLl90ZXh0dXJlLm9yaWcuaGVpZ2h0ICogKDEgLSB0aGlzLl9hbmNob3IuX3kpKTtcbiAgICAgICAgICAgIHJlY3QuaGVpZ2h0ID0gKHRoaXMuX2JvdW5kcy5tYXhZIC0gdGhpcy5fYm91bmRzLm1pblkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgfTtcblxuICAgIHAuX3Bvc3RJbml0SW1wbCA9IGZ1bmN0aW9uICgpIHsgfTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5TcHJpdGVWaWV3ID0gU3ByaXRlVmlldztcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBTcHJpdGVWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5TcHJpdGVWaWV3XCIpO1xuXG4gICAgLy8gU3ByaXRlIHZpZXcgd2l0aCBvbiBhbmQgb2ZmIHN0YXRlIHRleHR1cmVzLlxuICAgIHZhciBCaW5hcnlTcHJpdGVWaWV3ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICB0ZXh0dXJlTmFtZTogbnVsbCxcbiAgICAgICAgICAgIGVuYWJsZWRUZXh0dXJlTmFtZTogbnVsbCwgIC8vIE9uIHN0YXRlIHRleHR1cmUgKHVzZXMgdGV4dHVyZU5hbWUgYXMgb2ZmKS5cbiAgICAgICAgICAgIGluaXRpYWxseUVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBTcHJpdGVWaWV3LmNhbGwodGhpcywgY29uZmlnKTtcblxuICAgICAgICB0aGlzLl9vZmZUZXh0dXJlID0gKGZpbmFsQ29uZmlnLnRleHR1cmVOYW1lKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmdldENhY2hlKGZpbmFsQ29uZmlnLnRleHR1cmVOYW1lKSA6IG51bGw7XG4gICAgICAgIHRoaXMuX29uVGV4dHVyZSA9IChmaW5hbENvbmZpZy5lbmFibGVkVGV4dHVyZU5hbWUpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAuZ2V0Q2FjaGUoZmluYWxDb25maWcuZW5hYmxlZFRleHR1cmVOYW1lKSA6IG51bGw7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9pc09uID0gZmluYWxDb25maWcuaW5pdGlhbGx5RW5hYmxlZDtcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gKHRoaXMuX2lzT24pID8gdGhpcy5fb25UZXh0dXJlIDogdGhpcy5fb2ZmVGV4dHVyZTtcbiAgICB9O1xuICAgIHZhciBzID0gU3ByaXRlVmlldy5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoQmluYXJ5U3ByaXRlVmlldywgU3ByaXRlVmlldyk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJlbmFibGVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0dXJuT24pIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9ICh0dXJuT24pID8gdGhpcy5fb25UZXh0dXJlIDogdGhpcy5fb2ZmVGV4dHVyZTtcbiAgICAgICAgICAgIHRoaXMuX2lzT24gPSB0dXJuT247XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzT247XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJvZmZUZXh0dXJlXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAob2ZmVGV4dHVyZSkge1xuICAgICAgICAgICAgdGhpcy5fb2ZmVGV4dHVyZSA9IChvZmZUZXh0dXJlKSA/IGFwcC5nZXRDYWNoZShvZmZUZXh0dXJlKSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJvblRleHR1cmVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChvblRleHR1cmUpIHtcbiAgICAgICAgICAgIHRoaXMuX29uVGV4dHVyZSA9IChvblRleHR1cmUpID8gYXBwLmdldENhY2hlKG9uVGV4dHVyZSkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuQmluYXJ5U3ByaXRlVmlldyA9IEJpbmFyeVNwcml0ZVZpZXc7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgU3ByaXRlVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuU3ByaXRlVmlld1wiKTtcbiAgICB2YXIgQ29sb3VyVXRpbHMgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkNvbG91clV0aWxzXCIpO1xuXG4gICAgdmFyIEJ1dHRvblZpZXcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IDAuMCxcbiAgICAgICAgICAgICAgICB5OiAwLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb3RhdGlvbjogMC4wLFxuICAgICAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgICAgICB4OiAxLjAsXG4gICAgICAgICAgICAgICAgeTogMS4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGl2b3Q6IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxwaGE6IDEuMCxcbiAgICAgICAgICAgIGlzSW50ZXJhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgICBtYXNrOiBudWxsLFxuICAgICAgICAgICAgekluZGV4OiAwLFxuICAgICAgICAgICAgY29sb3VyVGludDogXCIjZmZmZmZmXCIsICAvLyBBbGwgY29sb3VycyBpbiB0aGUgdmlldyBhcmUgbW9kdWxhdGVkIHdpdGggdGhpcy5cbiAgICAgICAgICAgIHRleHR1cmVOYW1lOiBudWxsLFxuICAgICAgICAgICAgdGV4dHVyZTogbnVsbCxcbiAgICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgICAgIHg6IDAuMCxcbiAgICAgICAgICAgICAgICB5OiAwLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibGVuZE1vZGU6IFwiTk9STUFMXCIsXG4gICAgICAgICAgICBsYWJlbFRleHRWaWV3OiBudWxsLFxuICAgICAgICAgICAgaXNFbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgaW1hZ2VGcmFtZU5hbWVzOiB7XG4gICAgICAgICAgICAgICAgdXA6IFwiXCIsXG4gICAgICAgICAgICAgICAgb3ZlcjogXCJcIixcbiAgICAgICAgICAgICAgICBkb3duOiBcIlwiLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBcIlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhbnNpdGlvbkNvbG9yVGludHM6IG51bGwsXG4gICAgICAgICAgICBjbGlja1NvdW5kTmFtZTogbnVsbFxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIHRoaXMuZmluYWxDb25maWcgPSBmaW5hbENvbmZpZ1xuXG4gICAgICAgIC8vIEdldCB0aGUgaW1hZ2UgZnJhbWVzIHBlciBzdGF0ZSBmcm9tIHRoZSBidXR0b24gc3ByaXRlIHNoZWV0LlxuICAgICAgICBpZiAodGhpcy5faGFzU3ByaXRlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VGcmFtZXMgPSB7XG4gICAgICAgICAgICAgICAgdXA6IGFwcC5nZXRDYWNoZShmaW5hbENvbmZpZy5pbWFnZUZyYW1lTmFtZXMudXApLFxuICAgICAgICAgICAgICAgIG92ZXI6IGFwcC5nZXRDYWNoZShmaW5hbENvbmZpZy5pbWFnZUZyYW1lTmFtZXMub3ZlciksXG4gICAgICAgICAgICAgICAgZG93bjogYXBwLmdldENhY2hlKGZpbmFsQ29uZmlnLmltYWdlRnJhbWVOYW1lcy5kb3duKSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogYXBwLmdldENhY2hlKGZpbmFsQ29uZmlnLmltYWdlRnJhbWVOYW1lcy5kaXNhYmxlZClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyYW5zaXRpb25Db2xvclRpbnRzID0gZmluYWxDb25maWcudHJhbnNpdGlvbkNvbG9yVGludHM7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBTcHJpdGVWaWV3LmNhbGwodGhpcywgZmluYWxDb25maWcpO1xuICAgICAgICB0aGlzLmJ1dHRvbk1vZGUgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IGZpbmFsQ29uZmlnLmlzRW5hYmxlZDtcblxuICAgICAgICAvLyBPdmVycmlkZSBwaXZvdCB1c2luZyBhbmNob3IgaWYgc3BlY2lmaWVkIChhbmNob3IgYWN0cyBzaW1pbGFyIHRvIHNwcml0ZXMpLlxuICAgICAgICBpZiAoZmluYWxDb25maWcuYW5jaG9yICYmIHRoaXMuX2hhc1Nwcml0ZSgpKSB7XG4gICAgICAgICAgICB2YXIgZnJhbWVUZXh0dXJlID0gdGhpcy5pbWFnZUZyYW1lcy51cDtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IGZyYW1lVGV4dHVyZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2xpY2tTb3VuZE5hbWUgPSBmaW5hbENvbmZpZy5jbGlja1NvdW5kTmFtZTtcbiAgICAgICAgaWYgKHRoaXMuY2xpY2tTb3VuZE5hbWUgJiYgKHRoaXMuY2xpY2tTb3VuZE5hbWUubGVuZ3RoID09PSB1bmRlZmluZWQgfHwgdGhpcy5jbGlja1NvdW5kTmFtZS5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrU291bmROYW1lID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub24oXCJwb2ludGVyZG93blwiLCB0aGlzLl9vbkRvd24uYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMub24oXCJwb2ludGVydXBcIiwgdGhpcy5fb25VcC5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLm9uKFwicG9pbnRlcm92ZXJcIiwgdGhpcy5fb25Ib3Zlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5vbihcInBvaW50ZXJsZWF2ZVwiLCB0aGlzLl9vbkxlYXZlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMub24oXCJwb2ludGVyb3V0XCIsIHRoaXMuX29uVXBPdXRzaWRlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLm9uKFwicG9pbnRlcmNhbmNlbFwiLCB0aGlzLl9vblVwT3V0c2lkZS5iaW5kKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgdmFyIHMgPSBTcHJpdGVWaWV3LnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChCdXR0b25WaWV3LCBTcHJpdGVWaWV3KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImlzRW5hYmxlZFwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKGlzRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5faXNFbmFibGVkID0gaXNFbmFibGVkO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hhc1Nwcml0ZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0dXJlID0gKGlzRW5hYmxlZCA/IHRoaXMuaW1hZ2VGcmFtZXMudXAgOiB0aGlzLmltYWdlRnJhbWVzLmRpc2FibGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25Db2xvcigpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aW50ID0gKGlzRW5hYmxlZCA/IHRoaXMudHJhbnNpdGlvbkNvbG9yVGludHMudXAgOiB0aGlzLnRyYW5zaXRpb25Db2xvclRpbnRzLmRpc2FibGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9pc0VuYWJsZWQ7IH1cbiAgICB9KTtcblxuICAgIHAuX2hhc1Nwcml0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5maW5hbENvbmZpZy5pbWFnZUZyYW1lTmFtZXMudXA7XG4gICAgfTtcblxuICAgIHAuX2lzVHJhbnNpdGlvbkNvbG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnRyYW5zaXRpb25Db2xvclRpbnRzO1xuICAgIH07XG5cbiAgICAvLyBPdmVycmlkZSBzbyB0aGF0IHNvdW5kIGlzIHBsYXllZCBiZWZvcmUgZGlzdHJpYnV0aW5nIGNsaWNrIGV2ZW50LlxuICAgIHAuX29uVXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9oYXNTcHJpdGUoKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlID0gdGhpcy5pbWFnZUZyYW1lcy51cDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uQ29sb3IoKSl7XG4gICAgICAgICAgICB0aGlzLnRpbnQgPSB0aGlzLnRyYW5zaXRpb25Db2xvclRpbnRzLnVwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsaWNrU291bmROYW1lKSB7XG4gICAgICAgICAgICBhcHAucGxheVNvdW5kKCkodGhpcy5jbGlja1NvdW5kTmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fb25Eb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faGFzU3ByaXRlKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IHRoaXMuaW1hZ2VGcmFtZXMuZG93bjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uQ29sb3IoKSkge1xuICAgICAgICAgICAgdGhpcy50aW50ID0gdGhpcy50cmFuc2l0aW9uQ29sb3JUaW50cy5kb3duO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX29uVXBPdXRzaWRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faGFzU3ByaXRlKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IHRoaXMuaW1hZ2VGcmFtZXMudXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbkNvbG9yKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGludCA9IHRoaXMudHJhbnNpdGlvbkNvbG9yVGludHMudXA7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fb25Ib3ZlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2hhc1Nwcml0ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSB0aGlzLmltYWdlRnJhbWVzLm92ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbkNvbG9yKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGludCA9IHRoaXMudHJhbnNpdGlvbkNvbG9yVGludHMub3ZlcjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwLl9vbkxlYXZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faGFzU3ByaXRlKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IHRoaXMuaW1hZ2VGcmFtZXMudXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbkNvbG9yKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGludCA9IHRoaXMudHJhbnNpdGlvbkNvbG9yVGludHMudXA7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9mZihcInBvaW50ZXJkb3duXCIsIHRoaXMuX29uRG93bik7XG4gICAgICAgIHRoaXMub2ZmKFwicG9pbnRlcnVwXCIsIHRoaXMuX29uVXApO1xuXG4gICAgICAgIHRoaXMub2ZmKFwicG9pbnRlcm92ZXJcIiwgdGhpcy5fb25Ib3Zlcik7XG4gICAgICAgIHRoaXMub2ZmKFwicG9pbnRlcmxlYXZlXCIsIHRoaXMuX29uTGVhdmUpO1xuXG4gICAgICAgIHRoaXMub2ZmKFwicG9pbnRlcm91dFwiLCB0aGlzLl9vblVwT3V0c2lkZSk7XG4gICAgICAgIHRoaXMub2ZmKFwicG9pbnRlcmNhbmNlbFwiLCB0aGlzLl9vblVwT3V0c2lkZSk7XG4gICAgICAgIHMuZGVzdHJveS5jYWxsKHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuQnV0dG9uVmlldyA9IEJ1dHRvblZpZXc7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0dmFyIEdyYXBoaWNzVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuR3JhcGhpY3NWaWV3XCIpO1xuXHR2YXIgQ29sb3VyVXRpbHMgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkNvbG91clV0aWxzXCIpO1xuXG5cdHZhciBDaXJjbGVWaWV3ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuXHRcdC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIGZpbGxDb2xvdXI6IFwiI2ZmZmZmZlwiLFxuICAgICAgICAgICAgZmlsbEFscGhhOiAxLjAsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDEsXG4gICAgICAgICAgICBsaW5lQ29sb3VyOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgIGxpbmVBbHBoYTogMS4wLFxuICAgICAgICAgICAgaXNXaXJlZnJhbWU6IGZhbHNlLFxuICAgICAgICAgICAgcmFkaXVzOiAxMC4wXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBHcmFwaGljc1ZpZXcuY2FsbCh0aGlzLCBmaW5hbENvbmZpZyk7XG5cblx0XHR0aGlzLmZpbGxDb2xvdXIgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5maWxsQ29sb3VyKTtcblx0XHR0aGlzLmZpbGxBbHBoYSA9IGZpbmFsQ29uZmlnLmZpbGxBbHBoYTtcblx0XHR0aGlzLmxpbmVXaWR0aCA9IGZpbmFsQ29uZmlnLmxpbmVXaWR0aDtcblx0XHR0aGlzLmxpbmVDb2xvdXIgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5saW5lQ29sb3VyKTtcblx0XHR0aGlzLmxpbmVBbHBoYSA9IGZpbmFsQ29uZmlnLmxpbmVBbHBoYTtcblx0XHR0aGlzLmlzV2lyZWZyYW1lID0gZmluYWxDb25maWcuaXNXaXJlZnJhbWU7XG5cdFx0dGhpcy5yYWRpdXMgPSBmaW5hbENvbmZpZy5yYWRpdXM7XG5cblx0XHQvLyBEcmF3IHRoZSBjaXJjbGUgdG8gdGhlIGNvbnRhaW5lci5cbiAgICAgICAgdGhpcy5fZmlsbENpcmNsZSgpO1xuXHR9O1xuXHR2YXIgcyA9IEdyYXBoaWNzVmlldy5wcm90b3R5cGU7XG5cdHZhciBwID0gZXh0ZW5kKENpcmNsZVZpZXcsIEdyYXBoaWNzVmlldyk7XG5cblx0cC5fZmlsbENpcmNsZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgZmlsbENvbG91ciA9ICh0aGlzLmlzV2lyZWZyYW1lKSA/IDAgOiB0aGlzLmZpbGxDb2xvdXI7XG5cdFx0dmFyIGZpbGxBbHBoYSA9ICh0aGlzLmlzV2lyZWZyYW1lKSA/IDAgOiB0aGlzLmZpbGxBbHBoYTtcblxuXHRcdHRoaXMuY2xlYXIoKVxuXHRcdFx0LmJlZ2luRmlsbChmaWxsQ29sb3VyLCBmaWxsQWxwaGEpXG5cdFx0XHQubGluZVN0eWxlKHRoaXMubGluZVdpZHRoLCB0aGlzLmxpbmVDb2xvdXIsIHRoaXMubGluZUFscGhhKVxuXHRcdFx0LmRyYXdDaXJjbGUoMCwgMCwgdGhpcy5yYWRpdXMpXG5cdFx0XHQuZW5kRmlsbCgpO1xuXHR9O1xuXG5cdHAuc2V0Q29sb3IgPSBmdW5jdGlvbiAoY29sb3IpIHtcblx0XHR0aGlzLmZpbGxDb2xvdXIgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihjb2xvcik7XG5cdFx0dGhpcy5saW5lQ29sb3VyID0gQ29sb3VyVXRpbHMuY29sb3VyVG9OdW1iZXIoY29sb3IpO1xuXHRcdHRoaXMuX2ZpbGxDaXJjbGUoKTtcblx0fTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5DaXJjbGVWaWV3ID0gQ2lyY2xlVmlldztcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBDb250YWluZXJWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5Db250YWluZXJWaWV3XCIpO1xuXG4gICAgLy8gQ29udGFpbmVyIHZpZXcgd2hpY2ggcGFja3MgdHdvIHNwcml0ZSB2aWV3cyB0b2dldGhlci5cbiAgICB2YXIgRHVhbFNwcml0ZVZpZXcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIGluaXRpYWxseUVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBDb250YWluZXJWaWV3LmNhbGwodGhpcywgY29uZmlnKTtcblxuICAgICAgICB0aGlzLmluaXRpYWxseUVuYWJsZWQgPSBmaW5hbENvbmZpZy5pbml0aWFsbHlFbmFibGVkO1xuICAgIH07XG4gICAgdmFyIHMgPSBDb250YWluZXJWaWV3LnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChEdWFsU3ByaXRlVmlldywgQ29udGFpbmVyVmlldyk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJlbmFibGVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0dXJuT24pIHtcbiAgICAgICAgICAgIHRoaXMuZnJvbnQudmlzaWJsZSA9IHR1cm5PbjtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9udC52aXNpYmxlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBwLl9wb3N0SW5pdEltcGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYmFjayA9IHRoaXMuZ2V0Q2hpbGRCeU5hbWUoXCJiYWNrXCIpO1xuICAgICAgICB0aGlzLmZyb250ID0gdGhpcy5nZXRDaGlsZEJ5TmFtZShcImZyb250XCIpO1xuXG4gICAgICAgIGlmICghdGhpcy5iYWNrKSB7XG4gICAgICAgICAgICB0aHJvdyBcIkR1YWxTcHJpdGVWaWV3OiBjb3VsZCBub3QgZmluZCAnYmFjaycgY2hpbGQuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmZyb250KSB7XG4gICAgICAgICAgICB0aHJvdyBcIkR1YWxTcHJpdGVWaWV3OiBjb3VsZCBub3QgZmluZCAnZnJvbnQnIGNoaWxkLlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iYWNrLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmZyb250LnZpc2libGUgPSB0aGlzLmluaXRpYWxseUVuYWJsZWQ7XG4gICAgfTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5EdWFsU3ByaXRlVmlldyA9IER1YWxTcHJpdGVWaWV3O1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIENvbnRhaW5lclZpZXcgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkNvbnRhaW5lclZpZXdcIik7XG4gICAgdmFyIFJlY3RhbmdsZSA9IGluY2x1ZGUoXCJQSVhJLlJlY3RhbmdsZVwiKTtcbiAgICB2YXIgU3ByaXRlID0gaW5jbHVkZShcIlBJWEkuU3ByaXRlXCIpO1xuXG4gICAgdmFyIEtleWJvYXJkS2V5VmlldyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBjb25maWcuXG4gICAgICAgIHZhciBmaW5hbENvbmZpZyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAga2luZDogXCJcIiwgIC8vIFR5cGUgb2Yga2V5Ym9hcmQga2V5LlxuICAgICAgICAgICAgdmFsdWU6IFwiXCIgIC8vIFJlbGV2YW50IGZvciBhbHBoYSBrZXlzLlxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgQ29udGFpbmVyVmlldy5jYWxsKHRoaXMsIGZpbmFsQ29uZmlnKTtcblxuICAgICAgICB0aGlzLl9raW5kID0gZmluYWxDb25maWcua2luZDtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBmaW5hbENvbmZpZy52YWx1ZTtcblxuICAgICAgICB0aGlzLl9idWlsZFZpZXcoZmluYWxDb25maWcpO1xuICAgIH07XG4gICAgdmFyIHMgPSBDb250YWluZXJWaWV3LnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChLZXlib2FyZEtleVZpZXcsIENvbnRhaW5lclZpZXcpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwia2luZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fa2luZDsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl92YWx1ZTsgfVxuICAgIH0pO1xuXG4gICAgcC5zZXRIaWdobGlnaHRlZCA9IGZ1bmN0aW9uIChpc0hpZ2hsaWdodGVkKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLnNldEhpZ2hsaWdodGVkKGlzSGlnaGxpZ2h0ZWQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcC5fYnVpbGRWaWV3ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICBzd2l0Y2ggKGNvbmZpZy5raW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwiYWxwaGFcIjogICAgICAgdGhpcy5fYnVpbGRUZXh0QnV0dG9uKGNvbmZpZywgNzAuMCwgODAuMCwgNDApOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJiYWNrc3BhY2VcIjogICB0aGlzLl9idWlsZEJhY2tzcGFjZUJ1dHRvbihjb25maWcsIDExMC4wLCA4MC4wKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZW50ZXJcIjogICAgICAgdGhpcy5fYnVpbGRUZXh0QnV0dG9uKGNvbmZpZywgMTEwLjAsIDgwLjAsIDM1KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZG9uZVwiOiAgICAgICAgdGhpcy5fYnVpbGRUZXh0QnV0dG9uKGNvbmZpZywgMTEwLjAsIDgwLjAsIDM1KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3BhY2ViYXJcIjogICAgdGhpcy5fYnVpbGRUZXh0QnV0dG9uKGNvbmZpZywgMzYwLjAsIDgwLjAsIDM1KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZ29Ub1B1bmNcIjogICAgdGhpcy5fYnVpbGRUZXh0QnV0dG9uKGNvbmZpZywgMTEwLjAsIDgwLjAsIDM1KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZ29Ub0FscGhhXCI6ICAgdGhpcy5fYnVpbGRUZXh0QnV0dG9uKGNvbmZpZywgMTEwLjAsIDgwLjAsIDM1KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic2hpZnRPblwiOiAgICAgdGhpcy5fYnVpbGRTaGlmdEJ1dHRvbihjb25maWcsIDExMC4wLCA4MC4wLCB0cnVlKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic2hpZnRPZmZcIjogICAgdGhpcy5fYnVpbGRTaGlmdEJ1dHRvbihjb25maWcsIDExMC4wLCA4MC4wLCBmYWxzZSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInB1bmMxXCI6ICAgICAgIHRoaXMuX2J1aWxkVGV4dEJ1dHRvbihjb25maWcsIDExMC4wLCA4MC4wLCAzNSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInB1bmMyXCI6ICAgICAgIHRoaXMuX2J1aWxkVGV4dEJ1dHRvbihjb25maWcsIDExMC4wLCA4MC4wLCAzNSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX2J1aWxkVGV4dEJ1dHRvbiA9IGZ1bmN0aW9uIChjb25maWcsIHdpZHRoLCBoZWlnaHQsIGZvbnRTaXplKSB7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fY3JlYXRlU2hhZG93Vmlldyh3aWR0aCwgMjUsIDMwLjApKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9jcmVhdGVCYWNrVmlldyh3aWR0aCwgaGVpZ2h0KSk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fY3JlYXRlRnJvbnRUZXh0Vmlldyhjb25maWcudmFsdWUsIGZvbnRTaXplKSk7XG5cbiAgICAgICAgdGhpcy5oaXRBcmVhID0gdGhpcy5fY3JlYXRlSGl0QXJlYSh3aWR0aCwgaGVpZ2h0LCAxMCk7XG4gICAgfTtcblxuICAgIHAuX2J1aWxkU2hpZnRCdXR0b24gPSBmdW5jdGlvbiAoY29uZmlnLCB3aWR0aCwgaGVpZ2h0LCBpc09uKSB7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fY3JlYXRlU2hhZG93Vmlldyh3aWR0aCwgMjUsIDMwLjApKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9jcmVhdGVCYWNrVmlldyh3aWR0aCwgaGVpZ2h0KSk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fY3JlYXRlU2hpZnRWaWV3KGlzT24pKTtcblxuICAgICAgICB0aGlzLmhpdEFyZWEgPSB0aGlzLl9jcmVhdGVIaXRBcmVhKHdpZHRoLCBoZWlnaHQsIDEwKTtcbiAgICB9O1xuXG4gICAgcC5fYnVpbGRCYWNrc3BhY2VCdXR0b24gPSBmdW5jdGlvbiAoY29uZmlnLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fY3JlYXRlU2hhZG93Vmlldyh3aWR0aCwgMjUsIDMwLjApKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9jcmVhdGVCYWNrVmlldyh3aWR0aCwgaGVpZ2h0KSk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fY3JlYXRlQmFja3NwYWNlVmlldygpKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9jcmVhdGVGcm9udFRleHRWaWV3KFwiWFwiLCAyMCwgeyB4OiAxMC4wLCB5OiAwLjAgfSkpO1xuXG4gICAgICAgIHRoaXMuaGl0QXJlYSA9IHRoaXMuX2NyZWF0ZUhpdEFyZWEod2lkdGgsIGhlaWdodCwgMTApO1xuICAgIH07XG5cbiAgICBwLl9jcmVhdGVTaGFkb3dWaWV3ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHlQb3MpIHtcbiAgICAgICAgdmFyIHNoYWRvd0NvbG91ciA9IFwiI2FhYWFhYVwiO1xuXG4gICAgICAgIHZhciBjcmVhdGVSZWN0Q29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlY3RhbmdsZVwiLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IDAuMCwgeTogeVBvcyB9LFxuICAgICAgICAgICAgICAgIGZpbGxDb2xvdXI6IHNoYWRvd0NvbG91cixcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNvcm5lclJhZGl1czogMTIuNVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBDcmVhdGUgcmVjdGFuZ2xlIGZvciBzaGFkb3cuXG4gICAgICAgIHZhciBzaGFkb3dWaWV3ID0gYXBwLmNyZWF0ZVZpZXcoY3JlYXRlUmVjdENvbmZpZygpKTtcblxuICAgICAgICAvLyBJbXBsZW1lbnQgc2V0SGlnaGxpZ2h0ZWQoKSBtZXRob2QuXG4gICAgICAgIHNoYWRvd1ZpZXcuc2V0SGlnaGxpZ2h0ZWQgPSBmdW5jdGlvbiAoaXNIaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgLy8gRG8gbm90aGluZy5cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2hhZG93VmlldztcbiAgICB9O1xuXG4gICAgcC5fY3JlYXRlQmFja1ZpZXcgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB2YXIgYmFja1ZpZXdUaW50ID0geyBoaWdobGlnaHRlZDogXCIjOTk5OTk5XCIsIHVuaGlnaGxpZ2h0ZWQ6IFwiI2ZmZmZmZlwiIH07XG5cbiAgICAgICAgdmFyIGNyZWF0ZVJlY3RDb25maWcgPSBmdW5jdGlvbiAoZmlsbENvbG91ciwgdmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlY3RhbmdsZVwiLFxuICAgICAgICAgICAgICAgIGlzVmlzaWJsZTogdmlzaWJsZSxcbiAgICAgICAgICAgICAgICBmaWxsQ29sb3VyOiBmaWxsQ29sb3VyLFxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgY29ybmVyUmFkaXVzOiAxMi41XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENyZWF0ZSByZWN0YW5nbGVzIGZvciBoaWdobGlnaHRlZCBhbmQgdW5oaWdobGlnaHRlZCBzdGF0ZXMgcmVzcGVjdGl2ZWx5LlxuICAgICAgICB2YXIgaGlnaGxpZ2h0ZWRWaWV3ID0gYXBwLmNyZWF0ZVZpZXcoY3JlYXRlUmVjdENvbmZpZyhiYWNrVmlld1RpbnQuaGlnaGxpZ2h0ZWQsIGZhbHNlKSk7XG4gICAgICAgIHZhciB1bmhpZ2hsaWdodGVkVmlldyA9IGFwcC5jcmVhdGVWaWV3KGNyZWF0ZVJlY3RDb25maWcoYmFja1ZpZXdUaW50LnVuaGlnaGxpZ2h0ZWQsIHRydWUpKTtcblxuICAgICAgICB2YXIgYmFja1ZpZXcgPSBhcHAuY3JlYXRlVmlldyh7IHR5cGU6IFwiY29udGFpbmVyXCIgfSk7XG4gICAgICAgIGJhY2tWaWV3LmFkZENoaWxkKGhpZ2hsaWdodGVkVmlldyk7XG4gICAgICAgIGJhY2tWaWV3LmFkZENoaWxkKHVuaGlnaGxpZ2h0ZWRWaWV3KTtcblxuICAgICAgICAvLyBJbXBsZW1lbnQgc2V0SGlnaGxpZ2h0ZWQoKSBtZXRob2QuXG4gICAgICAgIGJhY2tWaWV3LnNldEhpZ2hsaWdodGVkID0gZnVuY3Rpb24gKGlzSGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkVmlldy52aXNpYmxlID0gaXNIaWdobGlnaHRlZDtcbiAgICAgICAgICAgIHVuaGlnaGxpZ2h0ZWRWaWV3LnZpc2libGUgPSAhaXNIaWdobGlnaHRlZDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gYmFja1ZpZXc7XG4gICAgfTtcblxuICAgIHAuX2NyZWF0ZUZyb250VGV4dFZpZXcgPSBmdW5jdGlvbiAodmFsdWUsIGZvbnRTaXplLCBwb3NpdGlvbikge1xuICAgICAgICB2YXIgZnJvbnRWaWV3VGludCA9IHsgaGlnaGxpZ2h0ZWQ6IFwiI2ZmZmZmZlwiLCB1bmhpZ2hsaWdodGVkOiBcIiM0NDQ0NDRcIiB9O1xuICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIHx8IHsgeDogMC4wLCB5OiAwLjAgfTtcblxuICAgICAgICB2YXIgY3JlYXRlVGV4dENvbmZpZyA9IGZ1bmN0aW9uIChmaWxsQ29sb3VyKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIGluaXRpYWxUZXh0OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxDb2xvdXIsXG4gICAgICAgICAgICAgICAgICAgIGFsaWduOiBcImNlbnRlclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBDcmVhdGUgdGV4dCBvYmplY3RzIGZvciBoaWdobGlnaHRlZCBhbmQgdW5oaWdobGlnaHRlZCBzdGF0ZXMgcmVzcGVjdGl2ZWx5LlxuICAgICAgICB2YXIgaGlnaGxpZ2h0ZWRWaWV3ID0gYXBwLmNyZWF0ZVZpZXcoY3JlYXRlVGV4dENvbmZpZyhmcm9udFZpZXdUaW50LmhpZ2hsaWdodGVkKSk7XG4gICAgICAgIHZhciB1bmhpZ2hsaWdodGVkVmlldyA9IGFwcC5jcmVhdGVWaWV3KGNyZWF0ZVRleHRDb25maWcoZnJvbnRWaWV3VGludC51bmhpZ2hsaWdodGVkKSk7XG5cbiAgICAgICAgLy8gQ29udmVydCBzdGF0aWMgdGV4dCB0byBzcHJpdGVzIHRvIGluY3JlYXNlIHJlbmRlcmluZyBwZXJmb3JtYW5jZS5cbiAgICAgICAgdmFyIGhpZ2hsaWdodGVkU3ByaXRlVmlldyA9IHRoaXMuX2NvbnZlcnRUZXh0VG9TcHJpdGUoaGlnaGxpZ2h0ZWRWaWV3LCBmYWxzZSk7XG4gICAgICAgIHZhciB1bmhpZ2hsaWdodGVkU3ByaXRlVmlldyA9IHRoaXMuX2NvbnZlcnRUZXh0VG9TcHJpdGUodW5oaWdobGlnaHRlZFZpZXcsIHRydWUpO1xuXG4gICAgICAgIHZhciBmcm9udFZpZXcgPSBhcHAuY3JlYXRlVmlldyh7IHR5cGU6IFwiY29udGFpbmVyXCIgfSk7XG4gICAgICAgIGZyb250Vmlldy5wb3NpdGlvbi5jb3B5KHBvc2l0aW9uKTtcbiAgICAgICAgZnJvbnRWaWV3LmFkZENoaWxkKGhpZ2hsaWdodGVkU3ByaXRlVmlldyk7XG4gICAgICAgIGZyb250Vmlldy5hZGRDaGlsZCh1bmhpZ2hsaWdodGVkU3ByaXRlVmlldyk7XG5cbiAgICAgICAgaGlnaGxpZ2h0ZWRWaWV3LmRlc3Ryb3kodHJ1ZSk7XG4gICAgICAgIHVuaGlnaGxpZ2h0ZWRWaWV3LmRlc3Ryb3kodHJ1ZSk7XG5cbiAgICAgICAgLy8gSW1wbGVtZW50IHNldEhpZ2hsaWdodGVkKCkgbWV0aG9kLlxuICAgICAgICBmcm9udFZpZXcuc2V0SGlnaGxpZ2h0ZWQgPSBmdW5jdGlvbiAoaXNIaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgaGlnaGxpZ2h0ZWRTcHJpdGVWaWV3LnZpc2libGUgPSBpc0hpZ2hsaWdodGVkO1xuICAgICAgICAgICAgdW5oaWdobGlnaHRlZFNwcml0ZVZpZXcudmlzaWJsZSA9ICFpc0hpZ2hsaWdodGVkO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmcm9udFZpZXc7XG4gICAgfTtcblxuICAgIHAuX2NyZWF0ZVNoaWZ0VmlldyA9IGZ1bmN0aW9uIChpc09uKSB7XG4gICAgICAgIHZhciBzaGlmdFZpZXdUaW50ID0gXCIjNDQ0NDQ0XCI7XG5cbiAgICAgICAgdmFyIGNyZWF0ZVNoaWZ0SWNvbkNvbmZpZyA9IGZ1bmN0aW9uIChjb2xvdXIsIGlzV2lyZWZyYW1lLCB2aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicHJpbWl0aXZlXCIsXG4gICAgICAgICAgICAgICAgaXNWaXNpYmxlOiB2aXNpYmxlLFxuICAgICAgICAgICAgICAgIGZpbGxDb2xvdXI6IGNvbG91cixcbiAgICAgICAgICAgICAgICBsaW5lQ29sb3VyOiBjb2xvdXIsXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiA0LFxuICAgICAgICAgICAgICAgIGlzV2lyZWZyYW1lOiBpc1dpcmVmcmFtZSxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhMaXN0OiBbXG4gICAgICAgICAgICAgICAgICAgIHsgeDogMCwgeTogLTIwIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgeDogMjAsIHk6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB4OiAxMCwgeTogMCB9LFxuICAgICAgICAgICAgICAgICAgICB7IHg6IDEwLCB5OiAyMCB9LFxuICAgICAgICAgICAgICAgICAgICB7IHg6IC0xMCwgeTogMjAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB4OiAtMTAsIHk6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB4OiAtMjAsIHk6IDAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQ3JlYXRlIHNoaWZ0IGljb25zIGZvciBoaWdobGlnaHRlZCBhbmQgdW5oaWdobGlnaHRlZCBzdGF0ZXMgcmVzcGVjdGl2ZWx5LlxuICAgICAgICB2YXIgZmlsbGVkSWNvbkNvbmZpZyA9IGNyZWF0ZVNoaWZ0SWNvbkNvbmZpZyhzaGlmdFZpZXdUaW50LCBmYWxzZSwgaXNPbik7XG4gICAgICAgIHZhciB3aXJlZnJhbWVJY29uQ29uZmlnID0gY3JlYXRlU2hpZnRJY29uQ29uZmlnKHNoaWZ0Vmlld1RpbnQsIHRydWUsIHRydWUpO1xuICAgICAgICB2YXIgaGlnaGxpZ2h0ZWRDb25maWcgPSBmaWxsZWRJY29uQ29uZmlnO1xuICAgICAgICB2YXIgdW5oaWdobGlnaHRDb25maWcgPSAoaXNPbikgPyBmaWxsZWRJY29uQ29uZmlnIDogd2lyZWZyYW1lSWNvbkNvbmZpZztcblxuICAgICAgICB2YXIgaGlnaGxpZ2h0ZWRWaWV3ID0gYXBwLmNyZWF0ZVZpZXcoaGlnaGxpZ2h0ZWRDb25maWcpO1xuICAgICAgICB2YXIgdW5oaWdobGlnaHRlZFZpZXcgPSBhcHAuY3JlYXRlVmlldyh1bmhpZ2hsaWdodENvbmZpZyk7XG5cbiAgICAgICAgdmFyIHNoaWZ0VmlldyA9IGFwcC5jcmVhdGVWaWV3KHsgdHlwZTogXCJjb250YWluZXJcIiB9KTtcbiAgICAgICAgc2hpZnRWaWV3LmFkZENoaWxkKGhpZ2hsaWdodGVkVmlldyk7XG4gICAgICAgIHNoaWZ0Vmlldy5hZGRDaGlsZCh1bmhpZ2hsaWdodGVkVmlldyk7XG5cbiAgICAgICAgLy8gSW1wbGVtZW50IHNldEhpZ2hsaWdodGVkKCkgbWV0aG9kLlxuICAgICAgICBzaGlmdFZpZXcuc2V0SGlnaGxpZ2h0ZWQgPSBmdW5jdGlvbiAoaXNIaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgaGlnaGxpZ2h0ZWRWaWV3LnZpc2libGUgPSBpc0hpZ2hsaWdodGVkO1xuICAgICAgICAgICAgdW5oaWdobGlnaHRlZFZpZXcudmlzaWJsZSA9ICFpc0hpZ2hsaWdodGVkO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzaGlmdFZpZXc7XG4gICAgfTtcblxuICAgIHAuX2NyZWF0ZUJhY2tzcGFjZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBiYWNrc3BhY2VWaWV3VGludCA9IFwiIzQ0NDQ0NFwiO1xuXG4gICAgICAgIHZhciBjcmVhdGVCYWNrc3BhY2VJY29uQ29uZmlnID0gZnVuY3Rpb24gKGNvbG91ciwgaXNXaXJlZnJhbWUsIHZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJwcmltaXRpdmVcIixcbiAgICAgICAgICAgICAgICBpc1Zpc2libGU6IHZpc2libGUsXG4gICAgICAgICAgICAgICAgZmlsbENvbG91cjogY29sb3VyLFxuICAgICAgICAgICAgICAgIGxpbmVDb2xvdXI6IGNvbG91cixcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDQsXG4gICAgICAgICAgICAgICAgaXNXaXJlZnJhbWU6IGlzV2lyZWZyYW1lLFxuICAgICAgICAgICAgICAgIHZlcnRleExpc3Q6IFtcbiAgICAgICAgICAgICAgICAgICAgeyB4OiAtMzAsIHk6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB4OiAtMTAsIHk6IC0xNSB9LFxuICAgICAgICAgICAgICAgICAgICB7IHg6IDMwLCB5OiAtMTUgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB4OiAzMCwgeTogMTUgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB4OiAtMTAsIHk6IDE1IH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBoaWdobGlnaHRlZFZpZXcgPSBhcHAuY3JlYXRlVmlldyhjcmVhdGVCYWNrc3BhY2VJY29uQ29uZmlnKGJhY2tzcGFjZVZpZXdUaW50LCBmYWxzZSwgZmFsc2UpKTtcbiAgICAgICAgdmFyIHVuaGlnaGxpZ2h0ZWRWaWV3ID0gYXBwLmNyZWF0ZVZpZXcoY3JlYXRlQmFja3NwYWNlSWNvbkNvbmZpZyhiYWNrc3BhY2VWaWV3VGludCwgdHJ1ZSwgdHJ1ZSkpO1xuXG4gICAgICAgIHZhciBiYWNrc3BhY2VWaWV3ID0gYXBwLmNyZWF0ZVZpZXcoeyB0eXBlOiBcImNvbnRhaW5lclwiIH0pO1xuICAgICAgICBiYWNrc3BhY2VWaWV3LmFkZENoaWxkKGhpZ2hsaWdodGVkVmlldyk7XG4gICAgICAgIGJhY2tzcGFjZVZpZXcuYWRkQ2hpbGQodW5oaWdobGlnaHRlZFZpZXcpO1xuXG4gICAgICAgIC8vIEltcGxlbWVudCBzZXRIaWdobGlnaHRlZCgpIG1ldGhvZC5cbiAgICAgICAgYmFja3NwYWNlVmlldy5zZXRIaWdobGlnaHRlZCA9IGZ1bmN0aW9uIChpc0hpZ2hsaWdodGVkKSB7XG4gICAgICAgICAgICBoaWdobGlnaHRlZFZpZXcudmlzaWJsZSA9IGlzSGlnaGxpZ2h0ZWQ7XG4gICAgICAgICAgICB1bmhpZ2hsaWdodGVkVmlldy52aXNpYmxlID0gIWlzSGlnaGxpZ2h0ZWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGJhY2tzcGFjZVZpZXc7XG4gICAgfTtcblxuICAgIHAuX2NyZWF0ZUhpdEFyZWEgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcGFkZGluZykge1xuICAgICAgICB2YXIgeCA9ICgoLXdpZHRoICogMC41KSAtIHBhZGRpbmcpO1xuICAgICAgICB2YXIgeSA9ICgoLWhlaWdodCAqIDAuNSkgLSBwYWRkaW5nKTtcbiAgICAgICAgdmFyIHJlY3RXaWR0aCA9ICh3aWR0aCArICgyLjAgKiBwYWRkaW5nKSk7XG4gICAgICAgIHZhciByZWN0SGVpZ2h0ID0gKGhlaWdodCArICgyLjAgKiBwYWRkaW5nKSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh4LCB5LCByZWN0V2lkdGgsIHJlY3RIZWlnaHQpO1xuICAgIH07XG5cbiAgICBwLl9jb252ZXJ0VGV4dFRvU3ByaXRlID0gZnVuY3Rpb24gKHRleHRWaWV3LCB2aXNpYmxlKSB7XG4gICAgICAgIHZhciB0ZXh0dXJlID0gYXBwLmdldFJlbmRlcmVyKCkuZ2VuZXJhdGVUZXh0dXJlKHRleHRWaWV3KTtcbiAgICAgICAgdmFyIHRleHRTcHJpdGUgPSBuZXcgU3ByaXRlKHRleHR1cmUpO1xuICAgICAgICB0ZXh0U3ByaXRlLmFuY2hvci5zZXQoMC41KTtcbiAgICAgICAgdGV4dFNwcml0ZS52aXNpYmxlID0gdmlzaWJsZTtcblxuICAgICAgICByZXR1cm4gdGV4dFNwcml0ZTtcbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLktleWJvYXJkS2V5VmlldyA9IEtleWJvYXJkS2V5Vmlldztcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBDb250YWluZXJWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5Db250YWluZXJWaWV3XCIpO1xuICAgIC8vIENvbnRhaW5lciB3aGljaCBob3VzZXMgYSBwYXJ0aWNsZSBlbWl0dGVyLiBSZXF1aXJlcyBhIG1hbnVhbCBjYWxsIHRvIGl0cyB1cGRhdGUoKSBmdW5jdGlvblxuICAgIC8vIHBlciBmcmFtZSB0byB1cGRhdGUgdGhlIHBhcnRpY2xlcy5cbiAgICAvLyAtIE5vdGU6IGFzc3VtZXMgcGFydGljbGUgaW1hZ2VzIGFyZSBzZXBhcmF0ZSB0ZXh0dXJlcywgbm90IHBhcnQgb2YgYSBzcHJpdGUgc2hlZXQuXG4gICAgdmFyIFBhcnRpY2xlc1ZpZXcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIHRleHR1cmVOYW1lczogW10sICAvLyBOYW1lIG9mIGVhY2ggcHJlbG9hZGVkIHRleHR1cmUgYXNzZXQgdG8gYWRkIHRvIHRoZSBlbWl0dGVyLlxuICAgICAgICAgICAgY29uZmlnOiBudWxsLCAgLy8gVGhlIHBhcnRpY2xlIGVtaXR0ZXIgY29uZmlnLlxuICAgICAgICAgICAgY29uZmlnUHJvcDogXCJcIiwgIC8vTmFtZSBvZiB0aGUgaWQgZm9yIHRoZSBmaWxlIGluIHRoZSBsb2FkZXJcbiAgICAgICAgICAgIGluaXRpYWxseUVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBDb250YWluZXJWaWV3LmNhbGwodGhpcywgY29uZmlnKTtcblxuICAgICAgICB2YXIgdGV4dHVyZXMgPSBmaW5hbENvbmZpZy50ZXh0dXJlTmFtZXMubWFwKGZ1bmN0aW9uICh0ZXh0dXJlTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcC5nZXRDYWNoZSh0ZXh0dXJlTmFtZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghUGFydGljbGVzRW1pdHRlcikge1xuICAgICAgICAgICAgdGhyb3cgXCJQYXJ0aWNsZXNWaWV3OiBuZWVkIHRvIGluY2x1ZGUgJ3BpeGktcGFydGljbGVzJyBsaWJyYXJ5IHRvIHVzZSB0aGlzIGNsYXNzLlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVtaXR0ZXJDb25maWcgPSBmaW5hbENvbmZpZy5jb25maWc7XG4gICAgICAgIGlmICghZW1pdHRlckNvbmZpZykge1xuICAgICAgICAgICAgZW1pdHRlckNvbmZpZyA9IHRoaXMuX2dldEVtaXR0ZXJDb25maWcoZmluYWxDb25maWcuY29uZmlnUHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbWl0dGVyID0gbmV3IFBhcnRpY2xlc0VtaXR0ZXIoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGV4dHVyZXMsXG4gICAgICAgICAgICBlbWl0dGVyQ29uZmlnXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdCA9IGZpbmFsQ29uZmlnLmluaXRpYWxseUVuYWJsZWQ7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuYXV0b1VwZGF0ZSA9IGZpbmFsQ29uZmlnLmluaXRpYWxseUVuYWJsZWQ7XG4gICAgfTtcbiAgICB2YXIgcyA9IENvbnRhaW5lclZpZXcucHJvdG90eXBlO1xuICAgIHZhciBwID0gZXh0ZW5kKFBhcnRpY2xlc1ZpZXcsIENvbnRhaW5lclZpZXcpO1xuXG4gICAgcC5kZXN0cm95ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gRW5zdXJlIHByb3BlciBjbGVhbnVwIGluIFdlYkdMIG1vZGUuXG4gICAgICAgIC8vIC0gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS1wYXJ0aWNsZXMjbm90ZS1vbi1lbWl0dGVyLWNsZWFudXAuXG4gICAgICAgIGlmIChhcHAuaXNXZWJHTCgpKSB7XG4gICAgICAgICAgICBhcHAuZ2V0UmVuZGVyZXIoKS5wbHVnaW5zLnNwcml0ZS5zcHJpdGVzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBzLmRlc3Ryb3kuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiZW1pdHRlclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZW1pdHRlcjsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImVuYWJsZVwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKHR1cm5PbikgeyB0aGlzLl9lbWl0dGVyLmVtaXQgPSB0dXJuT247IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZW1pdHRlci5lbWl0OyB9XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIGVtaXR0ZXIgZWFjaCBmcmFtZS5cbiAgICBwLnVwZGF0ZSA9IGZ1bmN0aW9uIChmcmFtZVRpbWUpIHtcbiAgICAgICAgdGhpcy5fZW1pdHRlci51cGRhdGUoZnJhbWVUaW1lKTtcbiAgICB9O1xuXG4gICAgLy8gUmVtb3ZlIGFsbCBjdXJyZW50bHkgYWN0aXZlIHBhcnRpY2xlcyBpbiB0aGUgZW1pdHRlci5cbiAgICBwLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLmNsZWFudXAoKTtcbiAgICB9O1xuXG4gICAgcC5fZ2V0RW1pdHRlckNvbmZpZyA9IGZ1bmN0aW9uIChjb25maWdOYW1lKXtcbiAgICAgICAgcmV0dXJuIFBJWEkubG9hZGVyLnJlc291cmNlc1tjb25maWdOYW1lXS5kYXRhO1xuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuUGFydGljbGVzVmlldyA9IFBhcnRpY2xlc1ZpZXc7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgQ29udGFpbmVyVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQ29udGFpbmVyVmlld1wiKTtcblxuICAgIC8vIEFsbG93cyBhIHBpZSBzZWN0aW9uIG9mIGEgdmlldyB0byBiZSBkaXNwbGF5ZWQuIENvbXBvbmVudHM6XG4gICAgLy8gLSBGcm9udDogdGhlIHZpZXcgdG8gbWFzayBvZmYgYnkgdGhlIHBpZSBwb3J0aW9uLlxuICAgIC8vIC0gQmFjazogYW4gb3B0aW9uYWwgdmlldyB0aGF0IHNpdHMgYmVoaW5kICdmcm9udCcuXG4gICAgLy8gLSBNYXNrIGhvbGRlcjogaG9sZHMgdGhlIHBpZSBtYXNrLCBpcyBzb2xlbHkgdXNlZCB0byBtYWtlICdhbnRpY2xvY2t3aXNlJyBwcm9wZXJ0eSB3b3JrLlxuICAgIC8vICAgLSBNYXNrOiBwaWUgcG9ydGlvbiBhcHBsaWVkIGFzIGEgbWFzayB0byAnZnJvbnQnLCBhbmQgaXMgYSBjaGlsZCBvZiAnbWFzayBob2xkZXInLlxuICAgIHZhciBQaWVWaWV3ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICBmcm9udDoge30sICAvLyBDb25maWcgZm9yIGZyb250IHZpZXcgd2hpY2ggcGllIG1hc2sgaXMgYXBwbGllZCB0by5cbiAgICAgICAgICAgIGJhY2s6IG51bGwsICAvLyBDb25maWcgZm9yIG9wdGlvbmFsIGJhY2sgdmlldy5cbiAgICAgICAgICAgIHJhZGl1czogMTAuMCwgIC8vIFJhZGl1cyBvZiBjaXJjbGUgbWFkZSBieSBmdWxsIHBpZS5cbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IDAuMCwgIC8vIEFuZ2xlIGZyb20gdG9wIG9mIGNpcmNsZSB0byBzdGFydCBwaWUgZnJvbSAocG9zaXRpdmUgPSBjbG9ja3dpc2UpLlxuICAgICAgICAgICAgYW50aWNsb2Nrd2lzZTogZmFsc2UsICAvLyBXaGV0aGVyICdwcm9ncmVzcycgYXBwbGllcyBpbiBvcHBvc2l0ZSBkaXJlY3Rpb24gKGZsaXBzIG1hc2tWaWV3KS5cbiAgICAgICAgICAgIGZpbGxJbnZlcnNlOiBmYWxzZSwgIC8vIFRydWUgPSBmaWxsIG90aGVyIHBvcnRpb24gb2YgcGllLCBmYWxzZSA9IHN0YW5kYXJkIHBpZSBiZWhhdmlvdXIuXG4gICAgICAgICAgICBpbml0aWFsUHJvZ3Jlc3M6IDAuMCAgLy8gU3RhcnQgdmFsdWUgZm9yICdwcm9ncmVzcycuXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBDb250YWluZXJWaWV3LmNhbGwodGhpcywgY29uZmlnKTtcblxuICAgICAgICB0aGlzLl9tYXNrVmlldyA9IGFwcC5jcmVhdGVWaWV3KHsgdHlwZTogXCJncmFwaGljc1wiIH0pO1xuICAgICAgICB0aGlzLl9tYXNrSG9sZGVyVmlldyA9IGFwcC5jcmVhdGVWaWV3KHsgdHlwZTogXCJjb250YWluZXJcIiB9KTtcbiAgICAgICAgdGhpcy5fZnJvbnRWaWV3ID0gYXBwLmNyZWF0ZVZpZXcoZmluYWxDb25maWcuZnJvbnQpO1xuICAgICAgICB0aGlzLl9iYWNrVmlldyA9IChmaW5hbENvbmZpZy5iYWNrKSA/IGFwcC5jcmVhdGVWaWV3KGZpbmFsQ29uZmlnLmJhY2spIDogbnVsbDtcblxuICAgICAgICBpZiAoIXRoaXMuX21hc2tWaWV3KSB7XG4gICAgICAgICAgICB0aHJvdyBcIlBpZVZpZXc6IG1hc2tWaWV3IGlzIG51bGwuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9mcm9udFZpZXcpIHtcbiAgICAgICAgICAgIHRocm93IFwiUGllVmlldzogZnJvbnRWaWV3IGlzIG51bGwuXCI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tYXNrSG9sZGVyVmlldy5zY2FsZS54ICo9IEJvb2xlYW4udG9TaWduZWRJbnQoIWZpbmFsQ29uZmlnLmFudGljbG9ja3dpc2UpO1xuICAgICAgICB0aGlzLl9tYXNrVmlldy5yb3RhdGlvbiA9ICgtTWF0aC5IQUxGX1BJICsgZmluYWxDb25maWcuc3RhcnRBbmdsZSk7XG4gICAgICAgIHRoaXMuX3JhZGl1cyA9IGZpbmFsQ29uZmlnLnJhZGl1cztcbiAgICAgICAgdGhpcy5fc3RhcnRBbmdsZSA9IGZpbmFsQ29uZmlnLnN0YXJ0QW5nbGU7XG4gICAgICAgIHRoaXMuX2ZpbGxJbnZlcnNlID0gZmluYWxDb25maWcuZmlsbEludmVyc2U7XG5cbiAgICAgICAgLy8gU2V0IHVwIHZpZXcgaGllcmFyY2h5LlxuICAgICAgICB0aGlzLl9mcm9udFZpZXcubWFzayA9IHRoaXMuX21hc2tWaWV3O1xuICAgICAgICB0aGlzLl9tYXNrSG9sZGVyVmlldy5hZGRDaGlsZCh0aGlzLl9tYXNrVmlldyk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2JhY2tWaWV3KSB7XG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuX2JhY2tWaWV3KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuX2Zyb250Vmlldyk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fbWFza0hvbGRlclZpZXcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcGllIGNoaWxkIHZpZXdzLlxuICAgICAgICB0aGlzLl91cGRhdGVQcm9ncmVzcyhmaW5hbENvbmZpZy5pbml0aWFsUHJvZ3Jlc3MpO1xuICAgIH07XG4gICAgdmFyIHMgPSBDb250YWluZXJWaWV3LnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChQaWVWaWV3LCBDb250YWluZXJWaWV3KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInByb2dyZXNzXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAocHJvZ3Jlc3MpIHsgdGhpcy5fdXBkYXRlUHJvZ3Jlc3MocHJvZ3Jlc3MpOyB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb2dyZXNzOyB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwibWFza1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFza1ZpZXc7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJmcm9udFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZnJvbnRWaWV3OyB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiYmFja1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fYmFja1ZpZXc7IH1cbiAgICB9KTtcblxuICAgIHAuX3VwZGF0ZVByb2dyZXNzID0gZnVuY3Rpb24gKHByb2dyZXNzKSB7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzID0gTWF0aC5jbGFtcChwcm9ncmVzcywgMC4wLCAxLjApO1xuICAgICAgICB2YXIgYW5nbGUgPSAodGhpcy5fcHJvZ3Jlc3MgKiBNYXRoLlRXT19QSSk7XG5cbiAgICAgICAgdGhpcy5fbWFza1ZpZXcuY2xlYXIoKVxuICAgICAgICAgICAgLmJlZ2luRmlsbCgweGZmZmZmZiwgMS4wKVxuICAgICAgICAgICAgLm1vdmVUbygwLCAwKVxuICAgICAgICAgICAgLmFyYygwLCAwLCB0aGlzLl9yYWRpdXMsIDAuMCwgYW5nbGUsIHRoaXMuX2ZpbGxJbnZlcnNlKVxuICAgICAgICAgICAgLmNsb3NlUGF0aCgpXG4gICAgICAgICAgICAuZW5kRmlsbCgpO1xuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuUGllVmlldyA9IFBpZVZpZXc7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblx0dmFyIEdyYXBoaWNzVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuR3JhcGhpY3NWaWV3XCIpO1xuXHR2YXIgQ29sb3VyVXRpbHMgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkNvbG91clV0aWxzXCIpO1xuXG5cdHZhciBQcmltaXRpdmVWaWV3ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuXHRcdC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIGZpbGxDb2xvdXI6IFwiI2ZmZmZmZlwiLFxuICAgICAgICAgICAgZmlsbEFscGhhOiAxLjAsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDEsXG4gICAgICAgICAgICBsaW5lQ29sb3VyOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgIGxpbmVBbHBoYTogMS4wLFxuICAgICAgICAgICAgaXNXaXJlZnJhbWU6IGZhbHNlLFxuICAgICAgICAgICAgdmVydGV4TGlzdDogW11cbiAgICAgICAgfSwgY29uZmlnKTtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIEdyYXBoaWNzVmlldy5jYWxsKHRoaXMsIGZpbmFsQ29uZmlnKTtcblxuXHRcdHRoaXMuZmlsbENvbG91ciA9IENvbG91clV0aWxzLmNvbG91clRvTnVtYmVyKGZpbmFsQ29uZmlnLmZpbGxDb2xvdXIpO1xuXHRcdHRoaXMuZmlsbEFscGhhID0gZmluYWxDb25maWcuZmlsbEFscGhhO1xuXHRcdHRoaXMuX2xpbmVXaWR0aCA9IGZpbmFsQ29uZmlnLmxpbmVXaWR0aDsgIC8vIE5hbWUgd2l0aG91dCB1bmRlcnNjb3JlIGNvbmZsaWN0cyB3aXRoIGJhc2UgY2xhc3MuXG5cdFx0dGhpcy5saW5lQ29sb3VyID0gQ29sb3VyVXRpbHMuY29sb3VyVG9OdW1iZXIoZmluYWxDb25maWcubGluZUNvbG91cik7XG5cdFx0dGhpcy5saW5lQWxwaGEgPSBmaW5hbENvbmZpZy5saW5lQWxwaGE7XG5cdFx0dGhpcy5pc1dpcmVmcmFtZSA9IGZpbmFsQ29uZmlnLmlzV2lyZWZyYW1lO1xuXG5cdFx0Ly8gRHJhdyB0aGUgcHJpbWl0aXZlIHRvIHRoZSBjb250YWluZXIuXG4gICAgICAgIHRoaXMuX3ZlcnRleExpc3QgPSBmaW5hbENvbmZpZy52ZXJ0ZXhMaXN0O1xuICAgICAgICB0aGlzLl9maWxsUHJpbWl0aXZlKCk7XG5cdH07XG5cdHZhciBzID0gR3JhcGhpY3NWaWV3LnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoUHJpbWl0aXZlVmlldywgR3JhcGhpY3NWaWV3KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInZlcnRleExpc3RcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdWZXJ0ZXhMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLl92ZXJ0ZXhMaXN0ID0gbmV3VmVydGV4TGlzdDtcbiAgICAgICAgICAgIHRoaXMuX2ZpbGxQcmltaXRpdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmVydGV4TGlzdDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cdHAuX2ZpbGxQcmltaXRpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcblxuXHRcdGlmICghdGhpcy5fdmVydGV4TGlzdCB8fCAhdGhpcy5fdmVydGV4TGlzdC5sZW5ndGggfHwgdGhpcy5fdmVydGV4TGlzdC5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICByZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGZpbGxDb2xvdXIgPSAodGhpcy5pc1dpcmVmcmFtZSkgPyAwIDogdGhpcy5maWxsQ29sb3VyO1xuXHRcdHZhciBmaWxsQWxwaGEgPSAodGhpcy5pc1dpcmVmcmFtZSkgPyAwIDogdGhpcy5maWxsQWxwaGE7XG5cblx0XHR0aGlzLmJlZ2luRmlsbChmaWxsQ29sb3VyLCBmaWxsQWxwaGEpO1xuXHRcdHRoaXMubGluZVN0eWxlKHRoaXMuX2xpbmVXaWR0aCwgdGhpcy5saW5lQ29sb3VyLCB0aGlzLmxpbmVBbHBoYSk7XG5cblx0XHR0aGlzLm1vdmVUbyh0aGlzLl92ZXJ0ZXhMaXN0WzBdLngsIHRoaXMuX3ZlcnRleExpc3RbMF0ueSk7XG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLl92ZXJ0ZXhMaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aGlzLmxpbmVUbyh0aGlzLl92ZXJ0ZXhMaXN0W2ldLngsIHRoaXMuX3ZlcnRleExpc3RbaV0ueSk7XG5cdFx0fVxuXHRcdHRoaXMubGluZVRvKHRoaXMuX3ZlcnRleExpc3RbMF0ueCwgdGhpcy5fdmVydGV4TGlzdFswXS55KTtcblxuXHRcdHRoaXMuZW5kRmlsbCgpO1xuXHR9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlByaW1pdGl2ZVZpZXcgPSBQcmltaXRpdmVWaWV3O1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG5cdHZhciBHcmFwaGljc1ZpZXcgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkdyYXBoaWNzVmlld1wiKTtcblx0dmFyIENvbG91clV0aWxzID0gaW5jbHVkZShcImZyYW1ld29yay5Db2xvdXJVdGlsc1wiKTtcblxuXHQvLyBEcmF3IHJlY3RhbmdsZXMgb3Igcm91bmRlZCByZWN0YW5nbGVzICh1c2luZyBjb3JuZXJSYWRpdXMpLiBSZWN0YW5nbGUgaXMgY2VudHJlZFxuXHQvLyBob3Jpem9udGFsbHkgYW5kIHZlcnRpY2FsbHkgYXQgcG9zaXRpb24uXG5cdHZhciBSZWN0YW5nbGVWaWV3ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuXHRcdC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgXHRhbmNob3I6IHtcbiAgICAgICAgXHRcdHg6IDAuMCxcbiAgICAgICAgXHRcdHk6IDAuMFxuICAgICAgICBcdH0sXG4gICAgICAgICAgICBmaWxsQ29sb3VyOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgIGZpbGxBbHBoYTogMS4wLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAwLFxuICAgICAgICAgICAgbGluZUNvbG91cjogXCIjZmZmZmZmXCIsXG4gICAgICAgICAgICBsaW5lQWxwaGE6IDEuMCxcbiAgICAgICAgICAgIGlzV2lyZWZyYW1lOiBmYWxzZSxcbiAgICAgICAgICAgIHdpZHRoOiAxMC4wLFxuICAgICAgICAgICAgaGVpZ2h0OiAxMC4wLFxuICAgICAgICAgICAgY29ybmVyUmFkaXVzOiAwLjBcbiAgICAgICAgfSwgY29uZmlnKTtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIEdyYXBoaWNzVmlldy5jYWxsKHRoaXMsIGZpbmFsQ29uZmlnKTtcblxuICAgICAgICB0aGlzLl9hbmNob3IgPSB7XG4gICAgICAgIFx0eDogZmluYWxDb25maWcuYW5jaG9yLngsXG4gICAgICAgIFx0eTogZmluYWxDb25maWcuYW5jaG9yLnlcbiAgICAgICAgfTtcblx0XHR0aGlzLmZpbGxDb2xvdXIgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5maWxsQ29sb3VyKTtcblx0XHR0aGlzLmZpbGxBbHBoYSA9IGZpbmFsQ29uZmlnLmZpbGxBbHBoYTtcblx0XHR0aGlzLmxpbmVXaWR0aCA9IGZpbmFsQ29uZmlnLmxpbmVXaWR0aDtcblx0XHR0aGlzLmxpbmVDb2xvdXIgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5saW5lQ29sb3VyKTtcblx0XHR0aGlzLmxpbmVBbHBoYSA9IGZpbmFsQ29uZmlnLmxpbmVBbHBoYTtcblx0XHR0aGlzLmlzV2lyZWZyYW1lID0gZmluYWxDb25maWcuaXNXaXJlZnJhbWU7XG5cdFx0dGhpcy5yZWN0V2lkdGggPSBmaW5hbENvbmZpZy53aWR0aDtcblx0XHR0aGlzLnJlY3RIZWlnaHQgPSBmaW5hbENvbmZpZy5oZWlnaHQ7XG5cdFx0dGhpcy5jb3JuZXJSYWRpdXMgPSBmaW5hbENvbmZpZy5jb3JuZXJSYWRpdXM7XG5cdFx0XG5cdFx0Ly8gRHJhdyB0aGUgcm91bmRlZCByZWN0YW5nbGUgdG8gdGhlIGNvbnRhaW5lci5cbiAgICAgICAgdGhpcy5fZmlsbFJvdW5kZWRSZWN0KCk7XG5cdH07XG5cdHZhciBzID0gR3JhcGhpY3NWaWV3LnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoUmVjdGFuZ2xlVmlldywgR3JhcGhpY3NWaWV3KTtcblxuXHRwLl9maWxsUm91bmRlZFJlY3QgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGZpbGxDb2xvdXIgPSAodGhpcy5pc1dpcmVmcmFtZSkgPyAwIDogdGhpcy5maWxsQ29sb3VyO1xuXHRcdHZhciBmaWxsQWxwaGEgPSAodGhpcy5pc1dpcmVmcmFtZSkgPyAwIDogdGhpcy5maWxsQWxwaGE7XG5cblx0XHR2YXIgbWluWCA9ICgtdGhpcy5yZWN0V2lkdGggKiB0aGlzLl9hbmNob3IueCk7XG5cdFx0dmFyIG1pblkgPSAoLXRoaXMucmVjdEhlaWdodCAqIHRoaXMuX2FuY2hvci55KTtcblxuXHRcdHRoaXMuY2xlYXIoKVxuXHRcdFx0LmJlZ2luRmlsbChmaWxsQ29sb3VyLCBmaWxsQWxwaGEpXG5cdFx0XHQubGluZVN0eWxlKHRoaXMubGluZVdpZHRoLCB0aGlzLmxpbmVDb2xvdXIsIHRoaXMubGluZUFscGhhKVxuXHRcdFx0LmRyYXdSb3VuZGVkUmVjdChtaW5YLCBtaW5ZLCB0aGlzLnJlY3RXaWR0aCwgdGhpcy5yZWN0SGVpZ2h0LCB0aGlzLmNvcm5lclJhZGl1cylcblx0XHRcdC5lbmRGaWxsKCk7XG5cdH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuUmVjdGFuZ2xlVmlldyA9IFJlY3RhbmdsZVZpZXc7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgU3ByaXRlVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuU3ByaXRlVmlld1wiKTtcbiAgICB2YXIgUmVuZGVyVGV4dHVyZSA9IGluY2x1ZGUoXCJQSVhJLlJlbmRlclRleHR1cmVcIik7XG5cbiAgICAvLyBTcHJpdGUgdmlldyB3aGljaCBhbGxvd3MgZm9yIHRha2luZyBzY3JlZW5zaG90cyBvZiBhIHByb3ZpZGVkIHZpZXcgaGllcmFyY2h5LlxuICAgIHZhciBTY3JlZW5zaG90VmlldyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICBcdC8vIFByZXZlbnQgU3ByaXRlVmlldyBjb25zdHJ1Y3RvciBzZXR0aW5nIHRoZSB3aG9sZSBzcHJpdGUgc2hlZXQgYXMgdGhlIHRleHR1cmUuXG4gICAgXHR2YXIgdGV4dHVyZU5hbWUgPSBudWxsO1xuICAgIFx0aWYgKGNvbmZpZyAmJiBjb25maWcudGV4dHVyZU5hbWUpIHtcbiAgICBcdFx0dGV4dHVyZU5hbWUgPSBjb25maWcudGV4dHVyZU5hbWU7XG4gICAgXHRcdGNvbmZpZy50ZXh0dXJlTmFtZSA9IG51bGw7XG4gICAgXHR9XG5cbiAgICAgICAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBjb25maWcuXG4gICAgICAgIHZhciBmaW5hbENvbmZpZyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAgd2lkdGg6IDUxMi4wLFxuICAgICAgICAgICAgaGVpZ2h0OiA1MTIuMFxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgU3ByaXRlVmlldy5jYWxsKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgICAgdGhpcy53aWR0aCA9IGZpbmFsQ29uZmlnLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGZpbmFsQ29uZmlnLmhlaWdodDtcblxuICAgICAgICAvLyBDcmVhdGUgYSByZW5kZXIgdGV4dHVyZSBhcyB0aGlzIHNwcml0ZSdzIHRleHR1cmUuXG4gICAgICAgIHRoaXMuX3JlbmRlclRleHR1cmUgPSBSZW5kZXJUZXh0dXJlLmNyZWF0ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHRoaXMudGV4dHVyZSA9IHRoaXMuX3JlbmRlclRleHR1cmU7XG4gICAgfTtcbiAgICB2YXIgcyA9IFNwcml0ZVZpZXcucHJvdG90eXBlO1xuICAgIHZhciBwID0gZXh0ZW5kKFNjcmVlbnNob3RWaWV3LCBTcHJpdGVWaWV3KTtcblxuICAgIHAudGFrZVNjcmVlbnNob3QgPSBmdW5jdGlvbiAodmlldykge1xuICAgICAgICBhcHAuZ2V0UmVuZGVyZXIoKS5yZW5kZXIodmlldywgdGhpcy5fcmVuZGVyVGV4dHVyZSk7XG4gICAgfTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5TY3JlZW5zaG90VmlldyA9IFNjcmVlbnNob3RWaWV3O1xufSgpKTtcbiIsIlxuaW1wb3J0IEZhY3RvcnlIZWxwZXIgZnJvbSBcIi4vdXRpbHMvRmFjdG9yeUhlbHBlclwiO1xuaW1wb3J0ICdwaXhpLXNwaW5lJztcbndpbmRvd1tcIlNwaW5lXCJdID0gUElYSS5zcGluZS5TcGluZTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgU3BpbmUgPSBpbmNsdWRlKFwiUElYSS5zcGluZS5TcGluZVwiLCBmYWxzZSk7XG4gICAgdmFyIENvbG91clV0aWxzID0gaW5jbHVkZShcImZyYW1ld29yay5Db2xvdXJVdGlsc1wiKTtcblxuICAgIHZhciBTcGluZVZpZXcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IDAuMCxcbiAgICAgICAgICAgICAgICB5OiAwLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb3RhdGlvbjogMC4wLFxuICAgICAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgICAgICB4OiAxLjAsXG4gICAgICAgICAgICAgICAgeTogMS4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGl2b3Q6IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxwaGE6IDEuMCxcbiAgICAgICAgICAgIGlzSW50ZXJhY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgbWFzazogbnVsbCxcbiAgICAgICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgICAgIGNvbG91clRpbnQ6IFwiI2ZmZmZmZlwiLCAgLy8gQWxsIGNvbG91cnMgaW4gdGhlIHZpZXcgYXJlIG1vZHVsYXRlZCB3aXRoIHRoaXMuXG4gICAgICAgICAgICBzcGluZU5hbWU6IG51bGwsXG4gICAgICAgICAgICBzcGluZURhdGE6bnVsbCxcbiAgICAgICAgICAgIHNrZXc6IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXV0b1VwZGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIHNraW5OYW1lOiBudWxsLCAgLy8gU3RyaW5nIG5hbWUgb2Ygc2tpbi5cbiAgICAgICAgICAgIGF0dGFjaG1lbnRzOiBbXSwgIC8vIEFycmF5IG9mIHsgc2xvdE5hbWU6IHN0cmluZywgYXR0YWNobWVudE5hbWU6IHN0cmluZyB9IHBhaXJzLlxuICAgICAgICAgICAgYW5pbWF0aW9uczogW10gIC8vIEFycmF5IG9mIGFuaW1hdGlvbiBuYW1lIHN0cmluZ3MsIG9yIHN0cnVjdHMgb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB7IHRyYWNrSW5kZXg6IG51bWJlciwgYW5pbWF0aW9uTmFtZTogc3RyaW5nLCBsb29wOiBib29sZWFuLCBzdGFydFRpbWU6IG51bWJlciB9LlxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIHZhciBzcGluZURhdGEgPSAgZmluYWxDb25maWcuc3BpbmVEYXRhO1xuICAgICAgICBpZiAoIXNwaW5lRGF0YSl7XG4gICAgICAgICAgICB0aHJvdyBcIm5vIHNwaW5lIGRhdGEgaGFzIGJlZW4gcHJvdmlkZXIsIHBsZWFzZSBjaGVjayB0aGF0IHRoZSBzcGluZSBpcyBiZWluZyBsb2FkZWQuIHNlZSBQSVhJLnV0aWxzLlRleHR1cmVDYWNoZSBhbmQgdGhlIGxvYWRlciByZXNvdXJjZXMuXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIFNwaW5lLmNhbGwodGhpcywgc3BpbmVEYXRhKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGludCA9IENvbG91clV0aWxzLmNvbG91clRvTnVtYmVyKGZpbmFsQ29uZmlnLmNvbG91clRpbnQpO1xuICAgICAgICB0aGlzLnNrZXcgPSBuZXcgUElYSS5Qb2ludChmaW5hbENvbmZpZy5za2V3LngsIGZpbmFsQ29uZmlnLnNrZXcueSk7XG4gICAgICAgIHRoaXMuYXV0b1VwZGF0ZSA9IGZpbmFsQ29uZmlnLmF1dG9VcGRhdGU7XG4gICAgICAgIFxuICAgICAgICBGYWN0b3J5SGVscGVyLmFwcGx5QmFzZUNvbmZpZ1RvVmlldyhmaW5hbENvbmZpZywgdGhpcyk7XG5cbiAgICAgICAgaWYgKGZpbmFsQ29uZmlnLnNraW5OYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnNrZWxldG9uLnNldFNraW5CeU5hbWUoZmluYWxDb25maWcuc2tpbk5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQXJyYXkoZmluYWxDb25maWcuYXR0YWNobWVudHMpKSB7XG4gICAgICAgICAgICBmaW5hbENvbmZpZy5hdHRhY2htZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRhY2htZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5za2VsZXRvbi5zZXRBdHRhY2htZW50KGF0dGFjaG1lbnQuc2xvdE5hbWUsIGF0dGFjaG1lbnQuYXR0YWNobWVudE5hbWUpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0FycmF5KGZpbmFsQ29uZmlnLmFuaW1hdGlvbnMpKSB7XG4gICAgICAgICAgICBmaW5hbENvbmZpZy5hbmltYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFuaW1hdGlvbiwgaSkge1xuICAgICAgICAgICAgICAgIHZhciB0cmFja0luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uTmFtZSA9IGFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgbG9vcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydFRpbWUgPSAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGFuaW1hdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tJbmRleCA9IGFuaW1hdGlvbi50cmFja0luZGV4IHx8IGk7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb24uYW5pbWF0aW9uTmFtZSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBsb29wID0gYW5pbWF0aW9uLmxvb3AgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IGFuaW1hdGlvbi5zdGFydFRpbWUgfHwgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRBbmltYXRpb24odHJhY2tJbmRleCwgYW5pbWF0aW9uTmFtZSwgbG9vcCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS50cmFja3NbdHJhY2tJbmRleF0gJiYgKHN0YXJ0VGltZSA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudHJhY2tzW3RyYWNrSW5kZXhdLnRyYWNrVGltZSA9IHN0YXJ0VGltZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmF1dG9VcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKDApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgcyA9IFNwaW5lLnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChTcGluZVZpZXcsIFNwaW5lKTtcblxuICAgIHAucG9zdEluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Bvc3RJbml0SW1wbCgpO1xuICAgIH07XG5cbiAgICBwLl9wb3N0SW5pdEltcGwgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5TcGluZVZpZXcgPSBTcGluZVZpZXc7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgU3ByaXRlVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuU3ByaXRlVmlld1wiKTtcblxuICAgIC8vIFNwcml0ZSB2aWV3IHdpdGggdXBkYXRlVGV4dHVyZSgpIGNhbGwgd2hpY2ggc3dpdGNoZXMgYmV0d2VlbiBzcHJpdGUgc2hlZXQgZnJhbWVzLlxuICAgIHZhciBTcHJpdGVTaGVldFZpZXcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgXHQvLyBQcmV2ZW50IFNwcml0ZVZpZXcgY29uc3RydWN0b3Igc2V0dGluZyB0aGUgd2hvbGUgc3ByaXRlIHNoZWV0IGFzIHRoZSB0ZXh0dXJlLlxuICAgIFx0dmFyIHRleHR1cmVOYW1lID0gbnVsbDtcbiAgICBcdFxuXG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgXHRzdGFydGluZ0ZyYW1lTmFtZTogbnVsbFxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIGlmIChmaW5hbENvbmZpZy50ZXh0dXJlTmFtZSkge1xuICAgICAgICAgICAgdGV4dHVyZU5hbWUgPSBjb25maWcudGV4dHVyZU5hbWU7XG4gICAgICAgICAgICBmaW5hbENvbmZpZy50ZXh0dXJlTmFtZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIFNwcml0ZVZpZXcuY2FsbCh0aGlzLCBmaW5hbENvbmZpZyk7XG5cbiAgICAgICAgdGhpcy5zcHJpdGVTaGVldCA9IG51bGw7XG5cbiAgICAgICAgLy8gU2V0IHNwcml0ZSBzaGVldCwgYW5kIChvcHRpb25hbGx5KSBzdGFydGluZyBmcmFtZSBhcyB0ZXh0dXJlLlxuICAgICAgICB0aGlzLnVwZGF0ZVRleHR1cmUodGV4dHVyZU5hbWUpO1xuICAgICAgICB0aGlzLnVwZGF0ZUZyYW1lKGZpbmFsQ29uZmlnLnN0YXJ0aW5nRnJhbWVOYW1lKTtcbiAgICB9O1xuICAgIHZhciBzID0gU3ByaXRlVmlldy5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoU3ByaXRlU2hlZXRWaWV3LCBTcHJpdGVWaWV3KTtcblxuICAgIC8vIFNldCB0aGUgc3ByaXRlIHNoZWV0IGJ5IHJlc291cmNlIG5hbWUuXG4gICAgcC51cGRhdGVUZXh0dXJlID0gZnVuY3Rpb24gKHRleHR1cmVOYW1lKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlU2hlZXQgPSAodGV4dHVyZU5hbWUpID8gYXBwLmdldENhY2hlKHRleHR1cmVOYW1lKSA6IG51bGw7XG4gICAgfTtcblxuICAgIC8vIFNldCB0aGUgZnJhbWUgd2l0aGluIHRoZSBzcHJpdGUgc2hlZXQgdG8gdXNlIGFzIHRoZSBzcHJpdGUgdGV4dHVyZS5cbiAgICBwLnVwZGF0ZUZyYW1lID0gZnVuY3Rpb24gKGZyYW1lTmFtZSkge1xuICAgIFx0aWYgKHRoaXMuc3ByaXRlU2hlZXQpIHtcbiAgICBcdFx0dmFyIGZyYW1lVGV4dHVyZSA9IHRoaXMuc3ByaXRlU2hlZXQuZ2V0RnJhbWUoZnJhbWVOYW1lKTtcbiAgICBcdFx0aWYgKGZyYW1lVGV4dHVyZSkge1xuICAgIFx0XHRcdHRoaXMudGV4dHVyZSA9IGZyYW1lVGV4dHVyZTtcbiAgICBcdFx0fVxuICAgIFx0fVxuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuU3ByaXRlU2hlZXRWaWV3ID0gU3ByaXRlU2hlZXRWaWV3O1xufSgpKTtcbiIsImltcG9ydCBGYWN0b3J5SGVscGVyIGZyb20gXCIuL3V0aWxzL0ZhY3RvcnlIZWxwZXJcIjtcbihmdW5jdGlvbiAoKSB7XG5cdHZhciBUZXh0ID0gaW5jbHVkZShcIlBJWEkuVGV4dFwiKTtcblx0dmFyIENvbG91clV0aWxzID0gaW5jbHVkZShcImZyYW1ld29yay5Db2xvdXJVdGlsc1wiKTtcblxuXHR2YXIgVGV4dFZpZXcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG5cdFx0Ly8gT3ZlcnJpZGUgZGVmYXVsdCBjb25maWcuXG4gICAgICAgIHZhciBmaW5hbENvbmZpZyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgeDogMC4wLFxuICAgICAgICAgICAgICAgIHk6IDAuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiAwLjAsXG4gICAgICAgICAgICBzY2FsZToge1xuICAgICAgICAgICAgICAgIHg6IDEuMCxcbiAgICAgICAgICAgICAgICB5OiAxLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwaXZvdDoge1xuICAgICAgICAgICAgICAgIHg6IDAuMCxcbiAgICAgICAgICAgICAgICB5OiAwLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbHBoYTogMS4wLFxuICAgICAgICAgICAgaXNJbnRlcmFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgICBtYXNrOiBudWxsLFxuICAgICAgICAgICAgekluZGV4OiAwLFxuICAgICAgICAgICAgY29sb3VyVGludDogXCIjZmZmZmZmXCIsICAvLyBBbGwgY29sb3VycyBpbiB0aGUgdmlldyBhcmUgbW9kdWxhdGVkIHdpdGggdGhpcy5cbiAgICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgICAgIHg6IDAuMCxcbiAgICAgICAgICAgICAgICB5OiAwLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbml0aWFsVGV4dDogXCJcIixcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgZmlsbDogXCIjZmZmZmZmXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgY29uZmlnKTtcblxuICAgICAgICAvLyBPdmVycmlkZSBjb25maWcncyBzdHlsZS5maWxsIGlmICdjYW52YXNNb2RlQ29sb3VyJyBtZW1iZXIgaXMgcHJvdmlkZWQuXG4gICAgICAgIGlmIChpc0RlZmluZWQoZmluYWxDb25maWcuY2FudmFzTW9kZUNvbG91cikgJiYgIWFwcC5pc1dlYkdMKCkpIHtcbiAgICAgICAgICAgIGZpbmFsQ29uZmlnLnN0eWxlLmZpbGwgPSBmaW5hbENvbmZpZy5jYW52YXNNb2RlQ29sb3VyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBUZXh0LmNhbGwodGhpcywgZmluYWxDb25maWcuaW5pdGlhbFRleHQsIGZpbmFsQ29uZmlnLnN0eWxlKTtcblxuICAgICAgICB0aGlzLnRpbnQgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5jb2xvdXJUaW50KTtcbiAgICAgICAgdGhpcy5hbmNob3IgPSBuZXcgUElYSS5Qb2ludChmaW5hbENvbmZpZy5hbmNob3IueCwgZmluYWxDb25maWcuYW5jaG9yLnkpO1xuICAgICAgICBGYWN0b3J5SGVscGVyLmFwcGx5QmFzZUNvbmZpZ1RvVmlldyhmaW5hbENvbmZpZywgdGhpcyk7XG5cblx0fTtcblx0dmFyIHMgPSBUZXh0LnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoVGV4dFZpZXcsIFRleHQpO1xuXG4gICAgcC5kZXN0cm95ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gV2UgYWx3YXlzIHdhbnQgdG8gZGVzdHJveSB0aGUgdGV4dCBvYmplY3QncyBiYXNlIHRleHR1cmUsIHRleHR1cmUgYW5kIGNoaWxkcmVuLCBzbyBwcmV2ZW50XG4gICAgICAgIC8vIGV4dGVybmFsIGZvcmNlcyBvciBhbmNlc3RvcnMgb3ZlcnJpZGluZyB0aGVzZSBvcHRpb25zLlxuICAgICAgICBzLmRlc3Ryb3kuY2FsbCh0aGlzLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlRleHRWaWV3ID0gVGV4dFZpZXc7XG59KCkpO1xuIiwiaW1wb3J0IEZhY3RvcnlIZWxwZXIgZnJvbSBcIi4vdXRpbHMvRmFjdG9yeUhlbHBlclwiO1xuKGZ1bmN0aW9uICgpIHtcblx0dmFyIFRpbGluZ1Nwcml0ZSA9IGluY2x1ZGUoXCJQSVhJLlRpbGluZ1Nwcml0ZVwiKTtcblxuXHR2YXIgVGlsZVNwcml0ZVZpZXcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG5cdFx0Ly8gT3ZlcnJpZGUgZGVmYXVsdCBjb25maWcuXG4gICAgICAgIHZhciBmaW5hbENvbmZpZyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgeDogMC4wLFxuICAgICAgICAgICAgICAgIHk6IDAuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiAwLjAsXG4gICAgICAgICAgICBzY2FsZToge1xuICAgICAgICAgICAgICAgIHg6IDEuMCxcbiAgICAgICAgICAgICAgICB5OiAxLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwaXZvdDoge1xuICAgICAgICAgICAgICAgIHg6IDAuMCxcbiAgICAgICAgICAgICAgICB5OiAwLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbHBoYTogMS4wLFxuICAgICAgICAgICAgaXNJbnRlcmFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgICBtYXNrOiBudWxsLFxuICAgICAgICAgICAgekluZGV4OiAwLFxuICAgICAgICAgICAgdGV4dHVyZU5hbWU6IG51bGwsXG4gICAgICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGlsZVNpemU6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGlsZVBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgeDogMC4wLFxuICAgICAgICAgICAgICAgIHk6IDAuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpbGVTY2FsZToge1xuICAgICAgICAgICAgICAgIHg6IDEuMCxcbiAgICAgICAgICAgICAgICB5OiAxLjBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgY29uZmlnKTtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIHZhciB0ZXh0dXJlID0gKGZpbmFsQ29uZmlnLnRleHR1cmVOYW1lKSA/IGFwcC5nZXRDYWNoZShjb25maWcudGV4dHVyZU5hbWUpIDogbnVsbDtcbiAgICAgICAgVGlsaW5nU3ByaXRlLmNhbGwodGhpcywgdGV4dHVyZSwgZmluYWxDb25maWcudGlsZVNpemUud2lkdGgsIGZpbmFsQ29uZmlnLnRpbGVTaXplLmhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5hbmNob3IgPSBuZXcgUElYSS5Qb2ludChmaW5hbENvbmZpZy5hbmNob3IueCwgZmluYWxDb25maWcuYW5jaG9yLnkpO1xuICAgICAgICB0aGlzLnRpbGVQb3NpdGlvbiA9IG5ldyBQSVhJLlBvaW50KGZpbmFsQ29uZmlnLnRpbGVQb3NpdGlvbi54LCBmaW5hbENvbmZpZy50aWxlUG9zaXRpb24ueSk7XG4gICAgICAgIHRoaXMudGlsZVNjYWxlID0gbmV3IFBJWEkuUG9pbnQoZmluYWxDb25maWcudGlsZVNjYWxlLngsIGZpbmFsQ29uZmlnLnRpbGVTY2FsZS55KTtcblxuICAgICAgICBGYWN0b3J5SGVscGVyLmFwcGx5QmFzZUNvbmZpZ1RvVmlldyhmaW5hbENvbmZpZywgdGhpcyk7XG5cdH07XG5cdHZhciBzID0gVGlsaW5nU3ByaXRlLnByb3RvdHlwZTtcblx0dmFyIHAgPSBleHRlbmQoVGlsZVNwcml0ZVZpZXcsIFRpbGluZ1Nwcml0ZSk7XG5cbiAgICBwLnNldE1hc2sgPSBmdW5jdGlvbiAobmV3TWFza1ZpZXcpIHtcbiAgICAgICAgaWYgKG5ld01hc2tWaWV3KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZCh0aGlzLm1hc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm1hc2sgPSBuZXdNYXNrVmlldztcbiAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5tYXNrKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuVGlsZVNwcml0ZVZpZXcgPSBUaWxlU3ByaXRlVmlldztcbn0oKSk7XG4iLCJpbXBvcnQgU2xpY2VCdXR0b25WaWV3IGZyb20gXCIuLi8uLi8uLi90cy9jb3JlL1ZpZXcvU2xpY2VCdXR0b25WaWV3XCI7XG5pbXBvcnQgU2xpY2VTcHJpdGVWaWV3IGZyb20gXCIuLi8uLi8uLi90cy9jb3JlL1ZpZXcvU2xpY2VTcHJpdGVWaWV3XCI7XG5pbXBvcnQgQml0bWFwVGV4dFZpZXcgZnJvbSBcIi4uLy4uLy4uL3RzL2NvcmUvVmlldy9CaXRtYXBUZXh0Vmlld1wiO1xuXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEJhc2VGYWN0b3J5ID0gaW5jbHVkZShcImZyYW1ld29yay5CYXNlRmFjdG9yeVwiKTtcbiAgICB2YXIgQ29udGFpbmVyVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQ29udGFpbmVyVmlld1wiKTtcbiAgICB2YXIgU3ByaXRlVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuU3ByaXRlVmlld1wiKTtcbiAgICB2YXIgU3ByaXRlU2hlZXRWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5TcHJpdGVTaGVldFZpZXdcIik7XG4gICAgdmFyIFBhcnRpY2xlc1ZpZXcgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLlBhcnRpY2xlc1ZpZXdcIik7XG4gICAgdmFyIFNwaW5lVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuU3BpbmVWaWV3XCIpO1xuICAgIHZhciBUaWxlU3ByaXRlVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuVGlsZVNwcml0ZVZpZXdcIik7XG4gICAgdmFyIFNjcmVlbnNob3RWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5TY3JlZW5zaG90Vmlld1wiKTtcbiAgICB2YXIgQnV0dG9uVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQnV0dG9uVmlld1wiKTtcbiAgICB2YXIgR3JhcGhpY3NWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5HcmFwaGljc1ZpZXdcIik7XG4gICAgdmFyIFByaW1pdGl2ZVZpZXcgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLlByaW1pdGl2ZVZpZXdcIik7XG4gICAgdmFyIENpcmNsZVZpZXcgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkNpcmNsZVZpZXdcIik7XG4gICAgdmFyIFJlY3RhbmdsZVZpZXcgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLlJlY3RhbmdsZVZpZXdcIik7XG4gICAgdmFyIExpbmVWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5MaW5lVmlld1wiKTtcbiAgICB2YXIgQ3VydmVWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5DdXJ2ZVZpZXdcIik7XG4gICAgdmFyIEJpbmFyeVNwcml0ZVZpZXcgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkJpbmFyeVNwcml0ZVZpZXdcIik7XG4gICAgdmFyIER1YWxTcHJpdGVWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5EdWFsU3ByaXRlVmlld1wiKTtcbiAgICB2YXIgUGllVmlldyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuUGllVmlld1wiKTtcbiAgICB2YXIgS2V5Ym9hcmRLZXlWaWV3ID0gaW5jbHVkZShcImZyYW1ld29yay5LZXlib2FyZEtleVZpZXdcIik7XG4gICAgdmFyIENvbG91clV0aWxzID0gaW5jbHVkZShcImZyYW1ld29yay5Db2xvdXJVdGlsc1wiKTtcbiAgICB2YXIgUElYSUdyYXBoaWNzID0gaW5jbHVkZShcIlBJWEkuR3JhcGhpY3NcIik7XG5cbiAgICB2YXIgVmlld0ZhY3RvcnkgPSBmdW5jdGlvbiAobG9hZGVyKSB7XG4gICAgICAgIEJhc2VGYWN0b3J5LmNhbGwodGhpcyk7XG5cbiAgICAgICAgdGhpcy5sb2FkZXIgPSBsb2FkZXI7XG4gICAgICAgIC8vIFJlZ2lzdGVyIGNyZWF0b3IgZnVuY3Rpb25zIGZvciBjb21tb24gdmlldyB0eXBlcy5cbiAgICAgICAgdGhpcy5yZWdpc3RlckNyZWF0b3JzKFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcImNvbnRhaW5lclwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLmRlZmF1bHRUcmVlQ3JlYXRvcihDb250YWluZXJWaWV3KS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwic3ByaXRlXCIsXG4gICAgICAgICAgICAgICAgY3JlYXRvckZ1bmM6IHRoaXMuZGVmYXVsdFRyZWVDcmVhdG9yKFNwcml0ZVZpZXcpLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3JlYXRvcktleTogXCJzbGljZVNwcml0ZVwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLl9jcmVhdGVTbGljZVNwcml0ZSgpLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3JlYXRvcktleTogXCJzcHJpdGVTaGVldFwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLmRlZmF1bHRUcmVlQ3JlYXRvcihTcHJpdGVTaGVldFZpZXcpLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgICAgY3JlYXRvcktleTogXCJhbmltYXRlZFNwcml0ZVwiLFxuICAgICAgICAgICAgLy8gICAgIGNyZWF0b3JGdW5jOiB0aGlzLmRlZmF1bHRDcmVhdG9yKEFuaW1hdGVkU3ByaXRlVmlldykuYmluZCh0aGlzKVxuICAgICAgICAgICAgLy8gICAgIC8vIENhbid0IGhhdmUgY2hpbGQgb2JqZWN0cywgY2F1c2VzIGEgbWVtb3J5IGxlYWsgYmVjYXVzZSBTcHJpbmdSb2xsJ3NcbiAgICAgICAgICAgIC8vICAgICAvLyBBZHZhbmNlZE1vdmllQ2xpcC5kZXN0cm95KCkgZG9lc24ndCBwcm92aWRlIGRlc3Ryb3kgcGFyYW1ldGVycy5cbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3JlYXRvcktleTogXCJwYXJ0aWNsZXNcIixcbiAgICAgICAgICAgICAgICBjcmVhdG9yRnVuYzogdGhpcy5kZWZhdWx0VHJlZUNyZWF0b3IoUGFydGljbGVzVmlldykuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcInNwaW5lXCIsXG4gICAgICAgICAgICAgICAgY3JlYXRvckZ1bmM6IHRoaXMuZGVmYXVsdFRyZWVDcmVhdG9yKFNwaW5lVmlldykuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcInRpbGVTcHJpdGVcIixcbiAgICAgICAgICAgICAgICBjcmVhdG9yRnVuYzogdGhpcy5kZWZhdWx0VHJlZUNyZWF0b3IoVGlsZVNwcml0ZVZpZXcpLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3JlYXRvcktleTogXCJzY3JlZW5zaG90XCIsXG4gICAgICAgICAgICAgICAgY3JlYXRvckZ1bmM6IHRoaXMuZGVmYXVsdFRyZWVDcmVhdG9yKFNjcmVlbnNob3RWaWV3KS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLl9jcmVhdGVCaXRtYXBUZXh0KCkuYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgIC8vIENhbid0IGhhdmUgY2hpbGQgb2JqZWN0cywgYWxsIGRlc3Ryb3koKSBvcHRpb25zIGFyZSBzZXQgdG8gdHJ1ZSB0byBmaXggYSBtZW1vcnlcbiAgICAgICAgICAgICAgICAvLyBsZWFrLCBhbmQgdGhlc2Ugb3B0aW9ucyBhcmUgbm90IGFwcHJvcHJpYXRlIGZvciBhbGwgY2hpbGQgb2JqZWN0IHR5cGVzLlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgIC8vICAgICBjcmVhdG9yS2V5OiBcImVkaXRUZXh0XCIsXG4gICAgICAgICAgICAvLyAgICAgY3JlYXRvckZ1bmM6IHRoaXMuZGVmYXVsdFRyZWVDcmVhdG9yKEVkaXRUZXh0VmlldykuYmluZCh0aGlzKVxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLmRlZmF1bHRUcmVlQ3JlYXRvcihCdXR0b25WaWV3KS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwic2xpY2VCdXR0b25cIixcbiAgICAgICAgICAgICAgICBjcmVhdG9yRnVuYzogdGhpcy5fY3JlYXRlU2xpY2VCdXR0b24oKS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwiZ3JhcGhpY3NcIixcbiAgICAgICAgICAgICAgICBjcmVhdG9yRnVuYzogdGhpcy5kZWZhdWx0VHJlZUNyZWF0b3IoR3JhcGhpY3NWaWV3KS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwicHJpbWl0aXZlXCIsXG4gICAgICAgICAgICAgICAgY3JlYXRvckZ1bmM6IHRoaXMuZGVmYXVsdFRyZWVDcmVhdG9yKFByaW1pdGl2ZVZpZXcpLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3JlYXRvcktleTogXCJjaXJjbGVcIixcbiAgICAgICAgICAgICAgICBjcmVhdG9yRnVuYzogdGhpcy5kZWZhdWx0VHJlZUNyZWF0b3IoQ2lyY2xlVmlldykuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcInJlY3RhbmdsZVwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLmRlZmF1bHRUcmVlQ3JlYXRvcihSZWN0YW5nbGVWaWV3KS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwibGluZVwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLmRlZmF1bHRUcmVlQ3JlYXRvcihMaW5lVmlldykuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcImN1cnZlXCIsXG4gICAgICAgICAgICAgICAgY3JlYXRvckZ1bmM6IHRoaXMuZGVmYXVsdFRyZWVDcmVhdG9yKEN1cnZlVmlldykuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcImJpbmFyeVNwcml0ZVwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLmRlZmF1bHRUcmVlQ3JlYXRvcihCaW5hcnlTcHJpdGVWaWV3KS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwiZHVhbFNwcml0ZVwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLmRlZmF1bHRUcmVlQ3JlYXRvcihEdWFsU3ByaXRlVmlldykuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcInBpZVwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLmRlZmF1bHRUcmVlQ3JlYXRvcihQaWVWaWV3KS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwia2V5Ym9hcmRLZXlcIixcbiAgICAgICAgICAgICAgICBjcmVhdG9yRnVuYzogdGhpcy5kZWZhdWx0VHJlZUNyZWF0b3IoS2V5Ym9hcmRLZXlWaWV3KS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwiY2lyY2xlTWFza1wiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLl9jaXJjbGVNYXNrVmlld0NyZWF0b3IuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcInBvbHlnb25NYXNrXCIsXG4gICAgICAgICAgICAgICAgY3JlYXRvckZ1bmM6IHRoaXMuX3BvbHlnb25NYXNrVmlld0NyZWF0b3IuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjcmVhdG9yS2V5OiBcInBvbHlnb25Db2xsaWRlclwiLFxuICAgICAgICAgICAgICAgIGNyZWF0b3JGdW5jOiB0aGlzLl9wb2x5Z29uVmlld0NyZWF0b3IoKS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwiY2lyY2xlQ29sbGlkZXJcIixcbiAgICAgICAgICAgICAgICBjcmVhdG9yRnVuYzogdGhpcy5fY2lyY2xlVmlld0NyZWF0b3IoKS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwiYm94Q29sbGlkZXJcIixcbiAgICAgICAgICAgICAgICBjcmVhdG9yRnVuYzogdGhpcy5fYm94Vmlld0NyZWF0b3IoKS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNyZWF0b3JLZXk6IFwicHJlZmFiXCIsXG4gICAgICAgICAgICAgICAgY3JlYXRvckZ1bmM6IHRoaXMuX3ByZWZhYlZpZXdDcmVhdG9yLmJpbmQodGhpcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG4gICAgfTtcbiAgICB2YXIgcyA9IEJhc2VGYWN0b3J5LnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChWaWV3RmFjdG9yeSwgQmFzZUZhY3RvcnkpO1xuXG4gICAgLy8gQ3JlYXRlIGEgdmlldyBvYmplY3QgZnJvbSB0aGUgc3BlY2lmaWVkIGNvbmZpZy5cbiAgICBwLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBudWxsO1xuXG4gICAgICAgIGlmIChjb25maWcgJiYgaXNPYmplY3QoY29uZmlnKSAmJiBjb25maWcudHlwZSkge1xuICAgICAgICAgICAgdmFyIHZpZXdDcmVhdG9yRnVuYyA9IHRoaXMuX2NyZWF0b3JzW2NvbmZpZy50eXBlXTtcbiAgICAgICAgICAgIGlmICh2aWV3Q3JlYXRvckZ1bmMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnZpZXdDb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJWaWV3RmFjdG9yeTogJ3ZpZXdDb25maWcnIHByb3BlcnR5IG9mIGNvbmZpZyBpcyBkZXByZWNhdGVkIChqdXN0IHJlbW92ZSBpdCkuXCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmlldyA9IHZpZXdDcmVhdG9yRnVuYyhjb25maWcsIHRoaXMuY3JlYXRlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZG8gcG9zdC1jcmVhdGlvbiBpbml0aWFsaXNhdGlvbiBmb3IgYWxsIHZpZXdzLlxuICAgICAgICBpZiAodmlldyAmJiBpc0Z1bmN0aW9uKHZpZXcucG9zdEluaXQpKSB7XG4gICAgICAgICAgICB2aWV3LnBvc3RJbml0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9O1xuXG4gICAgLy8gQ2FsbHMgY3JlYXRlKCkgb24gZWFjaCB2YWxpZCBtZW1iZXIgb2YgYSBjb25maWcgb2JqZWN0LCBhbmQgb3B0aW9uYWxseSBhZGRzIHRoZW1cbiAgICAvLyBhcyBjaGlsZHJlbiB0byBhIHBhcmVudCBjb250YWluZXIuIENhbiBhbHNvIHNwZWNpZnkgd2hldGhlciB0byBza2lwIFwiaWdub3JlOiB0cnVlXCJcbiAgICAvLyBzdGF0ZW1lbnRzIHdoaWNoIGFwcGVhciBpbiB0aGUgY2hpbGQgY29uZmlncy5cbiAgICBwLmNyZWF0ZUNoaWxkcmVuID0gZnVuY3Rpb24gKGNvbmZpZywgcGFyZW50LCBza2lwSWdub3Jlcykge1xuICAgICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNoaWxkcmVuID0gT2JqZWN0LnZhbHVlcyhjb25maWcpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh2aWV3Q29uZmlnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2aWV3Q29uZmlnICYmIChza2lwSWdub3JlcyB8fCAhdmlld0NvbmZpZy5pZ25vcmUpKTtcbiAgICAgICAgICAgIH0sIHRoaXMpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh2aWV3Q29uZmlnKSB7IHJldHVybiB0aGlzLmNyZWF0ZSh2aWV3Q29uZmlnKTsgfSwgdGhpcylcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHZpZXcpIHsgcmV0dXJuICEhdmlldzsgfSk7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkLmFwcGx5KHBhcmVudCwgY2hpbGRyZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH07XG5cbiAgICBwLmNyZWF0ZVZpZXdGcm9tQ29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZywgcmVzcGVjdElnbm9yZXMpIHtcbiAgICAgICAgdGhyb3cgXCJWaWV3RmFjdG9yeTogY3JlYXRlVmlld0Zyb21Db25maWcoKSBpcyBkZXByZWNhdGVkLiBVc2UgY3JlYXRlKCkgaW5zdGVhZC5cIjtcbiAgICB9O1xuXG4gICAgcC50cmF2ZXJzZUNoaWxkcmVuID0gZnVuY3Rpb24gKHZpZXcsIHZpZXdDb25maWcsIGNhbGxpbmdGdW5jLCByZXNwZWN0SWdub3Jlcykge1xuICAgICAgICBpZiAoIXZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2aWV3Q29uZmlnICYmIHZpZXdDb25maWcuY2hpbGRyZW4gJiYgdmlld0NvbmZpZy5jaGlsZHJlbi5sZW5ndGggJiYgdmlld0NvbmZpZy5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2aWV3Q29uZmlnLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkVmlldyA9IGNhbGxpbmdGdW5jKGNoaWxkQ29uZmlnLCByZXNwZWN0SWdub3Jlcyk7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkVmlldykge1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmFkZENoaWxkKGNoaWxkVmlldyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5kZWZhdWx0VHJlZUNyZWF0b3IgPSBmdW5jdGlvbiAoVmlld1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2aWV3Q29uZmlnLCBjYWxsaW5nRnVuYywgcmVzcGVjdElnbm9yZXMpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IFZpZXdUeXBlKHZpZXdDb25maWcpO1xuICAgICAgICAgICAgdGhpcy50cmF2ZXJzZUNoaWxkcmVuKHZpZXcsIHZpZXdDb25maWcsIGNhbGxpbmdGdW5jLCByZXNwZWN0SWdub3Jlcyk7XG4gICAgICAgICAgICByZXR1cm4gdmlldztcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgcC5fY2lyY2xlTWFza1ZpZXdDcmVhdG9yID0gZnVuY3Rpb24gKHZpZXdDb25maWcsIGNhbGxpbmdGdW5jKSB7XG4gICAgICAgIGlmICghdmlld0NvbmZpZykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgUElYSUdyYXBoaWNzKCkuYmVnaW5GaWxsKDAsIDEpLmRyYXdDaXJjbGUodmlld0NvbmZpZy54LCB2aWV3Q29uZmlnLnksIHZpZXdDb25maWcucmFkaXVzKTtcbiAgICAgICAgdmlldy5uYW1lID0gdmlld0NvbmZpZy5uYW1lIHx8IFwiXCI7XG5cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfTtcblxuICAgIHAuX3BvbHlnb25NYXNrVmlld0NyZWF0b3IgPSBmdW5jdGlvbiAodmlld0NvbmZpZywgY2FsbGluZ0Z1bmMpIHtcbiAgICAgICAgaWYgKCF2aWV3Q29uZmlnIHx8ICF2aWV3Q29uZmlnLnBvaW50TnVtYmVyTGlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgUElYSUdyYXBoaWNzKCkuYmVnaW5GaWxsKDAsIDEpLmRyYXdQb2x5Z29uKHZpZXdDb25maWcucG9pbnROdW1iZXJMaXN0KTtcbiAgICAgICAgdmlldy5uYW1lID0gdmlld0NvbmZpZy5uYW1lIHx8IFwiXCI7XG5cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfTtcblxuICAgIHAuX3BvbHlnb25WaWV3Q3JlYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2aWV3Q29uZmlnLCBjYWxsaW5nRnVuYywgcmVzcGVjdElnbm9yZXMpIHtcbiAgICAgICAgICAgIGlmICghdmlld0NvbmZpZyB8fCAhdmlld0NvbmZpZy5wb2ludHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwb2ludHMgPSB2aWV3Q29uZmlnLnBvaW50cy5tYXAocHQgPT4gbmV3IFBJWEkuUG9pbnQocHQueCwgcHQueSAqIC0xKSk7XG4gICAgICAgICAgICBsZXQgcG9seWdvbiA9IG5ldyBQSVhJLlBvbHlnb24ocG9pbnRzKTtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IEdyYXBoaWNzVmlldyh2aWV3Q29uZmlnKS5iZWdpbkZpbGwoMHhmZjAwMDAsIDAuMykuZHJhd1BvbHlnb24ocG9seWdvbikuZW5kRmlsbCgpO1xuICAgICAgICAgICAgdmlldy5oaXRBcmVhID0gcG9seWdvbjtcbiAgICAgICAgICAgIHZpZXcubmFtZSA9IHZpZXdDb25maWcubmFtZSB8fCBcIlwiO1xuICAgICAgICAgICAgdmlldy5hbHBoYSA9IDAuMDtcbiAgICAgICAgICAgIHRoaXMudHJhdmVyc2VDaGlsZHJlbih2aWV3LCB2aWV3Q29uZmlnLCBjYWxsaW5nRnVuYywgcmVzcGVjdElnbm9yZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fYm94Vmlld0NyZWF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmlld0NvbmZpZywgY2FsbGluZ0Z1bmMsIHJlc3BlY3RJZ25vcmVzKSB7XG4gICAgICAgICAgICBpZiAoIXZpZXdDb25maWcgfHwgIXZpZXdDb25maWcuc2l6ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJvdW5kcyA9IG5ldyBQSVhJLlJlY3RhbmdsZSgwLCAwLCB2aWV3Q29uZmlnLnNpemUud2lkdGgsIHZpZXdDb25maWcuc2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgR3JhcGhpY3NWaWV3KHZpZXdDb25maWcpLmJlZ2luRmlsbCgweGZmMDAwMCwgMC4zKS5kcmF3UmVjdChib3VuZHMueCxib3VuZHMueSwgYm91bmRzLndpZHRoLCBib3VuZHMuaGVpZ2h0KS5lbmRGaWxsKCk7XG4gICAgICAgICAgICB2aWV3LmhpdEFyZWEgPSBib3VuZHM7XG4gICAgICAgICAgICB2aWV3LmFscGhhID0gMC4wO1xuICAgICAgICAgICAgdmlldy5uYW1lID0gdmlld0NvbmZpZy5uYW1lIHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlQ2hpbGRyZW4odmlldywgdmlld0NvbmZpZywgY2FsbGluZ0Z1bmMsIHJlc3BlY3RJZ25vcmVzKTtcbiAgICAgICAgICAgIHJldHVybiB2aWV3O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX2NpcmNsZVZpZXdDcmVhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZpZXdDb25maWcsIGNhbGxpbmdGdW5jLCByZXNwZWN0SWdub3Jlcykge1xuICAgICAgICAgICAgaWYgKCF2aWV3Q29uZmlnIHx8ICF2aWV3Q29uZmlnLnJhZGl1cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgR3JhcGhpY3NWaWV3KHZpZXdDb25maWcpLmJlZ2luRmlsbCgweGZmMDAwMCwgMC4zKS5kcmF3Q2lyY2xlKHZpZXdDb25maWcucG9zaXRpb24ueCwgdmlld0NvbmZpZy5wb3NpdGlvbi55LCB2aWV3Q29uZmlnLnJhZGl1cykuZW5kRmlsbCgpO1xuICAgICAgICAgICAgdmlldy5oaXRBcmVhID0gbmV3IFBJWEkuQ2lyY2xlKHZpZXdDb25maWcucG9zaXRpb24ueCwgdmlld0NvbmZpZy5wb3NpdGlvbi55LCB2aWV3Q29uZmlnLnJhZGl1cyk7XG4gICAgICAgICAgICB2aWV3Lm5hbWUgPSB2aWV3Q29uZmlnLm5hbWUgfHwgXCJcIjtcbiAgICAgICAgICAgIHZpZXcuYWxwaGEgPSAwLjA7XG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlQ2hpbGRyZW4odmlldywgdmlld0NvbmZpZywgY2FsbGluZ0Z1bmMsIHJlc3BlY3RJZ25vcmVzKTtcbiAgICAgICAgICAgIHJldHVybiB2aWV3O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX2NyZWF0ZUJpdG1hcFRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmlld0NvbmZpZywgY2FsbGluZ0Z1bmMsIHJlc3BlY3RJZ25vcmVzKSB7XG4gICAgICAgICAgICBpZiAoIXZpZXdDb25maWcgfHwgIXZpZXdDb25maWcucG9zaXRpb24gfHwgIXZpZXdDb25maWcuYW5jaG9yIHx8IHZpZXdDb25maWcudGV4dCA9PSBudWxsIHx8ICF2aWV3Q29uZmlnLmZvbnROYW1lIHx8ICF2aWV3Q29uZmlnLmZvbnRTaXplKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInJlcXVpcmVzOiB2aWV3Q29uZmlnLnBvc2l0aW9uLCB2aWV3Q29uZmlnLmFuY2hvciwgdmlld0NvbmZpZy50ZXh0LCB2aWV3Q29uZmlnLmZvbnROYW1lLCB2aWV3Q29uZmlnLmZvbnRTaXplXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZvbnQgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogdmlld0NvbmZpZy5mb250TmFtZSxcbiAgICAgICAgICAgICAgICBzaXplOiB2aWV3Q29uZmlnLmZvbnRTaXplXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGV0IGFsaWduID0gKHZpZXdDb25maWcuYWxpZ24pID8gdmlld0NvbmZpZy5hbGlnbiA6IFwibGVmdFwiO1xuICAgICAgICAgICAgbGV0IHRpbnQgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcigodmlld0NvbmZpZy50aW50KSA/IHZpZXdDb25maWcudGludCA6IFwiI0ZGRkZGRlwiKTtcbiAgICAgICAgICAgIHZpZXdDb25maWdbJ2ZvbnQnXSA9IHsgZm9udDogZm9udCwgYWxpZ246IGFsaWduLCB0aW50OiB0aW50IH07XG5cbiAgICAgICAgICAgIGxldCBiaXRtYXBUZXh0ID0gbmV3IEJpdG1hcFRleHRWaWV3KHZpZXdDb25maWcpO1xuXG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlQ2hpbGRyZW4oYml0bWFwVGV4dCwgdmlld0NvbmZpZywgY2FsbGluZ0Z1bmMsIHJlc3BlY3RJZ25vcmVzKTtcbiAgICAgICAgICAgIHJldHVybiBiaXRtYXBUZXh0O1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBwLl9jcmVhdGVTbGljZUJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZpZXdDb25maWcsIGNhbGxpbmdGdW5jLCByZXNwZWN0SWdub3Jlcykge1xuICAgICAgICAgICAgaWYgKCF2aWV3Q29uZmlnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInJlcXVpcmVzOiB2aWV3Q29uZmlnLmxlZnRXaWR0aCwgdmlld0NvbmZpZy50b3BIZWlnaHQsIHZpZXdDb25maWcucmlnaHRXaWR0aCwgdmlld0NvbmZpZy5ib3R0b21IZWlnaHQsIHZpZXdDb25maWcuaW1hZ2VGcmFtZU5hbWVzXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IFNsaWNlQnV0dG9uVmlldyh7XG4gICAgICAgICAgICAgICAgdGV4dHVyZU5hbWU6IHZpZXdDb25maWcuaW1hZ2VGcmFtZU5hbWVzLnVwLFxuICAgICAgICAgICAgICAgIGluc2V0TGVmdDogdmlld0NvbmZpZy5pbnNldExlZnQsXG4gICAgICAgICAgICAgICAgaW5zZXRUb3A6IHZpZXdDb25maWcuaW5zZXRUb3AsXG4gICAgICAgICAgICAgICAgaW5zZXRSaWdodDogdmlld0NvbmZpZy5pbnNldFJpZ2h0LFxuICAgICAgICAgICAgICAgIGluc2V0Qm90dG9tOiB2aWV3Q29uZmlnLmluc2V0Qm90dG9tLFxuICAgICAgICAgICAgICAgIGltYWdlRnJhbWVOYW1lczogdmlld0NvbmZpZy5pbWFnZUZyYW1lTmFtZXMsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkNvbG9yVGludHM6IHZpZXdDb25maWcudHJhbnNpdGlvbkNvbG9yVGludHMsXG4gICAgICAgICAgICAgICAgYW5jaG9yOiB2aWV3Q29uZmlnLmFuY2hvcixcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogdmlld0NvbmZpZy5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICB3aWR0aDogdmlld0NvbmZpZy53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHZpZXdDb25maWcuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIG5hbWU6IHZpZXdDb25maWcubmFtZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMudHJhdmVyc2VDaGlsZHJlbihidXR0b24sIHZpZXdDb25maWcsIGNhbGxpbmdGdW5jLCByZXNwZWN0SWdub3Jlcyk7XG4gICAgICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBwLl9jcmVhdGVTbGljZVNwcml0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2aWV3Q29uZmlnLCBjYWxsaW5nRnVuYywgcmVzcGVjdElnbm9yZXMpIHtcbiAgICAgICAgICAgIGlmICghdmlld0NvbmZpZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJyZXF1aXJlczogdmlld0NvbmZpZy5sZWZ0V2lkdGgsIHZpZXdDb25maWcudG9wSGVpZ2h0LCB2aWV3Q29uZmlnLnJpZ2h0V2lkdGgsIHZpZXdDb25maWcuYm90dG9tSGVpZ2h0LCB2aWV3Q29uZmlnLmltYWdlRnJhbWVOYW1lc1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IG5ldyBTbGljZVNwcml0ZVZpZXcoe1xuICAgICAgICAgICAgICAgIHRleHR1cmVOYW1lOiB2aWV3Q29uZmlnLnRleHR1cmVOYW1lLFxuICAgICAgICAgICAgICAgIGluc2V0TGVmdDogdmlld0NvbmZpZy5pbnNldExlZnQsXG4gICAgICAgICAgICAgICAgaW5zZXRUb3A6IHZpZXdDb25maWcuaW5zZXRUb3AsXG4gICAgICAgICAgICAgICAgaW5zZXRSaWdodDogdmlld0NvbmZpZy5pbnNldFJpZ2h0LFxuICAgICAgICAgICAgICAgIGluc2V0Qm90dG9tOiB2aWV3Q29uZmlnLmluc2V0Qm90dG9tLFxuICAgICAgICAgICAgICAgIGltYWdlRnJhbWVOYW1lczogdmlld0NvbmZpZy5pbWFnZUZyYW1lTmFtZXMsXG4gICAgICAgICAgICAgICAgYW5jaG9yOiB2aWV3Q29uZmlnLmFuY2hvcixcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogdmlld0NvbmZpZy5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICB3aWR0aDogdmlld0NvbmZpZy53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHZpZXdDb25maWcuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIG5hbWU6IHZpZXdDb25maWcubmFtZSxcbiAgICAgICAgICAgICAgICB0aW50OiB2aWV3Q29uZmlnLmNvbG91clRpbnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlQ2hpbGRyZW4oc3ByaXRlLCB2aWV3Q29uZmlnLCBjYWxsaW5nRnVuYywgcmVzcGVjdElnbm9yZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHNwcml0ZTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgVmlld0ZhY3Rvcnkudmlld0NvbmZpZ1N1ZmZpeCA9ICdWaWV3Q29uZmlnJztcblxuICAgIHAuX3ByZWZhYlZpZXdDcmVhdG9yID0gZnVuY3Rpb24gKGNvbmZpZywgY2FsbGluZ0Z1bmMpIHtcbiAgICAgICAgdmFyIGlkID0gY29uZmlnLm5hbWUgKyBWaWV3RmFjdG9yeS52aWV3Q29uZmlnU3VmZml4O1xuICAgICAgICB2YXIgdmlld0NvbmZpZ0RhdGEgPSB0aGlzLmxvYWRlci5yZXNvdXJjZXNbaWRdLmRhdGE7XG4gICAgICAgIHZhciB2aWV3Q29uZmlnID0gdmlld0NvbmZpZ0RhdGFbY29uZmlnLm5hbWVdO1xuXG4gICAgICAgIHZhciBwcmVmYWJWaWV3ID0gdGhpcy5jcmVhdGUodmlld0NvbmZpZyk7XG4gICAgICAgIHJldHVybiBwcmVmYWJWaWV3O1xuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuVmlld0ZhY3RvcnkgPSBWaWV3RmFjdG9yeTtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgU2NyaXB0ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgdGhpcy5faXNBY3RpdmUgPSBmaW5hbENvbmZpZy5pc0FjdGl2ZTtcbiAgICAgICAgdGhpcy5faXNJbml0aWFsaXNlZCA9IGZhbHNlO1xuICAgIH07XG5cdHZhciBwID0gU2NyaXB0LnByb3RvdHlwZTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImlzQWN0aXZlXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaXNBY3RpdmUpIHsgdGhpcy5faXNBY3RpdmUgPSBpc0FjdGl2ZTsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9pc0FjdGl2ZTsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImlzSW5pdGlhbGlzZWRcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc0luaXRpYWxpc2VkKSB7IHRoaXMuX2lzSW5pdGlhbGlzZWQgPSBpc0luaXRpYWxpc2VkOyB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2lzSW5pdGlhbGlzZWQ7IH1cbiAgICB9KTtcblxuICAgIC8vIENoaWxkIGNsYXNzZXMgd2hpY2ggb3ZlcnJpZGUgdGhpcyBtdXN0IGNhbGwgYmFzZSBjbGFzcyBtZXRob2QgKHMuaW5pdC5jYWxsKHRoaXMpKS5cbiAgICBwLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICAvLyBDaGlsZCBjbGFzc2VzIHdoaWNoIG92ZXJyaWRlIHRoaXMgbXVzdCBjYWxsIGJhc2UgY2xhc3MgbWV0aG9kIChzLmRlaW5pdC5jYWxsKHRoaXMpKS5cbiAgICBwLmRlaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5faXNJbml0aWFsaXNlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBwLnVwZGF0ZSA9IGZ1bmN0aW9uIChmcmFtZVRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVJbXBsKGZyYW1lVGltZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fdXBkYXRlSW1wbCA9IGZ1bmN0aW9uIChmcmFtZVRpbWUpIHt9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlNjcmlwdCA9IFNjcmlwdDtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBTY3JpcHQgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLlNjcmlwdFwiKTtcblxuICAgIC8vIFNjcmlwdCB3aGljaCBob2xkcyBhbmQgb3BlcmF0ZXMgb24gY2hpbGQgc2NyaXB0cyBhcyB3ZWxsIGFzIGl0c2VsZi5cblx0dmFyIENvbXBvc2l0ZVNjcmlwdCA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBjb25maWcuXG4gICAgICAgIHZhciBmaW5hbENvbmZpZyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAgc2NyaXB0czogW10sXG4gICAgICAgICAgICBza2lwSW5pdFNjcmlwdHM6IGZhbHNlLCAgLy8gV2hldGhlciB0byBza2lwIGluaXRpYWxpc2F0aW9uIG9mIGFueSBzY3JpcHRzIHBhc3NlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIHRoZSAnc2NyaXB0cycgYXJyYXkuXG4gICAgICAgICAgICBpbml0aWFsbHlJc1JlY3Vyc2l2ZTogdHJ1ZSAgLy8gVHJ1ZSBpZiBpbml0aWFsIGVuYWJsZSgpIGNhbGwgc2hvdWxkIHJlY3Vyc2UgY2hpbGRyZW4uXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBTY3JpcHQuY2FsbCh0aGlzLCBmaW5hbENvbmZpZyk7XG5cbiAgICAgICAgdGhpcy5fc2NyaXB0cyA9IFtdO1xuICAgICAgICB0aGlzLmFkZFNjcmlwdHMoZmluYWxDb25maWcuc2NyaXB0cy5zbGljZSgpLCBmaW5hbENvbmZpZy5za2lwSW5pdFNjcmlwdHMpO1xuXG4gICAgICAgIC8vIEVuYWJsZSAvIGRpc2FibGUgY2hpbGQgc2NyaXB0cy5cbiAgICAgICAgdGhpcy5lbmFibGUodGhpcy5faXNBY3RpdmUsIGZpbmFsQ29uZmlnLmluaXRpYWxseUlzUmVjdXJzaXZlKTtcbiAgICB9O1xuXHR2YXIgcyA9IFNjcmlwdC5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoQ29tcG9zaXRlU2NyaXB0LCBTY3JpcHQpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiaXNBY3RpdmVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc0FjdGl2ZSkgeyB0aGlzLmVuYWJsZShpc0FjdGl2ZSwgdHJ1ZSwgdHJ1ZSk7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faXNBY3RpdmU7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJzY3JpcHRzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zY3JpcHRzOyB9XG4gICAgfSk7XG5cbiAgICBwLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHMuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3NjcmlwdHMuZm9yRWFjaChmdW5jdGlvbiAoc2NyaXB0KSB7XG4gICAgICAgICAgICBpZiAoc2NyaXB0ICYmICFzY3JpcHQuaXNJbml0aWFsaXNlZCkge1xuICAgICAgICAgICAgICAgIHNjcmlwdC5pbml0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH07XG5cbiAgICBwLmRlaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVTY3JpcHRzKCk7XG5cbiAgICAgICAgcy5kZWluaXQuY2FsbCh0aGlzKTtcbiAgICB9O1xuXG4gICAgcC51cGRhdGUgPSBmdW5jdGlvbiAoZnJhbWVUaW1lKSB7XG4gICAgICAgIHMudXBkYXRlLmNhbGwodGhpcywgZnJhbWVUaW1lKTtcblxuICAgICAgICBpZiAodGhpcy5faXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NjcmlwdHMuZm9yRWFjaChmdW5jdGlvbiAoc2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjcmlwdCkge1xuICAgICAgICAgICAgICAgICAgICBzY3JpcHQudXBkYXRlKGZyYW1lVGltZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5lbmFibGUgPSBmdW5jdGlvbiAoaXNBY3RpdmUsIGlzUmVjdXJzaXZlLCBpbmNsdWRlU2VsZikge1xuICAgICAgICBpZiAoaXNBY3RpdmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaXNBY3RpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlY3Vyc2l2ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpc1JlY3Vyc2l2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2x1ZGVTZWxmID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGVTZWxmID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGlzIHNjcmlwdCBhcyBhY3RpdmUgaWYgc3BlY2lmaWVkLlxuICAgICAgICBpZiAoaW5jbHVkZVNlbGYpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzQWN0aXZlID0gaXNBY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zY3JpcHRzLmZvckVhY2goZnVuY3Rpb24gKHNjcmlwdCkge1xuICAgICAgICAgICAgaWYgKHNjcmlwdCkge1xuICAgICAgICAgICAgICAgIC8vIFNldCBlYWNoIGNoaWxkIHNjcmlwdCBhcyBhY3RpdmUuXG4gICAgICAgICAgICAgICAgc2NyaXB0LmlzQWN0aXZlID0gaXNBY3RpdmU7XG5cbiAgICAgICAgICAgICAgICAvLyBUcmF2ZXJzZSB0aGUgY2hpbGQncyBjaGlsZHJlbiByZWN1cnNpdmVseSBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVjdXJzaXZlICYmIGlzRnVuY3Rpb24oc2NyaXB0LmVuYWJsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0LmVuYWJsZShpc0FjdGl2ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBhbmQgaW5pdGlhbGlzZSBvbmUgb3IgbW9yZSBzY3JpcHRzIChjYW4gb3B0aW9uYWxseSBza2lwIHRoZSBpbml0KCkgY2FsbFxuICAgIC8vIGluIGZhdm91ciBvZiBjYWxsaW5nIGl0IG1hbnVhbGx5KS5cbiAgICBwLmFkZFNjcmlwdCA9IGZ1bmN0aW9uIChzY3JpcHQsIHNraXBJbml0KSB7XG4gICAgICAgIHRoaXMuYWRkU2NyaXB0cyhzY3JpcHQsIHNraXBJbml0KTtcbiAgICB9O1xuXG4gICAgcC5hZGRTY3JpcHRzID0gZnVuY3Rpb24gKHNjcmlwdHMsIHNraXBJbml0KSB7XG4gICAgICAgIGFycmF5aWZ5KHNjcmlwdHMpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzY3JpcHQpIHsgcmV0dXJuICEhc2NyaXB0OyB9LCB0aGlzKVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHNjcmlwdCkge1xuICAgICAgICAgICAgICAgIGlmICghc2tpcEluaXQgJiYgIXNjcmlwdC5pc0luaXRpYWxpc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdC5pbml0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zY3JpcHRzLmNvbnRhaW5zKHNjcmlwdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2NyaXB0cy5wdXNoKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgfTtcblxuICAgIC8vIERlaW5pdGlhbGlzZSBhbmQgcmVtb3ZlIG9uZSBvciBtb3JlIHNjcmlwdHMgKGNhbiBvcHRpb25hbGx5IHNraXAgdGhlIGRlaW5pdCgpXG4gICAgLy8gY2FsbCBpbiBmYXZvdXIgb2YgY2FsbGluZyBpdCBtYW51YWxseSkuIElmIG5vIHNjcmlwdCBpcyBwcm92aWRlZCwgYWxsIGFyZSByZW1vdmVkLlxuICAgIHAucmVtb3ZlU2NyaXB0ID0gZnVuY3Rpb24gKHNjcmlwdCwgc2tpcERlaW5pdCkge1xuICAgICAgICB0aGlzLnJlbW92ZVNjcmlwdHMoc2NyaXB0LCBza2lwRGVpbml0KTtcbiAgICB9O1xuXG4gICAgcC5yZW1vdmVTY3JpcHRzID0gZnVuY3Rpb24gKHNjcmlwdHMsIHNraXBEZWluaXQpIHtcbiAgICAgICAgdmFyIHNjcmlwdHNUb1JlbW92ZSA9IChzY3JpcHRzKSA/IGFycmF5aWZ5KHNjcmlwdHMpIDogdGhpcy5fc2NyaXB0cztcblxuICAgICAgICB0aGlzLl9zY3JpcHRzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzY3JpcHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNjcmlwdHNUb1JlbW92ZS5jb250YWlucyhzY3JpcHQpKTtcbiAgICAgICAgICAgIH0sIHRoaXMpXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFza2lwRGVpbml0ICYmIHNjcmlwdC5pc0luaXRpYWxpc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdC5kZWluaXQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JpcHRzLnJlbW92ZShzY3JpcHQpO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgfTtcblxuICAgIC8vIERlYnVnIG1vZGUgb25seSB2ZXJzaW9ucyBvZiBhZGQgLyByZW1vdmUgc2NyaXB0IG1ldGhvZHMuXG4gICAgcC5hZGREZWJ1Z1NjcmlwdCA9IGZ1bmN0aW9uIChzY3JpcHQsIHNraXBJbml0KSB7XG4gICAgICAgIHRoaXMuYWRkRGVidWdTY3JpcHRzKHNjcmlwdCwgc2tpcEluaXQpO1xuICAgIH07XG5cbiAgICBwLmFkZERlYnVnU2NyaXB0cyA9IGZ1bmN0aW9uIChzY3JpcHRzLCBza2lwSW5pdCkge1xuICAgICAgICBpZiAoYXBwLmlzRGVidWdNb2RlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkU2NyaXB0cyhzY3JpcHRzLCBza2lwSW5pdCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5yZW1vdmVEZWJ1Z1NjcmlwdCA9IGZ1bmN0aW9uIChzY3JpcHQsIHNraXBEZWluaXQpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVEZWJ1Z1NjcmlwdHMoc2NyaXB0LCBza2lwRGVpbml0KTtcbiAgICB9O1xuXG4gICAgcC5yZW1vdmVEZWJ1Z1NjcmlwdHMgPSBmdW5jdGlvbiAoc2NyaXB0cywgc2tpcERlaW5pdCkge1xuICAgICAgICBpZiAoYXBwLmlzRGVidWdNb2RlKCkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlU2NyaXB0cyhzY3JpcHRzLCBza2lwRGVpbml0KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuQ29tcG9zaXRlU2NyaXB0ID0gQ29tcG9zaXRlU2NyaXB0O1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG5cdHZhciBWaWV3VHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIGhlbHBlcjogbnVsbCwgIC8vIEdlbmVyaWMgaW50ZXJmYWNlIHdpdGggbWV0aG9kcyBmb3IgYXNzaXN0aW5nIGluIHRyYW5zZm9ybXMuXG4gICAgICAgICAgICB2aWV3OiBudWxsICAvLyBWaWV3IHRvIG9wZXJhdGUgb24uXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICB0aGlzLl9oZWxwZXIgPSBmaW5hbENvbmZpZy5oZWxwZXI7XG4gICAgICAgIHRoaXMuX3ZpZXcgPSBmaW5hbENvbmZpZy52aWV3O1xuICAgIH07XG4gICAgdmFyIHAgPSBWaWV3VHJhbnNmb3JtZXIucHJvdG90eXBlO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiaGVscGVyXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaGVscGVyKSB7IHRoaXMuX2hlbHBlciA9IGhlbHBlcjsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9oZWxwZXI7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJ2aWV3XCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmlldykgeyB0aGlzLl92aWV3ID0gdmlldzsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl92aWV3OyB9XG4gICAgfSk7XG5cbiAgICBwLmNhcHR1cmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIHAudXBkYXRlU3RhdGUgPSBmdW5jdGlvbiAoZnJhbWVUaW1lKSB7fTtcbiAgICBwLnJlc3RvcmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlZpZXdUcmFuc2Zvcm1lciA9IFZpZXdUcmFuc2Zvcm1lcjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgVmlld1RyYW5zZm9ybWVyID0gaW5jbHVkZShcImZyYW1ld29yay5WaWV3VHJhbnNmb3JtZXJcIik7XG4gICAgdmFyIFZlY3RvciA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuVmVjdG9yXCIpO1xuICAgIHZhciBNaW5NYXggPSBpbmNsdWRlKFwiZnJhbWV3b3JrLk1pbk1heFwiKTtcblxuICAgIC8vIENoYW5nZXMgYSB2aWV3J3MgcG9zaXRpb24gYmFzZWQgb24gcmVsYXRpdmUgY2xpY2sgLyBkcmFnIHBvc2l0aW9uLlxuXHR2YXIgUG9zaXRpb25WaWV3VHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIGNsYW1wWE1vdmVtZW50OiBmYWxzZSxcbiAgICAgICAgICAgIGNsYW1wWU1vdmVtZW50OiBmYWxzZSxcbiAgICAgICAgICAgIHhSYW5nZTogbnVsbCwgIC8vIFBhc3MgaW4gb3B0aW9uYWwgeyBtaW4sIG1heCB9IHN0cnVjdCB0byBjbGFtcCBYIHZhbHVlcy5cbiAgICAgICAgICAgIHlSYW5nZTogbnVsbCwgIC8vIFBhc3MgaW4gb3B0aW9uYWwgeyBtaW4sIG1heCB9IHN0cnVjdCB0byBjbGFtcCBZIHZhbHVlcy5cbiAgICAgICAgICAgIHJldHVyblRvT2xkUG9zT25Ecm9wOiBmYWxzZSwgIC8vIFdoZW4gZHJhZyBmaW5pc2hlZCwgcmV0dXJucyB2aWV3IHRvIGRyYWcgc3RhcnQgcG9zaXRpb24uXG4gICAgICAgICAgICBvblVwZGF0ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmlldywgZnJhbWVUaW1lKSB7fVxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgVmlld1RyYW5zZm9ybWVyLmNhbGwodGhpcywgZmluYWxDb25maWcpO1xuXG4gICAgICAgIHRoaXMuX3hNb3ZlbWVudFNjYWxlID0gKGZpbmFsQ29uZmlnLmNsYW1wWE1vdmVtZW50KSA/IDAuMCA6IDEuMDtcbiAgICAgICAgdGhpcy5feU1vdmVtZW50U2NhbGUgPSAoZmluYWxDb25maWcuY2xhbXBZTW92ZW1lbnQpID8gMC4wIDogMS4wO1xuICAgICAgICB0aGlzLl94UmFuZ2UgPSAoZmluYWxDb25maWcueFJhbmdlKSA/IE1pbk1heC5mcm9tKGZpbmFsQ29uZmlnLnhSYW5nZSkgOiBudWxsO1xuICAgICAgICB0aGlzLl95UmFuZ2UgPSAoZmluYWxDb25maWcueVJhbmdlKSA/IE1pbk1heC5mcm9tKGZpbmFsQ29uZmlnLnlSYW5nZSkgOiBudWxsO1xuICAgICAgICB0aGlzLl9yZXR1cm5Ub09sZFBvc09uRHJvcCA9IGZpbmFsQ29uZmlnLnJldHVyblRvT2xkUG9zT25Ecm9wO1xuICAgICAgICB0aGlzLl9vblVwZGF0ZUNhbGxiYWNrID0gZmluYWxDb25maWcub25VcGRhdGVDYWxsYmFjaztcbiAgICAgICAgdGhpcy5fdmlld09sZFBvc2l0aW9uID0gVmVjdG9yLmNyZWF0ZSgwLjAsIDAuMCk7XG4gICAgfTtcbiAgICB2YXIgcyA9IFZpZXdUcmFuc2Zvcm1lci5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoUG9zaXRpb25WaWV3VHJhbnNmb3JtZXIsIFZpZXdUcmFuc2Zvcm1lcik7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJ2aWV3SW5pdGlhbFBvc2l0aW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBWZWN0b3IuY2xvbmUodGhpcy5fdmlld09sZFBvc2l0aW9uKTsgfVxuICAgIH0pO1xuXG4gICAgcC5jYXB0dXJlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3ZpZXdPbGRQb3NpdGlvbiA9IFZlY3Rvci5jbG9uZSh0aGlzLl92aWV3LnBvc2l0aW9uKTtcbiAgICB9O1xuXG4gICAgcC51cGRhdGVTdGF0ZSA9IGZ1bmN0aW9uIChmcmFtZVRpbWUpIHtcbiAgICBcdC8vIENhbGN1bGF0ZSB0aGUgbmV3IHBvc2l0aW9uIChtb3VzZSBwb3NpdGlvbiB3aXRoIG9yaWdpbmFsIGNsaWNrIG9mZnNldCkuXG4gICAgICAgIHZhciBuZXdQb3NpdGlvbiA9IHRoaXMuX2hlbHBlci5nZXRMb2NhbE1vdXNlUG9zaXRpb24oKTtcbiAgICAgICAgbmV3UG9zaXRpb24gPSBWZWN0b3Iuc3ViKG5ld1Bvc2l0aW9uLCB0aGlzLl9oZWxwZXIubW91c2VPZmZzZXRWZWMpO1xuXG4gICAgICAgIC8vIEludGVncmF0ZSBYL1kgbW92ZW1lbnQgY2xhbXBpbmcuXG4gICAgICAgIHZhciBvbGRWaWV3UG9zaXRpb24gPSBWZWN0b3IuY2xvbmUodGhpcy5fdmlldy5wb3NpdGlvbik7XG4gICAgICAgIHRoaXMuX3ZpZXcucG9zaXRpb24ueCA9IE1hdGgubGVycChvbGRWaWV3UG9zaXRpb24ueCwgbmV3UG9zaXRpb24ueCwgdGhpcy5feE1vdmVtZW50U2NhbGUpO1xuICAgICAgICB0aGlzLl92aWV3LnBvc2l0aW9uLnkgPSBNYXRoLmxlcnAob2xkVmlld1Bvc2l0aW9uLnksIG5ld1Bvc2l0aW9uLnksIHRoaXMuX3lNb3ZlbWVudFNjYWxlKTtcblxuICAgICAgICAvLyBDbGFtcCBYIGFuZCBZIHJhbmdlcy5cbiAgICAgICAgaWYgKHRoaXMuX3hSYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5fdmlldy5wb3NpdGlvbi54ID0gdGhpcy5feFJhbmdlLmNsYW1wKHRoaXMuX3ZpZXcucG9zaXRpb24ueCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5feVJhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLl92aWV3LnBvc2l0aW9uLnkgPSB0aGlzLl95UmFuZ2UuY2xhbXAodGhpcy5fdmlldy5wb3NpdGlvbi55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9vblVwZGF0ZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9vblVwZGF0ZUNhbGxiYWNrKHRoaXMuX3ZpZXcsIGZyYW1lVGltZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5yZXN0b3JlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXR1cm5Ub09sZFBvc09uRHJvcCkge1xuICAgICAgICAgICAgdGhpcy5fdmlldy54ID0gdGhpcy5fdmlld09sZFBvc2l0aW9uLng7XG4gICAgICAgICAgICB0aGlzLl92aWV3LnkgPSB0aGlzLl92aWV3T2xkUG9zaXRpb24ueTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuUG9zaXRpb25WaWV3VHJhbnNmb3JtZXIgPSBQb3NpdGlvblZpZXdUcmFuc2Zvcm1lcjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXHR2YXIgVmlld1RyYW5zZm9ybWVyID0gaW5jbHVkZShcImZyYW1ld29yay5WaWV3VHJhbnNmb3JtZXJcIik7XG4gICAgdmFyIFZlY3RvciA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuVmVjdG9yXCIpO1xuXG4gICAgLy8gQ2hhbmdlcyBhIHZpZXcncyByb3RhdGlvbiBiYXNlZCBvbiByZWxhdGl2ZSBjbGljayAvIGRyYWcgcG9zaXRpb24uXG5cdHZhciBSb3RhdGlvblZpZXdUcmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBjb25maWcuXG4gICAgICAgIHZhciBmaW5hbENvbmZpZyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAgc3RlcDogMC4wLCAgLy8gTGltaXQgcm90YXRpb24gdG8gZXZlcnkgJ3N0ZXAnIG51bWJlciBvZiByYWRpYW5zLlxuICAgICAgICAgICAgYXBwbHlTdGVwT25FbmRPbmx5OiBmYWxzZSwgIC8vIElmIHRydWUsIHNraXBzIGFwcGx5aW5nIHN0ZXAgdW50aWwgcmVzdG9yZVN0YXRlKCkuXG4gICAgICAgICAgICBvblVwZGF0ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmlldywgZnJhbWVUaW1lKSB7fVxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgVmlld1RyYW5zZm9ybWVyLmNhbGwodGhpcywgZmluYWxDb25maWcpO1xuXG4gICAgICAgIHRoaXMuX29sZFJvdGF0aW9uID0gMC4wO1xuICAgICAgICB0aGlzLl9zdGVwID0gTWF0aC5hYnMoZmluYWxDb25maWcuc3RlcCk7XG4gICAgICAgIHRoaXMuX2FwcGx5U3RlcE9uRW5kT25seSA9IGZpbmFsQ29uZmlnLmFwcGx5U3RlcE9uRW5kT25seTtcbiAgICAgICAgdGhpcy5fb25VcGRhdGVDYWxsYmFjayA9IGZpbmFsQ29uZmlnLm9uVXBkYXRlQ2FsbGJhY2s7XG4gICAgfTtcbiAgICB2YXIgcyA9IFZpZXdUcmFuc2Zvcm1lci5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoUm90YXRpb25WaWV3VHJhbnNmb3JtZXIsIFZpZXdUcmFuc2Zvcm1lcik7XG5cbiAgICBwLmNhcHR1cmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fb2xkUm90YXRpb24gPSB0aGlzLl92aWV3LnJvdGF0aW9uO1xuICAgICAgICB0aGlzLl9zdGFydEFuZ2xlID0gVmVjdG9yLnRvQW5nbGUodGhpcy5faGVscGVyLm1vdXNlT2Zmc2V0VmVjKTtcbiAgICB9O1xuXG4gICAgcC51cGRhdGVTdGF0ZSA9IGZ1bmN0aW9uIChmcmFtZVRpbWUpIHtcbiAgICBcdC8vIEdldCB0aGUgY3VycmVudCBhbmdsZSBmcm9tIHZpZXcgdG8gY2xpY2sgLyB0b3VjaCBwb3NpdGlvbi5cbiAgICAgICAgdmFyIGN1cnJlbnRWaWV3UG9zaXRpb24gPSB0aGlzLl92aWV3LnBvc2l0aW9uO1xuICAgICAgICB2YXIgbW91c2VQb3NpdGlvbiA9IHRoaXMuX2hlbHBlci5nZXRMb2NhbE1vdXNlUG9zaXRpb24oKTtcbiAgICAgICAgdmFyIGNsaWNrRGlyZWN0aW9uVmVjID0gVmVjdG9yLnN1Yihtb3VzZVBvc2l0aW9uLCBjdXJyZW50Vmlld1Bvc2l0aW9uKTtcbiAgICAgICAgdmFyIGN1cnJlbnRBbmdsZSA9IFZlY3Rvci50b0FuZ2xlKGNsaWNrRGlyZWN0aW9uVmVjKTtcblxuICAgICAgICAvLyBUcmFuc2Zvcm0gdGhlIGFuZ2xlIHRvIGNvbXB1dGUgdGhlIGZpbmFsIHJvdGF0aW9uLlxuICAgICAgICB2YXIgY3VycmVudFJvdGF0aW9uID0gdGhpcy5fb2xkUm90YXRpb24gKyAoY3VycmVudEFuZ2xlIC0gdGhpcy5fc3RhcnRBbmdsZSk7XG4gICAgICAgIGN1cnJlbnRSb3RhdGlvbiA9IHRoaXMuX2FwcGx5TW9kaWZpZXJzVG9Sb3RhdGlvbihjdXJyZW50Um90YXRpb24sIHRoaXMuX2FwcGx5U3RlcE9uRW5kT25seSk7XG4gICAgICAgIHRoaXMuX3ZpZXcucm90YXRpb24gPSBjdXJyZW50Um90YXRpb247XG5cbiAgICAgICAgaWYgKHRoaXMuX29uVXBkYXRlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX29uVXBkYXRlQ2FsbGJhY2sodGhpcy5fdmlldywgZnJhbWVUaW1lKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwLnJlc3RvcmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FwcGx5U3RlcE9uRW5kT25seSkge1xuICAgICAgICAgICAgdmFyIHJvdGF0aW9uID0gdGhpcy5fYXBwbHlNb2RpZmllcnNUb1JvdGF0aW9uKHRoaXMuX3ZpZXcucm90YXRpb24pO1xuICAgICAgICAgICAgdGhpcy5fdmlldy5yb3RhdGlvbiA9IHJvdGF0aW9uO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX2FwcGx5TW9kaWZpZXJzVG9Sb3RhdGlvbiA9IGZ1bmN0aW9uIChyb3RhdGlvbiwgc2tpcFN0ZXApIHtcbiAgICAgICAgLy8gT3B0aW9uYWxseSBhZGQgc3RlcCBtb2RpZmllci5cbiAgICAgICAgaWYgKCh0aGlzLl9zdGVwID4gMC4wKSAmJiAhc2tpcFN0ZXApIHtcbiAgICAgICAgICAgIHJvdGF0aW9uID0gKHJvdGF0aW9uIC8gdGhpcy5fc3RlcCkgKiB0aGlzLl9zdGVwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzdHJpY3QgdG8gdmFsaWQgcmFuZ2UuXG4gICAgICAgIHJvdGF0aW9uID0gTWF0aC53cmFwKHJvdGF0aW9uLCAtTWF0aC5QSSwgTWF0aC5QSSk7XG5cbiAgICAgICAgcmV0dXJuIHJvdGF0aW9uO1xuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuUm90YXRpb25WaWV3VHJhbnNmb3JtZXIgPSBSb3RhdGlvblZpZXdUcmFuc2Zvcm1lcjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBWaWV3VHJhbnNmb3JtZXIgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLlZpZXdUcmFuc2Zvcm1lclwiKTtcblxuICAgIC8vIERvZXMgbm90IG1vZGlmeSB0aGUgdmlldyB3aGVuIGRyYWdnaW5nLCBhbmQgaXMgdXNlZnVsIHdoZW4gdXNpbmcgRHJhZ1ZpZXdTY3JpcHQganVzdCB0byByZWNlaXZlIGRyYWcgZXZlbnRzLlxuICAgIHZhciBOdWxsVmlld1RyYW5zZm9ybWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIFZpZXdUcmFuc2Zvcm1lci5jYWxsKHRoaXMsIHt9KTtcbiAgICB9O1xuICAgIHZhciBzID0gVmlld1RyYW5zZm9ybWVyLnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChOdWxsVmlld1RyYW5zZm9ybWVyLCBWaWV3VHJhbnNmb3JtZXIpO1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLk51bGxWaWV3VHJhbnNmb3JtZXIgPSBOdWxsVmlld1RyYW5zZm9ybWVyO1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIENvbXBvc2l0ZVNjcmlwdCA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQ29tcG9zaXRlU2NyaXB0XCIpO1xuXG4gICAgLy8gQ29udHJvbGxlciBzY3JpcHQgd2l0aCB2aWV3LlxuXHR2YXIgVmlld1NjcmlwdCA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBjb25maWcuXG4gICAgICAgIHZhciBmaW5hbENvbmZpZyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAgdmlldzogbnVsbFxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgQ29tcG9zaXRlU2NyaXB0LmNhbGwodGhpcywgZmluYWxDb25maWcpO1xuXG4gICAgICAgIHRoaXMuX3ZpZXcgPSBmaW5hbENvbmZpZy52aWV3O1xuICAgIH07XG5cdHZhciBzID0gQ29tcG9zaXRlU2NyaXB0LnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChWaWV3U2NyaXB0LCBDb21wb3NpdGVTY3JpcHQpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwidmlld1wiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZpZXcpIHsgdGhpcy5fdmlldyA9IHZpZXc7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdmlldzsgfVxuICAgIH0pO1xuXG4gICAgcC51cGRhdGUgPSBmdW5jdGlvbiAoZnJhbWVUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0FjdGl2ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVJbXBsKGZyYW1lVGltZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3NjcmlwdHMuZm9yRWFjaChmdW5jdGlvbiAoc2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjcmlwdCkge1xuICAgICAgICAgICAgICAgICAgICBzY3JpcHQudXBkYXRlKGZyYW1lVGltZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLlZpZXdTY3JpcHQgPSBWaWV3U2NyaXB0O1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIFZpZXdTY3JpcHQgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLlZpZXdTY3JpcHRcIik7XG4gICAgdmFyIFZlY3RvciA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuVmVjdG9yXCIpO1xuXG4gICAgLy8gQWxpZ25zIGEgdmlldyBpbiByZWxhdGlvbiB0byB0aGUgZ2FtZSB3aW5kb3cgKGRvZXMgbm90IGFsaWduIGFjY29yZGluZyB0b1xuICAgIC8vIGRpcmVjdCBwYXJlbnQgdmlldykuXG4gICAgdmFyIEFsaWduVmlld1NjcmlwdCA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBjb25maWcuXG4gICAgICAgIHZhciBmaW5hbENvbmZpZyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAgaG9yaXpvbnRhbEFsaWdubWVudDogQWxpZ25WaWV3U2NyaXB0LkFsaWdubWVudC5OT05FLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbm1lbnQ6IEFsaWduVmlld1NjcmlwdC5BbGlnbm1lbnQuTk9ORVxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgVmlld1NjcmlwdC5jYWxsKHRoaXMsIGZpbmFsQ29uZmlnKTtcblxuICAgICAgICB0aGlzLl9ob3Jpem9udGFsQWxpZ25tZW50ID0gZmluYWxDb25maWcuaG9yaXpvbnRhbEFsaWdubWVudDtcbiAgICAgICAgdGhpcy5fdmVydGljYWxBbGlnbm1lbnQgPSBmaW5hbENvbmZpZy52ZXJ0aWNhbEFsaWdubWVudDtcblxuICAgICAgICAvLyBDYWNoZSB0aGUgdmlldydzIHN0YXJ0aW5nIHBvc2l0aW9uLlxuICAgICAgICBpZiAodGhpcy5fdmlldykge1xuICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxWaWV3UG9zID0gVmVjdG9yLmNsb25lKHRoaXMuX3ZpZXcucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgcyA9IFZpZXdTY3JpcHQucHJvdG90eXBlO1xuICAgIHZhciBwID0gZXh0ZW5kKEFsaWduVmlld1NjcmlwdCwgVmlld1NjcmlwdCk7XG5cbiAgICBBbGlnblZpZXdTY3JpcHQuQWxpZ25tZW50ID0ge1xuICAgICAgICBOT05FOiBcIk5PTkVcIixcbiAgICAgICAgQ0VOVFJFOiBcIkNFTlRSRVwiLFxuICAgICAgICBMRUZUOiBcIkxFRlRcIixcbiAgICAgICAgUklHSFQ6IFwiUklHSFRcIixcbiAgICAgICAgVE9QOiBcIlRPUFwiLFxuICAgICAgICBCT1RUT006IFwiQk9UVE9NXCJcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwidmlld1wiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld1ZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXcgPSBuZXdWaWV3O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fdmlldykge1xuICAgICAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsVmlld1BvcyA9IFZlY3Rvci5jbG9uZSh0aGlzLl92aWV3LnBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmlldztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcC5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzLmluaXQuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLl93aW5kb3dSZXNpemVkKCk7XG4gICAgfTtcblxuICAgIHAuZGVpbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fdmlldyAmJiB0aGlzLl92aWV3LnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdGhpcy5fdmlldy5wb3NpdGlvbi54ID0gdGhpcy5fb3JpZ2luYWxWaWV3UG9zLng7XG4gICAgICAgICAgICB0aGlzLl92aWV3LnBvc2l0aW9uLnkgPSB0aGlzLl9vcmlnaW5hbFZpZXdQb3MueTtcbiAgICAgICAgfVxuXG4gICAgICAgIHMuZGVpbml0LmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIHAuX3VwZGF0ZUltcGwgPSBmdW5jdGlvbiAoZnJhbWVUaW1lKSB7XG4gICAgICAgIC8vIFJlc2l6ZSBldmVudHMgZG9uJ3QgZ2V0IHNlbnQgb2Z0ZW4gZW5vdWdoIHRvIGtlZXAgdGhlIHZpZXdzIGFsaWduZWQgZXZlcnlcbiAgICAgICAgLy8gZnJhbWUsIHNvIG1hbnVhbGx5IHNldCB0aGUgcG9zaXRpb24gcGVyIGZyYW1lIGluc3RlYWQuXG4gICAgICAgIHRoaXMuX3dpbmRvd1Jlc2l6ZWQoKTtcbiAgICB9O1xuXG4gICAgcC5fd2luZG93UmVzaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl92aWV3KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZS1hbGlnbiB0aGUgdmlldyBiYXNlZCBvbiBuZXcgd2luZG93IGRpbWVuc2lvbnMuXG4gICAgICAgIHRoaXMuX2FsaWduWCgpO1xuICAgICAgICB0aGlzLl9hbGlnblkoKTtcbiAgICB9O1xuXG4gICAgcC5fYWxpZ25YID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc25hcFhQb3M7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBYIHNuYXAgcG9zaXRpb24gaW4gcm9vdCB2aWV3IChzdGFnZSkgc3BhY2UuXG4gICAgICAgIGlmICh0aGlzLl9ob3Jpem9udGFsQWxpZ25tZW50ID09IEFsaWduVmlld1NjcmlwdC5BbGlnbm1lbnQuTEVGVCkge1xuICAgICAgICAgICAgc25hcFhQb3MgPSAwLjA7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5faG9yaXpvbnRhbEFsaWdubWVudCA9PSBBbGlnblZpZXdTY3JpcHQuQWxpZ25tZW50LkNFTlRSRSkge1xuICAgICAgICAgICAgc25hcFhQb3MgPSAoMC41ICogYXBwLmdldENhbnZhc1dpZHRoKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2hvcml6b250YWxBbGlnbm1lbnQgPT0gQWxpZ25WaWV3U2NyaXB0LkFsaWdubWVudC5SSUdIVCkge1xuICAgICAgICAgICAgc25hcFhQb3MgPSBhcHAuZ2V0Q2FudmFzV2lkdGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNuYXAgdGhlIHZpZXcgdG8gdGhhdCBsb2NhdGlvbiAoaW4gbG9jYWwgc3BhY2UpIGFuZCBvZmZzZXQgYnkgaXRzIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgICAgICBpZiAoaXNEZWZpbmVkKHNuYXBYUG9zKSkge1xuICAgICAgICAgICAgdmFyIHZpZXdQYXJlbnQgPSB0aGlzLl92aWV3LnBhcmVudCB8fCB0aGlzLl92aWV3O1xuICAgICAgICAgICAgc25hcFhQb3MgPSB2aWV3UGFyZW50LndvcmxkVHJhbnNmb3JtLmFwcGx5SW52ZXJzZSh7IHg6IHNuYXBYUG9zLCB5OiAwLjAgfSkueDtcblxuICAgICAgICAgICAgdGhpcy5fdmlldy5wb3NpdGlvbi54ID0gKHNuYXBYUG9zICsgdGhpcy5fb3JpZ2luYWxWaWV3UG9zLngpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX2FsaWduWSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNuYXBZUG9zO1xuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgWSBzbmFwIHBvc2l0aW9uIGluIHJvb3QgdmlldyAoc3RhZ2UpIHNwYWNlLlxuICAgICAgICBpZiAodGhpcy5fdmVydGljYWxBbGlnbm1lbnQgPT0gQWxpZ25WaWV3U2NyaXB0LkFsaWdubWVudC5UT1ApIHtcbiAgICAgICAgICAgIHNuYXBZUG9zID0gMC4wO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZlcnRpY2FsQWxpZ25tZW50ID09IEFsaWduVmlld1NjcmlwdC5BbGlnbm1lbnQuQ0VOVFJFKSB7XG4gICAgICAgICAgICBzbmFwWVBvcyA9ICgwLjUgKiBhcHAuZ2V0Q2FudmFzSGVpZ2h0KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZlcnRpY2FsQWxpZ25tZW50ID09IEFsaWduVmlld1NjcmlwdC5BbGlnbm1lbnQuQk9UVE9NKSB7XG4gICAgICAgICAgICBzbmFwWVBvcyA9IGFwcC5nZXRDYW52YXNIZWlnaHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNuYXAgdGhlIHZpZXcgdG8gdGhhdCBsb2NhdGlvbiAoaW4gbG9jYWwgc3BhY2UpIGFuZCBvZmZzZXQgYnkgaXRzIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgICAgICBpZiAoaXNEZWZpbmVkKHNuYXBZUG9zKSkge1xuICAgICAgICAgICAgdmFyIHZpZXdQYXJlbnQgPSB0aGlzLl92aWV3LnBhcmVudCB8fCB0aGlzLl92aWV3O1xuICAgICAgICAgICAgc25hcFlQb3MgPSB2aWV3UGFyZW50LndvcmxkVHJhbnNmb3JtLmFwcGx5SW52ZXJzZSh7IHg6IDAuMCwgeTogc25hcFlQb3MgfSkueTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fdmlldy5wb3NpdGlvbi55ID0gKHNuYXBZUG9zICsgdGhpcy5fb3JpZ2luYWxWaWV3UG9zLnkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5BbGlnblZpZXdTY3JpcHQgPSBBbGlnblZpZXdTY3JpcHQ7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgVmlld1NjcmlwdCA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuVmlld1NjcmlwdFwiKTtcblxuICAgIC8vIFRlc3RzIGZvciBvdmVybGFwIG9mIHR3byB2aWV3IGJvdW5kcy4gVXNlcyBhIGNhbGxiYWNrIHRvIHJldHVybiB0aGUgb3ZlcmxhcFxuICAgIC8vIHN0YXR1cyBvZiB0aGUgdHdvIHZpZXdzIHBlciBmcmFtZS5cblx0dmFyIEJvdW5kc092ZXJsYXBTY3JpcHQgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIG90aGVyVmlldzogbnVsbCxcbiAgICAgICAgICAgIG92ZXJsYXBUZXN0RnVuYzogbnVsbCwgIC8vIEN1c3RvbSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHRydWUgaWYgdHdvIHZpZXdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdmVybGFwLCBmYWxzZSBvdGhlcndpc2UuIFVzZXMgZGVmYXVsdE92ZXJsYXBUZXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBieSBkZWZhdWx0LlxuICAgICAgICAgICAgb3ZlcmxhcFJlc3VsdENhbGxiYWNrOiBmdW5jdGlvbiAodGhpc1ZpZXcsIG90aGVyVmlldywgdmlld3NPdmVybGFwLCByZXR1cm5EYXRhKSB7fSxcbiAgICAgICAgICAgIGlzT3ZlcmxhcHBpbmdDYWxsYmFjazogZnVuY3Rpb24gKHRoaXNWaWV3LCBvdGhlclZpZXcsIHJldHVybkRhdGEpIHt9LFxuICAgICAgICAgICAgaXNOb3RPdmVybGFwcGluZ0NhbGxiYWNrOiBmdW5jdGlvbiAodGhpc1ZpZXcsIG90aGVyVmlldywgcmV0dXJuRGF0YSkge30sXG4gICAgICAgICAgICBvdmVybGFwU3RhcnRlZENhbGxiYWNrOiBmdW5jdGlvbiAodGhpc1ZpZXcsIG90aGVyVmlldywgcmV0dXJuRGF0YSkge30sXG4gICAgICAgICAgICBvdmVybGFwRW5kZWRDYWxsYmFjazogZnVuY3Rpb24gKHRoaXNWaWV3LCBvdGhlclZpZXcsIHJldHVybkRhdGEpIHt9XG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBWaWV3U2NyaXB0LmNhbGwodGhpcywgZmluYWxDb25maWcpO1xuXG4gICAgICAgIHRoaXMuX290aGVyVmlldyA9IGZpbmFsQ29uZmlnLm90aGVyVmlldztcbiAgICAgICAgdGhpcy5fb3ZlcmxhcFRlc3RGdW5jID0gZmluYWxDb25maWcub3ZlcmxhcFRlc3RGdW5jIHx8IEJvdW5kc092ZXJsYXBTY3JpcHQuZGVmYXVsdE92ZXJsYXBUZXN0O1xuICAgICAgICB0aGlzLl9vdmVybGFwUmVzdWx0Q2FsbGJhY2sgPSBmaW5hbENvbmZpZy5vdmVybGFwUmVzdWx0Q2FsbGJhY2s7XG4gICAgICAgIHRoaXMuX2lzT3ZlcmxhcHBpbmdDYWxsYmFjayA9IGZpbmFsQ29uZmlnLmlzT3ZlcmxhcHBpbmdDYWxsYmFjaztcbiAgICAgICAgdGhpcy5faXNOb3RPdmVybGFwcGluZ0NhbGxiYWNrID0gZmluYWxDb25maWcuaXNOb3RPdmVybGFwcGluZ0NhbGxiYWNrO1xuICAgICAgICB0aGlzLl9vdmVybGFwU3RhcnRlZENhbGxiYWNrID0gZmluYWxDb25maWcub3ZlcmxhcFN0YXJ0ZWRDYWxsYmFjaztcbiAgICAgICAgdGhpcy5fb3ZlcmxhcEVuZGVkQ2FsbGJhY2sgPSBmaW5hbENvbmZpZy5vdmVybGFwRW5kZWRDYWxsYmFjaztcbiAgICB9O1xuXHR2YXIgcyA9IFZpZXdTY3JpcHQucHJvdG90eXBlO1xuICAgIHZhciBwID0gZXh0ZW5kKEJvdW5kc092ZXJsYXBTY3JpcHQsIFZpZXdTY3JpcHQpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiaXNBY3RpdmVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc0FjdGl2ZSkgeyB0aGlzLl9zZXRBY3RpdmUoaXNBY3RpdmUpOyB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2lzQWN0aXZlOyB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwib3RoZXJWaWV3XCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAob3RoZXJWaWV3KSB7IHRoaXMuX290aGVyVmlldyA9IG90aGVyVmlldzsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9vdGhlclZpZXc7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJvdmVybGFwVGVzdEZ1bmNcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChvdmVybGFwVGVzdEZ1bmMpIHsgdGhpcy5fb3ZlcmxhcFRlc3RGdW5jID0gb3ZlcmxhcFRlc3RGdW5jIHx8IEJvdW5kc092ZXJsYXBTY3JpcHQuZGVmYXVsdE92ZXJsYXBUZXN0OyB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX292ZXJsYXBUZXN0RnVuYzsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcIm92ZXJsYXBSZXN1bHRDYWxsYmFja1wiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKG92ZXJsYXBSZXN1bHRDYWxsYmFjaykgeyB0aGlzLl9vdmVybGFwUmVzdWx0Q2FsbGJhY2sgPSBvdmVybGFwUmVzdWx0Q2FsbGJhY2s7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fb3ZlcmxhcFJlc3VsdENhbGxiYWNrOyB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiaXNPdmVybGFwcGluZ0NhbGxiYWNrXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaXNPdmVybGFwcGluZ0NhbGxiYWNrKSB7IHRoaXMuX2lzT3ZlcmxhcHBpbmdDYWxsYmFjayA9IGlzT3ZlcmxhcHBpbmdDYWxsYmFjazsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9pc092ZXJsYXBwaW5nQ2FsbGJhY2s7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJpc05vdE92ZXJsYXBwaW5nQ2FsbGJhY2tcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc05vdE92ZXJsYXBwaW5nQ2FsbGJhY2spIHsgdGhpcy5faXNOb3RPdmVybGFwcGluZ0NhbGxiYWNrID0gaXNOb3RPdmVybGFwcGluZ0NhbGxiYWNrOyB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2lzTm90T3ZlcmxhcHBpbmdDYWxsYmFjazsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcIm92ZXJsYXBTdGFydGVkQ2FsbGJhY2tcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChvdmVybGFwU3RhcnRlZENhbGxiYWNrKSB7IHRoaXMuX292ZXJsYXBTdGFydGVkQ2FsbGJhY2sgPSBvdmVybGFwU3RhcnRlZENhbGxiYWNrOyB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX292ZXJsYXBTdGFydGVkQ2FsbGJhY2s7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJvdmVybGFwRW5kZWRDYWxsYmFja1wiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKG92ZXJsYXBFbmRlZENhbGxiYWNrKSB7IHRoaXMuX292ZXJsYXBFbmRlZENhbGxiYWNrID0gb3ZlcmxhcEVuZGVkQ2FsbGJhY2s7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fb3ZlcmxhcEVuZGVkQ2FsbGJhY2s7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJpc092ZXJsYXBwaW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9pc092ZXJsYXBwaW5nOyB9XG4gICAgfSk7XG5cbiAgICBCb3VuZHNPdmVybGFwU2NyaXB0LmRlZmF1bHRPdmVybGFwVGVzdCA9IGZ1bmN0aW9uICh2aWV3MSwgdmlldzIsIHJldHVybkRhdGEpIHtcbiAgICAgICAgdmFyIHZpZXcxQm91bmRzID0gdmlldzEuZ2V0Qm91bmRzKCk7XG4gICAgICAgIHZhciB2aWV3MkJvdW5kcyA9IHZpZXcyLmdldEJvdW5kcygpO1xuXG4gICAgICAgIHZhciB4T3ZlcmxhcCA9ICh2aWV3MUJvdW5kcy5yaWdodCA+IHZpZXcyQm91bmRzLngpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodmlldzFCb3VuZHMueCA8IHZpZXcyQm91bmRzLnJpZ2h0KTtcbiAgICAgICAgdmFyIHlPdmVybGFwID0gKHZpZXcxQm91bmRzLmJvdHRvbSA+IHZpZXcyQm91bmRzLnkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodmlldzFCb3VuZHMueSA8IHZpZXcyQm91bmRzLmJvdHRvbSk7XG5cbiAgICAgICAgcmV0dXJuICh4T3ZlcmxhcCAmJiB5T3ZlcmxhcCk7XG4gICAgfTtcblxuICAgIHAuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcy5pbml0LmNhbGwodGhpcyk7XG5cbiAgICAgICAgdGhpcy5faXNPdmVybGFwcGluZyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBwLmRlaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5faXNPdmVybGFwcGluZyA9IGZhbHNlO1xuXG4gICAgICAgIHMuZGVpbml0LmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIHAuX3VwZGF0ZUltcGwgPSBmdW5jdGlvbiAoZnJhbWVUaW1lKSB7XG4gICAgICAgIGlmICghdGhpcy5fb3RoZXJWaWV3KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3Igb3ZlcmxhcCBiZXR3ZWVuIHRoZSB0d28gdmlld3MuXG4gICAgICAgIHZhciByZXR1cm5EYXRhID0ge307XG4gICAgICAgIHZhciBvdmVybGFwcyA9IHRoaXMuX3Rlc3RPdmVybGFwKHRoaXMuX3ZpZXcsIHRoaXMuX290aGVyVmlldywgcmV0dXJuRGF0YSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZU92ZXJsYXBTdGF0ZShvdmVybGFwcywgcmV0dXJuRGF0YSk7XG4gICAgfTtcblxuICAgIHAuX3NldEFjdGl2ZSA9IGZ1bmN0aW9uIChpc0FjdGl2ZSkge1xuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IGlzQWN0aXZlO1xuXG4gICAgICAgIC8vIENhbmNlbCBleGlzdGluZyBvdmVybGFwIHdpdGggbnVsbCByZXR1cm4gZGF0YSBpZiBzY3JpcHQgaXMgZGlzYWJsZWQuXG4gICAgICAgIGlmICghdGhpcy5faXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZU92ZXJsYXBTdGF0ZShmYWxzZSwge30pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX3Rlc3RPdmVybGFwID0gZnVuY3Rpb24gKHZpZXcsIG90aGVyVmlldywgcmV0dXJuRGF0YSkge1xuICAgICAgICB2YXIgb3ZlcmxhcHMgPSBmYWxzZTtcbiAgICAgICAgaWYgKHZpZXcgJiYgb3RoZXJWaWV3KSB7XG4gICAgICAgICAgICBvdmVybGFwcyA9IHRoaXMuX292ZXJsYXBUZXN0RnVuYyh2aWV3LCBvdGhlclZpZXcsIHJldHVybkRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdmVybGFwcztcbiAgICB9O1xuXG4gICAgcC5fdXBkYXRlT3ZlcmxhcFN0YXRlID0gZnVuY3Rpb24gKGlzT3ZlcmxhcHBpbmcsIHJldHVybkRhdGEpIHtcbiAgICAgICAgLy8gVXBkYXRlIHN0YXRlIGFuZCBub3RpZnkgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICAgICAgaWYgKHRoaXMuX2lzT3ZlcmxhcHBpbmcgIT09IGlzT3ZlcmxhcHBpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzT3ZlcmxhcHBpbmcgPSBpc092ZXJsYXBwaW5nO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5faXNPdmVybGFwcGluZyAmJiB0aGlzLl9vdmVybGFwU3RhcnRlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3ZlcmxhcFN0YXJ0ZWRDYWxsYmFjayh0aGlzLl92aWV3LCB0aGlzLl9vdGhlclZpZXcsIHJldHVybkRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNPdmVybGFwcGluZyAmJiB0aGlzLl9vdmVybGFwRW5kZWRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRoaXMuX292ZXJsYXBFbmRlZENhbGxiYWNrKHRoaXMuX3ZpZXcsIHRoaXMuX290aGVyVmlldywgcmV0dXJuRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3RpZnkgb2YgcGVyLWZyYW1lIG92ZXJsYXBwaW5nIHN0YXRlLlxuICAgICAgICBpZiAoaXNPdmVybGFwcGluZyAmJiB0aGlzLl9pc092ZXJsYXBwaW5nQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2lzT3ZlcmxhcHBpbmdDYWxsYmFjayh0aGlzLl92aWV3LCB0aGlzLl9vdGhlclZpZXcsIHJldHVybkRhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc092ZXJsYXBwaW5nICYmIHRoaXMuX2lzTm90T3ZlcmxhcHBpbmdDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5faXNOb3RPdmVybGFwcGluZ0NhbGxiYWNrKHRoaXMuX3ZpZXcsIHRoaXMuX290aGVyVmlldywgcmV0dXJuRGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb3ZlcmxhcFJlc3VsdENhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9vdmVybGFwUmVzdWx0Q2FsbGJhY2sodGhpcy5fdmlldywgdGhpcy5fb3RoZXJWaWV3LCBpc092ZXJsYXBwaW5nLCByZXR1cm5EYXRhKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuQm91bmRzT3ZlcmxhcFNjcmlwdCA9IEJvdW5kc092ZXJsYXBTY3JpcHQ7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgVmlld1NjcmlwdCA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuVmlld1NjcmlwdFwiKTtcbiAgICB2YXIgUmVjdGFuZ2xlID0gaW5jbHVkZShcIlBJWEkuUmVjdGFuZ2xlXCIpO1xuXG4gICAgLy8gQWxsb3dzIHBhbm5pbmcgb2YgdGhlIGdhbWUgY2FtZXJhIGFsb25nIGEgc3BlY2lmaWVkIHJvb3QgXCJ3b3JsZFwiIHZpZXcuIFRoZSBjYW1lcmEgaXNcbiAgICAvLyB1cGRhdGVkIGRlcGVuZGluZyBvbiB0aGUgcG9zaXRpb24gb2YgYSBcInBsYXllclwiIHZpZXcuXG4gICAgLy8gVGhyZWUgc2V0cyBvZiByZWN0YW5nbGVzIGFyZSBzcGVjaWZpZWQ6XG4gICAgLy8gLSBQbGF5ZXIgcmVjdDogVGhlIHJlY3RhbmdsZSBwb3J0aW9uIG9mIHRoZSBzY3JlZW4geW91IHdhbnQgdGhlIHBsYXllciB0byByZW1haW5cbiAgICAvLyAgICAgICAgICAgICAgICBjb25maW5lZCB0by4gVGhlIGNhbWVyYSBrZWVwcyBzdGlsbCB1bnRpbCB0aGUgcGxheWVyIGNyb3NzZXMgdGhpc1xuICAgIC8vICAgICAgICAgICAgICAgIHJlY3RhbmdsZSwgd2hlcmUgdGhlIGNhbWVyYSB3aWxsIHRoZW4gY2hhc2UgdG8ga2VlcCB1cC5cbiAgICAvLyAtIENhbWVyYSByZWN0OiBCb3JkZXJzIG9mIHdoYXQgZGVmaW5lIHRoZSBnYW1lIGNhbWVyYS5cbiAgICAvLyAtIFdvcmxkIHJlY3Q6ICBCb3JkZXJzIHdoaWNoIHRoZSBjYW1lcmEgcmVjdCBjYW5ub3QgY3Jvc3MuIFRoZSB3b3JsZCByZWN0IG11c3QgZnVsbHlcbiAgICAvLyAgICAgICAgICAgICAgICBjb250YWluIHRoZSBjYW1lcmEgcmVjdC5cbiBcdHZhciBDYW1lcmFTY3JpcHQgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHZhciBkZWZhdWx0U2l6ZSA9IHtcbiAgICAgICAgICAgIGNlbnRyZTogeyB4OiA0ODAsIHk6IDM2MCB9LFxuICAgICAgICAgICAgbWluOiB7IHg6IC0xNjAsIHk6IDAgfSxcbiAgICAgICAgICAgIG1heFdpZHRoOiAxMjgwLFxuICAgICAgICAgICAgbWF4SGVpZ2h0OiA3MjBcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICB3b3JsZFZpZXc6IG51bGwsXG4gICAgICAgICAgICBwbGF5ZXJWaWV3OiBudWxsLFxuICAgICAgICAgICAgcGxheWVyUmVjdDoge1xuICAgICAgICAgICAgICAgIHg6IChkZWZhdWx0U2l6ZS5jZW50cmUueCAtIDEwLjApLFxuICAgICAgICAgICAgICAgIHk6IChkZWZhdWx0U2l6ZS5jZW50cmUueSAtIDEwLjApLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMCxcbiAgICAgICAgICAgICAgICBib3R0b206IDIwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FtZXJhUmVjdDoge1xuICAgICAgICAgICAgICAgIHg6IGRlZmF1bHRTaXplLm1pbi54LFxuICAgICAgICAgICAgICAgIHk6IGRlZmF1bHRTaXplLm1pbi55LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBkZWZhdWx0U2l6ZS5tYXhXaWR0aCxcbiAgICAgICAgICAgICAgICBib3R0b206IGRlZmF1bHRTaXplLm1heEhlaWdodFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdvcmxkUmVjdDoge1xuICAgICAgICAgICAgICAgIHg6IGRlZmF1bHRTaXplLm1pbi54LFxuICAgICAgICAgICAgICAgIHk6IGRlZmF1bHRTaXplLm1pbi55LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBkZWZhdWx0U2l6ZS5tYXhXaWR0aCxcbiAgICAgICAgICAgICAgICBib3R0b206IGRlZmF1bHRTaXplLm1heEhlaWdodFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIGZpbmFsQ29uZmlnLnZpZXcgPSBmaW5hbENvbmZpZy5wbGF5ZXJWaWV3OyAgLy8gVXNlIHBsYXllciB2aWV3IGFzIHZpZXcuXG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBWaWV3U2NyaXB0LmNhbGwodGhpcywgZmluYWxDb25maWcpO1xuXG4gICAgICAgIGlmICghZmluYWxDb25maWcud29ybGRWaWV3KSB7XG4gICAgICAgICAgICB0aHJvdyBcIkNhbWVyYVNjcmlwdDogd29ybGRWaWV3IGlzIG51bGwuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmaW5hbENvbmZpZy5wbGF5ZXJWaWV3KSB7XG4gICAgICAgICAgICB0aHJvdyBcIkNhbWVyYVNjcmlwdDogcGxheWVyVmlldyBpcyBudWxsLlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fd29ybGRWaWV3ID0gZmluYWxDb25maWcud29ybGRWaWV3O1xuICAgICAgICB0aGlzLl9wbGF5ZXJWaWV3ID0gdGhpcy5fdmlldztcbiAgICAgICAgdGhpcy5fcGxheWVyUmVjdCA9IG5ldyBSZWN0YW5nbGUoZmluYWxDb25maWcucGxheWVyUmVjdCk7XG4gICAgICAgIHRoaXMuX2NhbWVyYVJlY3QgPSBuZXcgUmVjdGFuZ2xlKGZpbmFsQ29uZmlnLmNhbWVyYVJlY3QpO1xuICAgICAgICB0aGlzLl93b3JsZFJlY3QgPSBuZXcgUmVjdGFuZ2xlKGZpbmFsQ29uZmlnLndvcmxkUmVjdCk7XG4gICAgfTtcblx0dmFyIHMgPSBWaWV3U2NyaXB0LnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChDYW1lcmFTY3JpcHQsIFZpZXdTY3JpcHQpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwicGxheWVyUmVjdFwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKHBsYXllclJlY3QpIHsgdGhpcy5fcGxheWVyUmVjdCA9IG5ldyBSZWN0YW5nbGUocGxheWVyUmVjdCk7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKHBsYXllclJlY3QpIHsgcmV0dXJuIHRoaXMuX3BsYXllclJlY3Q7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJjYW1lcmFSZWN0XCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoY2FtZXJhUmVjdCkgeyB0aGlzLl9jYW1lcmFSZWN0ID0gbmV3IFJlY3RhbmdsZShjYW1lcmFSZWN0KTsgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoY2FtZXJhUmVjdCkgeyByZXR1cm4gdGhpcy5fY2FtZXJhUmVjdDsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcIndvcmxkUmVjdFwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKHdvcmxkUmVjdCkgeyB0aGlzLl93b3JsZFJlY3QgPSBuZXcgUmVjdGFuZ2xlKHdvcmxkUmVjdCk7IH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKHdvcmxkUmVjdCkgeyByZXR1cm4gdGhpcy5fd29ybGRSZWN0OyB9XG4gICAgfSk7XG5cbiAgICBwLl91cGRhdGVJbXBsID0gZnVuY3Rpb24gKGZyYW1lVGltZSkge1xuICAgICAgICB2YXIgc2Nyb2xsZWRQbGF5ZXJCb3VuZHMgPSB7XG4gICAgICAgICAgICBsZWZ0OiAodGhpcy5fcGxheWVyVmlldy5wb3NpdGlvbi54IC0gdGhpcy5fcGxheWVyUmVjdC54KSxcbiAgICAgICAgICAgIHJpZ2h0OiAodGhpcy5fcGxheWVyVmlldy5wb3NpdGlvbi54IC0gdGhpcy5fcGxheWVyUmVjdC5yaWdodCksXG4gICAgICAgICAgICB0b3A6ICh0aGlzLl9wbGF5ZXJWaWV3LnBvc2l0aW9uLnkgLSB0aGlzLl9wbGF5ZXJSZWN0LnkpLFxuICAgICAgICAgICAgYm90dG9tOiAodGhpcy5fcGxheWVyVmlldy5wb3NpdGlvbi55IC0gdGhpcy5fcGxheWVyUmVjdC5ib3R0b20pXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gTGVmdCBib3VuZC5cbiAgICAgICAgaWYgKHRoaXMuX3dvcmxkVmlldy5waXZvdC54ID4gc2Nyb2xsZWRQbGF5ZXJCb3VuZHMubGVmdCkge1xuICAgICAgICAgICAgdGhpcy5fd29ybGRWaWV3LnBpdm90LnggPSBzY3JvbGxlZFBsYXllckJvdW5kcy5sZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmlnaHQgYm91bmQuXG4gICAgICAgIGlmICh0aGlzLl93b3JsZFZpZXcucGl2b3QueCA8IHNjcm9sbGVkUGxheWVyQm91bmRzLnJpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl93b3JsZFZpZXcucGl2b3QueCA9IHNjcm9sbGVkUGxheWVyQm91bmRzLnJpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG9wIGJvdW5kLlxuICAgICAgICBpZiAodGhpcy5fd29ybGRWaWV3LnBpdm90LnkgPiBzY3JvbGxlZFBsYXllckJvdW5kcy50b3ApIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmxkVmlldy5waXZvdC55ID0gc2Nyb2xsZWRQbGF5ZXJCb3VuZHMudG9wO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQm90dG9tIGJvdW5kLlxuICAgICAgICBpZiAodGhpcy5fd29ybGRWaWV3LnBpdm90LnkgPCBzY3JvbGxlZFBsYXllckJvdW5kcy5ib3R0b20pIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmxkVmlldy5waXZvdC55ID0gc2Nyb2xsZWRQbGF5ZXJCb3VuZHMuYm90dG9tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3dvcmxkUmVjdCkge1xuICAgICAgICAgICAgdmFyIHdvcmxkUGl2b3RCb3VuZHMgPSB7XG4gICAgICAgICAgICAgICAgbGVmdDogKHRoaXMuX3dvcmxkUmVjdC54IC0gdGhpcy5fY2FtZXJhUmVjdC54KSxcbiAgICAgICAgICAgICAgICByaWdodDogKHRoaXMuX3dvcmxkUmVjdC5yaWdodCAtIHRoaXMuX2NhbWVyYVJlY3QucmlnaHQpLFxuICAgICAgICAgICAgICAgIHRvcDogKHRoaXMuX3dvcmxkUmVjdC55IC0gdGhpcy5fY2FtZXJhUmVjdC55KSxcbiAgICAgICAgICAgICAgICBib3R0b206ICh0aGlzLl93b3JsZFJlY3QuYm90dG9tIC0gdGhpcy5fY2FtZXJhUmVjdC5ib3R0b20pXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fd29ybGRWaWV3LnBpdm90LnggPCB3b3JsZFBpdm90Qm91bmRzLmxlZnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3JsZFZpZXcucGl2b3QueCA9IHdvcmxkUGl2b3RCb3VuZHMubGVmdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuX3dvcmxkVmlldy5waXZvdC54ID4gd29ybGRQaXZvdEJvdW5kcy5yaWdodCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dvcmxkVmlldy5waXZvdC54ID0gd29ybGRQaXZvdEJvdW5kcy5yaWdodDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuX3dvcmxkVmlldy5waXZvdC55IDwgd29ybGRQaXZvdEJvdW5kcy50b3ApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3JsZFZpZXcucGl2b3QueSA9IHdvcmxkUGl2b3RCb3VuZHMudG9wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fd29ybGRWaWV3LnBpdm90LnkgPiB3b3JsZFBpdm90Qm91bmRzLmJvdHRvbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dvcmxkVmlldy5waXZvdC55ID0gd29ybGRQaXZvdEJvdW5kcy5ib3R0b207XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkNhbWVyYVNjcmlwdCA9IENhbWVyYVNjcmlwdDtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBWaWV3U2NyaXB0ID0gaW5jbHVkZShcImZyYW1ld29yay5WaWV3U2NyaXB0XCIpO1xuXG5cdHZhciBDbGlja1NjcmlwdCA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgLy8gT3ZlcnJpZGUgZGVmYXVsdCBjb25maWcuXG4gICAgICAgIHZhciBmaW5hbENvbmZpZyA9IE9iamVjdC5leHRlbmQoe1xuICAgICAgICAgICAgY2xpY2tTdGFydENhbGxiYWNrOiBudWxsLFxuICAgICAgICAgICAgY2xpY2tFbmRDYWxsYmFjazogbnVsbCxcbiAgICAgICAgICAgIGNsaWNrRW5kT3V0c2lkZUNhbGxiYWNrOiBudWxsLFxuICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiB0cnVlLFxuICAgICAgICAgICAgY2xpY2tTb3VuZE5hbWU6IG51bGwsXG4gICAgICAgICAgICBhbGxvd0FsbENsaWNrRW5kRXZlbnRzOiBmYWxzZSAgIC8vIElmIHRydWUsIGFsbG93cyBjbGljayBlbmQgY2FsbGJhY2sgdG8gdHJpZ2dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aXRob3V0IHJlcXVpcmluZyBhIGNsaWNrIHN0YXJ0IGV2ZW50IHdpdGhpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgdmlldy5cbiAgICAgICAgfSwgY29uZmlnKTtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIFZpZXdTY3JpcHQuY2FsbCh0aGlzLCBmaW5hbENvbmZpZyk7XG5cbiAgICAgICAgdGhpcy5fY2xpY2tTdGFydENhbGxiYWNrID0gZmluYWxDb25maWcuY2xpY2tTdGFydENhbGxiYWNrO1xuICAgICAgICB0aGlzLl9jbGlja0VuZENhbGxiYWNrID0gZmluYWxDb25maWcuY2xpY2tFbmRDYWxsYmFjaztcbiAgICAgICAgdGhpcy5fY2xpY2tFbmRPdXRzaWRlQ2FsbGJhY2sgPSBmaW5hbENvbmZpZy5jbGlja0VuZE91dHNpZGVDYWxsYmFjaztcbiAgICAgICAgdGhpcy5fc3RvcFByb3BhZ2F0aW9uID0gZmluYWxDb25maWcuc3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICB0aGlzLl9jbGlja1NvdW5kTmFtZSA9IGZpbmFsQ29uZmlnLmNsaWNrU291bmROYW1lO1xuICAgICAgICBpZiAodGhpcy5fY2xpY2tTb3VuZE5hbWUgJiYgKHRoaXMuX2NsaWNrU291bmROYW1lLmxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX2NsaWNrU291bmROYW1lLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrU291bmROYW1lID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3ZpZXdJbml0aWFsbHlJbnRlcmFjdGl2ZSA9IHRoaXMuX3ZpZXcuaW50ZXJhY3RpdmU7XG4gICAgICAgIHRoaXMuX29uQ2xpY2tTdGFydEludGVybmFsID0gdGhpcy5fb25DbGlja1N0YXJ0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX29uQ2xpY2tFbmRJbnRlcm5hbCA9IHRoaXMuX29uQ2xpY2tFbmQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fb25DbGlja0VuZE91dHNpZGVJbnRlcm5hbCA9IHRoaXMuX29uQ2xpY2tFbmRPdXRzaWRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2lzU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYWxsb3dBbGxDbGlja0VuZEV2ZW50cyA9IGZpbmFsQ29uZmlnLmFsbG93QWxsQ2xpY2tFbmRFdmVudHM7XG4gICAgfTtcblx0dmFyIHMgPSBWaWV3U2NyaXB0LnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChDbGlja1NjcmlwdCwgVmlld1NjcmlwdCk7XG4gICAgXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwiaXNBY3RpdmVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGUoaXNBY3RpdmUsIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fdmlldykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXcuaW50ZXJhY3RpdmUgPSBpc0FjdGl2ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVDdXJzb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9pc0FjdGl2ZTsgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcImlzQ2xpY2thYmxlXCIsIHsgIC8vIFNpbWlsYXIgdG8gaXNBY3RpdmUsIGJ1dCBwcmVzZXJ2ZXMgdGhlIHZpZXcncyBpbnRlcmFjdGl2ZSBzdGF0ZS5cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaXNDbGlja2FibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzQ2xpY2thYmxlID0gaXNDbGlja2FibGU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faXNDbGlja2FibGU7IH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCJpc1NlbGVjdGVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9pc1NlbGVjdGVkOyB9XG4gICAgfSk7XG5cbiAgICBwLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHMuaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3ZpZXcuaW50ZXJhY3RpdmUgPSB0aGlzLmlzQWN0aXZlO1xuICAgICAgICB0aGlzLl9pc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzQ2xpY2thYmxlID0gdGhpcy5pc0FjdGl2ZTtcblxuICAgICAgICB0aGlzLl91cGRhdGVDdXJzb3IoKTtcblxuICAgICAgICB0aGlzLl92aWV3Lm9uKFwibW91c2Vkb3duXCIsIHRoaXMuX29uQ2xpY2tTdGFydEludGVybmFsKTtcbiAgICAgICAgdGhpcy5fdmlldy5vbihcInRvdWNoc3RhcnRcIiwgdGhpcy5fb25DbGlja1N0YXJ0SW50ZXJuYWwpO1xuICAgICAgICB0aGlzLl92aWV3Lm9uKFwidG91Y2hlbmRcIiwgdGhpcy5fb25DbGlja0VuZEludGVybmFsKTtcbiAgICAgICAgdGhpcy5fdmlldy5vbihcIm1vdXNldXBcIiwgdGhpcy5fb25DbGlja0VuZEludGVybmFsKTtcbiAgICAgICAgdGhpcy5fdmlldy5vbihcIm1vdXNldXBvdXRzaWRlXCIsIHRoaXMuX29uQ2xpY2tFbmRPdXRzaWRlSW50ZXJuYWwpO1xuICAgICAgICB0aGlzLl92aWV3Lm9uKFwidG91Y2hlbmRvdXRzaWRlXCIsIHRoaXMuX29uQ2xpY2tFbmRPdXRzaWRlSW50ZXJuYWwpO1xuICAgIH07XG5cbiAgICBwLl91cGRhdGVDdXJzb3IgPSBmdW5jdGlvbigpe1xuICAgICAgICBpZiAodGhpcy5fdmlldy5idXR0b25Nb2RlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fdmlldy5idXR0b25Nb2RlID0gdGhpcy5pc0FjdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl92aWV3Lmhhc093blByb3BlcnR5KCdjdXJzb3InKSkge1xuICAgICAgICAgICAgdGhpcy5fdmlldy5jdXJzb3IgPSB0aGlzLmlzQWN0aXZlID8gJ3BvaW50ZXInIDogbnVsbDtcbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICBwLmRlaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdmlldy5yZW1vdmVMaXN0ZW5lcihcInRvdWNoZW5kb3V0c2lkZVwiLCB0aGlzLl9vbkNsaWNrRW5kT3V0c2lkZUludGVybmFsKTtcbiAgICAgICAgdGhpcy5fdmlldy5yZW1vdmVMaXN0ZW5lcihcIm1vdXNldXBvdXRzaWRlXCIsIHRoaXMuX29uQ2xpY2tFbmRPdXRzaWRlSW50ZXJuYWwpO1xuICAgICAgICB0aGlzLl92aWV3LnJlbW92ZUxpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLl9vbkNsaWNrRW5kSW50ZXJuYWwpO1xuICAgICAgICB0aGlzLl92aWV3LnJlbW92ZUxpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcy5fb25DbGlja0VuZEludGVybmFsKTtcbiAgICAgICAgdGhpcy5fdmlldy5yZW1vdmVMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5fb25DbGlja1N0YXJ0SW50ZXJuYWwpO1xuICAgICAgICB0aGlzLl92aWV3LnJlbW92ZUxpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX29uQ2xpY2tTdGFydEludGVybmFsKTtcblxuICAgICAgICB0aGlzLl9pc0NsaWNrYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ZpZXcuaW50ZXJhY3RpdmUgPSB0aGlzLl92aWV3SW5pdGlhbGx5SW50ZXJhY3RpdmU7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlQ3Vyc29yKCk7XG4gICAgICAgIHMuZGVpbml0LmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIHAuX29uQ2xpY2tTdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMuaXNDbGlja2FibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lzU2VsZWN0ZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIE5vdGlmeSBsaXN0ZW5lci5cbiAgICAgICAgaWYgKHRoaXMuX2NsaWNrU3RhcnRDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fY2xpY2tTdGFydENhbGxiYWNrKGV2ZW50LCB0aGlzLl92aWV3KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByZXZlbnQgcHJvcGFnYXRpb24gb2YgdGhlIGNsaWNrIGNhbGxiYWNrIHRvIG90aGVyIHZpZXdzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgaWYgKHRoaXMuX3N0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fb25DbGlja0VuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMuaXNDbGlja2FibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9pc1NlbGVjdGVkIHx8IHRoaXMuX2FsbG93QWxsQ2xpY2tFbmRFdmVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzU2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gUGxheSB0aGUgY2xpY2sgc291bmQgaWYgdGhlcmUgaXMgb25lLlxuICAgICAgICAgICAgaWYgKHRoaXMuX2NsaWNrU291bmROYW1lKSB7XG4gICAgICAgICAgICAgICAgYXBwLnBsYXlTb3VuZCh0aGlzLl9jbGlja1NvdW5kTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFByZXZlbnQgcHJvcGFnYXRpb24gb2YgdGhlIGNsaWNrIGNhbGxiYWNrIHRvIG90aGVyIHZpZXdzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgIGlmICh0aGlzLl9zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTm90aWZ5IGxpc3RlbmVyLlxuICAgICAgICAgICAgaWYgKHRoaXMuX2NsaWNrRW5kQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGlja0VuZENhbGxiYWNrKGV2ZW50LCB0aGlzLl92aWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwLl9vbkNsaWNrRW5kT3V0c2lkZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMuaXNDbGlja2FibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lzU2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgICAvLyBOb3RpZnkgbGlzdGVuZXIuXG4gICAgICAgIGlmICh0aGlzLl9jbGlja0VuZE91dHNpZGVDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fY2xpY2tFbmRPdXRzaWRlQ2FsbGJhY2soZXZlbnQsIHRoaXMuX3ZpZXcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJldmVudCBwcm9wYWdhdGlvbiBvZiB0aGUgY2xpY2sgY2FsbGJhY2sgdG8gb3RoZXIgdmlld3MgaWYgc3BlY2lmaWVkLlxuICAgICAgICBpZiAodGhpcy5fc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuQ2xpY2tTY3JpcHQgPSBDbGlja1NjcmlwdDtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBWaWV3U2NyaXB0ID0gaW5jbHVkZShcImZyYW1ld29yay5WaWV3U2NyaXB0XCIpO1xuICAgIHZhciBWZWN0b3IgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLlZlY3RvclwiKTtcblxuICAgIC8vIFNldHMgYSB2aWV3J3Mgcm90YXRpb24gc28gdGhhdCBpdCBmYWNlcyBpbiB0aGUgZGlyZWN0aW9uIG9mIGEgdGFyZ2V0IHZpZXcncyBwb3NpdGlvbi5cblx0dmFyIEZhY2VWaWV3U2NyaXB0ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICB0YXJnZXRWaWV3OiBudWxsXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBWaWV3U2NyaXB0LmNhbGwodGhpcywgZmluYWxDb25maWcpO1xuXG4gICAgICAgIHRoaXMuX3RhcmdldFZpZXcgPSBmaW5hbENvbmZpZy50YXJnZXRWaWV3O1xuICAgIH07XG5cdHZhciBzID0gVmlld1NjcmlwdC5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoRmFjZVZpZXdTY3JpcHQsIFZpZXdTY3JpcHQpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwidGFyZ2V0Vmlld1wiLCB7XG4gICAgXHRzZXQ6IGZ1bmN0aW9uICh0YXJnZXRWaWV3KSB7IHRoaXMuX3RhcmdldFZpZXcgPSB0YXJnZXRWaWV3OyB9LFxuICAgIFx0Z2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl90YXJnZXRWaWV3OyB9XG4gICAgfSk7XG5cbiAgICBwLl91cGRhdGVJbXBsID0gZnVuY3Rpb24gKGZyYW1lVGltZSkge1xuICAgIFx0aWYgKCF0aGlzLl90YXJnZXRWaWV3KSB7XG4gICAgXHRcdHJldHVybjtcbiAgICBcdH1cblxuICAgIFx0Ly8gR2V0IHRoZSB2ZWN0b3IgZnJvbSB2aWV3IHRvIHRhcmdldCBpbiB0aGUgc2FtZSBjb29yZGluYXRlIHN5c3RlbS5cbiAgICBcdHZhciB0YXJnZXRQb3NpdGlvbiA9IFZlY3Rvci50cmFuc2Zvcm1Ubyh0aGlzLl90YXJnZXRWaWV3LCB0aGlzLl92aWV3LnBhcmVudCk7XG4gICAgXHR2YXIgdGFyZ2V0VmVjID0gVmVjdG9yLmNyZWF0ZUZyb21Qb2ludHModGhpcy5fdmlldy5wb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pO1xuXG4gICAgXHQvLyBSb3RhdGUgdGhlIHZpZXcgc28gaXQgZmFjZXMgdGhlIHRhcmdldC5cbiAgICBcdHRoaXMuX3ZpZXcucm90YXRpb24gPSBWZWN0b3IudG9BbmdsZSh0YXJnZXRWZWMpO1xuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuRmFjZVZpZXdTY3JpcHQgPSBGYWNlVmlld1NjcmlwdDtcbn0oKSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBWaWV3U2NyaXB0ID0gaW5jbHVkZShcImZyYW1ld29yay5WaWV3U2NyaXB0XCIpO1xuXG4gICAgLy8gRGVza3RvcC1vbmx5IHNjcmlwdCB3aGljaCBub3RpZmllcyB3aGVuIGEgbW91c2UgZW50ZXJzIG9yIGV4aXRzIHRoZSBib3VuZHMgb2YgdGhlXG4gICAgLy8gcHJvdmlkZWQgdmlldy5cblx0dmFyIEhvdmVyU2NyaXB0ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICBob3ZlclN0YXJ0Q2FsbGJhY2s6IG51bGwsXG4gICAgICAgICAgICBob3ZlckVuZENhbGxiYWNrOiBudWxsLFxuICAgICAgICAgICAgaG92ZXJDYWxsYmFjazogbnVsbCwgIC8vIFJlY2VpdmVzIHN0YXJ0IGFuZCBlbmQgY2FsbHMgd2l0aCBib29sZWFuIHZhbHVlLlxuICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiB0cnVlXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBWaWV3U2NyaXB0LmNhbGwodGhpcywgZmluYWxDb25maWcpO1xuXG4gICAgICAgIHRoaXMuX2hvdmVyU3RhcnRDYWxsYmFjayA9IGZpbmFsQ29uZmlnLmhvdmVyU3RhcnRDYWxsYmFjaztcbiAgICAgICAgdGhpcy5faG92ZXJFbmRDYWxsYmFjayA9IGZpbmFsQ29uZmlnLmhvdmVyRW5kQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMuX2hvdmVyQ2FsbGJhY2sgPSBmaW5hbENvbmZpZy5ob3ZlckNhbGxiYWNrO1xuICAgICAgICB0aGlzLl9zdG9wUHJvcGFnYXRpb24gPSBmaW5hbENvbmZpZy5zdG9wUHJvcGFnYXRpb247XG5cbiAgICAgICAgdGhpcy5fdmlld0luaXRpYWxseUludGVyYWN0aXZlID0gdGhpcy5fdmlldy5pbnRlcmFjdGl2ZTtcbiAgICAgICAgdGhpcy5fb25Ib3ZlclN0YXJ0SW50ZXJuYWwgPSB0aGlzLl9vbkhvdmVyU3RhcnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fb25Ib3ZlckVuZEludGVybmFsID0gdGhpcy5fb25Ib3ZlckVuZC5iaW5kKHRoaXMpO1xuICAgIH07XG5cdHZhciBzID0gVmlld1NjcmlwdC5wcm90b3R5cGU7XG4gICAgdmFyIHAgPSBleHRlbmQoSG92ZXJTY3JpcHQsIFZpZXdTY3JpcHQpO1xuXG4gICAgcC5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzLmluaXQuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLl92aWV3LmludGVyYWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl92aWV3Lm9uKFwibW91c2VvdmVyXCIsIHRoaXMuX29uSG92ZXJTdGFydEludGVybmFsKTtcbiAgICAgICAgdGhpcy5fdmlldy5vbihcIm1vdXNlb3V0XCIsIHRoaXMuX29uSG92ZXJFbmRJbnRlcm5hbCk7XG4gICAgfTtcblxuICAgIHAuZGVpbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl92aWV3LnJlbW92ZUxpc3RlbmVyKFwibW91c2VvdXRcIiwgdGhpcy5fb25Ib3ZlckVuZEludGVybmFsKTtcbiAgICAgICAgdGhpcy5fdmlldy5yZW1vdmVMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCB0aGlzLl9vbkhvdmVyU3RhcnRJbnRlcm5hbCk7XG5cbiAgICAgICAgdGhpcy5fdmlldy5pbnRlcmFjdGl2ZSA9IHRoaXMuX3ZpZXdJbml0aWFsbHlJbnRlcmFjdGl2ZTtcblxuICAgICAgICBzLmRlaW5pdC5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICBwLl9vbkhvdmVyU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3RpZnkgbGlzdGVuZXIuXG4gICAgICAgIGlmICh0aGlzLl9ob3ZlclN0YXJ0Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2hvdmVyU3RhcnRDYWxsYmFjayhldmVudCwgdGhpcy5fdmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2hvdmVyQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2hvdmVyQ2FsbGJhY2soZXZlbnQsIHRoaXMuX3ZpZXcsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJldmVudCBwcm9wYWdhdGlvbiBvZiB0aGUgaG92ZXIgY2FsbGJhY2sgdG8gb3RoZXIgdmlld3MgaWYgc3BlY2lmaWVkLlxuICAgICAgICBpZiAodGhpcy5fc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwLl9vbkhvdmVyRW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm90aWZ5IGxpc3RlbmVyLlxuICAgICAgICBpZiAodGhpcy5faG92ZXJFbmRDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5faG92ZXJFbmRDYWxsYmFjayhldmVudCwgdGhpcy5fdmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2hvdmVyQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2hvdmVyQ2FsbGJhY2soZXZlbnQsIHRoaXMuX3ZpZXcsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByZXZlbnQgcHJvcGFnYXRpb24gb2YgdGhlIGhvdmVyIGNhbGxiYWNrIHRvIG90aGVyIHZpZXdzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgaWYgKHRoaXMuX3N0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkhvdmVyU2NyaXB0ID0gSG92ZXJTY3JpcHQ7XG59KCkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgRHJhZ1ZpZXdTY3JpcHQgPSBpbmNsdWRlKFwiZnJhbWV3b3JrLkRyYWdWaWV3U2NyaXB0XCIpO1xuICAgIHZhciBXaW5kb3dVdGlscyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuV2luZG93VXRpbHNcIik7XG4gICAgdmFyIFZlY3RvciA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuVmVjdG9yXCIpO1xuXG4gICAgLy8gXCJTdGlja3lcIiB2ZXJzaW9uIG9mIERyYWdWaWV3U2NyaXB0IHdoZXJlIHRoZSBmaXJzdCBjbGljayBpbml0aWF0ZXMgXCJkcmFnIHZpZXcgbW9kZVwiLCBhbmQgdGhlXG4gICAgLy8gc2Vjb25kIGNsaWNrIGVuZHMgdGhlIGRyYWcgbW9kZSAtIHN1aXRhYmxlIGZvciBsaXR0bGUga2lkcyBvbiBkZXNrdG9wIHVzaW5nIG1vdXNlIC8gdHJhY2twYWQuXG4gICAgdmFyIFN0aWNreURyYWdWaWV3U2NyaXB0ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICBzaG91bGRTbmFwOiBmYWxzZSxcbiAgICAgICAgfSwgY29uZmlnKTtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIERyYWdWaWV3U2NyaXB0LmNhbGwodGhpcywgZmluYWxDb25maWcpO1xuXG4gICAgICAgIHRoaXMuX3Nob3VsZFNuYXAgPSBmaW5hbENvbmZpZy5zaG91bGRTbmFwO1xuICAgICAgICB0aGlzLl9maXJzdENsaWNrT2NjdXJyaW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICB2YXIgcyA9IERyYWdWaWV3U2NyaXB0LnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChTdGlja3lEcmFnVmlld1NjcmlwdCwgRHJhZ1ZpZXdTY3JpcHQpO1xuXG4gICAgcC5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fZmlyc3RDbGlja09jY3VycmluZyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBwLmRlaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcy5kZWluaXQuY2FsbCh0aGlzKTtcbiAgICB9O1xuXG4gICAgLy8gU3RhcnQgZHJhZyBtb2RlIG1hbnVhbGx5IGdpdmVuIGV4aXN0aW5nIGNsaWNrIGV2ZW50IGRhdGEgaXMgcHJvdmlkZWQuXG4gICAgcC5zdGFydERyYWcgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fdmlld0lzU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fb25WaWV3TW91c2VVcChldmVudCk7XG4gICAgfTtcblxuICAgIC8vIFN0b3AgZHJhZyBtb2RlIG1hbnVhbGx5IGdpdmVuIGV4aXN0aW5nIGNsaWNrIGV2ZW50IGRhdGEgaXMgcHJvdmlkZWQuXG4gICAgcC5zdG9wRHJhZyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl92aWV3SXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX29uVmlld01vdXNlVXAoZXZlbnQpO1xuICAgIH07XG5cbiAgICBwLl9vblZpZXdNb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTW91c2UgZG93bi5cIik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fb25WaWV3TW91c2VVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJNb3VzZSB1cC5cIik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl92aWV3SXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuZERyYWcoZXZlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2hvdWxkU25hcCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udmVydGVkUG9zaXRpb24gPSBWZWN0b3IudHJhbnNmb3JtR2xvYmFsVG9DaGlsZChldmVudC5kYXRhLmdsb2JhbCwgdGhpcy5fdmlldy5wYXJlbnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92aWV3LnBvc2l0aW9uLnggPSBjb252ZXJ0ZWRQb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92aWV3LnBvc2l0aW9uLnkgPSBjb252ZXJ0ZWRQb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2JlZ2luRHJhZyhldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcC5fb25WaWV3TW91c2VVcE91dHNpZGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTW91c2UgdXAgb3V0c2lkZS5cIik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl92aWV3SXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuZERyYWcoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX29uVmlld01vdXNlTW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSAmJiB0aGlzLl92aWV3SXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5fZHJhZ01vdmUoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX29uVmlld01vdXNlTW92ZU91dE9mV2luZG93ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlICYmIHRoaXMuX3ZpZXdJc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1vdXNlIHVwIG91dHNpZGUgb2Ygd2luZG93LlwiKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBuYW1lc3BhY2UoXCJmcmFtZXdvcmtcIikuU3RpY2t5RHJhZ1ZpZXdTY3JpcHQgPSBTdGlja3lEcmFnVmlld1NjcmlwdDtcbn0oKSk7XG4iLCJpbXBvcnQgKiBhcyBQSVhJIGZyb20gJ3BpeGkuanMnO1xud2luZG93W1wiUElYSVwiXSA9IFBJWEk7XG5cbmltcG9ydCAqIGFzIFRXRUVOIGZyb20gXCJAdHdlZW5qcy90d2Vlbi5qcy9kaXN0L3R3ZWVuLmNqcy5qc1wiO1xud2luZG93W1wiVFdFRU5cIl0gPSBUV0VFTjtcblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL25vZGVfbW9kdWxlcy9waXhpLXBhcnRpY2xlcy9hbWJpZW50LmQudHNcIiAvPlxuaW1wb3J0ICogYXMgcGFydGljbGVzIGZyb20gJ3BpeGktcGFydGljbGVzJztcbndpbmRvd1snUGFydGljbGVzRW1pdHRlciddID0gcGFydGljbGVzLkVtaXR0ZXI7IiwiKGZ1bmN0aW9uICh3aW5kb3cpIHtcbiAgICAvLyBKUyBjbGFzcyBleHRlbmRlciB0byBzaW11bGF0ZSBpbmhlcml0YW5jZS5cbiAgICB2YXIgZXh0ZW5kID0gZnVuY3Rpb24gKGNoaWxkLCBwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJlbnQgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IHdpbmRvdy5pbmNsdWRlKHBhcmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcCA9IHBhcmVudC5wcm90b3R5cGU7XG4gICAgICAgICAgICBjaGlsZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHApO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkLnByb3RvdHlwZSwgJ19fcGFyZW50Jywge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdGhlIGNvbnN0cnVjdG9yXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZC5wcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGNoaWxkXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFkZCBleHRlbmQgdG8gZWFjaCBjbGFzcyB0byBlYXNpbHkgZXh0ZW5kXG4gICAgICAgIC8vIGJ5IGNhbGxpbmcgTXlDbGFzcy5leHRlbmQoU3ViQ2xhc3MpXG4gICAgICAgIGNoaWxkLmV4dGVuZCA9IGZ1bmN0aW9uKHN1YkNsYXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmV4dGVuZChzdWJDbGFzcywgY2hpbGQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBjaGlsZC5wcm90b3R5cGU7XG4gICAgfTtcbiAgICB3aW5kb3cuZXh0ZW5kID0gZXh0ZW5kO1xuXG4gICAgLy8gSlMgY2xhc3MgZXh0ZW5kZXIgdG8gc2ltdWxhdGUgbWl4aW5zLlxuICAgIHZhciBtaXhpbiA9IGZ1bmN0aW9uICh0YXJnZXQsIHN1cGVyQ2xhc3MpIHtcbiAgICAgICAgaWYgKHRydWUgJiYgIXN1cGVyQ2xhc3MpIHtcbiAgICAgICAgICAgIHRocm93ICdEaWQgbm90IHN1cHBseSBhIHZhbGlkIG1peGluIGNsYXNzJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluY2x1ZGUgdXNpbmcgc3RyaW5nXG4gICAgICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgc3VwZXJDbGFzcyA9IHdpbmRvdy5pbmNsdWRlKHN1cGVyQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGV4aXN0ZW5jZSBvZiBwcm90b3R5cGVcbiAgICAgICAgaWYgKCFzdXBlckNsYXNzLnByb3RvdHlwZSkge1xuICAgICAgICAgICAgaWYgKHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAnVGhlIG1peGluIGNsYXNzIGRvZXMgbm90IGhhdmUgYSB2YWxpZCBwcm90b3lwZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93ICdubyBtaXhpbiBwcm90b3R5cGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vbG9vcCBvdmVyIG1peGluIHByb3RvdHlwZSB0byBhZGQgZnVuY3Rpb25zXG4gICAgICAgIHZhciBwID0gc3VwZXJDbGFzcy5wcm90b3R5cGU7XG5cbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBwKSB7XG4gICAgICAgICAgICAvLyBGb3IgdGhpbmdzIHRoYXQgd2Ugc2V0IHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAgICAgICAgICAgLy8gdmVyeSBpbXBvcnRhbnQgdGhhdCBlbnVtZXJhYmxlOnRydWUgZm9yIHRoZSBcbiAgICAgICAgICAgIC8vIGRlZmluZVByb3BlcnR5IG9wdGlvbnNcbiAgICAgICAgICAgIHZhciBwcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocCwgcHJvcCk7XG4gICAgICAgICAgICBpZiAocHJvcERlc2MpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wLCBwcm9wRGVzYyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNob3VsZCBjb3ZlciBhbGwgb3RoZXIgcHJvdG90eXBlIG1ldGhvZHMvcHJvcGVydGllc1xuICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHBbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FsbCBtaXhpbiBvbiB0YXJnZXQgYW5kIGFwcGx5IGFueSBhcmd1bWVudHNcbiAgICAgICAgc3VwZXJDbGFzcy5hcHBseSh0YXJnZXQsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikpO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICB3aW5kb3cubWl4aW4gPSBtaXhpbjtcblxuICAgIC8vIE9idGFpbiBhbiBvYmplY3QgYXR0YWNoZWQgYXMgYSBjaGlsZCBvZiBnbG9iYWwgJ3dpbmRvdycgb2JqZWN0LCB3aGVyZSBlYWNoIGRvdCAnLicgZGVub3RlcyBhIGRlc2NlbmRhbnQgaW5cbiAgICAvLyB0aGUgaGllcmFyY2h5IHVuZGVyICd3aW5kb3cnLlxuICAgIHZhciBpbmNsdWRlID0gZnVuY3Rpb24gKG5hbWVzcGFjZVN0cmluZywgcmVxdWlyZWQpIHtcbiAgICAgICAgdmFyIHBhcnRzID0gbmFtZXNwYWNlU3RyaW5nLnNwbGl0KCcuJyksXG4gICAgICAgICAgICBwYXJlbnQgPSB3aW5kb3csXG4gICAgICAgICAgICBjdXJyZW50UGFydCA9ICcnO1xuXG4gICAgICAgIHJlcXVpcmVkID0gcmVxdWlyZWQgIT09IHVuZGVmaW5lZCA/ICEhcmVxdWlyZWQgOiB0cnVlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBwYXJ0cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFwYXJlbnRbY3VycmVudFBhcnRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIlVuYWJsZSB0byBpbmNsdWRlICdcIiArIG5hbWVzcGFjZVN0cmluZyArIFwiJyBiZWNhdXNlIHRoZSBjb2RlIGlzIG5vdCBpbmNsdWRlZCBvciB0aGUgY2xhc3MgbmVlZHMgdG8gbG9hZGVkIHNvb25lci5cIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIlVuYWJsZSB0byBpbmNsdWRlICdcIiArIG5hbWVzcGFjZVN0cmluZyArIFwiJ1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudFtjdXJyZW50UGFydF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9O1xuICAgIHdpbmRvdy5pbmNsdWRlID0gaW5jbHVkZTtcblxuICAgIC8vIEFkZHMgYW4gb2JqZWN0IGFzIGEgZGVzY2VuZGFudCBvZiBnbG9iYWwgJ3dpbmRvdycgb2JqZWN0LCB3aGVyZSBlYWNoIGRvdCAnLicgZGVub3RlcyBhIGRlc2NlbmRhbnQgaW5cbiAgICAvLyB0aGUgaGllcmFyY2h5IHVuZGVyIHdpbmRvdy4gSWYgYSBkZXNjZW5kYW50IGluIHBhcnQgb2YgdGhlIG5hbWVzcGFjZSBzdHJpbmcgZG9lcyBub3QgZXhpc3QsIGl0IGlzIGNyZWF0ZWQuXG4gICAgdmFyIG5hbWVzcGFjZSA9IGZ1bmN0aW9uKG5hbWVzcGFjZVN0cmluZykge1xuICAgICAgICB2YXIgcGFydHMgPSBuYW1lc3BhY2VTdHJpbmcuc3BsaXQoJy4nKSxcbiAgICAgICAgICAgIHBhcmVudCA9IHdpbmRvdyxcbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0ID0gJyc7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHBhcnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50UGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAgICAgcGFyZW50W2N1cnJlbnRQYXJ0XSA9IHBhcmVudFtjdXJyZW50UGFydF0gfHwge307XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnRbY3VycmVudFBhcnRdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcbiAgICB3aW5kb3cubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXG4gICAgLy8gQWN0cyBsaWtlIFwiaW5zdGFuY2VvZlwiIGtleXdvcmQsIGJ1dCB3b3JrcyBmb3IgbWl4aW4nZWQgb2JqZWN0cy5cbiAgICAvLyAtIFVzYWdlOiB2YXIgb2JqID0gbmV3IFNvbWV0aGluZygpO1xuICAgIC8vICAgICAgICAgIGluc3RhbmNlT2Yob2JqLCBTb21ldGhpbmcpIHJldHVybnMgdHJ1ZS5cbiAgICB2YXIgaW5zdGFuY2VPZiA9IGZ1bmN0aW9uKG9iaiwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgLy8gRnJvbTogaHR0cDovL3dlYnJlZmxlY3Rpb24uYmxvZ3Nwb3QuY29tLmF1LzIwMDkvMDYvd2FpdC1tb21lbnQtamF2YXNjcmlwdC1kb2VzLXN1cHBvcnQuaHRtbFxuICAgICAgICBpZihvYmogaW5zdGFuY2VvZiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIHZhciBrLCBiID0gdHJ1ZSxcbiAgICAgICAgICAgIHBvID0gb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcbiAgICAgICAgICAgIHBjID0gY29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gICAgICAgIGZvcihrIGluIHBjKVxuICAgICAgICAgICAgYiA9IGIgJiYgayBpbiBwbztcblxuICAgICAgICByZXR1cm4gISFrICYmIGI7XG4gICAgfTtcbiAgICB3aW5kb3cuaW5zdGFuY2VPZiA9IGluc3RhbmNlT2Y7XG5cbiAgICAvLyBFeHBsaWNpdGx5IGNoZWNrIGEgdmFyaWFibGUgZG9lcyBub3QgY29udGFpbiBhIHZhbHVlIG9mIHVuZGVmaW5lZC5cbiAgICB2YXIgaXNEZWZpbmVkID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gICAgICAgIHJldHVybiAodHlwZW9mIHZhcmlhYmxlICE9PSBcInVuZGVmaW5lZFwiKTtcbiAgICB9O1xuICAgIHdpbmRvdy5pc0RlZmluZWQgPSBpc0RlZmluZWQ7XG5cbiAgICAvLyBGdW5jdGlvbiBjaGVja2VyIChqdXN0IGZvciBsb2xzKS5cbiAgICB2YXIgRlVOQ1RJT04gPSBcImZ1bmN0aW9uXCI7XG4gICAgdmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoRnVuY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgRnVuY3Rpb24gPT09IEZVTkNUSU9OKTtcbiAgICB9O1xuICAgIHdpbmRvdy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuICAgIC8vIE51bWJlciBjaGVja2VyLlxuICAgIHZhciBpc051bWJlciA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgbnVtYmVyID09PSBcIm51bWJlclwiKTtcbiAgICB9O1xuICAgIHdpbmRvdy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG4gICAgLy8gU3RyaW5nIGNoZWNrZXIuXG4gICAgdmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBzdHIgPT09IFwic3RyaW5nXCIpO1xuICAgIH07XG4gICAgd2luZG93LmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbiAgICB2YXIgaXNCb29sZWFuID0gZnVuY3Rpb24gKGJvb2xWYWwpIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgYm9vbFZhbCA9PT0gXCJib29sZWFuXCIpO1xuICAgIH07XG4gICAgd2luZG93LmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuICAgIC8vIE9iamVjdCBjaGVja2VyIChleGNsdWRlcyBudWxsIGFzIGFuIG9iamVjdCkuXG4gICAgdmFyIGlzT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gKG9iaiAhPT0gbnVsbCkgJiYgKHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIpO1xuICAgIH07XG4gICAgd2luZG93LmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbiAgICAvLyBDb252ZXJ0IGEgZmFsc2V5IHZhbHVlIHRvIG51bGwuXG4gICAgdmFyIG51bGxpZnkgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiAodmFsKSA/IHZhbCA6IG51bGw7XG4gICAgfTtcbiAgICB3aW5kb3cubnVsbGlmeSA9IG51bGxpZnk7XG5cbiAgICAvLyBSZWN1cnNpdmUgcHJvcGVydHkgY2hlY2tlciB3aGljaCBhdHRlbXB0cyB0byBvYnRhaW4gYSBwcm9wZXJ0eSBvciBzdWItcHJvcGVydHlcbiAgICAvLyBvZiBvYmplY3QgJ29iaicgYnkgc3RyaW5nLCBlLmcuIFwicHJvcDEucHJvcDIubWV0aG9kTmFtZVwiLiBJZiBvYmogaXMgbnVsbCwgb3IgYVxuICAgIC8vIG51bGwgcHJvcGVydHkgaXMgcmVhY2hlZCBhbG9uZyB0aGUgd2F5LCB0aGUgcmV0dXJuZWQgdmFsdWUgaXMgbnVsbC4gT3RoZXJ3aXNlIHRoZVxuICAgIC8vIHByb3BlcnR5IGlzIHJldHVybmVkLiBUaGlzIGZ1bmN0aW9uIGF0dGVtcHRzIHRvIHJlcGxpY2F0ZSBvcHRpb25hbHMsIGFuZCBjYW5cbiAgICAvLyByZXByZXNlbnQgYSBmb3JjZS11bndyYXAgaWYgJ3Rocm93RXJyb3JPbk51bGwnIGlzIHRydWUgKGRlZmF1bHRzIHRvIGZhbHNlKS5cbiAgICB2YXIgZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBwcm9wZXJ0eVN0cmluZywgdGhyb3dFcnJvck9uTnVsbCkge1xuICAgICAgICB0aHJvd0Vycm9yT25OdWxsID0gISF0aHJvd0Vycm9yT25OdWxsO1xuICAgICAgICB2YXIgZXJyb3JTdHJpbmcgPSBcIkNhbm5vdCBnZXQgcHJvcGVydHkgJ1wiICsgcHJvcGVydHlTdHJpbmcgKyBcIicuXCI7XG4gICAgICAgIHZhciBwYXJlbnQgPSBvYmo7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gKHByb3BlcnR5U3RyaW5nKSA/IHByb3BlcnR5U3RyaW5nLnNwbGl0KCcuJykgOiBbXTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50UGFydCA9IFwiXCI7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IChwYXJ0KSA/IHBhcmVudFtwYXJ0XSA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudCkgeyBicmVhazsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXJlbnQgJiYgdGhyb3dFcnJvck9uTnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JTdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbGlmeShwYXJlbnQpO1xuICAgIH07XG4gICAgd2luZG93LmdldFByb3BlcnR5ID0gZ2V0UHJvcGVydHk7XG5cbiAgICB3aW5kb3cuRW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIHdpbmRvdy5UcnVlRnVuY3Rpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xuICAgIHdpbmRvdy5GYWxzZUZ1bmN0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgd2luZG93Lk51bGxGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH07XG59KHdpbmRvdykpO1xuIiwiaW1wb3J0IEZhY3RvcnlIZWxwZXIgZnJvbSBcIi4vdXRpbHMvRmFjdG9yeUhlbHBlclwiO1xuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgQ29udGFpbmVyID0gaW5jbHVkZShcIlBJWEkuQ29udGFpbmVyXCIpO1xuXG4gICAgLy8gQ29udGFpbmVyIHZpZXcgd2l0aCB0aGUgYWJpbGl0eSB0byBzb3J0IGFkZGVkIGNoaWxkcmVuIGJhc2VkIG9uIGEgcHJlZGljYXRlXG4gICAgLy8gZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIGNoaWxkcmVuIGFyZSBzb3J0ZWQgYnkgdGhlaXIgekluZGV4LlxuICAgIHZhciBDb250YWluZXJWaWV3ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm90YXRpb246IDAuMCxcbiAgICAgICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgICAgICAgeDogMS4wLFxuICAgICAgICAgICAgICAgIHk6IDEuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBpdm90OiB7XG4gICAgICAgICAgICAgICAgeDogMC4wLFxuICAgICAgICAgICAgICAgIHk6IDAuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFscGhhOiAxLjAsXG4gICAgICAgICAgICBpc0ludGVyYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIG1hc2s6IG51bGwsXG4gICAgICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgICAgICBwcmVkaWNhdGU6IHRoaXMuX3NvcnRaSW5kZXhBc2MuYmluZCh0aGlzKVxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgQ29udGFpbmVyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgRmFjdG9yeUhlbHBlci5hcHBseUJhc2VDb25maWdUb1ZpZXcoZmluYWxDb25maWcsIHRoaXMpO1xuICAgIH07XG4gICAgdmFyIHMgPSBDb250YWluZXIucHJvdG90eXBlO1xuICAgIHZhciBwID0gZXh0ZW5kKENvbnRhaW5lclZpZXcsIENvbnRhaW5lcik7XG5cbiAgICBwLnBvc3RJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9wb3N0SW5pdEhlbHBlcih0aGlzKTtcbiAgICB9O1xuXG4gICAgcC5nZXRDaGlsZEJ5TmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBDb250YWluZXJWaWV3LmdldENoaWxkQnlOYW1lUmVjdXJzaXZlKHRoaXMsIG5hbWUpO1xuICAgIH07XG5cbiAgICBwLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkcmVuKCk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBvbmUgb3IgbW9yZSBjaGlsZHJlbiBpbiBvcmRlciBhcyBzcGVjaWZpZWQgYnkgdGhlIHByZWRpY2F0ZSBmdW5jdGlvbi5cbiAgICBwLmFkZENoaWxkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBjaGlsZHJlblRvQWRkID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICAgIGNoaWxkcmVuVG9BZGQuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRUb0FkZCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5jb21wdXRlT3JkZXJlZEluZGV4KGNoaWxkVG9BZGQpO1xuICAgICAgICAgICAgcy5hZGRDaGlsZEF0LmNhbGwodGhpcywgY2hpbGRUb0FkZCwgaW5kZXgpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGNoaWxkIG9iamVjdCBhdCBzcGVjaWZpZWQgaW5kZXguIFRoZSB6SW5kZXggb2YgdGhlIGFkZGVkIGNoaWxkIGlzIG1vZGlmaWVkXG4gICAgLy8gdG8gYmUgaGFsZndheSBiZXR3ZWVuIHRoZSB6SW5kZXggb2YgdGhlIHR3byBjaGlsZHJlbiBpdCBpcyBiZWluZyBpbnNlcnRlZCBiZXR3ZWVuLlxuICAgIHAuYWRkQ2hpbGRBdCA9IGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKCFjaGlsZCB8fCAoaW5kZXggPCAwKSB8fCAoaW5kZXggPiB0aGlzLmNoaWxkcmVuLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBhIHpJbmRleCB2YWx1ZSBoYWxmd2F5IGJldHdlZW4gdGhhdCBvZiB0aGlzLmNoaWxkcmVuW2luZGV4IC0gMV0gYW5kXG4gICAgICAgIC8vIHRoaXMuY2hpbGRyZW5baW5kZXhdLlxuICAgICAgICB2YXIgekluZGV4ID0gMDtcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGxvd2VySW5kZXggPSBNYXRoLmNsYW1wKChpbmRleCAtIDEpLCAwLCAodGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgICB2YXIgdXBwZXJJbmRleCA9IE1hdGguY2xhbXAoaW5kZXgsIDAsICh0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgIHZhciBsb3dlclpJbmRleCA9IHRoaXMuX2dldFpJbmRleCh0aGlzLmNoaWxkcmVuW2xvd2VySW5kZXhdKTtcbiAgICAgICAgICAgIHZhciB1cHBlclpJbmRleCA9IHRoaXMuX2dldFpJbmRleCh0aGlzLmNoaWxkcmVuW3VwcGVySW5kZXhdKTtcbiAgICAgICAgICAgIHZhciBkaWZmID0gKHVwcGVyWkluZGV4IC0gbG93ZXJaSW5kZXgpO1xuICAgICAgICAgICAgekluZGV4ID0gTWF0aC5mbG9vcihsb3dlclpJbmRleCArICgwLjUgKiBkaWZmKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC56SW5kZXggPSB6SW5kZXg7XG5cbiAgICAgICAgLy8gTm93IHdoZW4gdGhlIGNoaWxkIGlzIGFkZGVkLCB0aGUgekluZGV4IHZhbHVlcyB3aWxsIHN0aWxsIGJlIHNvcnRlZCBjb3JyZWN0bHkuXG4gICAgICAgIHMuYWRkQ2hpbGRBdC5jYWxsKHRoaXMsIGNoaWxkLCBpbmRleCk7XG4gICAgfTtcblxuICAgIC8vIFJlZnJlc2ggdGhlIG9yZGVyIGJhc2VkIHVzaW5nIHByZWRpY2F0ZSBmdW5jdGlvbi4gQ2FsbCB0aGlzIGlmIGEgY2hpbGQgLyBtdWx0aXBsZVxuICAgIC8vIGNoaWxkcmVuIHVwZGF0ZSB0aGVpciB6SW5kZXggdmFsdWUgaW4gdGhlIGN1cnJlbnQgZnJhbWUgdG8gcmUtc29ydCB0aGVtLlxuICAgIHAucmVmcmVzaE9yZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnNvcnQodGhpcy5wcmVkaWNhdGUpO1xuICAgIH07XG5cbiAgICAvLyBPYnRhaW4gdGhlIGluZGV4IGludG8gdGhlIGNoaWxkcmVuIGFycmF5IHdoaWNoIHRoZSBzcGVjaWZpZWQgY2hpbGQgd291bGQgYmVcbiAgICAvLyBsb2NhdGVkIGFjY29yZGluZyB0byB0aGUgcHJlZGljYXRlIGZ1bmN0aW9uLlxuICAgIHAuY29tcHV0ZU9yZGVyZWRJbmRleCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlICgoaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSAmJlxuICAgICAgICAgICAgKHRoaXMucHJlZGljYXRlKGNoaWxkLCB0aGlzLmNoaWxkcmVuW2ldKSA+PSAwKSkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpO1xuICAgIH07XG5cbiAgICBwLl9wb3N0SW5pdEltcGwgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIHAuX3Bvc3RJbml0SGVscGVyID0gZnVuY3Rpb24gKHZpZXcpIHtcbiAgICAgICAgaWYgKHZpZXcuY2hpbGRyZW4gJiYgdmlldy5jaGlsZHJlbi5sZW5ndGggJiYgdmlldy5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3N0SW5pdEhlbHBlcih2aWV3LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygdmlldy5fcG9zdEluaXRJbXBsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZpZXcuX3Bvc3RJbml0SW1wbCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIENvbnRhaW5lclZpZXcuZ2V0Q2hpbGRCeU5hbWVSZWN1cnNpdmUgPSBmdW5jdGlvbiAodmlldywgbmFtZSkge1xuICAgICAgICBpZiAodmlldy5jaGlsZHJlbiAmJiB2aWV3LmNoaWxkcmVuLmxlbmd0aCAmJiB2aWV3LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZFZpZXcgPSBDb250YWluZXJWaWV3LmdldENoaWxkQnlOYW1lUmVjdXJzaXZlKHZpZXcuY2hpbGRyZW5baV0sIG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZFZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkVmlldztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHZpZXcubmFtZSAmJiB2aWV3Lm5hbWUgPT09IG5hbWUpID8gdmlldyA6IG51bGw7XG4gICAgfTtcblxuICAgIENvbnRhaW5lclZpZXcudmlzaWJsZUNoaWxkcmVuID0gZnVuY3Rpb24gKHZpZXcsIHZpc2libGUpIHtcbiAgICAgICAgaWYgKHZpZXcuY2hpbGRyZW4gJiYgdmlldy5jaGlsZHJlbi5sZW5ndGggJiYgdmlldy5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2aWV3LmNoaWxkcmVuW2ldLnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgICAgICAgICAgIENvbnRhaW5lclZpZXcudmlzaWJsZUNoaWxkcmVuKHZpZXcuY2hpbGRyZW5baV0sIHZpc2libGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAuX3NvcnRaSW5kZXhBc2MgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgejEgPSB0aGlzLl9nZXRaSW5kZXgoYSk7XG4gICAgICAgIHZhciB6MiA9IHRoaXMuX2dldFpJbmRleChiKTtcbiAgICAgICAgcmV0dXJuICh6MSAtIHoyKTsgIC8vIEFzY2VuZGluZyBvcmRlci5cbiAgICB9O1xuXG4gICAgcC5fZ2V0WkluZGV4ID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiAoY2hpbGQgJiYgY2hpbGQuekluZGV4KSA/IGNoaWxkLnpJbmRleCA6IDA7XG4gICAgfTtcblxuICAgIG5hbWVzcGFjZShcImZyYW1ld29ya1wiKS5Db250YWluZXJWaWV3ID0gQ29udGFpbmVyVmlldztcbn0oKSk7XG4iLCJpbXBvcnQgRmFjdG9yeUhlbHBlciBmcm9tIFwiLi91dGlscy9GYWN0b3J5SGVscGVyXCI7XG4oZnVuY3Rpb24gKCkge1xuXHR2YXIgR3JhcGhpY3MgPSBpbmNsdWRlKFwiUElYSS5HcmFwaGljc1wiKTtcblx0dmFyIENvbG91clV0aWxzID0gaW5jbHVkZShcImZyYW1ld29yay5Db2xvdXJVdGlsc1wiKTtcblxuXHR2YXIgR3JhcGhpY3NWaWV3ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuXHRcdC8vIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnLlxuICAgICAgICB2YXIgZmluYWxDb25maWcgPSBPYmplY3QuZXh0ZW5kKHtcbiAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IDAuMCxcbiAgICAgICAgICAgICAgICB5OiAwLjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb3RhdGlvbjogMC4wLFxuICAgICAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgICAgICB4OiAxLjAsXG4gICAgICAgICAgICAgICAgeTogMS4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGl2b3Q6IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxwaGE6IDEuMCxcbiAgICAgICAgICAgIGlzSW50ZXJhY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgbWFzazogbnVsbCxcbiAgICAgICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgICAgIGNvbG91clRpbnQ6IFwiI2ZmZmZmZlwiICwgLy8gQWxsIGNvbG91cnMgaW4gdGhlIHZpZXcgYXJlIG1vZHVsYXRlZCB3aXRoIHRoaXMuXG4gICAgICAgICAgICB3aWR0aDowLFxuICAgICAgICAgICAgaGVpZ2h0OiAwXG5cbiAgICAgICAgfSwgY29uZmlnKTtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIHByb3BlcnRpZXMuXG4gICAgICAgIEdyYXBoaWNzLmNhbGwodGhpcyk7XG4gICAgICAgIEZhY3RvcnlIZWxwZXIuYXBwbHlCYXNlQ29uZmlnVG9WaWV3KGZpbmFsQ29uZmlnLCB0aGlzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMud2lkdGggPSBmaW5hbENvbmZpZy53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBmaW5hbENvbmZpZy5oZWlnaHQ7XG4gICAgICAgIHRoaXMudmlld0NvbmZpZyA9IGZpbmFsQ29uZmlnO1xuICAgICAgICB0aGlzLnRpbnQgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5jb2xvdXJUaW50KTtcblx0fTtcblx0dmFyIHMgPSBHcmFwaGljcy5wcm90b3R5cGU7XG5cdHZhciBwID0gZXh0ZW5kKEdyYXBoaWNzVmlldywgR3JhcGhpY3MpO1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkdyYXBoaWNzVmlldyA9IEdyYXBoaWNzVmlldztcbn0oKSk7XG4iLCJpbXBvcnQgRmFjdG9yeUhlbHBlciBmcm9tIFwiLi91dGlscy9GYWN0b3J5SGVscGVyXCI7XG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBHcmFwaGljcyA9IGluY2x1ZGUoXCJQSVhJLkdyYXBoaWNzXCIpO1xuICAgIHZhciBDb2xvdXJVdGlscyA9IGluY2x1ZGUoXCJmcmFtZXdvcmsuQ29sb3VyVXRpbHNcIik7XG5cbiAgICAvLyBEaXNwbGF5cyBhIHBpZWNld2lzZSBCZXppZXIgY3VydmUsIG9wdGlvbmFsbHkgd2l0aCBpdHMgY29udHJvbCBwb2ludHMgYW5kIGluL291dCB0YW5nZW50cy5cbiAgICAvLyBUaGVzZSB0aHJlZSBjb21wb25lbnRzIGNhbiBiZSB0b2dnbGVkIG9uIG9yIG9mZiB1c2luZyB0aGVpciBhc3NvY2lhdGVkIHZpc2liaWxpdHkgc2V0dGluZ3MuXG4gICAgLy8gVGhlIGlucHV0IHZlcnRpY2VzIGFyZSByZXF1aXJlZCB0byBiZSBpbiB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIEJlemllckN1cnZlIGNsYXNzIHBvaW50cy5cbiAgICB2YXIgQ3VydmVWaWV3ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm90YXRpb246IDAuMCxcbiAgICAgICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgICAgICAgeDogMS4wLFxuICAgICAgICAgICAgICAgIHk6IDEuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBpdm90OiB7XG4gICAgICAgICAgICAgICAgeDogMC4wLFxuICAgICAgICAgICAgICAgIHk6IDAuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFscGhhOiAxLjAsXG4gICAgICAgICAgICBpc0ludGVyYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzVmlzaWJsZTogdHJ1ZSwgIC8vIFJvb3QgY29udGFpbmVyIHZpc2liaWxpdHkuXG4gICAgICAgICAgICBtYXNrOiBudWxsLFxuICAgICAgICAgICAgekluZGV4OiAwLFxuICAgICAgICAgICAgY29sb3VyVGludDogXCIjZmZmZmZmXCIsICAvLyBBbGwgY29sb3VycyBpbiB0aGUgdmlldyBhcmUgbW9kdWxhdGVkIHdpdGggdGhpcy5cbiAgICAgICAgICAgIGN1cnZlQ29sb3VyOiBcIiNmZmZmZmZcIixcbiAgICAgICAgICAgIGN1cnZlQWxwaGE6IDEuMCxcbiAgICAgICAgICAgIGN1cnZlV2lkdGg6IDEuMCxcbiAgICAgICAgICAgIGN1cnZlSXNWaXNpYmxlOiB0cnVlLCAgLy8gU3BlY2lmaWNhbGx5IGlmIHRoZSBjaGlsZCBjdXJ2ZSBpcyB2aXNpYmxlLlxuICAgICAgICAgICAgYXBwcm94aW1hdGVkUG9pbnRzQ29sb3VyOiBcIiMwMGZmMDBcIixcbiAgICAgICAgICAgIGFwcHJveGltYXRlZFBvaW50c0FscGhhOiAxLjAsXG4gICAgICAgICAgICBhcHByb3hpbWF0ZWRQb2ludHNSYWRpdXM6IDEwLjAsXG4gICAgICAgICAgICBhcHByb3hpbWF0ZWRQb2ludHNBcmVWaXNpYmxlOiBmYWxzZSwgIC8vIFNwZWNpZmljYWxseSBpZiB0aGUgY2hpbGQgYXBwcm94aW1hdGVkIHBvaW50cyBhcmUgdmlzaWJsZS5cbiAgICAgICAgICAgIGNvbnRyb2xQb2ludENvbG91cjogXCIjZmYwMDAwXCIsXG4gICAgICAgICAgICBjb250cm9sUG9pbnRBbHBoYTogMS4wLFxuICAgICAgICAgICAgY29udHJvbFBvaW50UmFkaXVzOiAxMC4wLFxuICAgICAgICAgICAgY29udHJvbFBvaW50c0FyZVZpc2libGU6IGZhbHNlLCAgLy8gU3BlY2lmaWNhbGx5IGlmIHRoZSBjaGlsZCBjb250cm9sIHBvaW50cyBhcmUgdmlzaWJsZS5cbiAgICAgICAgICAgIHRhbmdlbnRDb2xvdXI6IFwiIzAwMDBmZlwiLFxuICAgICAgICAgICAgdGFuZ2VudEFscGhhOiAxLjAsXG4gICAgICAgICAgICB0YW5nZW50V2lkdGg6IDEuMCxcbiAgICAgICAgICAgIHRhbmdlbnRzQXJlVmlzaWJsZTogZmFsc2UsICAvLyBTcGVjaWZpY2FsbHkgaWYgdGhlIGNoaWxkIHRhbmdlbnRzIGFyZSB2aXNpYmxlLlxuICAgICAgICAgICAgdmVydGV4TGlzdDogW10sXG4gICAgICAgICAgICBwcmVjb21wdXRlZExVVDogW10gIC8vIEZvciBCZXppZXJDdXJ2ZUFwcHJveCBvYmplY3RzLlxuICAgICAgICB9LCBjb25maWcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgcHJvcGVydGllcy5cbiAgICAgICAgR3JhcGhpY3MuY2FsbCh0aGlzKTtcblxuICAgICAgICBGYWN0b3J5SGVscGVyLmFwcGx5QmFzZUNvbmZpZ1RvVmlldyhmaW5hbENvbmZpZywgdGhpcyk7XG5cbiAgICAgICAgdGhpcy50aW50ID0gQ29sb3VyVXRpbHMuY29sb3VyVG9OdW1iZXIoZmluYWxDb25maWcuY29sb3VyVGludCk7XG4gICAgICAgIHRoaXMuY3VydmVDb2xvdXIgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5jdXJ2ZUNvbG91cik7XG4gICAgICAgIHRoaXMuY3VydmVBbHBoYSA9IGZpbmFsQ29uZmlnLmN1cnZlQWxwaGE7XG4gICAgICAgIHRoaXMuY3VydmVXaWR0aCA9IGZpbmFsQ29uZmlnLmN1cnZlV2lkdGg7XG4gICAgICAgIHRoaXMuY3VydmVJc1Zpc2libGUgPSBmaW5hbENvbmZpZy5jdXJ2ZUlzVmlzaWJsZTtcbiAgICAgICAgdGhpcy5hcHByb3hpbWF0ZWRQb2ludHNDb2xvdXIgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5hcHByb3hpbWF0ZWRQb2ludHNDb2xvdXIpO1xuICAgICAgICB0aGlzLmFwcHJveGltYXRlZFBvaW50c0FscGhhID0gZmluYWxDb25maWcuYXBwcm94aW1hdGVkUG9pbnRzQWxwaGE7XG4gICAgICAgIHRoaXMuYXBwcm94aW1hdGVkUG9pbnRzUmFkaXVzID0gZmluYWxDb25maWcuYXBwcm94aW1hdGVkUG9pbnRzUmFkaXVzO1xuICAgICAgICB0aGlzLmFwcHJveGltYXRlZFBvaW50c0FyZVZpc2libGUgPSBmaW5hbENvbmZpZy5hcHByb3hpbWF0ZWRQb2ludHNBcmVWaXNpYmxlO1xuICAgICAgICB0aGlzLmNvbnRyb2xQb2ludENvbG91ciA9IENvbG91clV0aWxzLmNvbG91clRvTnVtYmVyKGZpbmFsQ29uZmlnLmNvbnRyb2xQb2ludENvbG91cik7XG4gICAgICAgIHRoaXMuY29udHJvbFBvaW50QWxwaGEgPSBmaW5hbENvbmZpZy5jb250cm9sUG9pbnRBbHBoYTtcbiAgICAgICAgdGhpcy5jb250cm9sUG9pbnRSYWRpdXMgPSBmaW5hbENvbmZpZy5jb250cm9sUG9pbnRSYWRpdXM7XG4gICAgICAgIHRoaXMuY29udHJvbFBvaW50c0FyZVZpc2libGUgPSBmaW5hbENvbmZpZy5jb250cm9sUG9pbnRzQXJlVmlzaWJsZTtcbiAgICAgICAgdGhpcy50YW5nZW50Q29sb3VyID0gQ29sb3VyVXRpbHMuY29sb3VyVG9OdW1iZXIoZmluYWxDb25maWcudGFuZ2VudENvbG91cik7XG4gICAgICAgIHRoaXMudGFuZ2VudEFscGhhID0gZmluYWxDb25maWcudGFuZ2VudEFscGhhO1xuICAgICAgICB0aGlzLnRhbmdlbnRXaWR0aCA9IGZpbmFsQ29uZmlnLnRhbmdlbnRXaWR0aDtcbiAgICAgICAgdGhpcy50YW5nZW50c0FyZVZpc2libGUgPSBmaW5hbENvbmZpZy50YW5nZW50c0FyZVZpc2libGU7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGNoaWxkIGNhbnZhc2VzLlxuICAgICAgICB0aGlzLl9jdXJ2ZSA9IG5ldyBHcmFwaGljcygpO1xuICAgICAgICB0aGlzLl9hcHByb3hpbWF0ZWRQb2ludHMgPSBuZXcgR3JhcGhpY3MoKTtcbiAgICAgICAgdGhpcy5fY29udHJvbFBvaW50cyA9IG5ldyBHcmFwaGljcygpO1xuICAgICAgICB0aGlzLl90YW5nZW50cyA9IG5ldyBHcmFwaGljcygpO1xuXG4gICAgICAgIHRoaXMuX2N1cnZlLnZpc2libGUgPSB0aGlzLmN1cnZlSXNWaXNpYmxlO1xuICAgICAgICB0aGlzLl9hcHByb3hpbWF0ZWRQb2ludHMudmlzaWJsZSA9IHRoaXMuYXBwcm94aW1hdGVkUG9pbnRzQXJlVmlzaWJsZTtcbiAgICAgICAgdGhpcy5fY29udHJvbFBvaW50cy52aXNpYmxlID0gdGhpcy5jb250cm9sUG9pbnRzQXJlVmlzaWJsZTtcbiAgICAgICAgdGhpcy5fdGFuZ2VudHMudmlzaWJsZSA9IHRoaXMudGFuZ2VudHNBcmVWaXNpYmxlO1xuXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fY3VydmUpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuX3RhbmdlbnRzKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9hcHByb3hpbWF0ZWRQb2ludHMpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuX2NvbnRyb2xQb2ludHMpO1xuXG4gICAgICAgIC8vIERyYXcgdGhlIHByaW1pdGl2ZSB0byB0aGUgY29udGFpbmVyLlxuICAgICAgICB0aGlzLl92ZXJ0ZXhMaXN0ID0gZmluYWxDb25maWcudmVydGV4TGlzdDtcbiAgICAgICAgdGhpcy5fcHJlY29tcHV0ZWRMVVQgPSBmaW5hbENvbmZpZy5wcmVjb21wdXRlZExVVDtcbiAgICAgICAgdGhpcy5fcmVmcmVzaENhbnZhcygpO1xuXG4gICAgfTtcbiAgICB2YXIgcyA9IEdyYXBoaWNzLnByb3RvdHlwZTtcbiAgICB2YXIgcCA9IGV4dGVuZChDdXJ2ZVZpZXcsIEdyYXBoaWNzKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcInZlcnRleExpc3RcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdWZXJ0ZXhMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLl92ZXJ0ZXhMaXN0ID0gbmV3VmVydGV4TGlzdDtcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hDYW52YXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmVydGV4TGlzdDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwicHJlY29tcHV0ZWRMVVRcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdQcmVjb21wdXRlZExVVCkge1xuICAgICAgICAgICAgdGhpcy5fcHJlY29tcHV0ZWRMVVQgPSBuZXdQcmVjb21wdXRlZExVVDtcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hDYW52YXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJlY29tcHV0ZWRMVVQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHAuX3JlZnJlc2hDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2N1cnZlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX2FwcHJveGltYXRlZFBvaW50cy5jbGVhcigpO1xuICAgICAgICB0aGlzLl9jb250cm9sUG9pbnRzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX3RhbmdlbnRzLmNsZWFyKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLl92ZXJ0ZXhMaXN0IHx8XG4gICAgICAgICAgICAhdGhpcy5fdmVydGV4TGlzdC5sZW5ndGggfHxcbiAgICAgICAgICAgICh0aGlzLl92ZXJ0ZXhMaXN0Lmxlbmd0aCA8IDQpIHx8XG4gICAgICAgICAgICAodGhpcy5fdmVydGV4TGlzdC5sZW5ndGggJSAzICE9PSAxKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBzdGFydEluZGV4O1xuICAgICAgICB2YXIgY29udHJvbFBvaW50MTtcbiAgICAgICAgdmFyIGNvbnRyb2xQb2ludDI7XG4gICAgICAgIHZhciBlbmRQb2ludDtcbiAgICAgICAgdmFyIGN1cnZlU2VnbWVudENvdW50ID0gTWF0aC5mbG9vcih0aGlzLl92ZXJ0ZXhMaXN0Lmxlbmd0aCAvIDMpO1xuXG4gICAgICAgIC8vIEN1cnZlLlxuICAgICAgICB0aGlzLl9jdXJ2ZS5saW5lU3R5bGUodGhpcy5jdXJ2ZVdpZHRoLCB0aGlzLmN1cnZlQ29sb3VyLCB0aGlzLmN1cnZlQWxwaGEpO1xuICAgICAgICB0aGlzLl9jdXJ2ZS5tb3ZlVG8odGhpcy5fdmVydGV4TGlzdFswXS54LCB0aGlzLl92ZXJ0ZXhMaXN0WzBdLnkpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY3VydmVTZWdtZW50Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgc3RhcnRJbmRleCA9IChpICogMyk7XG4gICAgICAgICAgICBjb250cm9sUG9pbnQxID0gdGhpcy5fdmVydGV4TGlzdFtzdGFydEluZGV4ICsgMV07XG4gICAgICAgICAgICBjb250cm9sUG9pbnQyID0gdGhpcy5fdmVydGV4TGlzdFtzdGFydEluZGV4ICsgMl07XG4gICAgICAgICAgICBlbmRQb2ludCA9IHRoaXMuX3ZlcnRleExpc3Rbc3RhcnRJbmRleCArIDNdO1xuICAgICAgICAgICAgdGhpcy5fY3VydmUuYmV6aWVyQ3VydmVUbyhjb250cm9sUG9pbnQxLngsIGNvbnRyb2xQb2ludDEueSxcbiAgICAgICAgICAgICAgICBjb250cm9sUG9pbnQyLngsIGNvbnRyb2xQb2ludDIueSxcbiAgICAgICAgICAgICAgICBlbmRQb2ludC54LCBlbmRQb2ludC55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExvb2t1cCB0YWJsZSBwb2ludHMgKGlmIHNwZWNpZmllZCkuXG4gICAgICAgIGlmICh0aGlzLl9wcmVjb21wdXRlZExVVCkge1xuICAgICAgICAgICAgdGhpcy5fYXBwcm94aW1hdGVkUG9pbnRzLmJlZ2luRmlsbCh0aGlzLmFwcHJveGltYXRlZFBvaW50c0NvbG91ciwgdGhpcy5hcHByb3hpbWF0ZWRQb2ludHNBbHBoYSk7XG4gICAgICAgICAgICB0aGlzLl9hcHByb3hpbWF0ZWRQb2ludHMubGluZVN0eWxlKDEsIHRoaXMuYXBwcm94aW1hdGVkUG9pbnRzQ29sb3VyLCB0aGlzLmFwcHJveGltYXRlZFBvaW50c0FscGhhKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLl9wcmVjb21wdXRlZExVVC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FwcHJveGltYXRlZFBvaW50cy5kcmF3Q2lyY2xlKHRoaXMuX3ByZWNvbXB1dGVkTFVUW2ldLngsIHRoaXMuX3ByZWNvbXB1dGVkTFVUW2ldLnksIHRoaXMuYXBwcm94aW1hdGVkUG9pbnRzUmFkaXVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2FwcHJveGltYXRlZFBvaW50cy5lbmRGaWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUYW5nZW50cy5cbiAgICAgICAgdGhpcy5fdGFuZ2VudHMubGluZVN0eWxlKHRoaXMudGFuZ2VudFdpZHRoLCB0aGlzLnRhbmdlbnRDb2xvdXIsIHRoaXMudGFuZ2VudEFscGhhKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGN1cnZlU2VnbWVudENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggPSAoaSAqIDMpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0UG9pbnQgPSB0aGlzLl92ZXJ0ZXhMaXN0W3N0YXJ0SW5kZXhdO1xuICAgICAgICAgICAgY29udHJvbFBvaW50MSA9IHRoaXMuX3ZlcnRleExpc3Rbc3RhcnRJbmRleCArIDFdO1xuICAgICAgICAgICAgY29udHJvbFBvaW50MiA9IHRoaXMuX3ZlcnRleExpc3Rbc3RhcnRJbmRleCArIDJdO1xuICAgICAgICAgICAgZW5kUG9pbnQgPSB0aGlzLl92ZXJ0ZXhMaXN0W3N0YXJ0SW5kZXggKyAzXTtcblxuICAgICAgICAgICAgdGhpcy5fdGFuZ2VudHMubW92ZVRvKHN0YXJ0UG9pbnQueCwgc3RhcnRQb2ludC55KTtcbiAgICAgICAgICAgIHRoaXMuX3RhbmdlbnRzLmxpbmVUbyhjb250cm9sUG9pbnQxLngsIGNvbnRyb2xQb2ludDEueSk7XG5cbiAgICAgICAgICAgIHRoaXMuX3RhbmdlbnRzLm1vdmVUbyhjb250cm9sUG9pbnQyLngsIGNvbnRyb2xQb2ludDIueSk7XG4gICAgICAgICAgICB0aGlzLl90YW5nZW50cy5saW5lVG8oZW5kUG9pbnQueCwgZW5kUG9pbnQueSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb250cm9sIHBvaW50cy5cbiAgICAgICAgdGhpcy5fY29udHJvbFBvaW50cy5iZWdpbkZpbGwodGhpcy5jb250cm9sUG9pbnRDb2xvdXIsIHRoaXMuY29udHJvbFBvaW50QWxwaGEpO1xuICAgICAgICB0aGlzLl9jb250cm9sUG9pbnRzLmxpbmVTdHlsZSgxLCB0aGlzLmNvbnRyb2xQb2ludENvbG91ciwgdGhpcy5jb250cm9sUG9pbnRBbHBoYSk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLl92ZXJ0ZXhMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sUG9pbnRzLmRyYXdDaXJjbGUodGhpcy5fdmVydGV4TGlzdFtpXS54LCB0aGlzLl92ZXJ0ZXhMaXN0W2ldLnksIHRoaXMuY29udHJvbFBvaW50UmFkaXVzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb250cm9sUG9pbnRzLmVuZEZpbGwoKTtcbiAgICB9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkN1cnZlVmlldyA9IEN1cnZlVmlldztcbn0oKSk7XG4iLCJpbXBvcnQgRmFjdG9yeUhlbHBlciBmcm9tIFwiLi91dGlscy9GYWN0b3J5SGVscGVyXCI7XG4oZnVuY3Rpb24gKCkge1xuXHR2YXIgR3JhcGhpY3MgPSBpbmNsdWRlKFwiUElYSS5HcmFwaGljc1wiKTtcblx0dmFyIENvbG91clV0aWxzID0gaW5jbHVkZShcImZyYW1ld29yay5Db2xvdXJVdGlsc1wiKTtcblxuICAgIC8vIERpc3BsYXlzIGEgcGllY2V3aXNlIGxpbmVhciBjdXJ2ZSwgb3B0aW9uYWxseSB3aXRoIHRoZSBwb2ludHMgdGhhdCBtYWtlIHVwIHRoZSBsaW5lLiBUaGVzZVxuICAgIC8vIHR3byBjb21wb25lbnRzIGNhbiBiZSB0b2dnbGVkIG9uIG9yIG9mZiB1c2luZyB0aGVpciBhc3NvY2lhdGVkIHZpc2liaWxpdHkgc2V0dGluZ3MuXG5cdHZhciBMaW5lVmlldyA9IGZ1bmN0aW9uIChjb25maWcpIHtcblx0XHQvLyBPdmVycmlkZSBkZWZhdWx0IGNvbmZpZy5cbiAgICAgICAgdmFyIGZpbmFsQ29uZmlnID0gT2JqZWN0LmV4dGVuZCh7XG4gICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiAwLjAsXG4gICAgICAgICAgICAgICAgeTogMC4wXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm90YXRpb246IDAuMCxcbiAgICAgICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgICAgICAgeDogMS4wLFxuICAgICAgICAgICAgICAgIHk6IDEuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBpdm90OiB7XG4gICAgICAgICAgICAgICAgeDogMC4wLFxuICAgICAgICAgICAgICAgIHk6IDAuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFscGhhOiAxLjAsXG4gICAgICAgICAgICBpc0ludGVyYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzVmlzaWJsZTogdHJ1ZSwgIC8vIFJvb3QgY29udGFpbmVyIHZpc2liaWxpdHkuXG4gICAgICAgICAgICBtYXNrOiBudWxsLFxuICAgICAgICAgICAgekluZGV4OiAwLFxuICAgICAgICAgICAgY29sb3VyVGludDogXCIjZmZmZmZmXCIsICAvLyBBbGwgY29sb3VycyBpbiB0aGUgdmlldyBhcmUgbW9kdWxhdGVkIHdpdGggdGhpcy5cbiAgICAgICAgICAgIGxpbmVDb2xvdXI6IFwiI2ZmZmZmZlwiLFxuICAgICAgICAgICAgbGluZUFscGhhOiAxLjAsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDEuMCxcbiAgICAgICAgICAgIGxpbmVJc1Zpc2libGU6IHRydWUsICAvLyBTcGVjaWZpY2FsbHkgaWYgdGhlIGNoaWxkIGxpbmUgaXMgdmlzaWJsZS5cbiAgICAgICAgICAgIHBvaW50c0NvbG91cjogXCIjMDBmZjAwXCIsXG4gICAgICAgICAgICBwb2ludHNBbHBoYTogMS4wLFxuICAgICAgICAgICAgcG9pbnRzUmFkaXVzOiAxMC4wLFxuICAgICAgICAgICAgcG9pbnRzQXJlVmlzaWJsZTogZmFsc2UsICAvLyBTcGVjaWZpY2FsbHkgaWYgdGhlIGNoaWxkIHBvaW50cyBhcmUgdmlzaWJsZS5cbiAgICAgICAgICAgIHZlcnRleExpc3Q6IFtdXG4gICAgICAgIH0sIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwcm9wZXJ0aWVzLlxuICAgICAgICBHcmFwaGljcy5jYWxsKHRoaXMpO1xuXG4gICAgICAgIEZhY3RvcnlIZWxwZXIuYXBwbHlCYXNlQ29uZmlnVG9WaWV3KGZpbmFsQ29uZmlnLCB0aGlzKTtcblxuICAgICAgICB0aGlzLnRpbnQgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5jb2xvdXJUaW50KTtcbiAgICAgICAgdGhpcy5saW5lQ29sb3VyID0gQ29sb3VyVXRpbHMuY29sb3VyVG9OdW1iZXIoZmluYWxDb25maWcubGluZUNvbG91cik7XG4gICAgICAgIHRoaXMubGluZUFscGhhID0gZmluYWxDb25maWcubGluZUFscGhhO1xuICAgICAgICB0aGlzLmxpbmVXaWR0aCA9IGZpbmFsQ29uZmlnLmxpbmVXaWR0aDtcbiAgICAgICAgdGhpcy5saW5lSXNWaXNpYmxlID0gZmluYWxDb25maWcubGluZUlzVmlzaWJsZTtcbiAgICAgICAgdGhpcy5wb2ludHNDb2xvdXIgPSBDb2xvdXJVdGlscy5jb2xvdXJUb051bWJlcihmaW5hbENvbmZpZy5wb2ludHNDb2xvdXIpO1xuICAgICAgICB0aGlzLnBvaW50c0FscGhhID0gZmluYWxDb25maWcucG9pbnRzQWxwaGE7XG4gICAgICAgIHRoaXMucG9pbnRzUmFkaXVzID0gZmluYWxDb25maWcucG9pbnRzUmFkaXVzO1xuICAgICAgICB0aGlzLnBvaW50c0FyZVZpc2libGUgPSBmaW5hbENvbmZpZy5wb2ludHNBcmVWaXNpYmxlO1xuXG4gICAgICAgIC8vIENyZWF0ZSBjaGlsZCBjYW52YXNlcy5cbiAgICAgICAgdGhpcy5fbGluZSA9IG5ldyBHcmFwaGljcygpO1xuICAgICAgICB0aGlzLl9wb2ludHMgPSBuZXcgR3JhcGhpY3MoKTtcblxuICAgICAgICB0aGlzLl9saW5lLnZpc2libGUgPSB0aGlzLmxpbmVJc1Zpc2libGU7XG4gICAgICAgIHRoaXMuX3BvaW50cy52aXNpYmxlID0gdGhpcy5wb2ludHNBcmVWaXNpYmxlO1xuXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fbGluZSk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fcG9pbnRzKTtcblxuXHRcdC8vIERyYXcgdGhlIHByaW1pdGl2ZSB0byB0aGUgY29udGFpbmVyLlxuICAgICAgICB0aGlzLl92ZXJ0ZXhMaXN0ID0gZmluYWxDb25maWcudmVydGV4TGlzdDtcbiAgICAgICAgdGhpcy5fcmVmcmVzaENhbnZhcygpO1xuXG5cdH07XG5cdHZhciBzID0gR3JhcGhpY3MucHJvdG90eXBlO1xuXHR2YXIgcCA9IGV4dGVuZChMaW5lVmlldywgR3JhcGhpY3MpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwidmVydGV4TGlzdFwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld1ZlcnRleExpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZlcnRleExpc3QgPSBuZXdWZXJ0ZXhMaXN0O1xuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaENhbnZhcygpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92ZXJ0ZXhMaXN0O1xuICAgICAgICB9XG4gICAgfSk7XG5cblx0cC5fcmVmcmVzaENhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbGluZS5jbGVhcigpO1xuICAgICAgICB0aGlzLl9wb2ludHMuY2xlYXIoKTtcblxuXHRcdGlmICghdGhpcy5fdmVydGV4TGlzdCB8fFxuICAgICAgICAgICAgIXRoaXMuX3ZlcnRleExpc3QubGVuZ3RoIHx8XG4gICAgICAgICAgICAodGhpcy5fdmVydGV4TGlzdC5sZW5ndGggPCAyKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuXHRcdH1cblxuICAgICAgICAvLyBMaW5lLlxuICAgICAgICB0aGlzLl9saW5lLmxpbmVTdHlsZSh0aGlzLmxpbmVXaWR0aCwgdGhpcy5saW5lQ29sb3VyLCB0aGlzLmxpbmVBbHBoYSk7XG4gICAgICAgIHRoaXMuX2xpbmUubW92ZVRvKHRoaXMuX3ZlcnRleExpc3RbMF0ueCwgdGhpcy5fdmVydGV4TGlzdFswXS55KTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IHRoaXMuX3ZlcnRleExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbmUubGluZVRvKHRoaXMuX3ZlcnRleExpc3RbaV0ueCwgdGhpcy5fdmVydGV4TGlzdFtpXS55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBvaW50cy5cbiAgICAgICAgdGhpcy5fcG9pbnRzLmJlZ2luRmlsbCh0aGlzLnBvaW50c0NvbG91ciwgdGhpcy5wb2ludHNBbHBoYSk7XG4gICAgICAgIHRoaXMuX3BvaW50cy5saW5lU3R5bGUoMSwgdGhpcy5wb2ludHNDb2xvdXIsIHRoaXMucG9pbnRzQWxwaGEpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5fdmVydGV4TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcG9pbnRzLmRyYXdDaXJjbGUodGhpcy5fdmVydGV4TGlzdFtpXS54LCB0aGlzLl92ZXJ0ZXhMaXN0W2ldLnksIHRoaXMucG9pbnRzUmFkaXVzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wb2ludHMuZW5kRmlsbCgpO1xuXHR9O1xuXG4gICAgbmFtZXNwYWNlKFwiZnJhbWV3b3JrXCIpLkxpbmVWaWV3ID0gTGluZVZpZXc7XG59KCkpO1xuIiwiaW1wb3J0IHsgQXBwbGljYXRpb24sIFBvaW50IH0gZnJvbSBcInBpeGkuanNcIjtcbmltcG9ydCB7IFNhZmVTY2FsZU1hbmFnZXIgfSBmcm9tIFwic3ByaW5ncm9sbFwiO1xuXG5leHBvcnQgY2xhc3MgU2l6ZU1hbmFnZXJDb25maWcge1xuICAgIHBpeGlBcHA6IEFwcGxpY2F0aW9uO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgc2FmZVdpZHRoOiBudW1iZXI7XG4gICAgc2FmZUhlaWdodDogbnVtYmVyO1xuICAgIHJlc2l6ZUNhbGxiYWNrPzogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkO1xufVxuZXhwb3J0IHR5cGUgVmlld0FyZWFSZWN0ID0ge1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBsZWZ0OiBudW1iZXI7XG4gICAgcmlnaHQ6IG51bWJlcjtcbiAgICB0b3A6IG51bWJlcjtcbiAgICBib3R0b206IG51bWJlcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU2NhbGVFdmVudCB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBzY2FsZTogUG9pbnQ7XG4gICAgc2NhbGVSYXRpbzogbnVtYmVyO1xuICAgIHZpZXdBcmVhOiBWaWV3QXJlYVJlY3Q7XG59XG5leHBvcnQgdHlwZSBTY2FsZUNhbGxiYWNrID0gKGV2ZW50OiBTY2FsZUV2ZW50KSA9PiB2b2lkO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaXplTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBwaXhpQXBwOiBBcHBsaWNhdGlvbjtcbiAgICBwcml2YXRlIHNjYWxlTWFuYWdlcjogU2FmZVNjYWxlTWFuYWdlcjtcbiAgICBwcml2YXRlIHJlc2l6ZUNhbGxiYWNrOiAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSBoZWlnaHQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHdpZHRoOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IFNpemVNYW5hZ2VyQ29uZmlnKSB7XG4gICAgICAgIHRoaXMucGl4aUFwcCA9IGNvbmZpZy5waXhpQXBwO1xuICAgICAgICB0aGlzLnJlc2l6ZUNhbGxiYWNrID0gY29uZmlnLnJlc2l6ZUNhbGxiYWNrO1xuXG4gICAgICAgIHRoaXMud2lkdGggPSBjb25maWcud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY29uZmlnLmhlaWdodDtcblxuICAgICAgICB0aGlzLnNjYWxlTWFuYWdlciA9IG5ldyBTYWZlU2NhbGVNYW5hZ2VyKHtcbiAgICAgICAgICAgIHdpZHRoOiBjb25maWcud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGNvbmZpZy5oZWlnaHQsXG4gICAgICAgICAgICBzYWZlV2lkdGg6IGNvbmZpZy5zYWZlV2lkdGgsXG4gICAgICAgICAgICBzYWZlSGVpZ2h0OiBjb25maWcuc2FmZUhlaWdodCxcbiAgICAgICAgICAgIGNhbGxiYWNrOiB0aGlzLm9uUmVzaXplXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE92ZXJyaWRlIFJlc2l6ZXJIZWxwZXIgbWV0aG9kIHRvIGdldCB3aWR0aCBhbmQgaGVpZ2h0LlxuICAgICAgICBpZiAoKHRoaXMuc2NhbGVNYW5hZ2VyIGFzIGFueSkucmVzaXplcil7XG4gICAgICAgICAgICAodGhpcy5zY2FsZU1hbmFnZXIgYXMgYW55KS5yZXNpemVyLmdldFdpbmRvd1Jlc29sdXRpb24gPSAoKT0+e1xuICAgICAgICAgICAgICAgIGlmICghIW5hdmlnYXRvci5wbGF0Zm9ybSAmJiAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgd2lkdGg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgaGVpZ2h0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCwgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zY2FsZU1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2NhbGVNYW5hZ2VyLmRpc2FibGUoKTtcbiAgICAgICAgICAgIHRoaXMuc2NhbGVNYW5hZ2VyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzaXplQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLnBpeGlBcHAgPSBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25SZXNpemU6IGFueSA9IChldmVudDogU2NhbGVFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBsZXQgcmVuZGVyZXIgPSB0aGlzLnBpeGlBcHAucmVuZGVyZXI7XG4gICAgICAgIGxldCB3aWR0aCA9IHRoaXMud2lkdGgudmFsdWVPZigpICogZXZlbnQuc2NhbGVSYXRpbztcbiAgICAgICAgbGV0IGhlaWdodCA9IHRoaXMuaGVpZ2h0LnZhbHVlT2YoKSAqIGV2ZW50LnNjYWxlUmF0aW87XG5cbiAgICAgICAgcmVuZGVyZXIudmlldy5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YDtcbiAgICAgICAgcmVuZGVyZXIudmlldy5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xuXG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZUNhbGxiYWNrKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IE1lZGlhdG9yIGZyb20gXCIuL01lZGlhdG9yXCI7aW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi9WaWV3XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvb3RNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yPFZpZXc+IHt9IiwiXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTYXZlZERhdGEge1xuXG5cdC8qKiBcblx0ICogQSBjb25zdGFudCB0byBkZXRlcm1pbmUgaWYgd2UgY2FuIHVzZSBsb2NhbFN0b3JhZ2UgYW5kIFxuXHQgKiBzZXNzaW9uU3RvcmFnZSBcblx0ICogQHN0YXRpY1xuXHQgKiBAcHJvcGVydHkge0Jvb2xlYW59IFdFQl9TVE9SQUdFX1NVUFBPUlRcblx0ICogQHByaXZhdGVcblx0ICogQHJlYWRPbmx5XG5cdCAqL1xuICAgIHN0YXRpYyBXRUJfU1RPUkFHRV9TVVBQT1JUOiBib29sZWFuID0gd2luZG93LlN0b3JhZ2UgIT09IHVuZGVmaW5lZDtcblxuXHQvKipcblx0ICogQSBjb25zdGFudCBmb3IgY29va2llIGZhbGxiYWNrIGZvciBgU2F2ZWREYXRhLmNsZWFyKClgIFxuXHQgKiBAc3RhdGljXG5cdCAqIEBwcm9wZXJ0eSB7aW50fSBFUkFTRV9DT09LSUVcblx0ICogQHByaXZhdGVcblx0ICogQHJlYWRPbmx5XG5cdCAqIEBkZWZhdWx0IC0xXG5cdCAqL1xuICAgIHN0YXRpYyBFUkFTRV9DT09LSUU6IG51bWJlciA9IC0xO1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cblxuICAgIC8vaW4gaU9TLCBpZiB0aGUgdXNlciBpcyBpbiBQcml2YXRlIEJyb3dzaW5nLCB3cml0aW5nIHRvIGxvY2FsU3RvcmFnZSB0aHJvd3MgYW4gZXJyb3IuXG4gICAgc3RhdGljIHRlc3RpT1MoKSB7XG4gICAgICAgIGlmIChTYXZlZERhdGEuV0VCX1NUT1JBR0VfU1VQUE9SVCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIkxTX1RFU1RcIiwgXCJ0ZXN0XCIpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiTFNfVEVTVFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgU2F2ZWREYXRhLldFQl9TVE9SQUdFX1NVUFBPUlQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXHQvKipcblx0ICogUmVtb3ZlIGEgc2F2ZWQgdmFyaWFibGUgYnkgbmFtZS5cblx0ICogQG1ldGhvZCByZW1vdmVcblx0ICogQHN0YXRpY1xuXHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlXG5cdCAqL1xuICAgIHN0YXRpYyByZW1vdmUobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGlmIChTYXZlZERhdGEuV0VCX1NUT1JBR0VfU1VQUE9SVCkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obmFtZSk7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIFNhdmVkRGF0YS53cml0ZShuYW1lLCBcIlwiLCBTYXZlZERhdGEuRVJBU0VfQ09PS0lFKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIFNhdmUgYSB2YXJpYWJsZS5cblx0ICogQG1ldGhvZCB3cml0ZVxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB2YWx1ZSB0byBzYXZlXG5cdCAqIEBwYXJhbSB7bWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBzYXZlLiBUaGlzIHdpbGwgYmUgcnVuIHRocm91Z2ggSlNPTi5zdHJpbmdpZnkoKS5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbdGVtcE9ubHk9ZmFsc2VdIElmIHRoZSB2YWx1ZSBzaG91bGQgYmUgc2F2ZWQgb25seSBpbiB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG5cdCAqL1xuICAgIHN0YXRpYyB3cml0ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIHRlbXBPbmx5OiBudW1iZXIgPSAwKSB7XG4gICAgICAgIGlmIChTYXZlZERhdGEuV0VCX1NUT1JBR0VfU1VQUE9SVCkge1xuICAgICAgICAgICAgaWYgKHRlbXBPbmx5KVxuICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGV4cGlyZXM7XG4gICAgICAgICAgICBpZiAodGVtcE9ubHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVtcE9ubHkgIT09IFNhdmVkRGF0YS5FUkFTRV9DT09LSUUpXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXMgPSBcIlwiOyAvL3JlbW92ZSB3aGVuIGJyb3dzZXIgaXMgY2xvc2VkXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBleHBpcmVzID0gXCI7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVRcIjsgLy9zYXZlIGNvb2tpZSBpbiB0aGUgcGFzdCBmb3IgaW1tZWRpYXRlIHJlbW92YWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBleHBpcmVzID0gXCI7IGV4cGlyZXM9XCIgKyBuZXcgRGF0ZSgyMTQ3NDgzNjQ2MDAwKS50b1VUQ1N0cmluZygpOyAvL1RIRSBFTkQgT0YgKDMyYml0IFVOSVgpIFRJTUUhXG5cbiAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyBcIj1cIiArIGVzY2FwZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpICsgZXhwaXJlcyArIFwiOyBwYXRoPS9cIjtcbiAgICAgICAgfVxuICAgIH1cblxuXHQvKipcblx0ICogUmVhZCB0aGUgdmFsdWUgb2YgYSBzYXZlZCB2YXJpYWJsZVxuXHQgKiBAbWV0aG9kIHJlYWRcblx0ICogQHN0YXRpY1xuXHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgdmFyaWFibGVcblx0ICogQHJldHVybiB7bWl4ZWR9IFRoZSB2YWx1ZSAocnVuIHRocm91Z2ggYEpTT04ucGFyc2UoKWApIG9yIG51bGwgaWYgaXQgZG9lc24ndCBleGlzdFxuXHQgKi9cbiAgICBzdGF0aWMgcmVhZChuYW1lOiBzdHJpbmcpOiBzdHJpbmd8YW55IHtcbiAgICAgICAgaWYgKFNhdmVkRGF0YS5XRUJfU1RPUkFHRV9TVVBQT1JUKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKSB8fCBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBuYW1lRVEgPSBuYW1lICsgXCI9XCIsXG4gICAgICAgICAgICAgICAgY2EgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKSxcbiAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICBjLCBsZW47XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGNhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYyA9IGNhW2ldO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PSAnICcpIGMgPSBjLnN1YnN0cmluZygxLCBjLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGMuaW5kZXhPZihuYW1lRVEpID09PSAwKSByZXR1cm4gSlNPTi5wYXJzZSh1bmVzY2FwZShjLnN1YnN0cmluZyhuYW1lRVEubGVuZ3RoLCBjLmxlbmd0aCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBTYXZlZERhdGEgZnJvbSBcIi4vU2F2ZWREYXRhXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFNhdmVTZXJ2aWNlIHtcbiAgICBzdGF0aWMgcHJldmlvdXNTY2VuZUtleSA9ICdwcmV2aW91c1NjZW5lJztcbiAgICBzdGF0aWMgY3VycmVudFNjZW5lS2V5ID0gJ2N1cnJlbnRTY2VuZSc7XG4gICAgc3RhdGljIHByb2ZpbGVzS2V5ID0gJ3Byb2ZpbGVzS2V5JztcbiAgICBzdGF0aWMgdXNlckRhdGFLZXkgPSAndXNlckRhdGFLZXknO1xuXG4gICAgcHVibGljIHN0YXRpYyBzZXRVc2VyRGF0YVByb2ZpbGUocHJvZmlsZUtleTpzdHJpbmcpOnZvaWQge1xuICAgICAgICBTYXZlU2VydmljZS51c2VyRGF0YUtleSA9IHByb2ZpbGVLZXk7XG4gICAgICAgIGxldCBwcm9maWxlc0RhdGE6c3RyaW5nW10gPSBTYXZlU2VydmljZS5nZXRVc2VyRGF0YVByb2ZpbGVzKCk7XG4gICAgICAgIGlmICghcHJvZmlsZXNEYXRhLmNvbnRhaW5zKHByb2ZpbGVLZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdQcm9maWxlc0RhdGEgPSBwcm9maWxlc0RhdGEuY29uY2F0KHByb2ZpbGVLZXkpO1xuICAgICAgICAgICAgU2F2ZWREYXRhLndyaXRlKFNhdmVTZXJ2aWNlLnByb2ZpbGVzS2V5LCBuZXdQcm9maWxlc0RhdGEgYXMgYW55KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0VXNlckRhdGFQcm9maWxlcygpOnN0cmluZ1tdIHtcbiAgICAgICAgbGV0IHByb2ZpbGVzRGF0YSA9IFNhdmVkRGF0YS5yZWFkKFNhdmVTZXJ2aWNlLnByb2ZpbGVzS2V5KTtcbiAgICAgICAgaWYgKCFwcm9maWxlc0RhdGEpIHtcbiAgICAgICAgICAgIHByb2ZpbGVzRGF0YSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9maWxlc0RhdGE7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBkZWxldGVVc2VyRGF0YVByb2ZpbGUocHJvZmlsZUtleTpzdHJpbmcpOnZvaWQge1xuICAgICAgICBjb25zdCBwcm9maWxlc0RhdGEgPSBTYXZlU2VydmljZS5nZXRVc2VyRGF0YVByb2ZpbGVzKCk7XG4gICAgICAgIGlmIChwcm9maWxlc0RhdGEuY29udGFpbnMocHJvZmlsZUtleSkpIHtcbiAgICAgICAgICAgIFNhdmVkRGF0YS53cml0ZShTYXZlU2VydmljZS5wcm9maWxlc0tleSwgcHJvZmlsZXNEYXRhLmZpbHRlcigocCkgPT4gcCAhPT0gcHJvZmlsZUtleSkgYXMgYW55KTtcbiAgICAgICAgICAgIFNhdmVkRGF0YS5yZW1vdmUocHJvZmlsZUtleSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEN1cnJlbnRVc2VyRGF0YVByb2ZpbGUoKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gU2F2ZVNlcnZpY2UudXNlckRhdGFLZXk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzYXZlQ3VycmVudFNjZW5lTmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgU2F2ZVNlcnZpY2Uuc2V0SXRlbShTYXZlU2VydmljZS5jdXJyZW50U2NlbmVLZXksIG5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0Q3VycmVudFNjZW5lTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gU2F2ZVNlcnZpY2UuZ2V0SXRlbShTYXZlU2VydmljZS5jdXJyZW50U2NlbmVLZXkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgc2F2ZVByZXZpb3VzU2NlbmVOYW1lKG5hbWU6IHN0cmluZykge1xuICAgICAgICBTYXZlU2VydmljZS5zZXRJdGVtKFNhdmVTZXJ2aWNlLnByZXZpb3VzU2NlbmVLZXksIG5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0UHJldmlvdXNTY2VuZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFNhdmVTZXJ2aWNlLmdldEl0ZW0oU2F2ZVNlcnZpY2UucHJldmlvdXNTY2VuZUtleSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRJdGVtKGtleTogc3RyaW5nKTogYW55e1xuICAgICAgICBsZXQgdXNlckRhdGEgPSBTYXZlZERhdGEucmVhZChTYXZlU2VydmljZS5nZXRDdXJyZW50VXNlckRhdGFQcm9maWxlKCkpO1xuICAgICAgICBpZiAoIXVzZXJEYXRhKSB7XG4gICAgICAgICAgICB1c2VyRGF0YSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1c2VyRGF0YVtrZXldO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgc2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6YW55KXtcbiAgICAgICAgbGV0IHVzZXJEYXRhID0gU2F2ZWREYXRhLnJlYWQoU2F2ZVNlcnZpY2UuZ2V0Q3VycmVudFVzZXJEYXRhUHJvZmlsZSgpKTtcbiAgICAgICAgaWYgKCF1c2VyRGF0YSkge1xuICAgICAgICAgICAgdXNlckRhdGEgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB1c2VyRGF0YVtrZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBTYXZlZERhdGEud3JpdGUoU2F2ZVNlcnZpY2UuZ2V0Q3VycmVudFVzZXJEYXRhUHJvZmlsZSgpLCB1c2VyRGF0YSk7XG4gICAgfVxuXG59XG4iLCJpbnRlcmZhY2UgSURlbGF5ZWRTRlgge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZWxheTogbnVtYmVyO1xufVxuXG5leHBvcnQgZW51bSBkZWxheWVkU0ZYTmFtZXN7XG4gICAgcHJvcERyb3AgPSBcInByb3BEcm9wXCIsXG4gICAgcm9wZURyb3AgPSBcInJvcGVEcm9wXCIsXG4gICAgZm9yZXN0UHJvcCA9IFwiZm9yZXN0UHJvcFwiLFxufVxuXG5leHBvcnQgbGV0IGRlbGF5ZWRTRlhEYXRhOiB7IFtpZDogc3RyaW5nXTogSURlbGF5ZWRTRlg7IH0gPSB7XG4gICAgW2RlbGF5ZWRTRlhOYW1lcy5wcm9wRHJvcF06IHsgbmFtZTogXCJwcm9wLWRyb3AubXAzXCIsIGRlbGF5OiAwLjQgfSxcbiAgICBbZGVsYXllZFNGWE5hbWVzLmZvcmVzdFByb3BdOiB7IG5hbWU6IFwicHJvcC1kcm9wLm1wM1wiLCBkZWxheTogMC4zIH0sXG4gICAgW2RlbGF5ZWRTRlhOYW1lcy5yb3BlRHJvcF06IHsgbmFtZTogXCJyb3BlLWRyb3AubXAzXCIsIGRlbGF5OiAwLjQgfVxufTsiLCJpbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuL0RJU2VydmljZVwiO1xuaW1wb3J0IExvYWRpbmdTZXJ2aWNlIGZyb20gXCIuL0xvYWRpbmdTZXJ2aWNlXCI7XG5pbXBvcnQgU2NlbmVNZWRpYXRvciBmcm9tIFwiLi4vbWVkaWF0b3JzL1NjZW5lTWVkaWF0b3JcIjtcbmltcG9ydCBSb290TWVkaWF0b3IgZnJvbSBcIi4uL21lZGlhdG9ycy9Sb290TWVkaWF0b3JcIjtcbmltcG9ydCBTYXZlU2VydmljZSBmcm9tIFwiLi9TYXZlU2VydmljZVwiO1xuaW1wb3J0IHsgU2VydmljZU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vYXBwbGljYXRpb24vU2VydmljZXMvU2VydmljZU5hbWVcIjtcblxuZXhwb3J0IGNsYXNzIFNjZW5lVHJhbnNpdGlvbiB7XG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgZnJvbTogc3RyaW5nLCByZWFkb25seSB0bzogc3RyaW5nKSB7IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2aWdhdGlvblNlcnZpY2Uge1xuICAgIHByb3RlY3RlZCBsb2FkaW5nU2VydmljZTogTG9hZGluZ1NlcnZpY2U7XG4gICAgcHJvdGVjdGVkIHNjZW5lTWFwOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oW10pO1xuICAgIHByb3RlY3RlZCBjdXJyZW50U2NlbmU6IFNjZW5lTWVkaWF0b3I7XG4gICAgcHJvdGVjdGVkIF9jdXJyZW50U2NlbmVOYW1lOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIF9sb2FkaW5nU2NyZWVuOiBTY2VuZU1lZGlhdG9yO1xuICAgIHByb3RlY3RlZCBsb2FkZXI6IFBJWEkuTG9hZGVyID0gbnVsbDtcblxuICAgIHB1YmxpYyBnZXQgY3VycmVudFNjZW5lTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFNjZW5lTmFtZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGxvYWRpbmdTY3JlZW4odmFsdWU6IFNjZW5lTWVkaWF0b3IpIHtcbiAgICAgICAgdGhpcy5fbG9hZGluZ1NjcmVlbiA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZWFkb25seSByb290TWVkaWF0b3I6IFJvb3RNZWRpYXRvciwgcHJvdGVjdGVkIHJlYWRvbmx5IGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UgPSBkaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkxvYWRpbmdTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5sb2FkZXIgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLmxvYWRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkU2NlbmVUb01hcChzY2VuZU5hbWU6IHN0cmluZywgdHlwZTogYW55KSB7XG4gICAgICAgIHRoaXMuc2NlbmVNYXAuc2V0KHNjZW5lTmFtZSwgdHlwZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdvVG9TY2VuZVdpdGhvdXRMb2FkU2NyZWVuKHNwbGFzaFNjcmVlbjogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UubG9hZEFzc2V0cyh0aGlzLmxvYWRlciwgc3BsYXNoU2NyZWVuLCAocHJvZ3Jlc3M6IG51bWJlcikgPT4geyB9LCAoY29uZmlnOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ3VycmVudFNjZW5lKCk7XG4gICAgICAgICAgICB0aGlzLm9uU2NlbmVDb25maWdMb2FkZWQoc3BsYXNoU2NyZWVuLCBjb25maWcpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL0ZJWCBNRTogRGVidWcgYW4gaXNzdWUgd2hlbiBsb2FkaW5nIHRoZSBzcGxhc2ggc2NyZWVuIGZyb20gYW5vdGhlciBzY3JlZW4uIE5vdCBhIGNhc2Ugc28gZmFyIGJ1dCBpdCB3aWxsIGJlIGFuIGlzc3VlIGlmIGxvYWRpbmcgc2NyZWVucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICBwdWJsaWMgZmFkZUluU2NlbmUoc2NlbmVOYW1lOiBzdHJpbmcsIG9uQ29tcGxldGlvbkFjdGlvbjogZnJhbWV3b3JrLkFjdGlvbiwgb25Qcm9ncmVzczogKHByb2dyZXNzOiBudW1iZXIpID0+IHZvaWQgPSAoKSA9PiB7IH0pOiBmcmFtZXdvcmsuQmxvY2tpbmdGdW5jQWN0aW9uIHtcbiAgICAgICAgY29uc3Qgc2NlbmVOYW1lVG9SZW1vdmUgPSBcIlwiICsgdGhpcy5fY3VycmVudFNjZW5lTmFtZTtcblxuICAgICAgICBjb25zdCBibG9ja2luZ0FjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkJsb2NraW5nRnVuYygoKSA9PiAocGFyZW50OiBhbnksIGRlbHRhOiBudW1iZXIpID0+IHsgfSlcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5sb2FkQXNzZXRzKHRoaXMubG9hZGVyLCBzY2VuZU5hbWUsIG9uUHJvZ3Jlc3MsIChjb25maWc6IGFueSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yb290TWVkaWF0b3IucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBibG9ja2luZ0FjdGlvbixcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRpb25BY3Rpb24sXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcFNjZW5lKHNjZW5lTmFtZSwgdGhpcy5jcmVhdGVTY2VuZU1lZGlhdG9yKHNjZW5lTmFtZSwgY29uZmlnKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNjZW5lLmluaXQoKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTY2VuZShzY2VuZU5hbWVUb1JlbW92ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGJsb2NraW5nQWN0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBnb1RvU2NlbmUoc2NlbmVOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDdXJyZW50U2NlbmUoKTtcbiAgICAgICAgdGhpcy5zaG93TG9hZGluZ1NjcmVlbihzY2VuZU5hbWUpO1xuICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmxvYWRBc3NldHModGhpcy5sb2FkZXIsIHNjZW5lTmFtZSwgKHByb2dyZXNzOiBudW1iZXIpID0+IHsgfSwgKGNvbmZpZzogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRyeVJlbW92ZUxvYWRpbmdTY3JlZW4odGhpcy5vblNjZW5lQ29uZmlnTG9hZGVkLmJpbmQodGhpcywgc2NlbmVOYW1lLCBjb25maWcpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbW92ZUN1cnJlbnRTY2VuZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFNjZW5lKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3RNZWRpYXRvci5yZW1vdmVDaGlsZCh0aGlzLmN1cnJlbnRTY2VuZSk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTY2VuZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLnVubG9hZEFzc2V0c0ZvclNjZW5lKHRoaXMuX2N1cnJlbnRTY2VuZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2NlbmUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbW92ZVNjZW5lKHNjZW5lTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTY2VuZUFzc2V0cyA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2NlbmVBc3NldHNbdGhpcy5fY3VycmVudFNjZW5lTmFtZV07XG4gICAgICAgIGNvbnN0IHByZXZTY2VuZUFzc2V0czogc3RyaW5nW10gPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNjZW5lQXNzZXRzW3NjZW5lTmFtZV07XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZlU2NlbmVcIiwgcHJldlNjZW5lQXNzZXRzKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFzc2V0cyA9IHByZXZTY2VuZUFzc2V0cy5maWx0ZXJPdXRJdGVtcyhjdXJyZW50U2NlbmVBc3NldHMpO1xuXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UudW5sb2FkQXNzZXRzKGFzc2V0cyk7XG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UucmVtb3ZlU2NlbmVDb25maWdGaWxlc0Zyb21SZXNvdXJjZXMoc2NlbmVOYW1lKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25TY2VuZUNvbmZpZ0xvYWRlZChzY2VuZU5hbWU6IHN0cmluZywgY29uZmlnOiBhbnkpIHtcbiAgICAgICAgaWYgKCFzY2VuZU5hbWUgfHwgIWNvbmZpZykge1xuICAgICAgICAgICAgdGhyb3cgXCJ1c2FnZSA6IHNjZW5lTmFtZTogc3RyaW5nLCBjb25maWc6IGFueSAoanNvbiBjb250YWluaW5nIHRoZSB2aWV3IGRlc2NyaXB0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG93U2NlbmUoc2NlbmVOYW1lLCB0aGlzLmNyZWF0ZVNjZW5lTWVkaWF0b3Ioc2NlbmVOYW1lLCBjb25maWcpKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlU2NlbmVNZWRpYXRvcihzY2VuZU5hbWU6IHN0cmluZywgY29uZmlnOiBhbnkpOiBTY2VuZU1lZGlhdG9yIHtcbiAgICAgICAgY29uc3Qgdmlld3MgPSB3aW5kb3cuYXBwLmNyZWF0ZUNoaWxkVmlld3MoY29uZmlnKTtcbiAgICAgICAgaWYgKCF2aWV3cyB8fCB2aWV3cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgXCJlcnJvcjogbm8gdmlldyBoYXZlIGJlZW4gY3JlYXRlZCBmcm9tIHRoZSBjb25maWdcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3ID0gdmlld3NbMF07XG4gICAgICAgIGNvbnN0IHNjZW5lVHlwZSA9IHRoaXMuc2NlbmVNYXAuZ2V0KHNjZW5lTmFtZSk7XG4gICAgICAgIGNvbnN0IHNjZW5lTWVkaWF0b3IgPSBuZXcgc2NlbmVUeXBlKHZpZXcsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgcmV0dXJuIHNjZW5lTWVkaWF0b3I7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNob3dTY2VuZShzY2VuZU5hbWU6IHN0cmluZywgc2NlbmVNZWRpYXRvcjogU2NlbmVNZWRpYXRvcikge1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudFNjZW5lTmFtZSAmJiB0aGlzLnNob3VsZFBlcnNpc3RTY2VuZShzY2VuZU5hbWUpKSB7XG4gICAgICAgICAgICBTYXZlU2VydmljZS5zYXZlUHJldmlvdXNTY2VuZU5hbWUodGhpcy5fY3VycmVudFNjZW5lTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3VycmVudFNjZW5lTmFtZSA9IHNjZW5lTmFtZTtcbiAgICAgICAgdGhpcy5jdXJyZW50U2NlbmUgPSBzY2VuZU1lZGlhdG9yO1xuICAgICAgICBzY2VuZU1lZGlhdG9yLm5hbWUgPSBzY2VuZU5hbWU7XG4gICAgICAgIHRoaXMucm9vdE1lZGlhdG9yLmFkZENoaWxkKHNjZW5lTWVkaWF0b3IpO1xuICAgICAgICB0aGlzLmN1cnJlbnRTY2VuZS5pbml0KCk7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFBlcnNpc3RTY2VuZShzY2VuZU5hbWUpKSB7XG4gICAgICAgICAgICBTYXZlU2VydmljZS5zYXZlQ3VycmVudFNjZW5lTmFtZShzY2VuZU5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHN3YXBTY2VuZShzY2VuZU5hbWU6IHN0cmluZywgc2NlbmVNZWRpYXRvcjogU2NlbmVNZWRpYXRvcikge1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudFNjZW5lTmFtZSAmJiB0aGlzLnNob3VsZFBlcnNpc3RTY2VuZShzY2VuZU5hbWUpKSB7XG4gICAgICAgICAgICBTYXZlU2VydmljZS5zYXZlUHJldmlvdXNTY2VuZU5hbWUodGhpcy5fY3VycmVudFNjZW5lTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3VycmVudFNjZW5lTmFtZSA9IHNjZW5lTmFtZTtcbiAgICAgICAgY29uc3Qgb2xkU2NlbmUgPSB0aGlzLmN1cnJlbnRTY2VuZTtcbiAgICAgICAgdGhpcy5yb290TWVkaWF0b3Iuc3dhcENoaWxkKHRoaXMuY3VycmVudFNjZW5lLCBzY2VuZU1lZGlhdG9yKTtcbiAgICAgICAgc2NlbmVNZWRpYXRvci5uYW1lID0gc2NlbmVOYW1lO1xuICAgICAgICB0aGlzLmN1cnJlbnRTY2VuZSA9IHNjZW5lTWVkaWF0b3I7XG4gICAgICAgIG9sZFNjZW5lLmRlc3Ryb3koKTtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkUGVyc2lzdFNjZW5lKHNjZW5lTmFtZSkpIHtcbiAgICAgICAgICAgIFNhdmVTZXJ2aWNlLnNhdmVDdXJyZW50U2NlbmVOYW1lKHNjZW5lTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2hvdWxkUGVyc2lzdFNjZW5lKHNjZW5lTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzaG93TG9hZGluZ1NjcmVlbihzY2VuZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICghdGhpcy5fbG9hZGluZ1NjcmVlbiB8fCAhdGhpcy5yb290TWVkaWF0b3IuY2hpbGRyZW4uY29udGFpbnModGhpcy5fbG9hZGluZ1NjcmVlbikpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdTY3JlZW4gPSB0aGlzLmdldExvYWRpbmdTY3JlZW4oc2NlbmUpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fbG9hZGluZ1NjcmVlbikge1xuICAgICAgICAgICAgICAgIHRoaXMucm9vdE1lZGlhdG9yLmFkZENoaWxkKHRoaXMuX2xvYWRpbmdTY3JlZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdTY3JlZW4uaW5pdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIm5vIGxhb2Rpbmcgc2NyZWVuIGhhcyBiZWVuIHByb3ZpZGVkLlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldExvYWRpbmdTY3JlZW4oc2NlbmU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KHNjZW5lKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdHJ5UmVtb3ZlTG9hZGluZ1NjcmVlbihvbkxvYWRpbmdTY3JlZW5SZW1vdmVkOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIGlmICh0aGlzLl9sb2FkaW5nU2NyZWVuKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUxvYWRpbmdTY3JlZW4oKTtcbiAgICAgICAgICAgIG9uTG9hZGluZ1NjcmVlblJlbW92ZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCByZW1vdmVMb2FkaW5nU2NyZWVuKCkge1xuICAgICAgICB0aGlzLnJvb3RNZWRpYXRvci5yZW1vdmVDaGlsZCh0aGlzLl9sb2FkaW5nU2NyZWVuKTtcbiAgICAgICAgdGhpcy5fbG9hZGluZ1NjcmVlbiA9IG51bGw7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBEZXBlbmRlbmN5IGluamVjdGlvbiBzZXJ2aWNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERJU2VydmljZSB7XG4gICAgZGF0YTogYW55ID0ge307XG4gICAgc2VydmljZXM6IGFueSA9IHt9O1xuXG4gICAgcHVibGljIHJlZ2lzdGVyPFQ+KG5hbWU6IHN0cmluZywgc2VydmljZTogVCkge1xuICAgICAgICB0aGlzLnNlcnZpY2VzW25hbWVdID0gc2VydmljZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0PFQ+KG5hbWU6IHN0cmluZyk6IFQge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlc1tuYW1lXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0RGF0YVdpdGhLZXkoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBhbnkge1xuICAgICAgICB0aGlzLmRhdGFba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREYXRhQnlLZXkoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW2tleV07XG4gICAgfVxuXG4gICAgcHVibGljIGRlbGV0ZURhdGFXaXRoS2V5KGtleTogc3RyaW5nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmRhdGFba2V5XTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJU3RhZ2VQcm9wcyB9IGZyb20gXCIuL0Fic3RyYWN0U3RhZ2VQcm9wc1wiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlRGVsYXllZFNGWEFjdGlvbiB9IGZyb20gXCIuLi8uLi91dGlscy9BbmltYXRpb25BY3Rpb25zXCI7XG5pbXBvcnQgeyBkZWxheWVkU0ZYRGF0YSwgZGVsYXllZFNGWE5hbWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0RlbGF5ZWRTRlhcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFNGWEFjdGlvbiBmcm9tIFwiLi4vLi4vdXRpbHMvU0ZYQWN0aW9uXCI7XG5pbXBvcnQgeyBTb3VuZENoYW5uZWwgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvU291bmRTZXJ2aWNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByaXNvblByb3AgaW1wbGVtZW50cyBJU3RhZ2VQcm9wcyB7XG4gICAgcHJpdmF0ZSBwcmVzZW50OiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHByaXZhdGUgd2FyZHJvYmU6IGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgcHJpdmF0ZSBwYW50cnk6IGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgcHJpdmF0ZSBzcGluZXM6IGZyYW1ld29yay5TcGluZVZpZXdbXTtcbiAgICBwcml2YXRlIGFjdGlvblNGWFJlcGVhdDogZnJhbWV3b3JrLkFjdGlvbiA9IG51bGw7XG4gICAgcHJpdmF0ZSBzdGF0aWMgc2hha2VTRlg6IHN0cmluZyA9IFwidHJhcC1zaGFrZS1zZngubXAzXCI7XG4gICAgXG4gICAgcHVibGljIHNldCBzZWxlY3RlZChwcmlzb25UeXBlOiBzdHJpbmcpIHtcbiAgICAgICAgc3dpdGNoIChwcmlzb25UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFByaXNvblR5cGUucGFudHJ5OlxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkID0gdGhpcy5wYW50cnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFByaXNvblR5cGUucHJlc2VudDpcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHRoaXMucHJlc2VudDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUHJpc29uVHlwZS53YXJkcm9iZTpcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHRoaXMud2FyZHJvYmU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXc6IFZpZXcsIHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSApIHtcbiAgICAgICAgdGhpcy5wcmVzZW50ID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJwcmVzZW50LWFuaW1cIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy53YXJkcm9iZSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwid2FyZHJvYmUtYW5pbVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLnBhbnRyeSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwicGFudHJ5LWFuaW1cIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5zcGluZXMgPSBbdGhpcy5wcmVzZW50LCB0aGlzLndhcmRyb2JlLCB0aGlzLnBhbnRyeV07XG5cbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93KCl7XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkLnZpc2libGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlKCl7XG4gICAgICAgIHRoaXMuc3BpbmVzLmZvckVhY2goc3BpbmUgPT4ge1xuICAgICAgICAgICAgc3BpbmUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2hvd0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zaG93KCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTaG93QW5pbUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9ue1xuICAgICAgICBjb25zdCBzb3VuZERhdGEgPSBkZWxheWVkU0ZYRGF0YVtkZWxheWVkU0ZYTmFtZXMucHJvcERyb3BdO1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNob3coKSksXG4gICAgICAgICAgICB0aGlzLmdldEFuaW1BY3Rpb24oQW5pbS5zaG93KSxcbiAgICAgICAgICAgIGNyZWF0ZURlbGF5ZWRTRlhBY3Rpb24oc291bmREYXRhLmRlbGF5LCBzb3VuZERhdGEubmFtZSwgdGhpcy5kaVNlcnZpY2UpXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgcHVibGljIGdldE9wZW5JZGxlQW5pbUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9ue1xuICAgICAgICBjb25zdCBhbmltTmFtZSA9IHRoaXMuX3NlbGVjdGVkID09IHRoaXMucHJlc2VudCA/IEFuaW0uaWRsZTogQW5pbS5pZGxlT3BlbjtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoICgpID0+IHRoaXMuX3NlbGVjdGVkLnN0YXRlLnNldEFuaW1hdGlvbigwLCBhbmltTmFtZSwgdHJ1ZSkpO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0Q2xvc2VBbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb257XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1BY3Rpb24oQW5pbS5jbG9zZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE9wZW5BbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb257XG4gICAgICAgIGNvbnN0IGFuaW1OYW1lID0gdGhpcy5fc2VsZWN0ZWQgPT0gdGhpcy5wcmVzZW50ID8gQW5pbS5oaWRlIDogQW5pbS5pZGxlT3BlbjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QW5pbUFjdGlvbihhbmltTmFtZSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXRDbG9zZUlkbGVBbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb257XG5cbiAgICAgICAgdGhpcy5hY3Rpb25TRlhSZXBlYXQgPSBmcmFtZXdvcmsuQWN0aW9ucy5SZXBlYXQoZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgbmV3IFNGWEFjdGlvbihQcmlzb25Qcm9wLnNoYWtlU0ZYLFNvdW5kQ2hhbm5lbC5DMSwgZmFsc2UsIHRoaXMuZGlTZXJ2aWNlKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDEuNSksXG4gICAgICAgIF0pKTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5fc2VsZWN0ZWQuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEFuaW0uaWRsZUNsb3NlZCwgdHJ1ZSkpLFxuICAgICAgICAgICAgLy8gdGhpcy5hY3Rpb25TRlhSZXBlYXRcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEFuaW1BY3Rpb24oYW5pbTogQW5pbSwgbG9vcDogYm9vbGVhbiA9IGZhbHNlKTogZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX3NlbGVjdGVkLCBhbmltLCB7bG9vcDogbG9vcH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5SWRsZSgpIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWQuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEFuaW0uaWRsZUNsb3NlZCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZGVpbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBza2lwKG9uQ29tcGxldGU6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB0aGlzLndhcmRyb2JlO1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTRlhBY3Rpb24oKTpmcmFtZXdvcmsuQWN0aW9ue1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb25TRlhSZXBlYXQ7XG4gICAgfVxuXG59XG5cbmVudW0gQW5pbSB7XG4gICAgY2xvc2UgPSBcImNsb3NlXCIsXG4gICAgc2hvdyA9IFwic2hvd1wiLFxuICAgIGlkbGVDbG9zZWQgPSBcImlkbGUtY2xvc2VkXCIsXG4gICAgaWRsZU9wZW4gPSBcImlkbGUtb3BlblwiLFxuICAgIG9wZW4gPSBcIm9wZW5cIixcbiAgICBpZGxlID0gXCJpZGxlXCIsXG4gICAgaGlkZSA9IFwiaGlkZVwiLFxufVxuZXhwb3J0IGVudW0gUHJpc29uVHlwZSB7XG4gICAgcHJlc2VudCA9IFwicHJvcC0yLXByZXNlbnRcIixcbiAgICBwYW50cnkgPSBcInByb3AtMi1QYW50cnlcIixcbiAgICB3YXJkcm9iZSA9IFwicHJvcC0yLWNsb3NldFwiLFxufSIsImltcG9ydCB7IENob2ljZVR5cGUgfSBmcm9tIFwiLi4vc3RhZ2UvZmFjdG9yaWVzL0xSUkhEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcbmltcG9ydCB7IENvc3R1bWVzLCBjb3N0dW1lcywgVW1icmVsbGFDb3N0dW1lIH0gZnJvbSBcIi4vQ29zdHVtZXNcIjtcbmltcG9ydCB7IEFuaW1hdGlvbnN9IGZyb20gXCIuL0Jhc2VDaGFyYWN0ZXJcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4vQ2hhcmFjdGVyXCI7XG5cblxuXG4vL1RPRE8gbWFrZSB0aGlzIGEgbWVkaWF0b3IgdG8gcmV0dXJuIGFjdGlvbnMgZm9yIHRoZSBzcGluZSBzdGF0ZXNcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExSUkhDaGFyYWN0ZXIgZXh0ZW5kcyBDaGFyYWN0ZXIge1xuXG4gICAgc2V0RGVmYXVsdEFjdGlvbihjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSB7fTtcbiAgICAgICAgYWN0aW9uc1tDaG9pY2VUeXBlLmxycmhBY3Rpb24yV2Fsa2luZ10gPSBBbmltYXRpb25zLndhbGs7XG4gICAgICAgIGFjdGlvbnNbQ2hvaWNlVHlwZS5scnJoQWN0aW9uMkp1bXBpbmddID0gQW5pbWF0aW9ucy5qdW1wO1xuICAgICAgICBhY3Rpb25zW0Nob2ljZVR5cGUubHJyaEFjdGlvbjJHcm9vdmluZ10gPSBBbmltYXRpb25zLmRhbmNlO1xuXG4gICAgICAgIGNvbnN0IGxvb3AgPSB7fTtcbiAgICAgICAgbG9vcFtDaG9pY2VUeXBlLmxycmhBY3Rpb24yV2Fsa2luZ10gPSB0cnVlO1xuICAgICAgICBsb29wW0Nob2ljZVR5cGUubHJyaEFjdGlvbjJKdW1waW5nXSA9IHRydWU7XG4gICAgICAgIGxvb3BbQ2hvaWNlVHlwZS5scnJoQWN0aW9uMkdyb292aW5nXSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fZGVmYXVsdEFjdGlvbiA9IGFjdGlvbnNbY2hvaWNlSWRdO1xuICAgICAgICB0aGlzLl9kZWZhdWx0TG9vcEFjdGlvbiA9IGxvb3BbY2hvaWNlSWRdO1xuICAgIH1cblxuICAgIHNldFJlYWN0aW9uQWN0aW9uKGNob2ljZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IHt9O1xuICAgICAgICBhY3Rpb25zW0Nob2ljZVR5cGUuYWN0M0FjdGlvbjJSdW5dID0gQW5pbWF0aW9ucy5ydW47XG4gICAgICAgIGFjdGlvbnNbQ2hvaWNlVHlwZS5hY3QzQWN0aW9uMkxlYXBmcm9nXSA9IEFuaW1hdGlvbnMuanVtcDtcbiAgICAgICAgYWN0aW9uc1tDaG9pY2VUeXBlLmFjdDNBY3Rpb24yU2hha2VdID0gQW5pbWF0aW9ucy5zaGFrZTtcblxuICAgICAgICBjb25zdCBsb29wID0ge307XG4gICAgICAgIGxvb3BbQ2hvaWNlVHlwZS5hY3QzQWN0aW9uMlJ1bl0gPSB0cnVlO1xuICAgICAgICBsb29wW0Nob2ljZVR5cGUuYWN0M0FjdGlvbjJMZWFwZnJvZ10gPSB0cnVlO1xuICAgICAgICBsb29wW0Nob2ljZVR5cGUuYWN0M0FjdGlvbjJTaGFrZV0gPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX3JlYWN0aW9uQWN0aW9uID0gYWN0aW9uc1tjaG9pY2VJZF07XG4gICAgICAgIHRoaXMuX3JlYWN0aW9uTG9vcEFjdGlvbiA9IGxvb3BbY2hvaWNlSWRdO1xuICAgIH1cblxuICAgIC8vIENPU1RVTUVTXG5cbiAgICBwdWJsaWMgZ2V0U2V0VW1icmVsbGFBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZXRVbWJyZWxsYSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlSGlkZUFuZFJpc2VBY3Rpb24oYWN0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0VW1icmVsbGEoKSB7XG4gICAgICAgIGxldCB1bWJyZWxsYSA9IFVtYnJlbGxhQ29zdHVtZS51bWJyZWxsYTtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9jb3N0dW1lKSB7XG4gICAgICAgICAgICBjYXNlIENvc3R1bWVzLmNvd2JveTpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhdCA9IFwiY29zdHVtZXMvY293Ym95aGF0XCI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0YWNobWVudChoYXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bWJyZWxsYSA9IFVtYnJlbGxhQ29zdHVtZS51bWJyZWxsYUNvd2JveTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29zdHVtZXMucGlyYXRlOlxuICAgICAgICAgICAgICAgIHVtYnJlbGxhID0gVW1icmVsbGFDb3N0dW1lLnVtYnJlbGxhUGlyYXRlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHVtYnJlbGxhID0gVW1icmVsbGFDb3N0dW1lLnVtYnJlbGxhO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0YWNoQ29zdHVtZVBhcnQodW1icmVsbGEpO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0U2V0V29sZkFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNldFdvbGYoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUhpZGVBbmRSaXNlQWN0aW9uKGFjdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNldFdvbGZHcmFubWFBY3Rpb24oaGFuZGxlcjooKT0+dm9pZCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVIaWRlQW5kUmlzZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRXb2xmR3Jhbm1hKCl7XG4gICAgICAgIHRoaXMucmVtb3ZlQ29zdHVtZSgpO1xuICAgICAgICB0aGlzLmFkZENvc3R1bWUoQ29zdHVtZXMuZ3JhbmRtYSk7XG4gICAgICAgIHRoaXMuc2V0V29sZigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0V29sZigpe1xuICAgICAgICBjb25zdCB3b2xmID0gXCJjb3N0dW1lcy93b2xmXCI7XG4gICAgICAgIHRoaXMuYXR0YWNoQ29zdHVtZVBhcnQod29sZik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlbW92ZUdsYXNzZXNBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5yZW1vdmVHbGFzc2VzKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVIaWRlQW5kUmlzZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVHbGFzc2VzKCkge1xuICAgICAgICBjb25zdCBjb3N0dW1lTmFtZSA9IFwiY29zdHVtZXMvZ3JhbmRtYS1nbGFzc2VzXCI7XG4gICAgICAgIHRoaXMucmVtb3ZlQXR0YWNobWVudChjb3N0dW1lTmFtZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlbW92ZUhhaXJBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5yZW1vdmVIYWlyKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVIaWRlQW5kUmlzZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVIYWlyKCkge1xuICAgICAgICBjb25zdCBjb3N0dW1lTmFtZSA9IFwiY29zdHVtZXMvZ3JhbmRtYS1oYWlyXCI7XG4gICAgICAgIHRoaXMucmVtb3ZlQXR0YWNobWVudChjb3N0dW1lTmFtZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZURyZXNzKCkge1xuICAgICAgICBjb25zdCBjb3N0dW1lTmFtZSA9IFwiY29zdHVtZXMvZ3JhbmRtYS1kcmVzc1wiO1xuICAgICAgICB0aGlzLnJlbW92ZUF0dGFjaG1lbnQoY29zdHVtZU5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVDYW5lKCkge1xuICAgICAgICBjb25zdCBjb3N0dW1lTmFtZSA9IFwiY29zdHVtZXMvZ3JhbmRtYS1jYW5lXCI7XG4gICAgICAgIHRoaXMucmVtb3ZlQXR0YWNobWVudChjb3N0dW1lTmFtZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZVNsaXBwZXJzKCkge1xuICAgICAgICBjb25zdCBjb3N0dW1lTmFtZSA9IFwiY29zdHVtZXMvZ3JhbmRtYS1zbGlwcGVyc1wiO1xuICAgICAgICB0aGlzLnJlbW92ZUF0dGFjaG1lbnQoY29zdHVtZU5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRXb2xmUmV2ZWFsQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0V29sZlRlZXRoKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZURyZXNzKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVNsaXBwZXJzKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNhbmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUhpZGVBbmRSaXNlQWN0aW9uKGFjdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFdvbGZUZWV0aCgpIHtcbiAgICAgICAgY29uc3QgY29zdHVtZU5hbWUgPSBjb3N0dW1lcy5nZXQoQ29zdHVtZXMud29mbHRlZXRoKVswXTtcbiAgICAgICAgdGhpcy5yZW1vdmVBdHRhY2htZW50KGNvc3R1bWVzLmdldChDb3N0dW1lcy53b2xmKVswXSk7XG4gICAgICAgIHRoaXMuYXR0YWNoQ29zdHVtZVBhcnQoY29zdHVtZU5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRCYXNrZXQoYmFza2V0OiBDb3N0dW1lcyl7XG4gICAgICAgIGNvbnN0IGJhc2tldENvc3R1bWVzID0gY29zdHVtZXMuZ2V0KGJhc2tldCk7XG4gICAgICAgIGlmIChiYXNrZXRDb3N0dW1lcyl7XG4gICAgICAgICAgICBjb25zdCBjb3N0dW1lID0gYmFza2V0Q29zdHVtZXMuZmlyc3QoKTtcbiAgICAgICAgICAgIGlmIChjb3N0dW1lKXtcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaENvc3R1bWVQYXJ0KGNvc3R1bWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZUJhc2tldChiYXNrZXQ6IENvc3R1bWVzKSB7XG4gICAgICAgIGNvbnN0IGJhc2tldENvc3R1bWVzID0gY29zdHVtZXMuZ2V0KGJhc2tldCk7XG4gICAgICAgIGlmIChiYXNrZXRDb3N0dW1lcykge1xuICAgICAgICAgICAgY29uc3QgY29zdHVtZSA9IGJhc2tldENvc3R1bWVzLmZpcnN0KCk7XG4gICAgICAgICAgICBpZiAoY29zdHVtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0YWNobWVudChjb3N0dW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTZXRBY2Nlc3NvcnlBY3Rpb24oYmFza2V0OiBDb3N0dW1lcyk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2V0QmFza2V0KGJhc2tldCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVIaWRlQW5kUmlzZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBEaWFsb2dTdGF0ZUZhY3RvcnkgfSBmcm9tIFwiLi4vZmFjdG9yaWVzL0RpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IHsgQmFja0Ryb3BTa2luIH0gZnJvbSBcIi4uL3Byb3BzL0JhY2tkcm9wXCI7XG5pbXBvcnQgUHJpc29uUHJvcCwgeyBQcmlzb25UeXBlIH0gZnJvbSBcIi4uL3Byb3BzL1ByaXNvblByb3BcIjtcbmltcG9ydCBMUlJIU3RvcnlEYXRhIGZyb20gXCIuL0xSUkhTdG9yeURhdGFcIjtcbmltcG9ydCB7IExSUkhEaWFsb2dTdGF0ZUZhY3RvcnksIEJhc2tldENob2ljZSB9IGZyb20gXCIuLi9mYWN0b3JpZXMvTFJSSERpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IEFjdE1lZGlhdG9yIGZyb20gXCIuLi9jb21tb24vQWN0TWVkaWF0b3JcIjtcbmltcG9ydCBEb29yIGZyb20gXCIuLi9wcm9wcy9Eb29yXCI7XG5pbXBvcnQgeyBDb3N0dW1lcyB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0Nvc3R1bWVzXCI7XG5pbXBvcnQgTFJSSENoYXJhY3RlciBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9MUlJIQ2hhcmFjdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExSUkhBY3RNZWRpYXRvciBleHRlbmRzIEFjdE1lZGlhdG9yIHtcblxuICAgIHByb3RlY3RlZCBnZXQgcHJpc29uUHJvcCgpOiBQcmlzb25Qcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5wcmlzb24pO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGRvb3IoKTogRG9vciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZG9vcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXRGYWN0b3J5KCk6IERpYWxvZ1N0YXRlRmFjdG9yeSB7XG4gICAgICAgIHJldHVybiBuZXcgTFJSSERpYWxvZ1N0YXRlRmFjdG9yeSh0aGlzLmRpU2VydmljZSwgdGhpcy52aWV3KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdENoYXJhY3RlcnMoKTogdm9pZHtcbiAgICAgICAgc3VwZXIuaW5pdENoYXJhY3RlcnMoKTtcblxuICAgICAgICBjb25zdCBuYXJyYXRvciA9IG5ldyBMUlJIQ2hhcmFjdGVyKHRoaXMuY2hhcmFjdGVyUm9sZU1hcC5nZXQoUm9sZS5uYXJyYXRvciksIFJvbGUubmFycmF0b3IsIHRoaXMubmFycmF0b3IsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgY29uc3QgbHJyaCA9IG5ldyBMUlJIQ2hhcmFjdGVyKHRoaXMuY2hhcmFjdGVyUm9sZU1hcC5nZXQoUm9sZS5saXR0bGVSZWRIb29kKSwgUm9sZS5saXR0bGVSZWRIb29kLCB0aGlzLmNoYXJhY3RlciwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICBjb25zdCB3b2xmID0gbmV3IExSUkhDaGFyYWN0ZXIodGhpcy5jaGFyYWN0ZXJSb2xlTWFwLmdldChSb2xlLndvbGYpLCBSb2xlLndvbGYsIHRoaXMuY2hhcmFjdGVyU2Vjb25kLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIGNvbnN0IGdyYW5kbWEgPSBuZXcgTFJSSENoYXJhY3Rlcih0aGlzLmNoYXJhY3RlclJvbGVNYXAuZ2V0KFJvbGUuZ3JhbmRtYSksIFJvbGUuZ3JhbmRtYSwgdGhpcy5jaGFyYWN0ZXJUaGlyZCwgdGhpcy5kaVNlcnZpY2UpO1xuXG4gICAgICAgIG5hcnJhdG9yLnNldENvc3R1bWUoQ29zdHVtZXMubmFycmF0b3IpO1xuICAgICAgICBncmFuZG1hLnNldENvc3R1bWUoQ29zdHVtZXMuZ3JhbmRtYSk7XG5cbiAgICAgICAgdGhpcy5zY3JpcHRzLmFkZFNjcmlwdHMoW25hcnJhdG9yLCBscnJoLCB3b2xmLCBncmFuZG1hXSk7XG5cbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbUm9sZS5uYXJyYXRvciwgbmFycmF0b3JdLFxuICAgICAgICAgICAgW1JvbGUubGl0dGxlUmVkSG9vZCwgbHJyaF0sXG4gICAgICAgICAgICBbUm9sZS53b2xmLCB3b2xmXSxcbiAgICAgICAgICAgIFtSb2xlLmdyYW5kbWEsIGdyYW5kbWFdLFxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuY2hhcmFjdGVycywgdGhpcy5jaGFyYWN0ZXJzKTtcblxuICAgICAgICBjb25zdCByb2xlcyA9IFtSb2xlLm5hcnJhdG9yLCBSb2xlLmxpdHRsZVJlZEhvb2QsIFJvbGUud29sZiwgUm9sZS5ncmFuZG1hXTtcbiAgICAgICAgcm9sZXMuZm9yRWFjaChyb2xlID0+IHRoaXMuY2hhcmFjdGVycy5nZXQocm9sZSkuaGlkZSgpKTtcbiAgICAgICAgdGhpcy5hc3NpZ25Qb3NpdGlvblRvQ2hhcmFjdGVycyhyb2xlcyk7XG4gICAgfVxuXG4gICAgLy9ERUJVR1xuICAgIHByb3RlY3RlZCBnb1RvQWN0MygpIHtcbiAgICAgICAgY29uc3QgcGFzc2FnZU5hbWUgPSBcImFjdC0zLXZvLTFcIjtcbiAgICAgICAgdGhpcy5zdG9yeURhdGEuc2F2ZS5zZXQoXCJjb3N0dW1lXCIsIFwiTGl0dGxlIFJlZCBSaWRpbmcgSG9vZFwiKTtcbiAgICAgICAgdGhpcy5zdG9yeURhdGEuc2F2ZS5zZXQoXCJhY3Rpb25cIiwgXCJ3YWxraW5nXCIpO1xuICAgICAgICB0aGlzLnN0b3J5RGF0YS5zYXZlLnNldChcIndlYXRoZXJcIiwgXCJzdW5ueVwiKTtcbiAgICAgICAgdGhpcy5zdG9yeURhdGEuc2F2ZS5zZXQoXCJiYXNrZXRcIiwgXCJ0b29sYm94XCIpO1xuICAgICAgICB0aGlzLnN0b3J5RGF0YS5zYXZlLnNldChcInByaXNvblwiLCBcIlBhbnRyeVwiKTtcblxuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCkueCA9IExSUkhTdG9yeURhdGEuYWN0MkxycmhYUG9zaXRpb25cbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpLnggPSBMUlJIU3RvcnlEYXRhLmFjdDJXb2xmWFBvc2l0aW9uXG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcikueCA9IExSUkhTdG9yeURhdGEuYWN0Mk5hcnJhdG9yWFBvc2l0aW9uXG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5saXR0bGVSZWRIb29kKS5jb250YWluZXIuc2NhbGUueCA9IExSUkhTdG9yeURhdGEuYWN0MkxycmhYU2NhbGVcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpLmNvbnRhaW5lci5zY2FsZS54ID0gTFJSSFN0b3J5RGF0YS5hY3QyV29sZlhTY2FsZVxuXG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcikuc2hvdygpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUud29sZikuc2hvdygpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCkuc2hvdygpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ3JhbmRtYSkuaGlkZSgpO1xuXG4gICAgICAgIHRoaXMuZG9vci5zaG93KCk7XG4gICAgICAgIHRoaXMuYmFja2Ryb3Auc2V0QmFja2Ryb3BUbyhCYWNrRHJvcFNraW4uYWN0MywgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpLnNldENvc3R1bWUgKENvc3R1bWVzLmxpdHRsZVJlZEhvb2QpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUud29sZikuc2V0Q29zdHVtZSggQ29zdHVtZXMuZ3JhbmRtYSk7XG4gICAgICAgICh0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCkgYXMgTFJSSENoYXJhY3Rlcikuc2V0QmFza2V0KENvc3R1bWVzLmJhc2tldCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS53b2xmKS5hZGRDb3N0dW1lKENvc3R1bWVzLndvbGYpO1xuXG4gICAgICAgIHRoaXMucHJpc29uUHJvcC5zZWxlY3RlZCA9IFByaXNvblR5cGUucGFudHJ5O1xuICAgICAgICB0aGlzLnByaXNvblByb3Auc2hvdygpO1xuICAgICAgICAodGhpcy5zdG9yeURhdGEgYXMgTFJSSFN0b3J5RGF0YSkuYmFza2V0Q2hvaWNlID0gQmFza2V0Q2hvaWNlLmJhc2tldDtcbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5nb1RvKHBhc3NhZ2VOYW1lKTtcbiAgICB9XG4gICAgXG4gICAgcHJvdGVjdGVkIGdvVG9BY3QyKCkge1xuICAgICAgICBjb25zdCBwYXNzYWdlTmFtZSA9IFwiaW50cm8tYWN0Mi0xXCI7XG4gICAgICAgIHRoaXMuc3RvcnlEYXRhLnNhdmUuc2V0KFwiY29zdHVtZVwiLCBcIkxpdHRsZSBSZWQgUmlkaW5nIEhvb2RcIik7XG4gICAgICAgIHRoaXMuc3RvcnlEYXRhLnNhdmUuc2V0KFwiYWN0aW9uXCIsIFwid2Fsa2luZ1wiKTtcbiAgICAgICAgdGhpcy5zdG9yeURhdGEuc2F2ZS5zZXQoXCJ3ZWF0aGVyXCIsIFwic3VubnlcIik7XG4gICAgICAgIHRoaXMuc3RvcnlEYXRhLnNhdmUuc2V0KFwiYmFza2V0XCIsIFwidG9vbGJveFwiKTtcbiAgICAgICAgKHRoaXMuc3RvcnlEYXRhIGFzIExSUkhTdG9yeURhdGEpLmJhc2tldENob2ljZSA9IEJhc2tldENob2ljZS5iYXNrZXQ7XG5cbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpLnggPSBMUlJIU3RvcnlEYXRhLmFjdDJMcnJoWFBvc2l0aW9uXG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS53b2xmKS54ID0gTFJSSFN0b3J5RGF0YS5hY3QyV29sZlhQb3NpdGlvblxuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubmFycmF0b3IpLnggPSBMUlJIU3RvcnlEYXRhLmFjdDJOYXJyYXRvclhQb3NpdGlvblxuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCkuY29udGFpbmVyLnNjYWxlLnggPSBMUlJIU3RvcnlEYXRhLmFjdDJMcnJoWFNjYWxlXG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS53b2xmKS5jb250YWluZXIuc2NhbGUueCA9IExSUkhTdG9yeURhdGEuYWN0MldvbGZYU2NhbGVcblxuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubmFycmF0b3IpLnNob3coKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLndvbGYpLmhpZGUoKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpLmhpZGUoKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdyYW5kbWEpLmhpZGUoKTtcblxuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ3JhbmRtYSkuc2V0Q29zdHVtZSAoIENvc3R1bWVzLmdyYW5kbWEpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubGl0dGxlUmVkSG9vZCkuc2V0Q29zdHVtZSAoIENvc3R1bWVzLmxpdHRsZVJlZEhvb2QpO1xuICAgICAgICAodGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmxpdHRsZVJlZEhvb2QpIGFzIExSUkhDaGFyYWN0ZXIpLnNldEJhc2tldCAoIENvc3R1bWVzLmJhc2tldCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS53b2xmKS5zZXRDb3N0dW1lICggQ29zdHVtZXMud29sZik7XG5cbiAgICAgICAgdGhpcy5kb29yLnNob3coKTtcbiAgICAgICAgdGhpcy5iYWNrZHJvcC5zZXRCYWNrZHJvcFRvKEJhY2tEcm9wU2tpbi5hY3QyLCB0cnVlKTtcbiAgICAgICAgdGhpcy5wcmlzb25Qcm9wLnNlbGVjdGVkID0gUHJpc29uVHlwZS5wYW50cnk7XG4gICAgICAgIHRoaXMucHJpc29uUHJvcC5oaWRlKCk7XG5cbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5nb1RvKHBhc3NhZ2VOYW1lKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBHbG93RmlsdGVyIH0gZnJvbSBcIkBwaXhpL2ZpbHRlci1nbG93XCI7XG5pbXBvcnQgeyBjcmVhdGVIb3ZlckVmZmV0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCB7IEludGVyYWN0aW9uSGFuZGxlciB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9tZWRpYXRvcnMvU2NlbmVNZWRpYXRvclwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFN0YWdlUHJvcHMgaW1wbGVtZW50cyBJU3RhZ2VQcm9wcyB7XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgYW5hbHl0aWNzTmFtZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCB2aWV3OiBWaWV3O1xuICAgIHByb3RlY3RlZCBvdXRsaW5lRmlsdGVyOiBHbG93RmlsdGVyW107XG4gICAgcHJvdGVjdGVkIGhvdmVyU2NyaXB0OiBmcmFtZXdvcmsuSG92ZXJTY3JpcHQ7XG4gICAgcHJvdGVjdGVkIGludGVyYWN0aW9uSGFuZGxlcjogSW50ZXJhY3Rpb25IYW5kbGVyXG4gICAgcHJvdGVjdGVkIGhvdmVyU2NyaXB0TWFwOiBNYXA8VmlldywgZnJhbWV3b3JrLkhvdmVyU2NyaXB0PiA9IG5ldyBNYXAoKTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlciA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5JbnRlcmFjdGlvbkhhbmRsZXIpO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGluaXQoKTtcblxuICAgIHByb3RlY3RlZCBhZGRPdXRsaW5lKHZpZXc6IFZpZXcgPSB0aGlzLnZpZXcpIHtcbiAgICAgICAgY29uc3Qgb3V0bGluZUZpbHRlciA9IGNyZWF0ZUhvdmVyRWZmZXQoKTtcbiAgICAgICAgdmlldy5maWx0ZXJzID0gW291dGxpbmVGaWx0ZXJdO1xuICAgICAgICBvdXRsaW5lRmlsdGVyLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgaG92ZXJTY3JpcHQgPSBuZXcgZnJhbWV3b3JrLkhvdmVyU2NyaXB0KHtcbiAgICAgICAgICAgIHZpZXc6IHZpZXcsXG4gICAgICAgICAgICBob3ZlclN0YXJ0Q2FsbGJhY2s6IChldmVudCwgdmlldykgPT4ge1xuICAgICAgICAgICAgICAgIG91dGxpbmVGaWx0ZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaG92ZXJFbmRDYWxsYmFjazogKGV2ZW50LCB2aWV3KSA9PiB7XG4gICAgICAgICAgICAgICAgb3V0bGluZUZpbHRlci5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ob3ZlclNjcmlwdE1hcC5zZXQodmlldywgaG92ZXJTY3JpcHQpXG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGVyLnNjcmlwdHMuYWRkU2NyaXB0KGhvdmVyU2NyaXB0KTtcbiAgICB9XG5cbiAgICBkZWluaXQoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlSG92ZXJTY3JpcHQodGhpcy52aWV3KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVtb3ZlSG92ZXJTY3JpcHQodmlldzogVmlldyA9IHRoaXMudmlldykge1xuICAgICAgICBjb25zdCBob3ZlclNjcmlwdCA9IHRoaXMuaG92ZXJTY3JpcHRNYXAuZ2V0KHZpZXcpO1xuICAgICAgICBpZiAoaG92ZXJTY3JpcHQpIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGVyLnNjcmlwdHMucmVtb3ZlU2NyaXB0KGhvdmVyU2NyaXB0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0KCkgeyB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU3RhZ2VQcm9wcyB7XG4gICAgaW5pdCgpOiB2b2lkO1xuICAgIGRlaW5pdCgpOiB2b2lkO1xuICAgIHJlc2V0KCk6IHZvaWQ7XG59IiwiaW1wb3J0IEFic3RyYWN0U3RhZ2VQcm9wcyBmcm9tIFwiLi4vQWJzdHJhY3RTdGFnZVByb3BzXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IFNlcnZpY2VOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBBbmFseXRpY3NTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL0FuYWx5dGljc1NlcnZpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlzY29iYWxsIGV4dGVuZHMgQWJzdHJhY3RTdGFnZVByb3BzIHtcblxuICAgIHByb3RlY3RlZCBhbmFseXRpY3NOYW1lOiBzdHJpbmcgPSBcImRpc2NvYmFsbFwiO1xuICAgIHByb3RlY3RlZCBpc0lkbGU6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHByb3RlY3RlZCBnZXQgYW5hbHl0aWNzU2VydmljZSgpOiBBbmFseXRpY3NTZXJ2aWNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldChTZXJ2aWNlTmFtZS5BbmFseXRpY3NTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3LCBwcml2YXRlIHJlZmxlY3Rpb25TcGluZTogZnJhbWV3b3JrLlNwaW5lVmlldywgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy52aWV3ID0gdGhpcy5zcGluZTtcbiAgICAgICAgdGhpcy52aWV3LnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5pZGxlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3coKSB7XG4gICAgICAgIHRoaXMuc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIERpc2NvYmFsbEFuaW0uc2hvdywgZmFsc2UpO1xuICAgICAgICB0aGlzLnJlZmxlY3Rpb25TcGluZS52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIGlkbGUoKSB7XG4gICAgICAgIHRoaXMuaXNJZGxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zcGluZS5zdGF0ZS5zZXRBbmltYXRpb24oMCwgRGlzY29iYWxsQW5pbS5pZGxlLCB0cnVlKTtcbiAgICAgICAgdGhpcy5yZWZsZWN0aW9uU3BpbmUudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzcGluKCkge1xuICAgICAgICB0aGlzLmlzSWRsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCBEaXNjb2JhbGxBbmltLnNwaW4sIHRydWUpO1xuICAgICAgICB0aGlzLnJlZmxlY3Rpb25TcGluZS52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZWZsZWN0aW9uU3BpbmUuYWxwaGEgPSAwLjY7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNob3dBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMudmlldy52aXNpYmxlID0gdHJ1ZSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5zcGluZSwgRGlzY29iYWxsQW5pbS5zaG93KSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuaWRsZSgpKSxcblxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlci5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIodGhpcy5zcGluZSwgdGhpcy5zd2l0Y2hTdGF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRPdXRsaW5lKCk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3dpdGNoU3RhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzSWRsZSkge1xuICAgICAgICAgICAgdGhpcy5zZW5kQW5hbHl0aWNzKERpc2NvYmFsbEFuaW0uc3BpbilcbiAgICAgICAgICAgIHRoaXMuc3BpbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZW5kQW5hbHl0aWNzKERpc2NvYmFsbEFuaW0uaWRsZSk7XG4gICAgICAgICAgICB0aGlzLmlkbGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2VuZEFuYWx5dGljcyh0eXBlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZS5zZW5kRXZlbnREeW5hbWljSW50ZXJhY3Rpb24odGhpcy5hbmFseXRpY3NOYW1lLCB0eXBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlci5yZW1vdmVCdXR0b25QcmVzc2VkTGlzdGVuZXIodGhpcy5zcGluZSk7XG4gICAgICAgIHRoaXMuaWRsZSgpO1xuICAgICAgICB0aGlzLnZpZXcudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZW51bSBEaXNjb2JhbGxBbmltIHtcbiAgICBpZGxlID0gXCJpZGxlXCIsXG4gICAgc2hvdyA9IFwic2hvd1wiLFxuICAgIHNwaW4gPSBcInNwaW5cIixcbn0iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBmaW5kQ2hpbGRCeU5hbWUgZnJvbSBcIi4uLy4uLy4uL3V0aWxzL1V0aWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1cnRhaW5ze1xuICAgIHB1YmxpYyBjdXJ0YWluczogZnJhbWV3b3JrLlNwaW5lVmlldztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlldzogVmlldyl7XG4gICAgICAgIHRoaXMuY3VydGFpbnMgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcIm1haW5jdXJ0YWluLWFuaW1cIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5jdXJ0YWlucy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jdXJ0YWlucy5hdXRvVXBkYXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE9wZW5DdXJ0YWluc0FjdGlvbigpOmZyYW1ld29yay5BY3Rpb257XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmN1cnRhaW5zLnZpc2libGUgPSB0cnVlKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLmN1cnRhaW5zLCBBbmltLm9wZW4pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDbG9zZUN1cnRhaW5zQWN0aW9uKCk6ZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5jdXJ0YWlucy52aXNpYmxlID0gdHJ1ZSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLmN1cnRhaW5zLCBBbmltLmNsb3NlKSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dDdXJ0YWlucygpe1xuICAgICAgICB0aGlzLmN1cnRhaW5zLnN0YXRlLnNldEFuaW1hdGlvbigwLCBBbmltLmlkbGVDbG9zZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY3VydGFpbnMudmlzaWJsZSA9IHRydWU7XG4gICAgfVxuXG59XG5cbmVudW0gQW5pbXtcbiAgICBvcGVuID0gXCJvcGVuXCIsXG4gICAgY2xvc2UgPSBcImNsb3NlXCIsXG4gICAgaWRsZUNsb3NlID0gXCJpZGxlLWNsb3NlXCJcbn0iLCJpbXBvcnQgQWJzdHJhY3RTdGFnZVByb3BzIGZyb20gXCIuLi9BYnN0cmFjdFN0YWdlUHJvcHNcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFNvdW5kU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvU291bmRTZXJ2aWNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IEFydGh1ckJ1aWxkSW5mb1NlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL0FydGh1ckJ1aWxkSW5mb1NlcnZpY2VcIjtcbmltcG9ydCB7IEFuYWx5dGljc1NlcnZpY2UgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvQW5hbHl0aWNzU2VydmljZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29tQm94IGV4dGVuZHMgQWJzdHJhY3RTdGFnZVByb3BzIHtcbiAgICBwcm90ZWN0ZWQgYW5hbHl0aWNzTmFtZTogc3RyaW5nID0gXCJtdXNpY19wbGF5ZXJcIjtcbiAgICBwcml2YXRlIGdldCBidWlsZEluZm9TZXJ2aWNlKCk6IEFydGh1ckJ1aWxkSW5mb1NlcnZpY2V7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXQoU2VydmljZU5hbWUuQnVpbGRJbmZvU2VydmljZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBhbmFseXRpY3NTZXJ2aWNlKCk6IEFuYWx5dGljc1NlcnZpY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkFuYWx5dGljc1NlcnZpY2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbXVzaWNzOiBzdHJpbmcgW107XG5cbiAgICBwcml2YXRlIHNvdW5kU2VydmljZTogU291bmRTZXJ2aWNlID0gbnVsbDtcbiAgICBwcml2YXRlIGJ1dHRvbkxlZnQ6IGZyYW1ld29yay5TcHJpdGVWaWV3ID0gbnVsbDtcbiAgICBwcml2YXRlIGJ1dHRvbk1pZGRsZTogZnJhbWV3b3JrLlNwcml0ZVZpZXcgPSBudWxsO1xuICAgIHByaXZhdGUgYnV0dG9uUmlnaHQ6IGZyYW1ld29yay5TcHJpdGVWaWV3ID0gbnVsbDtcbiAgICBwcml2YXRlIGJ1dHRvbkxlZnRPZmY6IGZyYW1ld29yay5TcHJpdGVWaWV3ID0gbnVsbDtcbiAgICBwcml2YXRlIGJ1dHRvbk1pZGRsZU9mZjogZnJhbWV3b3JrLlNwcml0ZVZpZXcgPSBudWxsO1xuICAgIHByaXZhdGUgYnV0dG9uUmlnaHRPZmY6IGZyYW1ld29yay5TcHJpdGVWaWV3ID0gbnVsbDtcbiAgICBwcml2YXRlIGJ1dHRvbnM6IGZyYW1ld29yay5TcHJpdGVWaWV3W10gPSBbXTtcbiAgICBwcml2YXRlIHBhaXJzOiBmcmFtZXdvcmsuU3ByaXRlVmlld1tdW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGFpbmVyOiBWaWV3LCBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihkaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLnZpZXcgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2UgPSBkaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLlNvdW5kU2VydmljZSk7XG4gICAgICAgIHRoaXMuYnV0dG9uTGVmdCA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwieWVsbG93LW9uXCIpIGFzIGZyYW1ld29yay5TcHJpdGVWaWV3O1xuICAgICAgICB0aGlzLmJ1dHRvbk1pZGRsZSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwicmVkLW9uXCIpIGFzIGZyYW1ld29yay5TcHJpdGVWaWV3O1xuICAgICAgICB0aGlzLmJ1dHRvblJpZ2h0ID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJibHVlLW9uXCIpIGFzIGZyYW1ld29yay5TcHJpdGVWaWV3O1xuICAgICAgICB0aGlzLmJ1dHRvbkxlZnRPZmYgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcInllbGxvdy1vZmZcIikgYXMgZnJhbWV3b3JrLlNwcml0ZVZpZXc7XG4gICAgICAgIHRoaXMuYnV0dG9uTWlkZGxlT2ZmID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJyZWQtb2ZmXCIpIGFzIGZyYW1ld29yay5TcHJpdGVWaWV3O1xuICAgICAgICB0aGlzLmJ1dHRvblJpZ2h0T2ZmID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJibHVlLW9mZlwiKSBhcyBmcmFtZXdvcmsuU3ByaXRlVmlldztcbiAgICAgICAgdGhpcy5idXR0b25zID0gW3RoaXMuYnV0dG9uTGVmdCwgdGhpcy5idXR0b25NaWRkbGUsIHRoaXMuYnV0dG9uUmlnaHQsIHRoaXMuYnV0dG9uTGVmdE9mZiwgdGhpcy5idXR0b25NaWRkbGVPZmYsIHRoaXMuYnV0dG9uUmlnaHRPZmZdO1xuICAgICAgICB0aGlzLnBhaXJzID0gW1t0aGlzLmJ1dHRvbkxlZnQsIHRoaXMuYnV0dG9uTGVmdE9mZl0sIFt0aGlzLmJ1dHRvbk1pZGRsZSwgdGhpcy5idXR0b25NaWRkbGVPZmZdLCBbdGhpcy5idXR0b25SaWdodCwgdGhpcy5idXR0b25SaWdodE9mZl1dO1xuICAgICAgICB0aGlzLm11c2ljcyA9IHRoaXMuZ2V0TXVzaWNzKCk7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TXVzaWNzKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgdGl0bGVzID0gW1wibXVzaWMtMS5tcDNcIiwgXCJtdXNpYy0yLm1wM1wiLCBcIm11c2ljLTMubXAzXCIsXTtcbiAgICAgICAgcmV0dXJuIHRpdGxlcy5tYXAoKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkSW5mb1NlcnZpY2Uuc3RvcnlQcmVmaXggKyBcIi1cIiArIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgaW5pdCgpIHtcblxuICAgICAgICB0aGlzLnBhaXJzLmZvckVhY2gocGFpciA9PiB0aGlzLnRvZ2dsZU9mZihwYWlyWzBdLCBwYWlyWzFdKSk7XG4gICAgICAgIGNvbnN0IG9uTGFiZWwgPSBcIm9uXCI7XG4gICAgICAgIGNvbnN0IG9mZkxhYmVsID0gXCJvZmZcIjtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXIuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMuYnV0dG9uTGVmdCwgdGhpcy5zZXRUb1RyYWNrMS5iaW5kKHRoaXMsIG9mZkxhYmVsICkpO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlci5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIodGhpcy5idXR0b25NaWRkbGUsIHRoaXMuc2V0VG9UcmFjazIuYmluZCh0aGlzLCBvZmZMYWJlbCkpO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlci5zZXRCdXR0b25QcmVzc2VkTGlzdGVuZXIodGhpcy5idXR0b25SaWdodCwgdGhpcy5zZXRUb1RyYWNrMy5iaW5kKHRoaXMsIG9mZkxhYmVsKSk7XG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGVyLnNldEJ1dHRvblByZXNzZWRMaXN0ZW5lcih0aGlzLmJ1dHRvbkxlZnRPZmYsIHRoaXMuc2V0VG9UcmFjazEuYmluZCh0aGlzLCBvbkxhYmVsKSk7XG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGVyLnNldEJ1dHRvblByZXNzZWRMaXN0ZW5lcih0aGlzLmJ1dHRvbk1pZGRsZU9mZiwgdGhpcy5zZXRUb1RyYWNrMi5iaW5kKHRoaXMsIG9uTGFiZWwpKTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXIuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMuYnV0dG9uUmlnaHRPZmYsIHRoaXMuc2V0VG9UcmFjazMuYmluZCh0aGlzLCBvbkxhYmVsKSk7XG5cbiAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goIGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZE91dGxpbmUoYnV0dG9uKTtcbiAgICAgICAgfSApO1xuICAgIH1cbiAgICBcbiAgICBzdGFydE11c2ljKCl7XG4gICAgICAgIHRoaXMuc2V0VG9UcmFjazEoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFRvVHJhY2sxKHR5cGU/OiBzdHJpbmcpe1xuICAgICAgICBjb25zdCB0cmFja051bWJlciA9IDA7XG4gICAgICAgIHRoaXMuc2VuZEFuYWx5dGljc0lmTmVlZGVkKHR5cGUpO1xuICAgICAgICB0aGlzLnRvZ2dsZU11c2ljRm9yQnV0dG9uKHRoaXMuYnV0dG9uTGVmdCwgdGhpcy5idXR0b25MZWZ0T2ZmLCBbW3RoaXMuYnV0dG9uTWlkZGxlLCB0aGlzLmJ1dHRvbk1pZGRsZU9mZl0sIFt0aGlzLmJ1dHRvblJpZ2h0LCB0aGlzLmJ1dHRvblJpZ2h0T2ZmXV0sIHRyYWNrTnVtYmVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNlbmRBbmFseXRpY3NJZk5lZWRlZCh0eXBlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZS5zZW5kRXZlbnREeW5hbWljSW50ZXJhY3Rpb24odGhpcy5hbmFseXRpY3NOYW1lLCB0eXBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0VG9UcmFjazIodHlwZT86IHN0cmluZyl7XG4gICAgICAgIGNvbnN0IHRyYWNrTnVtYmVyID0gMTtcbiAgICAgICAgdGhpcy5zZW5kQW5hbHl0aWNzSWZOZWVkZWQodHlwZSk7XG4gICAgICAgIHRoaXMudG9nZ2xlTXVzaWNGb3JCdXR0b24odGhpcy5idXR0b25NaWRkbGUsIHRoaXMuYnV0dG9uTWlkZGxlT2ZmLCBbW3RoaXMuYnV0dG9uTGVmdCwgdGhpcy5idXR0b25MZWZ0T2ZmXSwgW3RoaXMuYnV0dG9uUmlnaHQsIHRoaXMuYnV0dG9uUmlnaHRPZmZdXSwgdHJhY2tOdW1iZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0VG9UcmFjazModHlwZT86IHN0cmluZyl7XG4gICAgICAgIGNvbnN0IHRyYWNrTnVtYmVyID0gMjtcbiAgICAgICAgdGhpcy5zZW5kQW5hbHl0aWNzSWZOZWVkZWQodHlwZSk7XG4gICAgICAgIHRoaXMudG9nZ2xlTXVzaWNGb3JCdXR0b24odGhpcy5idXR0b25SaWdodCwgdGhpcy5idXR0b25SaWdodE9mZiwgW1t0aGlzLmJ1dHRvbk1pZGRsZSwgdGhpcy5idXR0b25NaWRkbGVPZmZdLCBbdGhpcy5idXR0b25MZWZ0LCB0aGlzLmJ1dHRvbkxlZnRPZmZdXSwgdHJhY2tOdW1iZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlTXVzaWNGb3JCdXR0b24odGFyZ2V0QnV0dG9uOiBmcmFtZXdvcmsuU3ByaXRlVmlldywgdGFyZ2V0QnV0dG9uT2ZmOiBmcmFtZXdvcmsuU3ByaXRlVmlldywgb3RoZXJzOiBmcmFtZXdvcmsuU3ByaXRlVmlld1tdW10sIHRyYWNrTnVtYmVyOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkT24odGFyZ2V0QnV0dG9uKSkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVPZmYodGFyZ2V0QnV0dG9uLCB0YXJnZXRCdXR0b25PZmYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVPbih0YXJnZXRCdXR0b24sIHRhcmdldEJ1dHRvbk9mZik7XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlcnMuZm9yRWFjaChidXR0b25zID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlT2ZmKGJ1dHRvbnNbMF0sIGJ1dHRvbnNbMV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkT24odGFyZ2V0QnV0dG9uKSkge1xuICAgICAgICAgICAgdGhpcy5zdG9wTXVzaWMoKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTXVzaWModHJhY2tOdW1iZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9wTXVzaWMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlT2ZmKHNwcml0ZTogZnJhbWV3b3JrLlNwcml0ZVZpZXcsIHNwcml0ZU9mZjogZnJhbWV3b3JrLlNwcml0ZVZpZXcpe1xuICAgICAgICBzcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICBzcHJpdGVPZmYudmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIHByaXZhdGUgdG9nZ2xlT24oc3ByaXRlOiBmcmFtZXdvcmsuU3ByaXRlVmlldywgc3ByaXRlT2ZmOiBmcmFtZXdvcmsuU3ByaXRlVmlldyl7XG4gICAgICAgIHNwcml0ZS52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgc3ByaXRlT2ZmLnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG4gICAgcHJpdmF0ZSBpc1RvZ2dsZWRPbihzcHJpdGU6IGZyYW1ld29yay5TcHJpdGVWaWV3KXtcbiAgICAgICAgcmV0dXJuIHNwcml0ZS52aXNpYmxlO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2hhbmdlTXVzaWMoaW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBtdXNpY05hbWUgPSB0aGlzLm11c2ljc1tpbmRleF07XG4gICAgICAgIGlmIChtdXNpY05hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcE11c2ljKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNvdW5kU2VydmljZS5wbGF5TXVzaWMobXVzaWNOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RvcE11c2ljKCl7XG4gICAgICAgIHRoaXMuc291bmRTZXJ2aWNlLnN0b3BNdXNpYygpO1xuICAgIH1cblxuICAgIGRlaW5pdCgpe1xuICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT57XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUhvdmVyU2NyaXB0KGJ1dHRvbik7XG4gICAgICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlci5yZW1vdmVCdXR0b25QcmVzc2VkTGlzdGVuZXIoYnV0dG9uKTtcbiAgICAgICAgfSApO1xuICAgIH1cblxuICAgIHJlc2V0KCkgeyBcbiAgICAgICAgdGhpcy5wYWlycy5mb3JFYWNoKHBhaXIgPT4gdGhpcy50b2dnbGVPZmYocGFpclswXSwgcGFpclsxXSkpO1xuICAgICAgICB0aGlzLnN0b3BNdXNpYygpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBmaW5kQ2hpbGRCeU5hbWUgZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2F0b3Ige1xuXG4gICAgcHJpdmF0ZSBfZXhpdExlZnQ6IFZpZXc7XG4gICAgcHVibGljIGdldCBleGl0TGVmdCgpOiBWaWV3e1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhpdExlZnQ7XG4gICAgfVxuICAgIHByaXZhdGUgX2V4aXRSaWdodDogVmlldztcbiAgICBwdWJsaWMgZ2V0IGV4aXRSaWdodCgpOiBWaWV3e1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhpdFJpZ2h0O1xuICAgIH1cbiAgICBwcml2YXRlIF9leGl0TWlkZGxlOiBWaWV3O1xuICAgIHB1YmxpYyBnZXQgZXhpdE1pZGRsZSgpOiBWaWV3e1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhpdE1pZGRsZTtcbiAgICB9XG4gICAgcHJpdmF0ZSBfbWlkZGxlTGVmdDogVmlldztcbiAgICBwdWJsaWMgZ2V0IG1pZGRsZUxlZnQoKTogVmlld3tcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pZGRsZUxlZnQ7XG4gICAgfVxuICAgIHByaXZhdGUgX21pZGRsZVJpZ2h0OiBWaWV3O1xuICAgIHB1YmxpYyBnZXQgbWlkZGxlUmlnaHQoKTogVmlld3tcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pZGRsZVJpZ2h0O1xuICAgIH1cbiAgICBwcml2YXRlIF9taWRkbGU6IFZpZXc7XG4gICAgcHVibGljIGdldCBtaWRkbGUoKTogVmlld3tcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pZGRsZTtcbiAgICB9XG4gICAgcHJpdmF0ZSBfd29sZkdyYW5ueTogVmlldztcbiAgICBwdWJsaWMgZ2V0IHdvbGZHcmFubnkoKTogVmlld3tcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvbGZHcmFubnk7XG4gICAgfVxuICAgIHByaXZhdGUgX3dvbGZBcHBlcmFuY2VTcG90OiBWaWV3O1xuICAgIHB1YmxpYyBnZXQgd29sZkFwcGVyYW5jZVNwb3QoKTogVmlld3tcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvbGZBcHBlcmFuY2VTcG90O1xuICAgIH1cbiAgICBwcml2YXRlIF9ncmFubnlEb29yU3BvdDogVmlldztcbiAgICBwdWJsaWMgZ2V0IGdyYW5ueURvb3JTcG90KCk6IFZpZXd7XG4gICAgICAgIHJldHVybiB0aGlzLl9ncmFubnlEb29yU3BvdDtcbiAgICB9XG4gICAgcHJpdmF0ZSBfZ3Jhbm55RG9kZ2U6IFZpZXc7XG4gICAgcHVibGljIGdldCBncmFubnlEb2RnZSgpOiBWaWV3e1xuICAgICAgICByZXR1cm4gdGhpcy5fZ3Jhbm55RG9kZ2U7XG4gICAgfVxuICAgIHByaXZhdGUgX3BhcmVudEJlYXJQb3NpdGlvbjogVmlldztcbiAgICBwdWJsaWMgZ2V0IHBhcmVudEJlYXJQb3NpdGlvbigpOiBWaWV3e1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50QmVhclBvc2l0aW9uO1xuICAgIH1cbiAgICBwcml2YXRlIF9iYWJ5QmVhclBvc2l0aW9uOiBWaWV3O1xuICAgIHB1YmxpYyBnZXQgYmFieUJlYXJQb3NpdGlvbigpOiBWaWV3e1xuICAgICAgICByZXR1cm4gdGhpcy5fYmFieUJlYXJQb3NpdGlvbjtcbiAgICB9XG4gICAgcHJpdmF0ZSBfcGFyZW50QmVhckRvb3JQb3NpdGlvbjogVmlldztcbiAgICBwdWJsaWMgZ2V0IHBhcmVudEJlYXJEb29yUG9zaXRpb24oKTogVmlld3tcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudEJlYXJEb29yUG9zaXRpb247XG4gICAgfVxuICAgIHByaXZhdGUgX2JhYnlCZWFyRG9vclBvc2l0aW9uOiBWaWV3O1xuICAgIHB1YmxpYyBnZXQgYmFieUJlYXJEb29yUG9zaXRpb24oKTogVmlld3tcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhYnlCZWFyRG9vclBvc2l0aW9uO1xuICAgIH1cbiAgICBwcml2YXRlIF9iYWJ5QmVhck5vdGljaW5nUG9zaXRpb246IFZpZXc7XG4gICAgcHVibGljIGdldCBiYWJ5QmVhck5vdGljaW5nUG9zaXRpb24oKTogVmlld3tcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhYnlCZWFyTm90aWNpbmdQb3NpdGlvbjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXc6IFZpZXcpIHtcbiAgICAgICAgdGhpcy5fZXhpdExlZnQgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImV4aXRMZWZ0XCIpIGFzIFZpZXc7XG4gICAgICAgIHRoaXMuX2V4aXRSaWdodCA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiZXhpdFJpZ2h0XCIpIGFzIFZpZXc7XG4gICAgICAgIHRoaXMuX2V4aXRNaWRkbGUgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImV4aXRNaWRkbGVcIikgYXMgVmlldztcbiAgICAgICAgdGhpcy5fbWlkZGxlTGVmdCA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwibWlkZGxlTGVmdFwiKSBhcyBWaWV3O1xuICAgICAgICB0aGlzLl9taWRkbGVSaWdodCA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwibWlkZGxlUmlnaHRcIikgYXMgVmlldztcbiAgICAgICAgdGhpcy5fbWlkZGxlID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJtaWRkbGVcIikgYXMgVmlldztcbiAgICAgICAgdGhpcy5fd29sZkdyYW5ueSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwid29sZkdyYW5ueVwiKSBhcyBWaWV3O1xuICAgICAgICB0aGlzLl93b2xmQXBwZXJhbmNlU3BvdCA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwid29sZkFwcGVyYW5jZVNwb3RcIikgYXMgVmlldztcbiAgICAgICAgdGhpcy5fZ3Jhbm55RG9vclNwb3QgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImdyYW5ueURvb3JTcG90XCIpIGFzIFZpZXc7XG4gICAgICAgIHRoaXMuX2dyYW5ueURvZGdlID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJncmFubnlEb2RnZVwiKSBhcyBWaWV3O1xuICAgICAgICB0aGlzLl9wYXJlbnRCZWFyUG9zaXRpb24gPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcInBhcmVudEJlYXJQb3NpdGlvblwiKSBhcyBWaWV3O1xuICAgICAgICB0aGlzLl9iYWJ5QmVhclBvc2l0aW9uID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJiYWJ5QmVhclBvc2l0aW9uXCIpIGFzIFZpZXc7XG4gICAgICAgIHRoaXMuX3BhcmVudEJlYXJEb29yUG9zaXRpb24gPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcInBhcmVudEJlYXJEb29yUG9zaXRpb25cIikgYXMgVmlldztcbiAgICAgICAgdGhpcy5fYmFieUJlYXJEb29yUG9zaXRpb24gPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImJhYnlCZWFyRG9vclBvc2l0aW9uXCIpIGFzIFZpZXc7XG4gICAgICAgIHRoaXMuX2JhYnlCZWFyTm90aWNpbmdQb3NpdGlvbiA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiYmFieUJlYXJOb3RpY2luZ1Bvc2l0aW9uXCIpIGFzIFZpZXc7XG4gICAgfVxuICAgXG59IiwiaW1wb3J0IFNjZW5lTWVkaWF0b3IgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL21lZGlhdG9ycy9TY2VuZU1lZGlhdG9yXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBTY3JpcHRNb2RlbCBmcm9tIFwiLi4vLi4vdHdpbmUvVHdpbmVTY3JpcHRcIjtcbmltcG9ydCBmaW5kQ2hpbGRCeU5hbWUgZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzXCI7XG5pbXBvcnQgRGlzY29CYWxsTWVkaWF0b3IgZnJvbSBcIi4uL3Byb3BzL3NjZW5lUHJvcHMvRGlzY29CYWxsXCI7XG5pbXBvcnQgQWN0TWVkaWF0b3IsIHsgQWN0TWVkaWF0b3JEZWxlZ2F0ZSB9IGZyb20gXCIuL0FjdE1lZGlhdG9yXCI7XG5pbXBvcnQgQm9vbUJveCBmcm9tIFwiLi4vcHJvcHMvc2NlbmVQcm9wcy9Cb29tQm94XCI7XG5pbXBvcnQgeyBJU3RhZ2VQcm9wcyB9IGZyb20gXCIuLi9wcm9wcy9BYnN0cmFjdFN0YWdlUHJvcHNcIjtcbmltcG9ydCBCYWNrZHJvcCBmcm9tIFwiLi4vcHJvcHMvQmFja2Ryb3BcIjtcbmltcG9ydCBTdG9yeURhdGEgZnJvbSBcIi4vU3RvcnlEYXRhXCI7XG5pbXBvcnQgQ3VydGFpbnMgZnJvbSBcIi4uL3Byb3BzL3NjZW5lUHJvcHMvQ3VydGFpbnNcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBDaGFyYWN0ZXJUeXBlIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQmFzZUNoYXJhY3RlclwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyLCB7IENoYXJhY3RlclNlbGVjdGlvbkRlbGVnYXRlIH0gZnJvbSBcIi4vQ2hhcmFjdGVyU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IENpbmRlcmVsbGFSZXBsYXlBY3RNZWRpYXRvciBmcm9tIFwiLi4vY2luZGVyZWxsYS9DaW5kZXJlbGxhUmVwbGF5QWN0TWVkaWF0b3JcIjtcbmltcG9ydCBMUlJIUmVwbGF5QWN0TWVkaWF0b3IgZnJvbSBcIi4uL2xycmgvTFJSSFJlcGxheUFjdE1lZGlhdG9yXCI7XG5pbXBvcnQgR29sZGlsb2Nrc1JlcGxheUFjdE1lZGlhdG9yIGZyb20gXCIuLi9nb2xkaWxvY2tzL0dvbGRpbG9ja3NSZXBsYXlBY3RNZWRpYXRvclwiO1xuXG50eXBlIFJlcGxheUFjdE1lZGlhdG9yID0gQ2luZGVyZWxsYVJlcGxheUFjdE1lZGlhdG9yIHwgTFJSSFJlcGxheUFjdE1lZGlhdG9yIHwgR29sZGlsb2Nrc1JlcGxheUFjdE1lZGlhdG9yO1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU3RvcnlNZWRpYXRvciBleHRlbmRzIFNjZW5lTWVkaWF0b3IgaW1wbGVtZW50cyBBY3RNZWRpYXRvckRlbGVnYXRlLCBDaGFyYWN0ZXJTZWxlY3Rpb25EZWxlZ2F0ZXtcbiAgICBwcm90ZWN0ZWQgcHJvcHM6IElTdGFnZVByb3BzW10gPSBbXTtcbiAgICBwcm90ZWN0ZWQgYWN0TWVkaWF0b3I6IEFjdE1lZGlhdG9yO1xuICAgIHByb3RlY3RlZCBiYWNrZHJvcDogQmFja2Ryb3A7XG4gICAgcHJvdGVjdGVkIHJlcGxheUFjdE1lZGlhdG9yOiBSZXBsYXlBY3RNZWRpYXRvcjtcbiAgICBwcm90ZWN0ZWQgc3RvcnlEYXRhOiBTdG9yeURhdGE7XG4gICAgcHJvdGVjdGVkIHNjcmlwdDogU2NyaXB0TW9kZWw7XG4gICAgcHJvdGVjdGVkIGNoYXJhY3RlclNlbGVjdGlvblBvcE92ZXI6IENoYXJhY3RlclNlbGVjdGlvblBvcE92ZXI7XG4gICAgcHJvdGVjdGVkIHBhdXNlQnV0dG9uOiBmcmFtZXdvcmsuU3ByaXRlVmlldztcbiAgICBwcm90ZWN0ZWQgY3VydGFpbnM6IEN1cnRhaW5zO1xuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldEFjdE1lZGlhdG9yKGNoYXJhY3RlclJvbGVNYXA6IE1hcDxSb2xlLCBDaGFyYWN0ZXJUeXBlPik6IEFjdE1lZGlhdG9yO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRTdG9yeURhdGEoKTogU3RvcnlEYXRhO1xuXG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3OiBWaWV3LCBkaVNlcnZpY2U6IERJU2VydmljZSwgcHJvdGVjdGVkIHN0b3J5TWVkaWF0b3JEZWxlZ2F0ZTogU3RvcnlNZWRpYXRvckRlbGVnYXRlKXtcbiAgICAgICAgc3VwZXIodmlldywgZGlTZXJ2aWNlKTsgICAgICAgIFxuICAgICAgICB0aGlzLnN0b3J5RGF0YSA9IHRoaXMuZ2V0U3RvcnlEYXRhKCk7XG4gICAgICAgIHRoaXMuaW5pdFByb3BzKCk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLlN0b3J5RGF0YSwgdGhpcy5zdG9yeURhdGEpO1xuICAgICAgICB0aGlzLnNjcmlwdCA9IHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5zdG9yeVNjcmlwdCk7XG4gICAgICAgIHRoaXMuaW5pdExvY2F0b3JzKCk7XG4gICAgfVxuICAgIFxuICAgIGluaXQoKXtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLnNob3dDaGFyYWN0ZXJTZWxlY3Rpb24oKTtcbiAgICAgICAgLy8gdGhpcy5kZWJ1Z1N0YXJ0U3RvcnkoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZGVidWdTdGFydFN0b3J5KCk7XG5cbiAgICBwcm90ZWN0ZWQgaW5pdFByb3BzKCl7XG4gICAgICAgIHRoaXMuaW5pdEN1cnRhaW5zKCk7XG4gICAgICAgIHRoaXMuaW5pdEJhY2tkcm9wKCk7XG4gICAgICAgIHRoaXMuaW5pdEJvb21Cb3goKTtcbiAgICAgICAgdGhpcy5pbml0RGlzY29iYWxsKCk7XG4gICAgICAgIHRoaXMuaW5pdFBhdXNlQnV0dG9uKCk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgaW5pdEN1cnRhaW5zKCkge1xuICAgICAgICB0aGlzLmN1cnRhaW5zID0gbmV3IEN1cnRhaW5zKHRoaXMudmlldyk7XG4gICAgICAgIHRoaXMubWFudWFsU3BpbmVzLnB1c2godGhpcy5jdXJ0YWlucy5jdXJ0YWlucyk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmN1cnRhaW5zLCB0aGlzLmN1cnRhaW5zKTtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBpbml0UGF1c2VCdXR0b24oKSB7XG4gICAgICAgIHRoaXMucGF1c2VCdXR0b24gPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcInVpLWhvbWVcIikgYXMgZnJhbWV3b3JrLlNwcml0ZVZpZXc7XG4gICAgICAgIHRoaXMucGF1c2VCdXR0b24udmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5wYXVzZUJ1dHRvbiwgdGhpcy5wYXVzZUJ1dHRvbik7XG4gICAgICAgIHRoaXMuc2V0QnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMucGF1c2VCdXR0b24sICgpID0+IHRoaXMuc3RvcnlNZWRpYXRvckRlbGVnYXRlLm9uU3RvcnlQYXVzZWQoKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0RGlzY29iYWxsKCkge1xuICAgICAgICBjb25zdCBkaXNjb2JhbGwgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImRpc2NvYmFsbC1hbmltXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIGNvbnN0IGRpc2NvYmFsbHJlZmxlY3Rpb24gPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImRpc2NvYmFsbC1yZWZsZWN0aW9uLWFuaW1cIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgY29uc3QgZGlzY29CYWxsTWVkaWF0b3IgPSBuZXcgRGlzY29CYWxsTWVkaWF0b3IoZGlzY29iYWxsLCBkaXNjb2JhbGxyZWZsZWN0aW9uLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmRpc2NvYmFsbCwgZGlzY29CYWxsTWVkaWF0b3IpO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2goZGlzY29CYWxsTWVkaWF0b3IpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEJvb21Cb3goKSB7XG4gICAgICAgIGNvbnN0IG11c2ljQm94VmlldyA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwibXVzaWNwbGF5ZXJcIikgYXMgZnJhbWV3b3JrLlNwcml0ZVZpZXc7XG4gICAgICAgIGNvbnN0IG11c2ljUGxheWVyID0gbmV3IEJvb21Cb3gobXVzaWNCb3hWaWV3LCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLm11c2ljQm94LCBtdXNpY1BsYXllcik7XG4gICAgICAgIHRoaXMucHJvcHMucHVzaChtdXNpY1BsYXllcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0QmFja2Ryb3AoKSB7XG4gICAgICAgIHRoaXMuYmFja2Ryb3AgPSBuZXcgQmFja2Ryb3AoZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJzdGFnZS1iYWNrZHJvcC1mcm9udFwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3LCBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcInN0YWdlLWJhY2tkcm9wXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXcpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5iYWNrZHJvcCwgdGhpcy5iYWNrZHJvcCk7XG4gICAgICAgIHRoaXMucHJvcHMucHVzaCh0aGlzLmJhY2tkcm9wKVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGFydFN0b3J5KGNoYXJhY3RlclJvbGVNYXA6IE1hcDxSb2xlLCBDaGFyYWN0ZXJUeXBlPikge1xuICAgICAgICB0aGlzLmFjdE1lZGlhdG9yID0gdGhpcy5nZXRBY3RNZWRpYXRvcihjaGFyYWN0ZXJSb2xlTWFwKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZE1lZGlhdG9yT25seSh0aGlzLmFjdE1lZGlhdG9yKTtcbiAgICAgICAgdGhpcy5hY3RNZWRpYXRvci5pbml0KCk7XG4gICAgICAgIHRoaXMuYWN0TWVkaWF0b3Iuc3RhcnREaWFsb2codGhpcy5zY3JpcHQpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0TG9jYXRvcnMoKSB7XG4gICAgICAgIGNvbnN0IGxvY2F0b3IgPSBuZXcgTG9jYXRvcih0aGlzLnZpZXcpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5sb2NhdG9yLCBsb2NhdG9yKTtcbiAgICB9XG5cbiAgICAvLyBBY3RNZWRpYXRvckRlbGVnYXRlXG4gICAgb25BY3RUZXJtaW5hdGVkKCk6IHZvaWR7XG4gICAgICAgIHRoaXMuc3RvcnlNZWRpYXRvckRlbGVnYXRlLm9uU3RvcnlUZXJtaW5hdGVkKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXJ0UmVwbGF5U3RvcnkoKSB7XG4gICAgICAgIHRoaXMuc3RhcnRSZXBsYXlBY3QoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXJ0UmVwbGF5QWN0KCkge1xuICAgICAgICBpZiggIXRoaXMucmVwbGF5QWN0TWVkaWF0b3Ipe1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZE1lZGlhdG9yT25seSh0aGlzLmFjdE1lZGlhdG9yKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlcyA9IHRoaXMuYWN0TWVkaWF0b3IucmVwbGF5U3RhdGVzLmNsb25lKGZhbHNlKTtcblxuICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyTWFwID0gbmV3IE1hcCA8IFJvbGUsIENoYXJhY3RlclR5cGU+KClcbiAgICAgICAgICAgIHRoaXMuYWN0TWVkaWF0b3IuY2hhcmFjdGVyUm9sZU1hcC5mb3JFYWNoKCh2YWx1ZTogQ2hhcmFjdGVyVHlwZSwga2V5OiBSb2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyTWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmFjdE1lZGlhdG9yLmRlaW5pdCgpO1xuICAgICAgICAgICAgdGhpcy5hY3RNZWRpYXRvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnJlcGxheUFjdE1lZGlhdG9yID0gdGhpcy5nZXRSZXBsYXlNZWRpYXRvcihzdGF0ZXMsIGNoYXJhY3Rlck1hcCk7XG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkTWVkaWF0b3JPbmx5KHRoaXMucmVwbGF5QWN0TWVkaWF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYW5VcFByb3AoKTtcbiAgICAgICAgdGhpcy5yZXBsYXlBY3RNZWRpYXRvci5pbml0KCk7XG4gICAgICAgIHRoaXMucmVwbGF5QWN0TWVkaWF0b3Iuc3RhcnREaWFsb2cobnVsbCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldFJlcGxheU1lZGlhdG9yKHN0YXRlczogQXJyYXk8U3RhZ2VTdGF0ZT4sIGNoYXJhY3RlclJvbGVNYXA6IE1hcDxSb2xlLCBDaGFyYWN0ZXJUeXBlPik7XG5cbiAgICBwdWJsaWMgZGVpbml0KCl7XG4gICAgICAgIHRoaXMucmVtb3ZlQnV0dG9uUHJlc3NlZExpc3RlbmVyKHRoaXMucGF1c2VCdXR0b24pO1xuICAgICAgICB0aGlzLmNsZWFuVXBQcm9wKCk7XG4gICAgICAgIHRoaXMuZGVpbml0UHJvcCgpO1xuICAgICAgICB0aGlzLmNsZWFuVXBSZXBsYXkoKTtcbiAgICAgICAgdGhpcy5jbGVhblVwQWN0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhblVwUHJvcCgpe1xuICAgICAgICB0aGlzLnByb3BzLmZvckVhY2gocHJvcCA9PiBwcm9wLnJlc2V0KCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVpbml0UHJvcCgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5mb3JFYWNoKHByb3AgPT4gcHJvcC5kZWluaXQoKSk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgY2xlYW5VcEFjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0TWVkaWF0b3Ipe1xuICAgICAgICAgICAgdGhpcy5hY3RNZWRpYXRvci5jYW5jZWxBY3Rpb25zKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkTWVkaWF0b3JPbmx5KHRoaXMuYWN0TWVkaWF0b3IpO1xuICAgICAgICAgICAgdGhpcy5hY3RNZWRpYXRvci5kZWluaXQoKTtcbiAgICAgICAgICAgIHRoaXMuYWN0TWVkaWF0b3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhblVwUmVwbGF5KCkge1xuICAgICAgICBpZiAodGhpcy5yZXBsYXlBY3RNZWRpYXRvcikge1xuICAgICAgICAgICAgdGhpcy5yZXBsYXlBY3RNZWRpYXRvci5jYW5jZWxBY3Rpb25zKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkTWVkaWF0b3JPbmx5KHRoaXMucmVwbGF5QWN0TWVkaWF0b3IpO1xuICAgICAgICAgICAgdGhpcy5yZXBsYXlBY3RNZWRpYXRvci5kZWluaXQoKTtcbiAgICAgICAgICAgIHRoaXMucmVwbGF5QWN0TWVkaWF0b3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNob3dDaGFyYWN0ZXJTZWxlY3Rpb24oKXtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyID0gdGhpcy5jcmVhdGVDaGFyYWN0ZXJTZWxlY3RQb3BPdmVyKCk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGRNZWRpYXRvck9ubHkodGhpcy5jaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyLmluaXQoKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyLnNob3coICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyU2VsZWN0aW9uUG9wT3Zlci5wbGF5RGlhbG9ncygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlQ2hhcmFjdGVyU2VsZWN0UG9wT3ZlcigpOiBDaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyIHtcbiAgICAgICAgY29uc3QgcG9wT3ZlclZpZXcgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImNoYXJhY3Rlci1zZWxlY3Rpb24tcGFuZWxcIikgYXMgVmlldztcbiAgICAgICAgcG9wT3ZlclZpZXcuYWxwaGEgPSAwO1xuICAgICAgICBjb25zdCBzZWxlY3RQb3BvdmVyID0gbmV3IENoYXJhY3RlclNlbGVjdGlvblBvcE92ZXIocG9wT3ZlclZpZXcsIHRoaXMuZGlTZXJ2aWNlLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdFBvcG92ZXI7XG4gICAgfVxuXG4gICAgcGF1c2UoKXtcbiAgICAgICAgdGhpcy5jdXJ0YWlucy5zaG93Q3VydGFpbnMoKTtcbiAgICAgICAgdGhpcy5nZXRDdXJyZW50QWN0TWVkaWF0b3IoKS5wYXVzZSgpO1xuICAgIH1cbiAgICBcbiAgICBwcm90ZWN0ZWQgZ2V0Q3VycmVudEFjdE1lZGlhdG9yKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdE1lZGlhdG9yIHx8IHRoaXMucmVwbGF5QWN0TWVkaWF0b3I7XG4gICAgfVxuICAgIFxuICAgIHVucGF1c2UoKXtcbiAgICAgICAgdGhpcy5ydW5BY3Rpb24odGhpcy5jdXJ0YWlucy5nZXRPcGVuQ3VydGFpbnNBY3Rpb24oKSk7ICAgICAgXG4gICAgICAgIHRoaXMuZ2V0Q3VycmVudEFjdE1lZGlhdG9yKCkudW5wYXVzZSgpOyBcbiAgICB9XG5cbiAgICAvL0NoYXJhY3RlclNlbGVjdGlvbkRlbGVnYXRlXG4gICAgb25UZXJtaW5hdGVkKHJlc3VsdE1hcDogTWFwPFJvbGUsIENoYXJhY3RlclR5cGU+KTogdm9pZHtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyLmhpZGUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZE1lZGlhdG9yT25seSh0aGlzLmNoYXJhY3RlclNlbGVjdGlvblBvcE92ZXIpO1xuICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXJTZWxlY3Rpb25Qb3BPdmVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTdG9yeShyZXN1bHRNYXApO1xuICAgICAgICB9KVxuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3J5TWVkaWF0b3JEZWxlZ2F0ZSB7XG4gICAgb25TdG9yeVRlcm1pbmF0ZWQoKTogdm9pZDtcbiAgICBvblN0b3J5UGF1c2VkKCk6IHZvaWQ7XG59IiwiaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCB7ICBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbiwgY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb25BbmRWaXNpYmxlV2l0aFNGWCB9IGZyb20gXCIuLi8uLi91dGlscy9BbmltYXRpb25BY3Rpb25zXCI7XG5pbXBvcnQgeyBJY29uQW5pbWF0aW9uIH0gZnJvbSBcIi4uL3BvcG92ZXJzL0ljb25TZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCBCYWNrZHJvcCBmcm9tIFwiLi9CYWNrZHJvcFwiO1xuaW1wb3J0IHsgSVN0YWdlUHJvcHMgfSBmcm9tIFwiLi9BYnN0cmFjdFN0YWdlUHJvcHNcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlld1wiO1xuaW1wb3J0IEFjdGlvbk1hbmFnZXJEZWxlZ2F0ZSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvQWN0aW9uTWFuYWdlckRlbGVnYXRlXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgV2VhdGhlckNob2ljZSB9IGZyb20gXCIuLi9mYWN0b3JpZXMvTFJSSERpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IHsgZGVsYXllZFNGWERhdGEsIGRlbGF5ZWRTRlhOYW1lcyB9IGZyb20gXCIuLi8uLi91dGlscy9EZWxheWVkU0ZYXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYXRoZXJQcm9wIGV4dGVuZHMgZnJhbWV3b3JrLlNjcmlwdCBpbXBsZW1lbnRzIElTdGFnZVByb3BzIHtcblxuICAgIHByb3RlY3RlZCBnZXQgYWN0aW9uTWFuYWdlckRlbGVnYXRlKCk6IEFjdGlvbk1hbmFnZXJEZWxlZ2F0ZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuQWN0aW9uTWFuYWdlckRlbGVnYXRlKTtcbiAgICB9XG4gICAgcHJpdmF0ZSB3ZWF0aGVyUHJvcHM6IGZyYW1ld29yay5TcGluZVZpZXdbXSA9IG51bGw7XG4gICAgcHJpdmF0ZSBzdW5Qcm9wOiBmcmFtZXdvcmsuU3BpbmVWaWV3ID0gbnVsbDtcbiAgICBwcml2YXRlIF9jaG9pY2VJZDogc3RyaW5nID0gbnVsbDtcblxuICAgIHB1YmxpYyBnZXQgY2hvaWNlSWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nob2ljZUlkIHx8IFdlYXRoZXJDaG9pY2UubHJyaFdlYXRoZXIyQ2xvdWRzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgY2hvaWNlSWQodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jaG9pY2VJZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBiYWNrZHJvcDogQmFja2Ryb3AsIHByaXZhdGUgdmlldzogVmlldywgcHJvdGVjdGVkIGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMud2VhdGhlclByb3BzID0gW1xuICAgICAgICAgICAgZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgJ3NreS1wcm9wLWFuaW0tbGVmdCcpIGFzIGZyYW1ld29yay5TcGluZVZpZXcsXG4gICAgICAgICAgICBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCAnc2t5LXByb3AtYW5pbS1taWRkbGUnKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3LFxuICAgICAgICAgICAgZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgJ3NreS1wcm9wLWFuaW0tcmlnaHQnKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3LFxuICAgICAgICBdO1xuICAgICAgICB0aGlzLndlYXRoZXJQcm9wcy5mb3JFYWNoKHByb3AgPT4gcHJvcC52aXNpYmxlID0gZmFsc2UpO1xuICAgICAgICBjb25zdCBzdW5Qcm9wSW5kZXggPSAxO1xuICAgICAgICB0aGlzLnN1blByb3AgPSB0aGlzLndlYXRoZXJQcm9wc1tzdW5Qcm9wSW5kZXhdO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcm9wKGNob2ljZUlkPzogc3RyaW5nLCBvbkNvbXBsZXRlPzogKCkgPT4gdm9pZCkge1xuICAgICAgICBpZihjaG9pY2VJZCl7XG4gICAgICAgICAgICB0aGlzLl9jaG9pY2VJZCA9IGNob2ljZUlkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLmdldERyb3BBY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMob25Db21wbGV0ZSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREcm9wQWN0aW9uKCk6ZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKHRoaXMuZ2V0V2VhdGhlckFjdGlvbnModGhpcy5fY2hvaWNlSWQpKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0V2VhdGhlckFjdGlvbnMod2VhdGhlckNob2ljZTogc3RyaW5nKTogZnJhbWV3b3JrLkFjdGlvbltdIHtcbiAgICAgICAgbGV0IGFjdGlvbnMgPSB0aGlzLmNyZWF0ZUNsb3VkeUFjdGlvbnMuYmluZCh0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5pc1N1bkNob2ljZSh3ZWF0aGVyQ2hvaWNlKSl7XG4gICAgICAgICAgICBhY3Rpb25zID0gdGhpcy5jcmVhdGVTdW5ueUFjdGlvbnMuYmluZCh0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQ2xvdWRDaG9pY2Uod2VhdGhlckNob2ljZSkpe1xuICAgICAgICAgICAgYWN0aW9ucyA9IHRoaXMuY3JlYXRlQ2xvdWR5QWN0aW9ucy5iaW5kKHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgXCJub3RoaW5nIGlzIHNldHVwIGZvciBcIiArIHdlYXRoZXJDaG9pY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGlvbnMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNTdW5DaG9pY2Uod2VhdGhlckNob2ljZTogc3RyaW5nKXtcbiAgICAgICByZXR1cm4gd2VhdGhlckNob2ljZS5pbmNsdWRlcyhcInN1blwiKTtcbiAgICB9XG4gICAgcHVibGljIGlzQ2xvdWRDaG9pY2Uod2VhdGhlckNob2ljZTogc3RyaW5nKXtcbiAgICAgICAgcmV0dXJuIHdlYXRoZXJDaG9pY2UuaW5jbHVkZXMoXCJjbG91ZFwiKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlQ2xvdWR5QWN0aW9ucygpOiBmcmFtZXdvcmsuQWN0aW9uW10ge1xuICAgICAgICB0aGlzLnNldENsb3VkU2tpbigpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZURyb3BBY3Rpb24odGhpcy53ZWF0aGVyUHJvcHMpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRDbG91ZFNraW4oKSB7XG4gICAgICAgIHRoaXMud2VhdGhlclByb3BzLmZvckVhY2goKHNwaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgc3BpbmUuc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShXZWF0aGVyU2tpbk5hbWUuY2xvdWQgKyAoaW5kZXggKyAxKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjcmVhdGVTdW5ueUFjdGlvbnMoKTogZnJhbWV3b3JrLkFjdGlvbltdIHtcbiAgICAgICAgdGhpcy5zZXRTdW5Ta2luKCk7XG5cbiAgICAgICAgY29uc3Qgc3VubnlBY3Rpb25zOiBmcmFtZXdvcmsuQWN0aW9uW10gPSB0aGlzLmNyZWF0ZURyb3BBY3Rpb24oW3RoaXMuc3VuUHJvcF0pO1xuICAgICAgICByZXR1cm4gc3VubnlBY3Rpb25zO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRTdW5Ta2luKCkge1xuICAgICAgICB0aGlzLnN1blByb3Auc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShXZWF0aGVyU2tpbk5hbWUuc3VuKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlRHJvcEFjdGlvbihzcGluZXM6IGZyYW1ld29yay5TcGluZVZpZXdbXSk6IGZyYW1ld29yay5BY3Rpb25bXSB7XG4gICAgICAgIGNvbnN0IHNvdW5kRGF0YSA9IGRlbGF5ZWRTRlhEYXRhW2RlbGF5ZWRTRlhOYW1lcy5yb3BlRHJvcF07XG4gICAgICAgIHJldHVybiBzcGluZXMubWFwKHNwaW5lID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb25BbmRWaXNpYmxlV2l0aFNGWChzcGluZSwgSWNvbkFuaW1hdGlvbi5zaG93LCBmYWxzZSwgc291bmREYXRhLm5hbWUsIHNvdW5kRGF0YS5kZWxheSwgdGhpcy5kaVNlcnZpY2UpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEljb25BbmltYXRpb24uaWRsZSwgdHJ1ZSkpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgaWYodGhpcy5pc1N1bkNob2ljZSh0aGlzLmNob2ljZUlkKSl7XG4gICAgICAgICAgICB0aGlzLnNldFN1blNraW4oKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SWRsZUFuaW0oW3RoaXMuc3VuUHJvcF0pO1xuICAgICAgICAgICAgdGhpcy5zaG93KFt0aGlzLnN1blByb3BdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xvdWRTa2luKCk7XG4gICAgICAgICAgICB0aGlzLnNldElkbGVBbmltKHRoaXMud2VhdGhlclByb3BzKTtcbiAgICAgICAgICAgIHRoaXMuc2hvdyh0aGlzLndlYXRoZXJQcm9wcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldElkbGVBbmltKHByb3BzOiBmcmFtZXdvcmsuU3BpbmVWaWV3W10pIHtcbiAgICAgICAgcHJvcHMuZm9yRWFjaCgoc3BpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBzcGluZS5zdGF0ZS5zZXRBbmltYXRpb24oMCwgSWNvbkFuaW1hdGlvbi5pZGxlLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlbW92ZUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IHRoaXMud2VhdGhlclByb3BzLm1hcChzcGluZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb24oc3BpbmUsIEljb25BbmltYXRpb24uaGlkZSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgYWN0aW9ucy5wdXNoKGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5yZXNldCgpKSk7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChhY3Rpb25zKTtcbiAgICB9XG5cbiAgICBkZWluaXQoKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHN1cGVyLmRlaW5pdCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlKCl7XG4gICAgICAgIHRoaXMud2VhdGhlclByb3BzLmZvckVhY2goIHByb3AgPT4ge1xuICAgICAgICAgICAgcHJvcC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHVibGljIHNob3cocHJvcHM6IGZyYW1ld29yay5TcGluZVZpZXdbXSl7XG4gICAgICAgIHByb3BzLmZvckVhY2goIHByb3AgPT4ge1xuICAgICAgICAgICAgcHJvcC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgIFxuICAgIH1cblxufVxuXG5lbnVtIFdlYXRoZXJTa2luTmFtZSB7XG4gICAgc3VuID0gXCJzdW5cIixcbiAgICBjbG91ZCA9IFwiY2xvdWRcIlxufSIsImltcG9ydCBBYnN0cmFjdFN0YWdlUHJvcHMgZnJvbSBcIi4uL0Fic3RyYWN0U3RhZ2VQcm9wc1wiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgeyBjcmVhdGVBY3Rpb25BbmRWaXNpYmxlV2l0aFNGWCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9BbmltYXRpb25BY3Rpb25zXCI7XG5pbXBvcnQgeyBkZWxheWVkU0ZYTmFtZXMsIGRlbGF5ZWRTRlhEYXRhIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL0RlbGF5ZWRTRlhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhZ2VQcm9wcyBleHRlbmRzIEFic3RyYWN0U3RhZ2VQcm9wc3tcbiAgICBwcm90ZWN0ZWQgYW5hbHl0aWNzTmFtZTogc3RyaW5nID0gbnVsbDtcbiAgICBcbiAgICBwdWJsaWMgZ2V0IHNwaW5lKCk6IGZyYW1ld29yay5TcGluZVZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3IGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IodmlldzogVmlldywgbmFtZTogc3RyaW5nLCBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihkaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLnZpZXcgPSBmaW5kQ2hpbGRCeU5hbWUodmlldywgbmFtZSkgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgc2V0U2tpbihza2luOiBzdHJpbmcpe1xuICAgICAgICBjb25zdCBzdGFnZVByb3AgPSB0aGlzLmZyb20oc2tpbilcbiAgICAgICAgdGhpcy5zcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKHN0YWdlUHJvcCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVE9ETzpBcyB0aGUgaWRsZSBhY3Rpb24gaXMgbG9vcGluZyB5b3UgY2Fubm90IHVzZSBpdCBpbiBhIHNlcXVlbmNlIGFjdGlvbiwgYXMgdGhlIGFjdGlvbiBuZXZlciBmaW5pc2hlcy5cbiAgICAgKiBVc2UgaXQgaW4gYSBwYXJhbGxlbCBhY3Rpb24gd2l0aCBhIGRlbGF5LlxuICAgICAqIEBwYXJhbSBhbmltIEBTdGFnZVByb3BzQW5pbWF0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTaG93QWN0aW9uKGFuaW06IHN0cmluZywgc2Z4TmFtZTogZGVsYXllZFNGWE5hbWVzID0gZGVsYXllZFNGWE5hbWVzLnByb3BEcm9wKTogZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgY29uc3Qgc291bmREYXRhID0gZGVsYXllZFNGWERhdGFbc2Z4TmFtZV07XG5cbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGNyZWF0ZUFjdGlvbkFuZFZpc2libGVXaXRoU0ZYKHRoaXMuc3BpbmUsIGFuaW0sIGZhbHNlLCBzb3VuZERhdGEubmFtZSwgc291bmREYXRhLmRlbGF5LCB0aGlzLmRpU2VydmljZSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLnNwaW5lLCBTdGFnZVByb3BzQW5pbWF0aW9ucy5pZGxlLCB7bG9vcDogdHJ1ZX0pLFxuICAgICAgICBdKVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRIaWRlQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5zcGluZSwgU3RhZ2VQcm9wc0FuaW1hdGlvbnMuaGlkZSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNwaW5lLnZpc2libGUgPSBmYWxzZSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvd0lkbGUoKXtcbiAgICAgICAgdGhpcy5zcGluZS52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zcGluZS5zdGF0ZS5zZXRBbmltYXRpb24oMCwgU3RhZ2VQcm9wc0FuaW1hdGlvbnMuaWRsZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmcm9tKHZhbHVlOiBzdHJpbmcpOiBTdGFnZVByb3BzU2tpbntcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcImJhbGxyb29tLWNoYWlyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0YWdlUHJvcHNTa2luLmJhbGxyb29tQ2hhaXI7XG4gICAgICAgICAgICBjYXNlIFwiYmFsbHJvb20tdGFibGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RhZ2VQcm9wc1NraW4uYmFsbHJvb21UYWJsZTtcbiAgICAgICAgICAgIGNhc2UgXCJjYW5keWNhbmUxXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0YWdlUHJvcHNTa2luLmNhbmR5Y2FuZTE7XG4gICAgICAgICAgICBjYXNlIFwiY2FuZHljYW5lMlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBTdGFnZVByb3BzU2tpbi5jYW5keWNhbmUyO1xuICAgICAgICAgICAgY2FzZSBcImNhbmR5Y2FuZTNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RhZ2VQcm9wc1NraW4uY2FuZHljYW5lMztcbiAgICAgICAgICAgIGNhc2UgXCJjYW5keWNhbmU0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0YWdlUHJvcHNTa2luLmNhbmR5Y2FuZTQ7XG4gICAgICAgICAgICBjYXNlIFwiZ29sZGlsb2Nrcy1iZWRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RhZ2VQcm9wc1NraW4uZ29sZGlsb2Nrc0JlZDtcbiAgICAgICAgICAgIGNhc2UgXCJnb2xkaWxvY2tzLWNoYWlyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0YWdlUHJvcHNTa2luLmdvbGRpbG9ja3NDaGFpcjtcbiAgICAgICAgICAgIGNhc2UgXCJnb2xkaWxvY2tzLW92ZW5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RhZ2VQcm9wc1NraW4uZ29sZGlsb2Nrc092ZW47XG4gICAgICAgICAgICBjYXNlIFwic2t5c2NyYXBlcjFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RhZ2VQcm9wc1NraW4uc2t5c2NyYXBlcjE7XG4gICAgICAgICAgICBjYXNlIFwic2t5c2NyYXBlcjJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RhZ2VQcm9wc1NraW4uc2t5c2NyYXBlcjI7XG4gICAgICAgICAgICBjYXNlIFwidHJlZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBTdGFnZVByb3BzU2tpbi50cmVlO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IFwibm90IGZvdW5kIFwiICsgdmFsdWU7XG4gICAgICAgIH1cbiAgICB9IFxuXG4gICAgZGVpbml0KCl7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gICAgXG4gICAgcmVzZXQoKXtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICAgIFxuICAgIGhpZGUoKXtcbiAgICAgICAgdGhpcy5zcGluZS52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgZW51bSBTdGFnZVByb3BzQW5pbWF0aW9uc3tcbiAgICBpZGxlID0gXCJpZGxlXCIsXG4gICAgaGlkZSA9IFwiaGlkZVwiLFxuICAgIHNob3dGcm9tU2lkZSA9IFwic2hvdy1mcm9tLXNpZGVcIixcbiAgICBzaG93RnJvbVRvcCA9IFwic2hvdy1mcm9tLXRvcFwiLFxufVxuXG5leHBvcnQgZW51bSBTdGFnZVByb3BzU2tpbntcbiAgICBiYWxscm9vbUNoYWlyID0gXCJiYWxscm9vbS1jaGFpclwiLFxuICAgIGJhbGxyb29tVGFibGUgPSBcImJhbGxyb29tLXRhYmxlXCIsXG4gICAgYnVzaDEgPSBcImJ1c2gxXCIsXG4gICAgYnVzaDIgPSBcImJ1c2gyXCIsXG4gICAgYnVzaDMgPSBcImJ1c2gzXCIsXG4gICAgY2FuZHljYW5lMSA9IFwiY2FuZHljYW5lMVwiLFxuICAgIGNhbmR5Y2FuZTIgPSBcImNhbmR5Y2FuZTJcIixcbiAgICBjYW5keWNhbmUzID0gXCJjYW5keWNhbmUzXCIsXG4gICAgY2FuZHljYW5lNCA9IFwiY2FuZHljYW5lNFwiLFxuICAgIGdvbGRpbG9ja3NCZWQgPSBcImdvbGRpbG9ja3MtYmVkXCIsXG4gICAgZ29sZGlsb2Nrc0NoYWlyID0gXCJnb2xkaWxvY2tzLWNoYWlyXCIsXG4gICAgZ29sZGlsb2Nrc092ZW4gPSBcImdvbGRpbG9ja3Mtb3ZlblwiLFxuICAgIHNreXNjcmFwZXIxID0gXCJza3lzY3JhcGVyMVwiLFxuICAgIHNreXNjcmFwZXIyID0gXCJza3lzY3JhcGVyMlwiLFxuICAgIGJlYW5zdGFsazEgPSBcImJlYW5zdGFsazFcIixcbiAgICBiZWFuc3RhbGsyID0gXCJiZWFuc3RhbGsyXCIsXG4gICAgYmVhbnN0YWxrMyA9IFwiYmVhbnN0YWxrM1wiLFxuICAgIGZsb3dlcjEgPSBcImZsb3dlcjFcIixcbiAgICBmbG93ZXIyID0gXCJmbG93ZXIyXCIsXG4gICAgZmxvd2VyMyA9IFwiZmxvd2VyM1wiLFxuICAgIGZsb3dlcjQgPSBcImZsb3dlcjRcIixcbiAgICB0cmVlID0gXCJ0cmVlXCIsXG59XG4iLCJpbXBvcnQgeyBJU3RhZ2VQcm9wcyB9IGZyb20gXCIuL0Fic3RyYWN0U3RhZ2VQcm9wc1wiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IHsgVGhyb3dpbmdDaG9pY2UgfSBmcm9tIFwiLi4vZmFjdG9yaWVzL0xSUkhEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyb3dpbmdQcm9wIGltcGxlbWVudHMgSVN0YWdlUHJvcHMge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHNwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuXG4gICAgXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3OiBWaWV3KSB7XG4gICAgICAgIHRoaXMuc3BpbmUgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcInRocm93aW5ncHJvcC1hbmltXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgICBcbiAgICBpbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBzaG93KCl7XG4gICAgICAgIHRoaXMuc3BpbmUudmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBoaWRlKCl7XG4gICAgICAgIHRoaXMuc3BpbmUudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0U2hvd0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zaG93KCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRIaWRlQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmhpZGUoKSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXRTaG93QW5pbUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9ue1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgdGhpcy5nZXRTaG93QWN0aW9uKCksXG4gICAgICAgICAgICB0aGlzLmdldEFuaW1BY3Rpb24oQW5pbS5zaG93KVxuICAgICAgICBdKVxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0SGl0QWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb257XG4gICAgICAgIGNvbnN0IGFuaW1OYW1lID0gQW5pbS5oaXQ7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1BY3Rpb24oYW5pbU5hbWUpO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0VGhyb3dBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgY29uc3QgYW5pbU5hbWUgPSBBbmltLnRocm93O1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbmltQWN0aW9uKGFuaW1OYW1lKTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGdldElkbGVBbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb257XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEFuaW0uaWRsZSwgdHJ1ZSkpO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGdldEFuaW1BY3Rpb24oYW5pbTogQW5pbSwgbG9vcDogYm9vbGVhbiA9IGZhbHNlKTogZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuc3BpbmUsIGFuaW0sIHtsb29wOiBsb29wfSk7XG4gICAgfVxuICAgIFxuICAgIGRlaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgICBcbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBzZXRTa2luRm9yVHlwZSh2IDogc3RyaW5nKSB7XG4gICAgICAgIHN3aXRjaCAodikge1xuICAgICAgICAgICAgY2FzZSBUaHJvd2luZ0Nob2ljZS5hY3QzRHVja2llOlxuICAgICAgICAgICAgICAgIHRoaXMuc3BpbmUuc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShUaHJvd2luZ1NraW4uZHVja2llKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgVGhyb3dpbmdDaG9pY2UuYWN0M1RlZGR5OlxuICAgICAgICAgICAgICAgIHRoaXMuc3BpbmUuc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShUaHJvd2luZ1NraW4udGVkZHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUaHJvd2luZ0Nob2ljZS5hY3QzVWt1bGVsZTpcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5lLnNrZWxldG9uLnNldFNraW5CeU5hbWUoVGhyb3dpbmdTa2luLnVrZWxlbGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0U2tpbihza2luOiBUaHJvd2luZ1NraW4pe1xuICAgICAgIHRoaXMuc3BpbmUuc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShza2luKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2tpcChvbkNvbXBsZXRlOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuc3BpbmUuc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShUaHJvd2luZ1NraW4uZHVja2llKTtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICB9XG4gICAgXG59XG5cblxuZW51bSBBbmltIHtcbiAgICBcbiAgICBzaG93ID0gXCJzaG93XCIsXG4gICAgaGl0ID0gXCJoaXRcIixcbiAgICB0aHJvdyA9IFwidGhyb3dcIixcbiAgICBpZGxlID0gXCJpZGxlXCIsXG59XG5cbmV4cG9ydCBlbnVtIFRocm93aW5nU2tpbiB7XG4gICAgZHVja2llID0gXCJydWJiZXJkdWNrXCIsXG4gICAgdGVkZHkgPSBcInRlZGR5YmVhclwiLFxuICAgIHVrZWxlbGUgPSBcInVrdWxlbGVcIixcbiAgICBnbGFzc3NsaXBwZXIgPSBcImdsYXNzc2xpcHBlclwiLFxuICAgIGFzdHJvbmF1dGJvb3QgPSBcImFzdHJvbmF1dGJvb3RcIixcbiAgICBzbmVha2VyID0gXCJzbmVha2VyXCIsXG59IiwiXG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IElTdGFnZVByb3BzIH0gZnJvbSBcIi4vQWJzdHJhY3RTdGFnZVByb3BzXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBBY3Rpb25NYW5hZ2VyRGVsZWdhdGUgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL0FjdGlvbk1hbmFnZXJEZWxlZ2F0ZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBTdGFnZVByb3BzLCB7IFN0YWdlUHJvcHNTa2luLCBTdGFnZVByb3BzQW5pbWF0aW9ucyB9IGZyb20gXCIuL3NjZW5lUHJvcHMvU3RhZ2VQcm9wc1wiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCB7IEZvcmVzdENob2ljZSB9IGZyb20gXCIuLi9mYWN0b3JpZXMvTFJSSERpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IHsgZGVsYXllZFNGWE5hbWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0RlbGF5ZWRTRlhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9yZXN0UHJvcHMgIGltcGxlbWVudHMgSVN0YWdlUHJvcHMge1xuXG4gICAgcHJvdGVjdGVkIGdldCBhY3Rpb25NYW5hZ2VyRGVsZWdhdGUoKTogQWN0aW9uTWFuYWdlckRlbGVnYXRlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5BY3Rpb25NYW5hZ2VyRGVsZWdhdGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvcHM6IFN0YWdlUHJvcHNbXSA9IFtdO1xuICAgIHByaXZhdGUgX2Nob2ljZUlkOiBzdHJpbmcgPSBudWxsO1xuICAgIFxuICAgIHB1YmxpYyBnZXQgY2hvaWNlSWQoKSA6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaG9pY2VJZCB8fCBGb3Jlc3RDaG9pY2Uuc2t5U2NyYXBlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGNob2ljZUlkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fY2hvaWNlSWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3OiBWaWV3LCBwcm90ZWN0ZWQgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwidHJlZS1wcm9wc1wiKSBhcyBWaWV3O1xuICAgICAgICBjb250YWluZXIuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiBjaGlsZC52aXNpYmxlID0gZmFsc2UpO1xuICAgIH1cblxuICAgIGluaXQoKSB7fVxuXG4gICAgcHVibGljIHNob3coY2hvaWNlSWQ6IHN0cmluZywgb25Db21wbGV0ZTogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9jaG9pY2VJZCA9IGNob2ljZUlkO1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgdGhpcy5nZXRGb3Jlc3RBY3Rpb24oY2hvaWNlSWQpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYyhvbkNvbXBsZXRlKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZvcmVzdEFjdGlvbihjaG9pY2VJZDogc3RyaW5nKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHZhciBhY3Rpb246IGZyYW1ld29yay5BY3Rpb247XG4gICAgICAgIHN3aXRjaCAoY2hvaWNlSWQpIHtcbiAgICAgICAgICAgIGNhc2UgRm9yZXN0Q2hvaWNlLnNreVNjcmFwZXI6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBza3lTY3JhcGVyID0gW1N0YWdlUHJvcHNTa2luLnNreXNjcmFwZXIxLCBTdGFnZVByb3BzU2tpbi5za3lzY3JhcGVyMl07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNreVNjcmFwZXJBbmltID0gW1N0YWdlUHJvcHNBbmltYXRpb25zLnNob3dGcm9tU2lkZSwgU3RhZ2VQcm9wc0FuaW1hdGlvbnMuc2hvd0Zyb21TaWRlXVxuXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKHNreVNjcmFwZXIubWFwKCh2YWx1ZTogU3RhZ2VQcm9wc1NraW4sIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNreVNjcmFwZXJQcm9wID0gbmV3IFN0YWdlUHJvcHModGhpcy52aWV3LCB2YWx1ZSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5wdXNoKHNreVNjcmFwZXJQcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBza3lTY3JhcGVyUHJvcC5nZXRTaG93QWN0aW9uKHNreVNjcmFwZXJBbmltW2luZGV4XSwgZGVsYXllZFNGWE5hbWVzLmZvcmVzdFByb3ApO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGb3Jlc3RDaG9pY2UudHJlZTpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyZWVQcm9wTmFtZXMgPSBbXCJwcm9wLXRyZWUxXCIsIFwicHJvcC10cmVlMlwiXTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwodHJlZVByb3BOYW1lcy5tYXAobmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmVlID0gbmV3IFN0YWdlUHJvcHModGhpcy52aWV3LCBuYW1lLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlLnNldFNraW4oU3RhZ2VQcm9wc1NraW4udHJlZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnB1c2godHJlZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJlZS5nZXRTaG93QWN0aW9uKFN0YWdlUHJvcHNBbmltYXRpb25zLnNob3dGcm9tU2lkZSlcbiAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGb3Jlc3RDaG9pY2UuY2FuZHk6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5kaWVzID0gW1N0YWdlUHJvcHNTa2luLmNhbmR5Y2FuZTEsIFN0YWdlUHJvcHNTa2luLmNhbmR5Y2FuZTIsIFN0YWdlUHJvcHNTa2luLmNhbmR5Y2FuZTMsIFN0YWdlUHJvcHNTa2luLmNhbmR5Y2FuZTRdXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbmRpZXNBbmltID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgU3RhZ2VQcm9wc0FuaW1hdGlvbnMuc2hvd0Zyb21Ub3AsIFxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhZ2VQcm9wc0FuaW1hdGlvbnMuc2hvd0Zyb21Ub3AsIFxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhZ2VQcm9wc0FuaW1hdGlvbnMuc2hvd0Zyb21Ub3AsIFxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhZ2VQcm9wc0FuaW1hdGlvbnMuc2hvd0Zyb21Ub3BdXG5cbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoY2FuZGllcy5tYXAoKHZhbHVlOiBTdGFnZVByb3BzU2tpbiwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FuZHlQcm9wID0gbmV3IFN0YWdlUHJvcHModGhpcy52aWV3LCB2YWx1ZSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5wdXNoKGNhbmR5UHJvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FuZHlQcm9wLmdldFNob3dBY3Rpb24oY2FuZGllc0FuaW1baW5kZXhdLCBkZWxheWVkU0ZYTmFtZXMuZm9yZXN0UHJvcCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aW9uOyBcbiAgICB9XG5cbiAgICBwdWJsaWMgc2tpcCgpIHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IHt9O1xuICAgICAgICBhY3Rpb25zW0ZvcmVzdENob2ljZS5za3lTY3JhcGVyXSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNreVNjcmFwZXIgPSBbU3RhZ2VQcm9wc1NraW4uc2t5c2NyYXBlcjEsIFN0YWdlUHJvcHNTa2luLnNreXNjcmFwZXIyXTtcblxuICAgICAgICAgICAgc2t5U2NyYXBlci5mb3JFYWNoKCh2YWx1ZTogU3RhZ2VQcm9wc1NraW4sIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBza3lTY3JhcGVyUHJvcCA9IG5ldyBTdGFnZVByb3BzKHRoaXMudmlldywgdmFsdWUsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgICAgICBza3lTY3JhcGVyUHJvcC5zaG93SWRsZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucHVzaChza3lTY3JhcGVyUHJvcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgYWN0aW9uc1tGb3Jlc3RDaG9pY2UudHJlZV0gPSAoKSA9PiB7XG4gICAgICAgICAgICBbXCJwcm9wLXRyZWUxXCIsIFwicHJvcC10cmVlMlwiXS5mb3JFYWNoKCBuYW1lID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmVlID0gbmV3IFN0YWdlUHJvcHModGhpcy52aWV3LCBuYW1lLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICAgICAgdHJlZS5zZXRTa2luKFN0YWdlUHJvcHNTa2luLnRyZWUpO1xuICAgICAgICAgICAgICAgIHRyZWUuc2hvd0lkbGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnB1c2godHJlZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgYWN0aW9uc1tGb3Jlc3RDaG9pY2UuY2FuZHldID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FuZGllcyA9IFtTdGFnZVByb3BzU2tpbi5jYW5keWNhbmUxLCBTdGFnZVByb3BzU2tpbi5jYW5keWNhbmUyLCBTdGFnZVByb3BzU2tpbi5jYW5keWNhbmUzLCBTdGFnZVByb3BzU2tpbi5jYW5keWNhbmU0XVxuICAgICAgICAgICAgY2FuZGllcy5mb3JFYWNoKCh2YWx1ZTogU3RhZ2VQcm9wc1NraW4sIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW5keVByb3AgPSBuZXcgU3RhZ2VQcm9wcyh0aGlzLnZpZXcsIHZhbHVlLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICAgICAgY2FuZHlQcm9wLnNob3dJZGxlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5wdXNoKGNhbmR5UHJvcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBhY3Rpb25zW3RoaXMuY2hvaWNlSWRdKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlbW92ZUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5tYXAocHJvcCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SGlkZUFjdGlvbihwcm9wLnNwaW5lKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRIaWRlQWN0aW9uKHNwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3KTpmcmFtZXdvcmsuQWN0aW9ue1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUoc3BpbmUsIFwiaGlkZVwiKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3BpbmUudmlzaWJsZSA9IGZhbHNlKVxuICAgICAgICBdKVxuICAgIH1cblxuICAgIGRlaW5pdCgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5mb3JFYWNoKHByb3AgPT4gcHJvcC5kZWluaXQoKSk7XG4gICAgICAgIHRoaXMucHJvcHMgPSBbXTtcbiAgICB9XG4gICAgXG4gICAgcmVzZXQoKXtcbiAgICAgICAgdGhpcy5wcm9wcy5mb3JFYWNoKHByb3AgPT4gcHJvcC5yZXNldCgpKTtcbiAgICB9XG5cbiAgICBoaWRlKCl7XG4gICAgICAgIHRoaXMucHJvcHMuZm9yRWFjaChwcm9wID0+IHByb3AuaGlkZSgpKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgSVN0YWdlUHJvcHMgfSBmcm9tIFwiLi9BYnN0cmFjdFN0YWdlUHJvcHNcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlld1wiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0RpcmVjdGlvblwiO1xuaW1wb3J0IFNGWEFjdGlvbiBmcm9tIFwiLi4vLi4vdXRpbHMvU0ZYQWN0aW9uXCI7XG5pbXBvcnQgeyBTb3VuZENoYW5uZWwgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvU291bmRTZXJ2aWNlXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9vciBpbXBsZW1lbnRzIElTdGFnZVByb3BzIHtcblxuICAgIHByaXZhdGUgZnJvbnRGcmFtZTogZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICBwcml2YXRlIGJhY2tGcmFtZTogZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICBwcml2YXRlIHNwaW5lczogZnJhbWV3b3JrLlNwaW5lVmlldyBbXTtcblxuICAgIHB1YmxpYyBnZXQgeCgpOiBudW1iZXJ7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb250RnJhbWUueDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHkoKTogbnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9udEZyYW1lLnk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzcGluZSgpOiBmcmFtZXdvcmsuU3BpbmVWaWV3e1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9udEZyYW1lO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlldzogVmlldywgcHJvdGVjdGVkIGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuZnJvbnRGcmFtZSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiZG9vcmZyYW1lLWFuaW1cIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5iYWNrRnJhbWUgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImRvb3ItYW5pbVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLnNwaW5lcyA9IFt0aGlzLmZyb250RnJhbWUsIHRoaXMuYmFja0ZyYW1lXTtcblxuICAgICAgICB0aGlzLnNwaW5lcy5mb3JFYWNoKHNwaW5lID0+IHtcbiAgICAgICAgICAgIHNwaW5lLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRQb3NpdGlvbihwb3NpdGlvbjogUElYSS5Qb2ludCkge1xuICAgICAgICB0aGlzLmZyb250RnJhbWUucG9zaXRpb24gPSB0aGlzLmJhY2tGcmFtZS5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXREaXJlY3Rpb24oZGlyZWN0aW9uOiBEaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5mcm9udEZyYW1lLnNjYWxlLnggPSBkaXJlY3Rpb25cbiAgICAgICAgdGhpcy5iYWNrRnJhbWUuc2NhbGUueCA9IGRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvdygpe1xuICAgICAgICB0aGlzLnNwaW5lcy5mb3JFYWNoKHNwaW5lID0+IHtcbiAgICAgICAgICAgIHNwaW5lLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZSgpe1xuICAgICAgICB0aGlzLnNwaW5lcy5mb3JFYWNoKHNwaW5lID0+IHtcbiAgICAgICAgICAgIHNwaW5lLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNob3dBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2hvdygpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuZnJvbnRGcmFtZSwgQW5pbS5zaG93KSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuYmFja0ZyYW1lLCBBbmltLnNob3cpLFxuICAgICAgICBdKVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRIaWRlQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuZnJvbnRGcmFtZSwgQW5pbS5oaWRlKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLmJhY2tGcmFtZSwgQW5pbS5oaWRlKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmhpZGUoKSlcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0S25vY2tBbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb257XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLmdldEFuaW1BY3Rpb24oQW5pbS5rbm9ja2tub2NrKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgwLjUpLFxuICAgICAgICAgICAgICAgIG5ldyBTRlhBY3Rpb24oXCJkb29yLWtub2NrLm1wM1wiLCBTb3VuZENoYW5uZWwuRzIsIGZhbHNlLCB0aGlzLmRpU2VydmljZSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgcHVibGljIGdldFJpbmdBbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb257XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1BY3Rpb24oQW5pbS5kaW5nZG9uZylcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0T3BlbkFuaW1BY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbntcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QW5pbUFjdGlvbihBbmltLm9wZW4pXG4gICAgfVxuXG4gICAgcHVibGljIGdldE9wZW5JZGxlQW5pbUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9ue1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbmltQWN0aW9uKEFuaW0uaWRsZU9wZW4sIHRydWUpO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0Q2xvc2VBbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb257XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1BY3Rpb24oQW5pbS5jbG9zZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHBsYXlJZGxlQ2xvc2VkKCl7XG4gICAgICAgIHRoaXMuZnJvbnRGcmFtZS5zdGF0ZS5zZXRBbmltYXRpb24oMCwgQW5pbS5pZGxlQ2xvc2VkLCB0cnVlKTtcbiAgICAgICAgdGhpcy5iYWNrRnJhbWUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEFuaW0uaWRsZUNsb3NlZCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRBbmltQWN0aW9uKGFuaW06IEFuaW0sIGxvb3A6IGJvb2xlYW4gPSBmYWxzZSk6IGZyYW1ld29yay5BY3Rpb257XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLmZyb250RnJhbWUsIGFuaW0sIHtsb29wOiBsb29wfSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLmJhY2tGcmFtZSwgYW5pbSwgIHtsb29wOiBsb29wfSlcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgZGVpbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIHNraXAoKXtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuXG59XG5cbmVudW0gQW5pbSB7XG4gICAgY2xvc2UgPSBcImNsb3NlXCIsXG4gICAga25vY2trbm9jayA9IFwia25vY2trbm9ja1wiLFxuICAgIGRpbmdkb25nID0gXCJkaW5nZG9uZ1wiLFxuICAgIGlkbGVDbG9zZWQgPSBcImlkbGUtY2xvc2VkXCIsXG4gICAgaWRsZU9wZW4gPSBcImlkbGUtb3BlblwiLFxuICAgIG9wZW4gPSBcIm9wZW5cIixcbiAgICBzaG93ID0gXCJzaG93XCIsXG4gICAgaGlkZSA9IFwiaGlkZVwiLFxufSIsImltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBBY3RNZWRpYXRvciwgeyBBY3RNZWRpYXRvckRlbGVnYXRlIH0gZnJvbSBcIi4vQWN0TWVkaWF0b3JcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgeyBJbnRlcmFjdGlvbkhhbmRsZXIgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvbWVkaWF0b3JzL1NjZW5lTWVkaWF0b3JcIjtcbmltcG9ydCBTdGF0ZUNvbnRleHQgZnJvbSBcIi4vc3RhdGVzL1N0YXRlQ29udGV4dFwiO1xuaW1wb3J0IEN1cnRhaW5zIGZyb20gXCIuLi9wcm9wcy9zY2VuZVByb3BzL0N1cnRhaW5zXCI7XG5pbXBvcnQgQm9vbUJveCBmcm9tIFwiLi4vcHJvcHMvc2NlbmVQcm9wcy9Cb29tQm94XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcGxheUFjdEhhbmRsZXIge1xuXG4gICAgcHJpdmF0ZSBzdGF0ZUluZGV4ID0gMDtcbiAgICBwcml2YXRlIF9yZXBsYXlTdGF0ZXM6IFN0YWdlU3RhdGVbXTtcblxuICAgIHB1YmxpYyBnZXQgY3VydGFpbnMoKTogQ3VydGFpbnMge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmN1cnRhaW5zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNjcmlwdHMoKTogZnJhbWV3b3JrLkNvbXBvc2l0ZVNjcmlwdCB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVyYWN0aW9uSGFuZGxlci5zY3JpcHRzO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgbXVzaWNQbGF5ZXIoKTogQm9vbUJveCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubXVzaWNCb3gpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcm90ZWN0ZWQgZGlTZXJ2aWNlOiBESVNlcnZpY2UsXG4gICAgICAgIHN0YXRlczogU3RhZ2VTdGF0ZVtdLFxuICAgICAgICBwcm90ZWN0ZWQgc3RhdGVDb250ZXh0OiBTdGF0ZUNvbnRleHQsXG4gICAgICAgIHByb3RlY3RlZCBpbnRlcmFjdGlvbkhhbmRsZXI6IEludGVyYWN0aW9uSGFuZGxlcixcbiAgICAgICAgcHJvdGVjdGVkIGRlbGVnYXRlOiBBY3RNZWRpYXRvckRlbGVnYXRlLFxuICAgICAgICBwcm90ZWN0ZWQgYWN0TWVkaWF0b3I6IEFjdE1lZGlhdG9yKSB7XG4gICAgICAgIHRoaXMuX3JlcGxheVN0YXRlcyA9IHN0YXRlcztcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuaXNSZXBsYXksIHRydWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0KCkge1xuICAgICAgICB0aGlzLnN0YXRlSW5kZXggPSAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5Rmlyc3REaWFsb2coKSB7XG4gICAgICAgIHRoaXMubXVzaWNQbGF5ZXIuc3RhcnRNdXNpYygpO1xuICAgICAgICB0aGlzLmdvVG8oXCJcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGdvVG8ocGFzc2FnZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVJbmRleCA+PSB0aGlzLl9yZXBsYXlTdGF0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9yZXBsYXlTdGF0ZXNbdGhpcy5zdGF0ZUluZGV4KytdO1xuICAgICAgICB0aGlzLnNjcmlwdHMuYWRkU2NyaXB0KHN0YXRlKTtcbiAgICAgICAgdGhpcy5zdGF0ZUNvbnRleHQuY3VycmVudFN0YXRlID0gc3RhdGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEVuZE9mQWN0QWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5jdXJ0YWlucy5nZXRDbG9zZUN1cnRhaW5zQWN0aW9uKCksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcmlwdHMucmVtb3ZlU2NyaXB0cyh0aGlzLl9yZXBsYXlTdGF0ZXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlcGxheVN0YXRlcy5mb3JFYWNoKChzdGF0ZSkgPT4gc3RhdGUuY2xlYXIoKSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEVuZERpYWxvZ0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDIpLFxuICAgICAgICAgICAgdGhpcy5nZXRFbmRPZkFjdEFjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmRlbGVnYXRlLm9uQWN0VGVybWluYXRlZCh0aGlzLmFjdE1lZGlhdG9yKSlcbiAgICAgICAgXSk7XG4gICAgfVxufSIsIlxuXG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlld1wiO1xuaW1wb3J0IHsgQWN0TWVkaWF0b3JEZWxlZ2F0ZSB9IGZyb20gXCIuLi9jb21tb24vQWN0TWVkaWF0b3JcIjtcbmltcG9ydCBSZXBsYXlBY3RIYW5kbGVyIGZyb20gXCIuLi9jb21tb24vUmVwbGF5QWN0SGFuZGxlclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IExSUkhBY3RNZWRpYXRvciBmcm9tIFwiLi9MUlJIQWN0TWVkaWF0b3JcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgeyBDaGFyYWN0ZXJUeXBlIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQmFzZUNoYXJhY3RlclwiO1xuaW1wb3J0IFJlcGxheUFjdE1lZGlhdG9yIGZyb20gXCIuLi9jb21tb24vUmVwbGF5QWN0TWVkaWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTFJSSFJlcGxheUFjdE1lZGlhdG9yIGV4dGVuZHMgTFJSSEFjdE1lZGlhdG9yIGltcGxlbWVudHMgUmVwbGF5QWN0TWVkaWF0b3IgIHtcbiAgICBcbiAgICBwcm90ZWN0ZWQgcmVwbGF5QWN0SGFuZGxlcjogUmVwbGF5QWN0SGFuZGxlcjtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIGRpU2VydmljZTogRElTZXJ2aWNlLCBzdGF0ZXM6IFN0YWdlU3RhdGVbXSwgY2hhcmFjdGVyUm9sZU1hcDogTWFwPFJvbGUsIENoYXJhY3RlclR5cGU+LCBkZWxlZ2F0ZTogQWN0TWVkaWF0b3JEZWxlZ2F0ZSkge1xuICAgICAgICBzdXBlcih2aWV3LCBkaVNlcnZpY2UsIGNoYXJhY3RlclJvbGVNYXAsIGRlbGVnYXRlKTtcbiAgICAgICAgdGhpcy5fcmVwbGF5U3RhdGVzID0gc3RhdGVzO1xuICAgICAgICB0aGlzLnJlcGxheUFjdEhhbmRsZXIgPSBuZXcgUmVwbGF5QWN0SGFuZGxlcihkaVNlcnZpY2UsIHN0YXRlcywgdGhpcy5zdGF0ZUNvbnRleHQsIHRoaXMsIGRlbGVnYXRlLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpbml0KCl7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAgdGhpcy5yZXBsYXlBY3RIYW5kbGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcGxheUZpcnN0RGlhbG9nKCkge1xuICAgICAgICB0aGlzLnJlcGxheUFjdEhhbmRsZXIucGxheUZpcnN0RGlhbG9nKCk7XG4gICAgfVxuICAgIFxuICAgIGdvVG8ocGFzc2FnZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zaG91bGRFbmREaWFsb2cocGFzc2FnZU5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmVuZERpYWxvZygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9ICBcbiAgICAgICAgdGhpcy5yZXBsYXlBY3RIYW5kbGVyLmdvVG8ocGFzc2FnZU5hbWUpO1xuICAgIH0gXG5cbiAgICBwcm90ZWN0ZWQgZ2V0RW5kT2ZBY3RBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxheUFjdEhhbmRsZXIuZ2V0RW5kT2ZBY3RBY3Rpb24oKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZW5kRGlhbG9nKCk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlcGxheSBpcyB0ZXJtaW5hdGVkXCIpO1xuICAgICAgICB0aGlzLnJ1bkFjdGlvbih0aGlzLnJlcGxheUFjdEhhbmRsZXIuZ2V0RW5kRGlhbG9nQWN0aW9uKCkpO1xuICAgIH1cblxufSIsImltcG9ydCBBY3RNZWRpYXRvciBmcm9tIFwiLi4vY29tbW9uL0FjdE1lZGlhdG9yXCI7XG5pbXBvcnQgTFJSSEFjdE1lZGlhdG9yIGZyb20gXCIuL0xSUkhBY3RNZWRpYXRvclwiO1xuaW1wb3J0IFN0b3J5TWVkaWF0b3IgZnJvbSBcIi4uL2NvbW1vbi9TdG9yeU1lZGlhdG9yXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgV2VhdGhlclByb3AgZnJvbSBcIi4uL3Byb3BzL1dlYXRoZXJQcm9wc1wiO1xuaW1wb3J0IEZvcmVzdFByb3BzIGZyb20gXCIuLi9wcm9wcy9Gb3Jlc3RQcm9wc1wiO1xuaW1wb3J0IFRocm93aW5nUHJvcCBmcm9tIFwiLi4vcHJvcHMvVGhyb3dpbmdQcm9wXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IFByaXNvblByb3AgZnJvbSBcIi4uL3Byb3BzL1ByaXNvblByb3BcIjtcbmltcG9ydCBEb29yIGZyb20gXCIuLi9wcm9wcy9Eb29yXCI7XG5pbXBvcnQgTFJSSFN0b3J5RGF0YSBmcm9tIFwiLi9MUlJIU3RvcnlEYXRhXCI7XG5pbXBvcnQgU3RvcnlEYXRhIGZyb20gXCIuLi9jb21tb24vU3RvcnlEYXRhXCI7XG5pbXBvcnQgTFJSSFJlcGxheUFjdE1lZGlhdG9yIGZyb20gXCIuL0xSUkhSZXBsYXlBY3RNZWRpYXRvclwiO1xuaW1wb3J0IHsgQ2hhcmFjdGVyVHlwZSB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0Jhc2VDaGFyYWN0ZXJcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExSUkhTdG9yeU1lZGlhdG9yIGV4dGVuZHMgU3RvcnlNZWRpYXRvcntcblxuICAgIHByaXZhdGUgd2VhdGhlclByb3A6IFdlYXRoZXJQcm9wID0gbnVsbDtcbiAgICBwcml2YXRlIGZvcmVzdFByb3A6IEZvcmVzdFByb3BzID0gbnVsbDtcblxuICAgIHByb3RlY3RlZCBnZXRSZXBsYXlNZWRpYXRvcihzdGF0ZXM6IEFycmF5PFN0YWdlU3RhdGU+LCBjaGFyYWN0ZXJSb2xlTWFwOiBNYXA8Um9sZSwgQ2hhcmFjdGVyVHlwZT4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMUlJIUmVwbGF5QWN0TWVkaWF0b3IodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSwgc3RhdGVzLCBjaGFyYWN0ZXJSb2xlTWFwLCB0aGlzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0QWN0TWVkaWF0b3IoY2hhcmFjdGVyUm9sZU1hcDogTWFwPFJvbGUsIENoYXJhY3RlclR5cGU+KTpBY3RNZWRpYXRvcntcbiAgICAgICAgcmV0dXJuIG5ldyBMUlJIQWN0TWVkaWF0b3IodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSwgY2hhcmFjdGVyUm9sZU1hcCwgdGhpcyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFN0b3J5RGF0YSgpOiBTdG9yeURhdGF7XG4gICAgICAgIHJldHVybiBuZXcgTFJSSFN0b3J5RGF0YSgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0UHJvcHMoKSB7XG4gICAgICAgIHN1cGVyLmluaXRQcm9wcygpO1xuXG4gICAgICAgIHRoaXMuaW5pdFdlYXRoZXJQcm9wcygpO1xuICAgICAgICB0aGlzLmluaXRGb3Jlc3RQcm9wcygpO1xuICAgICAgICB0aGlzLmluaXREb29yUHJvcCgpO1xuICAgICAgICB0aGlzLmluaXRQcmlzb25Qcm9wKCk7XG4gICAgICAgIHRoaXMuaW5pdFRocm93aW5nUHJvcCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdFRocm93aW5nUHJvcCgpIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IG5ldyBUaHJvd2luZ1Byb3AodGhpcy52aWV3KTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUudGhyb3dpbmdQcm9wLCBwcm9wKTtcbiAgICAgICAgdGhpcy5wcm9wcy5wdXNoKHByb3ApO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdFByaXNvblByb3AoKSB7XG4gICAgICAgIGNvbnN0IHByaXNvbiA9IG5ldyBQcmlzb25Qcm9wKHRoaXMudmlldywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5wcmlzb24sIHByaXNvbik7XG4gICAgICAgIHRoaXMucHJvcHMucHVzaChwcmlzb24pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdERvb3JQcm9wKCkge1xuICAgICAgICBjb25zdCBkb29yID0gbmV3IERvb3IodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmRvb3IsIGRvb3IpO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2goZG9vcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0V2VhdGhlclByb3BzKCkge1xuICAgICAgICB0aGlzLndlYXRoZXJQcm9wID0gbmV3IFdlYXRoZXJQcm9wKHRoaXMuYmFja2Ryb3AsIHRoaXMudmlldywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS53ZWF0aGVyUHJvcCwgdGhpcy53ZWF0aGVyUHJvcCk7XG4gICAgICAgIHRoaXMuc2NyaXB0cy5hZGRTY3JpcHQodGhpcy53ZWF0aGVyUHJvcCk7XG4gICAgICAgIHRoaXMucHJvcHMucHVzaCh0aGlzLndlYXRoZXJQcm9wKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRGb3Jlc3RQcm9wcygpIHtcbiAgICAgICAgdGhpcy5mb3Jlc3RQcm9wID0gbmV3IEZvcmVzdFByb3BzKHRoaXMudmlldywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5mb3Jlc3RQcm9wLCB0aGlzLmZvcmVzdFByb3ApO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2godGhpcy5mb3Jlc3RQcm9wKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZGVidWdTdGFydFN0b3J5KCl7XG5cbiAgICAgICAgdGhpcy5zdG9yeURhdGEuc2F2ZS5zZXQoXCJjb3N0dW1lXCIsIFwiTGl0dGxlIFJlZCBSaWRpbmcgSG9vZFwiKTtcbiAgICAgICAgdGhpcy5zdG9yeURhdGEuc2F2ZS5zZXQoXCJhY3Rpb25cIiwgXCJ3YWxraW5nXCIpO1xuICAgICAgICB0aGlzLnN0b3J5RGF0YS5zYXZlLnNldChcIndlYXRoZXJcIiwgXCJzdW5ueVwiKTtcbiAgICAgICAgdGhpcy5zdG9yeURhdGEuc2F2ZS5zZXQoXCJiYXNrZXRcIiwgXCJ0b29sYm94XCIpO1xuICAgICAgICB0aGlzLnN0b3J5RGF0YS5zYXZlLnNldChcInByaXNvblwiLCBcIlBhbnRyeVwiKTtcbiAgICAgICAgY29uc3QgcmVzdWx0TWFwID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbUm9sZS5uYXJyYXRvciwgQ2hhcmFjdGVyVHlwZS5hcnRodXJdLFxuICAgICAgICAgICAgW1JvbGUubGl0dGxlUmVkSG9vZCwgQ2hhcmFjdGVyVHlwZS5tdWZmeV0sXG4gICAgICAgICAgICBbUm9sZS5ncmFuZG1hLCBDaGFyYWN0ZXJUeXBlLmJ1c3Rlcl0sXG4gICAgICAgICAgICBbUm9sZS53b2xmLCBDaGFyYWN0ZXJUeXBlLmR3XSxcbiAgICAgICAgXSlcbiAgICAgICAgLy8gY29uc3QgcmVzdWx0TWFwID0gbmV3IE1hcChbXG4gICAgICAgIC8vICAgICBbUm9sZS5uYXJyYXRvciwgQ2hhcmFjdGVyVHlwZS5kd10sXG4gICAgICAgIC8vICAgICBbUm9sZS5saXR0bGVSZWRIb29kLCBDaGFyYWN0ZXJUeXBlLmFydGh1cl0sXG4gICAgICAgIC8vICAgICBbUm9sZS5ncmFuZG1hLCBDaGFyYWN0ZXJUeXBlLm11ZmZ5XSxcbiAgICAgICAgLy8gICAgIFtSb2xlLndvbGYsIENoYXJhY3RlclR5cGUuYnVzdGVyXSxcbiAgICAgICAgLy8gXSlcbiAgICAgICAgLy8gY29uc3QgcmVzdWx0TWFwID0gbmV3IE1hcChbXG4gICAgICAgIC8vICAgICBbUm9sZS5uYXJyYXRvciwgQ2hhcmFjdGVyVHlwZS5idXN0ZXJdLFxuICAgICAgICAvLyAgICAgW1JvbGUubGl0dGxlUmVkSG9vZCwgQ2hhcmFjdGVyVHlwZS5kd10sXG4gICAgICAgIC8vICAgICBbUm9sZS5ncmFuZG1hLCBDaGFyYWN0ZXJUeXBlLmFydGh1cl0sXG4gICAgICAgIC8vICAgICBbUm9sZS53b2xmLCBDaGFyYWN0ZXJUeXBlLm11ZmZ5XSxcbiAgICAgICAgLy8gXSlcbiAgICAgICAgLy8gY29uc3QgcmVzdWx0TWFwID0gbmV3IE1hcChbXG4gICAgICAgIC8vICAgICBbUm9sZS5uYXJyYXRvciwgQ2hhcmFjdGVyVHlwZS5tdWZmeV0sXG4gICAgICAgIC8vICAgICBbUm9sZS5saXR0bGVSZWRIb29kLCBDaGFyYWN0ZXJUeXBlLmJ1c3Rlcl0sXG4gICAgICAgIC8vICAgICBbUm9sZS5ncmFuZG1hLCBDaGFyYWN0ZXJUeXBlLmR3XSxcbiAgICAgICAgLy8gICAgIFtSb2xlLndvbGYsIENoYXJhY3RlclR5cGUuYXJ0aHVyXSxcbiAgICAgICAgLy8gXSlcbiAgICAgICAgdGhpcy5zdGFydFN0b3J5KHJlc3VsdE1hcCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgU3RvcnlNZWRpYXRvciBmcm9tIFwiLi4vY29tbW9uL1N0b3J5TWVkaWF0b3JcIjtcbmltcG9ydCBMUlJIU3RvcnlNZWRpYXRvciBmcm9tIFwiLi9MUlJIU3RvcnlNZWRpYXRvclwiO1xuaW1wb3J0IFN0YWdlTWVkaWF0b3IgZnJvbSBcIi4uL2NvbW1vbi9TdGFnZU1lZGlhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExSUkhTdGFnZU1lZGlhdG9yIGV4dGVuZHMgU3RhZ2VNZWRpYXRvciB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0U3RvcnlNZWRpYXRvcigpOiBTdG9yeU1lZGlhdG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMUlJIU3RvcnlNZWRpYXRvcih0aGlzLnZpZXcsIHRoaXMuZGlTZXJ2aWNlLCB0aGlzKTtcbiAgICB9XG5cbn1cblxuIiwiaW1wb3J0eyBBbmltYXRpb25zLCBDaGFyYWN0ZXJQb3NpdGlvbiB9IGZyb20gXCIuL0Jhc2VDaGFyYWN0ZXJcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4vQ2hhcmFjdGVyXCI7XG5cbi8vVE9ETyBtYWtlIHRoaXMgYSBtZWRpYXRvciB0byByZXR1cm4gYWN0aW9ucyBmb3IgdGhlIHNwaW5lIHN0YXRlc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR29sZGlsb2Nrc0NoYXJhY3RlciBleHRlbmRzIENoYXJhY3RlciB7XG4gICAgXG4gICAgcGxheVNlYXQoKSB7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyUG9zaXRpb24gPSBDaGFyYWN0ZXJQb3NpdGlvbi5zZWF0aW5nO1xuICAgICAgICB0aGlzLl9zcGluZS5zdGF0ZS5zZXRBbmltYXRpb24oMCwgQW5pbWF0aW9ucy5zZWF0ZWQsIHRydWUpO1xuICAgIH1cblxuICAgIHBsYXlUb0xheSgpIHtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJQb3NpdGlvbiA9IENoYXJhY3RlclBvc2l0aW9uLmxheWluZztcbiAgICAgICAgdGhpcy5fc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEFuaW1hdGlvbnMudG9MYXksIGZhbHNlKTtcbiAgICB9XG4gICAgXG4gICAgcGxheVNub3JlKCkge1xuICAgICAgICB0aGlzLmNoYXJhY3RlclBvc2l0aW9uID0gQ2hhcmFjdGVyUG9zaXRpb24uc25vcmluZztcbiAgICAgICAgdGhpcy5fc3BpbmUuc3RhdGUuc2V0QW5pbWF0aW9uKDAsIEFuaW1hdGlvbnMuaWRsZVNub3JlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBwbGF5RnJvbUxheSgpIHtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJQb3NpdGlvbiA9IENoYXJhY3RlclBvc2l0aW9uLnN0YW5kaW5nO1xuICAgICAgICB0aGlzLl9zcGluZS5zdGF0ZS5zZXRBbmltYXRpb24oMCwgQW5pbWF0aW9ucy5mcm9tTGF5LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZ2V0U2VhdGVkQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3RlclBvc2l0aW9uID0gQ2hhcmFjdGVyUG9zaXRpb24uc2VhdGluZyksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuX3NwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCBBbmltYXRpb25zLnNlYXRlZCwgdHJ1ZSkpXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIGdldFRvTGF5QWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3RlclBvc2l0aW9uID0gQ2hhcmFjdGVyUG9zaXRpb24ubGF5aW5nKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX3NwaW5lLCBBbmltYXRpb25zLnRvTGF5KVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgZ2V0RnJvbUxheUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuX3NwaW5lLCBBbmltYXRpb25zLmZyb21MYXkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3RlclBvc2l0aW9uID0gQ2hhcmFjdGVyUG9zaXRpb24uc3RhbmRpbmcpXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIC8vIENPU1RVTUVTXG5cbiAgICBwdWJsaWMgZ2V0U2V0U3VuSGF0QWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2V0U3VuSGF0KCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVIaWRlQW5kUmlzZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgc2V0U3VuSGF0KCl7XG4gICAgICAgIGNvbnN0IGNvc3R1bWVOYW1lID0gXCJjb3N0dW1lcy9zdW5oYXRcIjtcbiAgICAgICAgdGhpcy5hdHRhY2hDb3N0dW1lUGFydChjb3N0dW1lTmFtZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNldENvbGRIYXQoKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZXRDb2xkSGF0KCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVIaWRlQW5kUmlzZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgc2V0Q29sZEhhdCgpe1xuICAgICAgICBjb25zdCBjb3N0dW1lTmFtZSA9IFwiY29zdHVtZXMvd2ludGVyaGF0XCI7XG4gICAgICAgIHRoaXMuYXR0YWNoQ29zdHVtZVBhcnQoY29zdHVtZU5hbWUpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgRGlhbG9nU3RhdGVGYWN0b3J5IH0gZnJvbSBcIi4uL2ZhY3Rvcmllcy9EaWFsb2dTdGF0ZUZhY3RvcnlcIjtcbmltcG9ydCBBY3RNZWRpYXRvciBmcm9tIFwiLi4vY29tbW9uL0FjdE1lZGlhdG9yXCI7XG5pbXBvcnQgRG9vciBmcm9tIFwiLi4vcHJvcHMvRG9vclwiO1xuaW1wb3J0IHsgR29sZGlsb2Nrc0RpYWxvZ1N0YXRlRmFjdG9yeSwgQm93bENob2ljZSwgV2VhdGhlckNob2ljZSwgQmVkQ2hvaWNlLCBTZWF0Q2hvaWNlIH0gZnJvbSBcIi4uL2ZhY3Rvcmllcy9Hb2xkaWxvY2tzRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5pbXBvcnQgeyBCYWNrRHJvcFNraW4gfSBmcm9tIFwiLi4vcHJvcHMvQmFja2Ryb3BcIjtcbmltcG9ydCBCb3dsUHJvcCBmcm9tIFwiLi4vcHJvcHMvQm93bFByb3BcIjtcbmltcG9ydCBXZWF0aGVyUHJvcCBmcm9tIFwiLi4vcHJvcHMvV2VhdGhlclByb3BzXCI7XG5pbXBvcnQgQmVkUHJvcCBmcm9tIFwiLi4vcHJvcHMvQmVkUHJvcFwiO1xuaW1wb3J0IEJlYXJGdXJuaXR1cmVQcm9wIGZyb20gXCIuLi9wcm9wcy9CZWFyRnVybml0dXJlUHJvcFwiO1xuaW1wb3J0IEdvbGRpbG9ja3NTdG9yeURhdGEgZnJvbSBcIi4vR29sZGlsb2Nrc1N0b3J5RGF0YVwiO1xuaW1wb3J0IHsgQ29zdHVtZXMgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Db3N0dW1lc1wiO1xuaW1wb3J0IEdvbGRpbG9ja3NDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvR29sZGlsb2Nrc0NoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHb2xkaWxvY2tzQWN0TWVkaWF0b3IgZXh0ZW5kcyBBY3RNZWRpYXRvciB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGRvb3IoKTogRG9vciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZG9vcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBib3dsKCk6IEJvd2xQcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5ib3dsKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBiZWQoKTogQmVkUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmVkKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBiZWFyRnVybml0dXJlKCk6IEJlYXJGdXJuaXR1cmVQcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5iZWFyRnVybml0dXJlKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHdlYXRoZXJQcm9wKCk6IFdlYXRoZXJQcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS53ZWF0aGVyUHJvcCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXRGYWN0b3J5KCk6IERpYWxvZ1N0YXRlRmFjdG9yeSB7XG4gICAgICAgIHJldHVybiBuZXcgR29sZGlsb2Nrc0RpYWxvZ1N0YXRlRmFjdG9yeSh0aGlzLmRpU2VydmljZSwgdGhpcy52aWV3KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdENoYXJhY3RlcnMoKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmluaXRDaGFyYWN0ZXJzKCk7XG5cbiAgICAgICAgY29uc3QgbmFycmF0b3IgPSBuZXcgR29sZGlsb2Nrc0NoYXJhY3Rlcih0aGlzLmNoYXJhY3RlclJvbGVNYXAuZ2V0KFJvbGUubmFycmF0b3IpLCBSb2xlLm5hcnJhdG9yLCB0aGlzLm5hcnJhdG9yLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIGNvbnN0IGdvbGRpbG9ja3MgPSBuZXcgR29sZGlsb2Nrc0NoYXJhY3Rlcih0aGlzLmNoYXJhY3RlclJvbGVNYXAuZ2V0KFJvbGUuZ29sZGlsb2NrcyksIFJvbGUuZ29sZGlsb2NrcywgdGhpcy5jaGFyYWN0ZXIsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgY29uc3QgcGFyZW50QmVhciA9IG5ldyBHb2xkaWxvY2tzQ2hhcmFjdGVyKHRoaXMuY2hhcmFjdGVyUm9sZU1hcC5nZXQoUm9sZS5wYXJlbnRCZWFyKSwgUm9sZS5wYXJlbnRCZWFyLCB0aGlzLmNoYXJhY3RlclNlY29uZCwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICBjb25zdCBiYWJ5QmVhciA9IG5ldyBHb2xkaWxvY2tzQ2hhcmFjdGVyKHRoaXMuY2hhcmFjdGVyUm9sZU1hcC5nZXQoUm9sZS5iYWJ5QmVhciksIFJvbGUuYmFieUJlYXIsIHRoaXMuY2hhcmFjdGVyVGhpcmQsIHRoaXMuZGlTZXJ2aWNlKTtcblxuICAgICAgICBuYXJyYXRvci5zZXRDb3N0dW1lIChDb3N0dW1lcy5uYXJyYXRvcik7XG4gICAgICAgIGJhYnlCZWFyLnNldENvc3R1bWUgKENvc3R1bWVzLmJhYnliZWFyKTtcblxuICAgICAgICB0aGlzLnNjcmlwdHMuYWRkU2NyaXB0cyhbbmFycmF0b3IsIGdvbGRpbG9ja3MsIHBhcmVudEJlYXIsIGJhYnlCZWFyXSk7XG5cbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbUm9sZS5uYXJyYXRvciwgbmFycmF0b3JdLFxuICAgICAgICAgICAgW1JvbGUuZ29sZGlsb2NrcywgZ29sZGlsb2Nrc10sXG4gICAgICAgICAgICBbUm9sZS5wYXJlbnRCZWFyLCBwYXJlbnRCZWFyXSxcbiAgICAgICAgICAgIFtSb2xlLmJhYnlCZWFyLCBiYWJ5QmVhcl0sXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5jaGFyYWN0ZXJzLCB0aGlzLmNoYXJhY3RlcnMpO1xuXG4gICAgICAgIGNvbnN0IHJvbGVzID0gW1JvbGUubmFycmF0b3IsIFJvbGUuZ29sZGlsb2NrcywgUm9sZS5wYXJlbnRCZWFyLCBSb2xlLmJhYnlCZWFyXTtcbiAgICAgICAgcm9sZXMuZm9yRWFjaChyb2xlID0+IHRoaXMuY2hhcmFjdGVycy5nZXQocm9sZSkuaGlkZSgpKTtcbiAgICAgICAgdGhpcy5hc3NpZ25Qb3NpdGlvblRvQ2hhcmFjdGVycyhyb2xlcyk7XG5cbiAgICAgICAgdGhpcy5iYWNrZHJvcC5zZXRCYWNrZHJvcFRvKEJhY2tEcm9wU2tpbi5hY3QxKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2hvdWxkRW5kRGlhbG9nKHBhc3NhZ2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyByZXR1cm4gKHBhc3NhZ2VOYW1lID09PSBcImFjdC0zLWludHJvLTFcIik7XG4gICAgfVxuXG4gICAgLy9ERUJVR1xuICAgIHByb3RlY3RlZCBnb1RvQWN0MigpIHtcbiAgICAgICAgY29uc3QgaWQgPSBcIjNcIjtcblxuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJjb3N0dW1lXCIsIFwiR29sZGlsb2Nrc1wiKTtcbiAgICAgICAgdGhpcy5zZXRTYXZlRm9yS2V5KFwid2VhdGhlclwiLCBcInN1bm55XCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJib3dsXCIsIFwiVGFjb3NcIik7XG4gICAgICAgIHRoaXMuc2V0U2F2ZUZvcktleShcInBhcmVudFwiLCBcIm1hbWFcIik7XG5cbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLm5hcnJhdG9yKS5wbGF5SWRsZSgpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubmFycmF0b3IpLnggPSBHb2xkaWxvY2tzU3RvcnlEYXRhLmFjdDJOYXJyYXRvclhQb3NpdGlvbjtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLm5hcnJhdG9yKS5mbGlwWEF4aXMoKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLm5hcnJhdG9yKS5zaG93KCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKS5wbGF5SWRsZSgpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ29sZGlsb2NrcykueCA9IEdvbGRpbG9ja3NTdG9yeURhdGEuYWN0MkdvbGRpbG9ja3NYUG9zaXRpb247XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKS5zaG93KCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5iYWJ5QmVhcikuaGlkZSgpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUucGFyZW50QmVhcikuaGlkZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0Q29zdHVtZXMoKTtcblxuICAgICAgICB0aGlzLnNldEJvd2xDaG9pY2VzKCk7XG4gICAgICAgIHRoaXMuYm93bC5zaG93QWxsKCk7XG5cbiAgICAgICAgdGhpcy53ZWF0aGVyUHJvcC5jaG9pY2VJZCA9IHRoaXMuZ2V0V2VhdGhlckNob2ljZSgpO1xuICAgICAgICB0aGlzLmJhY2tkcm9wLnNldEJhY2tkcm9wVG8oQmFja0Ryb3BTa2luLmFjdDIsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMucGxheUZpcnN0RGlhbG9nKGlkKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ29Ub0FjdDMoKSB7XG4gICAgICAgIGNvbnN0IGlkID0gXCI1XCI7XG4gICAgICAgIHRoaXMuc2V0U2F2ZUZvcktleShcImNvc3R1bWVcIiwgXCJHb2xkaWxvY2tzXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJ3ZWF0aGVyXCIsIFwic3VubnlcIik7XG4gICAgICAgIHRoaXMuc2V0U2F2ZUZvcktleShcImJvd2xcIiwgXCJUYWNvc1wiKTtcbiAgICAgICAgdGhpcy5zZXRTYXZlRm9yS2V5KFwic2VhdFwiLCBcImNoYWlyc1wiKTtcbiAgICAgICAgdGhpcy5zZXRTYXZlRm9yS2V5KFwiYmVkXCIsIFwiV2F0ZXIgQmVkXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJwYXJlbnRcIiwgXCJtYW1hXCIpO1xuXG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcikucGxheUlkbGUoKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLm5hcnJhdG9yKS5zaG93KCk7XG4gICAgICAgKHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2xkaWxvY2tzKSBhcyBHb2xkaWxvY2tzQ2hhcmFjdGVyKS5wbGF5VG9MYXkoKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdvbGRpbG9ja3MpLnNob3coKTtcblxuICAgICAgICB0aGlzLnNldENvc3R1bWVzKCk7XG5cbiAgICAgICAgdGhpcy5zZXRCb3dsQ2hvaWNlcygpO1xuXG4gICAgICAgIHRoaXMud2VhdGhlclByb3AuY2hvaWNlSWQgPSB0aGlzLmdldFdlYXRoZXJDaG9pY2UoKTtcbiAgICAgICAgdGhpcy5iYWNrZHJvcC5zZXRCYWNrZHJvcFRvKEJhY2tEcm9wU2tpbi5hY3QyLCB0cnVlKTtcblxuICAgICAgICB0aGlzLmJlZC5jaG9pY2VJZCA9IHRoaXMuZ2V0QmVkQ2hvaWNlKCk7XG4gICAgICAgIHRoaXMuYmVhckZ1cm5pdHVyZS5jaG9pY2VJZCA9IHRoaXMuZ2V0RnVybml0dXJlQ2hvaWNlKCk7XG5cbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5wbGF5Rmlyc3REaWFsb2coaWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0V2VhdGhlckNob2ljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcnlEYXRhLnNhdmUuZ2V0KFwid2VhdGhlclwiKS5pbmNsdWRlcyhcInN1blwiKSA/IFdlYXRoZXJDaG9pY2UuV2VhdGhlcjJTdW4gOiBXZWF0aGVyQ2hvaWNlLldlYXRoZXIyQ2xvdWRzO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0QmVkQ2hvaWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yeURhdGEuc2F2ZS5nZXQoXCJiZWRcIikuaW5jbHVkZXMoXCJXYXRlclwiKSA/IEJlZENob2ljZS5iZWQyV2F0ZXJCZWQgOiBcbiAgICAgICAgICAgIHRoaXMuc3RvcnlEYXRhLnNhdmUuZ2V0KFwiYmVkXCIpLmluY2x1ZGVzKFwiSGFtbW9ja1wiKSA/IEJlZENob2ljZS5iZWQySGFtbW9jayA6IFxuICAgICAgICBCZWRDaG9pY2UuYmVkMkNvdWNoO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGdldEZ1cm5pdHVyZUNob2ljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcnlEYXRhLnNhdmUuZ2V0KFwic2VhdFwiKS5pbmNsdWRlcyhcImNoYWlyXCIpID8gU2VhdENob2ljZS5jaGFpciA6IFxuICAgICAgICAgICAgdGhpcy5zdG9yeURhdGEuc2F2ZS5nZXQoXCJiZWRcIikuaW5jbHVkZXMoXCJiZWFuXCIpID8gU2VhdENob2ljZS5iZWFuYmFnIDogXG4gICAgICAgICAgICAgICAgU2VhdENob2ljZS50cmFpbjtcbiAgICB9XG4gICAgXG4gICAgcHJvdGVjdGVkIHNldEJvd2xDaG9pY2VzKCl7XG4gICAgICAgIHRoaXMuYm93bC5jaG9pY2VJZCA9IEJvd2xDaG9pY2UudGFjb3M7XG4gICAgICAgIHRoaXMuYm93bC5zZXRTa2luRm9yVHlwZSgpXG4gICAgfVxuICAgIFxuICAgIHByb3RlY3RlZCBzZXRDb3N0dW1lcygpe1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ29sZGlsb2Nrcykuc2V0Q29zdHVtZShDaGFyYWN0ZXIuY29zdHVtZUZyb21OYW1lKHRoaXMuc3RvcnlEYXRhLnNhdmUuZ2V0KFwiY29zdHVtZVwiKSkpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUubmFycmF0b3IpLnNldENvc3R1bWUoQ29zdHVtZXMubmFycmF0b3IpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUucGFyZW50QmVhcikuc2V0Q29zdHVtZShDaGFyYWN0ZXIuY29zdHVtZUZyb21OYW1lKHRoaXMuc3RvcnlEYXRhLnNhdmUuZ2V0KFwicGFyZW50XCIpKSk7XG4gICAgfVxuXG59IiwiXG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IElTdGFnZVByb3BzIH0gZnJvbSBcIi4vQWJzdHJhY3RTdGFnZVByb3BzXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBBY3Rpb25NYW5hZ2VyRGVsZWdhdGUgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL0FjdGlvbk1hbmFnZXJEZWxlZ2F0ZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBTdGFnZVByb3BzLCB7IFN0YWdlUHJvcHNTa2luLCBTdGFnZVByb3BzQW5pbWF0aW9ucyB9IGZyb20gXCIuL3NjZW5lUHJvcHMvU3RhZ2VQcm9wc1wiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCB7IEZvcmVzdENob2ljZSB9IGZyb20gXCIuLi9mYWN0b3JpZXMvTFJSSERpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IHsgR2FyZGVuQ2hvaWNlIH0gZnJvbSBcIi4uL2ZhY3Rvcmllcy9Hb2xkaWxvY2tzRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhcmRlblByb3BzIGltcGxlbWVudHMgSVN0YWdlUHJvcHMge1xuXG4gICAgcHJvdGVjdGVkIGdldCBhY3Rpb25NYW5hZ2VyRGVsZWdhdGUoKTogQWN0aW9uTWFuYWdlckRlbGVnYXRlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5BY3Rpb25NYW5hZ2VyRGVsZWdhdGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvcHM6IFN0YWdlUHJvcHNbXSA9IFtdO1xuICAgIHByaXZhdGUgX2Nob2ljZUlkOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgcHVibGljIGdldCBjaG9pY2VJZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hvaWNlSWQgfHwgRm9yZXN0Q2hvaWNlLnNreVNjcmFwZXI7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBjaG9pY2VJZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2Nob2ljZUlkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb250YWluZXI6IFZpZXc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXc6IFZpZXcsIHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImdhcmRlbi1wcm9wc1wiKSBhcyBWaWV3O1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGNoaWxkLnZpc2libGUgPSBmYWxzZSk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHsgfVxuXG4gICAgcHVibGljIHNob3coY2hvaWNlSWQ6IHN0cmluZywgb25Db21wbGV0ZTogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9jaG9pY2VJZCA9IGNob2ljZUlkO1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgdGhpcy5nZXRBY3Rpb24oY2hvaWNlSWQpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYyhvbkNvbXBsZXRlKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFjdGlvbihjaG9pY2VJZDogc3RyaW5nKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSBbXTtcbiAgICAgICAgY29uc3QgYW5pbSA9IFN0YWdlUHJvcHNBbmltYXRpb25zLnNob3dGcm9tVG9wO1xuICAgICAgICBzd2l0Y2ggKGNob2ljZUlkKSB7XG4gICAgICAgICAgICBjYXNlIEdhcmRlbkNob2ljZS5mbG93ZXJzOlxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRmxvd2VyUHJvcHMoYWN0aW9ucywgYW5pbSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhcmRlbkNob2ljZS5iZWFuc3RhbGtzOlxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQmVhblN0YWxrUHJvcHMoYWN0aW9ucywgYW5pbSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhcmRlbkNob2ljZS5oaXZlczpcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUhpdmVQcm9wcyhhY3Rpb25zLCBhbmltKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKGFjdGlvbnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlQmVhblN0YWxrUHJvcHMoYWN0aW9uczogYW55W10sIGFuaW06IFN0YWdlUHJvcHNBbmltYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IFwiYmVhbnN0YWxrXCI7XG4gICAgICAgIGNvbnN0IG1pbkluZGV4ID0gMTtcbiAgICAgICAgY29uc3QgbWF4SW5kZXggPSAzO1xuICAgICAgICB0aGlzLmNyZWF0ZVByb3BzKG1pbkluZGV4LCBtYXhJbmRleCwgcHJlZml4LCBhY3Rpb25zLCBhbmltKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUZsb3dlclByb3BzKGFjdGlvbnM6IGFueVtdLCBhbmltOiBTdGFnZVByb3BzQW5pbWF0aW9ucykge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBcImZsb3dlclwiO1xuICAgICAgICBjb25zdCBtaW5JbmRleCA9IDE7XG4gICAgICAgIGNvbnN0IG1heEluZGV4ID0gNDtcbiAgICAgICAgdGhpcy5jcmVhdGVQcm9wcyhtaW5JbmRleCwgbWF4SW5kZXgsIHByZWZpeCwgYWN0aW9ucywgYW5pbSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVIaXZlUHJvcHMoYWN0aW9uczogYW55W10sIGFuaW06IFN0YWdlUHJvcHNBbmltYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IFwiaGl2ZVwiO1xuICAgICAgICBjb25zdCBtaW5JbmRleCA9IDE7XG4gICAgICAgIGNvbnN0IG1heEluZGV4ID0gMjtcbiAgICAgICAgdGhpcy5jcmVhdGVQcm9wcyhtaW5JbmRleCwgbWF4SW5kZXgsIHByZWZpeCwgYWN0aW9ucywgYW5pbSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVQcm9wcyhtaW5JbmRleDogbnVtYmVyLCBtYXhJbmRleDogbnVtYmVyLCBwcmVmaXg6IHN0cmluZywgYWN0aW9uczogYW55W10sIGFuaW06IHN0cmluZywgY29udGFpbmVyOiBWaWV3ID0gdGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSBtaW5JbmRleDsgaW5kZXggPD0gbWF4SW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lID0gcHJlZml4ICsgaW5kZXgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3AgPSBuZXcgU3RhZ2VQcm9wcyhjb250YWluZXIsIHByb3BOYW1lLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnB1c2gocHJvcCk7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2gocHJvcC5nZXRTaG93QWN0aW9uKGFuaW0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBza2lwKCkge1xuICAgICAgICBjb25zdCBhY3Rpb25zID0ge307XG4gICAgICAgIGFjdGlvbnNbR2FyZGVuQ2hvaWNlLmZsb3dlcnNdID0gdGhpcy5jcmVhdGVTa2lwRmxvd2VyUHJvcHMuYmluZCh0aGlzKTtcblxuICAgICAgICBhY3Rpb25zW0dhcmRlbkNob2ljZS5iZWFuc3RhbGtzXSA9IHRoaXMuY3JlYXRlU2tpcEJlYW5TdGFsa1Byb3BzLmJpbmQodGhpcyk7XG5cbiAgICAgICAgYWN0aW9uc1tHYXJkZW5DaG9pY2UuaGl2ZXNdID0gdGhpcy5jcmVhdGVTa2lwSGl2ZVByb3BzLmJpbmQodGhpcyk7XG5cbiAgICAgICAgYWN0aW9uc1t0aGlzLmNob2ljZUlkXSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlU2tpcEJlYW5TdGFsa1Byb3BzKCkge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBcImJlYW5zdGFsa1wiO1xuICAgICAgICBjb25zdCBtaW5JbmRleCA9IDE7XG4gICAgICAgIGNvbnN0IG1heEluZGV4ID0gMztcbiAgICAgICAgdGhpcy5jcmVhdGVTa2lwUHJvcHMobWluSW5kZXgsIG1heEluZGV4LCBwcmVmaXgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlU2tpcEZsb3dlclByb3BzKCkge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBcImZsb3dlclwiO1xuICAgICAgICBjb25zdCBtaW5JbmRleCA9IDE7XG4gICAgICAgIGNvbnN0IG1heEluZGV4ID0gNDtcbiAgICAgICAgdGhpcy5jcmVhdGVTa2lwUHJvcHMobWluSW5kZXgsIG1heEluZGV4LCBwcmVmaXgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlU2tpcEhpdmVQcm9wcygpIHtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gXCJoaXZlXCI7XG4gICAgICAgIGNvbnN0IG1pbkluZGV4ID0gMTtcbiAgICAgICAgY29uc3QgbWF4SW5kZXggPSAyO1xuICAgICAgICB0aGlzLmNyZWF0ZVNraXBQcm9wcyhtaW5JbmRleCwgbWF4SW5kZXgsIHByZWZpeCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVTa2lwUHJvcHMobWluSW5kZXg6IG51bWJlciwgbWF4SW5kZXg6IG51bWJlciwgcHJlZml4OiBzdHJpbmcpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSBtaW5JbmRleDsgaW5kZXggPD0gbWF4SW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lID0gcHJlZml4ICsgaW5kZXgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3AgPSBuZXcgU3RhZ2VQcm9wcyh0aGlzLmNvbnRhaW5lciwgcHJvcE5hbWUsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMucHVzaChwcm9wKTtcbiAgICAgICAgICAgIHByb3Auc2hvd0lkbGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSZW1vdmVBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChcbiAgICAgICAgICAgIHRoaXMucHJvcHMubWFwKHByb3AgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wLmdldEhpZGVBY3Rpb24oKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBkZWluaXQoKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZm9yRWFjaChwcm9wID0+IHByb3AuZGVpbml0KCkpO1xuICAgICAgICB0aGlzLnByb3BzID0gW107XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZm9yRWFjaChwcm9wID0+IHByb3AucmVzZXQoKSk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5mb3JFYWNoKHByb3AgPT4gcHJvcC5oaWRlKCkpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBJU3RhZ2VQcm9wcyB9IGZyb20gXCIuL0Fic3RyYWN0U3RhZ2VQcm9wc1wiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgeyBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbkFuZFZpc2libGUsIGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uQW5kVmlzaWJsZVdpdGhTRlggfSBmcm9tIFwiLi4vLi4vdXRpbHMvQW5pbWF0aW9uQWN0aW9uc1wiO1xuaW1wb3J0IHsgU3RhZ2VQcm9wc0FuaW1hdGlvbnMgfSBmcm9tIFwiLi9zY2VuZVByb3BzL1N0YWdlUHJvcHNcIjtcbmltcG9ydCBmaW5kQ2hpbGRCeU5hbWUgZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgR3JvdXBQcm9wIGltcGxlbWVudHMgSVN0YWdlUHJvcHMge1xuXG4gICAgcHJvdGVjdGVkIHNwaW5lczogZnJhbWV3b3JrLlNwaW5lVmlld1tdID0gW107XG5cbiAgICBwdWJsaWMgY2hvaWNlSWQ6IHN0cmluZyA9IG51bGw7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNvbnRhaW5lck5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiYWN0Mi1wcm9wc1wiO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2aWV3OiBWaWV3LCBwcm90ZWN0ZWQgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgdGhpcy5jb250YWluZXJOYW1lICkgYXMgVmlldztcbiAgICAgICAgY29udGFpbmVyLmNoaWxkcmVuLmZvckVhY2goIGNoaWxkID0+IGNoaWxkLnZpc2libGUgPSBmYWxzZSlcbiAgICB9XG4gICAgXG4gICAgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93KHNwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3KSB7XG4gICAgICAgIHNwaW5lLnZpc2libGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlKHNwaW5lOiBmcmFtZXdvcmsuU3BpbmVWaWV3KSB7XG4gICAgICAgIHNwaW5lLnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZUFsbCgpIHtcbiAgICAgICAgdGhpcy5zcGluZXMuZm9yRWFjaChzcGluZSA9PiB0aGlzLmhpZGUoc3BpbmUpKTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHNob3dBbGwoKSB7XG4gICAgICAgIHRoaXMuc3BpbmVzLmZvckVhY2goc3BpbmUgPT4gdGhpcy5zaG93KHNwaW5lKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNob3dBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNob3dBbmltQWN0aW9uKCk7Ly9kZWZhdWx0XG4gICAgfVxuXG4gICAgcHVibGljIGdldEhpZGVBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFuaW1OYW1lID0gU3RhZ2VQcm9wc0FuaW1hdGlvbnMuaGlkZTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuZ2V0QW5pbUFjdGlvbihhbmltTmFtZSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCAoKSA9PiB0aGlzLmhpZGVBbGwoKSlcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2hvd0FuaW1BY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFuaW1OYW1lID0gU3RhZ2VQcm9wc0FuaW1hdGlvbnMuc2hvd0Zyb21Ub3A7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1BY3Rpb24oYW5pbU5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTaG93QW5pbUFjdGlvbldpdGhTRlgoc291bmROYW1lOiBzdHJpbmcsIHNvdW5kRGVsYXk6IG51bWJlciA9IDApOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3QgYW5pbU5hbWUgPSBTdGFnZVByb3BzQW5pbWF0aW9ucy5zaG93RnJvbVRvcDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QW5pbUFjdGlvbldpdGhTRlgoYW5pbU5hbWUsIHNvdW5kTmFtZSwgc291bmREZWxheSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldElkbGVBbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoXG4gICAgICAgICAgICB0aGlzLnNwaW5lcy5tYXAoc3BpbmUgPT4geyByZXR1cm4gY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb25BbmRWaXNpYmxlKHNwaW5lLCBTdGFnZVByb3BzQW5pbWF0aW9ucy5pZGxlLCB0cnVlKSB9KVxuICAgICAgICApXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEFuaW1BY3Rpb24oYW5pbTogc3RyaW5nLCBsb29wOiBib29sZWFuID0gZmFsc2UpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFxuICAgICAgICAgICAgdGhpcy5zcGluZXMubWFwKHNwaW5lID0+IHsgcmV0dXJuIGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uQW5kVmlzaWJsZShzcGluZSwgYW5pbSwgbG9vcCkgfSlcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRBbmltQWN0aW9uV2l0aFNGWChhbmltOiBzdHJpbmcsIHNvdW5kTmFtZTogc3RyaW5nLCBzb3VuZERlbGF5OiBudW1iZXIsIGxvb3A6IGJvb2xlYW4gPSBmYWxzZSwgKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChcbiAgICAgICAgICAgIHRoaXMuc3BpbmVzLm1hcChzcGluZSA9PiB7IHJldHVybiBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbkFuZFZpc2libGVXaXRoU0ZYKHNwaW5lLCBhbmltLCBsb29wLCBzb3VuZE5hbWUsIHNvdW5kRGVsYXksIHRoaXMuZGlTZXJ2aWNlKSB9KVxuICAgICAgICApXG4gICAgfVxuXG4gICAgZGVpbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuaGlkZUFsbCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhYnN0cmFjdCBzZXRTa2luRm9yVHlwZSh2OiBzdHJpbmcpO1xuXG4gICAgcHVibGljIHNraXAoKSB7XG4gICAgICAgIHRoaXMuc2V0U2tpbkZvclR5cGUodGhpcy5jaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuc3BpbmVzLmZvckVhY2goc3BpbmUgPT4gdGhpcy5zaG93KHNwaW5lKSk7XG4gICAgfVxuXG59XG5cbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlld1wiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uQW5kVmlzaWJsZSwgY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb25BbmRWaXNpYmxlV2l0aFNGWCB9IGZyb20gXCIuLi8uLi91dGlscy9BbmltYXRpb25BY3Rpb25zXCI7XG5pbXBvcnQgeyBCb3dsQ2hvaWNlIH0gZnJvbSBcIi4uL2ZhY3Rvcmllcy9Hb2xkaWxvY2tzRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5pbXBvcnQgR3JvdXBQcm9wIGZyb20gXCIuL0dyb3VwUHJvcFwiO1xuaW1wb3J0IHsgU3RhZ2VQcm9wc0FuaW1hdGlvbnMgfSBmcm9tIFwiLi9zY2VuZVByb3BzL1N0YWdlUHJvcHNcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IHsgZGVsYXllZFNGWE5hbWVzLCBkZWxheWVkU0ZYRGF0YSB9IGZyb20gXCIuLi8uLi91dGlscy9EZWxheWVkU0ZYXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvd2xQcm9wIGV4dGVuZHMgR3JvdXBQcm9wIHtcblxuICAgIHB1YmxpYyByZWFkb25seSBib3dsMTogZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICBwdWJsaWMgcmVhZG9ubHkgYm93bDI6IGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgcHVibGljIHJlYWRvbmx5IGJvd2wzOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHB1YmxpYyByZWFkb25seSB0YWJsZTogZnJhbWV3b3JrLlNwaW5lVmlldztcblxuICAgIHB1YmxpYyBjaG9pY2VJZDogc3RyaW5nID0gQm93bFNraW4ucG9ycmlkZ2U7XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3OiBWaWV3LCBwcm90ZWN0ZWQgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIodmlldywgZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5ib3dsMSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiYm93bDFcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5ib3dsMiA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiYm93bDJcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5ib3dsMyA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiYm93bDNcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5zcGluZXMgPSBbdGhpcy5ib3dsMSwgdGhpcy5ib3dsMiwgdGhpcy5ib3dsM107XG5cbiAgICAgICAgdGhpcy50YWJsZSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwidGFibGVcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIGluaXQoKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2hvd0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuZ2V0U2hvd1RhYmxlQWN0aW9uKCksXG4gICAgICAgICAgICB0aGlzLmdldFNob3dBbmltQWN0aW9uKClcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2hvd0VtcHR5U21hbGxCb3dsQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5nZXRTaG93VGFibGVBY3Rpb24oKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0U2hvd0FuaW1FbXB0eVNtYWxsQm93bEFjdGlvbigpXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgcHVibGljIGdldFNob3dUYWJsZUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3Qgc291bmREYXRhID0gZGVsYXllZFNGWERhdGFbZGVsYXllZFNGWE5hbWVzLnByb3BEcm9wXTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uQW5kVmlzaWJsZVdpdGhTRlgodGhpcy50YWJsZSwgU3RhZ2VQcm9wc0FuaW1hdGlvbnMuc2hvd0Zyb21Ub3AsIGZhbHNlLCBzb3VuZERhdGEubmFtZSwgc291bmREYXRhLmRlbGF5LCB0aGlzLmRpU2VydmljZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dBbGwoKSB7XG4gICAgICAgIHN1cGVyLnNob3dBbGwoKTtcbiAgICAgICAgdGhpcy5zaG93KHRoaXMudGFibGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRIaWRlQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBhY3Rpb25zID0gdGhpcy5zcGluZXMubWFwKHNwaW5lID0+IHsgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHNwaW5lLCBTdGFnZVByb3BzQW5pbWF0aW9ucy5oaWRlKSB9KTtcbiAgICAgICAgYWN0aW9ucy5wdXNoKGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMudGFibGUsIFN0YWdlUHJvcHNBbmltYXRpb25zLmhpZGUpKTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKGFjdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTaG93QW5pbUFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3QgYW5pbU5hbWUgPSBBbmltLnNob3c7XG4gICAgICAgIGNvbnN0IHNvdW5kRGF0YSA9IGRlbGF5ZWRTRlhEYXRhW2RlbGF5ZWRTRlhOYW1lcy5wcm9wRHJvcF07XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1BY3Rpb25XaXRoU0ZYKGFuaW1OYW1lLCBzb3VuZERhdGEubmFtZSwgc291bmREYXRhLmRlbGF5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2hvd0FuaW1FbXB0eVNtYWxsQm93bEFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3Qgc291bmREYXRhID0gZGVsYXllZFNGWERhdGFbZGVsYXllZFNGWE5hbWVzLnByb3BEcm9wXTtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgIGNyZWF0ZVJhbmRvbWlzZWREZWxheWVkQWN0aW9uQW5kVmlzaWJsZVdpdGhTRlgodGhpcy5ib3dsMSwgQW5pbS5zaG93LCBmYWxzZSwgc291bmREYXRhLm5hbWUsIHNvdW5kRGF0YS5kZWxheSwgdGhpcy5kaVNlcnZpY2UpLFxuICAgICAgICAgICAgY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb25BbmRWaXNpYmxlV2l0aFNGWCh0aGlzLmJvd2wyLCBBbmltLnNob3csIGZhbHNlLCBzb3VuZERhdGEubmFtZSwgc291bmREYXRhLmRlbGF5LCB0aGlzLmRpU2VydmljZSksXG4gICAgICAgICAgICBjcmVhdGVSYW5kb21pc2VkRGVsYXllZEFjdGlvbkFuZFZpc2libGVXaXRoU0ZYKHRoaXMuYm93bDMsIEFuaW0uc2hvd2VtcHR5LCBmYWxzZSwgc291bmREYXRhLm5hbWUsIHNvdW5kRGF0YS5kZWxheSwgdGhpcy5kaVNlcnZpY2UpXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbGRlRW1wdHlBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFuaW1OYW1lID0gQW5pbS5pZGxlZW1wdHk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1BY3Rpb24oYW5pbU5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRFYXRBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFuaW1OYW1lID0gQW5pbS5lYXQ7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1BY3Rpb24oYW5pbU5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRFbXB0eUJvd2xBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLmJvd2wzLCBBbmltLmVhdCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEhpZGVBbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICBjb25zdCBhbmltTmFtZSA9IEFuaW0uaGlkZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QW5pbUFjdGlvbihhbmltTmFtZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldElkbGVBbmltQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoXG4gICAgICAgICAgICB0aGlzLnNwaW5lcy5tYXAoc3BpbmUgPT4geyByZXR1cm4gY3JlYXRlUmFuZG9taXNlZERlbGF5ZWRBY3Rpb25BbmRWaXNpYmxlKHNwaW5lLCBBbmltLmlkbGUsIHRydWUpIH0pLFxuICAgICAgICApXG4gICAgfVxuXG4gICAgcHVibGljIGdldFNtYWxsQm93bEVhdGVuQWN0aW9uKCk6IGZyYW1ld29yay5BY3Rpb24ge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNob3codGhpcy50YWJsZSkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5ib3dsMSwgQW5pbS5pZGxlKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuYm93bDIsIEFuaW0uaWRsZSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLmJvd2wzLCBBbmltLmVhdCksXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHN1cGVyLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuaGlkZSh0aGlzLnRhYmxlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0U2tpbkZvclR5cGUodj86IHN0cmluZykge1xuICAgICAgICBpZiAoIXYpIHtcbiAgICAgICAgICAgIHYgPSBCb3dsQ2hvaWNlLnBvcnJpZGdlO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodikge1xuICAgICAgICAgICAgY2FzZSBCb3dsQ2hvaWNlLnBvcnJpZGdlOlxuICAgICAgICAgICAgICAgIHRoaXMuc3BpbmVzLmZvckVhY2goc3BpbmUgPT4gc3BpbmUuc2tlbGV0b24uc2V0U2tpbkJ5TmFtZShCb3dsU2tpbi5wb3JyaWRnZSkpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEJvd2xDaG9pY2UudGFjb3M6XG4gICAgICAgICAgICAgICAgdGhpcy5zcGluZXMuZm9yRWFjaChzcGluZSA9PiBzcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKEJvd2xTa2luLnRhY29zKSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQm93bENob2ljZS5zcGFnaGV0dGk6XG4gICAgICAgICAgICAgICAgdGhpcy5zcGluZXMuZm9yRWFjaChzcGluZSA9PiBzcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKEJvd2xTa2luLnNwYWdoZXR0aSkpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNraXAoKSB7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICAgICAgdGhpcy5zaG93KHRoaXMudGFibGUpO1xuICAgIH1cbn1cblxuZW51bSBBbmltIHtcbiAgICBzaG93ID0gXCJzaG93XCIsXG4gICAgc2hvd2VtcHR5ID0gXCJzaG93ZW1wdHlcIixcbiAgICBoaWRlID0gXCJoaWRlXCIsXG4gICAgaWRsZWVtcHR5ID0gXCJpZGxlZW1wdHlcIixcbiAgICBpZGxlID0gXCJpZGxlXCIsXG4gICAgZWF0ID0gXCJlYXRcIixcbn1cblxuZXhwb3J0IGVudW0gQm93bFNraW4ge1xuICAgIGRlZmF1bHQgPSBcImRlZmF1bHRcIixcbiAgICB0YWNvcyA9IFwidGFjb3NcIixcbiAgICBwb3JyaWRnZSA9IFwicG9ycmlkZ2VcIixcbiAgICBzcGFnaGV0dGkgPSBcInNwYWdldHRpXCIsXG59IiwiaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IHsgU2VhdENob2ljZSB9IGZyb20gXCIuLi9mYWN0b3JpZXMvR29sZGlsb2Nrc0RpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IEdyb3VwUHJvcCBmcm9tIFwiLi9Hcm91cFByb3BcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IHsgZGVsYXllZFNGWE5hbWVzLCBkZWxheWVkU0ZYRGF0YSB9IGZyb20gXCIuLi8uLi91dGlscy9EZWxheWVkU0ZYXCI7XG5pbXBvcnQgU0ZYQWN0aW9uIGZyb20gXCIuLi8uLi91dGlscy9TRlhBY3Rpb25cIjtcbmltcG9ydCB7IFNvdW5kQ2hhbm5lbCB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9Tb3VuZFNlcnZpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmVhckZ1cm5pdHVyZVByb3AgZXh0ZW5kcyBHcm91cFByb3Age1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHNlYXQxOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHB1YmxpYyByZWFkb25seSBzZWF0MjogZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2VhdDM6IGZyYW1ld29yay5TcGluZVZpZXc7XG5cbiAgICBwdWJsaWMgY2hvaWNlSWQ6IHN0cmluZyA9IFNlYXRDaG9pY2UuY2hhaXI7XG5cbiAgICBwdWJsaWMgc2Z4QnJlYWs6IHN0cmluZztcblxuICAgIHByaXZhdGUgY2hhaXJTaXplczogU2VhdFNraW5bXSA9IFtcbiAgICAgICAgU2VhdFNraW4uY2hhaXJUYWxsLFxuICAgICAgICBTZWF0U2tpbi5jaGFpckxvdyxcbiAgICAgICAgU2VhdFNraW4uY2hhaXJSZWd1bGFyXG4gICAgXTtcblxuICAgIHB1YmxpYyBzdGF0aWMgc2Z4ID0gXCJnbC1ob3JuLWxvdWQtc2Z4Lm1wM1wiO1xuXG4gICAgcHJpdmF0ZSB0cmFpbkhvcm5NYXA6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKFtcbiAgICAgICAgW1NlYXRDaG9pY2Uuc2VhdDNUcmFpbiwgXCJnbC1ob3JuLWxvdWQtc2Z4Lm1wM1wiXSxcbiAgICAgICAgW1NlYXRDaG9pY2Uuc2VhdDZUcmFpbiwgXCJnbC1ob3JuLXF1aWV0LXNmeC5tcDNcIl0sXG4gICAgICAgIFtTZWF0Q2hvaWNlLnNlYXQ4VHJhaW4sIFwiZ2wtaG9ybi1yaWdodC1zZngubXAzXCJdXG4gICAgXSk7XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3OiBWaWV3LCBwcm90ZWN0ZWQgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIodmlldywgZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5zZWF0MSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiYWN0Mi1wcm9wMVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLnNlYXQyID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJhY3QyLXByb3AyXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMuc2VhdDMgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImFjdDItcHJvcDNcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5zcGluZXMgPSBbdGhpcy5zZWF0MSwgdGhpcy5zZWF0MiwgdGhpcy5zZWF0M107XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICBnZXRIb3JuU2Z4QWN0aW9uKHBhc3NhZ2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3Qgc2Z4ID0gdGhpcy50cmFpbkhvcm5NYXAuZ2V0KHBhc3NhZ2VOYW1lKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTRlhBY3Rpb24oc2Z4LCBTb3VuZENoYW5uZWwuQzMsIGZhbHNlLCB0aGlzLmRpU2VydmljZSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0U2tpbkZvclR5cGUodjogc3RyaW5nKSB7XG4gICAgICAgIHN3aXRjaCAodikge1xuICAgICAgICAgICAgY2FzZSBTZWF0Q2hvaWNlLmNoYWlyOlxuICAgICAgICAgICAgICAgIHRoaXMuc3BpbmVzLmZvckVhY2goKHNwaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKHRoaXMuY2hhaXJTaXplc1tpbmRleF0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNlYXRDaG9pY2UuYmVhbmJhZzpcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5lcy5mb3JFYWNoKHNwaW5lID0+IHNwaW5lLnNrZWxldG9uLnNldFNraW5CeU5hbWUoU2VhdFNraW4uYmVhbmJhZykpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNlYXRDaG9pY2UudHJhaW46XG4gICAgICAgICAgICAgICAgdGhpcy5zcGluZXMuZm9yRWFjaChzcGluZSA9PiBzcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKFNlYXRTa2luLnRyYWluKSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0QnJva2VuKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY2hvaWNlSWQpIHtcbiAgICAgICAgICAgIGNhc2UgU2VhdENob2ljZS5jaGFpcjpcbiAgICAgICAgICAgICAgICB0aGlzLnNlYXQzLnNrZWxldG9uLnNldFNraW5CeU5hbWUoU2VhdFNraW4uY2hhaXJCcm9rZW4pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNlYXRDaG9pY2UuYmVhbmJhZzpcbiAgICAgICAgICAgICAgICB0aGlzLnNlYXQzLnNrZWxldG9uLnNldFNraW5CeU5hbWUoU2VhdFNraW4uYmVhbmJhZ0Jyb2tlbilcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2VhdENob2ljZS50cmFpbjpcbiAgICAgICAgICAgICAgICB0aGlzLnNlYXQzLnNrZWxldG9uLnNldFNraW5CeU5hbWUoU2VhdFNraW4udHJhaW5Ccm9rZW4pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNob3dBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IHNvdW5kRGF0YSA9IGRlbGF5ZWRTRlhEYXRhW2RlbGF5ZWRTRlhOYW1lcy5wcm9wRHJvcF07XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNob3dBbmltQWN0aW9uV2l0aFNGWChzb3VuZERhdGEubmFtZSwgc291bmREYXRhLmRlbGF5KTtcbiAgICB9XG59XG5cbmV4cG9ydCBlbnVtIFNlYXRTa2luIHtcbiAgICBiZWFuYmFnID0gXCJiZWFuYmFnXCIsXG4gICAgYmVhbmJhZ0Jyb2tlbiA9IFwiYmVhbmJhZy1icm9rZW5cIixcbiAgICBiZWQgPSBcImJlZFwiLFxuICAgIGNoYWlyVGFsbCA9IFwiY2hhaXItdGFsbFwiLFxuICAgIGNoYWlyUmVndWxhciA9IFwiY2hhaXJcIixcbiAgICBjaGFpckxvdyA9IFwiY2hhaXItbG93XCIsXG4gICAgY2hhaXJCcm9rZW4gPSBcImNoYWlyLWJyb2tlblwiLFxuICAgIHRyYWluID0gXCJ0cmFpbnNlYXRcIixcbiAgICB0cmFpbkJyb2tlbiA9IFwidHJhaW5zZWF0LWJyb2tlblwiLFxufSIsImltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlld1wiO1xuaW1wb3J0IGZpbmRDaGlsZEJ5TmFtZSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCB7IEJlZENob2ljZSB9IGZyb20gXCIuLi9mYWN0b3JpZXMvR29sZGlsb2Nrc0RpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IEdyb3VwUHJvcCBmcm9tIFwiLi9Hcm91cFByb3BcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IHsgZGVsYXllZFNGWE5hbWVzLCBkZWxheWVkU0ZYRGF0YSB9IGZyb20gXCIuLi8uLi91dGlscy9EZWxheWVkU0ZYXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJlZFByb3AgZXh0ZW5kcyBHcm91cFByb3Age1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGhhbW1vY2sxOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHB1YmxpYyByZWFkb25seSBoYW1tb2NrMjogZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICBwdWJsaWMgcmVhZG9ubHkgaGFtbW9jazM6IGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgcHVibGljIHJlYWRvbmx5IHByb3A0OiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHB1YmxpYyByZWFkb25seSBwcm9wNTogZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcDY6IGZyYW1ld29yay5TcGluZVZpZXc7XG5cbiAgICBwdWJsaWMgY2hvaWNlSWQ6IHN0cmluZyA9IEJlZENob2ljZS5iZWQyQ291Y2g7XG5cbiAgICBwdWJsaWMgc2Z4QnJlYWs6IHN0cmluZztcblxuICAgIHByb3RlY3RlZCBiYWJ5QmVhckJlZDogZnJhbWV3b3JrLlNwaW5lVmlldztcblxuICAgIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcih2aWV3LCBkaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmhhbW1vY2sxID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJoYW1tb2NrMVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLmhhbW1vY2syID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJoYW1tb2NrMlwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLmhhbW1vY2szID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJoYW1tb2NrM1wiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLnByb3A0ID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJhY3QyLXByb3A0XCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMucHJvcDUgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImFjdDItcHJvcDVcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5wcm9wNiA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiYWN0Mi1wcm9wNlwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuXG4gICAgICAgIHRoaXMuYmFieUJlYXJCZWQgPSB0aGlzLnByb3A2O1xuICAgICAgICB0aGlzLnNwaW5lcyA9IFt0aGlzLnByb3A0LCB0aGlzLnByb3A1LCB0aGlzLnByb3A2XTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRTa2luRm9yVHlwZSh2OiBzdHJpbmcpIHtcbiAgICAgICAgc3dpdGNoICh2KSB7XG4gICAgICAgICAgICBjYXNlIEJlZENob2ljZS5iZWQyV2F0ZXJCZWQ6XG4gICAgICAgICAgICAgICAgdGhpcy5zcGluZXMuZm9yRWFjaChzcGluZSA9PiBzcGluZS5za2VsZXRvbi5zZXRTa2luQnlOYW1lKEJlZFNraW4uYmVkKSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQmVkQ2hvaWNlLmJlZDJDb3VjaDpcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5lcy5mb3JFYWNoKHNwaW5lID0+IHNwaW5lLnNrZWxldG9uLnNldFNraW5CeU5hbWUoQmVkU2tpbi5jb3VjaCkpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEJlZENob2ljZS5iZWQySGFtbW9jazpcbiAgICAgICAgICAgICAgICB0aGlzLmJhYnlCZWFyQmVkID0gdGhpcy5oYW1tb2NrMztcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5lcyA9IFt0aGlzLmhhbW1vY2sxLCB0aGlzLmhhbW1vY2syLCB0aGlzLmhhbW1vY2szXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2hvd0FjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgY29uc3Qgc291bmREYXRhID0gZGVsYXllZFNGWERhdGFbZGVsYXllZFNGWE5hbWVzLnByb3BEcm9wXTtcblxuICAgICAgICBpZiAodGhpcy5jaG9pY2VJZCA9PSBCZWRDaG9pY2UuYmVkMkhhbW1vY2spIHtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1OYW1lID0gQW5pbS5zaG93O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QW5pbUFjdGlvbldpdGhTRlgoYW5pbU5hbWUsIHNvdW5kRGF0YS5uYW1lLCBzb3VuZERhdGEuZGVsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2hvd0FuaW1BY3Rpb25XaXRoU0ZYKHNvdW5kRGF0YS5uYW1lLCBzb3VuZERhdGEuZGVsYXkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRCb3VuY2VBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGlmICh0aGlzLmNob2ljZUlkID09IEJlZENob2ljZS5iZWQySGFtbW9jaykge1xuICAgICAgICAgICAgY29uc3QgYW5pbU5hbWUgPSBBbmltLmJvdW5jZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEFuaW1BY3Rpb24oYW5pbU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHsgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEJhYnlCZWFyQmVkKCk6IFZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy5iYWJ5QmVhckJlZDtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGVudW0gQmVkU2tpbiB7XG4gICAgYmVkID0gXCJiZWRcIixcbiAgICBjb3VjaCA9IFwiY291Y2hcIlxufVxuXG5leHBvcnQgZW51bSBBbmltIHtcbiAgICBpZGxlID0gXCJpZGxlXCIsXG4gICAgc2hvdyA9IFwic2hvd1wiLFxuICAgIGhpZGUgPSBcImhpZGVcIixcbiAgICBib3VuY2UgPSBcImJvdW5jZVwiLFxufSIsIlxuXG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvVmlld1wiO1xuaW1wb3J0IHsgQWN0TWVkaWF0b3JEZWxlZ2F0ZSB9IGZyb20gXCIuLi9jb21tb24vQWN0TWVkaWF0b3JcIjtcbmltcG9ydCBSZXBsYXlBY3RIYW5kbGVyIGZyb20gXCIuLi9jb21tb24vUmVwbGF5QWN0SGFuZGxlclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IEdvbGRpbG9ja3NBY3RNZWRpYXRvciBmcm9tIFwiLi9Hb2xkaWxvY2tzQWN0TWVkaWF0b3JcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgeyBDaGFyYWN0ZXJUeXBlIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQmFzZUNoYXJhY3RlclwiO1xuaW1wb3J0IFJlcGxheUFjdE1lZGlhdG9yIGZyb20gXCIuLi9jb21tb24vUmVwbGF5QWN0TWVkaWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR29sZGlsb2Nrc1JlcGxheUFjdE1lZGlhdG9yIGV4dGVuZHMgR29sZGlsb2Nrc0FjdE1lZGlhdG9yIGltcGxlbWVudHMgUmVwbGF5QWN0TWVkaWF0b3IgIHtcbiAgICBcbiAgICBwcm90ZWN0ZWQgcmVwbGF5QWN0SGFuZGxlcjogUmVwbGF5QWN0SGFuZGxlcjtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIGRpU2VydmljZTogRElTZXJ2aWNlLCBzdGF0ZXM6IFN0YWdlU3RhdGVbXSwgY2hhcmFjdGVyUm9sZU1hcDogTWFwPFJvbGUsIENoYXJhY3RlclR5cGU+LGRlbGVnYXRlOiBBY3RNZWRpYXRvckRlbGVnYXRlKSB7XG4gICAgICAgIHN1cGVyKHZpZXcsIGRpU2VydmljZSwgY2hhcmFjdGVyUm9sZU1hcCwgZGVsZWdhdGUpO1xuICAgICAgICB0aGlzLl9yZXBsYXlTdGF0ZXMgPSBzdGF0ZXM7XG4gICAgICAgIHRoaXMucmVwbGF5QWN0SGFuZGxlciA9IG5ldyBSZXBsYXlBY3RIYW5kbGVyKGRpU2VydmljZSwgc3RhdGVzLCB0aGlzLnN0YXRlQ29udGV4dCwgdGhpcywgZGVsZWdhdGUsIHRoaXMpO1xuICAgIH1cblxuICAgIGluaXQoKXtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLnJlcGxheUFjdEhhbmRsZXIuaW5pdCgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBwbGF5Rmlyc3REaWFsb2coKSB7XG4gICAgICAgIHRoaXMucmVwbGF5QWN0SGFuZGxlci5wbGF5Rmlyc3REaWFsb2coKTtcbiAgICB9XG4gICAgXG4gICAgZ29UbyhwYXNzYWdlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZEVuZERpYWxvZyhwYXNzYWdlTmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZW5kRGlhbG9nKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gIFxuICAgICAgICB0aGlzLnJlcGxheUFjdEhhbmRsZXIuZ29UbyhwYXNzYWdlTmFtZSk7XG4gICAgfSBcblxuICAgIHByb3RlY3RlZCBnZXRFbmRPZkFjdEFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGF5QWN0SGFuZGxlci5nZXRFbmRPZkFjdEFjdGlvbigpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBlbmREaWFsb2coKTogdm9pZCB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVwbGF5IGlzIHRlcm1pbmF0ZWRcIik7XG4gICAgICAgIHRoaXMucnVuQWN0aW9uKHRoaXMucmVwbGF5QWN0SGFuZGxlci5nZXRFbmREaWFsb2dBY3Rpb24oKSk7XG4gICAgfVxuXG59IiwiaW1wb3J0IEFjdE1lZGlhdG9yIGZyb20gXCIuLi9jb21tb24vQWN0TWVkaWF0b3JcIjtcbmltcG9ydCBTdG9yeU1lZGlhdG9yIGZyb20gXCIuLi9jb21tb24vU3RvcnlNZWRpYXRvclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IEdvbGRpbG9ja3NBY3RNZWRpYXRvciBmcm9tIFwiLi9Hb2xkaWxvY2tzQWN0TWVkaWF0b3JcIjtcbmltcG9ydCBXZWF0aGVyUHJvcCBmcm9tIFwiLi4vcHJvcHMvV2VhdGhlclByb3BzXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IERvb3IgZnJvbSBcIi4uL3Byb3BzL0Rvb3JcIjtcbmltcG9ydCBHYXJkZW5Qcm9wcyBmcm9tIFwiLi4vcHJvcHMvR2FyZGVuUHJvcHNcIjtcbmltcG9ydCBHb2xkaWxvY2tzU3RvcnlEYXRhIGZyb20gXCIuL0dvbGRpbG9ja3NTdG9yeURhdGFcIjtcbmltcG9ydCBTdG9yeURhdGEgZnJvbSBcIi4uL2NvbW1vbi9TdG9yeURhdGFcIjtcbmltcG9ydCBCb3dsUHJvcCBmcm9tIFwiLi4vcHJvcHMvQm93bFByb3BcIjtcbmltcG9ydCBCZWFyRnVybml0dXJlUHJvcCBmcm9tIFwiLi4vcHJvcHMvQmVhckZ1cm5pdHVyZVByb3BcIjtcbmltcG9ydCBCZWRQcm9wIGZyb20gXCIuLi9wcm9wcy9CZWRQcm9wXCI7XG5pbXBvcnQgR29sZGlsb2Nrc1JlcGxheUFjdE1lZGlhdG9yIGZyb20gXCIuL0dvbGRpbG9ja3NSZXBsYXlBY3RNZWRpYXRvclwiO1xuaW1wb3J0IHsgQ2hhcmFjdGVyVHlwZSB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0Jhc2VDaGFyYWN0ZXJcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdvbGRpbG9ja3NTdG9yeU1lZGlhdG9yIGV4dGVuZHMgU3RvcnlNZWRpYXRvcntcblxuICAgIHByaXZhdGUgd2VhdGhlclByb3A6IFdlYXRoZXJQcm9wID0gbnVsbDtcblxuICAgIHByb3RlY3RlZCBpbml0UHJvcHMoKSB7XG4gICAgICAgIHN1cGVyLmluaXRQcm9wcygpO1xuICAgICAgICB0aGlzLmluaXRXZWF0aGVyUHJvcHMoKTtcbiAgICAgICAgdGhpcy5pbml0RG9vclByb3AoKTtcbiAgICAgICAgdGhpcy5pbml0R2FyZGVuUHJvcHMoKTtcbiAgICAgICAgdGhpcy5pbml0Qm93bFByb3BzKCk7XG4gICAgICAgIHRoaXMuaW5pdEJlYXJGdXJuaXR1cmVQcm9wcygpO1xuICAgICAgICB0aGlzLmluaXRCZWRQcm9wcygpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRSZXBsYXlNZWRpYXRvcihzdGF0ZXM6IEFycmF5PFN0YWdlU3RhdGU+LCBjaGFyYWN0ZXJSb2xlTWFwOiBNYXA8Um9sZSwgQ2hhcmFjdGVyVHlwZT4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHb2xkaWxvY2tzUmVwbGF5QWN0TWVkaWF0b3IodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSwgc3RhdGVzLCBjaGFyYWN0ZXJSb2xlTWFwLCB0aGlzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0QWN0TWVkaWF0b3IoY2hhcmFjdGVyUm9sZU1hcDogTWFwPFJvbGUsIENoYXJhY3RlclR5cGU+KTpBY3RNZWRpYXRvcntcbiAgICAgICAgcmV0dXJuIG5ldyBHb2xkaWxvY2tzQWN0TWVkaWF0b3IodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSwgY2hhcmFjdGVyUm9sZU1hcCwgdGhpcyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFN0b3J5RGF0YSgpOiBTdG9yeURhdGEge1xuICAgICAgICByZXR1cm4gbmV3IEdvbGRpbG9ja3NTdG9yeURhdGEoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRXZWF0aGVyUHJvcHMoKSB7XG4gICAgICAgIHRoaXMud2VhdGhlclByb3AgPSBuZXcgV2VhdGhlclByb3AodGhpcy5iYWNrZHJvcCwgdGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLndlYXRoZXJQcm9wLCB0aGlzLndlYXRoZXJQcm9wKTtcbiAgICAgICAgdGhpcy5zY3JpcHRzLmFkZFNjcmlwdCh0aGlzLndlYXRoZXJQcm9wKTtcbiAgICAgICAgdGhpcy5wcm9wcy5wdXNoKHRoaXMud2VhdGhlclByb3ApO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdERvb3JQcm9wKCkge1xuICAgICAgICBjb25zdCBkb29yID0gbmV3IERvb3IodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmRvb3IsIGRvb3IpO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2goZG9vcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0R2FyZGVuUHJvcHMoKSB7XG4gICAgICAgIGNvbnN0IGdhcmRlbiA9IG5ldyBHYXJkZW5Qcm9wcyh0aGlzLnZpZXcsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuZ2FyZGVuLCBnYXJkZW4pO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2goZ2FyZGVuKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRCb3dsUHJvcHMoKSB7XG4gICAgICAgIGNvbnN0IGJvd2wgPSBuZXcgQm93bFByb3AodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmJvd2wsIGJvd2wpO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2goYm93bCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXRCZWFyRnVybml0dXJlUHJvcHMoKSB7XG4gICAgICAgIGNvbnN0IGZ1cm5pdHVyZSA9IG5ldyBCZWFyRnVybml0dXJlUHJvcCh0aGlzLnZpZXcsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuYmVhckZ1cm5pdHVyZSwgZnVybml0dXJlKTtcbiAgICAgICAgdGhpcy5wcm9wcy5wdXNoKGZ1cm5pdHVyZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXRCZWRQcm9wcygpIHtcbiAgICAgICAgY29uc3QgYmVkID0gbmV3IEJlZFByb3AodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmJlZCwgYmVkKTtcbiAgICAgICAgdGhpcy5wcm9wcy5wdXNoKGJlZCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGRlYnVnU3RhcnRTdG9yeSgpIHtcbiAgICAgICAgLy8gdGhpcy5zZXRTYXZlRm9yS2V5KFwiY29zdHVtZVwiLCBcIkdvbGRpbG9ja3NcIik7XG4gICAgICAgIC8vIHRoaXMuc2V0U2F2ZUZvcktleShcIndlYXRoZXJcIiwgXCJzdW5ueVwiKTtcbiAgICAgICAgLy8gdGhpcy5zZXRTYXZlRm9yS2V5KFwiYm93bFwiLCBcIlRhY29zXCIpO1xuICAgICAgICAvLyB0aGlzLnNldFNhdmVGb3JLZXkoXCJzZWF0XCIsIFwiY2hhaXJzXCIpO1xuICAgICAgICAvLyB0aGlzLnNldFNhdmVGb3JLZXkoXCJiZWRcIiwgXCJXYXRlciBCZWRcIik7XG4gICAgICAgIC8vIHRoaXMuc2V0U2F2ZUZvcktleShcInBhcmVudFwiLCBcIm1hbWFcIik7XG5cbiAgICAgICAgdGhpcy5zZXRTYXZlRm9yS2V5KFwiY29zdHVtZVwiLCBcIkdvbGRpLXJvY2tzXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJ3ZWF0aGVyXCIsIFwiY2xvdWR5XCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJib3dsXCIsIFwiVGFjb3NcIik7XG4gICAgICAgIHRoaXMuc2V0U2F2ZUZvcktleShcInNlYXRcIiwgXCJiZWFuIGJhZ3NcIik7XG4gICAgICAgIC8vIHRoaXMuc2V0U2F2ZUZvcktleShcImJlZFwiLCBcIkNvdWNoXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJiZWRcIiwgXCJIYW1tb2NrXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJwYXJlbnRcIiwgXCJwYXBhXCIpO1xuXG4gICAgICAgIC8vIHRoaXMuc2V0U2F2ZUZvcktleShcImNvc3R1bWVcIiwgXCJHb2xkaS1maXNoXCIpO1xuICAgICAgICAvLyB0aGlzLnNldFNhdmVGb3JLZXkoXCJ3ZWF0aGVyXCIsIFwiY2xvdWR5XCIpO1xuICAgICAgICAvLyB0aGlzLnNldFNhdmVGb3JLZXkoXCJib3dsXCIsIFwiU3BhZ2hldHRpXCIpO1xuICAgICAgICAvLyB0aGlzLnNldFNhdmVGb3JLZXkoXCJzZWF0XCIsIFwidHJhaW5cIik7XG4gICAgICAgIC8vIHRoaXMuc2V0U2F2ZUZvcktleShcImJlZFwiLCBcIkhhbW1vY2tcIik7XG4gICAgICAgIC8vIHRoaXMuc2V0U2F2ZUZvcktleShcInBhcmVudFwiLCBcInBhcGFcIik7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0TWFwID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbUm9sZS5uYXJyYXRvciwgQ2hhcmFjdGVyVHlwZS5hcnRodXJdLFxuICAgICAgICAgICAgW1JvbGUuZ29sZGlsb2NrcywgQ2hhcmFjdGVyVHlwZS5tdWZmeV0sXG4gICAgICAgICAgICBbUm9sZS5wYXJlbnRCZWFyLCBDaGFyYWN0ZXJUeXBlLmJ1c3Rlcl0sXG4gICAgICAgICAgICBbUm9sZS5iYWJ5QmVhciwgQ2hhcmFjdGVyVHlwZS5kd10sXG4gICAgICAgIF0pXG4gICAgICAgIC8vIGNvbnN0IHJlc3VsdE1hcCA9IG5ldyBNYXAoW1xuICAgICAgICAvLyAgICAgW1JvbGUubmFycmF0b3IsIENoYXJhY3RlclR5cGUuZHddLFxuICAgICAgICAvLyAgICAgW1JvbGUuZ29sZGlsb2NrcywgQ2hhcmFjdGVyVHlwZS5hcnRodXJdLFxuICAgICAgICAvLyAgICAgW1JvbGUucGFyZW50QmVhciwgQ2hhcmFjdGVyVHlwZS5tdWZmeV0sXG4gICAgICAgIC8vICAgICBbUm9sZS5iYWJ5QmVhciwgQ2hhcmFjdGVyVHlwZS5idXN0ZXJdLFxuICAgICAgICAvLyBdKVxuICAgICAgICAvLyBjb25zdCByZXN1bHRNYXAgPSBuZXcgTWFwKFtcbiAgICAgICAgLy8gICAgIFtSb2xlLm5hcnJhdG9yLCBDaGFyYWN0ZXJUeXBlLmJ1c3Rlcl0sXG4gICAgICAgIC8vICAgICBbUm9sZS5nb2xkaWxvY2tzLCBDaGFyYWN0ZXJUeXBlLmR3XSxcbiAgICAgICAgLy8gICAgIFtSb2xlLnBhcmVudEJlYXIsIENoYXJhY3RlclR5cGUuYXJ0aHVyXSxcbiAgICAgICAgLy8gICAgIFtSb2xlLmJhYnlCZWFyLCBDaGFyYWN0ZXJUeXBlLm11ZmZ5XSxcbiAgICAgICAgLy8gXSlcbiAgICAgICAgLy8gY29uc3QgcmVzdWx0TWFwID0gbmV3IE1hcChbXG4gICAgICAgIC8vICAgICBbUm9sZS5uYXJyYXRvciwgQ2hhcmFjdGVyVHlwZS5tdWZmeV0sXG4gICAgICAgIC8vICAgICBbUm9sZS5nb2xkaWxvY2tzLCBDaGFyYWN0ZXJUeXBlLmJ1c3Rlcl0sXG4gICAgICAgIC8vICAgICBbUm9sZS5wYXJlbnRCZWFyLCBDaGFyYWN0ZXJUeXBlLmR3XSxcbiAgICAgICAgLy8gICAgIFtSb2xlLmJhYnlCZWFyLCBDaGFyYWN0ZXJUeXBlLmFydGh1cl0sXG4gICAgICAgIC8vIF0pXG4gICAgICAgIHRoaXMuc3RhcnRTdG9yeShyZXN1bHRNYXApO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRTYXZlRm9yS2V5KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICghdGhpcy5zdG9yeURhdGEuc2F2ZS5nZXQoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5zdG9yeURhdGEuc2F2ZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gIFxufVxuIiwiaW1wb3J0IFN0b3J5TWVkaWF0b3IgZnJvbSBcIi4uL2NvbW1vbi9TdG9yeU1lZGlhdG9yXCI7XG5pbXBvcnQgU3RhZ2VNZWRpYXRvciBmcm9tIFwiLi4vY29tbW9uL1N0YWdlTWVkaWF0b3JcIjtcbmltcG9ydCBHb2xkaWxvY2tzU3RvcnlNZWRpYXRvciBmcm9tIFwiLi9Hb2xkaWxvY2tzU3RvcnlNZWRpYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHb2xkaWxvY2tzU3RhZ2VNZWRpYXRvciBleHRlbmRzIFN0YWdlTWVkaWF0b3Ige1xuXG4gICAgcHJvdGVjdGVkIGdldFN0b3J5TWVkaWF0b3IoKTogU3RvcnlNZWRpYXRvciB7XG4gICAgICAgIHJldHVybiBuZXcgR29sZGlsb2Nrc1N0b3J5TWVkaWF0b3IodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSwgdGhpcyk7XG4gICAgfVxuXG59XG5cbiIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIgZnJvbSBcIi4uLy4uL3BvcG92ZXJzL0Nvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCB7IEdvZG1vdGhlckNvc3R1bWVDaG9pY2UgfSBmcm9tIFwiLi4vLi4vZmFjdG9yaWVzL0NpbmRlcmVsbGFEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcbmltcG9ydCB7IENob2ljZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DaG9pY2VEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBDb3N0dW1lcyB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0Nvc3R1bWVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdvZG1vdGhlclNlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUge1xuXG4gICAgcHJpdmF0ZSBjaG9pY2VUb0Nvc3R1bWVNYXA6IE1hcDxzdHJpbmcsIENvc3R1bWVzPiA9IG5ldyBNYXAoW1xuICAgICAgICBbR29kbW90aGVyQ29zdHVtZUNob2ljZS5Db3N0dW1lMUZhaXJ5LCBDb3N0dW1lcy5mYWlyeWdvZG1vdGhlcl0sXG4gICAgICAgIFtHb2Rtb3RoZXJDb3N0dW1lQ2hvaWNlLkNvc3R1bWUxSW52ZW50b3IsIENvc3R1bWVzLmludmVudG9yXSxcbiAgICBdKTtcblxuICAgIHByaXZhdGUgc3BpbmVzOiBNYXA8c3RyaW5nLCBmcmFtZXdvcmsuU3BpbmVWaWV3PiA9IG5ldyBNYXAoKTtcblxuICAgIHB1YmxpYyBnZXQgY2hhcmFjdGVyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ29kbW90aGVyKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNvc3R1bWVQb3BvdmVyKCk6IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNlbGVjdFBvcG92ZXIgYXMgQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGRpYWxvZzogQ2hvaWNlRGlhbG9nTGluZSxcbiAgICAgICAgcHJpdmF0ZSBjb3N0dW1lU2VsZWN0aW9uUG9wT3ZlcjogQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIsXG4gICAgICAgIGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGRpYWxvZywgY29zdHVtZVNlbGVjdGlvblBvcE92ZXIsIGRpU2VydmljZSk7XG4gICAgfVxuXG4gICAgb25Jbml0KCkge1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5jb250YWluZXIuYWxwaGEgPSAxO1xuICAgICAgICBzdXBlci5vbkluaXQoKTtcbiAgICAgICAgdGhpcy5zZXRQb3BPdmVyQnV0dG9uSW5hY3RpdmUoKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcblxuICAgICAgICB0aGlzLnNldENvc3R1bWUoY2hvaWNlSWQpO1xuXG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmdldE9uU2VsZWN0QW5pbUFjdGlvbih0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmRpZFRlcm1pbmF0ZShjaG9pY2VJZCkpXG4gICAgICAgICAgICAgICAgXSkpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0Q29zdHVtZShjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLmZpbmlzaENob2ljZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuY29zdHVtZVBvcG92ZXIuc2V0U2VsZWN0ZWQodGhpcy5zcGluZXMuZ2V0KGNob2ljZUlkKSk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNldENvc3R1bWUodGhpcy5jaG9pY2VUb0Nvc3R1bWVNYXAuZ2V0KGNob2ljZUlkKSk7XG4gICAgfVxuXG4gICAgb25DaG9pY2VzQmVpbmdQcmVzZW50ZWQoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jaGVja0Nob2ljZU1hZGUoKSkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRQb3BPdmVyQnV0dG9uQWN0aXZlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc3BpbmVzLnNldChHb2Rtb3RoZXJDb3N0dW1lQ2hvaWNlLkNvc3R1bWUxRmFpcnksIHRoaXMuY29zdHVtZVNlbGVjdGlvblBvcE92ZXIuYnV0dG9uTGVmdCk7XG4gICAgICAgICAgICB0aGlzLnNwaW5lcy5zZXQoR29kbW90aGVyQ29zdHVtZUNob2ljZS5Db3N0dW1lMUludmVudG9yLCB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmJ1dHRvbk1pZGRsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuc2V0Q29zdHVtZSh0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCkpO1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci5zaG93KCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgRElTZXJ2aWNlIGZyb20gXCIuLi8uLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9ESVNlcnZpY2VcIjtcbmltcG9ydCBDb3N0dW1lU2VsZWN0aW9uUG9wT3ZlciBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvQ29zdHVtZVNlbGVjdGlvblBvcE92ZXJcIjtcbmltcG9ydCBTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IHsgQ2luZGVyZWxsYUNvc3R1bWVDaG9pY2UgfSBmcm9tIFwiLi4vLi4vZmFjdG9yaWVzL0NpbmRlcmVsbGFEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcbmltcG9ydCB7IENob2ljZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DaG9pY2VEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBDb3N0dW1lcyB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0Nvc3R1bWVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENpbmRlcmVsbGFTZWxlY3Rpb25TdGF0ZSBleHRlbmRzIFNlbGVjdGlvblN0YXRlIHtcblxuICAgIHByaXZhdGUgY2hvaWNlVG9Db3N0dW1lTWFwOiBNYXA8c3RyaW5nLCBDb3N0dW1lcz4gPSBuZXcgTWFwKFtcbiAgICAgICAgW0NpbmRlcmVsbGFDb3N0dW1lQ2hvaWNlLm1vdmllc3RhciwgQ29zdHVtZXMubW92aWVzdGFyXSxcbiAgICAgICAgW0NpbmRlcmVsbGFDb3N0dW1lQ2hvaWNlLnNwYWNlc3VpdCwgQ29zdHVtZXMuYXN0cm9uYXV0XSxcbiAgICBdKTtcblxuICAgIHByaXZhdGUgc3BpbmVzOiBNYXA8c3RyaW5nLCBmcmFtZXdvcmsuU3BpbmVWaWV3PiA9IG5ldyBNYXAoKTtcblxuICAgIHB1YmxpYyBnZXQgY2hhcmFjdGVyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuY2luZGVyZWxsYSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBjb3N0dW1lUG9wb3ZlcigpOiBDb3N0dW1lU2VsZWN0aW9uUG9wT3ZlciB7XG4gICAgICAgIHJldHVybiAodGhpcy5zZWxlY3RQb3BvdmVyIGFzIENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihkaWFsb2c6IENob2ljZURpYWxvZ0xpbmUsXG4gICAgICAgIHByaXZhdGUgY29zdHVtZVNlbGVjdGlvblBvcE92ZXI6IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLFxuICAgICAgICBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcihkaWFsb2csIGNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLCBkaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zZXRQb3BPdmVyQnV0dG9uSW5hY3RpdmUoKTtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5zZXRDb3N0dW1lKGNob2ljZUlkKTtcblxuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5jb3N0dW1lU2VsZWN0aW9uUG9wT3Zlci5nZXRPblNlbGVjdEFuaW1BY3Rpb24odGhpcy5zcGluZXMuZ2V0KGNob2ljZUlkKSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRDb3N0dW1lQWN0aW9uKHRoaXMuY2hvaWNlVG9Db3N0dW1lTWFwLmdldChjaG9pY2VJZCkpLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZUlkKSlcbiAgICAgICAgICAgICAgICBdKSlcbiAgICAgICAgICAgIH0pKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRDb3N0dW1lKGNob2ljZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5jb3N0dW1lUG9wb3Zlci5zZXRTZWxlY3RlZCh0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZXNCZWluZ1ByZXNlbnRlZChjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ2hvaWNlTWFkZSgpKSB7IHJldHVybjsgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFBvcE92ZXJCdXR0b25BY3RpdmUoKTtcblxuICAgICAgICAgICAgdGhpcy5zcGluZXMuc2V0KENpbmRlcmVsbGFDb3N0dW1lQ2hvaWNlLm1vdmllc3RhciwgdGhpcy5jb3N0dW1lU2VsZWN0aW9uUG9wT3Zlci5idXR0b25MZWZ0KTtcbiAgICAgICAgICAgIHRoaXMuc3BpbmVzLnNldChDaW5kZXJlbGxhQ29zdHVtZUNob2ljZS5zcGFjZXN1aXQsIHRoaXMuY29zdHVtZVNlbGVjdGlvblBvcE92ZXIuYnV0dG9uTWlkZGxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgY29uc3QgY2hvaWNlSWQgPSB0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCk7XG4gICAgICAgIHRoaXMuc2V0Q29zdHVtZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNldENvc3R1bWUodGhpcy5jaG9pY2VUb0Nvc3R1bWVNYXAuZ2V0KGNob2ljZUlkKSk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNob3coKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyIGZyb20gXCIuLi8uLi9wb3BvdmVycy9Db3N0dW1lU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgeyBTaG9lc0Nob2ljZSB9IGZyb20gXCIuLi8uLi9mYWN0b3JpZXMvQ2luZGVyZWxsYURpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuaW1wb3J0IHsgQ2hvaWNlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi8uLi90d2luZS9EaWFsb2dMaW5lL0Nob2ljZURpYWxvZ0xpbmVcIjtcbmltcG9ydCBDaW5kZXJlbGxhU3RvcnlEYXRhIGZyb20gXCIuLi9DaW5kZXJlbGxhU3RvcnlEYXRhXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IENpbmRlcmVsbGFDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2luZGVyZWxsYUNoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaG9lU2VsZWN0aW9uU3RhdGUgZXh0ZW5kcyBTZWxlY3Rpb25TdGF0ZSB7XG4gICAgcHJpdmF0ZSBzcGluZXM6IE1hcDxzdHJpbmcsIGZyYW1ld29yay5TcGluZVZpZXc+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHVibGljIGdldCBjaGFyYWN0ZXIoKTogQ2luZGVyZWxsYUNoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuY2luZGVyZWxsYSkgYXMgQ2luZGVyZWxsYUNoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHN0b3J5RGF0YSgpOiBDaW5kZXJlbGxhU3RvcnlEYXRhIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5TdG9yeURhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgc2hvZUNob2ljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcnlEYXRhLmNob2ljZVRvQ29zdHVtZU1hcC5nZXQodGhpcy5zdG9yeURhdGEuc2hvZVNlbGVjdGlvbkNob2ljZSlcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNvc3R1bWVQb3BvdmVyKCk6IENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNlbGVjdFBvcG92ZXIgYXMgQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGRpYWxvZzogQ2hvaWNlRGlhbG9nTGluZSxcbiAgICAgICAgcHJpdmF0ZSBjb3N0dW1lU2VsZWN0aW9uUG9wT3ZlcjogQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIsXG4gICAgICAgIGRpU2VydmljZTogRElTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGRpYWxvZywgY29zdHVtZVNlbGVjdGlvblBvcE92ZXIsIGRpU2VydmljZSk7XG4gICAgfVxuXG4gICAgb25Jbml0KCkge1xuICAgICAgICB0aGlzLnNldFBvcE92ZXJCdXR0b25JbmFjdGl2ZSgpO1xuICAgICAgICBzdXBlci5vbkluaXQoKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcblxuICAgICAgICB0aGlzLnNldENvc3R1bWUoY2hvaWNlSWQpO1xuXG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmdldE9uU2VsZWN0QW5pbUFjdGlvbih0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldEFkZENvc3R1bWVBY3Rpb24odGhpcy5zaG9lQ2hvaWNlKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmRpZFRlcm1pbmF0ZShjaG9pY2VJZCkpXG4gICAgICAgICAgICAgICAgXSkpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0Q29zdHVtZShjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3RvcnlEYXRhLnNob2VTZWxlY3Rpb25DaG9pY2UgPSBjaG9pY2VJZDtcbiAgICAgICAgdGhpcy5jb3N0dW1lUG9wb3Zlci5zZXRTZWxlY3RlZCh0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKTtcbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZXNCZWluZ1ByZXNlbnRlZChjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ2hvaWNlTWFkZSgpKSB7IHJldHVybjsgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFBvcE92ZXJCdXR0b25BY3RpdmUoKTtcblxuICAgICAgICAgICAgdGhpcy5zcGluZXMuc2V0KFNob2VzQ2hvaWNlLnNsaXBwZXJzLCB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmJ1dHRvbkxlZnQpO1xuICAgICAgICAgICAgdGhpcy5zcGluZXMuc2V0KFNob2VzQ2hvaWNlLnNuZWFrZXJzLCB0aGlzLmNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyLmJ1dHRvbk1pZGRsZSk7XG4gICAgICAgICAgICB0aGlzLnNwaW5lcy5zZXQoU2hvZXNDaG9pY2UuYm9vdHMsIHRoaXMuY29zdHVtZVNlbGVjdGlvblBvcE92ZXIuYnV0dG9uUmlnaHQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICBjb25zdCBjaG9pY2VJZCA9IHRoaXMuY2hvaWNlRGlhbG9nLmdldERlZmF1bHRDaG9pY2UoKTtcbiAgICAgICAgdGhpcy5zZXRDb3N0dW1lKGNob2ljZUlkKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIuYWRkQ29zdHVtZSh0aGlzLnN0b3J5RGF0YS5jaG9pY2VUb0Nvc3R1bWVNYXAuZ2V0KGNob2ljZUlkKSk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNob3coKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IENhcnJpYWdlUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQ2FycmlhZ2VQcm9wXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IFByb3BTZWxlY3Rpb25Qb3BPdmVyIGZyb20gXCIuLi8uLi9wb3BvdmVycy9Qcm9wU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5pbXBvcnQgQ2luZGVyZWxsYVN0b3J5RGF0YSBmcm9tIFwiLi4vQ2luZGVyZWxsYVN0b3J5RGF0YVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJyaWFnZVNlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUge1xuXG4gICAgcHJpdmF0ZSBzcGluZXM6IE1hcDxzdHJpbmcsIGZyYW1ld29yay5TcGluZVZpZXc+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHVibGljIGdldCBjaGFyYWN0ZXIoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5jaW5kZXJlbGxhKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGNhcnJpYWdlKCk6IENhcnJpYWdlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuY2FycmlhZ2UpXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoZGlhbG9nOiBDaG9pY2VEaWFsb2dMaW5lLFxuICAgICAgICBwcml2YXRlIHByb3BTZWxlY3Rpb25Qb3BPdmVyOiBQcm9wU2VsZWN0aW9uUG9wT3ZlcixcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZGlhbG9nLCBwcm9wU2VsZWN0aW9uUG9wT3ZlciwgZGlTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0UG9wT3ZlckJ1dHRvbkluYWN0aXZlKCk7XG4gICAgICAgIHN1cGVyLm9uSW5pdCgpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnRlcmF0aW9ucygpO1xuICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5maW5pc2hDaG9pY2UoY2hvaWNlSWQpO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNoYXJhY3Rlci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KSksXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0V2Fsa1RvUG9zaXRpb25BY3Rpb24oQ2luZGVyZWxsYVN0b3J5RGF0YS5hY3QxQ2luZGVyZWxsYUJlc2lkZUNhcnJpYWdlWFBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2hhcmFjdGVyLnNldERpcmVjdGlvbihEaXJlY3Rpb24ubGVmdCkpLFxuICAgICAgICAgICAgICAgIHRoaXMuY2FycmlhZ2UuZ2V0UHVtcGtpblRyYW5zZm9ybWF0aW9uQWN0aW9uKGNob2ljZUlkKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZUlkKSlcbiAgICAgICAgICAgIF0pKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0UG9wT3ZlckJ1dHRvbkFjdGl2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmNoYXJhY3Rlci54ID0gQ2luZGVyZWxsYVN0b3J5RGF0YS5hY3QxQ2luZGVyZWxsYUJlc2lkZUNhcnJpYWdlWFBvc2l0aW9uO1xuICAgICAgICB0aGlzLmNhcnJpYWdlLnNraXAoKTtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR29kTW90aGVyT3V0IGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG4gICAgcHJvdGVjdGVkIGdldCBnb2Rtb3RoZXIoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2Rtb3RoZXIpXG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5nb2Rtb3RoZXIuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSkpLFxuICAgICAgICBdKSk7XG4gICAgfVxuICAgXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5nb2Rtb3RoZXIuaGlkZSgpO1xuXG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IENhcnJpYWdlUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQ2FycmlhZ2VQcm9wXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IENpbmRlcmVsbGFTdG9yeURhdGEgZnJvbSBcIi4uL0NpbmRlcmVsbGFTdG9yeURhdGFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2luZGVyZWxsYUdldHNJblRoZUNhcnJpYWdlU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcbiAgICBcbiAgICBwcm90ZWN0ZWQgZ2V0IGNpbmRlcmVsbGEoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5jaW5kZXJlbGxhKVxuICAgIH1cbiAgICBcbiAgICBwcm90ZWN0ZWQgZ2V0IGNhcnJpYWdlKCk6IENhcnJpYWdlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuY2FycmlhZ2UpXG4gICAgfVxuXG4gICAgZGlkVGVybWluYXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmdldFdhbGtUb1Bvc2l0aW9uQWN0aW9uKENpbmRlcmVsbGFTdG9yeURhdGEuYWN0MUNpbmRlcmVsbGFYUG9zaXRpb24pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIHRoaXMuY2luZGVyZWxsYS5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJyaWFnZS5nZXRSZW1vdmVBY3Rpb24oKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHN1cGVyLmRpZFRlcm1pbmF0ZShuYW1lKSksXG4gICAgICAgIF0pKTtcbiAgICB9XG4gICBcbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmNpbmRlcmVsbGEueCA9IENpbmRlcmVsbGFTdG9yeURhdGEuYWN0MUNpbmRlcmVsbGFYUG9zaXRpb247XG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS5oaWRlKCk7XG4gICAgICAgIHRoaXMuY2FycmlhZ2UuaGlkZUFsbCgpO1xuXG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IENhcnJpYWdlUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQ2FycmlhZ2VQcm9wXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IEJhY2tkcm9wLCB7IEJhY2tEcm9wU2tpbiB9IGZyb20gXCIuLi8uLi9wcm9wcy9CYWNrZHJvcFwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgeyBQcmluY2VDb3N0dW1lQ2hvaWNlIH0gZnJvbSBcIi4uLy4uL2ZhY3Rvcmllcy9DaW5kZXJlbGxhRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5pbXBvcnQgQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIgZnJvbSBcIi4uLy4uL3BvcG92ZXJzL0Nvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcbmltcG9ydCBCYWxsUm9vbVByb3AgZnJvbSBcIi4uLy4uL3Byb3BzL0JhbGxSb29tUHJvcFwiO1xuaW1wb3J0IHsgQ29zdHVtZXMgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Db3N0dW1lc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3QySW50cm9TdGF0ZSBleHRlbmRzIFNlbGVjdGlvblN0YXRlIHtcblxuICAgIHByaXZhdGUgY2hvaWNlVG9Db3N0dW1lTWFwOiBNYXA8c3RyaW5nLCBDb3N0dW1lcz4gPSBuZXcgTWFwKFtcbiAgICAgICAgW1ByaW5jZUNvc3R1bWVDaG9pY2UuY2hhcm1pbmcsIENvc3R1bWVzLnByaW5jZWNoYXJtaW5nXSxcbiAgICAgICAgW1ByaW5jZUNvc3R1bWVDaG9pY2UuYm90LCBDb3N0dW1lcy5wcmluY2Vib3RdLFxuICAgICAgICBbUHJpbmNlQ29zdHVtZUNob2ljZS5tZWdhc3RhciwgQ29zdHVtZXMucHJpbmNlbWVnYXN0YXJdLFxuICAgIF0pO1xuXG4gICAgcHJvdGVjdGVkIGdldCBjaW5kZXJlbGxhKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuY2luZGVyZWxsYSlcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHByaW5jZSgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnByaW5jZSlcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGNhcnJpYWdlKCk6IENhcnJpYWdlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuY2FycmlhZ2UpXG4gICAgfVxuXG4gICAgcHVibGljIGdldCBiYWNrZHJvcCgpOiBCYWNrZHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmFja2Ryb3ApXG4gICAgfVxuICAgIHB1YmxpYyBnZXQgYmFsbHJvb20oKTogQmFsbFJvb21Qcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5iYWxscm9vbSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBjb3N0dW1lUG9wb3ZlcigpOiBDb3N0dW1lU2VsZWN0aW9uUG9wT3ZlciB7XG4gICAgICAgIHJldHVybiAodGhpcy5zZWxlY3RQb3BvdmVyIGFzIENvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNwaW5lczogTWFwPHN0cmluZywgZnJhbWV3b3JrLlNwaW5lVmlldz4gPSBuZXcgTWFwKCk7XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIHRoaXMuaW5pdENoYXJhY3RlcnMoKTtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tkcm9wLmdldEFuaW1hdGVkQWN0Q2hhbmdlQWN0aW9uKEJhY2tEcm9wU2tpbi5hY3Q0KSxcbiAgICAgICAgICAgICAgICB0aGlzLmNhcnJpYWdlLmdldFNob3dBY3Rpb24oKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkoMSksXG4gICAgICAgICAgICB0aGlzLmNhcnJpYWdlLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkRlbGF5KDAuMyksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgdGhpcy5iYWxscm9vbS5nZXRTaG93QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgdGhpcy5iYWNrZHJvcC5nZXRBbmltYXRlZEFjdENoYW5nZUFjdGlvbihCYWNrRHJvcFNraW4uYWN0MyksXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXRDaGFyYWN0ZXJzKCkge1xuICAgICAgICB0aGlzLmNpbmRlcmVsbGEuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5sZWZ0KTtcbiAgICAgICAgdGhpcy5wcmluY2Uuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5yaWdodCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2VzQmVpbmdQcmVzZW50ZWQoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jaGVja0Nob2ljZU1hZGUoKSkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5zZWxlY3RQb3BvdmVyLnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRQb3BPdmVyQnV0dG9uQWN0aXZlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc3BpbmVzLnNldChQcmluY2VDb3N0dW1lQ2hvaWNlLmNoYXJtaW5nLCB0aGlzLnNlbGVjdFBvcG92ZXIuYnV0dG9uTGVmdCk7XG4gICAgICAgICAgICB0aGlzLnNwaW5lcy5zZXQoUHJpbmNlQ29zdHVtZUNob2ljZS5ib3QsIHRoaXMuc2VsZWN0UG9wb3Zlci5idXR0b25NaWRkbGUpO1xuICAgICAgICAgICAgdGhpcy5zcGluZXMuc2V0KFByaW5jZUNvc3R1bWVDaG9pY2UubWVnYXN0YXIsIHRoaXMuc2VsZWN0UG9wb3Zlci5idXR0b25SaWdodCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnRlcmF0aW9ucygpO1xuXG4gICAgICAgIHRoaXMuc2V0Q29zdHVtZShjaG9pY2VJZCk7XG5cbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICh0aGlzLnNlbGVjdFBvcG92ZXIgYXMgQ29zdHVtZVNlbGVjdGlvblBvcE92ZXIpLmdldE9uU2VsZWN0QW5pbUFjdGlvbih0aGlzLnNwaW5lcy5nZXQoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZWxlY3RQb3BvdmVyLmhpZGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpbmNlLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKVxuICAgICAgICAgICAgICAgIF0pKVxuICAgICAgICAgICAgfSkpXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldENvc3R1bWUoY2hvaWNlSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5maW5pc2hDaG9pY2UoY2hvaWNlSWQpO1xuICAgICAgICB0aGlzLmNvc3R1bWVQb3BvdmVyLnNldFNlbGVjdGVkKHRoaXMuc3BpbmVzLmdldChjaG9pY2VJZCkpO1xuICAgICAgICB0aGlzLnByaW5jZS5zZXRDb3N0dW1lKHRoaXMuY2hvaWNlVG9Db3N0dW1lTWFwLmdldChjaG9pY2VJZCkpO1xuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuaW5pdENoYXJhY3RlcnMoKTtcbiAgICAgICAgdGhpcy5jaW5kZXJlbGxhLnNob3coKTtcbiAgICAgICAgY29uc3QgY2hvaWNlSWQgPSB0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCk7XG4gICAgICAgIHRoaXMuc2V0Q29zdHVtZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMucHJpbmNlLnNob3coKTtcbiAgICAgICAgdGhpcy5iYWNrZHJvcC5zZXRCYWNrZHJvcFRvKEJhY2tEcm9wU2tpbi5hY3QzLCB0cnVlKVxuXG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBJY29uU2VsZWN0aW9uUG9wT3ZlciBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvSWNvblNlbGVjdGlvblBvcE92ZXJcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCB7IENob2ljZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DaG9pY2VEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBDaW5kZXJlbGxhTW92ZUNob2ljZSB9IGZyb20gXCIuLi8uLi9mYWN0b3JpZXMvQ2luZGVyZWxsYURpYWxvZ1N0YXRlRmFjdG9yeVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25Nb3ZlbWVudFNlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUgIHtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihjaG9pY2VEaWFsb2dMaW5lOiBDaG9pY2VEaWFsb2dMaW5lLFxuICAgICAgICBwcm90ZWN0ZWQgc2VsZWN0UG9wb3ZlcjogSWNvblNlbGVjdGlvblBvcE92ZXIsXG4gICAgICAgIGRpU2VydmljZTogRElTZXJ2aWNlLFxuICAgICAgICApIHtcbiAgICAgICAgc3VwZXIoY2hvaWNlRGlhbG9nTGluZSwgc2VsZWN0UG9wb3ZlciwgZGlTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZXNCZWluZ1ByZXNlbnRlZChjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ2hvaWNlTWFkZSgpKSB7IHJldHVybjsgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIudmlldy54ID0gdGhpcy5wcmluY2UueFxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW1vdmVJbnRlcmF0aW9ucygpO1xuICAgICAgICB0aGlzLmNob2ljZURpYWxvZy5maW5pc2hDaG9pY2UoY2hvaWNlSWQpO1xuICAgICAgICB0aGlzLnNldEFjdGlvbihjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbiggZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZUlkKSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLnNldEFjdGlvbih0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCkpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldEFjdGlvbihjaG9pY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucHJpbmNlLnNldERlZmF1bHRBY3Rpb24oY2hvaWNlSWQpO1xuICAgICAgICB0aGlzLmNpbmRlcmVsbGEuc2V0RGVmYXVsdEFjdGlvbihjaG9pY2VJZCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldENob2ljZUlkKCk6IHN0cmluZ3tcbiAgICAgICAgcmV0dXJuIENpbmRlcmVsbGFNb3ZlQ2hvaWNlLmRhbmNlMTtcbiAgICB9XG4gICAgXG4gICAgcHJvdGVjdGVkIGdldCBwcmluY2UoKTogQ2hhcmFjdGVye1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnByaW5jZSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQgY2luZGVyZWxsYSgpOiBDaGFyYWN0ZXJ7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuY2luZGVyZWxsYSk7XG4gICAgfVxuICAgIFxufSIsIlxuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENpbmRlcmVsbGFBbnN3ZXJTZWxlY3Rpb25TdGF0ZSBleHRlbmRzIFNlbGVjdGlvblN0YXRlIHtcblxuICAgIG9uQ2hvaWNlc0JlaW5nUHJlc2VudGVkKGNob2ljZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDaG9pY2VNYWRlKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci52aWV3LnggPSAwO1xuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygpO1xuICAgIH1cblxuICAgIG9uQ2hvaWNlKGNob2ljZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKGNob2ljZSkpO1xuICAgIH1cblxufSIsImltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IFNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgeyBCYWNrZ3JvdW5kQ2hvaWNlIH0gZnJvbSBcIi4uLy4uL2ZhY3Rvcmllcy9DaW5kZXJlbGxhRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IEJhY2tkcm9wLCB7IEJhY2tEcm9wU2tpbiB9IGZyb20gXCIuLi8uLi9wcm9wcy9CYWNrZHJvcFwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBQcm9wU2VsZWN0aW9uUG9wT3ZlciBmcm9tIFwiLi4vLi4vcG9wb3ZlcnMvUHJvcFNlbGVjdGlvblBvcE92ZXJcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcbmltcG9ydCBDaW5kZXJlbGxhU3RvcnlEYXRhIGZyb20gXCIuLi9DaW5kZXJlbGxhU3RvcnlEYXRhXCI7XG5pbXBvcnQgQmFsbFJvb21Qcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9CYWxsUm9vbVByb3BcIjtcbmltcG9ydCB7IENvc3R1bWVzIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ29zdHVtZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFja2dyb3VuZFNlbGVjdGlvblN0YXRlIGV4dGVuZHMgU2VsZWN0aW9uU3RhdGUge1xuXG4gICAgcHJpdmF0ZSBjaG9pY2VzTWFwOiBNYXA8c3RyaW5nLCBCYWNrRHJvcFNraW4+ID0gbmV3IE1hcChbXG4gICAgICAgIFtCYWNrZ3JvdW5kQ2hvaWNlLmJhbGxyb29tMSwgQmFja0Ryb3BTa2luLmFjdDNdLFxuICAgICAgICBbQmFja2dyb3VuZENob2ljZS5jb3R0YWdlMSwgQmFja0Ryb3BTa2luLmFjdDVdLFxuICAgICAgICBbQmFja2dyb3VuZENob2ljZS5ob3VzZTEsIEJhY2tEcm9wU2tpbi5hY3Q2XSxcbiAgICBdKTtcblxuICAgIHByaXZhdGUgY2hvaWNlVG9Db3N0dW1lTWFwOiBNYXA8c3RyaW5nLCBDb3N0dW1lcz4gPSBuZXcgTWFwKFtcbiAgICAgICAgW0JhY2tncm91bmRDaG9pY2UuY290dGFnZTEsIENvc3R1bWVzLmdyYW5kbWFdLFxuICAgICAgICBbQmFja2dyb3VuZENob2ljZS5ob3VzZTEsIENvc3R1bWVzLmJhYnliZWFyXSxcbiAgICBdKTtcbiAgICBwcm90ZWN0ZWQgY3VycmVudEJhY2tkcm9wOiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgZ2V0IGJhY2tkcm9wKCk6IEJhY2tkcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5iYWNrZHJvcCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzdG9yeURhdGEoKTogQ2luZGVyZWxsYVN0b3J5RGF0YSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuU3RvcnlEYXRhKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGJhbGxyb29tKCk6IEJhbGxSb29tUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmFsbHJvb20pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgbG9jYXRvcigpOiBMb2NhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5sb2NhdG9yKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHByaW5jZSgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnByaW5jZSlcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBnb2RNb3RoZXIoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2Rtb3RoZXIpXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoZGlhbG9nOiBDaG9pY2VEaWFsb2dMaW5lLFxuICAgICAgICBwcml2YXRlIGNvc3R1bWVTZWxlY3Rpb25Qb3BPdmVyOiBQcm9wU2VsZWN0aW9uUG9wT3ZlcixcbiAgICAgICAgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZGlhbG9nLCBjb3N0dW1lU2VsZWN0aW9uUG9wT3ZlciwgZGlTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0UG9wT3ZlckJ1dHRvbkluYWN0aXZlKCk7XG4gICAgICAgIHRoaXMuY3VycmVudEJhY2tkcm9wID0gdGhpcy5iYWNrZHJvcC5jdXJyZW50QWN0O1xuICAgICAgICBzdXBlci5vbkluaXQoKTtcbiAgICB9XG5cbiAgICBvbkNob2ljZShjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW50ZXJhdGlvbnMoKTtcbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2VsZWN0UG9wb3Zlci5oaWRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhY2tkcm9wLmdldEFuaW1hdGVkQWN0Q2hhbmdlQWN0aW9uKHRoaXMuY2hvaWNlc01hcC5nZXQoY2hvaWNlSWQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFByb3BBY3Rpb24oY2hvaWNlSWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpbmNlLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRDaGFyYWN0ZXJBY3Rpb24oY2hvaWNlSWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5kaWRUZXJtaW5hdGUoY2hvaWNlSWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIGdldFByb3BBY3Rpb24oY2hvaWNlSWQ6IHN0cmluZykge1xuICAgICAgICBpZiAoY2hvaWNlSWQgPT0gQmFja2dyb3VuZENob2ljZS5iYWxscm9vbTEpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcnlEYXRhLnNob3VsZFNob3dCYWxsUm9vbSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYWxscm9vbS5nZXRTaG93QWN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q2hhcmFjdGVyQWN0aW9uKGNob2ljZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgY29zdHVtZSA9IHRoaXMuY2hvaWNlVG9Db3N0dW1lTWFwLmdldChjaG9pY2VJZCk7XG4gICAgICAgIGlmIChjb3N0dW1lKSB7XG4gICAgICAgICAgICB0aGlzLmdvZE1vdGhlci54ID0gdGhpcy5sb2NhdG9yLm1pZGRsZVJpZ2h0Lng7XG4gICAgICAgICAgICB0aGlzLmdvZE1vdGhlci5jb250YWluZXIuYWxwaGEgPSAxO1xuICAgICAgICAgICAgdGhpcy5nb2RNb3RoZXIuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5sZWZ0KTtcbiAgICAgICAgICAgIHRoaXMuZ29kTW90aGVyLnNldENvc3R1bWUoY29zdHVtZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nb2RNb3RoZXIuZ2V0U2hvd0FuZFJpc2VVcEFjdGlvbigpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNob2ljZXNCZWluZ1ByZXNlbnRlZChjaG9pY2VJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ2hvaWNlTWFkZSgpKSB7IHJldHVybjsgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFBvcE92ZXJCdXR0b25BY3RpdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgY29uc3QgY2hvaWNlSWQgPSB0aGlzLmNob2ljZURpYWxvZy5nZXREZWZhdWx0Q2hvaWNlKCk7XG4gICAgICAgIHRoaXMuY2hvaWNlRGlhbG9nLmZpbmlzaENob2ljZShjaG9pY2VJZCk7XG4gICAgICAgIHRoaXMuYmFja2Ryb3AuZ2V0QW5pbWF0ZWRBY3RDaGFuZ2VBY3Rpb24odGhpcy5jaG9pY2VzTWFwLmdldChjaG9pY2VJZCkpLFxuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxufSIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYW5jZVN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG4gICAgcHJvdGVjdGVkIGdldCBjaW5kZXJlbGxhKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuY2luZGVyZWxsYSlcbiAgICB9XG4gICAgXG4gICAgcHJvdGVjdGVkIGdldCBwcmluY2UoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5wcmluY2UpXG4gICAgfVxuXG4gICAgb25Jbml0KCkge1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLmNpbmRlcmVsbGEucGxheURlZmF1bHRBY3Rpb24oKSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpbmNlLnBsYXlEZWZhdWx0QWN0aW9uKClcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5jaW5kZXJlbGxhLnNob3coKTtcbiAgICAgICAgdGhpcy5wcmluY2Uuc2hvdygpO1xuICAgICAgICB0aGlzLnByaW5jZS5zZXREZWZhdWx0QWN0aW9uKHRoaXMuY2luZGVyZWxsYS5kZWZhdWx0QWN0aW9uKVxuICAgICAgICB0aGlzLnByaW5jZS5wbGF5RGVmYXVsdEFjdGlvbigpXG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS5wbGF5RGVmYXVsdEFjdGlvbigpXG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5pbXBvcnQgQ2luZGVyZWxsYVN0b3J5RGF0YSBmcm9tIFwiLi4vQ2luZGVyZWxsYVN0b3J5RGF0YVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHb2Rtb3RoZXJHaG9zdFN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG4gICAgcHJvdGVjdGVkIGdldCBnb2Rtb3RoZXIoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2Rtb3RoZXIpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5nb2Rtb3RoZXIueCA9IENpbmRlcmVsbGFTdG9yeURhdGEuYWN0MkdvZG1vdGhlckdob3N0WFBvc2l0aW9uO1xuICAgICAgICB0aGlzLmdvZG1vdGhlci5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLmxlZnQpO1xuICAgICAgICB0aGlzLmFjdGlvbk1hbmFnZXJEZWxlZ2F0ZS5ydW5BY3Rpb24oZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIHRoaXMuZ29kbW90aGVyLmdldEZhZGVJbkFjdGlvbigpLFxuICAgICAgICAgICAgICAgIHRoaXMuZ29kbW90aGVyLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSksXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgXG5cbiAgICBza2lwKCkge1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgICAgIHRoaXMuZ29kbW90aGVyLnNob3coKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBUaHJvd2luZ1Byb3AgZnJvbSBcIi4uLy4uL3Byb3BzL1Rocm93aW5nUHJvcFwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgQ2luZGVyZWxsYVN0b3J5RGF0YSBmcm9tIFwiLi4vQ2luZGVyZWxsYVN0b3J5RGF0YVwiO1xuaW1wb3J0IENpbmRlcmVsbGFDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2luZGVyZWxsYUNoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb29zZVNob2VTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuXG4gICAgcHJvdGVjdGVkIGdldCBzaG9lKCk6IFRocm93aW5nUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUudGhyb3dpbmdQcm9wKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IHN0b3J5RGF0YSgpOiBDaW5kZXJlbGxhU3RvcnlEYXRhIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5TdG9yeURhdGEpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGNpbmRlcmVsbGEoKTogQ2luZGVyZWxsYUNoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuY2luZGVyZWxsYSkgYXMgQ2luZGVyZWxsYUNoYXJhY3RlclxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgc2hvZUNob2ljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcnlEYXRhLmNob2ljZVRvQ29zdHVtZU1hcC5nZXQodGhpcy5zdG9yeURhdGEuc2hvZVNlbGVjdGlvbkNob2ljZSlcbiAgICB9XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc2hvZS5zZXRTa2luKHRoaXMuc3RvcnlEYXRhLmNob2ljZVRvVGhyb3dpbmdTa2luTWFwLmdldCh0aGlzLnN0b3J5RGF0YS5zaG9lU2VsZWN0aW9uQ2hvaWNlKSlcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvZS5nZXRTaG93QW5pbUFjdGlvbigpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNpbmRlcmVsbGEucmVtb3ZlU2hvZXModGhpcy5zaG9lQ2hvaWNlKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLnNldE9uZVNob2UodGhpcy5zaG9lQ2hvaWNlKVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmdldENoYXJhY3Rlck1vdmVBY3Rpb24odGhpcy5sb2NhdG9yLmV4aXRMZWZ0LCAoKSA9PiB0aGlzLmNpbmRlcmVsbGEucGxheVJ1bigpKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLnNob2Uuc2hvdygpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgVGhyb3dpbmdQcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9UaHJvd2luZ1Byb3BcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBMb2NhdG9yIGZyb20gXCIuLi8uLi9jb21tb24vTG9jYXRvclwiO1xuaW1wb3J0IEJhY2tkcm9wLCB7IEJhY2tEcm9wU2tpbiB9IGZyb20gXCIuLi8uLi9wcm9wcy9CYWNrZHJvcFwiO1xuaW1wb3J0IENhcnJpYWdlUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQ2FycmlhZ2VQcm9wXCI7XG5pbXBvcnQgQmFsbFJvb21Qcm9wIGZyb20gXCIuLi8uLi9wcm9wcy9CYWxsUm9vbVByb3BcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWlkbmlnaHRUb3dlU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcblxuICAgIHByb3RlY3RlZCBnZXQgc2hvZSgpOlRocm93aW5nUHJvcHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS50aHJvd2luZ1Byb3ApO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTpMb2NhdG9ye1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgY2luZGVyZWxsYSgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmNpbmRlcmVsbGEpXG4gICAgfVxuICAgIFxuICAgIHByb3RlY3RlZCBnZXQgcHJpbmNlKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUucHJpbmNlKVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYmFja2Ryb3AoKTogQmFja2Ryb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmJhY2tkcm9wKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGNhcnJpYWdlKCk6IENhcnJpYWdlUHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuY2FycmlhZ2UpXG4gICAgfVxuXG4gICAgcHVibGljIGdldCBiYWxscm9vbSgpOiBCYWxsUm9vbVByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmJhbGxyb29tKTtcbiAgICB9XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS54ID0gdGhpcy5sb2NhdG9yLmV4aXRNaWRkbGUueDtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICB0aGlzLnByaW5jZS5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgdGhpcy5zaG9lLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgIHRoaXMuYmFsbHJvb20uZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgICAgIHRoaXMuYmFja2Ryb3AuZ2V0QW5pbWF0ZWRBY3RDaGFuZ2VBY3Rpb24oQmFja0Ryb3BTa2luLmFjdDQpLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB0aGlzLmNhcnJpYWdlLmdldEFwcGVhckFjdGlvbigpLFxuICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpLFxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5zaG9lLmhpZGUoKTtcbiAgICAgICAgdGhpcy5wcmluY2UuaGlkZSgpO1xuICAgICAgICB0aGlzLmJhbGxyb29tLmhpZGVBbGwoKTtcbiAgICAgICAgdGhpcy5jYXJyaWFnZS5zaG93U2VsZWN0ZWQoKTtcbiAgICAgICAgdGhpcy5iYWNrZHJvcC5zZXRCYWNrZHJvcFRvKEJhY2tEcm9wU2tpbi5hY3Q0LCB0cnVlKVxuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgU0ZYU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU0ZYU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBTRlhBY3Rpb24gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL1NGWEFjdGlvblwiO1xuaW1wb3J0IHsgU291bmRDaGFubmVsIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NvdW5kU2VydmljZVwiO1xuaW1wb3J0IENhcnJpYWdlUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQ2FycmlhZ2VQcm9wXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgeyBDb3N0dW1lcyB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0Nvc3R1bWVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zZm9ybUJhY2tTdGF0ZSBleHRlbmRzIFNGWFNlbGVjdGlvblN0YXRlIHtcblxuICAgIHB1YmxpYyBnZXQgY2FycmlhZ2UoKTogQ2FycmlhZ2VQcm9wIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5jYXJyaWFnZSlcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNpbmRlcmVsbGEoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5jaW5kZXJlbGxhKVxuICAgIH1cblxuICAgIG9uSW5pdCgpIHtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG4gICAgfVxuXG4gICAgb25DaG9pY2UoY2hvaWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZUludGVyYXRpb25zKCk7XG5cbiAgICAgICAgdGhpcy5jaG9pY2VEaWFsb2cuZmluaXNoQ2hvaWNlKGNob2ljZUlkKTtcblxuICAgICAgICBjb25zdCBzZnggPSB0aGlzLmRpYWxvZy5zZnhDaG9pY2VzW2Nob2ljZUlkXTtcbiAgICAgICAgaWYgKCFzZngpIHtcbiAgICAgICAgICAgIHRocm93ICdubyBzZnggZm9yICcgKyBjaG9pY2VJZCArIFwiIGluIFwiICsgdGhpcy5kaWFsb2cuc2Z4Q2hvaWNlcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdFBvcG92ZXIuaGlkZSgoKSA9PiB7XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2luZGVyZWxsYS5nZXRDb3N0dW1lQWN0aW9uKENvc3R1bWVzLmNpbmRlcmVsbGEpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhcnJpYWdlLmdldFRyYW5zZm9ybUJhY2soKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFNGWEFjdGlvbihzZngsIFNvdW5kQ2hhbm5lbC5DMywgZmFsc2UsIHRoaXMuZGlTZXJ2aWNlKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuZGlkVGVybWluYXRlKHRoaXMuZGlhbG9nLmdldExpbmsoMCkubGluaykpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5jaW5kZXJlbGxhLnNldENvc3R1bWUoQ29zdHVtZXMuY2luZGVyZWxsYSk7XG4gICAgICAgIHRoaXMuc3RvcFNvdW5kKCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBEb29yIGZyb20gXCIuLi8uLi9wcm9wcy9Eb29yXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IEJhY2tkcm9wLCB7IEJhY2tEcm9wU2tpbiB9IGZyb20gXCIuLi8uLi9wcm9wcy9CYWNrZHJvcFwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5pbXBvcnQgTG9jYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL0xvY2F0b3JcIjtcbmltcG9ydCBCYWxsUm9vbVByb3AgZnJvbSBcIi4uLy4uL3Byb3BzL0JhbGxSb29tUHJvcFwiO1xuaW1wb3J0IENpbmRlcmVsbGFTdG9yeURhdGEgZnJvbSBcIi4uL0NpbmRlcmVsbGFTdG9yeURhdGFcIjtcbmltcG9ydCB7IENvc3R1bWVzIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ29zdHVtZXNcIjtcbmltcG9ydCBDaW5kZXJlbGxhQ2hhcmFjdGVyIGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL0NpbmRlcmVsbGFDaGFyYWN0ZXJcIjtcbmltcG9ydCBTRlhBY3Rpb24gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL1NGWEFjdGlvblwiO1xuaW1wb3J0IHsgU291bmRDaGFubmVsIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NvdW5kU2VydmljZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaW5kZXJlbGxhTW9wU3RhdGUgZXh0ZW5kcyBTdGFnZVN0YXRlIHtcbiAgICBwcm90ZWN0ZWQgZ2V0IGNpbmRlcmVsbGEoKTogQ2luZGVyZWxsYUNoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuY2luZGVyZWxsYSkgYXMgQ2luZGVyZWxsYUNoYXJhY3RlclxuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IHByaW5jZSgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnByaW5jZSlcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGRvb3IoKTogRG9vciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZG9vcik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBiYWNrZHJvcCgpOiBCYWNrZHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmFja2Ryb3ApO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGdvZE1vdGhlcigpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmdvZG1vdGhlcilcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBiYWxscm9vbSgpOiBCYWxsUm9vbVByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmJhbGxyb29tKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHN0b3J5RGF0YSgpOiBDaW5kZXJlbGxhU3RvcnlEYXRhIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5TdG9yeURhdGEpO1xuICAgIH1cblxuICAgIG9uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5jaW5kZXJlbGxhLnNldERpcmVjdGlvbihEaXJlY3Rpb24ubGVmdCk7XG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS54ID0gdGhpcy5sb2NhdG9yLm1pZGRsZVJpZ2h0Lng7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaW5jZS5nZXRIaWRlQWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ29kTW90aGVyLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tkcm9wLmdldEFuaW1hdGVkQWN0Q2hhbmdlQWN0aW9uKEJhY2tEcm9wU2tpbi5hY3QxKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIub25Jbml0KCkpLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuY2luZGVyZWxsYS5hZGRDb3N0dW1lKENvc3R1bWVzLm1vcCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvb3IuZ2V0U2hvd0FjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNpbmRlcmVsbGEuZ2V0U2hvd0FuZFJpc2VVcEFjdGlvbigpLFxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICB0aGlzLmdldERvb3JSaW5nQWN0aW9uKCksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHN1cGVyLmRpZFRlcm1pbmF0ZShuYW1lKSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RG9vclJpbmdBY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLmRvb3IuZ2V0UmluZ0FuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgIG5ldyBTRlhBY3Rpb24oXCJkb29yLWtub2NrLm1wM1wiLCBTb3VuZENoYW5uZWwuQzEsIGZhbHNlLCB0aGlzLmRpU2VydmljZSlcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEhpZGVBY3Rpb24oKXtcbiAgICAgICAgaWYgKHRoaXMuc3RvcnlEYXRhLnNob3VsZFNob3dCYWxsUm9vbSApe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFsbHJvb20uZ2V0SGlkZUFjdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNraXAoKSB7XG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS5zaG93KCk7XG5cbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBEb29yIGZyb20gXCIuLi8uLi9wcm9wcy9Eb29yXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcbmltcG9ydCBDaW5kZXJlbGxhU3RvcnlEYXRhIGZyb20gXCIuLi9DaW5kZXJlbGxhU3RvcnlEYXRhXCI7XG5pbXBvcnQgQ2luZGVyZWxsYUNoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaW5kZXJlbGxhQ2hhcmFjdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByaW5jZUF0RG9vclN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSB7XG4gICAgcHJvdGVjdGVkIGdldCBjaW5kZXJlbGxhKCk6IENpbmRlcmVsbGFDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLmNpbmRlcmVsbGEpIGFzIENpbmRlcmVsbGFDaGFyYWN0ZXJcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGRvb3IoKTogRG9vciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZG9vcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBwcmluY2UoKTogQ2luZGVyZWxsYUNoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUucHJpbmNlKSBhcyBDaW5kZXJlbGxhQ2hhcmFjdGVyXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBsb2NhdG9yKCk6IExvY2F0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmxvY2F0b3IpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgc3RvcnlEYXRhKCk6IENpbmRlcmVsbGFTdG9yeURhdGEge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLlN0b3J5RGF0YSk7XG4gICAgfVxuXG4gICAgb25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmluaXRQcmluY2UoKTtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIHRoaXMuZ2V0U2hvd1ByaW5jZUFjdGlvbigpLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiBzdXBlci5vbkluaXQoKSksXG4gICAgICAgICAgICB0aGlzLmdldFByaW5jZU1vdmVBY3Rpb24oKSxcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdFByaW5jZSgpIHtcbiAgICAgICAgdGhpcy5wcmluY2UueCA9IHRoaXMuZG9vci54O1xuICAgICAgICB0aGlzLnByaW5jZS5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KTtcbiAgICAgICAgdGhpcy5wcmluY2Uuc2V0U2hvZUluSGFuZCh0aGlzLnN0b3J5RGF0YS5jaG9pY2VUb0Nvc3R1bWVNYXAuZ2V0KHRoaXMuc3RvcnlEYXRhLnNob2VTZWxlY3Rpb25DaG9pY2UpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNob3dQcmluY2VBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICB0aGlzLmRvb3IuZ2V0T3BlbkFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5EZWxheSgwLjMpLFxuICAgICAgICAgICAgICAgIHRoaXMucHJpbmNlLmdldFNob3dBbmRSaXNlVXBBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMucHJpbmNlLnBsYXlJZGxlKCkpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRQcmluY2VNb3ZlQWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5wcmluY2UuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmxvY2F0b3IubWlkZGxlLCAoKSA9PiB0aGlzLnByaW5jZS5wbGF5V2FsaygpLCAyKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5wcmluY2UucGxheUlkbGUoKSlcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLmluaXRQcmluY2UoKTtcbiAgICAgICAgdGhpcy5wcmluY2Uuc2hvdygpO1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBMb2NhdG9yIGZyb20gXCIuLi8uLi9jb21tb24vTG9jYXRvclwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR29kbW90aGVyR2hvc3RPdXRTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuICAgIHByb3RlY3RlZCBnZXQgZ29kbW90aGVyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ29kbW90aGVyKVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgbG9jYXRvcigpOiBMb2NhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5sb2NhdG9yKTtcbiAgICB9XG5cblxuICAgIGRpZFRlcm1pbmF0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmdvZG1vdGhlci5nZXRGYWRlT3V0QWN0aW9uKCksXG4gICAgICAgICAgICAgICAgdGhpcy5nb2Rtb3RoZXIuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHN1cGVyLmRpZFRlcm1pbmF0ZShuYW1lKSksXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgICAgIHRoaXMuZ29kbW90aGVyLmhpZGUoKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IENhcnJpYWdlUHJvcCBmcm9tIFwiLi4vLi4vcHJvcHMvQ2FycmlhZ2VQcm9wXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhbGtTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUgIHtcbiAgICBwcm90ZWN0ZWQgZ2V0IGNoYXJhY3RlcigpOkNoYXJhY3RlcntcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5jaW5kZXJlbGxhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxvY2F0b3IoKTogTG9jYXRvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUubG9jYXRvcik7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjYXJyaWFnZSgpOiBDYXJyaWFnZVByb3Age1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmNhcnJpYWdlKVxuICAgIH1cblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5nZXRDaGFyYWN0ZXJNb3ZlQWN0aW9uKHRoaXMubG9jYXRvci5leGl0TGVmdCwoKT0+IHRoaXMuY2hhcmFjdGVyLnBsYXlXYWxrKCksIDIpLFxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcmFjdGVyLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICB0aGlzLmNhcnJpYWdlLmdldEhpZGVQdW1wa2luQWN0aW9uKCksXG4gICAgICAgICAgICBdKSlcbiAgICB9XG5cbiAgICBza2lwKCl7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXIuaGlkZSgpO1xuICAgICAgICB0aGlzLmNhcnJpYWdlLmhpZGVBbGwoKTtcbiAgICB9XG59IiwiaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgQ2luZGVyZWxsYVN0b3J5RGF0YSBmcm9tIFwiLi4vQ2luZGVyZWxsYVN0b3J5RGF0YVwiO1xuaW1wb3J0IENpbmRlcmVsbGFDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2luZGVyZWxsYUNoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcnlPblNob2VTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuICAgIHByb3RlY3RlZCBnZXQgcHJpbmNlKCk6IENpbmRlcmVsbGFDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnByaW5jZSkgYXMgQ2luZGVyZWxsYUNoYXJhY3RlcjtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBjaGFyYWN0ZXIoKTogQ2luZGVyZWxsYUNoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuY2luZGVyZWxsYSkgYXMgQ2luZGVyZWxsYUNoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHN0b3J5RGF0YSgpOiBDaW5kZXJlbGxhU3RvcnlEYXRhIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5TdG9yeURhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgc2hvZUNob2ljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcnlEYXRhLmNob2ljZVRvQ29zdHVtZU1hcC5nZXQodGhpcy5zdG9yeURhdGEuc2hvZVNlbGVjdGlvbkNob2ljZSlcbiAgICB9XG5cbiAgICBkaWRUZXJtaW5hdGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlckRlbGVnYXRlLnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpbmNlLmdldFJlbW92ZVNob2VJbkhhbmRBY3Rpb24odGhpcy5zaG9lQ2hvaWNlKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXIuZ2V0T25lU2hvZUFjdGlvbih0aGlzLnNob2VDaG9pY2UpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gc3VwZXIuZGlkVGVybWluYXRlKG5hbWUpKVxuICAgICAgICAgICAgXSkpXG4gICAgfVxuXG4gICAgc2tpcCgpIHtcbiAgICAgICAgdGhpcy5wcmluY2UucmVtb3ZlU2hvZUluSGFuZCh0aGlzLnNob2VDaG9pY2UpXG4gICAgICAgIHRoaXMuY2hhcmFjdGVyLnNldE9uZVNob2UodGhpcy5zaG9lQ2hvaWNlKVxuICAgICAgICBzdXBlci5za2lwKCk7XG4gICAgfVxufSIsImltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi8uLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IExvY2F0b3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Mb2NhdG9yXCI7XG5pbXBvcnQgeyBEYXRhTmFtZSB9IGZyb20gXCIuLi8uLi8uLi9TZXJ2aWNlcy9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IERvb3IgZnJvbSBcIi4uLy4uL3Byb3BzL0Rvb3JcIjtcbmltcG9ydCBDaW5kZXJlbGxhU3RvcnlEYXRhIGZyb20gXCIuLi9DaW5kZXJlbGxhU3RvcnlEYXRhXCI7XG5pbXBvcnQgeyBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY2hhcmFjdGVycy9EaXJlY3Rpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2Fsa1RvRG9vclN0YXRlIGV4dGVuZHMgU3RhZ2VTdGF0ZSAge1xuICAgIHByb3RlY3RlZCBnZXQgY2luZGVyZWxsYSgpOkNoYXJhY3RlcntcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5jaW5kZXJlbGxhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHByaW5jZSgpOkNoYXJhY3RlcntcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5wcmluY2UpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgbG9jYXRvcigpOiBMb2NhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5sb2NhdG9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRvb3IoKTogRG9vciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuZG9vcilcbiAgICB9XG4gICAgXG4gICAgcHJvdGVjdGVkIGdldCBzdG9yeURhdGEoKTogQ2luZGVyZWxsYVN0b3J5RGF0YSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuU3RvcnlEYXRhKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldCBzaG9lQ2hvaWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yeURhdGEuY2hvaWNlVG9Db3N0dW1lTWFwLmdldCh0aGlzLnN0b3J5RGF0YS5zaG9lU2VsZWN0aW9uQ2hvaWNlKVxuICAgIH1cblxuICAgIGRpZFRlcm1pbmF0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIHRoaXMuY2luZGVyZWxsYS5nZXRBZGRDb3N0dW1lQWN0aW9uKHRoaXMuc2hvZUNob2ljZSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuUGFyYWxsZWwoW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNpbmRlcmVsbGEuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmRvb3Iuc3BpbmUsICgpID0+IHRoaXMuY2luZGVyZWxsYS5wbGF5V2FsaygpLCAyKSxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRGVsYXkoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMucHJpbmNlLnNldERpcmVjdGlvbihEaXJlY3Rpb24ubGVmdCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmluY2UuZ2V0Q2hhcmFjdGVyTW92ZUFjdGlvbih0aGlzLmRvb3Iuc3BpbmUsICgpID0+IHRoaXMucHJpbmNlLnBsYXlXYWxrKCksIDEpLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9vci5nZXRDbG9zZUFuaW1BY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmdldEhpZGVBY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmluY2UuZ2V0SGlkZUFjdGlvbigpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzdXBlci5kaWRUZXJtaW5hdGUobmFtZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pKVxuICAgIH1cblxuICAgIHNraXAoKXtcbiAgICAgICAgc3VwZXIuc2tpcCgpO1xuICAgICAgICB0aGlzLnByaW5jZS5oaWRlKCk7XG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS5oaWRlKCk7XG4gICAgfVxufSIsImltcG9ydCBEaWFsb2dMaW5lIGZyb20gXCIuLi8uLi90d2luZS9EaWFsb2dMaW5lL0RpYWxvZ0xpbmVcIjtcbmltcG9ydCBTdGFnZVN0YXRlIGZyb20gXCIuLi9jb21tb24vc3RhdGVzL1N0YWdlU3RhdGVcIjtcbmltcG9ydCB7IEN1ZURpYWxvZ0xpbmUgfSBmcm9tIFwiLi4vLi4vdHdpbmUvRGlhbG9nTGluZS9DdWVEaWFsb2dMaW5lXCI7XG5pbXBvcnQgeyBQYXNzYWdlIH0gZnJvbSBcIi4uLy4uL3R3aW5lL1R3aW5lU2NyaXB0XCI7XG5pbXBvcnQgeyBDaG9pY2VEaWFsb2dMaW5lIH0gZnJvbSBcIi4uLy4uL3R3aW5lL0RpYWxvZ0xpbmUvQ2hvaWNlRGlhbG9nTGluZVwiO1xuaW1wb3J0IHsgQ3VlQ2hvaWNlRGlhbG9nTGluZSB9IGZyb20gXCIuLi8uLi90d2luZS9EaWFsb2dMaW5lL0N1ZUNob2ljZURpYWxvZ0xpbmVcIjtcbmltcG9ydCB7IERpYWxvZ0N1ZURhdGEgfSBmcm9tIFwiLi4vLi4vdHdpbmUvRGlhbG9nRGF0YVwiO1xuaW1wb3J0IHsgRGlhbG9nU3RhdGVGYWN0b3J5IH0gZnJvbSBcIi4vRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5pbXBvcnQgeyBEaWFsb2dUeXBlIH0gZnJvbSBcIi4uL2NvbW1vbi9BY3RNZWRpYXRvclwiO1xuaW1wb3J0IEdvZG1vdGhlclNlbGVjdGlvblN0YXRlIGZyb20gXCIuLi9jaW5kZXJlbGxhL3N0YXRlcy9Hb2Rtb3RoZXJTZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IENpbmRlcmVsbGFTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vY2luZGVyZWxsYS9zdGF0ZXMvQ2luZGVyZWxsYVNlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgQ2luZGVyZWxsYUVudHJhbmNlIGZyb20gXCIuLi9jaW5kZXJlbGxhL3N0YXRlcy9DaW5kZXJlbGxhRW50cmFuY2VcIjtcbmltcG9ydCBTaG9lU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL1Nob2VTZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IHsgUHJvcCB9IGZyb20gXCIuLi9wb3BvdmVycy9Qcm9wU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IENhcnJpYWdlU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL0NhcnJpYWdlU2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBBY3QxU2V0dXBTdGF0ZSBmcm9tIFwiLi4vY29tbW9uL3N0YXRlcy9BY3QxU2V0dXBTdGF0ZVwiO1xuaW1wb3J0IEdvZE1vdGhlck91dCBmcm9tIFwiLi4vY2luZGVyZWxsYS9zdGF0ZXMvR29kTW90aGVyT3V0XCI7XG5pbXBvcnQgQ2luZGVyZWxsYUdldHNJblRoZUNhcnJpYWdlU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL0NpbmRlcmVsbGFHZXRzSW5UaGVDYXJyaWFnZVN0YXRlXCI7XG5pbXBvcnQgQWN0MkludHJvU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL0FjdDJJbnRyb1N0YXRlXCI7XG5pbXBvcnQgeyBJY29uVHlwZSB9IGZyb20gXCIuLi9wb3BvdmVycy9JY29uU2VsZWN0aW9uUG9wT3ZlclwiO1xuaW1wb3J0IEFjdGlvbk1vdmVtZW50U2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL0FjdGlvbk1vdmVtZW50U2VsZWN0aW9uU3RhdGVcIjtcbmltcG9ydCBDaW5kZXJlbGxhQW5zd2VyU2VsZWN0aW9uU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL0NpbmRlcmVsbGFBbnN3ZXJTZWxlY3Rpb25TdGF0ZVwiO1xuaW1wb3J0IEJhY2tncm91bmRTZWxlY3Rpb25TdGF0ZSBmcm9tIFwiLi4vY2luZGVyZWxsYS9zdGF0ZXMvQmFja2dyb3VuZFNlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgRGFuY2VTdGF0ZSBmcm9tIFwiLi4vY2luZGVyZWxsYS9zdGF0ZXMvRGFuY2VTdGF0ZVwiO1xuaW1wb3J0IEdvZG1vdGhlckdob3N0U3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL0dvZG1vdGhlckdob3N0U3RhdGVcIjtcbmltcG9ydCBMb29zZVNob2VTdGF0ZSBmcm9tIFwiLi4vY2luZGVyZWxsYS9zdGF0ZXMvTG9vc2VTaG9lU3RhdGVcIjtcbmltcG9ydCBNaWRuaWdodFRvd2VTdGF0ZSBmcm9tIFwiLi4vY2luZGVyZWxsYS9zdGF0ZXMvTWlkbmlnaHRUb3dlU3RhdGVcIjtcbmltcG9ydCBUcmFuc2Zvcm1CYWNrU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL1RyYW5zZm9ybUJhY2tTdGF0ZVwiO1xuaW1wb3J0IENpbmRlcmVsbGFNb3BTdGF0ZSBmcm9tIFwiLi4vY2luZGVyZWxsYS9zdGF0ZXMvQ2luZGVyZWxsYU1vcFN0YXRlXCI7XG5pbXBvcnQgUHJpbmNlQXREb29yU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL1ByaW5jZUF0RG9vclN0YXRlXCI7XG5pbXBvcnQgR29kbW90aGVyR2hvc3RPdXRTdGF0ZSBmcm9tIFwiLi4vY2luZGVyZWxsYS9zdGF0ZXMvR29kbW90aGVyR2hvc3RPdXRTdGF0ZVwiO1xuaW1wb3J0IFdhbGtTdGF0ZSBmcm9tIFwiLi4vY2luZGVyZWxsYS9zdGF0ZXMvV2Fsa1N0YXRlXCI7XG5pbXBvcnQgVHJ5T25TaG9lU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL1RyeU9uU2hvZVN0YXRlXCI7XG5pbXBvcnQgV2Fsa1RvRG9vclN0YXRlIGZyb20gXCIuLi9jaW5kZXJlbGxhL3N0YXRlcy9XYWxrVG9Eb29yU3RhdGVcIjtcbmltcG9ydCB7IENvc3R1bWVzIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQ29zdHVtZXNcIjtcbmltcG9ydCBMb29rQXJvdW5kU3RhdGUgZnJvbSBcIi4uL2NpbmRlcmVsbGEvc3RhdGVzL0xvb2tBcm91bmRTdGF0ZVwiO1xuXG5leHBvcnQgZW51bSBDaG9pY2VUeXBlIHtcbiAgICBnb2Rtb3RoZXIgPSBcImdvZG1vdGhlclwiLFxuICAgIG91dGZpdCA9IFwib3V0Zml0XCIsXG4gICAgc2hvZXMgPSBcInNob2VzXCIsXG4gICAgcHVtcGtpbiA9IFwicHVtcGtpblwiLFxuICAgIHByaW5jZSA9IFwicHJpbmNlXCIsXG4gICAgZGFuY2UgPSBcImRhbmNlXCIsXG4gICAgcmVzcG9uc2UgPSBcInJlc3BvbnNlXCIsXG4gICAgbG9jYXRpb24gPSBcImxvY2F0aW9uXCIsXG4gICAgdHJhbnNmb3JtQmFjayA9IFwidHJhbnNmb3JtQmFja1wiLFxufVxuXG5leHBvcnQgZW51bSBTaW1wbGVEaWFsb2cge1xuICAgIGFjdDFJbnRybzIgPSBcImFjdC0xLWludHJvLTJcIixcbiAgICBhY3QxSW50cm8xID0gXCJhY3QtMS1pbnRyby0xXCIsXG4gICAgc3Rvcnk5ID0gXCJzdG9yeS05XCIsXG4gICAgc3RvcnkxMSA9IFwic3RvcnktMTFcIixcbiAgICBhY3QySW50cm8xID0gXCJhY3QtMi1pbnRyby0xXCIsXG4gICAgYWN0M0ludHJvMSA9IFwiYWN0My1pbnRyby0xXCIsXG4gICAgc3RvcnkxNCA9IFwic3RvcnktMTRcIixcbiAgICBzdG9yeTE1ID0gXCJzdG9yeS0xNVwiLFxuICAgIHN0b3J5MTYgPSBcInN0b3J5LTE2XCIsXG4gICAgc3RvcnkxOSA9IFwic3RvcnktMTlcIixcbiAgICBzdG9yeTIwID0gXCJzdG9yeS0yMFwiLFxuICAgIHN0b3J5MjcgPSBcInN0b3J5LTI3XCIsXG4gICAgc3RvcnkyOSA9IFwic3RvcnktMjlcIixcbiAgICBzdG9yeTMwID0gXCJzdG9yeS0zMFwiLFxuICAgIHN0b3J5MzIgPSBcInN0b3J5LTMyXCIsXG4gICAgc3RvcnkzNCA9IFwic3RvcnktMzRcIixcbiAgICBiYWxscm9vbTIgPSBcImJhbGxyb29tLTJcIlxufVxuXG5leHBvcnQgZW51bSBHb2Rtb3RoZXJDb3N0dW1lQ2hvaWNlIHtcbiAgICBDb3N0dW1lMUZhaXJ5ID0gXCJmYWlyeWdvZC0xXCIsXG4gICAgQ29zdHVtZTFJbnZlbnRvciA9IFwiZmFpcnlpbnZlbnRvci0xXCIsXG59XG5leHBvcnQgZW51bSBDaW5kZXJlbGxhQ29zdHVtZUNob2ljZSB7XG4gICAgbW92aWVzdGFyID0gXCJtb3ZpZXN0YXItMVwiLFxuICAgIHNwYWNlc3VpdCA9IFwic3BhY2VzdWl0LTFcIixcbn1cbmV4cG9ydCBlbnVtIFNob2VzQ2hvaWNlIHtcbiAgICBzbGlwcGVycyA9IFwic2xpcHBlcnMtMVwiLFxuICAgIHNuZWFrZXJzID0gXCJzbmVha2Vycy0xXCIsXG4gICAgYm9vdHMgPSBcImJvb3RzLTFcIixcbn1cbmV4cG9ydCBlbnVtIENhcnJpYWdlQ2hvaWNlIHtcbiAgICBjYXJyaWFnZTEgPSBcImNhcnJpYWdlLTFcIixcbiAgICBjYXIxID0gXCJjYXItMVwiLFxuICAgIHJvY2tldDEgPSBcInJvY2tldC0xXCIsXG59XG5leHBvcnQgZW51bSBQcmluY2VDb3N0dW1lQ2hvaWNlIHtcbiAgICBjaGFybWluZyA9IFwiY2hhcm1pbmctMVwiLFxuICAgIGJvdCA9IFwiYm90LTFcIixcbiAgICBtZWdhc3RhciA9IFwibWVnYXN0YXItMVwiLFxufVxuZXhwb3J0IGVudW0gQ2luZGVyZWxsYU1vdmVDaG9pY2Uge1xuICAgIGRhbmNlMSA9IFwiZGFuY2UtMVwiLFxuICAgIGhvcDEgPSBcImhvcC0xXCIsXG4gICAgc2hha2UxID0gXCJzaGFrZS0xXCIsXG59XG5leHBvcnQgZW51bSBDaW5kZXJlbGxhQW5zd2VyQ2hvaWNlIHtcbiAgICBoYXBweTEgPSBcImhhcHB5LTFcIixcbiAgICBzYWQxID0gXCJzYWQtMVwiLFxuICAgIHNpbGx5MSA9IFwic2lsbHktMVwiLFxufVxuZXhwb3J0IGVudW0gQmFja2dyb3VuZENob2ljZSB7XG4gICAgYmFsbHJvb20xID0gXCJiYWxscm9vbS0xXCIsXG4gICAgY290dGFnZTEgPSBcImNvdHRhZ2UtMVwiLFxuICAgIGhvdXNlMSA9IFwiaG91c2UtMVwiLFxufVxuXG5cbmV4cG9ydCBjbGFzcyBDaW5kZXJlbGxhRGlhbG9nU3RhdGVGYWN0b3J5IGV4dGVuZHMgRGlhbG9nU3RhdGVGYWN0b3J5IHtcblxuICAgIHByb3RlY3RlZCBhY3QxOiBzdHJpbmcgPSBTaW1wbGVEaWFsb2cuYWN0MUludHJvMTtcbiAgICBwcm90ZWN0ZWQgYWN0Mjogc3RyaW5nID0gU2ltcGxlRGlhbG9nLmFjdDJJbnRybzE7XG4gICAgcHJvdGVjdGVkIGFjdDM6IHN0cmluZyA9IFNpbXBsZURpYWxvZy5hY3QzSW50cm8xO1xuXG4gICAgcHJvdGVjdGVkIGhhbmRsZUNob2ljZURpYWxvZyhkYXRhOiBEaWFsb2dUeXBlLCBkaWFsb2c6IENob2ljZURpYWxvZ0xpbmUsIHBhc3NhZ2U6IFBhc3NhZ2UpIHtcbiAgICAgICAgc3dpdGNoIChkYXRhLmNob2ljZVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5nb2Rtb3RoZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHb2Rtb3RoZXJTZWxlY3Rpb25TdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlQ29zdHVtZVNlbGVjdFBvcE92ZXIoW0Nvc3R1bWVzLmZhaXJ5Z29kbW90aGVyLCBDb3N0dW1lcy5pbnZlbnRvcl0pLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBjYXNlIENob2ljZVR5cGUub3V0Zml0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2luZGVyZWxsYVNlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVDb3N0dW1lU2VsZWN0UG9wT3ZlcihbQ29zdHVtZXMubW92aWVzdGFyLCBDb3N0dW1lcy5hc3Ryb25hdXRdKSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgY2FzZSBDaG9pY2VUeXBlLnNob2VzOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2hvZVNlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVDb3N0dW1lU2VsZWN0UG9wT3ZlcihbQ29zdHVtZXMuZ2xhc3NzbGlwcGVycywgQ29zdHVtZXMuc25lYWtlcnMsIENvc3R1bWVzLnNwYWNlYm9vdHNdKSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgY2FzZSBDaG9pY2VUeXBlLnB1bXBraW46XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDYXJyaWFnZVNlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVQcm9wc1NlbGVjdFBvcE92ZXIoW1Byb3AucHVtcGtpbmNhcnJpYWdlLCBQcm9wLnB1bXBraW5jYXIsIFByb3AucHVtcGtpbnJvY2tldF0pLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBjYXNlIENob2ljZVR5cGUucHJpbmNlOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWN0MkludHJvU3RhdGUoZGlhbG9nLCB0aGlzLmNyZWF0ZUNvc3R1bWVTZWxlY3RQb3BPdmVyKFtDb3N0dW1lcy5wcmluY2VjaGFybWluZywgQ29zdHVtZXMucHJpbmNlYm90LCBDb3N0dW1lcy5wcmluY2VtZWdhc3Rhcl0pLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgICAgICBjYXNlIENob2ljZVR5cGUuZGFuY2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3Rpb25Nb3ZlbWVudFNlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVJY29uU2VsZWN0UG9wT3ZlcihbSWNvblR5cGUuZGFuY2UsIEljb25UeXBlLmp1bXAsIEljb25UeXBlLnNoYWtlXSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNhc2UgQ2hvaWNlVHlwZS5yZXNwb25zZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENpbmRlcmVsbGFBbnN3ZXJTZWxlY3Rpb25TdGF0ZShkaWFsb2csIHRoaXMuY3JlYXRlSWNvblNlbGVjdFBvcE92ZXIoW0ljb25UeXBlLmhhcHB5LCBJY29uVHlwZS5hbmdyeSwgSWNvblR5cGUuc2lsbHldKSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgY2FzZSBDaG9pY2VUeXBlLmxvY2F0aW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmFja2dyb3VuZFNlbGVjdGlvblN0YXRlKGRpYWxvZywgdGhpcy5jcmVhdGVQcm9wc1NlbGVjdFBvcE92ZXIoW1Byb3AuYmFja2dyb3VuZEJhbGxyb29tLCBQcm9wLmJhY2tncm91bmRHcmFuZG1hLCBQcm9wLmJhY2tncm91bmQzYmVhcnNdKSwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICAgICAgY2FzZSBDaG9pY2VUeXBlLnRyYW5zZm9ybUJhY2s6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1CYWNrU3RhdGUoZGlhbG9nLCB0aGlzLmNyZWF0ZUljb25TZWxlY3RQb3BPdmVyKFtJY29uVHlwZS5iYW5nLCBJY29uVHlwZS5wb3AsIEljb25UeXBlLmNyYXNoXSksIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2ltcGxlRGlhbG9nKHBhc3NhZ2UsIGRpYWxvZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaGFuZGxlQ3VlRGlhbG9nKGRhdGE6IERpYWxvZ1R5cGUsIGRpYWxvZzogQ3VlRGlhbG9nTGluZSkge1xuICAgICAgICBzd2l0Y2ggKChkYXRhIGFzIERpYWxvZ0N1ZURhdGEpLmN1ZSkge1xuXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJubyBzdGF0ZSBmb3IgXCIgKyAoZGF0YSBhcyBEaWFsb2dDdWVEYXRhKS5jdWU7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBoYW5kbGVDdWVDaG9pY2VEaWFsb2coZGF0YTogRGlhbG9nVHlwZSwgZGlhbG9nOiBDdWVDaG9pY2VEaWFsb2dMaW5lKSB7XG4gICAgICAgIHN3aXRjaCAoKGRhdGEgYXMgRGlhbG9nQ3VlRGF0YSkuY3VlKSB7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0U2ltcGxlRGlhbG9nKHBhc3NhZ2U6IFBhc3NhZ2UsIGRpYWxvZzogRGlhbG9nTGluZSk6IFN0YWdlU3RhdGUge1xuICAgICAgICBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5hY3QxSW50cm8xKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFjdDFTZXR1cFN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhc3NhZ2UubmFtZSA9PSBTaW1wbGVEaWFsb2cuYWN0MUludHJvMikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaW5kZXJlbGxhRW50cmFuY2UoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5zdG9yeTkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgR29kTW90aGVyT3V0KGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhc3NhZ2UubmFtZSA9PSBTaW1wbGVEaWFsb2cuc3RvcnkxMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaW5kZXJlbGxhR2V0c0luVGhlQ2FycmlhZ2VTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnN0b3J5MTQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGFuY2VTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnN0b3J5MTUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgR29kbW90aGVyR2hvc3RTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnN0b3J5MTYpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgR29kbW90aGVyR2hvc3RPdXRTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnN0b3J5MTkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9vc2VTaG9lU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5zdG9yeTIwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1pZG5pZ2h0VG93ZVN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhc3NhZ2UubmFtZSA9PSBTaW1wbGVEaWFsb2cuc3RvcnkyNykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXYWxrU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5iYWxscm9vbTIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9va0Fyb3VuZFN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhc3NhZ2UubmFtZSA9PSBTaW1wbGVEaWFsb2cuc3RvcnkyOSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaW5kZXJlbGxhTW9wU3RhdGUoZGlhbG9nLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFzc2FnZS5uYW1lID09IFNpbXBsZURpYWxvZy5zdG9yeTMwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByaW5jZUF0RG9vclN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhc3NhZ2UubmFtZSA9PSBTaW1wbGVEaWFsb2cuc3RvcnkzMikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcnlPblNob2VTdGF0ZShkaWFsb2csIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXNzYWdlLm5hbWUgPT0gU2ltcGxlRGlhbG9nLnN0b3J5MzQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgV2Fsa1RvRG9vclN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBTdGFnZVN0YXRlKGRpYWxvZywgdGhpcy5kaVNlcnZpY2UpO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uLy4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgQ2luZGVyZWxsYVN0b3J5RGF0YSBmcm9tIFwiLi4vQ2luZGVyZWxsYVN0b3J5RGF0YVwiO1xuaW1wb3J0IENpbmRlcmVsbGFDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvQ2luZGVyZWxsYUNoYXJhY3RlclwiO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NoYXJhY3RlcnMvRGlyZWN0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvb2tBcm91bmRTdGF0ZSBleHRlbmRzIFN0YWdlU3RhdGUge1xuICAgIHByb3RlY3RlZCBnZXQgcHJpbmNlKCk6IENpbmRlcmVsbGFDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnByaW5jZSkgYXMgQ2luZGVyZWxsYUNoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHN0b3J5RGF0YSgpOiBDaW5kZXJlbGxhU3RvcnlEYXRhIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5TdG9yeURhdGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJpbmNlU3RhcnRQb3NpdGlvblg6IG51bWJlcjtcblxuICAgIG9uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIub25Jbml0KCk7XG4gICAgICAgIHRoaXMucHJpbmNlU3RhcnRQb3NpdGlvblggPSB0aGlzLnByaW5jZS54O1xuICAgIH1cblxuICAgIGRpZFRlcm1pbmF0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyRGVsZWdhdGUucnVuQWN0aW9uKFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgIHRoaXMucHJpbmNlLmdldFdhbGtUb1Bvc2l0aW9uQWN0aW9uKHRoaXMucHJpbmNlLnggKyBDaW5kZXJlbGxhU3RvcnlEYXRhLmFjdDNMb29rQXJvdW5kV2Fsa09mZnNldCksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnByaW5jZS5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLmxlZnQpKSxcbiAgICAgICAgICAgICAgICB0aGlzLnByaW5jZS5nZXRXYWxrVG9Qb3NpdGlvbkFjdGlvbih0aGlzLnByaW5jZVN0YXJ0UG9zaXRpb25YKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMucHJpbmNlLnNldERpcmVjdGlvbihEaXJlY3Rpb24ucmlnaHQpKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHN1cGVyLmRpZFRlcm1pbmF0ZShuYW1lKSlcbiAgICAgICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBza2lwKCkge1xuICAgICAgICB0aGlzLnByaW5jZS54ID0gdGhpcy5wcmluY2VTdGFydFBvc2l0aW9uWDtcbiAgICAgICAgdGhpcy5wcmluY2Uuc2V0RGlyZWN0aW9uKERpcmVjdGlvbi5yaWdodCk7XG4gICAgICAgIHN1cGVyLnNraXAoKTtcbiAgICB9XG59IiwiaW1wb3J0IFN0b3J5RGF0YSBmcm9tIFwiLi4vY29tbW9uL1N0b3J5RGF0YVwiO1xuaW1wb3J0IHsgU2hvZXNDaG9pY2UgfSBmcm9tIFwiLi4vZmFjdG9yaWVzL0NpbmRlcmVsbGFEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcbmltcG9ydCB7IFRocm93aW5nU2tpbiB9IGZyb20gXCIuLi9wcm9wcy9UaHJvd2luZ1Byb3BcIjtcbmltcG9ydCB7IENvc3R1bWVzIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQ29zdHVtZXNcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgeyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2cgfSBmcm9tIFwiLi4vY29tbW9uL0NoYXJhY3RlclNlbGVjdGlvblBvcE92ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2luZGVyZWxsYVN0b3J5RGF0YSBleHRlbmRzIFN0b3J5RGF0YXtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdm9JRE1hcDogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcblxuXG4gICAgc3RhdGljIGFjdDFDaW5kZXJlbGxhWFBvc2l0aW9uOiBudW1iZXIgPSAyMDtcbiAgICBzdGF0aWMgYWN0MUNpbmRlcmVsbGFCZXNpZGVDYXJyaWFnZVhQb3NpdGlvbjogbnVtYmVyID0gMjcwO1xuICAgIHN0YXRpYyBhY3QyR29kbW90aGVyR2hvc3RYUG9zaXRpb246IG51bWJlciA9IDI1MDtcbiAgICBzdGF0aWMgYWN0MldvbGZYUG9zaXRpb246IG51bWJlciA9IDIwMDtcbiAgICBzdGF0aWMgYWN0Mk5hcnJhdG9yWFBvc2l0aW9uOiBudW1iZXIgPSAzNzU7XG4gICAgc3RhdGljIGFjdDJHcmFubWFYUG9zaXRpb246IG51bWJlciA9IC0xMDtcbiAgICBzdGF0aWMgYWN0MkxycmhYUG9zaXRpb246IG51bWJlciA9IC0yMDAgO1xuICAgIHN0YXRpYyBhY3QyV29sZlhTY2FsZTogbnVtYmVyID0gMTtcbiAgICBzdGF0aWMgYWN0Mk5hcnJhdG9yWFNjYWxlOiBudW1iZXIgPSAxO1xuICAgIHN0YXRpYyBhY3QyTHJyaFhTY2FsZTogbnVtYmVyID0gLTEgO1xuICAgIHN0YXRpYyBhY3QzTG9va0Fyb3VuZFdhbGtPZmZzZXQ6IG51bWJlciA9IDM1MDtcblxuICAgIHB1YmxpYyBzaG9lU2VsZWN0aW9uQ2hvaWNlOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgcHVibGljIHNob3VsZFNob3dCYWxsUm9vbTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGNob2ljZVRvQ29zdHVtZU1hcDogTWFwPHN0cmluZywgQ29zdHVtZXM+ID0gbmV3IE1hcChbXG4gICAgICAgIFtTaG9lc0Nob2ljZS5zbGlwcGVycywgQ29zdHVtZXMuZ2xhc3NzbGlwcGVyc10sXG4gICAgICAgIFtTaG9lc0Nob2ljZS5zbmVha2VycywgQ29zdHVtZXMuc25lYWtlcnNdLFxuICAgICAgICBbU2hvZXNDaG9pY2UuYm9vdHMsIENvc3R1bWVzLnNwYWNlYm9vdHNdLFxuICAgIF0pO1xuICAgIHB1YmxpYyByZWFkb25seSBjaG9pY2VUb1Rocm93aW5nU2tpbk1hcDogTWFwPHN0cmluZywgVGhyb3dpbmdTa2luPiA9IG5ldyBNYXAoW1xuICAgICAgICBbU2hvZXNDaG9pY2Uuc2xpcHBlcnMsIFRocm93aW5nU2tpbi5nbGFzc3NsaXBwZXJdLFxuICAgICAgICBbU2hvZXNDaG9pY2Uuc25lYWtlcnMsIFRocm93aW5nU2tpbi5zbmVha2VyXSxcbiAgICAgICAgW1Nob2VzQ2hvaWNlLmJvb3RzLCBUaHJvd2luZ1NraW4uYXN0cm9uYXV0Ym9vdF0sXG4gICAgXSk7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgY2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nczogTWFwPFJvbGUsIENoYXJhY3RlclNlbGVjdGlvbkRpYWxvZz4gPSBuZXcgTWFwKFtcbiAgICAgICAgW1JvbGUuZ29kbW90aGVyLCBuZXcgQ2hhcmFjdGVyU2VsZWN0aW9uRGlhbG9nKFwiY2luZGVyLWNoYXItc2VsZWN0LWZhaXJ5Lm1wM1wiLCBcIldobyBzaG91bGQgYmUgdGhlIGZhaXJ5IGhlbHBlcj9cIildLFxuICAgICAgICBbUm9sZS5wcmluY2UsIG5ldyBDaGFyYWN0ZXJTZWxlY3Rpb25EaWFsb2coXCJjaW5kZXItY2hhci1zZWxlY3QtcHJpbmNlLm1wM1wiLCBcIldobyBzaG91bGQgYmUgdGhlIHByaW5jZT9cIildLFxuICAgIF0pXG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgbGVhZFJvbGU6IFJvbGUgPSBSb2xlLmNpbmRlcmVsbGE7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgcm9sZVVJTWFwOiBNYXA8Um9sZSwgQ29zdHVtZXM+ID0gbmV3IE1hcChbXG4gICAgICAgIFtSb2xlLmNpbmRlcmVsbGEsIENvc3R1bWVzLnJvbGVjaW5kZXJlbGxhXSxcbiAgICAgICAgW1JvbGUucHJpbmNlLCBDb3N0dW1lcy5yb2xlcHJpbmNlY2hhcm1pbmddLFxuICAgICAgICBbUm9sZS5nb2Rtb3RoZXIsIENvc3R1bWVzLnJvbGVmYWlyeWhlbHBlcl0sXG4gICAgICAgIFtSb2xlLm5hcnJhdG9yLCBDb3N0dW1lcy5yb2xlbmFycmF0b3JdLFxuICAgIF0pXG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiQ2luZGVyLWRpdmFcIiwgXCJkaXZhXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiQ2luZGVyLW5hdXRcIiwgXCJuYXV0XCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiQ2hhcm1pbmdcIiwgXCJjaGFybWluZ1wiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcIkJvdFwiLCBcImJvdFwiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcIk1lZ2FzdGFyXCIsIFwibWVnYXN0YXJcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJJbnZlbnRvclwiLCBcImludmVudG9yXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiR29kbW90aGVyXCIsIFwiZ29kbW90aGVyXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiQm9vdHNcIiwgXCJib290c1wiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcIlNuZWFrZXJzXCIsIFwic25lYWtlcnNcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJTbGlwcGVyc1wiLCBcInNsaXBwZXJzXCIpO1xuXG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJSb2NrZXRcIiwgXCJyb2NrZXRcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJDYXJcIiwgXCJjYXJcIik7XG4gICAgICAgIHRoaXMudm9JRE1hcC5zZXQoXCJDYXJyaWFnZVwiLCBcImNhcnJpYWdlXCIpO1xuICAgICAgICB0aGlzLnZvSURNYXAuc2V0KFwiSGFwcHlcIiwgXCJoYXBweVwiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcIlNhZFwiLCBcInNhZFwiKTtcbiAgICAgICAgdGhpcy52b0lETWFwLnNldChcIlNpbGx5XCIsIFwic2lsbHlcIik7XG5cbiAgICB9XG5cbiAgICBnZXREZWZhdWx0Vk9LZXlzKCkge1xuICAgICAgICByZXR1cm4gW1wicmVzcG9uc2VcIl07XG4gICAgfVxufSIsImltcG9ydCB7IENpbmRlcmVsbGFNb3ZlQ2hvaWNlIH0gZnJvbSBcIi4uL3N0YWdlL2ZhY3Rvcmllcy9DaW5kZXJlbGxhRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5pbXBvcnQgeyBDb3N0dW1lcywgY29zdHVtZXMgfSBmcm9tIFwiLi9Db3N0dW1lc1wiO1xuaW1wb3J0IHsgQW5pbWF0aW9ucyB9IGZyb20gXCIuL0Jhc2VDaGFyYWN0ZXJcIjtcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4vQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBTb3VuZENoYW5uZWwgfSBmcm9tIFwiLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvU291bmRTZXJ2aWNlXCI7XG5cbi8vVE9ETyBtYWtlIHRoaXMgYSBtZWRpYXRvciB0byByZXR1cm4gYWN0aW9ucyBmb3IgdGhlIHNwaW5lIHN0YXRlc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2luZGVyZWxsYUNoYXJhY3RlciBleHRlbmRzIENoYXJhY3RlciB7XG4gICAgXG4gICAgcGxheU1vcHBpbmcoKSB7XG4gICAgICAgIHRoaXMuX3NwaW5lLnN0YXRlLnNldEFuaW1hdGlvbigwLCBBbmltYXRpb25zLm1vcHBpbmcsIHRydWUpO1xuICAgIH1cblxuICAgIGdldE1vcHBpbmdBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLl9zcGluZSwgQW5pbWF0aW9ucy5tb3BwaW5nKTtcbiAgICB9XG5cbiAgICBzZXREZWZhdWx0QWN0aW9uKGNob2ljZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IHt9O1xuICAgICAgICBhY3Rpb25zW0NpbmRlcmVsbGFNb3ZlQ2hvaWNlLmRhbmNlMV0gPSBBbmltYXRpb25zLmRhbmNlMjtcbiAgICAgICAgYWN0aW9uc1tDaW5kZXJlbGxhTW92ZUNob2ljZS5ob3AxXSA9IEFuaW1hdGlvbnMuanVtcDtcbiAgICAgICAgYWN0aW9uc1tDaW5kZXJlbGxhTW92ZUNob2ljZS5zaGFrZTFdID0gQW5pbWF0aW9ucy5zaGFrZTtcblxuICAgICAgICBjb25zdCBsb29wID0ge307XG4gICAgICAgIGxvb3BbQ2luZGVyZWxsYU1vdmVDaG9pY2UuZGFuY2UxXSA9IHRydWU7XG4gICAgICAgIGxvb3BbQ2luZGVyZWxsYU1vdmVDaG9pY2UuaG9wMV0gPSB0cnVlO1xuICAgICAgICBsb29wW0NpbmRlcmVsbGFNb3ZlQ2hvaWNlLnNoYWtlMV0gPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX2RlZmF1bHRBY3Rpb24gPSBhY3Rpb25zW2Nob2ljZUlkXTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdExvb3BBY3Rpb24gPSBsb29wW2Nob2ljZUlkXTtcbiAgICB9XG5cbiAgICAvLyBDT1NUVU1FU1xuICAgIHB1YmxpYyBnZXRTZXRTaG9lSW5IYW5kKGNvc3R1bWU6IENvc3R1bWVzKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZXRTaG9lSW5IYW5kKGNvc3R1bWUpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlSGlkZUFuZFJpc2VBY3Rpb24oYWN0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0U2hvZUluSGFuZChjb3N0dW1lOiBDb3N0dW1lcyl7XG4gICAgICAgIGxldCBhdHRhY2htZW50ID0gXCJjb3N0dW1lcy9hc3Ryb25hdXQtYm9vdFwiO1xuICAgICAgICBsZXQgbmFtZSA9IFwiY29zdHVtZXMvY2FycnktYXN0cm9uYXV0LWJvb3RcIjtcbiAgICAgICAgc3dpdGNoIChjb3N0dW1lKSB7XG4gICAgICAgICAgICBjYXNlIENvc3R1bWVzLmdsYXNzc2xpcHBlcnM6XG4gICAgICAgICAgICAgICAgYXR0YWNobWVudCA9IFwiY29zdHVtZXMvZ2xhc3NzbGlwcGVyXCI7XG4gICAgICAgICAgICAgICAgbmFtZSA9IFwiY29zdHVtZXMvY2FycnktZ2xhc3NzbGlwcGVyXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvc3R1bWVzLnNuZWFrZXJzOlxuICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQgPSBcImNvc3R1bWVzL3NuZWFrZXJcIjtcbiAgICAgICAgICAgICAgICBuYW1lID0gXCJjb3N0dW1lcy9jYXJyeS1zbmVha2VyXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dGFjaENvc3R1bWVQYXJ0KG5hbWUsIGF0dGFjaG1lbnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSZW1vdmVTaG9lSW5IYW5kQWN0aW9uKGNvc3R1bWU6IENvc3R1bWVzKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5yZW1vdmVTaG9lSW5IYW5kKGNvc3R1bWUpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlSGlkZUFuZFJpc2VBY3Rpb24oYWN0aW9uLCBTb3VuZENoYW5uZWwuQzMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRPbmVTaG9lQWN0aW9uKGNvc3R1bWU6IENvc3R1bWVzKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZXRPbmVTaG9lKGNvc3R1bWUpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlSGlkZUFuZFJpc2VBY3Rpb24oYWN0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0T25lU2hvZShjb3N0dW1lOiBDb3N0dW1lcyl7XG4gICAgICAgIGxldCBhdHRhY2htZW50ID0gXCJjb3N0dW1lcy9hc3Ryb25hdXQtYm9vdFwiO1xuICAgICAgICBzd2l0Y2ggKGNvc3R1bWUpIHtcbiAgICAgICAgICAgIGNhc2UgQ29zdHVtZXMuZ2xhc3NzbGlwcGVyczpcbiAgICAgICAgICAgICAgICBhdHRhY2htZW50ID0gXCJjb3N0dW1lcy9nbGFzc3NsaXBwZXJcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29zdHVtZXMuc25lYWtlcnM6XG4gICAgICAgICAgICAgICAgYXR0YWNobWVudCA9IFwiY29zdHVtZXMvc25lYWtlclwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpicmVha1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0YWNoQ29zdHVtZVBhcnQoYXR0YWNobWVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZVNob2VJbkhhbmQoY29zdHVtZTogQ29zdHVtZXMpe1xuICAgICAgICBsZXQgbmFtZSA9IFwiY29zdHVtZXMvY2FycnktYXN0cm9uYXV0LWJvb3RcIjtcbiAgICAgICAgc3dpdGNoIChjb3N0dW1lKSB7XG4gICAgICAgICAgICBjYXNlIENvc3R1bWVzLmdsYXNzc2xpcHBlcnM6XG4gICAgICAgICAgICAgICAgbmFtZSA9IFwiY29zdHVtZXMvY2FycnktZ2xhc3NzbGlwcGVyXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvc3R1bWVzLnNuZWFrZXJzOlxuICAgICAgICAgICAgICAgIG5hbWUgPSBcImNvc3R1bWVzL2NhcnJ5LXNuZWFrZXJcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQXR0YWNobWVudChuYW1lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlU2hvZXMoY29zdHVtZTogQ29zdHVtZXMpIHtcbiAgICAgICAgY29uc3QgY29zdHVtZVBhcnRzID0gY29zdHVtZXMuZ2V0KGNvc3R1bWUpO1xuICAgICAgICBjb3N0dW1lUGFydHMuZm9yRWFjaChjb3N0dW1lUGFydCA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUF0dGFjaG1lbnQoY29zdHVtZVBhcnQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCB7IERpYWxvZ1N0YXRlRmFjdG9yeSB9IGZyb20gXCIuLi9mYWN0b3JpZXMvRGlhbG9nU3RhdGVGYWN0b3J5XCI7XG5pbXBvcnQgQWN0TWVkaWF0b3IgZnJvbSBcIi4uL2NvbW1vbi9BY3RNZWRpYXRvclwiO1xuaW1wb3J0IHsgQ2luZGVyZWxsYURpYWxvZ1N0YXRlRmFjdG9yeSwgU2hvZXNDaG9pY2UgfSBmcm9tIFwiLi4vZmFjdG9yaWVzL0NpbmRlcmVsbGFEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcbmltcG9ydCBCYWNrZHJvcCwgeyBCYWNrRHJvcFNraW4gfSBmcm9tIFwiLi4vcHJvcHMvQmFja2Ryb3BcIjtcbmltcG9ydCBDaW5kZXJlbGxhU3RvcnlEYXRhIGZyb20gXCIuL0NpbmRlcmVsbGFTdG9yeURhdGFcIjtcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL0RpcmVjdGlvblwiO1xuaW1wb3J0IHsgQ29zdHVtZXMgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9Db3N0dW1lc1wiO1xuaW1wb3J0IENpbmRlcmVsbGFDaGFyYWN0ZXIgZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvQ2luZGVyZWxsYUNoYXJhY3RlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaW5kZXJlbGxhQWN0TWVkaWF0b3IgZXh0ZW5kcyBBY3RNZWRpYXRvciB7XG5cbiAgICBwcm90ZWN0ZWQgaW5pdEZhY3RvcnkoKTogRGlhbG9nU3RhdGVGYWN0b3J5IHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaW5kZXJlbGxhRGlhbG9nU3RhdGVGYWN0b3J5KHRoaXMuZGlTZXJ2aWNlLCB0aGlzLnZpZXcpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgZ29kbW90aGVyKCk6IENoYXJhY3RlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcnMuZ2V0KFJvbGUuZ29kbW90aGVyKVxuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IGNpbmRlcmVsbGEoKTogQ2hhcmFjdGVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5jaW5kZXJlbGxhKVxuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0IHByaW5jZSgpOiBDaGFyYWN0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyYWN0ZXJzLmdldChSb2xlLnByaW5jZSlcbiAgICB9XG4gICAgcHVibGljIGdldCBiYWNrZHJvcCgpOiBCYWNrZHJvcCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpU2VydmljZS5nZXREYXRhQnlLZXkoRGF0YU5hbWUuYmFja2Ryb3ApXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXRDaGFyYWN0ZXJzKCk6IHZvaWR7XG4gICAgICAgc3VwZXIuaW5pdENoYXJhY3RlcnMoKTtcblxuICAgICAgICBjb25zdCBuYXJyYXRvciA9IG5ldyBDaW5kZXJlbGxhQ2hhcmFjdGVyKHRoaXMuY2hhcmFjdGVyUm9sZU1hcC5nZXQoUm9sZS5uYXJyYXRvciksIFJvbGUubmFycmF0b3IsIHRoaXMubmFycmF0b3IsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgY29uc3QgY2luZGVyZWxsYSA9IG5ldyBDaW5kZXJlbGxhQ2hhcmFjdGVyKHRoaXMuY2hhcmFjdGVyUm9sZU1hcC5nZXQoUm9sZS5jaW5kZXJlbGxhKSwgUm9sZS5jaW5kZXJlbGxhLCB0aGlzLmNoYXJhY3RlciwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICBjb25zdCBnb2Rtb3RoZXIgPSBuZXcgQ2luZGVyZWxsYUNoYXJhY3Rlcih0aGlzLmNoYXJhY3RlclJvbGVNYXAuZ2V0KFJvbGUuZ29kbW90aGVyKSwgUm9sZS5nb2Rtb3RoZXIsIHRoaXMuY2hhcmFjdGVyU2Vjb25kLCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIGNvbnN0IHByaW5jZSA9IG5ldyBDaW5kZXJlbGxhQ2hhcmFjdGVyKHRoaXMuY2hhcmFjdGVyUm9sZU1hcC5nZXQoUm9sZS5wcmluY2UpLCBSb2xlLnByaW5jZSwgdGhpcy5jaGFyYWN0ZXJUaGlyZCwgdGhpcy5kaVNlcnZpY2UpO1xuXG4gICAgICAgIG5hcnJhdG9yLnNldENvc3R1bWUoQ29zdHVtZXMubmFycmF0b3IpO1xuXG4gICAgICAgIHRoaXMuc2NyaXB0cy5hZGRTY3JpcHRzKFtuYXJyYXRvciwgY2luZGVyZWxsYSwgZ29kbW90aGVyLCBwcmluY2VdKTtcblxuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSBuZXcgTWFwKFtcbiAgICAgICAgICAgIFtSb2xlLm5hcnJhdG9yLCBuYXJyYXRvcl0sXG4gICAgICAgICAgICBbUm9sZS5jaW5kZXJlbGxhLCBjaW5kZXJlbGxhXSxcbiAgICAgICAgICAgIFtSb2xlLmdvZG1vdGhlciwgZ29kbW90aGVyXSxcbiAgICAgICAgICAgIFtSb2xlLnByaW5jZSwgcHJpbmNlXSxcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmNoYXJhY3RlcnMsIHRoaXMuY2hhcmFjdGVycyk7XG5cbiAgICAgICAgY29uc3Qgcm9sZXMgPSBbUm9sZS5uYXJyYXRvciwgUm9sZS5jaW5kZXJlbGxhLCBSb2xlLmdvZG1vdGhlciwgUm9sZS5wcmluY2VdO1xuICAgICAgICByb2xlcy5mb3JFYWNoKHJvbGUgPT4gdGhpcy5jaGFyYWN0ZXJzLmdldChyb2xlKS5oaWRlKCkpO1xuICAgICAgICB0aGlzLmFzc2lnblBvc2l0aW9uVG9DaGFyYWN0ZXJzKHJvbGVzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2hvdWxkRW5kRGlhbG9nKHBhc3NhZ2VOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyByZXR1cm4gKHBhc3NhZ2VOYW1lID09PSBcImFjdDMtaW50cm8tMVwiKTtcbiAgICB9XG5cblxuICAgIC8vREVCVUdcbiAgICBwcm90ZWN0ZWQgZ29Ub0FjdDMoKSB7XG4gICAgICAgIGNvbnN0IGlkID0gXCJhY3QzLWludHJvLTFcIjtcbiAgXG4gICAgICAgIHRoaXMuc2V0U2F2ZUZvcktleShcImZhaXJ5XCIsIFwiR29kbW90aGVyXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJjb3N0dW1lXCIsIFwiQ2luZGVyLWRpdmFcIik7XG4gICAgICAgIHRoaXMuc2V0U2F2ZUZvcktleShcInNob2VzXCIsIFwiU2xpcHBlcnNcIik7XG4gICAgICAgIHRoaXMuc2V0U2F2ZUZvcktleShcImNhcnJpYWdlXCIsIFwiQ2FycmlhZ2VcIik7XG4gICAgICAgIHRoaXMuc2V0U2F2ZUZvcktleShcImxvY2F0aW9uXCIsIFwiQmFsbHJvb21cIik7XG4gICAgICAgIHRoaXMuc2V0U2F2ZUZvcktleShcInJlc3BvbnNlXCIsIFwiU2FkXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJwcmluY2VcIiwgXCJDaGFybWluZ1wiKTtcbiAgICAgICAgdGhpcy5zZXRTYXZlRm9yS2V5KFwiZGFuY2VcIiwgXCJEYW5jZVwiKTtcblxuICAgICAgICB0aGlzLnNldENvc3R1bWVzKCk7XG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS5oaWRlKCk7XG4gICAgICAgIHRoaXMuZ29kbW90aGVyLmhpZGUoKTtcbiAgICAgICAgdGhpcy5wcmluY2Uuc2hvdygpO1xuICAgICAgICB0aGlzLnByaW5jZS5zZXREaXJlY3Rpb24oRGlyZWN0aW9uLnJpZ2h0KTtcbiAgICAgICAgdGhpcy5wcmluY2UucGxheUlkbGUoKTtcbiAgICAgICAgdGhpcy5iYWNrZHJvcC5zZXRCYWNrZHJvcFRvKEJhY2tEcm9wU2tpbi5hY3Q0LCB0cnVlKTtcbiAgICAgICAgKHRoaXMuc3RvcnlEYXRhIGFzIENpbmRlcmVsbGFTdG9yeURhdGEpLnNob2VTZWxlY3Rpb25DaG9pY2UgPSBTaG9lc0Nob2ljZS5zbGlwcGVycztcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuZ29UbyhpZCk7XG4gICAgfVxuICAgIFxuICAgIHByb3RlY3RlZCBnb1RvQWN0MigpIHtcbiAgICAgICAgY29uc3QgaWQgPSBcIjQ0XCI7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJmYWlyeVwiLCBcIkdvZG1vdGhlclwiKTtcbiAgICAgICAgdGhpcy5zZXRTYXZlRm9yS2V5KFwiY29zdHVtZVwiLCBcIkNpbmRlci1kaXZhXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJzaG9lc1wiLCBcIlNsaXBwZXJzXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJjYXJyaWFnZVwiLCBcIkNhcnJpYWdlXCIpO1xuICAgICAgICB0aGlzLnNldFNhdmVGb3JLZXkoXCJwcmluY2VcIiwgXCJDaGFybWluZ1wiKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0Q29zdHVtZXMoKTtcbiAgICAgICAgdGhpcy5jaW5kZXJlbGxhLmhpZGUoKTtcbiAgICAgICAgdGhpcy5nb2Rtb3RoZXIuaGlkZSgpO1xuICAgICAgICAodGhpcy5zdG9yeURhdGEgYXMgQ2luZGVyZWxsYVN0b3J5RGF0YSkuc2hvZVNlbGVjdGlvbkNob2ljZSA9IFNob2VzQ2hvaWNlLnNsaXBwZXJzO1xuXG4gICAgICAgIHRoaXMuY2luZGVyZWxsYS5hZGRDb3N0dW1lKENvc3R1bWVzLmdsYXNzc2xpcHBlcnMpO1xuICAgICAgICB0aGlzLmJhY2tkcm9wLnNldEJhY2tkcm9wVG8oQmFja0Ryb3BTa2luLmFjdDQsIHRydWUpO1xuICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICB0aGlzLnBsYXlGaXJzdERpYWxvZyhpZCk7XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgc2V0Q29zdHVtZXMoKSB7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5jaW5kZXJlbGxhKS5zZXRDb3N0dW1lKENoYXJhY3Rlci5jb3N0dW1lRnJvbU5hbWUodGhpcy5zdG9yeURhdGEuc2F2ZS5nZXQoXCJjb3N0dW1lXCIpKSk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5uYXJyYXRvcikuc2V0Q29zdHVtZShDb3N0dW1lcy5uYXJyYXRvcik7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5nb2Rtb3RoZXIpLnNldENvc3R1bWUoQ2hhcmFjdGVyLmNvc3R1bWVGcm9tTmFtZSh0aGlzLnN0b3J5RGF0YS5zYXZlLmdldChcImZhaXJ5XCIpKSk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycy5nZXQoUm9sZS5wcmluY2UpLnNldENvc3R1bWUoQ2hhcmFjdGVyLmNvc3R1bWVGcm9tTmFtZSh0aGlzLnN0b3J5RGF0YS5zYXZlLmdldChcInByaW5jZVwiKSkpO1xuICAgIH1cbn0iLCJcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgQWN0aW9uTWFuYWdlckRlbGVnYXRlIGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9BY3Rpb25NYW5hZ2VyRGVsZWdhdGVcIjtcbmltcG9ydCB7IERhdGFOYW1lIH0gZnJvbSBcIi4uLy4uL1NlcnZpY2VzL1NlcnZpY2VOYW1lXCI7XG5pbXBvcnQgZmluZENoaWxkQnlOYW1lIGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IHsgQ2FycmlhZ2VDaG9pY2UgfSBmcm9tIFwiLi4vZmFjdG9yaWVzL0NpbmRlcmVsbGFEaWFsb2dTdGF0ZUZhY3RvcnlcIjtcbmltcG9ydCBHcm91cFByb3AgZnJvbSBcIi4vR3JvdXBQcm9wXCI7XG5pbXBvcnQgeyBjcmVhdGVBY3Rpb25BbmRWaXNpYmxlV2l0aFNGWCB9IGZyb20gXCIuLi8uLi91dGlscy9BbmltYXRpb25BY3Rpb25zXCI7XG5pbXBvcnQgeyBkZWxheWVkU0ZYRGF0YSwgZGVsYXllZFNGWE5hbWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0RlbGF5ZWRTRlhcIjtcbmltcG9ydCBTRlhBY3Rpb24gZnJvbSBcIi4uLy4uL3V0aWxzL1NGWEFjdGlvblwiO1xuaW1wb3J0IHsgU291bmRDaGFubmVsIH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NvdW5kU2VydmljZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJyaWFnZVByb3AgZXh0ZW5kcyBHcm91cFByb3Age1xuXG4gICAgcHJvdGVjdGVkIGdldCBhY3Rpb25NYW5hZ2VyRGVsZWdhdGUoKTogQWN0aW9uTWFuYWdlckRlbGVnYXRlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlTZXJ2aWNlLmdldERhdGFCeUtleShEYXRhTmFtZS5BY3Rpb25NYW5hZ2VyRGVsZWdhdGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FycmlhZ2U6IGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgcHJpdmF0ZSByb2NrZXQ6IGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgcHJpdmF0ZSBjYXI6IGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgcHJpdmF0ZSBwdW1wa2luOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHByaXZhdGUgX2Nob2ljZUlkOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgcHJvdGVjdGVkIGdldCBjb250YWluZXJOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcInB1bXBraW5cIjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGNob2ljZUlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaG9pY2VJZCB8fCBDYXJyaWFnZUNob2ljZS5jYXIxO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgY2hvaWNlSWQodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jaG9pY2VJZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIHByb3RlY3RlZCBkaVNlcnZpY2U6IERJU2VydmljZSkge1xuICAgICAgICBzdXBlcih2aWV3LCBkaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmNhcnJpYWdlID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJjYXJyaWFnZS1hbmltXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMucm9ja2V0ID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJwdW1wa2luLXJvY2tldC1hbmltXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMuY2FyID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJwdW1wa2luLWNhci1hbmltXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMucHVtcGtpbiA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwicHVtcGtpbi1hbmltXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMuc3BpbmVzID0gW1xuICAgICAgICAgICAgdGhpcy5jYXJyaWFnZSxcbiAgICAgICAgICAgIHRoaXMucm9ja2V0LFxuICAgICAgICAgICAgdGhpcy5jYXIsXG4gICAgICAgICAgICB0aGlzLnB1bXBraW5cbiAgICAgICAgXVxuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgdGhpcy5fY2hvaWNlSWQgPSBDYXJyaWFnZUNob2ljZS5jYXJyaWFnZTE7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLmNhcnJpYWdlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQdW1wa2luVHJhbnNmb3JtYXRpb25BY3Rpb24oY2hvaWNlSWQ/OiBzdHJpbmcpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgaWYgKGNob2ljZUlkKSB7XG4gICAgICAgICAgICB0aGlzLl9jaG9pY2VJZCA9IGNob2ljZUlkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U2tpbkZvclR5cGUodGhpcy5fY2hvaWNlSWQpO1xuICAgICAgICByZXR1cm4gZnJhbWV3b3JrLkFjdGlvbnMuU2VxdWVuY2UoW1xuICAgICAgICAgICAgdGhpcy5nZXRUcmFuc2Zvcm1BY3Rpb24oKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2VsZWN0ZWQudmlzaWJsZSA9IHRydWUpLFxuICAgICAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMuc2VsZWN0ZWQsIEFuaW0uc2hvdyksXG4gICAgICAgICAgICAgICAgbmV3IFNGWEFjdGlvbih0aGlzLmdldEFycml2ZVNGWCgpLCBTb3VuZENoYW5uZWwuQzEsIGZhbHNlLCB0aGlzLmRpU2VydmljZSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5zZWxlY3RlZC5zdGF0ZS5zZXRBbmltYXRpb24oMCwgQW5pbS5pZGxlLCB0cnVlKSksXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgcHVibGljIGdldFNob3dBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNlbGVjdGVkLnZpc2libGUgPSB0cnVlKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLnNlbGVjdGVkLCBBbmltLnNob3cpLFxuICAgICAgICAgICAgICAgIG5ldyBTRlhBY3Rpb24odGhpcy5nZXRBcnJpdmVTRlgoKSwgU291bmRDaGFubmVsLkMxLCBmYWxzZSwgdGhpcy5kaVNlcnZpY2UpLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIF0pXG4gICAgfVxuICAgIHB1YmxpYyBnZXRBcHBlYXJBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNlbGVjdGVkLnZpc2libGUgPSB0cnVlKSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLnNlbGVjdGVkLCBBbmltLmFwcGVhciksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgXSlcbiAgICB9XG4gICAgcHVibGljIGdldEhpZGVBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5zZWxlY3RlZCwgQW5pbS5oaWRlKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnNlbGVjdGVkLnZpc2libGUgPSBmYWxzZSksXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNlbGVjdGVkOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHB1YmxpYyBzZXRTa2luRm9yVHlwZSh2OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fY2hvaWNlSWQgPSB2O1xuICAgICAgICBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgIGNhc2UgQ2FycmlhZ2VDaG9pY2UuY2FyMTpcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5jYXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENhcnJpYWdlQ2hvaWNlLmNhcnJpYWdlMTpcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5jYXJyaWFnZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2FycmlhZ2VDaG9pY2Uucm9ja2V0MTpcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5yb2NrZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFycml2ZVNGWCgpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX2Nob2ljZUlkKSB7XG4gICAgICAgICAgICBjYXNlIENhcnJpYWdlQ2hvaWNlLmNhcjE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY2luZGVyLWNhci1hcnJpdmUtc2Z4Lm1wM1wiXG4gICAgICAgICAgICBjYXNlIENhcnJpYWdlQ2hvaWNlLmNhcnJpYWdlMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjaW5kZXItY2FycmlhZ2UtYXJyaXZlLXNmeC5tcDNcIlxuICAgICAgICAgICAgY2FzZSBDYXJyaWFnZUNob2ljZS5yb2NrZXQxOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImNpbmRlci1yb2NrZXQtYXJyaXZlLXNmeC5tcDNcIlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgZ2V0RGVwYXJ0U0ZYKCk6IHN0cmluZyB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fY2hvaWNlSWQpIHtcbiAgICAgICAgICAgIGNhc2UgQ2FycmlhZ2VDaG9pY2UuY2FyMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjaW5kZXItY2FyLWRlcGFydC1zZngubXAzXCJcbiAgICAgICAgICAgIGNhc2UgQ2FycmlhZ2VDaG9pY2UuY2FycmlhZ2UxOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImNpbmRlci1jYXJyaWFnZS1kZXBhcnQtc2Z4Lm1wM1wiXG4gICAgICAgICAgICBjYXNlIENhcnJpYWdlQ2hvaWNlLnJvY2tldDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY2luZGVyLXJvY2tldC1kZXBhcnQtc2Z4Lm1wM1wiXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGdldFRyYW5zZm9ybUFjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlNwaW5lKHRoaXMucHVtcGtpbiwgUHVtcGtpbkFuaW4udHJhbnNmb3JtKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5wdW1wa2luLnZpc2libGUgPSBmYWxzZSlcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VHJhbnNmb3JtQmFjaygpIHtcbiAgICAgICAgcmV0dXJuIGZyYW1ld29yay5BY3Rpb25zLlNlcXVlbmNlKFtcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLlBhcmFsbGVsKFtcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMucHVtcGtpbi52aXNpYmxlID0gdHJ1ZSksXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuU3BpbmUodGhpcy5wdW1wa2luLCBQdW1wa2luQW5pbi5zaG93KSxcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLnNlbGVjdGVkLCBQdW1wa2luQW5pbi50cmFuc2Zvcm0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMuc2VsZWN0ZWQudmlzaWJsZSA9IGZhbHNlKSxcbiAgICAgICAgXSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvd1NlbGVjdGVkKCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkLnN0YXRlLnNldEFuaW1hdGlvbigwLCBBbmltLmlkbGUsIHRydWUpXG4gICAgfVxuXG4gICAgcHVibGljIHNob3dQdW1wa2luKCkge1xuICAgICAgICB0aGlzLnB1bXBraW4udmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMucHVtcGtpbi5zdGF0ZS5zZXRBbmltYXRpb24oMCwgQW5pbS5pZGxlLCB0cnVlKVxuICAgIH1cblxuICAgIHB1YmxpYyBza2lwKCkge1xuICAgICAgICB0aGlzLnNldFNraW5Gb3JUeXBlKHRoaXMuX2Nob2ljZUlkKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZC5zdGF0ZS5zZXRBbmltYXRpb24oMCwgQW5pbS5pZGxlLCB0cnVlKVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSZW1vdmVBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLnNlbGVjdGVkLCBBbmltLmV4aXQpLFxuICAgICAgICAgICAgbmV3IFNGWEFjdGlvbih0aGlzLmdldERlcGFydFNGWCgpLCBTb3VuZENoYW5uZWwuQzEsIGZhbHNlLCB0aGlzLmRpU2VydmljZSksXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgZ2V0U2hvd1B1bXBraW5BY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHNvdW5kRGF0YSA9IGRlbGF5ZWRTRlhEYXRhW2RlbGF5ZWRTRlhOYW1lcy5wcm9wRHJvcF07XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5QYXJhbGxlbChbXG4gICAgICAgICAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMuRnVuYygoKSA9PiB0aGlzLnB1bXBraW4udmlzaWJsZSA9IHRydWUpLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUFjdGlvbkFuZFZpc2libGVXaXRoU0ZYKHRoaXMucHVtcGtpbiwgQW5pbS5zaG93LCBmYWxzZSwgc291bmREYXRhLm5hbWUsIHNvdW5kRGF0YS5kZWxheSwgdGhpcy5kaVNlcnZpY2UpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGZyYW1ld29yay5BY3Rpb25zLkZ1bmMoKCkgPT4gdGhpcy5wdW1wa2luLnN0YXRlLnNldEFuaW1hdGlvbigwLCBBbmltLmlkbGUsIGZhbHNlKSksXG4gICAgICAgIF0pXG4gICAgfVxuXG4gICAgZ2V0SGlkZVB1bXBraW5BY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmcmFtZXdvcmsuQWN0aW9ucy5TZXF1ZW5jZShbXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5TcGluZSh0aGlzLnB1bXBraW4sIEFuaW0uaGlkZSksXG4gICAgICAgICAgICBmcmFtZXdvcmsuQWN0aW9ucy5GdW5jKCgpID0+IHRoaXMucHVtcGtpbi52aXNpYmxlID0gdHJ1ZSksXG4gICAgICAgIF0pXG4gICAgfVxuXG59XG5cbmVudW0gQW5pbSB7XG4gICAgaGlkZSA9IFwiaGlkZVwiLFxuICAgIHNob3cgPSBcInNob3dcIixcbiAgICBpZGxlID0gXCJpZGxlXCIsXG4gICAgZXhpdCA9IFwiZXhpdFwiLFxuICAgIGFwcGVhciA9IFwiYXBwZWFyXCIsXG4gICAgdHJhbnNmb3JtID0gXCJ0cmFuc2Zvcm1cIixcbn1cblxuZW51bSBQdW1wa2luQW5pbiB7XG4gICAgdHJhbnNmb3JtID0gXCJ0cmFuc2Zvcm1cIixcbiAgICBzaG93ID0gXCJzaG93XCJcbn0iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL1ZpZXdcIjtcbmltcG9ydCBmaW5kQ2hpbGRCeU5hbWUgZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzXCI7XG5pbXBvcnQgR3JvdXBQcm9wIGZyb20gXCIuL0dyb3VwUHJvcFwiO1xuaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgeyBkZWxheWVkU0ZYRGF0YSwgZGVsYXllZFNGWE5hbWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0RlbGF5ZWRTRlhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFsbFJvb21Qcm9wIGV4dGVuZHMgR3JvdXBQcm9wIHtcbiAgIFxuICAgIHB1YmxpYyBzZXRTa2luRm9yVHlwZSh2OiBzdHJpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWRvbmx5IHNlYXQxOiBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgIHB1YmxpYyByZWFkb25seSBzZWF0MjogZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2VhdDM6IGZyYW1ld29yay5TcGluZVZpZXc7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNvbnRhaW5lck5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiYmFsbHJvb20tY2hhaXJzXCI7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IodmlldzogVmlldywgZGlTZXJ2aWNlOiBESVNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIodmlldywgZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5zZWF0MSA9IGZpbmRDaGlsZEJ5TmFtZSh0aGlzLnZpZXcsIFwiYWN0Mi1wcm9wMVwiKSBhcyBmcmFtZXdvcmsuU3BpbmVWaWV3O1xuICAgICAgICB0aGlzLnNlYXQyID0gZmluZENoaWxkQnlOYW1lKHRoaXMudmlldywgXCJhY3QyLXByb3AyXCIpIGFzIGZyYW1ld29yay5TcGluZVZpZXc7XG4gICAgICAgIHRoaXMuc2VhdDMgPSBmaW5kQ2hpbGRCeU5hbWUodGhpcy52aWV3LCBcImFjdDItcHJvcDNcIikgYXMgZnJhbWV3b3JrLlNwaW5lVmlldztcbiAgICAgICAgdGhpcy5zcGluZXMgPSBbdGhpcy5zZWF0MSwgdGhpcy5zZWF0MiwgdGhpcy5zZWF0M107XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGdldFNob3dBY3Rpb24oKTogZnJhbWV3b3JrLkFjdGlvbiB7XG4gICAgICAgIGNvbnN0IHNvdW5kRGF0YSA9IGRlbGF5ZWRTRlhEYXRhW2RlbGF5ZWRTRlhOYW1lcy5wcm9wRHJvcF07XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNob3dBbmltQWN0aW9uV2l0aFNGWChzb3VuZERhdGEubmFtZSwgc291bmREYXRhLmRlbGF5KTtcbiAgICB9XG59IiwiXG5cbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCIuLi8uLi8uLi9mcmFtZXdvcmsvdHMvY29yZS9WaWV3XCI7XG5pbXBvcnQgeyBBY3RNZWRpYXRvckRlbGVnYXRlIH0gZnJvbSBcIi4uL2NvbW1vbi9BY3RNZWRpYXRvclwiO1xuaW1wb3J0IFJlcGxheUFjdEhhbmRsZXIgZnJvbSBcIi4uL2NvbW1vbi9SZXBsYXlBY3RIYW5kbGVyXCI7XG5pbXBvcnQgU3RhZ2VTdGF0ZSBmcm9tIFwiLi4vY29tbW9uL3N0YXRlcy9TdGFnZVN0YXRlXCI7XG5pbXBvcnQgQ2luZGVyZWxsYUFjdE1lZGlhdG9yIGZyb20gXCIuL0NpbmRlcmVsbGFBY3RNZWRpYXRvclwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi8uLi9jaGFyYWN0ZXJzL1JvbGVcIjtcbmltcG9ydCB7IENoYXJhY3RlclR5cGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9CYXNlQ2hhcmFjdGVyXCI7XG5pbXBvcnQgUmVwbGF5QWN0TWVkaWF0b3IgZnJvbSBcIi4uL2NvbW1vbi9SZXBsYXlBY3RNZWRpYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaW5kZXJlbGxhUmVwbGF5QWN0TWVkaWF0b3IgZXh0ZW5kcyBDaW5kZXJlbGxhQWN0TWVkaWF0b3IgaW1wbGVtZW50cyBSZXBsYXlBY3RNZWRpYXRvciAge1xuICAgIFxuICAgIHByb3RlY3RlZCByZXBsYXlBY3RIYW5kbGVyOiBSZXBsYXlBY3RIYW5kbGVyO1xuXG4gICAgY29uc3RydWN0b3IodmlldzogVmlldywgZGlTZXJ2aWNlOiBESVNlcnZpY2UsIHN0YXRlczogU3RhZ2VTdGF0ZVtdLCBjaGFyYWN0ZXJSb2xlTWFwOiBNYXA8Um9sZSwgQ2hhcmFjdGVyVHlwZT4sIGRlbGVnYXRlOiBBY3RNZWRpYXRvckRlbGVnYXRlKSB7XG4gICAgICAgIHN1cGVyKHZpZXcsIGRpU2VydmljZSwgY2hhcmFjdGVyUm9sZU1hcCwgZGVsZWdhdGUpO1xuICAgICAgICB0aGlzLl9yZXBsYXlTdGF0ZXMgPSBzdGF0ZXM7XG4gICAgICAgIHRoaXMucmVwbGF5QWN0SGFuZGxlciA9IG5ldyBSZXBsYXlBY3RIYW5kbGVyKGRpU2VydmljZSwgc3RhdGVzLCB0aGlzLnN0YXRlQ29udGV4dCwgdGhpcywgZGVsZWdhdGUsIHRoaXMpO1xuICAgIH1cblxuICAgIGluaXQoKXtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLnJlcGxheUFjdEhhbmRsZXIuaW5pdCgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBwbGF5Rmlyc3REaWFsb2coKSB7XG4gICAgICAgIHRoaXMucmVwbGF5QWN0SGFuZGxlci5wbGF5Rmlyc3REaWFsb2coKTtcbiAgICB9XG4gICAgXG4gICAgZ29UbyhwYXNzYWdlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZEVuZERpYWxvZyhwYXNzYWdlTmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZW5kRGlhbG9nKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gIFxuICAgICAgICB0aGlzLnJlcGxheUFjdEhhbmRsZXIuZ29UbyhwYXNzYWdlTmFtZSk7XG4gICAgfSBcblxuICAgIHByb3RlY3RlZCBnZXRFbmRPZkFjdEFjdGlvbigpOiBmcmFtZXdvcmsuQWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGF5QWN0SGFuZGxlci5nZXRFbmRPZkFjdEFjdGlvbigpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBlbmREaWFsb2coKTogdm9pZCB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVwbGF5IGlzIHRlcm1pbmF0ZWRcIik7XG4gICAgICAgIHRoaXMucnVuQWN0aW9uKHRoaXMucmVwbGF5QWN0SGFuZGxlci5nZXRFbmREaWFsb2dBY3Rpb24oKSk7XG4gICAgfVxuXG59IiwiaW1wb3J0IEFjdE1lZGlhdG9yIGZyb20gXCIuLi9jb21tb24vQWN0TWVkaWF0b3JcIjtcbmltcG9ydCBTdG9yeU1lZGlhdG9yIGZyb20gXCIuLi9jb21tb24vU3RvcnlNZWRpYXRvclwiO1xuaW1wb3J0IFN0YWdlU3RhdGUgZnJvbSBcIi4uL2NvbW1vbi9zdGF0ZXMvU3RhZ2VTdGF0ZVwiO1xuaW1wb3J0IFN0b3J5RGF0YSBmcm9tIFwiLi4vY29tbW9uL1N0b3J5RGF0YVwiO1xuaW1wb3J0IENpbmRlcmVsbGFTdG9yeURhdGEgZnJvbSBcIi4vQ2luZGVyZWxsYVN0b3J5RGF0YVwiO1xuaW1wb3J0IENpbmRlcmVsbGFBY3RNZWRpYXRvciBmcm9tIFwiLi9DaW5kZXJlbGxhQWN0TWVkaWF0b3JcIjtcbmltcG9ydCBDYXJyaWFnZVByb3AgZnJvbSBcIi4uL3Byb3BzL0NhcnJpYWdlUHJvcFwiO1xuaW1wb3J0IHsgRGF0YU5hbWUgfSBmcm9tIFwiLi4vLi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCBUaHJvd2luZ1Byb3AgZnJvbSBcIi4uL3Byb3BzL1Rocm93aW5nUHJvcFwiO1xuaW1wb3J0IERvb3IgZnJvbSBcIi4uL3Byb3BzL0Rvb3JcIjtcbmltcG9ydCBCYWxsUm9vbVByb3AgZnJvbSBcIi4uL3Byb3BzL0JhbGxSb29tUHJvcFwiO1xuaW1wb3J0IENpbmRlcmVsbGFSZXBsYXlBY3RNZWRpYXRvciBmcm9tIFwiLi9DaW5kZXJlbGxhUmVwbGF5QWN0TWVkaWF0b3JcIjtcbmltcG9ydCB7IENoYXJhY3RlclR5cGUgfSBmcm9tIFwiLi4vLi4vY2hhcmFjdGVycy9CYXNlQ2hhcmFjdGVyXCI7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSBcIi4uLy4uL2NoYXJhY3RlcnMvUm9sZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaW5kZXJlbGxhU3RvcnlNZWRpYXRvciBleHRlbmRzIFN0b3J5TWVkaWF0b3J7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0UmVwbGF5TWVkaWF0b3Ioc3RhdGVzOiBBcnJheTxTdGFnZVN0YXRlPiwgY2hhcmFjdGVyUm9sZU1hcDogTWFwPFJvbGUsIENoYXJhY3RlclR5cGU+KSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2luZGVyZWxsYVJlcGxheUFjdE1lZGlhdG9yKHRoaXMudmlldywgdGhpcy5kaVNlcnZpY2UsIHN0YXRlcyxjaGFyYWN0ZXJSb2xlTWFwLCB0aGlzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0QWN0TWVkaWF0b3IoY2hhcmFjdGVyUm9sZU1hcDogTWFwPFJvbGUsIENoYXJhY3RlclR5cGU+KTpBY3RNZWRpYXRvcntcbiAgICAgICAgcmV0dXJuIG5ldyBDaW5kZXJlbGxhQWN0TWVkaWF0b3IodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSwgY2hhcmFjdGVyUm9sZU1hcCwgdGhpcyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFN0b3J5RGF0YSgpOiBTdG9yeURhdGF7XG4gICAgICAgIHJldHVybiBuZXcgQ2luZGVyZWxsYVN0b3J5RGF0YSgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0UHJvcHMoKSB7XG4gICAgICAgIHN1cGVyLmluaXRQcm9wcygpO1xuICAgICAgICB0aGlzLmluaXRDYXJyaWFnZSgpO1xuICAgICAgICB0aGlzLmluaXRUaHJvd2luZ1Byb3AoKTtcbiAgICAgICAgdGhpcy5pbml0RG9vclByb3AoKTtcbiAgICAgICAgdGhpcy5pbml0QmFsbFJvb21Qcm9wKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXRDYXJyaWFnZSgpe1xuICAgICAgICBjb25zdCBwcm9wID0gbmV3IENhcnJpYWdlUHJvcCh0aGlzLnZpZXcsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuY2FycmlhZ2UsIHByb3ApO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2gocHJvcCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0VGhyb3dpbmdQcm9wKCkge1xuICAgICAgICBjb25zdCBwcm9wID0gbmV3IFRocm93aW5nUHJvcCh0aGlzLnZpZXcpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS50aHJvd2luZ1Byb3AsIHByb3ApO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2gocHJvcCk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgaW5pdERvb3JQcm9wKCkge1xuICAgICAgICBjb25zdCBkb29yID0gbmV3IERvb3IodGhpcy52aWV3LCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmRvb3IsIGRvb3IpO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2goZG9vcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0QmFsbFJvb21Qcm9wKCkge1xuICAgICAgICBjb25zdCBwcm9wID0gbmV3IEJhbGxSb29tUHJvcCh0aGlzLnZpZXcsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuYmFsbHJvb20sIHByb3ApO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2gocHJvcCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGRlYnVnU3RhcnRTdG9yeSgpIHtcbiAgICAgICAgLy8gY29uc3QgcmVzdWx0TWFwID0gbmV3IE1hcChbXG4gICAgICAgIC8vICAgICBbUm9sZS5uYXJyYXRvciwgQ2hhcmFjdGVyVHlwZS5hcnRodXJdLFxuICAgICAgICAvLyAgICAgW1JvbGUuY2luZGVyZWxsYSwgQ2hhcmFjdGVyVHlwZS5tdWZmeV0sXG4gICAgICAgIC8vICAgICBbUm9sZS5nb2Rtb3RoZXIsIENoYXJhY3RlclR5cGUuYnVzdGVyXSxcbiAgICAgICAgLy8gICAgIFtSb2xlLnByaW5jZSwgQ2hhcmFjdGVyVHlwZS5kd10sXG4gICAgICAgIC8vIF0pXG4gICAgICAgIGNvbnN0IHJlc3VsdE1hcCA9IG5ldyBNYXAoW1xuICAgICAgICAgICAgW1JvbGUubmFycmF0b3IsIENoYXJhY3RlclR5cGUuZHddLFxuICAgICAgICAgICAgW1JvbGUuY2luZGVyZWxsYSwgQ2hhcmFjdGVyVHlwZS5hcnRodXJdLFxuICAgICAgICAgICAgW1JvbGUuZ29kbW90aGVyLCBDaGFyYWN0ZXJUeXBlLm11ZmZ5XSxcbiAgICAgICAgICAgIFtSb2xlLnByaW5jZSwgQ2hhcmFjdGVyVHlwZS5idXN0ZXJdLFxuICAgICAgICBdKVxuICAgICAgICAvLyBjb25zdCByZXN1bHRNYXAgPSBuZXcgTWFwKFtcbiAgICAgICAgLy8gICAgIFtSb2xlLm5hcnJhdG9yLCBDaGFyYWN0ZXJUeXBlLmJ1c3Rlcl0sXG4gICAgICAgIC8vICAgICBbUm9sZS5jaW5kZXJlbGxhLCBDaGFyYWN0ZXJUeXBlLmR3XSxcbiAgICAgICAgLy8gICAgIFtSb2xlLmdvZG1vdGhlciwgQ2hhcmFjdGVyVHlwZS5hcnRodXJdLFxuICAgICAgICAvLyAgICAgW1JvbGUucHJpbmNlLCBDaGFyYWN0ZXJUeXBlLm11ZmZ5XSxcbiAgICAgICAgLy8gXSlcbiAgICAgICAgLy8gY29uc3QgcmVzdWx0TWFwID0gbmV3IE1hcChbXG4gICAgICAgIC8vICAgICBbUm9sZS5uYXJyYXRvciwgQ2hhcmFjdGVyVHlwZS5tdWZmeV0sXG4gICAgICAgIC8vICAgICBbUm9sZS5jaW5kZXJlbGxhLCBDaGFyYWN0ZXJUeXBlLmJ1c3Rlcl0sXG4gICAgICAgIC8vICAgICBbUm9sZS5nb2Rtb3RoZXIsIENoYXJhY3RlclR5cGUuZHddLFxuICAgICAgICAvLyAgICAgW1JvbGUucHJpbmNlLCBDaGFyYWN0ZXJUeXBlLmFydGh1cl0sXG4gICAgICAgIC8vIF0pXG4gICAgICAgIHRoaXMuc3RhcnRTdG9yeShyZXN1bHRNYXApO1xuICAgIH1cbn1cbiIsImltcG9ydCBTdG9yeU1lZGlhdG9yIGZyb20gXCIuLi9jb21tb24vU3RvcnlNZWRpYXRvclwiO1xuaW1wb3J0IFN0YWdlTWVkaWF0b3IgZnJvbSBcIi4uL2NvbW1vbi9TdGFnZU1lZGlhdG9yXCI7XG5pbXBvcnQgQ2luZGVyZWxsYVN0b3J5TWVkaWF0b3IgZnJvbSBcIi4vQ2luZGVyZWxsYVN0b3J5TWVkaWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2luZGVyZWxsYVN0YWdlTWVkaWF0b3IgZXh0ZW5kcyBTdGFnZU1lZGlhdG9yIHtcblxuICAgIHByb3RlY3RlZCBnZXRTdG9yeU1lZGlhdG9yKCk6IFN0b3J5TWVkaWF0b3Ige1xuICAgICAgICByZXR1cm4gbmV3IENpbmRlcmVsbGFTdG9yeU1lZGlhdG9yKHRoaXMudmlldywgdGhpcy5kaVNlcnZpY2UsIHRoaXMpO1xuICAgIH1cblxufVxuXG4iLCJpbXBvcnQgTmF2aWdhdGlvblNlcnZpY2UgZnJvbSBcIi4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL05hdmlnYXRpb25TZXJ2aWNlXCI7XG5pbXBvcnQgeyBTY2VuZU5hbWUgfSBmcm9tIFwiLi4vU2NlbmVOYW1lXCI7XG5pbXBvcnQgU3BsYXNoTWVkaWF0b3IgZnJvbSBcIi4uL3NwbGFzaC9TcGxhc2hNZWRpYXRvclwiO1xuaW1wb3J0IExSUkhTdGFnZU1lZGlhdG9yIGZyb20gXCIuLi9zdGFnZS9scnJoL0xSUkhTdGFnZU1lZGlhdG9yXCI7XG5pbXBvcnQgR29sZGlsb2Nrc1N0YWdlTWVkaWF0b3IgZnJvbSBcIi4uL3N0YWdlL2dvbGRpbG9ja3MvR29sZGlsb2Nrc1N0YWdlTWVkaWF0b3JcIjtcbmltcG9ydCBDaW5kZXJlbGxhU3RhZ2VNZWRpYXRvciBmcm9tIFwiLi4vc3RhZ2UvY2luZGVyZWxsYS9DaW5kZXJlbGxhU3RhZ2VNZWRpYXRvclwiO1xuXG5leHBvcnQgY2xhc3MgTmF2aWdhdGlvblNlcnZpY2VNYXBwaW5nIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZSl7fVxuXG4gICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5hZGRTY2VuZVRvTWFwKFNjZW5lTmFtZS5McnJoU3RhZ2UsIExSUkhTdGFnZU1lZGlhdG9yKTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5hZGRTY2VuZVRvTWFwKFNjZW5lTmFtZS5Hb2xkaWxvY2tzLCBHb2xkaWxvY2tzU3RhZ2VNZWRpYXRvcik7XG4gICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UuYWRkU2NlbmVUb01hcChTY2VuZU5hbWUuQ2luZGVyZWxsYSwgQ2luZGVyZWxsYVN0YWdlTWVkaWF0b3IpO1xuICAgICAgICB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmFkZFNjZW5lVG9NYXAoU2NlbmVOYW1lLlNwbGFzaCwgU3BsYXNoTWVkaWF0b3IpO1xuICAgIH1cbn0iLCJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlYnVnU2VydmljZSBleHRlbmRzIGZyYW1ld29yay5TY3JpcHR7XG5cbiAgICBwcml2YXRlIGZyYW1lQ291bnQ6IG51bWJlciA9IDBcbiAgICBwcml2YXRlIGZyYW1lcmF0ZVRpbWVyOiBudW1iZXIgPSAwXG4gICAgcHJpdmF0ZSBmcHNMYWJlbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcHNMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMuZnBzTGFiZWwuaWQgPSBcImZyYW1lcmF0ZVwiO1xuICAgICAgICBjb25zdCBzdGFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhZ2VcIik7XG5cbiAgICAgICAgc3RhZ2UucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5mcHNMYWJlbCwgc3RhZ2UpO1xuXG4gICAgICAgIHRoaXMuZnBzTGFiZWwuaW5uZXJIVE1MID0gXCJGUFM6IDAwLjAwMFwiO1xuXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF91cGRhdGVJbXBsKGZyYW1lVGltZTogbnVtYmVyKTogdm9pZHtcbiAgICAgICAgdGhpcy5mcmFtZUNvdW50Kys7XG4gICAgICAgIHRoaXMuZnJhbWVyYXRlVGltZXIgKz0gZnJhbWVUaW1lO1xuXG4gICAgICAgIC8vIE9ubHkgdXBkYXRlIHRoZSBmcmFtZXJhdGUgZXZlcnkgc2Vjb25kXG4gICAgICAgIGlmICh0aGlzLmZyYW1lcmF0ZVRpbWVyID49IDEpIHtcblxuICAgICAgICAgICAgdmFyIGZwcyA9IDEgLyB0aGlzLmZyYW1lcmF0ZVRpbWVyICogdGhpcy5mcmFtZUNvdW50OyAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5mcHNMYWJlbC5pbm5lckhUTUwgPSBcIkZQUzogXCIgKyBmcHMudG9GaXhlZCgzKTtcbiAgICAgICAgICAgIHRoaXMuZnJhbWVyYXRlVGltZXIgPSAwO1xuICAgICAgICAgICAgdGhpcy5mcmFtZUNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJleHBvcnQgY2xhc3MgQ2FwdGlvblNlcnZpY2Uge1xuICBcbiAgICBwcml2YXRlIGNhcHRpb25zRWxlbWVudDogSFRNTEVsZW1lbnQgPSBudWxsXG4gICAgcHJpdmF0ZSBjYXB0aW9uVGV4dDogc3RyaW5nID0gXCJcIjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3JBcHA6IFNwcmluZ1JvbGwuQXBwbGljYXRpb24pe1xuICAgICAgICB0aGlzLmNhcHRpb25zRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FwdGlvbnNcIik7XG4gICAgICAgIHRoaXMuaW5pdCgpOyAgICAgXG4gICAgfVxuICAgIFxuICAgIGluaXQoKXtcbiAgICAgICAgY29uc3QgbXV0ZWRTdGF0ZVZhbHVlID0gdGhpcy5zckFwcC5zdGF0ZS5jYXB0aW9uc011dGVkLnZhbHVlIHx8IGZhbHNlO1xuICAgICAgICBjb25zb2xlLmxvZyhcIm11dGVkIHZhbHVlXCIsIG11dGVkU3RhdGVWYWx1ZSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZU11dGVkU3RhdGUobXV0ZWRTdGF0ZVZhbHVlKTtcbiAgICAgICAgdGhpcy5zckFwcC5zdGF0ZS5jYXB0aW9uc011dGVkLnN1YnNjcmliZSgoaXNNdXRlZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNdXRlZFN0YXRlKGlzTXV0ZWQpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVNdXRlZFN0YXRlKGlzTXV0ZWQ6IGJvb2xlYW4pe1xuICAgICAgICB0aGlzLmNhcHRpb25zRWxlbWVudC5oaWRkZW4gPSBpc011dGVkO1xuICAgIH1cblxuICAgIGRpc3BsYXlDYXB0aW9uKHRleHQ/OiBzdHJpbmcpe1xuICAgICAgICBpZiAoIHRleHQgKXtcbiAgICAgICAgICAgIHRoaXMuY2FwdGlvblRleHQgPSB0ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FwdGlvbnNFbGVtZW50LmlubmVySFRNTCA9IHRoaXMuY2FwdGlvblRleHQ7ICAgXG4gICAgfVxuXG4gICAgY2xlYXJDYXB0aW9ucygpe1xuICAgICAgICB0aGlzLmNhcHRpb25UZXh0ID0gXCJcIjtcbiAgICAgICAgdGhpcy5jYXB0aW9uc0VsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5jYXB0aW9uVGV4dDtcbiAgICB9XG59IiwiaW1wb3J0IERJU2VydmljZSBmcm9tIFwiLi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvRElTZXJ2aWNlXCI7XG5pbXBvcnQgKiBhcyBTcHJpbmdyb2xsIGZyb20gXCJzcHJpbmdyb2xsXCI7XG5pbXBvcnQgQXJ0aHVyQnVpbGRJbmZvU2VydmljZSBmcm9tIFwiLi9BcnRodXJCdWlsZEluZm9TZXJ2aWNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlTmFtZSwgRGF0YU5hbWUgfSBmcm9tIFwiLi9TZXJ2aWNlTmFtZVwiO1xuaW1wb3J0IHsgQ2hhcmFjdGVyVHlwZSB9IGZyb20gXCIuLi9jaGFyYWN0ZXJzL0Jhc2VDaGFyYWN0ZXJcIjtcbmltcG9ydCB7IFJvbGUgfSBmcm9tIFwiLi4vY2hhcmFjdGVycy9Sb2xlXCI7XG5pbXBvcnQgeyBHb29nbGVBbmFseXRpY3MgfSBmcm9tICdzcHJpbmdyb2xsLWdvb2dsZS1hbmFseXRpY3MtcGx1Z2luJztcblxuXG5leHBvcnQgY2xhc3MgQW5hbHl0aWNzU2VydmljZSB7XG5cbiAgICBwcml2YXRlIGltcGxlbWVudGF0aW9uOiBHb29nbGVBbmFseXRpY3M7XG5cbiAgICBwcml2YXRlIGdldCBidWlsZEluZm9TZXJ2aWNlKCk6IEFydGh1ckJ1aWxkSW5mb1NlcnZpY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0KFNlcnZpY2VOYW1lLkJ1aWxkSW5mb1NlcnZpY2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGlzUmVwbGF5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kaVNlcnZpY2UuZ2V0RGF0YUJ5S2V5KERhdGFOYW1lLmlzUmVwbGF5KTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcDogU3ByaW5ncm9sbC5BcHBsaWNhdGlvbiwgcHJpdmF0ZSBkaVNlcnZpY2U6IERJU2VydmljZSl7fVxuICAgIFxuICAgIHB1YmxpYyBpbml0KCk6IHZvaWQgIHtcbiAgICAgICAgdGhpcy5pbXBsZW1lbnRhdGlvbiA9IHRoaXMuYXBwLmdldFBsdWdpbignR29vZ2xlQW5hbHl0aWNzJykgYXMgR29vZ2xlQW5hbHl0aWNzO1xuICAgICAgICB0aGlzLnNlbmQoQW5hbHl0aWNBY3Rpb25zLnN0YXJ0R2FtZSk7XG4gICAgICAgIHdpbmRvdy5vbmJlZm9yZXVubG9hZCA9ICAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNlbmQoIEFuYWx5dGljQWN0aW9ucy5lbmRHYW1lKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VuZEV2ZW50Q2hhcmFjdGVyU2VsZWN0KGNoYXJhY3RlclR5cGU6IENoYXJhY3RlclR5cGUsIHJvbGU6IFJvbGUsKXtcbiAgICAgICAgdGhpcy5zZW5kKEFuYWx5dGljQWN0aW9ucy5jaGFyYWN0ZXJSb2xlcywgY2hhcmFjdGVyVHlwZSArIFwiL1wiICsgcm9sZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNlbmRFdmVudE5hcnJhdGl2ZUludGVyYWN0aW9uKGNob2ljZUlEOiBzdHJpbmcsICl7XG4gICAgICAgIHRoaXMuc2VuZChBbmFseXRpY0FjdGlvbnMubmFycmF0aXZlSW50ZXJhY3Rpb24sIGNob2ljZUlEKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VuZEV2ZW50RHluYW1pY0ludGVyYWN0aW9uKHByb3BOYW1lOiBzdHJpbmcsIHR5cGU/OiBzdHJpbmcpe1xuICAgICAgICBsZXQgbGFiZWwgPSBwcm9wTmFtZSArICh0eXBlKSA/IFwiL1wiICsgdHlwZSA6IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLmlzUmVwbGF5KXtcbiAgICAgICAgICAgIGxhYmVsID0gXCJyZXBsYXkvXCIgKyBsYWJlbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbmQoQW5hbHl0aWNBY3Rpb25zLmR5bmFtaWNJbnRlcmFjdGlvbiwgbGFiZWwpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZW5kRXZlbnRFbmRNZW51Q2hvaWNlKGNob2ljZTogc3RyaW5nKXtcbiAgICAgICAgdGhpcy5zZW5kKEFuYWx5dGljQWN0aW9ucy5lbmRNZW51Q2hvaWNlLCBjaG9pY2UpO1xuICAgIH1cbiAgICBwdWJsaWMgc2VuZEV2ZW50UGF1c2VNZW51Q2hvaWNlKGNob2ljZTogc3RyaW5nKXtcbiAgICAgICAgdGhpcy5zZW5kKEFuYWx5dGljQWN0aW9ucy5wYXVzZU1lbnVDaG9pY2UsIGNob2ljZSk7XG4gICAgfVxuICAgIHB1YmxpYyBzZW5kRXZlbnRTdG9yeVBhdXNlKCl7XG4gICAgICAgIHRoaXMuc2VuZChBbmFseXRpY0FjdGlvbnMuc3RvcnlQYXVzZSk7XG4gICAgfVxuICAgIHB1YmxpYyBzZW5kRXZlbnRTdGFydFN0b3J5QWN0KGFjdDogbnVtYmVyKXtcbiAgICAgICAgdGhpcy5zZW5kKEFuYWx5dGljQWN0aW9ucy5zdGFydFN0b3J5QWN0LCBhY3QudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZW5kIChhY3Rpb246IHN0cmluZywgbGFiZWw/OiBzdHJpbmcsIHZhbHVlPzogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFuYWx5dGljczo6c2VuZDo6XCIsIGFjdGlvbiwgbGFiZWwpO1xuICAgICAgICAgICAgdGhpcy5pbXBsZW1lbnRhdGlvbi5ldmVudCh0aGlzLmJ1aWxkSW5mb1NlcnZpY2UuYXBwTmFtZSwgYWN0aW9uLCBsYWJlbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgXCJBbmFseXRpY3Mgc2VydmljZSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuXCI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmVudW0gQW5hbHl0aWNBY3Rpb25ze1xuICAgIHN0YXJ0R2FtZSA9IFwic3RhcnRHYW1lXCIsXG4gICAgZW5kR2FtZSA9IFwiZW5kR2FtZVwiLFxuICAgIGNoYXJhY3RlclJvbGVzID0gXCJjaGFyYWN0ZXJfcm9sZXNcIixcbiAgICBuYXJyYXRpdmVJbnRlcmFjdGlvbiA9IFwibmFycmF0aXZlX2ludGVyYWN0aW9uXCIsXG4gICAgZHluYW1pY0ludGVyYWN0aW9uID0gXCJkeW5hbWljX2ludGVyYWN0aW9uXCIsXG4gICAgZW5kTWVudUNob2ljZSA9IFwiZW5kX21lbnVfY2hvaWNlXCIsXG4gICAgcGF1c2VNZW51Q2hvaWNlID0gXCJwYXVzZV9tZW51X2Nob2ljZVwiLFxuICAgIHN0b3J5UGF1c2UgPSBcInN0b3J5X3BhdXNlXCIsXG4gICAgc3RhcnRTdG9yeUFjdCA9IFwic3RhcnRfc3RvcnlfYWN0XCIsXG59IiwiaW1wb3J0IEJ1aWxkSW5mb1NlcnZpY2UgZnJvbSBcIi4uLy4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0J1aWxkSW5mb1NlcnZpY2VcIjtcbmltcG9ydCB7IFN0b3JpZXMgfSBmcm9tIFwiLi4vc3BsYXNoL1NwbGFzaE1lZGlhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFydGh1ckJ1aWxkSW5mb1NlcnZpY2UgZXh0ZW5kcyBCdWlsZEluZm9TZXJ2aWNle1xuXG4gICAgcHVibGljIGdldCBzdG9yeUZsYXZvcigpIDogU3RvcmllcyB7XG4gICAgICAgIGNvbnN0IGZsYXZvciA9IHRoaXMuYnVpbGRJbmZvW1wiZmxhdm9yXCJdO1xuICAgICAgICBzd2l0Y2ggKGZsYXZvcikge1xuICAgICAgICAgICAgY2FzZSBcImxycmhcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3Rvcmllcy5scnJoO1xuICAgICAgICAgICAgY2FzZSBcImdvbGRpbG9ja3NcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3Rvcmllcy5nb2xkaWxvY2tzO1xuICAgICAgICAgICAgY2FzZSBcImNpbmRlcmVsbGFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3Rvcmllcy5jaW5kZXJlbGxhO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgZ2V0IHN0b3J5UHJlZml4KCkgOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBmbGF2b3IgPSB0aGlzLmJ1aWxkSW5mb1tcImZsYXZvclwiXTtcbiAgICAgICAgc3dpdGNoIChmbGF2b3IpIHtcbiAgICAgICAgICAgIGNhc2UgXCJscnJoXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibHJyaFwiO1xuICAgICAgICAgICAgY2FzZSBcImdvbGRpbG9ja3NcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJnbFwiO1xuICAgICAgICAgICAgY2FzZSBcImNpbmRlcmVsbGFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjaW5kZXJcIjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGFwcE5hbWUoKSA6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGZsYXZvciA9IHRoaXMuYnVpbGRJbmZvW1wiZmxhdm9yXCJdO1xuICAgICAgICBzd2l0Y2ggKGZsYXZvcikge1xuICAgICAgICAgICAgY2FzZSBcImxycmhcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJsaXR0bGUtcmVkLXJpZGluZy1ob29kXCI7XG4gICAgICAgICAgICBjYXNlIFwiZ29sZGlsb2Nrc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImdvbGRpbG9ja3NcIjtcbiAgICAgICAgICAgIGNhc2UgXCJjaW5kZXJlbGxhXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY2luZGVyZWxsYVwiO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBCdWlsZEluZm9TZXJ2aWNlIHtcblxuICAgIHByb3RlY3RlZCBidWlsZEluZm86IGFueSA9IHtcbiAgICAgICAgZW52OiBcImRlYnVnXCIsXG4gICAgICAgIHZlcnNpb246IFwiXCIsXG4gICAgICAgIGFlc3RUaW1lOiBcIlwiLFxuICAgICAgICBueVRpbWU6IFwiXCIsXG4gICAgICAgIHNob3J0UmV2OiBcIlwiLFxuICAgIH07XG4gICAgcHVibGljIGdldCBlbnZpcm9ubWVudCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZEluZm9bXCJlbnZcIl07XG4gICAgfTtcbiAgICBwcml2YXRlIHZlcnNpb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRJbmZvW1widmVyc2lvblwiXTtcbiAgICB9O1xuICAgIHByaXZhdGUgYWVzdFRpbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRJbmZvW1wiYWVzdFRpbWVcIl07XG4gICAgfTtcbiAgICBwcml2YXRlIG55VGltZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZEluZm9bXCJueVRpbWVcIl07XG4gICAgfTtcbiAgICBwcml2YXRlIHNob3J0UmV2KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkSW5mb1tcInNob3J0UmV2XCJdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBnZXQgaXNEZWJ1Z1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaXNEZWJ1ZygpIDogYm9vbGVhbntcbiAgICAgICAgcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQgPT09ICdkZXYnO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGJ1aWxkQ29uZmlnOiBhbnkpIHtcbiAgICAgICAgdGhpcy5idWlsZEluZm8gPSBPYmplY3QuZXh0ZW5kKHRoaXMuYnVpbGRJbmZvLCBidWlsZENvbmZpZyk7XG4gICAgICAgIHRoaXMucHJpbnRUb0NvbnNvbGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByaW50VG9Db25zb2xlKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIioqKlwiKTtcbiAgICAgICAgdGhpcy5idWlsZEluZm8uZm9ySW4oKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJpbnREZWJ1Z0tleVZhbHVlKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coXCIqKipcIik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcmludERlYnVnS2V5VmFsdWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4ga2V5ICsgXCI9XCIgKyB2YWx1ZTtcbiAgICB9XG59IiwiaW1wb3J0IElBcHAgZnJvbSBcIi4vLi4vZnJhbWV3b3JrL3RzL2NvcmUvSUFwcFwiO1xuaW1wb3J0ICogYXMgU3ByaW5ncm9sbCBmcm9tIFwic3ByaW5ncm9sbFwiO1xuaW1wb3J0ICogYXMgUElYSSBmcm9tIFwicGl4aS5qc1wiO1xuaW1wb3J0ICogYXMgVFdFRU4gZnJvbSBcIkB0d2VlbmpzL3R3ZWVuLmpzL2Rpc3QvdHdlZW4uY2pzLmpzXCI7XG5pbXBvcnQgU2l6ZU1hbmFnZXIsIHsgU2l6ZU1hbmFnZXJDb25maWcgfSBmcm9tIFwiLi4vZnJhbWV3b3JrL3RzL2NvcmUvU2l6ZU1hbmFnZXJcIjtcbmltcG9ydCBTb3VuZFNlcnZpY2UsIHsgU291bmRDaGFubmVsIH0gZnJvbSBcIi4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL1NvdW5kU2VydmljZVwiO1xuaW1wb3J0IEJ1aWxkSW5mb1NlcnZpY2UgZnJvbSBcIi4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0J1aWxkSW5mb1NlcnZpY2VcIjtcbmltcG9ydCBSb290TWVkaWF0b3IgZnJvbSBcIi4uL2ZyYW1ld29yay90cy9jb3JlL21lZGlhdG9ycy9Sb290TWVkaWF0b3JcIjtcbmltcG9ydCBOYXZpZ2F0aW9uU2VydmljZSBmcm9tIFwiLi4vZnJhbWV3b3JrL3RzL2NvcmUvc2VydmljZXMvTmF2aWdhdGlvblNlcnZpY2VcIjtcbmltcG9ydCBESVNlcnZpY2UgZnJvbSBcIi4uL2ZyYW1ld29yay90cy9jb3JlL3NlcnZpY2VzL0RJU2VydmljZVwiO1xuaW1wb3J0IExvYWRpbmdTZXJ2aWNlIGZyb20gXCIuLi9mcmFtZXdvcmsvdHMvY29yZS9zZXJ2aWNlcy9Mb2FkaW5nU2VydmljZVwiO1xuaW1wb3J0IHsgU2VydmljZU5hbWUsIERhdGFOYW1lIH0gZnJvbSBcIi4vU2VydmljZXMvU2VydmljZU5hbWVcIjtcbmltcG9ydCB7IFNjZW5lTmFtZSB9IGZyb20gXCIuL1NjZW5lTmFtZVwiO1xuaW1wb3J0IHsgTmF2aWdhdGlvblNlcnZpY2VNYXBwaW5nIH0gZnJvbSBcIi4vU2VydmljZXMvTmF2aWdhdGlvblNlcnZpY2VNYXBwaW5nXCI7XG5pbXBvcnQgU0ZYQWN0aW9uIGZyb20gXCIuL3V0aWxzL1NGWEFjdGlvblwiO1xuaW1wb3J0IENhbWVyYVNlcnZpY2UgZnJvbSBcIi4vU2VydmljZXMvQ2FtZXJhU2VydmljZVwiO1xuaW1wb3J0IERlYnVnU2VydmljZSBmcm9tIFwiLi9TZXJ2aWNlcy9EZWJ1Z1NlcnZpY2VcIjtcbmltcG9ydCB7IENhcHRpb25TZXJ2aWNlIH0gZnJvbSBcIi4vU2VydmljZXMvQ2FwdGlvblNlcnZpY2VcIjtcbmltcG9ydCBBcnRodXJCdWlsZEluZm9TZXJ2aWNlIGZyb20gXCIuL1NlcnZpY2VzL0FydGh1ckJ1aWxkSW5mb1NlcnZpY2VcIjtcbmltcG9ydCB7IEFuYWx5dGljc1NlcnZpY2UgfSBmcm9tIFwiLi9TZXJ2aWNlcy9BbmFseXRpY3NTZXJ2aWNlXCI7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbiB9IGZyb20gXCJzcHJpbmdyb2xsXCI7XG5pbXBvcnQgeyBHb29nbGVBbmFseXRpY3MgfSBmcm9tIFwic3ByaW5ncm9sbC1nb29nbGUtYW5hbHl0aWNzLXBsdWdpblwiO1xuaW1wb3J0ICogYXMgJCBmcm9tICdqcXVlcnknO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUgaW1wbGVtZW50cyBJQXBwIHtcbiAgICBwdWJsaWMgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICBwcml2YXRlIHNwcmluZ3JvbGxBcHA6IFNwcmluZ3JvbGwuQXBwbGljYXRpb247XG4gICAgcHJpdmF0ZSBwaXhpQXBwOiBQSVhJLkFwcGxpY2F0aW9uO1xuICAgIHByaXZhdGUgc2l6ZU1hbmFnZXI6IFNpemVNYW5hZ2VyO1xuICAgIHByaXZhdGUgdmlld0ZhY3Rvcnk6IGZyYW1ld29yay5WaWV3RmFjdG9yeTtcblxuICAgIHByaXZhdGUgcm9vdE1lZGlhdG9yOiBSb290TWVkaWF0b3I7XG5cbiAgICBwcml2YXRlIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIG5hdmlnYXRpb25TZXJ2aWNlTWFwcGluZzogTmF2aWdhdGlvblNlcnZpY2VNYXBwaW5nO1xuICAgIHByaXZhdGUgc291bmRTZXJ2aWNlOiBTb3VuZFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkaVNlcnZpY2U6IERJU2VydmljZTtcbiAgICBwcml2YXRlIGxvYWRpbmdTZXJ2aWNlOiBMb2FkaW5nU2VydmljZTtcblxuICAgIHByaXZhdGUgZ2FtZUxvYWRlciA9IG5ldyBQSVhJLkxvYWRlcigpO1xuXG4gICAgcHJpdmF0ZSB3aWR0aCA9IDE1NTU7XG4gICAgcHJpdmF0ZSBoZWlnaHQgPSA4MDA7XG4gICAgcHJpdmF0ZSBzYWZlV2lkdGggPSAxMDI0O1xuICAgIHByaXZhdGUgc2FmZUhlaWdodCA9IDc2ODtcbiAgICBwcml2YXRlIGNhbWVyYVNlcnZpY2U6IENhbWVyYVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkZWJ1Z1NlcnZpY2U6IERlYnVnU2VydmljZTtcbiAgICBwcml2YXRlIGJ1aWxkSW5mb1NlcnZpY2U6IEJ1aWxkSW5mb1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBjYXB0aW9uU2VydmljZTogQ2FwdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBhbmFseXRpY3NTZXJ2aWNlOiBBbmFseXRpY3NTZXJ2aWNlO1xuXG4gICAgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSB0aGlzLmZpbmRDYW52YXMoKTtcbiAgICAgICAgdGhpcy5zcHJpbmdyb2xsQXBwID0gdGhpcy5jcmVhdGVTcHJpbmdyb2xsQXBwKCk7XG4gICAgICAgIEFwcGxpY2F0aW9uLnVzZXMobmV3IEdvb2dsZUFuYWx5dGljcygpKTtcbiAgICAgICAgdGhpcy5waXhpQXBwID0gdGhpcy5jcmVhdGVQaXhpQXBwKHRoaXMuY2FudmFzKTtcbiAgICAgICAgdGhpcy5zaXplTWFuYWdlciA9IHRoaXMuY3JlYXRlU2l6ZU1hbmFnZXIoXG4gICAgICAgICAgICB0aGlzLnBpeGlBcHAsXG4gICAgICAgICAgICB0aGlzLm9uUmVzaXplXG4gICAgICAgICk7XG5cbiAgICAgICAgZnJhbWV3b3JrLkFjdGlvbnMucmVnaXN0ZXIoXCJTRlhcIiwgKHNvdW5kTmFtZTogc3RyaW5nLCBzb3VuZENoYW5uZWw6IFNvdW5kQ2hhbm5lbCwgbG9vcDogYm9vbGVhbiwgZGlTZXJ2aWNlOiBESVNlcnZpY2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU0ZYQWN0aW9uKHNvdW5kTmFtZSwgc291bmRDaGFubmVsLCBsb29wLCBkaVNlcnZpY2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZpZXdGYWN0b3J5ID0gdGhpcy5jcmVhdGVWaWV3RmFjdG9yeSgpO1xuICAgICAgICB0aGlzLmNyZWF0ZVJvb3RNZWRpYXRvcigpO1xuICAgICAgICB0aGlzLmluaXREZXBlbmRlbmN5KCk7XG4gICAgICAgIHRoaXMucGl4aUFwcC5zdGFnZS5hZGRDaGlsZCh0aGlzLnJvb3RNZWRpYXRvci52aWV3KTtcbiAgICAgICAgdGhpcy5pbml0QXBwQ2FsbGJhY2tzKCk7XG4gICAgICAgIHRoaXMuYWRkVmlzaWJpbGl0eUNoYW5nZUxpc3RlbmVyKCk7XG5cbiAgICAgICAgdGhpcy5pbml0aWFsaXNlR2FtZVZvbHVtZSgpO1xuICAgICAgICB0aGlzLnByZWxvYWQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93Rmlyc3RTY2VuZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFZpc2liaWxpdHlDaGFuZ2VMaXN0ZW5lcigpIHtcbiAgICAgICAgJCh3aW5kb3cpLmZvY3VzKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3ByaW5ncm9sbEFwcC5zdGF0ZS5wYXVzZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgICB9KS5ibHVyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3ByaW5ncm9sbEFwcC5zdGF0ZS5wYXVzZS52YWx1ZSA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc3ByaW5ncm9sbEFwcC5zdGF0ZS5wYXVzZS5zdWJzY3JpYmUoIChpc1BhdXNlZCwgd2FzUGF1c2VkKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNQYXVzZWQgJiYgIXdhc1BhdXNlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGF1c2VHYW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaXNQYXVzZWQgJiYgd2FzUGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWVHYW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdERlcGVuZGVuY3koKSB7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlID0gbmV3IERJU2VydmljZSgpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5nYW1lLCB0aGlzKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuZ2FtZVdpZHRoLCB0aGlzLndpZHRoKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2Uuc2V0RGF0YVdpdGhLZXkoRGF0YU5hbWUuZ2FtZUhlaWdodCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5nYW1lU2FmZVdpZHRoLCB0aGlzLnNhZmVXaWR0aCk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnNldERhdGFXaXRoS2V5KERhdGFOYW1lLmdhbWVTYWZlSGVpZ2h0LCB0aGlzLnNhZmVIZWlnaHQpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5zZXREYXRhV2l0aEtleShEYXRhTmFtZS5hcHAsIHRoaXMucGl4aUFwcCk7XG5cbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZSA9IG5ldyBMb2FkaW5nU2VydmljZSh0aGlzLmdhbWVMb2FkZXIpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5yZWdpc3RlcihTZXJ2aWNlTmFtZS5Mb2FkaW5nU2VydmljZSwgdGhpcy5sb2FkaW5nU2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2UgPSBuZXcgU291bmRTZXJ2aWNlKHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2UucmVnaXN0ZXIoU2VydmljZU5hbWUuU291bmRTZXJ2aWNlLCB0aGlzLnNvdW5kU2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZSA9IG5ldyBOYXZpZ2F0aW9uU2VydmljZSh0aGlzLnJvb3RNZWRpYXRvciwgdGhpcy5kaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5yZWdpc3RlcihTZXJ2aWNlTmFtZS5OYXZpZ2F0aW9uU2VydmljZSwgdGhpcy5uYXZpZ2F0aW9uU2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5jYW1lcmFTZXJ2aWNlID0gbmV3IENhbWVyYVNlcnZpY2UodGhpcy5waXhpQXBwLCB0aGlzLnJvb3RNZWRpYXRvci52aWV3LCB0aGlzLmRpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZGlTZXJ2aWNlLnJlZ2lzdGVyKFNlcnZpY2VOYW1lLkNhbWVyYVNlcnZpY2UsIHRoaXMuY2FtZXJhU2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5jYXB0aW9uU2VydmljZSA9IG5ldyBDYXB0aW9uU2VydmljZSh0aGlzLnNwcmluZ3JvbGxBcHApO1xuICAgICAgICB0aGlzLmRpU2VydmljZS5yZWdpc3RlcihTZXJ2aWNlTmFtZS5DYXB0aW9uU2VydmljZSwgdGhpcy5jYXB0aW9uU2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZU1hcHBpbmcgPSBuZXcgTmF2aWdhdGlvblNlcnZpY2VNYXBwaW5nKHRoaXMubmF2aWdhdGlvblNlcnZpY2UpO1xuICAgICAgICB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlTWFwcGluZy5pbml0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcmVsb2FkKGNvbXBsZXRpb246ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYXNzZXRzID0ge1xuICAgICAgICAgICAgYnVpbGRJbmZvOiBcIi4vYXNzZXRzL3Rvb2xzL2J1aWxkSW5mby5qc29uXCIsXG4gICAgICAgIH07XG5cbiAgICAgICAgYXNzZXRzLmZvckluKChwYXRoLCBpZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5nYW1lTG9hZGVyLmFkZChpZCwgcGF0aCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZ2FtZUxvYWRlci5sb2FkKChfbG9hZGVyLCByZXNvdXJjZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkSW5mbyA9IHJlc291cmNlc1snYnVpbGRJbmZvJ10uZGF0YTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRJbmZvU2VydmljZSA9IG5ldyBBcnRodXJCdWlsZEluZm9TZXJ2aWNlKGJ1aWxkSW5mbyk7XG4gICAgICAgICAgICBpZiAodGhpcy5idWlsZEluZm9TZXJ2aWNlLmlzRGVidWcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnQWRkTmF2aWdhdGlvblRvV2luZG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRpU2VydmljZS5yZWdpc3RlcihTZXJ2aWNlTmFtZS5CdWlsZEluZm9TZXJ2aWNlLCB0aGlzLmJ1aWxkSW5mb1NlcnZpY2UpO1xuXG4gICAgICAgICAgICB0aGlzLmluaXRBbmFseXRpY3MoKTtcbiAgICAgICAgICAgIGNvbXBsZXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0QW5hbHl0aWNzKCkge1xuICAgICAgICB0aGlzLmFuYWx5dGljc1NlcnZpY2UgPSBuZXcgQW5hbHl0aWNzU2VydmljZSh0aGlzLnNwcmluZ3JvbGxBcHAsIHRoaXMuZGlTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5hbmFseXRpY3NTZXJ2aWNlLmluaXQoKTtcbiAgICAgICAgdGhpcy5kaVNlcnZpY2UucmVnaXN0ZXIoU2VydmljZU5hbWUuQW5hbHl0aWNzU2VydmljZSwgdGhpcy5hbmFseXRpY3NTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVJvb3RNZWRpYXRvcigpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBmcmFtZXdvcmsuQ29udGFpbmVyVmlldygpO1xuICAgICAgICB0aGlzLnJvb3RNZWRpYXRvciA9IG5ldyBSb290TWVkaWF0b3Iodmlldyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93Rmlyc3RTY2VuZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5nb1RvU2NlbmVXaXRob3V0TG9hZFNjcmVlbihTY2VuZU5hbWUuU3BsYXNoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlYnVnQWRkTmF2aWdhdGlvblRvV2luZG93KCkge1xuICAgICAgICB3aW5kb3dbJ3NvdW5kcyddID0gdGhpcy5zb3VuZFNlcnZpY2U7XG5cbiAgICAgICAgdGhpcy5kZWJ1Z1NlcnZpY2UgPSBuZXcgRGVidWdTZXJ2aWNlKCk7XG4gICAgICAgIHRoaXMucm9vdE1lZGlhdG9yLnNjcmlwdHMuYWRkU2NyaXB0KHRoaXMuZGVidWdTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICAvL0xpZmVjeWNsZVxuICAgIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmJ1aWxkSW5mb1NlcnZpY2UuaXNEZWJ1Zyl7ICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnJvb3RNZWRpYXRvci5zY3JpcHRzLnJlbW92ZVNjcmlwdCh0aGlzLmRlYnVnU2VydmljZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWluaXRBcHBDYWxsYmFja3MoKTtcbiAgICAgICAgdGhpcy5kZXN0cm95Um9vdE1lZGlhdG9yKCk7XG4gICAgICAgIHRoaXMuZGVzdHJveVZpZXdGYWN0b3J5KCk7XG4gICAgICAgIHRoaXMuZGVzdHJveVNpemVNYW5hZ2VyKCk7XG4gICAgICAgIHRoaXMuZGVzdHJveVBpeGlBcHAoKTtcbiAgICAgICAgdGhpcy5kZXN0cm95U3ByaW5ncm9sbEFwcCgpO1xuICAgIH1cblxuICAgIC8vIElBcHAgaW1wbGVtZW50YXRpb24uXG4gICAgY3JlYXRlVmlldzxUIGV4dGVuZHMgUElYSS5EaXNwbGF5T2JqZWN0Pihjb25maWc6IGFueSk6IFQge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGUoY29uZmlnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVDaGlsZFZpZXdzKGNvbmZpZzogYW55LCBwYXJlbnQ/OiBQSVhJLkNvbnRhaW5lciwgc2tpcElnbm9yZXM/OiBib29sZWFuKTogUElYSS5EaXNwbGF5T2JqZWN0W10ge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3RmFjdG9yeS5jcmVhdGVDaGlsZHJlbihjb25maWcsIHBhcmVudCwgc2tpcElnbm9yZXMpO1xuICAgIH1cblxuICAgIGdldENhY2hlKGFzc2V0SUQ6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIC8vIFRPRE86IENvdmVycyBqdXN0IFBpeGkgdGV4dHVyZXMsIG5vdCBTcGluZXMgZXRjXG4gICAgICAgIHJldHVybiBQSVhJLnV0aWxzLlRleHR1cmVDYWNoZVthc3NldElEXTtcbiAgICB9XG5cbiAgICBnZXRDb25maWcoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHt9OyAgLy8gVE9ET1xuICAgIH1cblxuICAgIGlzRGVidWdNb2RlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7ICAvLyBUT0RPXG4gICAgfVxuXG4gICAgaXNXZWJHTCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnBpeGlBcHAucmVuZGVyZXIudHlwZSA9PSBQSVhJLlJFTkRFUkVSX1RZUEUuV0VCR0wpO1xuICAgIH1cblxuICAgIGdldFJlbmRlcmVyKCk6IFBJWEkuUmVuZGVyZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5waXhpQXBwLnJlbmRlcmVyO1xuICAgIH1cblxuICAgIGdldENhbnZhc1dpZHRoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy53aWR0aDtcbiAgICB9XG5cbiAgICBnZXRDYW52YXNIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLmhlaWdodDtcbiAgICB9XG5cbiAgICBwbGF5QW5pbWF0aW9uKHBpeGlPYmo6IFBJWEkuRGlzcGxheU9iamVjdCwgcGFyYW1zPzogYW55LCBjb21wbGV0ZUNhbGxiYWNrPzogYW55LCBjYW5jZWxsZWRDYWxsYmFjaz86IGFueSk6IHZvaWQge1xuICAgICAgICAvLyBUT0RPXG4gICAgfVxuXG4gICAgc3RvcEFuaW1hdGlvbihwaXhpT2JqOiBQSVhJLkRpc3BsYXlPYmplY3QsIHJlbW92ZUNhbGxiYWNrcz86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgLy8gVE9ET1xuICAgIH1cblxuICAgIHBsYXlTb3VuZChzb3VuZE5hbWU6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IHZvaWQge1xuICAgICAgICAvLyBUT0RPXG4gICAgfVxuXG4gICAgY2FuUGxheVZPKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpc1BsYXlpbmdWTyh2b05hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VuZFNlcnZpY2UuaXNQbGF5aW5nVm87XG4gICAgfVxuXG4gICAgcGxheVZPKHZvTmFtZTogc3RyaW5nLCBmaW5pc2hlZENhbGxiYWNrPzogKCkgPT4gdm9pZCwgY2FuY2VsbGVkQ2FsbGJhY2s/OiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnNvdW5kU2VydmljZS5wbGF5Vm8odm9OYW1lLCBmaW5pc2hlZENhbGxiYWNrKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIGZpbmlzaGVkQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0b3BWTygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2Uuc3RvcFZvKCk7XG4gICAgfVxuXG4gICAgb2ZmUGF1c2VkKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIC8vVE9ET1xuICAgIH1cblxuICAgIG9mZlJlc3VtZWQoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgLy9UT0RPXG4gICAgfVxuXG4gICAgb2ZmVXBkYXRlKGNhbGxiYWNrOiAoZWxhcHNlZDogbnVtYmVyKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIC8vVE9ET1xuICAgIH1cblxuICAgIG9uUGF1c2VkKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIC8vVE9ET1xuICAgIH1cblxuICAgIG9uUmVzdW1lZChjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICAvL1RPRE9cbiAgICB9XG5cbiAgICBvblVwZGF0ZShjYWxsYmFjazogKGVsYXBzZWQ6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICAvL1RPRE9cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZSA9IChkZWx0YVRpbWU6IG51bWJlcik6IHZvaWQgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc1BhdXNlZCl7cmV0dXJuO31cbiAgICAgICAgbGV0IGZyYW1lVGltZSA9IChQSVhJLlRpY2tlci5zaGFyZWQuZWxhcHNlZE1TICogMC4wMDEpO1xuXG4gICAgICAgIGlmICh0aGlzLl9zaG91bGRVcGRhdGUpe1xuICAgICAgICAgICAgVFdFRU4udXBkYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5yb290TWVkaWF0b3IpIHtcbiAgICAgICAgICAgIHRoaXMucm9vdE1lZGlhdG9yLnVwZGF0ZShmcmFtZVRpbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2hvdWxkVXBkYXRlOiBib29sZWFuID0gdHJ1ZTtcbiAgICBwdWJsaWMgZ2V0IHNob3VsZFVwZGF0ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nob3VsZFVwZGF0ZTtcbiAgICB9XG4gICAgcHVibGljIHNldCBzaG91bGRVcGRhdGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fc2hvdWxkVXBkYXRlID0gdmFsdWU7XG4gICAgfVxuIFxuXG4gICAgcHJpdmF0ZSBvblJlc2l6ZSA9ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQgPT4ge1xuICAgICAgICAvL0RPIE5PVEhJTkdcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQXBwUmVhZHlDaGFuZ2VkID0gKHZhbHVlOiBib29sZWFuLCBwcmV2aW91c1ZhbHVlOiBib29sZWFuKTogdm9pZCA9PiB7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgaXNQYXVzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIHBhdXNlR2FtZSA9ICgpID0+e1xuICAgICAgICBjb25zb2xlLmxvZyhcInBhdXNlZFwiKTtcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc291bmRTZXJ2aWNlLnBhdXNlQWxsKCk7XG4gICAgICAgIFBJWEkuc3BpbmUuU3BpbmUuZ2xvYmFsQXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBpeGlBcHAuc3RvcCgpO1xuXG4gICAgICAgIHRoaXMuc3ByaW5ncm9sbEFwcC5zdGF0ZS5wYXVzZS52YWx1ZSA9IHRydWU7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgcmVzdW1lR2FtZSA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ1bnBhdXNlZFwiKTtcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNvdW5kU2VydmljZS5yZXN1bWVBbGwoKTtcbiAgICAgICAgUElYSS5zcGluZS5TcGluZS5nbG9iYWxBdXRvVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5waXhpQXBwLnN0YXJ0KCk7XG5cbiAgICAgICAgdGhpcy5zcHJpbmdyb2xsQXBwLnN0YXRlLnBhdXNlLnZhbHVlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbk11c2ljVm9sdW1lQ2hhbmdlZCA9ICh2YWx1ZTogbnVtYmVyLCBwcmV2aW91c1ZhbHVlOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc291bmRTZXJ2aWNlLm11dGVNdXNpYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2UudW5tdXRlTXVzaWMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIG9uU0ZYVm9sdW1lQ2hhbmdlZCA9ICh2YWx1ZTogbnVtYmVyLCBwcmV2aW91c1ZhbHVlOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc291bmRTZXJ2aWNlLm11dGVTRlgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc291bmRTZXJ2aWNlLnVubXV0ZVNGWCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblZPVm9sdW1lQ2hhbmdlZCA9ICh2YWx1ZTogbnVtYmVyLCBwcmV2aW91c1ZhbHVlOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJvblZvVm9sdW1lQ2hhbmdlZFwiLCB2YWx1ZSwgcHJldmlvdXNWYWx1ZSk7XG4gICAgICAgIFxuICAgICAgICBpZiAodmFsdWUgPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zb3VuZFNlcnZpY2UubXV0ZVZPKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNvdW5kU2VydmljZS51bm11dGVWTygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0aWFsaXNlR2FtZVZvbHVtZSgpe1xuICAgICAgICBjb25zdCB2b1ZvbHVtZSA9IHRoaXMuc3ByaW5ncm9sbEFwcC5zdGF0ZS52b1ZvbHVtZS52YWx1ZTtcbiAgICAgICAgY29uc3Qgc2Z4Vm9sdW1lID0gdGhpcy5zcHJpbmdyb2xsQXBwLnN0YXRlLnNmeFZvbHVtZS52YWx1ZTtcbiAgICAgICAgY29uc3QgbXVzaWNWb2x1bWUgPSB0aGlzLnNwcmluZ3JvbGxBcHAuc3RhdGUubXVzaWNWb2x1bWUudmFsdWU7XG5cbiAgICAgICAgaWYgKHZvVm9sdW1lID49IDApe1xuICAgICAgICAgICAgdGhpcy5vblZPVm9sdW1lQ2hhbmdlZCh2b1ZvbHVtZSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNmeFZvbHVtZSA+PSAwKXtcbiAgICAgICAgICAgIHRoaXMub25TRlhWb2x1bWVDaGFuZ2VkKHNmeFZvbHVtZSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG11c2ljVm9sdW1lID49IDApe1xuICAgICAgICAgICAgdGhpcy5vbk11c2ljVm9sdW1lQ2hhbmdlZChtdXNpY1ZvbHVtZSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbmRDYW52YXMoKTogSFRNTENhbnZhc0VsZW1lbnQge1xuICAgICAgICByZXR1cm4gPEhUTUxDYW52YXNFbGVtZW50Pihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YWdlXCIpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVNwcmluZ3JvbGxBcHAoKTogU3ByaW5ncm9sbC5BcHBsaWNhdGlvbiB7XG4gICAgICAgIHJldHVybiBuZXcgU3ByaW5ncm9sbC5BcHBsaWNhdGlvbih7XG4gICAgICAgICAgICBmZWF0dXJlczoge1xuICAgICAgICAgICAgICAgIHNvdW5kOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzZng6IHRydWUsXG4gICAgICAgICAgICAgICAgdm86IHRydWUsXG4gICAgICAgICAgICAgICAgbXVzaWM6IHRydWUsXG4gICAgICAgICAgICAgICAgY2FwdGlvbnM6IHRydWUsXG4gICAgICAgICAgICAgICAgc291bmRWb2x1bWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG11c2ljVm9sdW1lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2b1ZvbHVtZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2Z4Vm9sdW1lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwb2ludGVyU2l6ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29udHJvbFNlbnNpdGl2aXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBidXR0b25TaXplOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZW1vdmFibGVMYXllcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGh1ZFBvc2l0aW9uOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlc3Ryb3lTcHJpbmdyb2xsQXBwKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zcHJpbmdyb2xsQXBwKSB7XG4gICAgICAgICAgICB0aGlzLnNwcmluZ3JvbGxBcHAgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVQaXhpQXBwKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpOiBQSVhJLkFwcGxpY2F0aW9uIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQSVhJLkFwcGxpY2F0aW9uKHtcbiAgICAgICAgICAgIHZpZXc6IGNhbnZhcyxcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZXN0cm95UGl4aUFwcCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMucGl4aUFwcCkge1xuICAgICAgICAgICAgdGhpcy5waXhpQXBwLmRlc3Ryb3koZmFsc2UsIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0dXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGJhc2VUZXh0dXJlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucGl4aUFwcCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVNpemVNYW5hZ2VyKHBpeGlBcHA6IFBJWEkuQXBwbGljYXRpb24sIHJlc2l6ZUNhbGxiYWNrOiAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHZvaWQpOiBTaXplTWFuYWdlciB7XG4gICAgICAgIGxldCBjb25maWc6IFNpemVNYW5hZ2VyQ29uZmlnID0ge1xuICAgICAgICAgICAgcGl4aUFwcDogcGl4aUFwcCxcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcbiAgICAgICAgICAgIHNhZmVXaWR0aDogdGhpcy5zYWZlV2lkdGgsXG4gICAgICAgICAgICBzYWZlSGVpZ2h0OiB0aGlzLnNhZmVIZWlnaHQsXG4gICAgICAgICAgICByZXNpemVDYWxsYmFjazogcmVzaXplQ2FsbGJhY2tcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV3IFNpemVNYW5hZ2VyKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZXN0cm95U2l6ZU1hbmFnZXIoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnNpemVNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnNpemVNYW5hZ2VyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZU1hbmFnZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVWaWV3RmFjdG9yeSgpOiBmcmFtZXdvcmsuVmlld0ZhY3Rvcnkge1xuICAgICAgICByZXR1cm4gbmV3IGZyYW1ld29yay5WaWV3RmFjdG9yeSh0aGlzLmdhbWVMb2FkZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVzdHJveVZpZXdGYWN0b3J5KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy52aWV3RmFjdG9yeSkge1xuICAgICAgICAgICAgdGhpcy52aWV3RmFjdG9yeSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRlc3Ryb3lSb290TWVkaWF0b3IoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnJvb3RNZWRpYXRvcikge1xuICAgICAgICAgICAgdGhpcy5yb290TWVkaWF0b3IuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5yb290TWVkaWF0b3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0QXBwQ2FsbGJhY2tzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNwcmluZ3JvbGxBcHAuc3RhdGUucmVhZHkuc3Vic2NyaWJlKHRoaXMub25BcHBSZWFkeUNoYW5nZWQpO1xuICAgICAgICB0aGlzLnNwcmluZ3JvbGxBcHAuc3RhdGUubXVzaWNWb2x1bWUuc3Vic2NyaWJlKHRoaXMub25NdXNpY1ZvbHVtZUNoYW5nZWQpO1xuICAgICAgICB0aGlzLnNwcmluZ3JvbGxBcHAuc3RhdGUuc2Z4Vm9sdW1lLnN1YnNjcmliZSh0aGlzLm9uU0ZYVm9sdW1lQ2hhbmdlZCk7XG4gICAgICAgIHRoaXMuc3ByaW5ncm9sbEFwcC5zdGF0ZS52b1ZvbHVtZS5zdWJzY3JpYmUodGhpcy5vblZPVm9sdW1lQ2hhbmdlZCk7XG5cbiAgICAgICAgdGhpcy5waXhpQXBwLnRpY2tlci5hZGQodGhpcy51cGRhdGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVpbml0QXBwQ2FsbGJhY2tzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNwcmluZ3JvbGxBcHAuc3RhdGUucmVhZHkudW5zdWJzY3JpYmUodGhpcy5vbkFwcFJlYWR5Q2hhbmdlZCk7XG4gICAgICAgIHRoaXMuc3ByaW5ncm9sbEFwcC5zdGF0ZS5tdXNpY1ZvbHVtZS51bnN1YnNjcmliZSh0aGlzLm9uTXVzaWNWb2x1bWVDaGFuZ2VkKTtcbiAgICAgICAgdGhpcy5zcHJpbmdyb2xsQXBwLnN0YXRlLnNmeFZvbHVtZS51bnN1YnNjcmliZSh0aGlzLm9uU0ZYVm9sdW1lQ2hhbmdlZCk7XG4gICAgICAgIHRoaXMuc3ByaW5ncm9sbEFwcC5zdGF0ZS52b1ZvbHVtZS51bnN1YnNjcmliZSh0aGlzLm9uVk9Wb2x1bWVDaGFuZ2VkKTtcblxuICAgICAgICB0aGlzLnBpeGlBcHAudGlja2VyLnJlbW92ZSh0aGlzLnVwZGF0ZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFwiY29yZS1qcy9zdGFibGVcIjtcbmltcG9ydCBcIi4vLi4vZnJhbWV3b3JrL2ltcG9ydHNcIjtcbmltcG9ydCBHYW1lIGZyb20gXCIuL0dhbWVcIjtcblxuaWYgKCF3aW5kb3cuYXBwKSB7XG4gICAgbGV0IGdhbWUgPSBuZXcgR2FtZSgpO1xuICAgIHdpbmRvdy5hcHAgPSBnYW1lO1xuXG4gICAgZ2FtZS5pbml0KCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9