function CollisionSystem(engine){this.engine=engine;this.dtVelocity=WONBATS.Vec2.create(0,0);this.prevPosition=WONBATS.Vec2.create(0,0);}
CollisionSystem.prototype.detectCollision=function(dt,collider,rigidBody,transform){WONBATS.Vec2.scale(rigidBody.velocity,dt*Math.max(Math.min(1,1-rigidBody.drag),0),this.dtVelocity);WONBATS.Vec2.subtract(transform.position,this.dtVelocity,this.prevPosition);var transformB,colliderB,i;collider.fixes[0]=collider.fixes[1]=collider.fixes[2]=collider.fixes[3]=0;collider.ids[0]=collider.ids[1]=collider.ids[2]=collider.ids[3]=-1;collider.interceptions.length=0;for(i=0;i<this.engine.getComponents(components.AABBCollider).length;i+=1){colliderB=this.engine.getComponents(components.AABBCollider)[i];if(!colliderB.enable){continue;}
if(colliderB.entity===-1||collider===colliderB){continue;}
transformB=this.engine.getComponentFromEntity(components.Transform,colliderB.entity);if(transformB){var top=transformB.position[1]+(colliderB.size[1]+collider.size[1])/2;var right=transformB.position[0]+(colliderB.size[0]+collider.size[0])/2;var bottom=transformB.position[1]-(colliderB.size[1]+collider.size[1])/2;var left=transformB.position[0]-(colliderB.size[0]+collider.size[0])/2;if(transform.position[1]>top){continue;}
if(transform.position[0]>right){continue;}
if(transform.position[1]<bottom){continue;}
if(transform.position[0]<left){continue;}
if((collider.interceptionMask&colliderB.category)!==0){collider.interceptions.push(colliderB.entity);}
if((collider.mask&colliderB.category)===0){continue;}
var ix=transform.position[0];var iy=transform.position[1];var isColliding=false;if(!isColliding&&transform.position[1]<=top&&top<=this.prevPosition[1]){ix=this.getXAxisEquation(this.prevPosition[0],this.prevPosition[1],transform.position[0],transform.position[1],top);if(left<ix&&ix<right){iy=top;isColliding=true;collider.fixes[2]=top;collider.ids[2]=colliderB.entity;}}
if(!colliderB.oneSide&&!isColliding&&transform.position[0]<=right&&right<=this.prevPosition[0]){iy=this.getYAxisEquation(this.prevPosition[0],this.prevPosition[1],transform.position[0],transform.position[1],right);if(top>iy&&iy>bottom){ix=right;isColliding=true;collider.fixes[3]=right;collider.ids[3]=colliderB.entity;}}
if(!colliderB.oneSide&&!isColliding&&transform.position[1]>=bottom&&bottom>=this.prevPosition[1]){ix=this.getXAxisEquation(this.prevPosition[0],this.prevPosition[1],transform.position[0],transform.position[1],bottom);if(left<ix&&ix<right){iy=bottom;isColliding=true;collider.fixes[0]=bottom;collider.ids[0]=colliderB.entity;}}
if(!colliderB.oneSide&&!isColliding&&transform.position[0]>=left&&left>=this.prevPosition[0]){iy=this.getYAxisEquation(this.prevPosition[0],this.prevPosition[1],transform.position[0],transform.position[1],left);if(top>iy&&iy>bottom){ix=left;isColliding=true;collider.fixes[1]=left;collider.ids[1]=colliderB.entity;}}}}};CollisionSystem.prototype.getXAxisEquation=function(x1,y1,x2,y2,y){'use strict';var m=(y1-y2)/(x1-x2),c=x1-(y1/m),x=(y/m)+c;return x;};CollisionSystem.prototype.getYAxisEquation=function(x1,y1,x2,y2,x){'use strict';var m=(y1-y2)/(x1-x2),b=y1-(m*x1),y=(m*x)+b;return y;};CollisionSystem.prototype.resolveCollision=function(dt,collider,rigidBody,transform){var colliderB;if(collider.fixes[0]!==0){colliderB=this.engine.getComponentFromEntity(components.AABBCollider,collider.ids[0]);rigidBody.velocity[1]=-rigidBody.velocity[1]*(collider.bounciness+colliderB.bounciness);rigidBody.velocity[0]-=rigidBody.velocity[0]*Math.min((collider.friction+colliderB.friction)*dt,1);transform.position[1]=collider.fixes[0]+(collider.fixes[0]-transform.position[1])*(collider.bounciness+colliderB.bounciness);}
if(collider.fixes[1]!==0){colliderB=this.engine.getComponentFromEntity(components.AABBCollider,collider.ids[1]);rigidBody.velocity[0]=-rigidBody.velocity[0]*(collider.bounciness+colliderB.bounciness);rigidBody.velocity[1]-=rigidBody.velocity[1]*Math.min((collider.friction+colliderB.friction)*dt,1);transform.position[0]=collider.fixes[1]+(collider.fixes[1]-transform.position[0])*(collider.bounciness+colliderB.bounciness);}
if(collider.fixes[2]!==0){colliderB=this.engine.getComponentFromEntity(components.AABBCollider,collider.ids[2]);rigidBody.velocity[1]=-rigidBody.velocity[1]*(collider.bounciness+colliderB.bounciness);rigidBody.velocity[0]-=rigidBody.velocity[0]*Math.min((collider.friction+colliderB.friction)*dt,1);transform.position[1]=collider.fixes[2]+(collider.fixes[2]-transform.position[1])*(collider.bounciness+colliderB.bounciness);}
if(collider.fixes[3]!==0){colliderB=this.engine.getComponentFromEntity(components.AABBCollider,collider.ids[3]);rigidBody.velocity[0]=-rigidBody.velocity[0]*(collider.bounciness+colliderB.bounciness);rigidBody.velocity[1]-=rigidBody.velocity[1]*Math.min((collider.friction+colliderB.friction)*dt,1);transform.position[0]=collider.fixes[3]+(collider.fixes[3]-transform.position[0])*(collider.bounciness+colliderB.bounciness);}};