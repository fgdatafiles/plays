(function (console, $hx_exports, $global) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.nk = $hx_exports.nk || {};
$hx_exports.nk.lib = $hx_exports.nk.lib || {};
$hx_exports.nk.lib.deltadna = $hx_exports.nk.lib.deltadna || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	var display = new nick_hol_nn_screen_Preloader();
	ApplicationMain.preloader = new openfl_display_Preloader(display);
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("media/strings/config.xml");
	types.push("TEXT");
	urls.push("media/strings/localization_az.xml");
	types.push("TEXT");
	urls.push("media/strings/localization_en.xml");
	types.push("TEXT");
	urls.push("media/strings/localization_la.xml");
	types.push("TEXT");
	urls.push("media/fonts/rockwellc_bold.eot");
	types.push("BINARY");
	urls.push("media/fonts/rockwellc_bold.svg");
	types.push("TEXT");
	urls.push("Rockwell Condensed Bold");
	types.push("FONT");
	urls.push("media/fonts/rockwellc_bold.woff");
	types.push("BINARY");
	urls.push("media/fonts/rockwellc_bold.woff2");
	types.push("BINARY");
	urls.push("media/fonts/rockwellc_reg.eot");
	types.push("BINARY");
	urls.push("media/fonts/rockwellc_reg.svg");
	types.push("TEXT");
	urls.push("Rockwell Condensed");
	types.push("FONT");
	urls.push("media/fonts/rockwellc_reg.woff");
	types.push("BINARY");
	urls.push("media/fonts/rockwellc_reg.woff2");
	types.push("BINARY");
	urls.push("media/images/embed/buttons/btn_arrow.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_back.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_cancel.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_check.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_home.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_htp.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_pause.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_play.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_restart.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_volume_off.png");
	types.push("IMAGE");
	urls.push("media/images/embed/buttons/btn_volume_on.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/board_bottom_left.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/board_bottom_right.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/board_small.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/board_top_left.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/board_top_right.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_nicknack_10.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_nicknack_11.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_nicknack_12.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_nicknack_7.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_nicknack_8.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_nicknack_9.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_turn_1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_turn_2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_turn_3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_turn_4.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_turn_5.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_turn_6.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/board/ctn_turn_popup.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/end/pillar_snow_bottom.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/end/pillar_snow_whole.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/end/spotlight.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/fx/0.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/fx/atlas.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/fx/fx_confetti.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/fx/fx_smoke_poof.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/fx/fx_snowsplash_back.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/fx/fx_snowsplash_side.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/fx/fx_snow_idle.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/fx/fx_snow_pile.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/fx/fx_sparkle_blue.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/help/ctn_htp_header.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/help/ctn_htp_instructions.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/help/htp_image1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/help/htp_image2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/help/htp_image3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/help/htp_image4.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/help/htp_image5.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/help/htp_image6.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/help/htp_image7.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/pause/ctn_confirmation.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/pause/ctn_pause.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/rank/ctn_rank_base.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/rank/ctn_rank_generic.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/rank/rank_char_1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/rank/rank_char_2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/rank/rank_char_3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/rank/rank_char_4.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/rank/rank_char_5.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/rank/rank_char_6.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/special/0.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/special/1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/special/2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/special/3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/special/atlas.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_avalanche_wave.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_drone_flying.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_ice_break.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_ice_freezing.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_patrick_drop.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_patrick_pickup.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_patrick_runcarry.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_patrick_runnormal.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_sleigh_back_appear.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_sleigh_back_static.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_sleigh_side_appear.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_sleigh_side_static.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_slide_back_appear.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_slide_side_appear_left.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nicknack_slide_side_appear_right.json");
	types.push("TEXT");
	urls.push("media/images/embed/game/special/nn_avalanche_back.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_10.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_11.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_12.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_4.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_5.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_6.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_7.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_8.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_9.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_back.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_bulb_glow.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_pointer.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_slices.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/spinner/spinner_top.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/token/char_pointer_arrow.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/token/token_1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/token/token_2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/token/token_3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/token/token_4.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/token/token_5.png");
	types.push("IMAGE");
	urls.push("media/images/embed/game/token/token_6.png");
	types.push("IMAGE");
	urls.push("media/images/embed/gen/bg_snow.png");
	types.push("IMAGE");
	urls.push("media/images/embed/gen/ctn_char_select.png");
	types.push("IMAGE");
	urls.push("media/images/embed/gen/ctn_player_count.png");
	types.push("IMAGE");
	urls.push("media/images/embed/gen/ctn_singleandpass.png");
	types.push("IMAGE");
	urls.push("media/images/embed/gen/message_tint.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/end/congratulations.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/end/goodjob.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/end/rank_ribbon1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/end/rank_ribbon2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/end/rank_ribbon3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/end/rank_ribbon4.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/game/char_pointer_you.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/game/ingame_rank1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/game/ingame_rank2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/game/ingame_rank3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/game/ingame_rank4.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/select/btn_players2_off.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/select/btn_players2_on.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/select/btn_players3_off.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/select/btn_players3_on.png");
	types.push("IMAGE");
	urls.push("media/images/embed/localized/title/ts_title.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/ctn_charselect_1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/ctn_charselect_2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/ctn_charselect_3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/ctn_charselect_4.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/ctn_charselect_5.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/ctn_charselect_6.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/ctn_charselect_gen.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/select_1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/select_2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/select_3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/select_4.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/select_5.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/select_6.png");
	types.push("IMAGE");
	urls.push("media/images/embed/select/select_tag.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_bg1.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_bg2.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_bg3.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_char_alvin.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_char_henry.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_char_lincoln.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_char_nrdd.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_char_phoebe.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_char_spongebob.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_glow.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_sparkles.png");
	types.push("IMAGE");
	urls.push("media/images/embed/title/ts_tiles.png");
	types.push("IMAGE");
	urls.push("media/images/preloader/preloader_bar.png");
	types.push("IMAGE");
	urls.push("media/images/preloader/preloader_spongebob.png");
	types.push("IMAGE");
	urls.push("media/images/localized/img_logo_nick.png");
	types.push("IMAGE");
	urls.push("media/images/localized/unembed/blank.txt");
	types.push("TEXT");
	urls.push("media/audio/embed/bgm/bgm_end.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/bgm/bgm_end.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/bgm/bgm_game.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/bgm/bgm_game.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/bgm/bgm_title.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/bgm/bgm_title.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/bgm/bgm_title_end.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/bgm/bgm_title_end.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/avalanche.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/avalanche.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/drone_loop.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/drone_loop.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/end_turn.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/end_turn.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/ice_break.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/ice_break.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/ice_freeze.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/ice_freeze.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/item_despawn.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/item_despawn.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/item_spawn.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/item_spawn.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/move_up.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/move_up.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/patrick_drop_token.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/patrick_drop_token.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/patrick_pick_token.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/patrick_pick_token.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/piece_move.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/piece_move.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/sled_loop.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/sled_loop.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/slide_through_tiles.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/slide_through_tiles.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/wheel_slow_down.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/wheel_slow_down.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/wheel_spin_loop.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/wheel_spin_loop.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/game/wheel_spin_start.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/game/wheel_spin_start.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/general/sfx_button.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/general/sfx_button.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/title/snow_slide_up_01.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/title/snow_slide_up_01.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/title/snow_slide_up_02.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/title/snow_slide_up_02.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/title/snow_slide_up_03.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/title/snow_slide_up_03.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/sfx/title/title_drop.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/sfx/title/title_drop.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_lose_1.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_lose_1.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_lose_2.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_lose_2.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_lose_3.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_lose_3.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_lose_4.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_lose_4.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_lose_5.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_lose_5.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_lose_6.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_lose_6.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_neg_1.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_neg_1.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_neg_2.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_neg_2.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_neg_3.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_neg_3.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_neg_4.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_neg_4.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_neg_5.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_neg_5.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_neg_6.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_neg_6.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_pos_1.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_pos_1.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_pos_2.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_pos_2.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_pos_3.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_pos_3.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_pos_4.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_pos_4.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_pos_5.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_pos_5.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_spin_pos_6.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_spin_pos_6.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_win_1.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_win_1.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_win_2.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_win_2.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_win_3.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_win_3.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_win_4.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_win_4.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_win_5.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_win_5.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/char_win_6.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/char_win_6.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/game/patrick_letsgo.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/game/patrick_letsgo.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/select/char_select_1.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/select/char_select_1.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/select/char_select_2.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/select/char_select_2.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/select/char_select_3.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/select/char_select_3.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/select/char_select_4.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/select/char_select_4.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/select/char_select_5.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/select/char_select_5.ogg");
	types.push("SOUND");
	urls.push("media/audio/embed/vo/select/char_select_6.mp3");
	types.push("MUSIC");
	urls.push("media/audio/embed/vo/select/char_select_6.ogg");
	types.push("SOUND");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(total == 0) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "119", company : "John Paul G. Mata", file : "game", fps : 60, name : "Spin & Win!", orientation : "landscape", packageName : "nick.hol.nn.NickNacks", version : "1.0.4", windows : [{ antialiasing : 0, background : 0, borderless : false, depthBuffer : false, display : 0, fullscreen : true, hardware : false, height : 560, parameters : "{}", resizable : true, stencilBuffer : true, title : "Spin & Win!", vsync : false, width : 960, x : null, y : null}]};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("nick.hol.nn.Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	if(openfl_Lib.current.stage.window.__fullscreen) openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,true,true));
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event(openfl_events_Event.RESIZE,false,false));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl_events_EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1;
			if(this.__dispatching.get(type) == true) {
				if(!this.__newEventMap.exists(type)) {
					var _this = this.__eventMap.get(type);
					list1 = _this.slice();
					this.__newEventMap.set(type,list1);
				} else list1 = this.__newEventMap.get(type);
			} else list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		if(this.__dispatching.get(type) == true && this.__newEventMap.exists(type)) return this.__newEventMap.get(type).length > 0; else return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var dispatching = this.__dispatching.get(type) == true;
		if(dispatching) {
			if(!this.__newEventMap.exists(type)) {
				var _this = this.__eventMap.get(type);
				list = _this.slice();
				this.__newEventMap.set(type,list);
			} else list = this.__newEventMap.get(type);
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				list.splice(i,1);
				break;
			}
		}
		if(!dispatching) {
			if(list.length == 0) this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
		}
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var type = event.type;
		var list;
		if(this.__dispatching.get(type) == true) {
			list = this.__newEventMap.get(type);
			if(list == null) return false;
			list = list.slice();
		} else {
			list = this.__eventMap.get(type);
			if(list == null) return false;
			this.__dispatching.set(type,true);
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl_events_EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCanceledNow) break;
			}
			if(listener == list[index]) index++;
		}
		if(this.__newEventMap != null && this.__newEventMap.exists(type)) {
			var list1 = this.__newEventMap.get(type);
			if(list1.length > 0) this.__eventMap.set(type,list1); else this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			} else this.__newEventMap.remove(type);
		}
		this.__dispatching.set(event.type,false);
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmapSmooth = true;
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__offset = new openfl_geom_Point();
	this.__worldOffset = new openfl_geom_Point();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		this.__getWorldTransform().__transformInversePoint(pos);
		return pos;
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) return true;
			return result;
		}
		return false;
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
			if(event.target == null) event.target = this;
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) this.__getBounds(rect,matrix); else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null && !interactiveOnly) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__cacheGL: function(renderSession) {
		var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
		var x = this.__cachedBitmapBounds.x;
		var y = this.__cachedBitmapBounds.y;
		var w = this.__cachedBitmapBounds.width;
		var h = this.__cachedBitmapBounds.height;
		if(this.__cacheGLMatrix == null) this.__cacheGLMatrix = new openfl_geom_Matrix();
		if(hasCacheMatrix) {
			var bmpBounds = openfl_geom_Rectangle.__temp;
			this.__cachedBitmapBounds.__transform(bmpBounds,this.__cacheAsBitmapMatrix);
			x = bmpBounds.x;
			y = bmpBounds.y;
			w = bmpBounds.width;
			h = bmpBounds.height;
			this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
		} else this.__cacheGLMatrix.identity();
		if(w <= 0 && h <= 0) throw new js__$Boot_HaxeError("Error creating a cached bitmap. The texture size is " + w + "x" + h);
		if(this.__updateCachedBitmap || this.__updateFilters) {
			if(this.__cachedFilterBounds != null) {
				w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
				h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
			}
			if(this.__cachedBitmap == null) this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
			this.__cachedBitmap.__resize(Math.ceil(w),Math.ceil(h));
			var m = this.__cacheGLMatrix.clone();
			m.translate(-x,-y);
			var shader = this.__shader;
			this.__shader = null;
			this.__cachedBitmap.__drawGL(renderSession,this,m,null,null,null,true,false,true);
			this.__shader = shader;
			this.__updateCachedBitmap = false;
		}
		if(this.__updateFilters) {
			openfl_filters_BitmapFilter.__applyFilters(this.__filters,renderSession,this.__cachedBitmap,this.__cachedBitmap,null,null);
			this.__updateFilters = false;
		}
		this.__cacheGLMatrix.invert();
		this.__cacheGLMatrix.__translateTransformed(x,y);
		this.__cacheGLMatrix.concat(this.__renderTransform);
		this.__cacheGLMatrix.translate(this.__offset.x,this.__offset.y);
		renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap,this.__cacheAsBitmapSmooth,this.__cacheGLMatrix,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.__shader,openfl_display_PixelSnapping.ALWAYS);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) {
				if(this.stage.get_focus() == this) this.stage.set_focus(null);
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			}
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		this.__updateTransforms();
		if(this.parent != null && this.__isMask) this.__maskCached = false;
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly && this.__cacheAsBitmap) {
			if(this.__updateCachedBitmap || this.__updateFilters) {
				if(this.__cachedBitmapBounds == null) this.__cachedBitmapBounds = new openfl_geom_Rectangle();
				if(this.cacheAsBitmapBounds != null) this.__cachedBitmapBounds.copyFrom(this.cacheAsBitmapBounds); else {
					this.__cachedBitmapBounds.setEmpty();
					this.__getRenderBounds(this.__cachedBitmapBounds,openfl_geom_Matrix.__identity);
				}
				if(this.__filters != null) {
					if(this.__cachedFilterBounds == null) this.__cachedFilterBounds = new openfl_geom_Rectangle();
					this.__cachedFilterBounds.setEmpty();
					openfl_filters_BitmapFilter.__expandBounds(this.__filters,this.__cachedFilterBounds,openfl_geom_Matrix.__identity);
					this.__cachedBitmapBounds.x += this.__cachedFilterBounds.x;
					this.__cachedBitmapBounds.y += this.__cachedFilterBounds.y;
				}
			}
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == openfl_display_BlendMode.NORMAL) this.__blendMode = this.parent.__blendMode;
				if(this.shader == null) this.__shader = this.parent.__shader;
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local;
		if(overrided) local = new openfl_geom_Matrix(overrideTransform.a,overrideTransform.b,overrideTransform.c,overrideTransform.d,overrideTransform.tx,overrideTransform.ty); else local = this.__transform;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			this.__worldOffset.copyFrom(this.parent.__worldOffset);
		} else {
			this.__worldTransform.copyFrom(local);
			this.__worldOffset.setTo(0,0);
		}
		if(this.__scrollRect != null) {
			this.__offset = this.__worldTransform.deltaTransformPoint(this.__scrollRect.get_topLeft());
			this.__worldOffset.offset(this.__offset.x,this.__offset.y);
		} else this.__offset.setTo(0,0);
		this.__renderTransform.copyFrom(this.__worldTransform);
		this.__renderTransform.translate(-this.__worldOffset.x,-this.__worldOffset.y);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) value = 1.0;
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_cacheAsBitmap: function() {
		return this.__cacheAsBitmap;
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			this.__forceCacheAsBitmap = true;
			this.__cacheAsBitmap = true;
			this.__updateFilters = true;
		} else {
			this.__filters = null;
			this.__forceCacheAsBitmap = false;
			this.__cacheAsBitmap = false;
			this.__updateFilters = false;
		}
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,get_mouseX: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseX(mouseX,mouseY);
	}
	,get_mouseY: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseY(mouseX,mouseY);
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) return this.__transform.a; else return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
	}
	,set_scaleX: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) return this.__transform.d; else return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_name:"set_name",get_mask:"get_mask",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",get_cacheAsBitmap:"get_cacheAsBitmap",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED,true));
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCanceled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCanceled) return true;
			}
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) continue;
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) stack.push(hitObject);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled && this.hitArea.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				stack[stack.length - 1] = hitObject;
				return true;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) return interactiveOnly; else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) return true; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled || this.buttonMode;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var nick_hol_nn_Main = function() {
	openfl_display_Sprite.call(this);
	if(this.stage != null) this._init(); else this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._init));
};
$hxClasses["nick.hol.nn.Main"] = nick_hol_nn_Main;
nick_hol_nn_Main.__name__ = ["nick","hol","nn","Main"];
nick_hol_nn_Main.__super__ = openfl_display_Sprite;
nick_hol_nn_Main.prototype = $extend(openfl_display_Sprite.prototype,{
	_handler_resize: function(e) {
		if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS) haxe_Timer.delay(function() {
			ie_lib_utils_display_DisplayUtility.onResize();
		},1000); else ie_lib_utils_display_DisplayUtility.onResize();
	}
	,_init: function(p_evt) {
		if(this.hasEventListener(openfl_events_Event.ADDED_TO_STAGE)) this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._init));
		this._setupGame();
	}
	,_setupGame: function() {
		nick_hol_nn_manager_GameManager.get_instance().set_debugMode(true);
		nick_hol_nn_manager_GameManager.get_instance().initialize();
		ie_lib_manager_UpdateManager.init();
		ie_lib_manager_AssetLoadManager.initBatches();
		ie_lib_utils_display_DisplayUtility.initialize(960,560,ie_lib_utils_display_DisplayOrientation.LANDSCAPE);
		com_jpmata_managers_WindowManager.get_instance().start();
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.RESIZE,$bind(this,this._handler_resize));
		this._handler_resize();
		if(this._sprMain == null) {
			this._sprMain = new openfl_display_Sprite();
			this.addChild(this._sprMain);
			var mask = new openfl_display_Sprite();
			this._sprMain.set_scrollRect(new openfl_geom_Rectangle(0,0,ie_lib_utils_display_DisplayUtility.get_nominalWidth(),ie_lib_utils_display_DisplayUtility.get_nominalHeight()));
		}
		if(this._sprDebug == null) {
			this._sprDebug = new openfl_display_Sprite();
			this._sprDebug.mouseEnabled = false;
			this._sprDebug.mouseChildren = false;
			if(nk_lib_manager_NickManager.get_instance().get_configGame().debugMode == true) {
				var fps = new openfl_display_FPS(10,ie_lib_utils_display_DisplayUtility.get_nominalHeight() - 50,0);
				fps.set_scaleX(2);
				fps.set_scaleY(2);
				this._sprDebug.addChild(fps);
				var txtVersion = new openfl_text_TextField();
				txtVersion.set_textColor(0);
				txtVersion.set_text("v. " + Std.string(openfl_Lib.application.config.version));
				var isCocoonJS = window.navigator.isCocoonJS;
				if(isCocoonJS) {
					var _g = txtVersion;
					_g.set_text(_g.get_text() + " cocoonJS");
				}
				txtVersion.set_x(ie_lib_utils_display_DisplayUtility.get_nominalWidth() - txtVersion.get_textWidth() - 10);
				txtVersion.set_y(ie_lib_utils_display_DisplayUtility.get_nominalHeight() - txtVersion.get_textHeight() - 10);
				this._sprDebug.addChild(txtVersion);
			}
			this.addChild(this._sprDebug);
		}
		ie_lib_manager_ScreenManager.setMain(this._sprMain);
		ie_lib_manager_ScreenManager.setRootScreen(new nick_hol_nn_screen_TitleScreen());
	}
	,__class__: nick_hol_nn_Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	nick_hol_nn_Main.call(this);
	this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = nick_hol_nn_Main;
DocumentClass.prototype = $extend(nick_hol_nn_Main.prototype,{
	__class__: DocumentClass
});
var lime_AssetLibrary = function() {
	this.onChange = new lime_app_Event_$Void_$Void();
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.getString(0,bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$bold_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$reg_$ttf);
	var id;
	id = "media/strings/config.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/strings/localization_az.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/strings/localization_en.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/strings/localization_la.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/fonts/rockwellc_bold.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "media/fonts/rockwellc_bold.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/fonts/rockwellc_bold.ttf";
	this.className.set(id,_$_$ASSET_$_$media_$fonts_$rockwellc_$bold_$ttf);
	this.type.set(id,"FONT");
	id = "media/fonts/rockwellc_bold.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "media/fonts/rockwellc_bold.woff2";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "media/fonts/rockwellc_reg.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "media/fonts/rockwellc_reg.svg";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/fonts/rockwellc_reg.ttf";
	this.className.set(id,_$_$ASSET_$_$media_$fonts_$rockwellc_$reg_$ttf);
	this.type.set(id,"FONT");
	id = "media/fonts/rockwellc_reg.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "media/fonts/rockwellc_reg.woff2";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "media/images/embed/buttons/btn_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_back.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_cancel.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_check.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_home.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_htp.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_pause.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_play.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_restart.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_volume_off.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/buttons/btn_volume_on.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/board_bottom_left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/board_bottom_right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/board_small.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/board_top_left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/board_top_right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_nicknack_10.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_nicknack_11.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_nicknack_12.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_nicknack_7.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_nicknack_8.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_nicknack_9.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_turn_1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_turn_2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_turn_3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_turn_4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_turn_5.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_turn_6.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/board/ctn_turn_popup.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/end/pillar_snow_bottom.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/end/pillar_snow_whole.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/end/spotlight.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/fx/0.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/fx/atlas.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/fx/fx_confetti.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/fx/fx_smoke_poof.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/fx/fx_snowsplash_back.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/fx/fx_snowsplash_side.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/fx/fx_snow_idle.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/fx/fx_snow_pile.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/fx/fx_sparkle_blue.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/help/ctn_htp_header.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/help/ctn_htp_instructions.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/help/htp_image1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/help/htp_image2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/help/htp_image3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/help/htp_image4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/help/htp_image5.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/help/htp_image6.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/help/htp_image7.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/pause/ctn_confirmation.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/pause/ctn_pause.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/rank/ctn_rank_base.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/rank/ctn_rank_generic.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/rank/rank_char_1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/rank/rank_char_2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/rank/rank_char_3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/rank/rank_char_4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/rank/rank_char_5.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/rank/rank_char_6.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/special/0.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/special/1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/special/2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/special/3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/special/atlas.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_avalanche_wave.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_drone_flying.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_ice_break.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_ice_freezing.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_patrick_drop.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_patrick_pickup.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_patrick_runcarry.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_patrick_runnormal.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_sleigh_back_appear.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_sleigh_back_static.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_sleigh_side_appear.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_sleigh_side_static.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_slide_back_appear.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_slide_side_appear_left.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nicknack_slide_side_appear_right.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/images/embed/game/special/nn_avalanche_back.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_10.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_11.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_12.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_5.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_6.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_7.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_8.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_9.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_back.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_bulb_glow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_pointer.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_slices.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/spinner/spinner_top.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/token/char_pointer_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/token/token_1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/token/token_2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/token/token_3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/token/token_4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/token/token_5.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/game/token/token_6.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/gen/bg_snow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/gen/ctn_char_select.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/gen/ctn_player_count.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/gen/ctn_singleandpass.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/gen/message_tint.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/end/congratulations.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/end/goodjob.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/end/rank_ribbon1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/end/rank_ribbon2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/end/rank_ribbon3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/end/rank_ribbon4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/game/char_pointer_you.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/game/ingame_rank1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/game/ingame_rank2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/game/ingame_rank3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/game/ingame_rank4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/select/btn_players2_off.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/select/btn_players2_on.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/select/btn_players3_off.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/select/btn_players3_on.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/localized/title/ts_title.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/ctn_charselect_1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/ctn_charselect_2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/ctn_charselect_3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/ctn_charselect_4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/ctn_charselect_5.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/ctn_charselect_6.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/ctn_charselect_gen.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/select_1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/select_2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/select_3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/select_4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/select_5.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/select_6.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/select/select_tag.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_bg1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_bg2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_bg3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_char_alvin.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_char_henry.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_char_lincoln.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_char_nrdd.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_char_phoebe.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_char_spongebob.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_glow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_sparkles.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/embed/title/ts_tiles.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/preloader/preloader_bar.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/preloader/preloader_spongebob.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/localized/img_logo_nick.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "media/images/localized/unembed/blank.txt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/audio/embed/bgm/bgm_end.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/bgm/bgm_end.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/bgm/bgm_game.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/bgm/bgm_game.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/bgm/bgm_title.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/bgm/bgm_title.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/bgm/bgm_title_end.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/bgm/bgm_title_end.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/avalanche.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/avalanche.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/drone_loop.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/drone_loop.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/end_turn.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/end_turn.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/ice_break.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/ice_break.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/ice_freeze.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/ice_freeze.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/item_despawn.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/item_despawn.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/item_spawn.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/item_spawn.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/move_up.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/move_up.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/patrick_drop_token.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/patrick_drop_token.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/patrick_pick_token.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/patrick_pick_token.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/piece_move.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/piece_move.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/sled_loop.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/sled_loop.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/slide_through_tiles.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/slide_through_tiles.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/wheel_slow_down.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/wheel_slow_down.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/wheel_spin_loop.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/wheel_spin_loop.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/game/wheel_spin_start.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/game/wheel_spin_start.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/general/sfx_button.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/general/sfx_button.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/title/snow_slide_up_01.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/title/snow_slide_up_01.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/title/snow_slide_up_02.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/title/snow_slide_up_02.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/title/snow_slide_up_03.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/title/snow_slide_up_03.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/sfx/title/title_drop.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/sfx/title/title_drop.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_lose_1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_lose_1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_lose_2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_lose_2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_lose_3.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_lose_3.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_lose_4.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_lose_4.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_lose_5.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_lose_5.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_lose_6.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_lose_6.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_neg_1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_neg_1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_neg_2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_neg_2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_neg_3.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_neg_3.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_neg_4.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_neg_4.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_neg_5.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_neg_5.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_neg_6.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_neg_6.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_pos_1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_pos_1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_pos_2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_pos_2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_pos_3.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_pos_3.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_pos_4.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_pos_4.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_pos_5.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_pos_5.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_spin_pos_6.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_spin_pos_6.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_win_1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_win_1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_win_2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_win_2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_win_3.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_win_3.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_win_4.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_win_4.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_win_5.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_win_5.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/char_win_6.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/char_win_6.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/game/patrick_letsgo.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/game/patrick_letsgo.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/select/char_select_1.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/select/char_select_1.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/select/char_select_2.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/select/char_select_2.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/select/char_select_3.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/select/char_select_3.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/select/char_select_4.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/select/char_select_4.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/select/char_select_5.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/select/char_select_5.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/audio/embed/vo/select/char_select_6.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "media/audio/embed/vo/select/char_select_6.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "media/images/unembed/blank.txt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/audio/localized/unembed/blank.txt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/audio/unembed/bgm/blank.txt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "media/audio/unembed/sfx/blank.txt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getBytes: function(id) {
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var bytes = loader.bytes;
		if(bytes != null) return bytes; else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var bytes = loader.bytes;
		if(bytes != null) return bytes.getString(0,bytes.length); else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.prototype = {
	__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$media_$fonts_$rockwellc_$bold_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Rockwell Condensed Bold";
};
$hxClasses["__ASSET__media_fonts_rockwellc_bold_ttf"] = _$_$ASSET_$_$media_$fonts_$rockwellc_$bold_$ttf;
_$_$ASSET_$_$media_$fonts_$rockwellc_$bold_$ttf.__name__ = ["__ASSET__media_fonts_rockwellc_bold_ttf"];
_$_$ASSET_$_$media_$fonts_$rockwellc_$bold_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$media_$fonts_$rockwellc_$bold_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$media_$fonts_$rockwellc_$bold_$ttf
});
var _$_$ASSET_$_$media_$fonts_$rockwellc_$reg_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Rockwell Condensed";
};
$hxClasses["__ASSET__media_fonts_rockwellc_reg_ttf"] = _$_$ASSET_$_$media_$fonts_$rockwellc_$reg_$ttf;
_$_$ASSET_$_$media_$fonts_$rockwellc_$reg_$ttf.__name__ = ["__ASSET__media_fonts_rockwellc_reg_ttf"];
_$_$ASSET_$_$media_$fonts_$rockwellc_$reg_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$media_$fonts_$rockwellc_$reg_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$media_$fonts_$rockwellc_$reg_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.registerFont = function(font) {
	var instance;
	instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) openfl_text_Font.__registeredFonts.push(instance);
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	__class__: openfl_text_Font
});
var _$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$bold_$ttf = function() {
	var font = new _$_$ASSET_$_$media_$fonts_$rockwellc_$bold_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__media_fonts_rockwellc_bold_ttf"] = _$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$bold_$ttf;
_$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$bold_$ttf.__name__ = ["__ASSET__OPENFL__media_fonts_rockwellc_bold_ttf"];
_$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$bold_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$bold_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$bold_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$reg_$ttf = function() {
	var font = new _$_$ASSET_$_$media_$fonts_$rockwellc_$reg_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__media_fonts_rockwellc_reg_ttf"] = _$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$reg_$ttf;
_$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$reg_$ttf.__name__ = ["__ASSET__OPENFL__media_fonts_rockwellc_reg_ttf"];
_$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$reg_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$reg_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$media_$fonts_$rockwellc_$reg_$ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.exists = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(f(x)) return true;
	}
	return false;
};
Lambda.filter = function(it,f) {
	var l = new List();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(f(x)) l.add(x);
	}
	return l;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 560;
		if(height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 960;
		if(width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
	if(Reflect.isFunction(f)) {
		if(params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	return f;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.nodeName;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		this.attributeMap.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.exists(att);
	}
	,iterator: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		return HxOverrides.iter(this.children);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element && (function($this) {
				var $r;
				if(child.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				$r = child.nodeName;
				return $r;
			}(this)) == name) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) return child;
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(x.parent != null) x.parent.removeChild(x);
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
	,__properties__: {get_nodeName:"get_nodeName"}
};
var com_jpmata_managers_BaseManager = function() {
	openfl_events_EventDispatcher.call(this,null);
	this._initProps();
	this._initListeners();
};
$hxClasses["com.jpmata.managers.BaseManager"] = com_jpmata_managers_BaseManager;
com_jpmata_managers_BaseManager.__name__ = ["com","jpmata","managers","BaseManager"];
com_jpmata_managers_BaseManager.__super__ = openfl_events_EventDispatcher;
com_jpmata_managers_BaseManager.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_debugMode: function() {
		return this._debugMode;
	}
	,set_debugMode: function(p_value) {
		this._debugMode = p_value;
		return this._debugMode;
	}
	,_initListeners: function() {
	}
	,_initProps: function() {
		this._debugMode = true;
		this._satellite = ie_lib_events_satellite_EventSatellite.instance();
	}
	,__class__: com_jpmata_managers_BaseManager
	,__properties__: {set_debugMode:"set_debugMode",get_debugMode:"get_debugMode"}
});
var com_jpmata_managers_Singleton_$FontManager = function() { };
$hxClasses["com.jpmata.managers.Singleton_FontManager"] = com_jpmata_managers_Singleton_$FontManager;
com_jpmata_managers_Singleton_$FontManager.__name__ = ["com","jpmata","managers","Singleton_FontManager"];
var com_jpmata_managers_FontManager = function(p_class) {
	if(p_class != com_jpmata_managers_Singleton_$FontManager) throw new js__$Boot_HaxeError("Invalid instantiation.");
	com_jpmata_managers_BaseManager.call(this);
};
$hxClasses["com.jpmata.managers.FontManager"] = com_jpmata_managers_FontManager;
com_jpmata_managers_FontManager.__name__ = ["com","jpmata","managers","FontManager"];
com_jpmata_managers_FontManager._instance = null;
com_jpmata_managers_FontManager.instance = function() {
	if(com_jpmata_managers_FontManager._instance == null) com_jpmata_managers_FontManager._instance = new com_jpmata_managers_FontManager(com_jpmata_managers_Singleton_$FontManager);
	return com_jpmata_managers_FontManager._instance;
};
com_jpmata_managers_FontManager.__super__ = com_jpmata_managers_BaseManager;
com_jpmata_managers_FontManager.prototype = $extend(com_jpmata_managers_BaseManager.prototype,{
	get_isRightToLeft: function() {
		return this._isRightToLeft;
	}
	,initialize: function(p_urlFonts,p_isRightToLeft) {
		if(p_isRightToLeft == null) p_isRightToLeft = false;
		if(p_urlFonts == null) throw new js__$Boot_HaxeError("Cannot initialize fonts. Font urls value is empty. ");
		this._isRightToLeft = p_isRightToLeft;
		if(this._debugMode) null;
		var $it0 = p_urlFonts.keys();
		while( $it0.hasNext() ) {
			var fontKey = $it0.next();
			var fontURL;
			fontURL = __map_reserved[fontKey] != null?p_urlFonts.getReserved(fontKey):p_urlFonts.h[fontKey];
			if(this._debugMode) null;
			var font = ie_lib_utils_assets_AssetsUtility.getFont(fontURL);
			if(font == null) {
				if(this._debugMode) null;
				continue;
			}
			this._listFonts.set(fontKey,fontURL);
			if(this._debugMode) null;
			var txtTemp = new com_jpmata_views_text_BasicTextField(10,10);
			txtTemp.set_width(10);
			txtTemp.set_x(-10);
			txtTemp.mouseEnabled = false;
			txtTemp.mouseChildren = false;
			var dsTemp = { VALUE : font.name, TYPE : fontKey, SIZE : 5, HALIGN : "left", VALIGN : "top", COLOR : 16777215};
			txtTemp.setString(dsTemp);
			this._tempTexts.push(txtTemp);
		}
	}
	,getFontByName: function(p_value) {
		var result = null;
		if(this._listFonts.get(p_value) != null) result = ie_lib_utils_assets_AssetsUtility.getFont(this._listFonts.get(p_value));
		return result;
	}
	,_initProps: function() {
		com_jpmata_managers_BaseManager.prototype._initProps.call(this);
		this._isRightToLeft = false;
		this._listFonts = new haxe_ds_StringMap();
		this._tempTexts = [];
	}
	,__class__: com_jpmata_managers_FontManager
	,__properties__: $extend(com_jpmata_managers_BaseManager.prototype.__properties__,{get_isRightToLeft:"get_isRightToLeft"})
});
var com_jpmata_managers_Singleton_$SharedObjectManager = function() { };
$hxClasses["com.jpmata.managers.Singleton_SharedObjectManager"] = com_jpmata_managers_Singleton_$SharedObjectManager;
com_jpmata_managers_Singleton_$SharedObjectManager.__name__ = ["com","jpmata","managers","Singleton_SharedObjectManager"];
var com_jpmata_managers_SharedObjectManager = function(p_class) {
	if(p_class != com_jpmata_managers_Singleton_$SharedObjectManager) throw new js__$Boot_HaxeError("Invalid instantiation.");
	com_jpmata_managers_BaseManager.call(this);
};
$hxClasses["com.jpmata.managers.SharedObjectManager"] = com_jpmata_managers_SharedObjectManager;
com_jpmata_managers_SharedObjectManager.__name__ = ["com","jpmata","managers","SharedObjectManager"];
com_jpmata_managers_SharedObjectManager.__properties__ = {get_instance:"get_instance"}
com_jpmata_managers_SharedObjectManager._instance = null;
com_jpmata_managers_SharedObjectManager.get_instance = function() {
	if(com_jpmata_managers_SharedObjectManager._instance == null) com_jpmata_managers_SharedObjectManager._instance = new com_jpmata_managers_SharedObjectManager(com_jpmata_managers_Singleton_$SharedObjectManager);
	return com_jpmata_managers_SharedObjectManager._instance;
};
com_jpmata_managers_SharedObjectManager.__super__ = com_jpmata_managers_BaseManager;
com_jpmata_managers_SharedObjectManager.prototype = $extend(com_jpmata_managers_BaseManager.prototype,{
	start: function(p_id) {
		if(p_id == "" || p_id == null) throw new js__$Boot_HaxeError("The id value is invalid:" + p_id);
		if(this._sharedObject != null) return;
		this._id = p_id;
		this._sharedObject = openfl_net_SharedObject.getLocal(this._id);
		if(this._debugMode) null;
	}
	,getValue: function(p_property) {
		if(this._debugMode) null;
		return Reflect.getProperty(this._sharedObject.data,p_property);
	}
	,saveProperty: function(p_property,p_value) {
		if(this._debugMode) null;
		this._sharedObject.setProperty(p_property,p_value);
		if(this._enabledSaveDate) this._sharedObject.setProperty("saveDate",new Date());
		var flushStatus = null;
		flushStatus = this._sharedObject.flush(10000);
		if(flushStatus != null) switch(flushStatus) {
		case openfl_net_SharedObjectFlushStatus.PENDING:
			this._sharedObject.addEventListener(openfl_events_NetStatusEvent.NET_STATUS,$bind(this,this._handlerSO_flushStatus));
			break;
		case openfl_net_SharedObjectFlushStatus.FLUSHED:
			break;
		default:
		}
		if(this._debugMode) null;
		this.dispatchEvent(new com_jpmata_managers_SharedObjectManagerEvent("soMngrEvt_propSaved",{ property : p_property, value : Reflect.getProperty(this._sharedObject.data,p_property)}));
	}
	,clearAll: function() {
		if(this._sharedObject == null) return;
		this._sharedObject.clear();
		this.dispatchEvent(new com_jpmata_managers_SharedObjectManagerEvent("soMngrEvt_dataCleared"));
	}
	,_handlerSO_flushStatus: function(evt) {
		if(this._debugMode) null;
		this._sharedObject.removeEventListener(openfl_events_NetStatusEvent.NET_STATUS,$bind(this,this._handlerSO_flushStatus));
	}
	,_initProps: function() {
		com_jpmata_managers_BaseManager.prototype._initProps.call(this);
		this._id = null;
		this._enabledSaveDate = false;
		this._sharedObject = null;
	}
	,_initListeners: function() {
		com_jpmata_managers_BaseManager.prototype._initListeners.call(this);
		if(this._satellite != null) {
			this.addEventListener("soMngrEvt_dataCleared",($_=this._satellite,$bind($_,$_.handler)));
			this.addEventListener("soMngrEvt_propCleared",($_=this._satellite,$bind($_,$_.handler)));
			this.addEventListener("soMngrEvt_propSaved",($_=this._satellite,$bind($_,$_.handler)));
		}
	}
	,__class__: com_jpmata_managers_SharedObjectManager
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl_events_EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	__class__: openfl_events_Event
};
var ie_lib_events_BaseEvent = function(p_type,p_data,p_bubbles,p_cancelable) {
	if(p_cancelable == null) p_cancelable = false;
	if(p_bubbles == null) p_bubbles = false;
	openfl_events_Event.call(this,p_type,p_bubbles,p_cancelable);
	this._data = p_data;
};
$hxClasses["ie.lib.events.BaseEvent"] = ie_lib_events_BaseEvent;
ie_lib_events_BaseEvent.__name__ = ["ie","lib","events","BaseEvent"];
ie_lib_events_BaseEvent.__super__ = openfl_events_Event;
ie_lib_events_BaseEvent.prototype = $extend(openfl_events_Event.prototype,{
	get_data: function() {
		return this._data;
	}
	,__class__: ie_lib_events_BaseEvent
	,__properties__: {get_data:"get_data"}
});
var com_jpmata_managers_SharedObjectManagerEvent = function(p_type,p_data,p_bubbles,p_cancelable) {
	if(p_cancelable == null) p_cancelable = false;
	if(p_bubbles == null) p_bubbles = false;
	ie_lib_events_BaseEvent.call(this,p_type,p_data,p_bubbles,p_cancelable);
};
$hxClasses["com.jpmata.managers.SharedObjectManagerEvent"] = com_jpmata_managers_SharedObjectManagerEvent;
com_jpmata_managers_SharedObjectManagerEvent.__name__ = ["com","jpmata","managers","SharedObjectManagerEvent"];
com_jpmata_managers_SharedObjectManagerEvent.__super__ = ie_lib_events_BaseEvent;
com_jpmata_managers_SharedObjectManagerEvent.prototype = $extend(ie_lib_events_BaseEvent.prototype,{
	__class__: com_jpmata_managers_SharedObjectManagerEvent
});
var com_jpmata_managers_SoundType = $hxClasses["com.jpmata.managers.SoundType"] = { __ename__ : ["com","jpmata","managers","SoundType"], __constructs__ : ["BGM","SFX","VO"] };
com_jpmata_managers_SoundType.BGM = ["BGM",0];
com_jpmata_managers_SoundType.BGM.toString = $estr;
com_jpmata_managers_SoundType.BGM.__enum__ = com_jpmata_managers_SoundType;
com_jpmata_managers_SoundType.SFX = ["SFX",1];
com_jpmata_managers_SoundType.SFX.toString = $estr;
com_jpmata_managers_SoundType.SFX.__enum__ = com_jpmata_managers_SoundType;
com_jpmata_managers_SoundType.VO = ["VO",2];
com_jpmata_managers_SoundType.VO.toString = $estr;
com_jpmata_managers_SoundType.VO.__enum__ = com_jpmata_managers_SoundType;
var com_jpmata_managers_SoundFormat = $hxClasses["com.jpmata.managers.SoundFormat"] = { __ename__ : ["com","jpmata","managers","SoundFormat"], __constructs__ : ["ALL","MP3","OGG"] };
com_jpmata_managers_SoundFormat.ALL = ["ALL",0];
com_jpmata_managers_SoundFormat.ALL.toString = $estr;
com_jpmata_managers_SoundFormat.ALL.__enum__ = com_jpmata_managers_SoundFormat;
com_jpmata_managers_SoundFormat.MP3 = ["MP3",1];
com_jpmata_managers_SoundFormat.MP3.toString = $estr;
com_jpmata_managers_SoundFormat.MP3.__enum__ = com_jpmata_managers_SoundFormat;
com_jpmata_managers_SoundFormat.OGG = ["OGG",2];
com_jpmata_managers_SoundFormat.OGG.toString = $estr;
com_jpmata_managers_SoundFormat.OGG.__enum__ = com_jpmata_managers_SoundFormat;
var com_jpmata_managers_Singleton_$SoundManager = function() { };
$hxClasses["com.jpmata.managers.Singleton_SoundManager"] = com_jpmata_managers_Singleton_$SoundManager;
com_jpmata_managers_Singleton_$SoundManager.__name__ = ["com","jpmata","managers","Singleton_SoundManager"];
var com_jpmata_managers_SoundManager = function(p_class) {
	if(p_class != com_jpmata_managers_Singleton_$SoundManager) throw new js__$Boot_HaxeError("Invalid instantiation.");
	com_jpmata_managers_BaseManager.call(this);
};
$hxClasses["com.jpmata.managers.SoundManager"] = com_jpmata_managers_SoundManager;
com_jpmata_managers_SoundManager.__name__ = ["com","jpmata","managers","SoundManager"];
com_jpmata_managers_SoundManager.__properties__ = {get_instance:"get_instance"}
com_jpmata_managers_SoundManager._instance = null;
com_jpmata_managers_SoundManager.get_instance = function() {
	if(com_jpmata_managers_SoundManager._instance == null) com_jpmata_managers_SoundManager._instance = new com_jpmata_managers_SoundManager(com_jpmata_managers_Singleton_$SoundManager);
	return com_jpmata_managers_SoundManager._instance;
};
com_jpmata_managers_SoundManager.__super__ = com_jpmata_managers_BaseManager;
com_jpmata_managers_SoundManager.prototype = $extend(com_jpmata_managers_BaseManager.prototype,{
	get_isPlayingBGM: function() {
		var currentBGM = this._getBGM();
		var result = false;
		if(currentBGM != null) result = currentBGM.isPlaying;
		return result;
	}
	,get_isEnabled: function() {
		return this._isEnabled;
	}
	,get_currentBGM: function() {
		return this._getBGM();
	}
	,playBGM: function(p_sound,p_isLooping,p_callback,p_isSystem) {
		if(p_isSystem == null) p_isSystem = true;
		if(p_isLooping == null) p_isLooping = true;
		if(!this._isEnabled) return;
		var sound = null;
		if(js_Boot.__instanceof(p_sound,openfl_media_Sound)) sound = p_sound; else if(typeof(p_sound) == "string") sound = ie_lib_utils_assets_AssetsUtility.getSound(this._normalizeSoundURL(Std.string(p_sound))); else return;
		if(sound == null) return;
		if(p_isSystem && !this._isActive_system) return; else if(!p_isSystem && !this._isActive_nonSystem) return;
		if(this._sndTransformBGM.volume <= 0) return;
		var currentBGM = this._getBGM();
		if(currentBGM != null) {
			if(currentBGM.isPlaying) return;
			if(currentBGM.sound.url == sound.url) return;
			if(currentBGM.channel != null) this.stopBGM(true);
		}
		var data = { name : "", type : com_jpmata_managers_SoundType.BGM, sound : sound, channel : null, transform : this._sndTransformBGM, isPlaying : true, isLooping : p_isLooping, isSystem : p_isSystem, lastPos : 0, callback : null};
		if(typeof(p_sound) == "string") data.name = Std.string(p_sound);
		if(p_callback != null) data.callback = p_callback;
		if(data.isLooping) data.channel = data.sound.play(data.lastPos,9999,data.transform); else {
			if(p_callback != null) data.callback = p_callback;
			data.channel = data.sound.play(data.lastPos,1,data.transform);
			data.channel.addEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this._handlerSound_complete));
		}
		this._addSound(data);
	}
	,stopBGM: function(p_isRemoved) {
		if(p_isRemoved == null) p_isRemoved = false;
		var currentBGM = this._getBGM();
		if(currentBGM == null) return;
		if(currentBGM.channel == null) return;
		if(currentBGM.isPlaying) {
			currentBGM.isPlaying = false;
			if(currentBGM.channel != null) {
				currentBGM.lastPos = currentBGM.channel.get_position();
				currentBGM.channel.stop();
			}
		}
		if(p_isRemoved) this._removeSound_byData(currentBGM);
	}
	,playSFX: function(p_sound,p_isLooping,p_callback,p_isSystem) {
		if(p_isSystem == null) p_isSystem = true;
		if(p_isLooping == null) p_isLooping = false;
		if(!this._isEnabled) return null;
		var sound = null;
		if(js_Boot.__instanceof(p_sound,openfl_media_Sound)) sound = p_sound; else if(typeof(p_sound) == "string") sound = ie_lib_utils_assets_AssetsUtility.getSound(this._normalizeSoundURL(Std.string(p_sound))); else return null;
		if(sound == null) return null;
		if(p_isSystem && !this._isActive_system) return null; else if(!p_isSystem && !this._isActive_nonSystem) return null;
		if(this._sndTransformSFX.volume <= 0) return null;
		var data = { name : "", type : com_jpmata_managers_SoundType.SFX, sound : sound, channel : null, transform : this._sndTransformSFX, isPlaying : true, isLooping : p_isLooping, isSystem : p_isSystem, lastPos : 0, callback : null};
		if(p_callback != null) data.callback = p_callback;
		if(data.isLooping) data.channel = data.sound.play(data.lastPos,9999,data.transform); else {
			if(p_callback != null) data.callback = p_callback;
			data.channel = data.sound.play(data.lastPos,1,data.transform);
			data.channel.addEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this._handlerSound_complete));
		}
		this._addSound(data);
		return data.channel;
	}
	,stopSFX: function(p_channel,p_isRemoved) {
		if(p_isRemoved == null) p_isRemoved = false;
		if(p_channel == null) return;
		var _g = 0;
		var _g1 = this._sounds;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data == null) continue;
			if(data.type == com_jpmata_managers_SoundType.SFX) {
				if(data.channel == null) continue;
				if(data.channel == p_channel) {
					if(data.isPlaying) {
						data.isPlaying = false;
						data.lastPos = data.channel.get_position();
						data.channel.stop();
					}
					if(p_isRemoved) this._removeSound_byData(data);
					break;
				}
			}
		}
	}
	,stopSFXs: function(p_isRemoved) {
		if(p_isRemoved == null) p_isRemoved = false;
		var _g = 0;
		var _g1 = this._sounds;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data == null) continue;
			if(data.type == com_jpmata_managers_SoundType.SFX) {
				if(data.channel == null) continue;
				if(data.isPlaying) {
					data.isPlaying = false;
					data.lastPos = data.channel.get_position();
					data.channel.stop();
				}
				if(p_isRemoved) this._removeSound_byData(data);
			}
		}
	}
	,playVO: function(p_sound,p_callback,p_isSystem) {
		if(p_isSystem == null) p_isSystem = true;
		if(!this._isEnabled) return null;
		if(!nk_lib_manager_NickManager.get_instance().get_configGame().enabledVOs) return null;
		var sound = null;
		if(js_Boot.__instanceof(p_sound,openfl_media_Sound)) sound = p_sound; else if(typeof(p_sound) == "string") sound = ie_lib_utils_assets_AssetsUtility.getSound(this._normalizeSoundURL(Std.string(p_sound))); else return null;
		if(sound == null) return null;
		if(p_isSystem && !this._isActive_system) return null; else if(!p_isSystem && !this._isActive_nonSystem) return null;
		if(this._sndTransformVO.volume <= 0) return null;
		var data = { name : "", type : com_jpmata_managers_SoundType.VO, sound : sound, channel : null, transform : this._sndTransformVO, isPlaying : true, isLooping : false, isSystem : p_isSystem, lastPos : 0, callback : null};
		if(p_callback != null) data.callback = p_callback;
		data.channel = data.sound.play(data.lastPos,1,data.transform);
		data.channel.addEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this._handlerSound_complete));
		this._addSound(data);
		return data.channel;
	}
	,stopVO: function(p_channel,p_isRemoved) {
		if(p_isRemoved == null) p_isRemoved = false;
		if(p_channel == null) return;
		var _g = 0;
		var _g1 = this._sounds;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data == null) continue;
			if(data.type == com_jpmata_managers_SoundType.VO) {
				if(data.channel == null) continue;
				if(data.channel == p_channel) {
					if(data.isPlaying) {
						data.isPlaying = false;
						data.lastPos = data.channel.get_position();
						data.channel.stop();
					}
					if(p_isRemoved) this._removeSound_byData(data);
					break;
				}
			}
		}
	}
	,stopVOs: function(p_isRemoved) {
		if(p_isRemoved == null) p_isRemoved = false;
		var _g = 0;
		var _g1 = this._sounds;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data == null) continue;
			if(data.type == com_jpmata_managers_SoundType.VO) {
				if(data.channel == null) continue;
				if(data.isPlaying) {
					data.isPlaying = false;
					data.lastPos = data.channel.get_position();
					data.channel.stop();
				}
				if(p_isRemoved) this._removeSound_byData(data);
			}
		}
	}
	,pauseSounds: function(p_isSystem) {
		if(p_isSystem && !this._isActive_system) return;
		if(!p_isSystem && !this._isActive_nonSystem) return;
		if(p_isSystem) this._isActive_system = false; else if(!p_isSystem) this._isActive_nonSystem = false;
		var _g = 0;
		var _g1 = this._sounds;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data == null) continue;
			if(p_isSystem != data.isSystem) continue;
			if(data.isPlaying) {
				data.isPlaying = false;
				if(data.channel != null) {
					data.lastPos = data.channel.get_position();
					data.channel.stop();
				}
			}
		}
	}
	,resumeSounds: function(p_isSystem) {
		if(p_isSystem && this._isActive_system) return;
		if(!p_isSystem && this._isActive_nonSystem) return;
		if(p_isSystem) this._isActive_system = true; else if(!p_isSystem) this._isActive_nonSystem = true;
		var _g = 0;
		var _g1 = this._sounds;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data == null) continue;
			if(p_isSystem != data.isSystem) continue;
			if(data.type == com_jpmata_managers_SoundType.BGM && this._sndTransformBGM.volume <= 0 || data.type == com_jpmata_managers_SoundType.SFX && this._sndTransformSFX.volume <= 0 || data.type == com_jpmata_managers_SoundType.VO && this._sndTransformVO.volume <= 0) continue;
			if(!data.isPlaying) {
				data.isPlaying = true;
				if(data.isLooping) data.channel = data.sound.play(data.lastPos,9999,data.transform); else {
					data.channel = data.sound.play(data.lastPos,1,data.transform);
					data.channel.addEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this._handlerSound_complete));
				}
			}
		}
	}
	,enableSounds: function(p_enabled) {
		if(this._isEnabled == p_enabled) return;
		this._isEnabled = p_enabled;
		if(this._isEnabled) {
			if(this._sndTransformBGM != null) this._sndTransformBGM.volume = 0.4;
			if(this._sndTransformSFX != null) this._sndTransformSFX.volume = 0.6;
			if(this._sndTransformVO != null) this._sndTransformVO.volume = 0.8;
			var _g = 0;
			var _g1 = this._sounds;
			while(_g < _g1.length) {
				var data = _g1[_g];
				++_g;
				if(data == null) continue;
				if(!data.isSystem) continue;
				if(data.type == com_jpmata_managers_SoundType.BGM && this._sndTransformBGM.volume <= 0 || data.type == com_jpmata_managers_SoundType.SFX && this._sndTransformSFX.volume <= 0 || data.type == com_jpmata_managers_SoundType.VO && this._sndTransformVO.volume <= 0) continue;
				if(data.isPlaying) continue;
				data.isPlaying = true;
				if(data.type == com_jpmata_managers_SoundType.BGM) {
					if(ie_lib_utils_device_BrowserInfoUtility.isCocoonJS()) {
						var length = Reflect.field(data.channel,"__soundInstance").getDuration();
						if(data.lastPos > length) data.lastPos = data.lastPos / 1000000;
					}
				}
				if(data.isLooping) data.channel = data.sound.play(data.lastPos,9999,data.transform); else {
					data.channel = data.sound.play(data.lastPos,1,data.transform);
					data.channel.addEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this._handlerSound_complete));
				}
			}
		} else {
			if(this._sndTransformBGM != null) this._sndTransformBGM.volume = 0;
			if(this._sndTransformSFX != null) this._sndTransformSFX.volume = 0;
			if(this._sndTransformVO != null) this._sndTransformVO.volume = 0;
			this.stopBGM(false);
			this.stopSFXs(false);
			this.stopVOs(false);
		}
		this.dispatchEvent(new com_jpmata_managers_SoundManagerEvent("sndMgrEvt_updtedEnabled"));
	}
	,_handlerSound_complete: function(evt) {
		if(evt.target != null) evt.target.removeEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this._handlerSound_complete));
		var sound = this._getSound(evt.target);
		if(sound == null) throw new js__$Boot_HaxeError("Cannot continue callback for sound complete. Sound was not found.");
		if(sound.callback != null) sound.callback();
		this._removeSound_byData(sound);
	}
	,_initProps: function() {
		com_jpmata_managers_BaseManager.prototype._initProps.call(this);
		this._sounds = [];
		this._sndTransformBGM = new openfl_media_SoundTransform(0.4,-0.0001);
		this._sndTransformSFX = new openfl_media_SoundTransform(0.6,-0.0001);
		this._sndTransformVO = new openfl_media_SoundTransform(0.8,-0.0001);
		this._isActive_system = true;
		this._isActive_nonSystem = true;
		this._isEnabled = true;
	}
	,_initListeners: function() {
		com_jpmata_managers_BaseManager.prototype._initListeners.call(this);
		this.addEventListener("sndMgrEvt_updtedEnabled",($_=this._satellite,$bind($_,$_.handler)));
	}
	,_addSound: function(p_data) {
		if(p_data.type == com_jpmata_managers_SoundType.BGM) {
			if(this._getBGM() != null) throw new js__$Boot_HaxeError("Cannot add BGM sound. An instance of BGM has not been stopped.");
		}
		this._sounds.push(p_data);
	}
	,_removeSound_byData: function(p_data) {
		var index = HxOverrides.indexOf(this._sounds,p_data,0);
		if(index != -1) {
			if(this._sounds[index].channel != null) this._sounds[index].channel.removeEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this._handlerSound_complete));
			if(this._sounds[index].isPlaying) this._sounds[index].channel.stop();
			this._sounds[index].name = null;
			this._sounds[index].type = null;
			this._sounds[index].sound = null;
			this._sounds[index].channel = null;
			this._sounds[index].transform = null;
			this._sounds[index].isPlaying = false;
			this._sounds[index].isLooping = false;
			this._sounds[index].lastPos = 0;
			this._sounds[index].callback = null;
			this._sounds.splice(index,1);
		}
	}
	,_getSound: function(p_instance) {
		var result = null;
		var _g1 = 0;
		var _g = this._sounds.length;
		while(_g1 < _g) {
			var i = _g1++;
			var data = this._sounds[i];
			if(js_Boot.__instanceof(p_instance,openfl_media_Sound)) {
				if(data.sound == p_instance) {
					result = data;
					break;
				}
			} else if(js_Boot.__instanceof(p_instance,openfl_media_SoundChannel)) {
				if(data.channel == p_instance) {
					result = data;
					break;
				}
			}
		}
		return result;
	}
	,_getBGM: function() {
		var result = null;
		var _g1 = 0;
		var _g = this._sounds.length;
		while(_g1 < _g) {
			var i = _g1++;
			var data = this._sounds[i];
			if(data.type == com_jpmata_managers_SoundType.BGM) {
				result = data;
				break;
			}
		}
		return result;
	}
	,_normalizeSoundURL: function(p_path) {
		var result = p_path;
		var regex = new EReg("(\\.[\\w\\d]{3})","");
		if(com_jpmata_managers_SoundManager.supportedAudioFormat == com_jpmata_managers_SoundFormat.OGG) result = regex.replace(result,".ogg"); else if(com_jpmata_managers_SoundManager.supportedAudioFormat == com_jpmata_managers_SoundFormat.MP3) result = regex.replace(result,".mp3");
		return result;
	}
	,__class__: com_jpmata_managers_SoundManager
	,__properties__: $extend(com_jpmata_managers_BaseManager.prototype.__properties__,{get_currentBGM:"get_currentBGM",get_isEnabled:"get_isEnabled",get_isPlayingBGM:"get_isPlayingBGM"})
});
var com_jpmata_managers_SoundManagerEvent = function(p_type,p_data,p_bubbles,p_cancelable) {
	if(p_cancelable == null) p_cancelable = false;
	if(p_bubbles == null) p_bubbles = false;
	ie_lib_events_BaseEvent.call(this,p_type,p_data,p_bubbles,p_cancelable);
};
$hxClasses["com.jpmata.managers.SoundManagerEvent"] = com_jpmata_managers_SoundManagerEvent;
com_jpmata_managers_SoundManagerEvent.__name__ = ["com","jpmata","managers","SoundManagerEvent"];
com_jpmata_managers_SoundManagerEvent.__super__ = ie_lib_events_BaseEvent;
com_jpmata_managers_SoundManagerEvent.prototype = $extend(ie_lib_events_BaseEvent.prototype,{
	__class__: com_jpmata_managers_SoundManagerEvent
});
var com_jpmata_managers_Singleton_$WindowManager = function() { };
$hxClasses["com.jpmata.managers.Singleton_WindowManager"] = com_jpmata_managers_Singleton_$WindowManager;
com_jpmata_managers_Singleton_$WindowManager.__name__ = ["com","jpmata","managers","Singleton_WindowManager"];
var com_jpmata_managers_WindowManager = function(p_class) {
	if(p_class != com_jpmata_managers_Singleton_$WindowManager) throw new js__$Boot_HaxeError("Invalid instantiation.");
	com_jpmata_managers_BaseManager.call(this);
};
$hxClasses["com.jpmata.managers.WindowManager"] = com_jpmata_managers_WindowManager;
com_jpmata_managers_WindowManager.__name__ = ["com","jpmata","managers","WindowManager"];
com_jpmata_managers_WindowManager.__properties__ = {get_instance:"get_instance"}
com_jpmata_managers_WindowManager.instance = null;
com_jpmata_managers_WindowManager._instance = null;
com_jpmata_managers_WindowManager._isInit = null;
com_jpmata_managers_WindowManager.get_instance = function() {
	if(com_jpmata_managers_WindowManager._instance == null) com_jpmata_managers_WindowManager._instance = new com_jpmata_managers_WindowManager(com_jpmata_managers_Singleton_$WindowManager);
	return com_jpmata_managers_WindowManager._instance;
};
com_jpmata_managers_WindowManager.__super__ = com_jpmata_managers_BaseManager;
com_jpmata_managers_WindowManager.prototype = $extend(com_jpmata_managers_BaseManager.prototype,{
	start: function() {
		if(!com_jpmata_managers_WindowManager._isInit) com_jpmata_managers_WindowManager._isInit = true;
	}
	,resume: function() {
		if(nk_lib_manager_NickManager.get_instance().get_configNick().services.enableTracking == true) nicksdk_event_GameEventEmitter.sendGameEvent("onResume");
		com_jpmata_managers_SoundManager.get_instance().resumeSounds(true);
		ie_lib_manager_ScreenManager.activateScreen();
	}
	,pause: function() {
		if(nk_lib_manager_NickManager.get_instance().get_configNick().services.enableTracking == true) nicksdk_event_GameEventEmitter.sendGameEvent("onPause");
		com_jpmata_managers_SoundManager.get_instance().pauseSounds(true);
		ie_lib_manager_ScreenManager.deactivateScreen();
	}
	,_handler_pause: function(evt) {
		this.pause();
	}
	,_handler_resume: function(evt) {
		this.resume();
	}
	,_handler_visibilityChange: function(evt) {
		if(window.document.webkitHidden || window.document.hidden) this._handler_pause(); else this._handler_resume();
	}
	,_initProps: function() {
		com_jpmata_managers_BaseManager.prototype._initProps.call(this);
		com_jpmata_managers_WindowManager._isInit = false;
	}
	,_initListeners: function() {
		com_jpmata_managers_BaseManager.prototype._initListeners.call(this);
		window.addEventListener("blur",$bind(this,this._handler_pause));
		window.addEventListener("focus",$bind(this,this._handler_resume));
		window.addEventListener("pagehide",$bind(this,this._handler_pause));
		window.addEventListener("pageshow",$bind(this,this._handler_resume));
		window.document.addEventListener("webkitvisibilitychange",$bind(this,this._handler_visibilityChange));
		window.document.addEventListener("visibilitychange",$bind(this,this._handler_visibilityChange));
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.ACTIVATE,$bind(this,this._handler_resume));
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.DEACTIVATE,$bind(this,this._handler_pause));
	}
	,__class__: com_jpmata_managers_WindowManager
});
var com_jpmata_utils_hxanimation_HxModAnimationUtility = function() { };
$hxClasses["com.jpmata.utils.hxanimation.HxModAnimationUtility"] = com_jpmata_utils_hxanimation_HxModAnimationUtility;
com_jpmata_utils_hxanimation_HxModAnimationUtility.__name__ = ["com","jpmata","utils","hxanimation","HxModAnimationUtility"];
com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation = function(p_anim) {
	var arrTemp = p_anim.split("/");
	var strAnim = arrTemp.pop();
	var urlRoot = arrTemp.join("/") + "/";
	var urlAnim = urlRoot + strAnim;
	var urlAtlas = urlRoot + "atlas.json";
	var objAnim;
	if(com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAnim.exists(urlAnim)) {
		objAnim = com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAnim.get(urlAnim);
		return com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAnim.get(urlAnim);
	}
	var objAtlas = com_jpmata_utils_hxanimation_HxModAnimationUtility._getAtlas(urlRoot);
	objAnim = com_jpmata_utils_hxanimation_HxModAnimationUtility._getAnim(objAtlas,urlAnim);
	return objAnim;
};
com_jpmata_utils_hxanimation_HxModAnimationUtility._getAtlas = function(p_root) {
	var objAtlas = null;
	if(com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAtlas.exists(p_root)) objAtlas = com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAtlas.get(p_root); else {
		objAtlas = com_nicollee_hxanimation_HxModAtlasParser.parseAtlas(p_root);
		com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAtlas.set(p_root,objAtlas);
	}
	return objAtlas;
};
com_jpmata_utils_hxanimation_HxModAnimationUtility._getAnim = function(p_objAtlas,p_anim) {
	var objAnim = null;
	if(com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAnim.exists(p_anim)) objAnim = com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAnim.get(p_anim); else {
		if(ie_lib_utils_assets_EmbeddedJSON.getValue(p_anim) != null) objAnim = com_nicollee_hxanimation_HxModAnimationParser.parseAnimation(p_objAtlas,ie_lib_utils_assets_EmbeddedJSON.getValue(p_anim)); else objAnim = com_nicollee_hxanimation_HxModAnimationParser.parseAnimation(p_objAtlas,ie_lib_utils_assets_AssetsUtility.getText(p_anim));
		var value = objAnim;
		com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAnim.set(p_anim,value);
	}
	return objAnim;
};
var ie_lib_interfaces_IDestroyable = function() { };
$hxClasses["ie.lib.interfaces.IDestroyable"] = ie_lib_interfaces_IDestroyable;
ie_lib_interfaces_IDestroyable.__name__ = ["ie","lib","interfaces","IDestroyable"];
ie_lib_interfaces_IDestroyable.prototype = {
	__class__: ie_lib_interfaces_IDestroyable
};
var com_jpmata_views_BaseView = function(p_params) {
	openfl_display_Sprite.call(this);
	this._initProps(p_params);
	this._initListeners_primary();
	this._initListeners();
	this._initGraphics();
};
$hxClasses["com.jpmata.views.BaseView"] = com_jpmata_views_BaseView;
com_jpmata_views_BaseView.__name__ = ["com","jpmata","views","BaseView"];
com_jpmata_views_BaseView.__interfaces__ = [ie_lib_interfaces_IDestroyable];
com_jpmata_views_BaseView.__super__ = openfl_display_Sprite;
com_jpmata_views_BaseView.prototype = $extend(openfl_display_Sprite.prototype,{
	destroy: function() {
		if(this._satellite != null) this._satellite.removeSubscriber(this);
		this._killListeners_primary();
		this._killGraphics();
		this._killListeners();
		this._killProps();
		if(this.parent != null) this.parent.removeChild(this);
	}
	,resume: function() {
		if(this._isRunning) return;
		this._isRunning = true;
		this._resume();
	}
	,pause: function() {
		if(!this._isRunning) return;
		this._isRunning = false;
		this._pause();
	}
	,_handler_addedToStage: function(evt) {
		if(this._isActive) return;
		this._isActive = true;
	}
	,_handler_removedFromStage: function(evt) {
		if(!this._isActive) return;
		this._isActive = false;
	}
	,_initGraphics: function() {
	}
	,_initListeners_primary: function() {
		this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._handler_addedToStage));
		this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this._handler_removedFromStage));
	}
	,_initListeners: function() {
	}
	,_initProps: function(p_params) {
		this._satellite = ie_lib_events_satellite_EventSatellite.instance();
		this._isActive = false;
		this._isRunning = true;
	}
	,_killGraphics: function() {
	}
	,_killListeners_primary: function() {
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._handler_addedToStage));
		this.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this._handler_removedFromStage));
	}
	,_killListeners: function() {
	}
	,_killProps: function() {
		this._satellite = null;
		this._isActive = null;
		this._isRunning = null;
	}
	,_pause: function() {
	}
	,_resume: function() {
	}
	,__class__: com_jpmata_views_BaseView
});
var ie_lib_popup_Popup = function() {
	openfl_display_Sprite.call(this);
};
$hxClasses["ie.lib.popup.Popup"] = ie_lib_popup_Popup;
ie_lib_popup_Popup.__name__ = ["ie","lib","popup","Popup"];
ie_lib_popup_Popup.__super__ = openfl_display_Sprite;
ie_lib_popup_Popup.prototype = $extend(openfl_display_Sprite.prototype,{
	init: function() {
	}
	,construct: function() {
	}
	,popUpWillDisappear: function() {
		this.enableButtons(false);
	}
	,popUpWillAppear: function() {
		if(!this.inited) {
			this.inited = true;
			this.init();
		}
	}
	,popUpDidDisappear: function() {
	}
	,popUpDidAppear: function() {
		if(!this.constructed) {
			this.constructed = true;
			this.construct();
		} else this.enableButtons();
	}
	,popUpDidResize: function() {
	}
	,popUpActivate: function() {
	}
	,popUpDeactivate: function() {
	}
	,enableButtons: function(bool) {
		if(bool == null) bool = true;
	}
	,destroy: function() {
		this.removeChildren();
	}
	,__class__: ie_lib_popup_Popup
});
var com_jpmata_views_screens_openfl_ExtendedPopup = function(p_params) {
	ie_lib_popup_Popup.call(this);
	this._initProps(p_params);
	this._initListeners_primary();
};
$hxClasses["com.jpmata.views.screens.openfl.ExtendedPopup"] = com_jpmata_views_screens_openfl_ExtendedPopup;
com_jpmata_views_screens_openfl_ExtendedPopup.__name__ = ["com","jpmata","views","screens","openfl","ExtendedPopup"];
com_jpmata_views_screens_openfl_ExtendedPopup.__super__ = ie_lib_popup_Popup;
com_jpmata_views_screens_openfl_ExtendedPopup.prototype = $extend(ie_lib_popup_Popup.prototype,{
	init: function() {
		ie_lib_popup_Popup.prototype.init.call(this);
		this._initGraphics();
	}
	,construct: function() {
		ie_lib_popup_Popup.prototype.construct.call(this);
		this._initListeners();
		this._initAnimations();
	}
	,destroy: function() {
		if(this._satellite != null) this._satellite.removeSubscriber(this);
		this._killListeners_primary();
		this._killAnimations();
		this._killGraphics();
		this._killListeners();
		this._killProps();
		if(this.parent != null) this.parent.removeChild(this);
		ie_lib_popup_Popup.prototype.destroy.call(this);
	}
	,popUpActivate: function() {
		if(this._isRunning) return;
		this._isRunning = true;
		this._resume();
	}
	,popUpDeactivate: function() {
		if(!this._isRunning) return;
		this._isRunning = false;
		this._pause();
	}
	,_handler_addedToStage: function(evt) {
		if(this._isActive) return;
		this._isActive = true;
	}
	,_handler_removedFromStage: function(evt) {
		if(!this._isActive) return;
		this._isActive = false;
	}
	,_initAnimations: function() {
	}
	,_initGraphics: function() {
		if(this._sprOverlay == null) {
			this._sprOverlay = new openfl_display_Sprite();
			this.addChild(this._sprOverlay);
		}
		if(this._bmOverlay == null) {
			var stageWidth = 0;
			var stageHeight = 0;
			if(ie_lib_utils_display_DisplayUtility.get_nominalWidth() == 0 && ie_lib_utils_display_DisplayUtility.get_nominalHeight() == 0) {
				stageWidth = openfl_Lib.current.stage.stageWidth + 2;
				stageHeight = openfl_Lib.current.stage.stageHeight + 2;
			} else {
				stageWidth = ie_lib_utils_display_DisplayUtility.get_nominalWidth() + 2;
				stageHeight = ie_lib_utils_display_DisplayUtility.get_nominalHeight() + 2;
			}
			if(ie_lib_utils_display_DisplayUtility.get_maxWidth() != 0) this._bmOverlay = new openfl_display_Bitmap(new openfl_display_BitmapData(Std["int"](ie_lib_utils_display_DisplayUtility.get_maxWidth() + 2),stageHeight | 0,false,0)); else this._bmOverlay = new openfl_display_Bitmap(new openfl_display_BitmapData(stageWidth | 0,stageHeight | 0,false,0));
			this._bmOverlay.set_alpha(0.8);
			this._sprOverlay.addChild(this._bmOverlay);
			this._sprOverlay.set_x(stageWidth * 0.5 - this._sprOverlay.get_width() * 0.5);
			this._sprOverlay.set_y(stageHeight * 0.5 - this._sprOverlay.get_height() * 0.5);
		}
	}
	,_initListeners_primary: function() {
		this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._handler_addedToStage));
		this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this._handler_removedFromStage));
	}
	,_initListeners: function() {
	}
	,_initProps: function(p_params) {
		this._satellite = ie_lib_events_satellite_EventSatellite.instance();
		this._isActive = false;
		this._isRunning = true;
	}
	,_killAnimations: function() {
	}
	,_killGraphics: function() {
		if(this._bmOverlay != null) {
			motion_Actuate.stop(this._bmOverlay,null,false,false);
			if(this._bmOverlay.parent != null) this._bmOverlay.parent.removeChild(this._bmOverlay);
			if(this._bmOverlay.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmOverlay.bitmapData);
			this._bmOverlay.bitmapData = null;
		}
		this._bmOverlay = null;
		if(this._sprOverlay != null) {
			motion_Actuate.stop(this._sprOverlay,null,false,false);
			this._sprOverlay.get_graphics().clear();
			if(this._sprOverlay.parent != null) this._sprOverlay.parent.removeChild(this._sprOverlay);
		}
		this._sprOverlay = null;
	}
	,_killListeners_primary: function() {
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._handler_addedToStage));
		this.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this._handler_removedFromStage));
	}
	,_killListeners: function() {
	}
	,_killProps: function() {
		this._satellite = null;
		this._isActive = null;
		this._isRunning = null;
	}
	,_pause: function() {
		this.enableButtons(false);
	}
	,_resume: function() {
		this.enableButtons(true);
	}
	,__class__: com_jpmata_views_screens_openfl_ExtendedPopup
});
var ie_lib_screen_Screen = function() {
	openfl_display_Sprite.call(this);
};
$hxClasses["ie.lib.screen.Screen"] = ie_lib_screen_Screen;
ie_lib_screen_Screen.__name__ = ["ie","lib","screen","Screen"];
ie_lib_screen_Screen.__super__ = openfl_display_Sprite;
ie_lib_screen_Screen.prototype = $extend(openfl_display_Sprite.prototype,{
	init: function() {
	}
	,construct: function() {
	}
	,screenWillDisappear: function() {
		this.enableButtons(false);
	}
	,screenWillAppear: function() {
		if(!this.inited) {
			this.inited = true;
			this.init();
		}
		this.enableButtons(false);
	}
	,screenDidDisappear: function() {
	}
	,screenDidAppear: function() {
		if(!this.constructed) {
			this.constructed = true;
			this.construct();
		}
		this.enableButtons();
	}
	,screenDidResize: function() {
	}
	,popUpWillDisappear: function() {
	}
	,popUpWillAppear: function() {
		this.enableButtons(false);
	}
	,popUpDidDisappear: function() {
		this.enableButtons();
	}
	,popUpDidAppear: function() {
	}
	,screenActivate: function() {
	}
	,screenDeactivate: function() {
	}
	,enableButtons: function(bool) {
		if(bool == null) bool = true;
	}
	,destroy: function() {
	}
	,__class__: ie_lib_screen_Screen
});
var com_jpmata_views_screens_openfl_ExtendedScreen = function(p_params) {
	ie_lib_screen_Screen.call(this);
	this._initProps(p_params);
	this._initListeners_primary();
};
$hxClasses["com.jpmata.views.screens.openfl.ExtendedScreen"] = com_jpmata_views_screens_openfl_ExtendedScreen;
com_jpmata_views_screens_openfl_ExtendedScreen.__name__ = ["com","jpmata","views","screens","openfl","ExtendedScreen"];
com_jpmata_views_screens_openfl_ExtendedScreen.__super__ = ie_lib_screen_Screen;
com_jpmata_views_screens_openfl_ExtendedScreen.prototype = $extend(ie_lib_screen_Screen.prototype,{
	init: function() {
		ie_lib_screen_Screen.prototype.init.call(this);
		this._initGraphics();
	}
	,construct: function() {
		ie_lib_screen_Screen.prototype.construct.call(this);
		this._initListeners();
		this._initSounds();
		this._initAnimations();
	}
	,destroy: function() {
		if(this._satellite != null) this._satellite.removeSubscriber(this);
		this._killListeners_primary();
		this._killAnimations();
		this._killSounds();
		this._killGraphics();
		this._killListeners();
		this._killProps();
		if(this.parent != null) this.parent.removeChild(this);
		ie_lib_screen_Screen.prototype.destroy.call(this);
	}
	,screenActivate: function() {
		if(this._isRunning) return;
		this._isRunning = true;
		this._resume();
	}
	,screenDeactivate: function() {
		if(!this._isRunning) return;
		this._isRunning = false;
		this._pause();
	}
	,_handler_addedToStage: function(evt) {
		if(this._isActive) return;
		this._isActive = true;
	}
	,_handler_removedFromStage: function(evt) {
		if(!this._isActive) return;
		this._isActive = false;
	}
	,_initAnimations: function() {
	}
	,_initGraphics: function() {
	}
	,_initListeners_primary: function() {
		this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._handler_addedToStage));
		this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this._handler_removedFromStage));
	}
	,_initListeners: function() {
	}
	,_initProps: function(p_params) {
		this._satellite = ie_lib_events_satellite_EventSatellite.instance();
		this._isActive = false;
		this._isRunning = true;
	}
	,_initSounds: function() {
	}
	,_killAnimations: function() {
	}
	,_killGraphics: function() {
	}
	,_killListeners_primary: function() {
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this._handler_addedToStage));
		this.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this._handler_removedFromStage));
	}
	,_killListeners: function() {
	}
	,_killProps: function() {
		this._satellite = null;
		this._isActive = null;
		this._isRunning = null;
	}
	,_killSounds: function() {
	}
	,_pause: function() {
		this.enableButtons(false);
		motion_Actuate.pauseAll();
	}
	,_resume: function() {
		this.enableButtons(true);
		motion_Actuate.resumeAll();
	}
	,__class__: com_jpmata_views_screens_openfl_ExtendedScreen
});
var com_jpmata_views_text_BasicTextField = function(p_width,p_height,p_wordWrap,p_bgColor) {
	com_jpmata_views_BaseView.call(this,[p_width,p_height,p_wordWrap,p_bgColor]);
};
$hxClasses["com.jpmata.views.text.BasicTextField"] = com_jpmata_views_text_BasicTextField;
com_jpmata_views_text_BasicTextField.__name__ = ["com","jpmata","views","text","BasicTextField"];
com_jpmata_views_text_BasicTextField.__super__ = com_jpmata_views_BaseView;
com_jpmata_views_text_BasicTextField.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	get_boundsHeight: function() {
		return this._boundsHeight;
	}
	,get_boundsWidth: function() {
		return this._boundsWidth;
	}
	,get_text: function() {
		var result = null;
		if(this._tf != null) result = this._tf.get_text();
		return result;
	}
	,set_text: function(p_val) {
		var result = null;
		if(this._tf == null) return result;
		this._setText(p_val);
		result = this._tf.get_text();
		return result;
	}
	,setString: function(p_val,p_isBold,p_isItalic,p_isUnderline) {
		if(p_isUnderline == null) p_isUnderline = false;
		if(p_isItalic == null) p_isItalic = false;
		if(p_isBold == null) p_isBold = false;
		if(this._tf == null) return;
		var format = this._tf.getTextFormat();
		if(com_jpmata_views_text_BasicTextField.useGlobalFont) format.font = com_jpmata_views_text_BasicTextField.globalFont; else {
			var font = com_jpmata_managers_FontManager.instance().getFontByName(p_val.TYPE);
			if(font == null) throw new js__$Boot_HaxeError("Font not found. Initialize font manager first.");
			format.font = font.name;
		}
		format.size = p_val.SIZE | 0;
		format.color = p_val.COLOR | 0;
		format.bold = p_isBold;
		format.italic = p_isItalic;
		format.underline = p_isUnderline;
		this._setAlignment(p_val,format);
		this._tf.set_defaultTextFormat(format);
		this._setText(p_val.VALUE);
		this._tf.setTextFormat(format);
	}
	,setColor: function(p_color,p_startIndex,p_endIndex) {
		if(p_endIndex == null) p_endIndex = -1;
		if(p_startIndex == null) p_startIndex = -1;
		if(this._tf == null) return;
		var format = this._tf.getTextFormat();
		format.color = p_color;
		if(p_startIndex == -1 && p_endIndex == -1) {
			this._tf.set_defaultTextFormat(format);
			this._tf.setTextFormat(format);
		} else {
			var startIndex = 0;
			var endIndex = this._tf.get_length();
			if(p_startIndex != -1) startIndex = p_startIndex;
			if(p_endIndex != -1) endIndex = p_endIndex;
			this._tf.setTextFormat(format,startIndex,endIndex);
		}
	}
	,_initGraphics: function() {
		com_jpmata_views_BaseView.prototype._initGraphics.call(this);
		this.mouseEnabled = false;
		this.mouseChildren = false;
		if(this._bmBg == null && this._bgColor != -1) {
			this._bmBg = new openfl_display_Bitmap(new openfl_display_BitmapData(this._boundsWidth | 0,this._boundsHeight | 0,false,this._bgColor));
			this._bmBg.smoothing = true;
			this._bmBg.set_x(0);
			this._bmBg.set_y(0);
			this.addChild(this._bmBg);
		}
		if(this._tf == null) {
			this._tf = new openfl_text_TextField();
			this._tf.set_selectable(false);
			this._tf.mouseEnabled = false;
			this._tf.set_width(this._boundsWidth);
			this._tf.set_height(this._boundsHeight);
			if(com_jpmata_views_text_BasicTextField.debugMode) {
				this._tf.set_border(true);
				this._tf.set_borderColor(0);
			}
			this.addChild(this._tf);
		}
		if(this._tfLine == null) this._tfLine = new openfl_text_TextField();
		if(com_jpmata_views_text_BasicTextField.debugMode) this.get_graphics().lineStyle(1,16711680,1); else this.get_graphics().lineStyle(1,16711680,0);
		this.get_graphics().beginFill(16711680,0);
		this.get_graphics().drawRect(0,0,this._boundsWidth,this._boundsHeight);
		this.get_graphics().endFill();
	}
	,_initProps: function(p_params) {
		com_jpmata_views_BaseView.prototype._initProps.call(this);
		this._boundsWidth = 0;
		this._boundsHeight = 0;
		this._hAlign = com_jpmata_views_text_HAlignType.CENTER;
		this._vAlign = com_jpmata_views_text_VAlignType.MIDDLE;
		this._wordWrap = false;
		this._bgColor = -1;
		if(p_params != null) {
			if(p_params.length > 0) {
				if(p_params[0] != null) this._boundsWidth = Std.parseFloat(p_params[0]);
				if(p_params[1] != null) this._boundsHeight = Std.parseFloat(p_params[1]);
				if(p_params[2] != null) this._wordWrap = js_Boot.__cast(p_params[2] , Bool); else if(p_params[2] == null) this._wordWrap = com_jpmata_views_text_BasicTextField.wordWrapAllTexts;
				if(p_params[3] != null) this._bgColor = Std.parseInt(p_params[4]);
			}
		}
	}
	,_killGraphics: function() {
		if(this._bmBg != null) {
			if(this._bmBg.parent != null) this._bmBg.parent.removeChild(this._bmBg);
			if(this._bmBg.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmBg.bitmapData);
			this._bmBg.bitmapData = null;
		}
		this._bmBg = null;
		if(this._tf != null) {
			if(this._tf.parent != null) this._tf.parent.removeChild(this._tf);
		}
		this._tf = null;
		if(this._tfLine != null) {
			if(this._tfLine.parent != null) this._tfLine.parent.removeChild(this._tfLine);
		}
		this._tfLine = null;
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,_killProps: function() {
		this._boundsWidth = 0;
		this._boundsHeight = 0;
		this._hAlign = null;
		this._vAlign = null;
		this._bgColor = 0;
		this._wordWrap = false;
		com_jpmata_views_BaseView.prototype._killProps.call(this);
	}
	,_getTextBounds: function(p_str,p_startIndex,p_endIndex) {
		if(p_endIndex == null) p_endIndex = -1;
		if(p_startIndex == null) p_startIndex = -1;
		var result = null;
		if(this._tf == null) return result;
		if(this._tfLine == null) return result;
		var lineY = 0;
		var strLines = p_str.split("\n");
		var startIndex = 0;
		var endIndex = strLines.length;
		if(p_startIndex != -1) startIndex = p_startIndex;
		if(p_endIndex != -1) endIndex = p_endIndex;
		var format = this._tf.getTextFormat();
		var rectX = null;
		var rectY = 0;
		var rectWidth = 0;
		var rectHeight = 0;
		var prevHeight = 0;
		var _g = startIndex;
		while(_g < endIndex) {
			var i = _g++;
			this._tfLine.set_x(this._tf.get_x());
			this._tfLine.set_y(this._tf.get_y());
			this._tfLine.set_width(this._tf.get_width());
			this._tfLine.set_height(this._tf.get_height());
			this._tfLine.set_autoSize(this._tf.get_autoSize());
			this._tfLine.set_defaultTextFormat(format);
			this._tfLine.set_text(strLines[i]);
			this._tfLine.setTextFormat(format);
			var metrics = this._tfLine.getLineMetrics(0);
			if(rectX == null) rectX = metrics.x; else if(metrics.x < rectX) rectX = metrics.x;
			if(metrics.width > rectWidth) rectWidth = metrics.width;
			if(StringTools.trim(this._tfLine.get_text()).length != 0) {
				rectHeight += metrics.height;
				prevHeight = metrics.height;
			} else rectHeight += prevHeight;
		}
		result = new openfl_geom_Rectangle(rectX,rectY,rectWidth,rectHeight);
		result.offset(this._tf.get_x(),this._tf.get_y());
		result.width = result.width * this._tf.get_scaleX();
		result.height = result.height * this._tf.get_scaleY();
		return result;
	}
	,_isLineHeapOutOfBounds: function(p_heapLine,p_str) {
		var result = false;
		if(p_heapLine == null) return result;
		if(p_str == null) return result;
		if(StringTools.trim(p_str).length == 0) return result;
		var tempLine = "";
		var _g = 0;
		while(_g < p_heapLine.length) {
			var string = p_heapLine[_g];
			++_g;
			tempLine += string;
		}
		var bounds = this._getTextBounds(tempLine + " " + p_str);
		if(bounds == null) return result;
		if(bounds.width > this._boundsWidth * 0.95) result = true;
		bounds.setEmpty();
		bounds = null;
		return result;
	}
	,_setAlignment: function(p_val,p_format) {
		if(this._tf == null) return;
		if(p_val == null) return;
		if(p_format == null) return;
		if(com_jpmata_managers_FontManager.instance().get_isRightToLeft() == true) {
			this._hAlign = com_jpmata_views_text_HAlignType.RIGHT;
			p_format.align = openfl_text_TextFormatAlign.RIGHT;
		} else {
			var _g = p_val.HALIGN.toUpperCase();
			switch(_g) {
			case "LEFT":
				this._hAlign = com_jpmata_views_text_HAlignType.LEFT;
				p_format.align = openfl_text_TextFormatAlign.LEFT;
				break;
			case "RIGHT":
				this._hAlign = com_jpmata_views_text_HAlignType.RIGHT;
				p_format.align = openfl_text_TextFormatAlign.RIGHT;
				break;
			case "CENTER":
				this._hAlign = com_jpmata_views_text_HAlignType.CENTER;
				p_format.align = openfl_text_TextFormatAlign.CENTER;
				break;
			}
		}
		var _g1 = p_val.VALIGN.toUpperCase();
		switch(_g1) {
		case "TOP":
			this._vAlign = com_jpmata_views_text_VAlignType.TOP;
			break;
		case "BOTTOM":
			this._vAlign = com_jpmata_views_text_VAlignType.BOTTOM;
			break;
		case "MIDDLE":
			this._vAlign = com_jpmata_views_text_VAlignType.MIDDLE;
			break;
		}
	}
	,_setPosition: function() {
		if(this._tf == null) return;
		var bounds = this._getTextBounds(this._tf.get_text());
		if(bounds == null) return;
		this._tf.set_x(0);
		if(bounds.height > this._boundsHeight * 0.95) this._tf.set_height(bounds.height);
		var _g = this._vAlign;
		switch(_g[1]) {
		case 0:
			this._tf.set_y(0);
			break;
		case 2:
			this._tf.set_y(this._boundsHeight - bounds.height);
			break;
		case 1:
			this._tf.set_y(this._boundsHeight * 0.5 - bounds.height * 0.5);
			break;
		}
		if(com_jpmata_views_text_BasicTextField.adjustByPlatform) {
			if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.DESKTOP && ie_lib_utils_device_BrowserInfoUtility.detectBrowser().browserName == "Firefox" || ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS && !ie_lib_utils_device_BrowserInfoUtility.isCocoonJS()) {
				var _g1 = this._tf;
				_g1.set_y(_g1.get_y() - this._tf.get_defaultTextFormat().size * 0.185 / this._tf.get_numLines());
			}
		}
		bounds.setEmpty();
		bounds = null;
	}
	,_setText: function(p_str) {
		if(com_jpmata_views_text_BasicTextField.testDiacritics) p_str = "éÉâçÇÂ¿ " + p_str;
		this._tf.set_x(0);
		this._tf.set_y(0);
		this._tf.set_width(this._boundsWidth);
		this._tf.set_height(this._boundsHeight);
		this._tf.set_scaleX(this._tf.set_scaleY(1));
		if(ie_lib_utils_device_BrowserInfoUtility.isCocoonJS() && ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS) {
			p_str = StringTools.replace(p_str,"<br/>"," \n");
			p_str = StringTools.replace(p_str,"<BR/>"," \n");
		} else {
			p_str = StringTools.replace(p_str,"<br/>","\n");
			p_str = StringTools.replace(p_str,"<BR/>","\n");
		}
		this._setWordWrap(p_str);
	}
	,_setWordWrap: function(p_str) {
		if(this._wordWrap) {
			var heapSpaces = p_str.split(" ");
			var lineWidth = 0;
			var result = "";
			var heapLines = [];
			if(heapSpaces.length == 1) result = heapSpaces.pop(); else {
				var _g1 = 0;
				var _g = heapSpaces.length;
				while(_g1 < _g) {
					var i = _g1++;
					var heapHardBreak = heapSpaces[i].split("\n");
					if(i > 0) heapLines.push(" ");
					var _g3 = 0;
					var _g2 = heapHardBreak.length;
					while(_g3 < _g2) {
						var j = _g3++;
						if(j > 0) {
							var _g4 = 0;
							while(_g4 < heapLines.length) {
								var elemLine = heapLines[_g4];
								++_g4;
								result += elemLine;
							}
							if(ie_lib_utils_device_BrowserInfoUtility.isCocoonJS() && ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS) result += " \n"; else result += "\n";
							heapLines = [];
						}
						heapLines.push(heapHardBreak[j]);
						if(this._isLineHeapOutOfBounds(heapLines,heapSpaces[i + 1])) {
							if(i < heapSpaces.length - 1) {
								var _g41 = 0;
								while(_g41 < heapLines.length) {
									var elemLine1 = heapLines[_g41];
									++_g41;
									result += elemLine1;
								}
								if(ie_lib_utils_device_BrowserInfoUtility.isCocoonJS() && ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS) result += " \n"; else result += "\n";
								heapLines = [];
							}
						}
					}
				}
				var _g5 = 0;
				while(_g5 < heapLines.length) {
					var elemLine2 = heapLines[_g5];
					++_g5;
					result += elemLine2;
				}
			}
			this._tf.set_text(result);
		} else this._tf.set_text(p_str);
		if(this._tf.get_numLines() > 1) this._tf.set_multiline(true); else this._tf.set_multiline(false);
		if(com_jpmata_views_text_BasicTextField.normalizeSpaces) {
			var regex = new EReg("[ ]{2,}","g");
			this._tf.set_text(regex.replace(this._tf.get_text()," "));
			this._tf.set_text(StringTools.replace(this._tf.get_text()," \n "," \n"));
			this._tf.set_text(StringTools.replace(this._tf.get_text(),"\n ","\n"));
		}
		if(this._tf.get_text().length == 0) return;
		this._setPosition();
	}
	,__class__: com_jpmata_views_text_BasicTextField
	,__properties__: $extend(com_jpmata_views_BaseView.prototype.__properties__,{get_boundsWidth:"get_boundsWidth",get_boundsHeight:"get_boundsHeight",set_text:"set_text",get_text:"get_text"})
});
var com_jpmata_views_text_HAlignType = $hxClasses["com.jpmata.views.text.HAlignType"] = { __ename__ : ["com","jpmata","views","text","HAlignType"], __constructs__ : ["LEFT","CENTER","RIGHT"] };
com_jpmata_views_text_HAlignType.LEFT = ["LEFT",0];
com_jpmata_views_text_HAlignType.LEFT.toString = $estr;
com_jpmata_views_text_HAlignType.LEFT.__enum__ = com_jpmata_views_text_HAlignType;
com_jpmata_views_text_HAlignType.CENTER = ["CENTER",1];
com_jpmata_views_text_HAlignType.CENTER.toString = $estr;
com_jpmata_views_text_HAlignType.CENTER.__enum__ = com_jpmata_views_text_HAlignType;
com_jpmata_views_text_HAlignType.RIGHT = ["RIGHT",2];
com_jpmata_views_text_HAlignType.RIGHT.toString = $estr;
com_jpmata_views_text_HAlignType.RIGHT.__enum__ = com_jpmata_views_text_HAlignType;
var com_jpmata_views_text_VAlignType = $hxClasses["com.jpmata.views.text.VAlignType"] = { __ename__ : ["com","jpmata","views","text","VAlignType"], __constructs__ : ["TOP","MIDDLE","BOTTOM"] };
com_jpmata_views_text_VAlignType.TOP = ["TOP",0];
com_jpmata_views_text_VAlignType.TOP.toString = $estr;
com_jpmata_views_text_VAlignType.TOP.__enum__ = com_jpmata_views_text_VAlignType;
com_jpmata_views_text_VAlignType.MIDDLE = ["MIDDLE",1];
com_jpmata_views_text_VAlignType.MIDDLE.toString = $estr;
com_jpmata_views_text_VAlignType.MIDDLE.__enum__ = com_jpmata_views_text_VAlignType;
com_jpmata_views_text_VAlignType.BOTTOM = ["BOTTOM",2];
com_jpmata_views_text_VAlignType.BOTTOM.toString = $estr;
com_jpmata_views_text_VAlignType.BOTTOM.__enum__ = com_jpmata_views_text_VAlignType;
var com_philipmabanta_hxanimation_IHxAnimation = function() { };
$hxClasses["com.philipmabanta.hxanimation.IHxAnimation"] = com_philipmabanta_hxanimation_IHxAnimation;
com_philipmabanta_hxanimation_IHxAnimation.__name__ = ["com","philipmabanta","hxanimation","IHxAnimation"];
com_philipmabanta_hxanimation_IHxAnimation.prototype = {
	__class__: com_philipmabanta_hxanimation_IHxAnimation
	,__properties__: {get_length:"get_length"}
};
var com_nicollee_hxanimation_HxModAnimation = function(frames) {
	this.frames = frames;
	if(this.frames == null) this.frames = [];
};
$hxClasses["com.nicollee.hxanimation.HxModAnimation"] = com_nicollee_hxanimation_HxModAnimation;
com_nicollee_hxanimation_HxModAnimation.__name__ = ["com","nicollee","hxanimation","HxModAnimation"];
com_nicollee_hxanimation_HxModAnimation.__interfaces__ = [com_philipmabanta_hxanimation_IHxAnimation];
com_nicollee_hxanimation_HxModAnimation.prototype = {
	get_length: function() {
		return this.frames.length;
	}
	,getFrame: function(frameNumber) {
		return null;
	}
	,getSpriteFrame: function(frameNumber) {
		return this.frames[frameNumber].frameData;
	}
	,__class__: com_nicollee_hxanimation_HxModAnimation
	,__properties__: {get_length:"get_length"}
};
var com_nicollee_hxanimation_HxModAnimationFrame = function(atlas,frame) {
	openfl_display_Sprite.call(this);
	this.frameData = [];
	var _g = 0;
	while(_g < frame.length) {
		var data = frame[_g];
		++_g;
		var atlasData = atlas.getRect(data[0]);
		this.frameData.push({ image : atlasData.bmp, rX : atlasData.rectX, rY : atlasData.rectY, rW : atlasData.rectW, rH : atlasData.rectH, x : data[1], y : data[2], scaleX : data[3], scaleY : data[4], rotation : data[5], alpha : data[6]});
	}
};
$hxClasses["com.nicollee.hxanimation.HxModAnimationFrame"] = com_nicollee_hxanimation_HxModAnimationFrame;
com_nicollee_hxanimation_HxModAnimationFrame.__name__ = ["com","nicollee","hxanimation","HxModAnimationFrame"];
com_nicollee_hxanimation_HxModAnimationFrame.__super__ = openfl_display_Sprite;
com_nicollee_hxanimation_HxModAnimationFrame.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: com_nicollee_hxanimation_HxModAnimationFrame
});
var com_nicollee_hxanimation_HxModAnimationParser = function() { };
$hxClasses["com.nicollee.hxanimation.HxModAnimationParser"] = com_nicollee_hxanimation_HxModAnimationParser;
com_nicollee_hxanimation_HxModAnimationParser.__name__ = ["com","nicollee","hxanimation","HxModAnimationParser"];
com_nicollee_hxanimation_HxModAnimationParser.parseAnimation = function(atlas,data) {
	var json = JSON.parse(data);
	var frames = [];
	var _g1 = 0;
	var _g = json.length;
	while(_g1 < _g) {
		var i = _g1++;
		frames.push(new com_nicollee_hxanimation_HxModAnimationFrame(atlas,json[i]));
	}
	return new com_nicollee_hxanimation_HxModAnimation(frames);
};
var com_nicollee_hxanimation_HxModAtlas = function() {
	this.rectangles = [];
};
$hxClasses["com.nicollee.hxanimation.HxModAtlas"] = com_nicollee_hxanimation_HxModAtlas;
com_nicollee_hxanimation_HxModAtlas.__name__ = ["com","nicollee","hxanimation","HxModAtlas"];
com_nicollee_hxanimation_HxModAtlas.prototype = {
	getRect: function(index) {
		return this.rectangles[index];
	}
	,addRect: function(bitmapData,rectX,rectY,rectW,rectH) {
		this.rectangles.push({ bmp : bitmapData, rectX : rectX, rectY : rectY, rectW : rectW, rectH : rectH});
		return this.rectangles.length;
	}
	,__class__: com_nicollee_hxanimation_HxModAtlas
};
var com_nicollee_hxanimation_HxModAtlasParser = function() { };
$hxClasses["com.nicollee.hxanimation.HxModAtlasParser"] = com_nicollee_hxanimation_HxModAtlasParser;
com_nicollee_hxanimation_HxModAtlasParser.__name__ = ["com","nicollee","hxanimation","HxModAtlasParser"];
com_nicollee_hxanimation_HxModAtlasParser.parseAtlas = function(path) {
	if(path.charAt(path.length - 1) != "/") path += "/";
	var json = JSON.parse(ie_lib_utils_assets_AssetsUtility.getText(path + "atlas.json"));
	var atlas = new com_nicollee_hxanimation_HxModAtlas();
	var _g = 0;
	while(_g < json.length) {
		var data = json[_g];
		++_g;
		atlas.addRect(ie_lib_utils_assets_AssetsUtility.getBitmapData(path + Std.string(data[0])),data[1],data[2],data[3],data[4]);
	}
	return atlas;
};
var com_philipmabanta_hxanimation_HxMovieClip = function(animation,smoothing) {
	if(smoothing == null) smoothing = true;
	this.smooth = true;
	openfl_display_Sprite.call(this);
	this.animation = animation;
	this.fps = 30;
	this.currentFrame = 0;
	this.unboundFrameCounter = 0;
	this.smooth = smoothing;
};
$hxClasses["com.philipmabanta.hxanimation.HxMovieClip"] = com_philipmabanta_hxanimation_HxMovieClip;
com_philipmabanta_hxanimation_HxMovieClip.__name__ = ["com","philipmabanta","hxanimation","HxMovieClip"];
com_philipmabanta_hxanimation_HxMovieClip.initializeTickSource = function() {
	openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME,com_philipmabanta_hxanimation_HxMovieClip.onTickSourceEnterFrame);
	com_philipmabanta_hxanimation_HxMovieClip.tickSourceInitialized = true;
};
com_philipmabanta_hxanimation_HxMovieClip.onTickSourceEnterFrame = function(e) {
	var _g_head = com_philipmabanta_hxanimation_HxMovieClip.playList.h;
	var _g_val = null;
	while(_g_head != null) {
		var mc;
		mc = (function($this) {
			var $r;
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			$r = _g_val;
			return $r;
		}(this));
		mc.onEnterFrame();
	}
};
com_philipmabanta_hxanimation_HxMovieClip.__super__ = openfl_display_Sprite;
com_philipmabanta_hxanimation_HxMovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	play: function(loop,target,traceFrame) {
		if(traceFrame == null) traceFrame = false;
		if(target == null) target = -1;
		if(loop != null) this.loop = loop;
		if(this.isPlaying) return this;
		if(this.animation == null) return this;
		if(!com_philipmabanta_hxanimation_HxMovieClip.tickSourceInitialized) com_philipmabanta_hxanimation_HxMovieClip.initializeTickSource();
		if(target != -1) {
			if(!loop) {
				if(target >= this.animation.get_length()) this.targetFrame = this.animation.get_length(); else this.targetFrame = target;
			} else {
				this.targetFrame = target;
				this.unboundFrameCounter = this.currentFrame;
			}
		} else this.targetFrame = this.animation.get_length();
		this.traceFrame = traceFrame;
		this.traceFrame = false;
		this.lastTime = openfl_Lib.getTimer();
		this.isPlaying = true;
		com_philipmabanta_hxanimation_HxMovieClip.playList.add(this);
		return this;
	}
	,setNotifyOnComplete: function(val) {
		this.notifyOnComplete = val;
		return this;
	}
	,stop: function() {
		if(!this.isPlaying) return this;
		com_philipmabanta_hxanimation_HxMovieClip.playList.remove(this);
		this.isPlaying = false;
		return this;
	}
	,reset: function() {
		this.currentFrame = 0;
		this.unboundFrameCounter = 0;
		return this;
	}
	,onEnterFrame: function(e) {
		if(this.animation == null) return;
		var currentTime = openfl_Lib.getTimer();
		var elapsed = (currentTime - this.lastTime) * .001;
		this.lastTime = currentTime;
		this.update(elapsed,true);
	}
	,update: function(elapsed,draw) {
		if(draw == null) draw = false;
		var elapsedFrames = elapsed * this.fps;
		this.currentFrame += elapsedFrames;
		this.unboundFrameCounter += elapsedFrames;
		if(this.currentFrame >= this.animation.get_length()) {
			if(this.loop) this.currentFrame %= this.animation.get_length(); else {
				this.currentFrame = this.animation.get_length() - 1;
				this.stop();
			}
			if(draw) this.draw();
			if(this.notifyOnComplete && this.hasEventListener(openfl_events_Event.COMPLETE)) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		} else if(this.notifyOnFrame && this.currentFrame >= this.targetFrame) this.dispatchEvent(new openfl_events_Event("notify")); else if(this.notifyOnFrame && this.loop && this.unboundFrameCounter >= this.targetFrame) this.dispatchEvent(new openfl_events_Event("notify")); else if(draw) this.draw();
		return this;
	}
	,draw: function(forceDraw) {
		if(forceDraw == null) forceDraw = false;
		if(!forceDraw && this.animation == null) return this;
		if(!forceDraw && (this.get_visible() == false || this.stage == null)) return this;
		this.get_graphics().clear();
		var frame = this.animation.getFrame(this.currentFrame | 0);
		frame.draw(this.get_graphics(),this.smooth);
		return this;
	}
	,__class__: com_philipmabanta_hxanimation_HxMovieClip
});
var com_nicollee_hxanimation_HxModMovieClip = function(animation,smoothing) {
	if(smoothing == null) smoothing = true;
	this.frameListener = null;
	com_philipmabanta_hxanimation_HxMovieClip.call(this,animation,smoothing);
	this.hasGraphicsContent = false;
	this.bitmapList = [];
	this.bitmapPool = [];
};
$hxClasses["com.nicollee.hxanimation.HxModMovieClip"] = com_nicollee_hxanimation_HxModMovieClip;
com_nicollee_hxanimation_HxModMovieClip.__name__ = ["com","nicollee","hxanimation","HxModMovieClip"];
com_nicollee_hxanimation_HxModMovieClip.__super__ = com_philipmabanta_hxanimation_HxMovieClip;
com_nicollee_hxanimation_HxModMovieClip.prototype = $extend(com_philipmabanta_hxanimation_HxMovieClip.prototype,{
	draw: function(forceDraw) {
		if(forceDraw == null) forceDraw = false;
		if(this.frameListener != null) this.frameListener(this,this.currentFrame | 0);
		if(js_Boot.__instanceof(this.animation,com_nicollee_hxanimation_HxModAnimation)) {
			var castedAnimation;
			castedAnimation = js_Boot.__cast(this.animation , com_nicollee_hxanimation_HxModAnimation);
			this.removeChildren();
			var frameData = castedAnimation.getSpriteFrame(this.currentFrame | 0);
			if(this.bitmapList.length > frameData.length) while(this.bitmapList.length > frameData.length) this.bitmapPool.push(this.bitmapList.pop()); else if(this.bitmapList.length < frameData.length) while(this.bitmapList.length < frameData.length) {
				var bitmap = this.bitmapPool.pop();
				if(bitmap == null) bitmap = new openfl_display_Bitmap();
				this.bitmapList.push(bitmap);
			}
			var _g1 = 0;
			var _g = frameData.length;
			while(_g1 < _g) {
				var i = _g1++;
				var data = frameData[i];
				var bmp = this.bitmapList[i];
				bmp.bitmapData = data.image;
				bmp.set_scrollRect(new openfl_geom_Rectangle(data.rX,data.rY,data.rW,data.rH));
				bmp.set_x(data.x);
				bmp.set_y(data.y);
				bmp.set_scaleX(data.scaleX);
				bmp.set_scaleY(data.scaleY);
				bmp.set_rotation(data.rotation);
				bmp.set_alpha(data.alpha);
				bmp.smoothing = this.smooth;
				this.addChild(bmp);
			}
		} else {
			com_philipmabanta_hxanimation_HxMovieClip.prototype.draw.call(this);
			this.hasGraphicsContent = true;
		}
		return this;
	}
	,__class__: com_nicollee_hxanimation_HxModMovieClip
});
var com_philipmabanta_hxanimation_HxAnimationFrame = function() { };
$hxClasses["com.philipmabanta.hxanimation.HxAnimationFrame"] = com_philipmabanta_hxanimation_HxAnimationFrame;
com_philipmabanta_hxanimation_HxAnimationFrame.__name__ = ["com","philipmabanta","hxanimation","HxAnimationFrame"];
com_philipmabanta_hxanimation_HxAnimationFrame.prototype = {
	draw: function(graphics,smooth) {
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var frameCommand = _g1[_g];
			++_g;
			frameCommand.ts.drawTiles(graphics,frameCommand.tileData,smooth,28);
		}
	}
	,__class__: com_philipmabanta_hxanimation_HxAnimationFrame
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
	this.async = true;
};
$hxClasses["haxe.Http"] = haxe_Http;
haxe_Http.__name__ = ["haxe","Http"];
haxe_Http.prototype = {
	setHeader: function(header,value) {
		this.headers = Lambda.filter(this.headers,function(h) {
			return h.header != header;
		});
		this.headers.push({ header : header, value : value});
		return this;
	}
	,setPostData: function(data) {
		this.postData = data;
		return this;
	}
	,request: function(post) {
		var me = this;
		me.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) return;
			var s;
			try {
				s = r.status;
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s != null) {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) if(r.responseText != null) s = 200; else s = 404;
			}
			if(s == undefined) s = null;
			if(s != null) me.onStatus(s);
			if(s != null && s >= 200 && s < 400) {
				me.req = null;
				me.onData(me.responseData = r.responseText);
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else switch(s) {
			case 12029:
				me.req = null;
				me.onError("Failed to connect to host");
				break;
			case 12007:
				me.req = null;
				me.onError("Unknown host");
				break;
			default:
				me.req = null;
				me.responseData = r.responseText;
				me.onError("Http Error #" + r.status);
			}
		};
		if(this.async) r.onreadystatechange = onreadystatechange;
		var uri = this.postData;
		if(uri != null) post = true; else {
			var _g_head = this.params.h;
			var _g_val = null;
			while(_g_head != null) {
				var p;
				p = (function($this) {
					var $r;
					_g_val = _g_head[0];
					_g_head = _g_head[1];
					$r = _g_val;
					return $r;
				}(this));
				if(uri == null) uri = ""; else uri += "&";
				uri += encodeURIComponent(p.param) + "=" + encodeURIComponent(p.value);
			}
		}
		try {
			if(post) r.open("POST",this.url,this.async); else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question?"?":"&") + uri,this.async);
				uri = null;
			} else r.open("GET",this.url,this.async);
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			me.req = null;
			this.onError(e1.toString());
			return;
		}
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		}) && post && this.postData == null) r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		var _g_head1 = this.headers.h;
		var _g_val1 = null;
		while(_g_head1 != null) {
			var h1;
			h1 = (function($this) {
				var $r;
				_g_val1 = _g_head1[0];
				_g_head1 = _g_head1[1];
				$r = _g_val1;
				return $r;
			}(this));
			r.setRequestHeader(h1.header,h1.value);
		}
		r.send(uri);
		if(!this.async) onreadystatechange(null);
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: haxe_Http
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.content = null;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			if(x == null) this.buf.b += "null"; else this.buf.b += "" + x;
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = encodeURIComponent(s);
		if(s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
		this.buf.b += ":";
		if(s == null) this.buf.b += "null"; else this.buf.b += "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				if(i == null) this.buf.b += "null"; else this.buf.b += "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 0:
				this.buf.b += "n";
				break;
			case 1:
				var v1 = v;
				if(v1 == 0) {
					this.buf.b += "z";
					return;
				}
				this.buf.b += "i";
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2 = v;
				if(isNaN(v2)) this.buf.b += "k"; else if(!isFinite(v2)) if(v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
					this.buf.b += "d";
					if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				}
				break;
			case 3:
				if(v) this.buf.b += "t"; else this.buf.b += "f";
				break;
			case 6:
				var c = _g[2];
				if(c == String) {
					this.serializeString(v);
					return;
				}
				if(this.useCache && this.serializeRef(v)) return;
				switch(c) {
				case Array:
					var ucount = 0;
					this.buf.b += "a";
					var l = v.length;
					var _g1 = 0;
					while(_g1 < l) {
						var i = _g1++;
						if(v[i] == null) ucount++; else {
							if(ucount > 0) {
								if(ucount == 1) this.buf.b += "n"; else {
									this.buf.b += "u";
									if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
								}
								ucount = 0;
							}
							this.serialize(v[i]);
						}
					}
					if(ucount > 0) {
						if(ucount == 1) this.buf.b += "n"; else {
							this.buf.b += "u";
							if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
						}
					}
					this.buf.b += "h";
					break;
				case List:
					this.buf.b += "l";
					var v3 = v;
					var _g1_head = v3.h;
					var _g1_val = null;
					while(_g1_head != null) {
						var i1;
						_g1_val = _g1_head[0];
						_g1_head = _g1_head[1];
						i1 = _g1_val;
						this.serialize(i1);
					}
					this.buf.b += "h";
					break;
				case Date:
					var d = v;
					this.buf.b += "v";
					this.buf.add(d.getTime());
					break;
				case haxe_ds_StringMap:
					this.buf.b += "b";
					var v4 = v;
					var $it0 = v4.keys();
					while( $it0.hasNext() ) {
						var k = $it0.next();
						this.serializeString(k);
						this.serialize(__map_reserved[k] != null?v4.getReserved(k):v4.h[k]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_IntMap:
					this.buf.b += "q";
					var v5 = v;
					var $it1 = v5.keys();
					while( $it1.hasNext() ) {
						var k1 = $it1.next();
						this.buf.b += ":";
						if(k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
						this.serialize(v5.h[k1]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_ObjectMap:
					this.buf.b += "M";
					var v6 = v;
					var $it2 = v6.keys();
					while( $it2.hasNext() ) {
						var k2 = $it2.next();
						var id = Reflect.field(k2,"__id__");
						Reflect.deleteField(k2,"__id__");
						this.serialize(k2);
						k2.__id__ = id;
						this.serialize(v6.h[k2.__id__]);
					}
					this.buf.b += "h";
					break;
				case haxe_io_Bytes:
					var v7 = v;
					var i2 = 0;
					var max = v7.length - 2;
					var charsBuf = new StringBuf();
					var b64 = haxe_Serializer.BASE64;
					while(i2 < max) {
						var b1 = v7.get(i2++);
						var b2 = v7.get(i2++);
						var b3 = v7.get(i2++);
						charsBuf.add(b64.charAt(b1 >> 2));
						charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
						charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
						charsBuf.add(b64.charAt(b3 & 63));
					}
					if(i2 == max) {
						var b11 = v7.get(i2++);
						var b21 = v7.get(i2++);
						charsBuf.add(b64.charAt(b11 >> 2));
						charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
						charsBuf.add(b64.charAt(b21 << 2 & 63));
					} else if(i2 == max + 1) {
						var b12 = v7.get(i2++);
						charsBuf.add(b64.charAt(b12 >> 2));
						charsBuf.add(b64.charAt(b12 << 4 & 63));
					}
					var chars = charsBuf.b;
					this.buf.b += "s";
					if(chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
					this.buf.b += ":";
					if(chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
					break;
				default:
					if(this.useCache) this.cache.pop();
					if(v.hxSerialize != null) {
						this.buf.b += "C";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						v.hxSerialize(this);
						this.buf.b += "g";
					} else {
						this.buf.b += "c";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						this.serializeFields(v);
					}
				}
				break;
			case 4:
				if(js_Boot.__instanceof(v,Class)) {
					var className = Type.getClassName(v);
					this.buf.b += "A";
					this.serializeString(className);
				} else if(js_Boot.__instanceof(v,Enum)) {
					this.buf.b += "B";
					this.serializeString(Type.getEnumName(v));
				} else {
					if(this.useCache && this.serializeRef(v)) return;
					this.buf.b += "o";
					this.serializeFields(v);
				}
				break;
			case 7:
				var e = _g[2];
				if(this.useCache) {
					if(this.serializeRef(v)) return;
					this.cache.pop();
				}
				if(this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
				this.serializeString(Type.getEnumName(e));
				if(this.useEnumIndex) {
					this.buf.b += ":";
					this.buf.b += Std.string(v[1]);
				} else this.serializeString(v[0]);
				this.buf.b += ":";
				var l1 = v.length;
				this.buf.b += Std.string(l1 - 2);
				var _g11 = 2;
				while(_g11 < l1) {
					var i3 = _g11++;
					this.serialize(v[i3]);
				}
				if(this.useCache) this.cache.push(v);
				break;
			case 5:
				throw new js__$Boot_HaxeError("Cannot serialize function");
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
			}
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			return this.readFloat();
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return NaN;
		case 109:
			return -Infinity;
		case 112:
			return Infinity;
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
			return this.scache[n2];
		case 120:
			throw new js__$Boot_HaxeError(this.unserialize());
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe_ds_IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
			return h1;
		case 77:
			var h2 = new haxe_ds_ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				var s3 = HxOverrides.substr(this.buf,this.pos,19);
				d = HxOverrides.strDate(s3);
				this.pos += 19;
			} else {
				var t = this.readFloat();
				var d1 = new Date();
				d1.setTime(t);
				d = d1;
			}
			this.cache.push(d);
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe_io_Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
			return o2;
		case 65:
			var name4 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name4);
			if(cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
			return cl2;
		case 66:
			var name5 = this.unserialize();
			var e2 = this.resolver.resolveEnum(name5);
			if(e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
			return e2;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var nblk = (str.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	while(_g < blksSize) {
		var i1 = _g++;
		blks[i1] = 0;
	}
	var i = 0;
	while(i < str.length) {
		blks[i >> 2] |= HxOverrides.cca(str,i) << (str.length * 8 + i) % 4 * 8;
		i++;
	}
	blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;
	var l = str.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) xname = "Document"; else xname = this.__x.get_nodeName();
			throw new js__$Boot_HaxeError(xname + " is missing element " + name);
		}
		return new haxe_xml_Fast(x);
	}
	,__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		var v = this.__x.get(name);
		if(v == null) throw new js__$Boot_HaxeError(this.__x.get_nodeName() + " is missing attribute " + name);
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		return this.__x.exists(name);
	}
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	resolve: function(name) {
		var l = new List();
		var $it0 = this.__x.elementsNamed(name);
		while( $it0.hasNext() ) {
			var x = $it0.next();
			l.add(new haxe_xml_Fast(x));
		}
		return l;
	}
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	get_name: function() {
		if(this.x.nodeType == Xml.Document) return "Document"; else return this.x.get_nodeName();
	}
	,get_innerData: function() {
		var it = this.x.iterator();
		if(!it.hasNext()) throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		var v = it.next();
		var n = it.next();
		if(n != null) {
			if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData && StringTools.trim((function($this) {
				var $r;
				if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
				$r = v.nodeValue;
				return $r;
			}(this))) == "") {
				var n2 = it.next();
				if(n2 == null || n2.nodeType == Xml.PCData && StringTools.trim((function($this) {
					var $r;
					if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + n2.nodeType);
					$r = n2.nodeValue;
					return $r;
				}(this))) == "" && it.next() == null) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					return n.nodeValue;
				}
			}
			throw new js__$Boot_HaxeError(this.get_name() + " does not only have data");
		}
		if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
		return v.nodeValue;
	}
	,get_elements: function() {
		var it = this.x.elements();
		return { hasNext : $bind(it,it.hasNext), next : function() {
			var x = it.next();
			if(x == null) return null;
			return new haxe_xml_Fast(x);
		}};
	}
	,__class__: haxe_xml_Fast
	,__properties__: {get_elements:"get_elements",get_innerData:"get_innerData",get_name:"get_name"}
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) strict = false;
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				buf.addSub(str,start,p - start);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--"); else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw new js__$Boot_HaxeError("Expected node name");
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw new js__$Boot_HaxeError("Expected node name");
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				nsubs++;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw new js__$Boot_HaxeError("Expected attribute name");
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected =");
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected \"");
			}
			break;
		case 8:
			switch(c) {
			case 38:
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 62:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			case 60:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val2 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val2);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw new js__$Boot_HaxeError("Expected node name");
				var v = HxOverrides.substr(str,start,p - start);
				if(v != (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					$r = parent.nodeName;
					return $r;
				}(this))) throw new js__$Boot_HaxeError("Expected </" + (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
					$r = parent.nodeName;
					return $r;
				}(this)) + ">");
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				var xml1 = Xml.createComment(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				var xml2 = Xml.createDocType(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml2);
				nsubs++;
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				var xml3 = Xml.createProcessingInstruction(str1);
				parent.addChild(xml3);
				nsubs++;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1;
					if(s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else c1 = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else if(!haxe_xml_Parser.escapes.exists(s)) {
					if(strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
					buf.b += Std.string("&" + s + ";");
				} else buf.add(haxe_xml_Parser.escapes.get(s));
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
				buf.b += "&";
				buf.addSub(str,start,p - start);
				p--;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			buf.addSub(str,start,p - start);
			var xml4 = Xml.createPCData(buf.b);
			parent.addChild(xml4);
			nsubs++;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		buf.addSub(str,start,p - start);
		var xml5 = Xml.createPCData(buf.b);
		parent.addChild(xml5);
		nsubs++;
		return p;
	}
	throw new js__$Boot_HaxeError("Unexpected end");
};
var ie_lib_display_BaseButton = function() {
	this._enabledSFX = true;
	this._scale = 1;
	this._enabled = true;
	openfl_display_Sprite.call(this);
	if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.DESKTOP) {
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onBaseButtonMouseDown));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onBaseButtonMouseUp));
	} else {
		this.addEventListener("touchBegin",$bind(this,this.onBaseButtonMouseDown));
		this.addEventListener("touchEnd",$bind(this,this.onBaseButtonMouseUp));
	}
};
$hxClasses["ie.lib.display.BaseButton"] = ie_lib_display_BaseButton;
ie_lib_display_BaseButton.__name__ = ["ie","lib","display","BaseButton"];
ie_lib_display_BaseButton.HAS_PRESSED = null;
ie_lib_display_BaseButton._defaultSFX = null;
ie_lib_display_BaseButton.setDefaultSFX = function(p_sound,p_isEmbedded) {
	if(p_isEmbedded == null) p_isEmbedded = true;
	if(js_Boot.__instanceof(p_sound,openfl_media_Sound)) ie_lib_display_BaseButton._defaultSFX = p_sound; else if(typeof(p_sound) == "string") ie_lib_display_BaseButton._defaultSFX = ie_lib_utils_assets_AssetsUtility.getSound(Std.string(p_sound)); else return;
};
ie_lib_display_BaseButton.__super__ = openfl_display_Sprite;
ie_lib_display_BaseButton.prototype = $extend(openfl_display_Sprite.prototype,{
	playSFX: function() {
		if(!this._enabledSFX) return;
		if(this._sound != null) com_jpmata_managers_SoundManager.get_instance().playSFX(this._sound); else if(ie_lib_display_BaseButton._defaultSFX != null) com_jpmata_managers_SoundManager.get_instance().playSFX(ie_lib_display_BaseButton._defaultSFX);
	}
	,onBaseButtonMouseDown: function(e) {
		if(!this._enabled || !ie_lib_display_BaseButton.BUTTON_MULTI_TOUCH && ie_lib_display_BaseButton.HAS_PRESSED || this._isDown) return;
		this._target = e.target;
		if(this._stage == null) this._stage = this.stage;
		if(this._stage != null && !this._hasStageMove) {
			this._hasStageMove = true;
			if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.DESKTOP) this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onBaseButtonMouseMove)); else this.stage.addEventListener("touchMove",$bind(this,this.onBaseButtonMouseMove));
		}
		this.doDown();
	}
	,onBaseButtonMouseMove: function(e) {
		if(!this._isDown) return;
		if(e.target != this._target) this.cancel();
	}
	,onBaseButtonMouseUp: function(e) {
		if(!this._isDown) return;
		if(e.currentTarget == this) this.cancel(true); else this.cancel();
	}
	,doDown: function() {
		if(this._isDown) return false;
		this._isDown = ie_lib_display_BaseButton.HAS_PRESSED = true;
		return true;
	}
	,cancel: function(bool) {
		if(bool == null) bool = false;
		this._isDown = ie_lib_display_BaseButton.HAS_PRESSED = false;
		if(bool) this.playSFX();
	}
	,enable: function(bool,change) {
		if(change == null) change = true;
		if(bool == null) bool = true;
		if(bool && change) this.changeState(ie_lib_display_ButtonState.UP); else if(this._hasStateDisabled && change) this.changeState(ie_lib_display_ButtonState.DISABLED);
		this._enabled = bool;
	}
	,changeState: function(state) {
	}
	,destroy: function() {
		this.removeChildren();
		if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.DESKTOP) {
			if(this._stage != null) this._stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onBaseButtonMouseMove));
			this.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onBaseButtonMouseDown));
			this.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onBaseButtonMouseUp));
		} else {
			if(this._stage != null) this._stage.removeEventListener("touchMove",$bind(this,this.onBaseButtonMouseMove));
			this.removeEventListener("touchBegin",$bind(this,this.onBaseButtonMouseDown));
			this.removeEventListener("touchEnd",$bind(this,this.onBaseButtonMouseUp));
			this.addEventListener("touchBegin",$bind(this,this.onBaseButtonMouseDown));
			this.addEventListener("touchEnd",$bind(this,this.onBaseButtonMouseUp));
		}
	}
	,__class__: ie_lib_display_BaseButton
});
var ie_lib_display_PlainButton = function(on,onBitMapData,off,offBitMapData,disabled,disabledBitMapData,reversedX) {
	if(reversedX == null) reversedX = false;
	this._modifier = 0.8;
	ie_lib_display_BaseButton.call(this);
	this._reversedX = reversedX;
	if(on != null) this._graphicUp = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(on),openfl_display_PixelSnapping.AUTO,true); else if(onBitMapData != null) this._graphicUp = new openfl_display_Bitmap(onBitMapData,openfl_display_PixelSnapping.AUTO,true);
	if(this._graphicUp != null) {
		this.addChild(this._graphicUp);
		this._hasStateUp = true;
	}
	if(disabled != null) this._graphicDisabled = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(disabled),openfl_display_PixelSnapping.AUTO,true); else if(disabledBitMapData != null) this._graphicDisabled = new openfl_display_Bitmap(disabledBitMapData,openfl_display_PixelSnapping.AUTO,true);
	if(this._graphicDisabled != null) {
		this._graphicDisabled.set_alpha(0);
		this.addChild(this._graphicDisabled);
		this._hasStateDisabled = true;
	}
	if(off != null) this._graphicDown = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(off),openfl_display_PixelSnapping.AUTO,true); else if(offBitMapData != null) this._graphicDown = new openfl_display_Bitmap(offBitMapData,openfl_display_PixelSnapping.AUTO,true);
	if(this._graphicDown != null) {
		this._graphicDown.set_alpha(0);
		this.addChild(this._graphicDown);
		this._hasStateDown = true;
	} else if(this._graphicUp != null) {
		this.get_graphics().beginFill(16777215,0);
		this.get_graphics().drawRect(0,0,this._graphicUp.get_width(),this._graphicUp.get_height());
		this.get_graphics().endFill();
		var _graphicUpSprite = new openfl_display_Sprite();
		this.removeChild(this._graphicUp);
		_graphicUpSprite.addChild(this._graphicUp);
		this.addChild(_graphicUpSprite);
	}
	if(this._graphicUp != null) this.setReversedX(this._graphicUp);
	if(this._graphicDown != null) this.setReversedX(this._graphicDown);
	if(this._graphicDisabled != null) this.setReversedX(this._graphicDisabled);
};
$hxClasses["ie.lib.display.PlainButton"] = ie_lib_display_PlainButton;
ie_lib_display_PlainButton.__name__ = ["ie","lib","display","PlainButton"];
ie_lib_display_PlainButton.setDefaultSFX = function(p_sound) {
	ie_lib_display_BaseButton.setDefaultSFX(p_sound);
};
ie_lib_display_PlainButton.__super__ = ie_lib_display_BaseButton;
ie_lib_display_PlainButton.prototype = $extend(ie_lib_display_BaseButton.prototype,{
	setReversedX: function(img) {
		if(!this._reversedX) return;
		var _g = img;
		_g.set_x(_g.get_x() + img.get_width());
		img.set_scaleX(-1);
	}
	,changeBitmap: function(on,onBitmapData,off,offBitmapData,disabled,disabledBitmapData) {
		if(on != null) this._graphicUp.bitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData(on); else if(onBitmapData != null) this._graphicUp.bitmapData = onBitmapData;
		if(off != null) this._graphicDown.bitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData(off); else if(offBitmapData != null) this._graphicDown.bitmapData = offBitmapData;
		if(disabled != null) this._graphicDisabled.bitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData(disabled); else if(disabledBitmapData != null) this._graphicDisabled.bitmapData = disabledBitmapData;
	}
	,doDown: function() {
		if(!ie_lib_display_BaseButton.prototype.doDown.call(this)) return false;
		if(this._hasStateDown) this.changeState(ie_lib_display_ButtonState.DOWN); else {
			var newX = (this._graphicUp.parent.get_width() - this._graphicUp.parent.get_width() * this._scale * this._modifier) / 2;
			var newY = (this._graphicUp.parent.get_height() - this._graphicUp.parent.get_height() * this._scale * this._modifier) / 2;
			motion_Actuate.tween(this._graphicUp.parent,.05,{ x : newX, y : newY, scaleX : this._scale * this._modifier, scaleY : this._scale * this._modifier});
		}
		return true;
	}
	,cancel: function(bool) {
		if(bool == null) bool = false;
		var _g = this;
		this._isDown = false;
		if(this._hasStateDown) {
			this.changeState(ie_lib_display_ButtonState.UP);
			ie_lib_display_BaseButton.HAS_PRESSED = false;
			if(bool) {
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
				this.playSFX();
			}
		} else motion_Actuate.tween(this._graphicUp.parent,.05,{ x : 0, y : 0, scaleX : this._scale, scaleY : this._scale}).onComplete(function() {
			ie_lib_display_BaseButton.HAS_PRESSED = false;
			if(bool) {
				_g.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
				_g.playSFX();
			}
		});
	}
	,changeState: function(state) {
		ie_lib_display_BaseButton.prototype.changeState.call(this,state);
		this._graphicUp.set_alpha(0);
		if(this._graphicDown != null) this._graphicDown.set_alpha(0);
		if(this._graphicDisabled != null) this._graphicDisabled.set_alpha(0);
		switch(state[1]) {
		case 0:
			this._graphicUp.set_alpha(1);
			break;
		case 1:
			this._graphicDown.set_alpha(1);
			break;
		case 2:
			this._graphicDisabled.set_alpha(1);
			break;
		}
	}
	,destroy: function() {
		ie_lib_display_BaseButton.prototype.destroy.call(this);
	}
	,__class__: ie_lib_display_PlainButton
});
var ie_lib_display_AudioButton = function(on,onBitmapData,disabledOn,disabledOnBitmapData,off,offBitmapData,disabledOff,disabledOffBitmapData) {
	if(on != null) this._onBitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData(on); else if(onBitmapData != null) this._onBitmapData = onBitmapData;
	if(disabledOn != null) this._disabledOnBitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData(disabledOn); else if(disabledOnBitmapData != null) this._disabledOnBitmapData = disabledOnBitmapData;
	if(off != null) this._offBitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData(off); else if(offBitmapData != null) this._offBitmapData = offBitmapData;
	if(disabledOff != null) this._disabledOffBitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData(disabledOff); else if(disabledOffBitmapData != null) this._disabledOffBitmapData = disabledOffBitmapData;
	if(this._onBitmapData != null) {
		if(this._offBitmapData == null) ie_lib_display_PlainButton.call(this,null,this._onBitmapData); else ie_lib_display_PlainButton.call(this,null,this._onBitmapData,null,this._offBitmapData);
	}
	this.checkSound();
	this.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.onAudioButtonMouseDown));
};
$hxClasses["ie.lib.display.AudioButton"] = ie_lib_display_AudioButton;
ie_lib_display_AudioButton.__name__ = ["ie","lib","display","AudioButton"];
ie_lib_display_AudioButton.__super__ = ie_lib_display_PlainButton;
ie_lib_display_AudioButton.prototype = $extend(ie_lib_display_PlainButton.prototype,{
	checkSound: function() {
		if(com_jpmata_managers_SoundManager.get_instance().get_isEnabled()) {
			if(this._onBitmapData != null) {
				if(this._offBitmapData == null) this.changeBitmap(null,this._onBitmapData); else this.changeBitmap(null,this._onBitmapData,null,this._offBitmapData);
			}
		} else if(this._disabledOnBitmapData != null) {
			if(this._disabledOffBitmapData == null) this.changeBitmap(null,this._disabledOnBitmapData); else this.changeBitmap(null,this._disabledOnBitmapData,null,this._disabledOffBitmapData);
		}
	}
	,onAudioButtonMouseDown: function(e) {
		this.soundActivated();
	}
	,soundActivated: function() {
		if(com_jpmata_managers_SoundManager.get_instance().get_isEnabled()) {
			com_jpmata_managers_SoundManager.get_instance().enableSounds(false);
			if(this._disabledOnBitmapData != null) {
				if(this._disabledOffBitmapData == null) this.changeBitmap(null,this._disabledOnBitmapData); else this.changeBitmap(null,this._disabledOnBitmapData,null,this._disabledOffBitmapData);
			}
		} else {
			com_jpmata_managers_SoundManager.get_instance().enableSounds(true);
			if(this._onBitmapData != null) {
				if(this._offBitmapData == null) this.changeBitmap(null,this._onBitmapData); else this.changeBitmap(null,this._onBitmapData,null,this._offBitmapData);
			}
		}
	}
	,destroy: function() {
		ie_lib_display_PlainButton.prototype.destroy.call(this);
		this.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.onAudioButtonMouseDown));
	}
	,__class__: ie_lib_display_AudioButton
});
var ie_lib_display_ButtonState = $hxClasses["ie.lib.display.ButtonState"] = { __ename__ : ["ie","lib","display","ButtonState"], __constructs__ : ["UP","DOWN","DISABLED"] };
ie_lib_display_ButtonState.UP = ["UP",0];
ie_lib_display_ButtonState.UP.toString = $estr;
ie_lib_display_ButtonState.UP.__enum__ = ie_lib_display_ButtonState;
ie_lib_display_ButtonState.DOWN = ["DOWN",1];
ie_lib_display_ButtonState.DOWN.toString = $estr;
ie_lib_display_ButtonState.DOWN.__enum__ = ie_lib_display_ButtonState;
ie_lib_display_ButtonState.DISABLED = ["DISABLED",2];
ie_lib_display_ButtonState.DISABLED.toString = $estr;
ie_lib_display_ButtonState.DISABLED.__enum__ = ie_lib_display_ButtonState;
var ie_lib_events_satellite_Singleton_$EventSatellite = function() { };
$hxClasses["ie.lib.events.satellite.Singleton_EventSatellite"] = ie_lib_events_satellite_Singleton_$EventSatellite;
ie_lib_events_satellite_Singleton_$EventSatellite.__name__ = ["ie","lib","events","satellite","Singleton_EventSatellite"];
var ie_lib_events_satellite_EventSatellite = function(p_class) {
	if(p_class != ie_lib_events_satellite_Singleton_$EventSatellite) throw new js__$Boot_HaxeError("Invalid instantiation.");
	this._initProps();
};
$hxClasses["ie.lib.events.satellite.EventSatellite"] = ie_lib_events_satellite_EventSatellite;
ie_lib_events_satellite_EventSatellite.__name__ = ["ie","lib","events","satellite","EventSatellite"];
ie_lib_events_satellite_EventSatellite.__interfaces__ = [ie_lib_interfaces_IDestroyable];
ie_lib_events_satellite_EventSatellite._instance = null;
ie_lib_events_satellite_EventSatellite.instance = function() {
	if(ie_lib_events_satellite_EventSatellite._instance == null) ie_lib_events_satellite_EventSatellite._instance = new ie_lib_events_satellite_EventSatellite(ie_lib_events_satellite_Singleton_$EventSatellite);
	return ie_lib_events_satellite_EventSatellite._instance;
};
ie_lib_events_satellite_EventSatellite.prototype = {
	destroy: function() {
		this._killProps();
	}
	,handler: function(p_evt) {
		var subscribersCount = this._subscribers.length;
		var _g = 0;
		while(_g < subscribersCount) {
			var i = _g++;
			var subscriber = this._subscribers[i];
			if(subscriber != null) subscriber.callHandlers(p_evt);
		}
	}
	,subscribe: function(p_subscriber,p_service,p_handler,p_source) {
		var subscriber;
		var subscriberDetails = this._getSubscriberDetails(p_subscriber);
		if(subscriberDetails.subscriber == null) {
			subscriber = new ie_lib_events_satellite_EventSubscriber(p_subscriber);
			this._subscribers.push(subscriber);
		} else subscriber = subscriberDetails.subscriber;
		subscriber.addSubscription(p_source,p_service,p_handler);
	}
	,unsubscribe: function(p_subscriber,p_service,p_handler,p_source) {
		var subscriberDetails = this._getSubscriberDetails(p_subscriber);
		var subscriptionDetails;
		var nodeDetails;
		if(subscriberDetails.subscriber != null) {
			subscriptionDetails = subscriberDetails.subscriber.getSubscriptionDetails(p_source);
			if(subscriptionDetails.subscription != null) {
				nodeDetails = subscriptionDetails.subscription.getNodeDetails(p_service);
				if(nodeDetails.node != null) nodeDetails.node.removeHandler(p_handler);
			}
		}
	}
	,removeSubscriber: function(p_subscriber) {
		var index = this._getSubscriberDetails(p_subscriber).index;
		if(index != -1) {
			this._subscribers[index].destroy();
			this._subscribers[index] = null;
			this._subscribers.splice(index,1);
		}
	}
	,_initProps: function() {
		this._subscribers = [];
	}
	,_killProps: function() {
		if(this._subscribers.length > 0) ie_lib_utils_gc_DestroyUtility.destroyArray(this._subscribers);
		this._subscribers = [];
	}
	,_getSubscriberDetails: function(p_subscriber) {
		var subscriberDetails = { index : -1, subscriber : null};
		var _g1 = 0;
		var _g = this._subscribers.length;
		while(_g1 < _g) {
			var i = _g1++;
			var subscriber = this._subscribers[i];
			if(subscriber == null) continue;
			if(subscriber.get_subscriber() == p_subscriber) {
				subscriberDetails.index = i;
				subscriberDetails.subscriber = subscriber;
				break;
			}
		}
		return subscriberDetails;
	}
	,__class__: ie_lib_events_satellite_EventSatellite
};
var ie_lib_events_satellite_EventServiceNode = function(p_service) {
	this._initProps();
	this._service = p_service;
};
$hxClasses["ie.lib.events.satellite.EventServiceNode"] = ie_lib_events_satellite_EventServiceNode;
ie_lib_events_satellite_EventServiceNode.__name__ = ["ie","lib","events","satellite","EventServiceNode"];
ie_lib_events_satellite_EventServiceNode.__interfaces__ = [ie_lib_interfaces_IDestroyable];
ie_lib_events_satellite_EventServiceNode.prototype = {
	get_service: function() {
		return this._service;
	}
	,destroy: function() {
		this._killProps();
	}
	,addHandler: function(p_handler) {
		if(HxOverrides.indexOf(this._handlers,p_handler,0) == -1) this._handlers.push(p_handler);
	}
	,removeHandler: function(p_handler) {
		var index = HxOverrides.indexOf(this._handlers,p_handler,0);
		if(index != -1) {
			this._handlers[index] = null;
			this._handlers.splice(index,1);
			return true;
		}
		return false;
	}
	,callHandlers: function(p_evt) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler(p_evt);
		}
	}
	,_initProps: function() {
		this._handlers = [];
		this._service = null;
	}
	,_killProps: function() {
		if(this._handlers.length > 0) ie_lib_utils_gc_DestroyUtility.destroyArray(this._handlers);
		this._handlers = [];
		this._service = null;
	}
	,__class__: ie_lib_events_satellite_EventServiceNode
	,__properties__: {get_service:"get_service"}
};
var ie_lib_events_satellite_EventSubscriber = function(p_subscriber) {
	this._initProps();
	this._subscriber = p_subscriber;
};
$hxClasses["ie.lib.events.satellite.EventSubscriber"] = ie_lib_events_satellite_EventSubscriber;
ie_lib_events_satellite_EventSubscriber.__name__ = ["ie","lib","events","satellite","EventSubscriber"];
ie_lib_events_satellite_EventSubscriber.__interfaces__ = [ie_lib_interfaces_IDestroyable];
ie_lib_events_satellite_EventSubscriber.prototype = {
	get_subscriber: function() {
		return this._subscriber;
	}
	,destroy: function() {
		this._killProps();
	}
	,addSubscription: function(p_source,p_service,p_handler) {
		var subscription;
		var subscriptionDetails = this.getSubscriptionDetails(p_source);
		if(subscriptionDetails.subscription == null) {
			subscription = new ie_lib_events_satellite_EventSubscription(p_source);
			this._subscriptions.push(subscription);
		} else subscription = subscriptionDetails.subscription;
		subscription.addNode(p_service,p_handler);
	}
	,callHandlers: function(p_evt) {
		var _g = 0;
		var _g1 = this._subscriptions;
		while(_g < _g1.length) {
			var subscription = _g1[_g];
			++_g;
			if(subscription.get_source() == null || subscription.get_source() == p_evt.currentTarget) {
				var node = subscription.getNodeDetails(p_evt.type).node;
				if(node != null) node.callHandlers(p_evt);
			}
		}
	}
	,getSubscriptionDetails: function(p_source) {
		var subscriptionDetails = { index : -1, subscription : null};
		var _g1 = 0;
		var _g = this._subscriptions.length;
		while(_g1 < _g) {
			var i = _g1++;
			var subscription = this._subscriptions[i];
			if(subscription.get_source() == p_source) {
				subscriptionDetails.index = i;
				subscriptionDetails.subscription = subscription;
				break;
			}
		}
		return subscriptionDetails;
	}
	,_initProps: function() {
		this._subscriber = null;
		this._subscriptions = [];
	}
	,_killProps: function() {
		this._subscriber = null;
		if(this._subscriptions.length > 0) ie_lib_utils_gc_DestroyUtility.destroyArray(this._subscriptions);
		this._subscriptions = [];
	}
	,__class__: ie_lib_events_satellite_EventSubscriber
	,__properties__: {get_subscriber:"get_subscriber"}
};
var ie_lib_events_satellite_EventSubscription = function(p_source) {
	this._initProps();
	if(p_source != null) this._source = js_Boot.__cast(p_source , openfl_events_IEventDispatcher);
};
$hxClasses["ie.lib.events.satellite.EventSubscription"] = ie_lib_events_satellite_EventSubscription;
ie_lib_events_satellite_EventSubscription.__name__ = ["ie","lib","events","satellite","EventSubscription"];
ie_lib_events_satellite_EventSubscription.__interfaces__ = [ie_lib_interfaces_IDestroyable];
ie_lib_events_satellite_EventSubscription.prototype = {
	get_source: function() {
		return this._source;
	}
	,destroy: function() {
		this._killProps();
	}
	,addNode: function(p_service,p_handler) {
		var node;
		var nodeDetails = this.getNodeDetails(p_service);
		if(nodeDetails.node == null) {
			node = new ie_lib_events_satellite_EventServiceNode(p_service);
			this._nodes.push(node);
		} else node = nodeDetails.node;
		node.addHandler(p_handler);
	}
	,getNodeDetails: function(p_service) {
		var nodeDetails = { index : -1, node : null};
		var _g1 = 0;
		var _g = this._nodes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var node = this._nodes[i];
			if(node.get_service() == p_service) {
				nodeDetails.index = i;
				nodeDetails.node = node;
				break;
			}
		}
		return nodeDetails;
	}
	,_initProps: function() {
		this._nodes = [];
		this._source = null;
	}
	,_killProps: function() {
		if(this._nodes.length > 0) ie_lib_utils_gc_DestroyUtility.destroyArray(this._nodes);
		this._nodes = [];
		this._source = null;
	}
	,__class__: ie_lib_events_satellite_EventSubscription
	,__properties__: {get_source:"get_source"}
};
var ie_lib_interfaces_IUpdatable = function() { };
$hxClasses["ie.lib.interfaces.IUpdatable"] = ie_lib_interfaces_IUpdatable;
ie_lib_interfaces_IUpdatable.__name__ = ["ie","lib","interfaces","IUpdatable"];
var ie_lib_manager_AssetLoadManager = function() { };
$hxClasses["ie.lib.manager.AssetLoadManager"] = ie_lib_manager_AssetLoadManager;
ie_lib_manager_AssetLoadManager.__name__ = ["ie","lib","manager","AssetLoadManager"];
ie_lib_manager_AssetLoadManager.arrAudioBatches = null;
ie_lib_manager_AssetLoadManager.arrAssetBatches = null;
ie_lib_manager_AssetLoadManager.initBatches = function() {
	ie_lib_manager_AssetLoadManager.arrAudioBatches = new ie_lib_utils_Batch([],[]);
	ie_lib_manager_AssetLoadManager.arrAssetBatches = new ie_lib_utils_Batch([],null);
};
var ie_lib_utils_LocalUnembeddedAssetsLoader = function() {
	this._locString = "";
	this.hasLoaded = false;
	this.totalToLoad = 0;
	this.currentLoaded = 0;
	this.currentProgress = 0;
	openfl_events_EventDispatcher.call(this);
	this.bitmapDataMap = new haxe_ds_StringMap();
	this.assetMap = new haxe_ds_StringMap();
	this.textMap = new haxe_ds_StringMap();
	this.soundMap = new haxe_ds_StringMap();
};
$hxClasses["ie.lib.utils.LocalUnembeddedAssetsLoader"] = ie_lib_utils_LocalUnembeddedAssetsLoader;
ie_lib_utils_LocalUnembeddedAssetsLoader.__name__ = ["ie","lib","utils","LocalUnembeddedAssetsLoader"];
ie_lib_utils_LocalUnembeddedAssetsLoader.__super__ = openfl_events_EventDispatcher;
ie_lib_utils_LocalUnembeddedAssetsLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	loadAssets: function(batchName) {
		this.loadFiles(this.detectFiles(batchName));
	}
	,unloadAssets: function(batchName) {
		var section = this.getSection(batchName);
		if(section == null) return false;
		this.unloadFiles(section);
		return true;
	}
	,getTotalToLoad: function(batchName) {
		this.detectFiles(batchName);
		return this.totalToLoad;
	}
	,getSection: function(batchName) {
		return Reflect.field(this._fileLoc,batchName);
	}
	,detectFiles: function(batchName) {
		var key;
		var section;
		section = Reflect.field(this._fileLoc,batchName);
		this.currentLoaded = 0;
		this.totalToLoad = 0;
		var _g = 0;
		var _g1 = Reflect.fields(section);
		while(_g < _g1.length) {
			var imgFolder = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = Reflect.fields(Reflect.field(section,imgFolder));
			while(_g2 < _g3.length) {
				var img = _g3[_g2];
				++_g2;
				this.totalToLoad += 1;
			}
		}
		return section;
	}
	,loadFiles: function(section) {
		if(section == null) throw new js__$Boot_HaxeError("section is null, dunkopf!");
		if(this.totalToLoad <= 0) {
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
			return;
		}
		var key;
		var assetList;
		var newAsset;
		var assetID;
		var extensions;
		assetList = [];
		var _g = 0;
		var _g1 = Reflect.fields(section);
		while(_g < _g1.length) {
			var imgFolder = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = Reflect.fields(Reflect.field(section,imgFolder));
			while(_g2 < _g3.length) {
				var img = _g3[_g2];
				++_g2;
				key = Reflect.field(Reflect.field(section,imgFolder),img);
				assetID = key.split(this._locString)[1];
				extensions = key.split(".");
				if(extensions[extensions.length - 1] == "json") {
					if(this.textMap.exists(assetID)) this.handleComplete(); else {
						newAsset = new ie_lib_utils_LocalTextAsset(key);
						newAsset.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.handleComplete));
						newAsset.start();
						var value = newAsset;
						this.textMap.set(assetID,value);
					}
				} else if(extensions[extensions.length - 1] == "mp3" || extensions[extensions.length - 1] == "ogg") {
					if(this.soundMap.exists(assetID)) this.handleComplete(); else {
						newAsset = new ie_lib_utils_LocalSoundAsset(key);
						newAsset.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.handleComplete));
						newAsset.start();
						var value1 = newAsset;
						this.soundMap.set(assetID,value1);
					}
				} else if(this.assetMap.exists(assetID)) this.handleComplete(); else {
					newAsset = new ie_lib_utils_LocalBitmapAsset(key);
					newAsset.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.handleComplete));
					newAsset.start();
					var value2 = newAsset;
					this.assetMap.set(assetID,value2);
				}
			}
		}
	}
	,unloadFiles: function(section) {
		var _g = 0;
		var _g1 = Reflect.fields(section);
		while(_g < _g1.length) {
			var imgFolder = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = Reflect.fields(Reflect.field(section,imgFolder));
			while(_g2 < _g3.length) {
				var img = _g3[_g2];
				++_g2;
				var key = Reflect.field(Reflect.field(section,imgFolder),img);
				var assetID = key.split(this._locString)[1];
				if(this.assetMap.exists(assetID)) {
					this.assetMap.get(assetID).destroy();
					this.assetMap.remove(assetID);
				} else if(this.textMap.exists(assetID)) {
					this.textMap.get(assetID).destroy();
					this.textMap.remove(assetID);
				} else if(this.soundMap.exists(assetID)) {
					this.soundMap.get(assetID).destroy();
					this.soundMap.remove(assetID);
				}
			}
		}
	}
	,handleComplete: function(e) {
		++this.currentLoaded;
		this.currentProgress = this.currentLoaded / this.totalToLoad;
		this.hasLoaded = true;
		if(e != null) e.target.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.handleComplete));
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED));
		if(this.currentProgress >= 1) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,asset: function(key) {
		if(this.assetMap.exists(key)) return this.assetMap.get(key).asset; else return null;
	}
	,text: function(key) {
		if(this.textMap.exists(key)) return this.textMap.get(key).asset; else return null;
	}
	,sound: function(key) {
		if(this.soundMap.exists(key)) return this.soundMap.get(key).asset; else return null;
	}
	,__class__: ie_lib_utils_LocalUnembeddedAssetsLoader
});
var ie_lib_utils_AssetsLocalized = function() {
	ie_lib_utils_LocalUnembeddedAssetsLoader.call(this);
	this._locString = "unembed//";
	this._fileLoc = ie_lib_utils_AssetsLocalized;
};
$hxClasses["ie.lib.utils.AssetsLocalized"] = ie_lib_utils_AssetsLocalized;
ie_lib_utils_AssetsLocalized.__name__ = ["ie","lib","utils","AssetsLocalized"];
ie_lib_utils_AssetsLocalized.__super__ = ie_lib_utils_LocalUnembeddedAssetsLoader;
ie_lib_utils_AssetsLocalized.prototype = $extend(ie_lib_utils_LocalUnembeddedAssetsLoader.prototype,{
	__class__: ie_lib_utils_AssetsLocalized
});
var ie_lib_utils_AudioLocalized = function() {
	ie_lib_utils_LocalUnembeddedAssetsLoader.call(this);
	this._locString = "unembed//";
	this._fileLoc = ie_lib_utils_AudioLocalized;
};
$hxClasses["ie.lib.utils.AudioLocalized"] = ie_lib_utils_AudioLocalized;
ie_lib_utils_AudioLocalized.__name__ = ["ie","lib","utils","AudioLocalized"];
ie_lib_utils_AudioLocalized.__super__ = ie_lib_utils_LocalUnembeddedAssetsLoader;
ie_lib_utils_AudioLocalized.prototype = $extend(ie_lib_utils_LocalUnembeddedAssetsLoader.prototype,{
	__class__: ie_lib_utils_AudioLocalized
});
var ie_lib_utils_AssetsUnembedded = function() {
	ie_lib_utils_LocalUnembeddedAssetsLoader.call(this);
	this._locString = "unembed//";
	this._fileLoc = ie_lib_utils_AssetsUnembedded;
};
$hxClasses["ie.lib.utils.AssetsUnembedded"] = ie_lib_utils_AssetsUnembedded;
ie_lib_utils_AssetsUnembedded.__name__ = ["ie","lib","utils","AssetsUnembedded"];
ie_lib_utils_AssetsUnembedded.__super__ = ie_lib_utils_LocalUnembeddedAssetsLoader;
ie_lib_utils_AssetsUnembedded.prototype = $extend(ie_lib_utils_LocalUnembeddedAssetsLoader.prototype,{
	__class__: ie_lib_utils_AssetsUnembedded
});
var ie_lib_utils_AudioUnembedded = function() {
	ie_lib_utils_LocalUnembeddedAssetsLoader.call(this);
	this._locString = "unembed//";
	this._fileLoc = ie_lib_utils_AudioUnembedded;
};
$hxClasses["ie.lib.utils.AudioUnembedded"] = ie_lib_utils_AudioUnembedded;
ie_lib_utils_AudioUnembedded.__name__ = ["ie","lib","utils","AudioUnembedded"];
ie_lib_utils_AudioUnembedded.__super__ = ie_lib_utils_LocalUnembeddedAssetsLoader;
ie_lib_utils_AudioUnembedded.prototype = $extend(ie_lib_utils_LocalUnembeddedAssetsLoader.prototype,{
	__class__: ie_lib_utils_AudioUnembedded
});
var ie_lib_manager_AssetsConfig = function() { };
$hxClasses["ie.lib.manager.AssetsConfig"] = ie_lib_manager_AssetsConfig;
ie_lib_manager_AssetsConfig.__name__ = ["ie","lib","manager","AssetsConfig"];
var ie_lib_manager_ScreenManager = function() { };
$hxClasses["ie.lib.manager.ScreenManager"] = ie_lib_manager_ScreenManager;
ie_lib_manager_ScreenManager.__name__ = ["ie","lib","manager","ScreenManager"];
ie_lib_manager_ScreenManager.mainView = null;
ie_lib_manager_ScreenManager.screenLayer = null;
ie_lib_manager_ScreenManager.popupLayer = null;
ie_lib_manager_ScreenManager.achievementLayer = null;
ie_lib_manager_ScreenManager.activeScreen = null;
ie_lib_manager_ScreenManager.popups = null;
ie_lib_manager_ScreenManager.transitionLayer = null;
ie_lib_manager_ScreenManager.nextScreen = null;
ie_lib_manager_ScreenManager.popup = null;
ie_lib_manager_ScreenManager.currentTransition = null;
ie_lib_manager_ScreenManager.currentPopupTransition = null;
ie_lib_manager_ScreenManager.setMain = function(main) {
	ie_lib_manager_ScreenManager.mainView = main;
	ie_lib_manager_ScreenManager.screenLayer = new openfl_display_Sprite();
	ie_lib_manager_ScreenManager.popupLayer = new openfl_display_Sprite();
	ie_lib_manager_ScreenManager.transitionLayer = new openfl_display_Sprite();
	ie_lib_manager_ScreenManager.achievementLayer = new openfl_display_Sprite();
	ie_lib_manager_ScreenManager.mainView.addChild(ie_lib_manager_ScreenManager.screenLayer);
	ie_lib_manager_ScreenManager.mainView.addChild(ie_lib_manager_ScreenManager.popupLayer);
	ie_lib_manager_ScreenManager.mainView.addChild(ie_lib_manager_ScreenManager.transitionLayer);
	ie_lib_manager_ScreenManager.mainView.addChild(ie_lib_manager_ScreenManager.achievementLayer);
	ie_lib_manager_ScreenManager.popups = [];
};
ie_lib_manager_ScreenManager.setRootScreen = function(rootScreen) {
	ie_lib_manager_ScreenManager.activeScreen = rootScreen;
	ie_lib_manager_ScreenManager.activeScreen.screenWillAppear();
	ie_lib_manager_ScreenManager.screenLayer.addChild(ie_lib_manager_ScreenManager.activeScreen);
	ie_lib_manager_ScreenManager.activeScreen.screenDidAppear();
};
ie_lib_manager_ScreenManager.sendResizeEvent = function() {
	if(ie_lib_manager_ScreenManager.activeScreen != null) ie_lib_manager_ScreenManager.activeScreen.screenDidResize();
	if(ie_lib_manager_ScreenManager.popups != null) {
		var _g = 0;
		var _g1 = ie_lib_manager_ScreenManager.popups;
		while(_g < _g1.length) {
			var popup = _g1[_g];
			++_g;
			popup.popUpDidResize();
		}
	}
};
ie_lib_manager_ScreenManager.replaceScreen = function(nextScreen,transition) {
	if(ie_lib_manager_ScreenManager.currentTransition != null) return;
	ie_lib_manager_ScreenManager.nextScreen = nextScreen;
	if(nextScreen != null) nextScreen.screenWillAppear();
	if(ie_lib_manager_ScreenManager.activeScreen != null) ie_lib_manager_ScreenManager.activeScreen.screenWillDisappear();
	if(transition == null) transition = ie_lib_transitions_NoneTransition;
	ie_lib_manager_ScreenManager.currentTransition = Type.createInstance(transition,[]);
	ie_lib_manager_ScreenManager.currentTransition.setParameters(ie_lib_manager_ScreenManager.baseWidth,ie_lib_manager_ScreenManager.baseHeight,ie_lib_manager_ScreenManager.screenLayer,ie_lib_manager_ScreenManager.transitionLayer,ie_lib_manager_ScreenManager.activeScreen,nextScreen);
	ie_lib_manager_ScreenManager.transitionStart();
};
ie_lib_manager_ScreenManager.transitionStart = function() {
	if(ie_lib_manager_ScreenManager.popups.length > 0) ie_lib_manager_ScreenManager.popups[ie_lib_manager_ScreenManager.popups.length - 1].popUpWillDisappear();
	ie_lib_manager_ScreenManager.currentTransition.transitionIn(ie_lib_manager_ScreenManager.midTransition);
};
ie_lib_manager_ScreenManager.midTransition = function() {
	if(ie_lib_manager_ScreenManager.popups.length > 0) {
		var popup = ie_lib_manager_ScreenManager.popups.pop();
		popup.popUpDidDisappear();
		ie_lib_manager_ScreenManager.popupLayer.removeChild(popup);
		popup.destroy();
		while(ie_lib_manager_ScreenManager.popups.length > 0) {
			popup = ie_lib_manager_ScreenManager.popups.pop();
			ie_lib_manager_ScreenManager.popupLayer.removeChild(popup);
			popup.destroy();
		}
	}
	ie_lib_manager_ScreenManager.currentTransition.transitionOut(ie_lib_manager_ScreenManager.transitionFinished);
};
ie_lib_manager_ScreenManager.transitionFinished = function() {
	ie_lib_manager_ScreenManager.currentTransition.destroy();
	ie_lib_manager_ScreenManager.currentTransition = null;
	ie_lib_manager_ScreenManager.screenLayer.removeChild(ie_lib_manager_ScreenManager.activeScreen);
	if(ie_lib_manager_ScreenManager.activeScreen != null) ie_lib_manager_ScreenManager.activeScreen.screenDidDisappear();
	ie_lib_manager_ScreenManager.activeScreen.destroy();
	ie_lib_manager_ScreenManager.activeScreen = ie_lib_manager_ScreenManager.nextScreen;
	ie_lib_manager_ScreenManager.nextScreen = null;
	ie_lib_manager_ScreenManager.screenLayer.addChild(ie_lib_manager_ScreenManager.activeScreen);
	if(ie_lib_manager_ScreenManager.activeScreen != null) ie_lib_manager_ScreenManager.activeScreen.screenDidAppear();
};
ie_lib_manager_ScreenManager.pushPopUp = function(overlay,transition) {
	if(ie_lib_manager_ScreenManager.currentPopupTransition != null) return;
	ie_lib_manager_ScreenManager.popup = overlay;
	ie_lib_manager_ScreenManager.popups.push(ie_lib_manager_ScreenManager.popup);
	ie_lib_manager_ScreenManager.overlayWillStart(ie_lib_manager_ScreenManager.popup,false);
	if(transition == null) transition = ie_lib_popuptransitions_PopupNone;
	ie_lib_manager_ScreenManager.currentPopupTransition = Type.createInstance(transition,[]);
	ie_lib_manager_ScreenManager.currentPopupTransition.setParameters(ie_lib_manager_ScreenManager.baseWidth,ie_lib_manager_ScreenManager.baseHeight,ie_lib_manager_ScreenManager.popupLayer,ie_lib_manager_ScreenManager.transitionLayer,ie_lib_manager_ScreenManager.popup,false);
	ie_lib_manager_ScreenManager.currentPopupTransition.transitionStart(ie_lib_manager_ScreenManager.popupTransitionDone);
};
ie_lib_manager_ScreenManager.popPopup = function(transition) {
	if(ie_lib_manager_ScreenManager.currentPopupTransition != null) return;
	if(ie_lib_manager_ScreenManager.popups.length > 0) {
		ie_lib_manager_ScreenManager.popup = ie_lib_manager_ScreenManager.popups.pop();
		ie_lib_manager_ScreenManager.overlayWillStart(ie_lib_manager_ScreenManager.popup,true);
		if(transition == null) transition = ie_lib_popuptransitions_PopupNone;
		ie_lib_manager_ScreenManager.currentPopupTransition = Type.createInstance(transition,[]);
		ie_lib_manager_ScreenManager.currentPopupTransition.setParameters(ie_lib_manager_ScreenManager.baseWidth,ie_lib_manager_ScreenManager.baseHeight,ie_lib_manager_ScreenManager.popupLayer,ie_lib_manager_ScreenManager.transitionLayer,ie_lib_manager_ScreenManager.popup,true);
		ie_lib_manager_ScreenManager.currentPopupTransition.transitionStart(ie_lib_manager_ScreenManager.popupTransitionDone);
	}
};
ie_lib_manager_ScreenManager.popupTransitionDone = function() {
	ie_lib_manager_ScreenManager.overlayDidFinish(ie_lib_manager_ScreenManager.popup,ie_lib_manager_ScreenManager.currentPopupTransition.remove);
	ie_lib_manager_ScreenManager.popup = null;
	ie_lib_manager_ScreenManager.currentPopupTransition.destroy();
	ie_lib_manager_ScreenManager.currentPopupTransition = null;
};
ie_lib_manager_ScreenManager.overlayWillStart = function(overlay,remove) {
	if(remove) {
		if(ie_lib_manager_ScreenManager.popups.length <= 0) ie_lib_manager_ScreenManager.activeScreen.popUpWillDisappear(); else if(ie_lib_manager_ScreenManager.popups.length > 0) ie_lib_manager_ScreenManager.popups[ie_lib_manager_ScreenManager.popups.length - 1].popUpWillAppear();
		overlay.popUpWillDisappear();
	} else {
		if(ie_lib_manager_ScreenManager.popups.length <= 1) ie_lib_manager_ScreenManager.activeScreen.popUpWillAppear(); else if(ie_lib_manager_ScreenManager.popups.length > 1) ie_lib_manager_ScreenManager.popups[ie_lib_manager_ScreenManager.popups.length - 2].popUpWillDisappear();
		overlay.popUpWillAppear();
	}
};
ie_lib_manager_ScreenManager.overlayDidFinish = function(overlay,remove) {
	if(remove) {
		if(ie_lib_manager_ScreenManager.popups.length <= 0) ie_lib_manager_ScreenManager.activeScreen.popUpDidDisappear(); else if(ie_lib_manager_ScreenManager.popups.length > 0) ie_lib_manager_ScreenManager.popups[ie_lib_manager_ScreenManager.popups.length - 1].popUpDidAppear();
		overlay.popUpDidDisappear();
		ie_lib_manager_ScreenManager.popupLayer.removeChild(overlay);
		overlay.destroy();
	} else {
		if(ie_lib_manager_ScreenManager.popups.length <= 1) ie_lib_manager_ScreenManager.activeScreen.popUpDidAppear(); else if(ie_lib_manager_ScreenManager.popups.length > 1) ie_lib_manager_ScreenManager.popups[ie_lib_manager_ScreenManager.popups.length - 2].popUpDidDisappear();
		overlay.popUpDidAppear();
	}
};
ie_lib_manager_ScreenManager.activateScreen = function() {
	if(ie_lib_manager_ScreenManager.popups.length > 0) ie_lib_manager_ScreenManager.popups[ie_lib_manager_ScreenManager.popups.length - 1].popUpActivate(); else ie_lib_manager_ScreenManager.activeScreen.screenActivate();
};
ie_lib_manager_ScreenManager.deactivateScreen = function() {
	if(ie_lib_manager_ScreenManager.popups.length > 0) ie_lib_manager_ScreenManager.popups[ie_lib_manager_ScreenManager.popups.length - 1].popUpDeactivate(); else ie_lib_manager_ScreenManager.activeScreen.screenDeactivate();
};
var ie_lib_manager_UpdateManager = function() { };
$hxClasses["ie.lib.manager.UpdateManager"] = ie_lib_manager_UpdateManager;
ie_lib_manager_UpdateManager.__name__ = ["ie","lib","manager","UpdateManager"];
ie_lib_manager_UpdateManager.updateList = null;
ie_lib_manager_UpdateManager.hasEnterFrame = null;
ie_lib_manager_UpdateManager.prevTime = null;
ie_lib_manager_UpdateManager.init = function() {
	ie_lib_manager_UpdateManager.hasEnterFrame = false;
	ie_lib_manager_UpdateManager.updateList = [];
};
ie_lib_manager_UpdateManager.addListener = function(callback) {
	ie_lib_manager_UpdateManager.updateList.push(callback);
	if(!ie_lib_manager_UpdateManager.hasEnterFrame) {
		ie_lib_manager_UpdateManager.prevTime = openfl_Lib.getTimer();
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME,ie_lib_manager_UpdateManager.update);
		ie_lib_manager_UpdateManager.hasEnterFrame = true;
	}
};
ie_lib_manager_UpdateManager.removeListener = function(callback) {
	HxOverrides.remove(ie_lib_manager_UpdateManager.updateList,callback);
	if(ie_lib_manager_UpdateManager.hasEnterFrame && ie_lib_manager_UpdateManager.updateList.length <= 0) {
		openfl_Lib.current.stage.removeEventListener(openfl_events_Event.ENTER_FRAME,ie_lib_manager_UpdateManager.update);
		ie_lib_manager_UpdateManager.hasEnterFrame = false;
	}
};
ie_lib_manager_UpdateManager.update = function(e) {
	var curTime = openfl_Lib.getTimer();
	var dt = (curTime - ie_lib_manager_UpdateManager.prevTime) * .001;
	if(dt < ie_lib_manager_UpdateManager.DELAY_THRESHOLD) {
		var _g = 0;
		var _g1 = ie_lib_manager_UpdateManager.updateList;
		while(_g < _g1.length) {
			var cb = _g1[_g];
			++_g;
			cb(dt);
		}
	}
	ie_lib_manager_UpdateManager.prevTime = curTime;
};
var ie_lib_popuptransitions_PopupTransition = function() { };
$hxClasses["ie.lib.popuptransitions.PopupTransition"] = ie_lib_popuptransitions_PopupTransition;
ie_lib_popuptransitions_PopupTransition.__name__ = ["ie","lib","popuptransitions","PopupTransition"];
ie_lib_popuptransitions_PopupTransition.prototype = {
	setParameters: function(width,height,popupLayer,transitionLayer,popup,remove) {
		this.screenWidth = width;
		this.screenHeight = height;
		this.popupLayer = popupLayer;
		this.transitionLayer = transitionLayer;
		this.popup = popup;
		this.remove = remove;
	}
	,transitionStart: function(doneCallback) {
		if(this.remove) this.popTransition(doneCallback); else this.pushTransition(doneCallback);
	}
	,pushTransition: function(doneCallback) {
	}
	,popTransition: function(doneCallback) {
	}
	,destroy: function() {
		this.screenWidth = null;
		this.screenHeight = null;
		this.popupLayer = null;
		this.transitionLayer = null;
		this.popup = null;
		this.remove = null;
	}
	,__class__: ie_lib_popuptransitions_PopupTransition
};
var ie_lib_popuptransitions_PopupNone = function() { };
$hxClasses["ie.lib.popuptransitions.PopupNone"] = ie_lib_popuptransitions_PopupNone;
ie_lib_popuptransitions_PopupNone.__name__ = ["ie","lib","popuptransitions","PopupNone"];
ie_lib_popuptransitions_PopupNone.__super__ = ie_lib_popuptransitions_PopupTransition;
ie_lib_popuptransitions_PopupNone.prototype = $extend(ie_lib_popuptransitions_PopupTransition.prototype,{
	pushTransition: function(doneCallback) {
		this.popup.set_x(0);
		this.popup.set_y(0);
		this.popupLayer.addChild(this.popup);
		doneCallback();
	}
	,popTransition: function(doneCallback) {
		doneCallback();
	}
	,__class__: ie_lib_popuptransitions_PopupNone
});
var ie_lib_transitions_ScreenTransition = function() { };
$hxClasses["ie.lib.transitions.ScreenTransition"] = ie_lib_transitions_ScreenTransition;
ie_lib_transitions_ScreenTransition.__name__ = ["ie","lib","transitions","ScreenTransition"];
ie_lib_transitions_ScreenTransition.prototype = {
	setParameters: function(width,height,screenLayer,transitionLayer,current,next) {
		this.screenWidth = width;
		this.screenHeight = height;
		this.screenLayer = screenLayer;
		this.transitionLayer = transitionLayer;
		this.current = current;
		this.next = next;
	}
	,transitionIn: function(doneCallback) {
	}
	,transitionOut: function(doneCallback) {
	}
	,destroy: function() {
		this.screenWidth = null;
		this.screenHeight = null;
		this.screenLayer = null;
		this.transitionLayer = null;
		this.current = null;
		this.next = null;
	}
	,__class__: ie_lib_transitions_ScreenTransition
};
var ie_lib_transitions_NoneTransition = function() { };
$hxClasses["ie.lib.transitions.NoneTransition"] = ie_lib_transitions_NoneTransition;
ie_lib_transitions_NoneTransition.__name__ = ["ie","lib","transitions","NoneTransition"];
ie_lib_transitions_NoneTransition.__super__ = ie_lib_transitions_ScreenTransition;
ie_lib_transitions_NoneTransition.prototype = $extend(ie_lib_transitions_ScreenTransition.prototype,{
	transitionIn: function(doneCallback) {
		doneCallback();
	}
	,transitionOut: function(doneCallback) {
		this.next.set_x(0);
		this.next.set_y(0);
		this.screenLayer.addChild(this.next);
		doneCallback();
	}
	,__class__: ie_lib_transitions_NoneTransition
});
var ie_lib_utils_Batch = function(unembedded,localized) {
	this.localized = [];
	this.unembedded = [];
	if(unembedded != null) this.unembedded = unembedded;
	if(localized != null) this.localized = localized;
};
$hxClasses["ie.lib.utils.Batch"] = ie_lib_utils_Batch;
ie_lib_utils_Batch.__name__ = ["ie","lib","utils","Batch"];
ie_lib_utils_Batch.prototype = {
	__class__: ie_lib_utils_Batch
};
var ie_lib_utils_LocalBitmapAsset = function(key) {
	openfl_events_EventDispatcher.call(this);
	this.request = { request : new openfl_net_URLRequest(key), loader : new openfl_display_Loader()};
	this.request.loader.contentLoaderInfo.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.handleComplete));
	this.request.loader.contentLoaderInfo.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.handleError));
};
$hxClasses["ie.lib.utils.LocalBitmapAsset"] = ie_lib_utils_LocalBitmapAsset;
ie_lib_utils_LocalBitmapAsset.__name__ = ["ie","lib","utils","LocalBitmapAsset"];
ie_lib_utils_LocalBitmapAsset.__super__ = openfl_events_EventDispatcher;
ie_lib_utils_LocalBitmapAsset.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	start: function() {
		this.request.loader.load(this.request.request);
	}
	,handleComplete: function(e) {
		this.asset = (js_Boot.__cast(this.request.loader.content , openfl_display_Bitmap)).bitmapData;
		this.request.loader.unload();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,handleError: function(e) {
		this.asset = null;
		this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR));
	}
	,destroy: function() {
		this.request.loader.unload();
		this.request.request = null;
		this.request.loader = null;
		this.request = null;
		this.asset.dispose();
		this.asset = null;
	}
	,__class__: ie_lib_utils_LocalBitmapAsset
});
var ie_lib_utils_LocalSoundAsset = function(key) {
	openfl_events_EventDispatcher.call(this);
	this.request = { request : new openfl_net_URLRequest(key)};
	this.asset = new openfl_media_Sound();
	this.asset.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.handleComplete));
	this.asset.addEventListener(openfl_events_Event.CANCEL,$bind(this,this.handleError));
};
$hxClasses["ie.lib.utils.LocalSoundAsset"] = ie_lib_utils_LocalSoundAsset;
ie_lib_utils_LocalSoundAsset.__name__ = ["ie","lib","utils","LocalSoundAsset"];
ie_lib_utils_LocalSoundAsset.__super__ = openfl_events_EventDispatcher;
ie_lib_utils_LocalSoundAsset.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	start: function() {
		this.asset.load(this.request.request);
	}
	,handleComplete: function(e) {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,handleError: function(e) {
		this.asset.close();
		this.asset.load(this.request.request);
	}
	,destroy: function() {
		this.request.request = null;
		this.request = null;
		this.asset.close();
		this.asset = null;
	}
	,__class__: ie_lib_utils_LocalSoundAsset
});
var ie_lib_utils_LocalTextAsset = function(key) {
	openfl_events_EventDispatcher.call(this);
	this.request = { request : new openfl_net_URLRequest(key), loader : new openfl_net_URLLoader()};
	this.request.loader.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.handleComplete));
	this.request.loader.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.handleError));
};
$hxClasses["ie.lib.utils.LocalTextAsset"] = ie_lib_utils_LocalTextAsset;
ie_lib_utils_LocalTextAsset.__name__ = ["ie","lib","utils","LocalTextAsset"];
ie_lib_utils_LocalTextAsset.__super__ = openfl_events_EventDispatcher;
ie_lib_utils_LocalTextAsset.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	start: function() {
		this.request.loader.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
		this.request.loader.load(this.request.request);
	}
	,handleComplete: function(e) {
		this.asset = this.request.loader.data.toString();
		this.request.loader.data = null;
		this.request.loader.close();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,handleError: function(e) {
		this.request.loader.data = null;
		this.request.loader.close();
		this.start();
	}
	,destroy: function() {
		this.request.loader.data = null;
		this.request.loader.bytesLoaded = null;
		this.request.loader.bytesTotal = null;
		this.request.request = null;
		this.request.loader = null;
		this.request = null;
		this.asset = null;
	}
	,__class__: ie_lib_utils_LocalTextAsset
});
var ie_lib_utils_actuate_ActuateUtility = function() { };
$hxClasses["ie.lib.utils.actuate.ActuateUtility"] = ie_lib_utils_actuate_ActuateUtility;
ie_lib_utils_actuate_ActuateUtility.__name__ = ["ie","lib","utils","actuate","ActuateUtility"];
ie_lib_utils_actuate_ActuateUtility.popInObjects = function(p_objs,p_duration,p_delay,p_ease,p_sfx,p_callback) {
	if(p_delay == null) p_delay = 0;
	if(p_duration == null) p_duration = 0.3;
	var refScaleX;
	var refScaleY;
	var refX;
	var refY;
	var newX;
	var newY;
	var duration = p_duration;
	var ease;
	if(p_ease != null) ease = p_ease; else ease = motion_easing_Expo.get_easeOut();
	var _g1 = 0;
	var _g = p_objs.length;
	while(_g1 < _g) {
		var i = _g1++;
		var obj = p_objs[i];
		refScaleX = obj.get_scaleX();
		refScaleY = obj.get_scaleY();
		refX = obj.get_x();
		refY = obj.get_y();
		newX = obj.get_x() + obj.get_width() * 0.5;
		newY = obj.get_y() + obj.get_height() * 0.5;
		obj.set_x(newX);
		obj.set_y(newY);
		obj.set_scaleX(obj.set_scaleY(0.001));
		if(p_delay == 0) {
			if(p_sfx != null) com_jpmata_managers_SoundManager.get_instance().playSFX(p_sfx);
			if(i == p_objs.length - 1) motion_Actuate.tween(obj,duration,{ scaleX : refScaleX, scaleY : refScaleY, x : refX, y : refY}).ease(ease).onComplete(function() {
				if(p_callback != null) p_callback();
			}); else motion_Actuate.tween(obj,duration,{ scaleX : refScaleX, scaleY : refScaleY, x : refX, y : refY}).ease(ease);
		} else {
			if(p_sfx != null) motion_Actuate.tween(obj,duration,{ alpha : 1}).delay(p_delay * (i + 1)).ease(motion_easing_Linear.get_easeNone()).onComplete(($_=com_jpmata_managers_SoundManager.get_instance(),$bind($_,$_.playSFX)),[p_sfx]);
			if(i == p_objs.length - 1) motion_Actuate.tween(obj,duration,{ scaleX : refScaleX, scaleY : refScaleY, x : refX, y : refY}).ease(ease).onComplete(function() {
				if(p_callback != null) p_callback();
			}).delay(p_delay * (i + 1)); else motion_Actuate.tween(obj,duration,{ scaleX : refScaleX, scaleY : refScaleY, x : refX, y : refY}).ease(ease).delay(p_delay * (i + 1));
		}
	}
};
ie_lib_utils_actuate_ActuateUtility.popOutObjects = function(p_objs,p_duration,p_delay,p_ease,p_callback) {
	if(p_delay == null) p_delay = 0;
	if(p_duration == null) p_duration = 0.3;
	var newX;
	var newY;
	var duration = p_duration;
	var ease;
	if(p_ease != null) ease = p_ease; else ease = motion_easing_Expo.get_easeOut();
	var _g1 = 0;
	var _g = p_objs.length;
	while(_g1 < _g) {
		var i = _g1++;
		var obj = [p_objs[i]];
		newX = obj[0].get_x() + obj[0].get_width() * 0.5;
		newY = obj[0].get_y() + obj[0].get_height() * 0.5;
		if(p_delay == 0) {
			if(i == p_objs.length - 1) motion_Actuate.tween(obj[0],duration,{ scaleX : 0, scaleY : 0, x : newX, y : newY}).ease(ease).onComplete((function(obj) {
				return function() {
					if(obj[0] != null) obj[0].set_visible(false);
					if(p_callback != null) p_callback();
				};
			})(obj)); else motion_Actuate.tween(obj[0],duration,{ scaleX : 0, scaleY : 0, x : newX, y : newY}).ease(ease).onComplete((function(obj) {
				return function() {
					if(obj[0] != null) obj[0].set_visible(false);
				};
			})(obj));
		} else if(i == p_objs.length - 1) motion_Actuate.tween(obj[0],duration,{ scaleX : 0, scaleY : 0, x : newX, y : newY}).ease(ease).onComplete((function(obj) {
			return function() {
				if(obj[0] != null) obj[0].set_visible(false);
				if(p_callback != null) p_callback();
			};
		})(obj)).delay(p_delay * (i + 1)); else motion_Actuate.tween(obj[0],duration,{ scaleX : 0, scaleY : 0, x : newX, y : newY}).ease(ease).onComplete((function(obj) {
			return function() {
				if(obj[0] != null) obj[0].set_visible(false);
			};
		})(obj)).delay(p_delay * (i + 1));
	}
};
var ie_lib_utils_assets_AssetsUtility = function() { };
$hxClasses["ie.lib.utils.assets.AssetsUtility"] = ie_lib_utils_assets_AssetsUtility;
ie_lib_utils_assets_AssetsUtility.__name__ = ["ie","lib","utils","assets","AssetsUtility"];
ie_lib_utils_assets_AssetsUtility._assetsLocalized = null;
ie_lib_utils_assets_AssetsUtility._assetsUnembedded = null;
ie_lib_utils_assets_AssetsUtility._audioLocalized = null;
ie_lib_utils_assets_AssetsUtility._audioUnembedded = null;
ie_lib_utils_assets_AssetsUtility.setLocalizedAssets = function(p_assetsConfig,p_audioConfig) {
	if(ie_lib_utils_assets_AssetsUtility._assetsLocalized != p_assetsConfig) ie_lib_utils_assets_AssetsUtility._assetsLocalized = p_assetsConfig;
	if(ie_lib_utils_assets_AssetsUtility._audioLocalized != p_audioConfig) ie_lib_utils_assets_AssetsUtility._audioLocalized = p_audioConfig;
};
ie_lib_utils_assets_AssetsUtility.setUnembeddedAssets = function(p_assetsConfig,p_audioConfig) {
	if(ie_lib_utils_assets_AssetsUtility._assetsUnembedded != p_assetsConfig) ie_lib_utils_assets_AssetsUtility._assetsUnembedded = p_assetsConfig;
	if(ie_lib_utils_assets_AssetsUtility._audioUnembedded != p_audioConfig) ie_lib_utils_assets_AssetsUtility._audioUnembedded = p_audioConfig;
};
ie_lib_utils_assets_AssetsUtility.getFont = function(p_path) {
	if(StringTools.trim(p_path).length == 0) return null;
	var result = openfl_Assets.getFont(p_path);
	return result;
};
ie_lib_utils_assets_AssetsUtility.getText = function(p_path) {
	if(StringTools.trim(p_path).length == 0) return null;
	var result = null;
	if(openfl_Assets.exists(p_path)) result = openfl_Assets.getText(p_path); else {
		if(ie_lib_utils_assets_AssetsUtility._assetsUnembedded != null) result = ie_lib_utils_assets_AssetsUtility._assetsUnembedded.text(p_path);
		if(result == null && ie_lib_utils_assets_AssetsUtility._assetsLocalized != null) result = ie_lib_utils_assets_AssetsUtility._assetsLocalized.text(p_path);
	}
	return result;
};
ie_lib_utils_assets_AssetsUtility.getSound = function(p_path) {
	if(StringTools.trim(p_path).length == 0) return null;
	var result = null;
	if(openfl_Assets.exists(p_path)) result = openfl_Assets.getSound(p_path); else {
		if(ie_lib_utils_assets_AssetsUtility._audioUnembedded != null) result = ie_lib_utils_assets_AssetsUtility._audioUnembedded.sound(p_path);
		if(result == null && ie_lib_utils_assets_AssetsUtility._audioLocalized != null) result = ie_lib_utils_assets_AssetsUtility._audioLocalized.sound(p_path);
	}
	return result;
};
ie_lib_utils_assets_AssetsUtility.getBitmapData = function(p_path) {
	if(StringTools.trim(p_path).length == 0) return null;
	var result = null;
	if(openfl_Assets.exists(p_path)) result = openfl_Assets.getBitmapData(p_path); else {
		if(ie_lib_utils_assets_AssetsUtility._assetsUnembedded != null) result = ie_lib_utils_assets_AssetsUtility._assetsUnembedded.asset(p_path);
		if(result == null && ie_lib_utils_assets_AssetsUtility._assetsLocalized != null) result = ie_lib_utils_assets_AssetsUtility._assetsLocalized.asset(p_path);
	}
	return result;
};
var ie_lib_utils_assets_EmbeddedJSON = function() { };
$hxClasses["ie.lib.utils.assets.EmbeddedJSON"] = ie_lib_utils_assets_EmbeddedJSON;
ie_lib_utils_assets_EmbeddedJSON.__name__ = ["ie","lib","utils","assets","EmbeddedJSON"];
ie_lib_utils_assets_EmbeddedJSON.getValue = function(val) {
	var url = StringTools.replace(val,ie_lib_utils_assets_EmbeddedJSON.rootURL,"");
	var segs = url.split("/");
	var rootFields = Type.getClassFields(ie_lib_utils_assets_EmbeddedJSON);
	var _g1 = 0;
	var _g = segs.length;
	while(_g1 < _g) {
		var i = _g1++;
		segs[i] = "_" + StringTools.replace(StringTools.replace(StringTools.replace(segs[i]," ","_"),"-","_"),".","__");
	}
	var rootName = segs.shift();
	var fieldValue = Reflect.field(ie_lib_utils_assets_EmbeddedJSON,rootName);
	while(segs.length > 0 && Reflect.isObject(fieldValue)) fieldValue = Reflect.field(fieldValue,segs.shift());
	return fieldValue;
};
var ie_lib_utils_device_BrowserDeviceType = $hxClasses["ie.lib.utils.device.BrowserDeviceType"] = { __ename__ : ["ie","lib","utils","device","BrowserDeviceType"], __constructs__ : ["DESKTOP","MOBILE_IOS","MOBILE_ANDROID","MOBILE_KINDLE","MOBILE_WINDOWS"] };
ie_lib_utils_device_BrowserDeviceType.DESKTOP = ["DESKTOP",0];
ie_lib_utils_device_BrowserDeviceType.DESKTOP.toString = $estr;
ie_lib_utils_device_BrowserDeviceType.DESKTOP.__enum__ = ie_lib_utils_device_BrowserDeviceType;
ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS = ["MOBILE_IOS",1];
ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS.toString = $estr;
ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS.__enum__ = ie_lib_utils_device_BrowserDeviceType;
ie_lib_utils_device_BrowserDeviceType.MOBILE_ANDROID = ["MOBILE_ANDROID",2];
ie_lib_utils_device_BrowserDeviceType.MOBILE_ANDROID.toString = $estr;
ie_lib_utils_device_BrowserDeviceType.MOBILE_ANDROID.__enum__ = ie_lib_utils_device_BrowserDeviceType;
ie_lib_utils_device_BrowserDeviceType.MOBILE_KINDLE = ["MOBILE_KINDLE",3];
ie_lib_utils_device_BrowserDeviceType.MOBILE_KINDLE.toString = $estr;
ie_lib_utils_device_BrowserDeviceType.MOBILE_KINDLE.__enum__ = ie_lib_utils_device_BrowserDeviceType;
ie_lib_utils_device_BrowserDeviceType.MOBILE_WINDOWS = ["MOBILE_WINDOWS",4];
ie_lib_utils_device_BrowserDeviceType.MOBILE_WINDOWS.toString = $estr;
ie_lib_utils_device_BrowserDeviceType.MOBILE_WINDOWS.__enum__ = ie_lib_utils_device_BrowserDeviceType;
var ie_lib_utils_device_BrowserInfoUtility = function() { };
$hxClasses["ie.lib.utils.device.BrowserInfoUtility"] = ie_lib_utils_device_BrowserInfoUtility;
ie_lib_utils_device_BrowserInfoUtility.__name__ = ["ie","lib","utils","device","BrowserInfoUtility"];
ie_lib_utils_device_BrowserInfoUtility.__properties__ = {get_isMobile:"get_isMobile",get_isDesktop:"get_isDesktop"}
ie_lib_utils_device_BrowserInfoUtility.get_isDesktop = function() {
	return ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.DESKTOP;
};
ie_lib_utils_device_BrowserInfoUtility.get_isMobile = function() {
	return ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_ANDROID || ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS || ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_KINDLE || ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_WINDOWS;
};
ie_lib_utils_device_BrowserInfoUtility.detectBrowser = function() {
	if(ie_lib_utils_device_BrowserInfoUtility._info != null) return ie_lib_utils_device_BrowserInfoUtility._info;
	var navigator = window.navigator;
	var regex;
	ie_lib_utils_device_BrowserInfoUtility._info = { platformType : navigator.platform, platformVersion : "", browserName : navigator.appName, browserVersion : navigator.appVersion, browserType : navigator.appVersion, deviceType : ie_lib_utils_device_BrowserDeviceType.DESKTOP, supports3dTransform : false, legacyIEFilterDOMPipe : false};
	if(navigator.appName.indexOf("CocoonJS") != -1) {
		if(navigator.userAgent.toLowerCase().indexOf("ios") != -1) {
			ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS;
			if(navigator.userAgent.toLowerCase().indexOf("iphone") != -1) ie_lib_utils_device_BrowserInfoUtility._info.platformType = "iPhone"; else if(navigator.userAgent.toLowerCase().indexOf("ipod") != -1) ie_lib_utils_device_BrowserInfoUtility._info.platformType = "iPod"; else if(navigator.userAgent.toLowerCase().indexOf("ipad") != -1) ie_lib_utils_device_BrowserInfoUtility._info.platformType = "iPad";
		} else if(navigator.userAgent.toLowerCase().indexOf("android") != -1) {
			ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.MOBILE_ANDROID;
			ie_lib_utils_device_BrowserInfoUtility._info.platformType = "Android";
		} else if(navigator.userAgent.toLowerCase().indexOf("kindle") != -1 || navigator.userAgent.toLowerCase().indexOf("amazon") != -1) {
			ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.MOBILE_KINDLE;
			ie_lib_utils_device_BrowserInfoUtility._info.platformType = "Android";
		} else if(navigator.userAgent.toLowerCase().indexOf("window") != -1) {
			ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.MOBILE_WINDOWS;
			ie_lib_utils_device_BrowserInfoUtility._info.platformType = "IEMobile";
		}
		ie_lib_utils_device_BrowserInfoUtility._info.platformVersion = StringTools.trim(navigator.userAgent.split(",")[1]);
	} else if(navigator.platform.indexOf("iPhone") != -1 || navigator.platform.indexOf("iPod") != -1 || navigator.platform.indexOf("iPad") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS;
		if(navigator.platform.indexOf("iPhone") != -1) ie_lib_utils_device_BrowserInfoUtility._info.platformType = "iPhone"; else if(navigator.platform.indexOf("iPod") != -1) ie_lib_utils_device_BrowserInfoUtility._info.platformType = "iPod"; else if(navigator.platform.indexOf("iPad") != -1) ie_lib_utils_device_BrowserInfoUtility._info.platformType = "iPad";
		regex = new EReg("OS (\\d+_\\d+)","");
		if(regex.match(navigator.userAgent)) {
			var ver = regex.matched(1);
			ver = StringTools.replace(ver,"_",".");
			ie_lib_utils_device_BrowserInfoUtility._info.platformVersion = ver;
		}
	} else if(navigator.userAgent.indexOf("Android") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.MOBILE_ANDROID;
		ie_lib_utils_device_BrowserInfoUtility._info.platformType = "Android";
		regex = new EReg("Android (\\d+\\.\\d+)","");
		if(regex.match(navigator.userAgent)) ie_lib_utils_device_BrowserInfoUtility._info.platformVersion = regex.matched(1);
	} else if(navigator.userAgent.indexOf("Silk") != -1 || navigator.userAgent.indexOf("Kindle") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.MOBILE_ANDROID;
		ie_lib_utils_device_BrowserInfoUtility._info.platformType = "Android";
		ie_lib_utils_device_BrowserInfoUtility._info.platformVersion = "2.3.4";
	} else if(navigator.userAgent.indexOf("IEMobile") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.MOBILE_WINDOWS;
		ie_lib_utils_device_BrowserInfoUtility._info.platformType = "IEMobile";
		regex = new EReg("IEMobile/(\\d+\\.\\d+)","");
		if(regex.match(navigator.userAgent)) ie_lib_utils_device_BrowserInfoUtility._info.platformVersion = regex.matched(1);
	} else if(navigator.platform.indexOf("Win") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.DESKTOP;
		ie_lib_utils_device_BrowserInfoUtility._info.platformType = "Win";
		ie_lib_utils_device_BrowserInfoUtility._info.platformVersion = "0.0";
	} else if(navigator.platform.indexOf("Mac") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.DESKTOP;
		ie_lib_utils_device_BrowserInfoUtility._info.platformType = "Mac";
		regex = new EReg("OS X (\\d+_\\d+)","");
		if(regex.match(navigator.userAgent)) {
			var ver1 = regex.matched(1);
			ver1 = StringTools.replace(ver1,"_",".");
			ie_lib_utils_device_BrowserInfoUtility._info.platformVersion = ver1;
		}
	} else if(navigator.platform.indexOf("Linux") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.deviceType = ie_lib_utils_device_BrowserDeviceType.DESKTOP;
		ie_lib_utils_device_BrowserInfoUtility._info.platformType = "Linux";
		ie_lib_utils_device_BrowserInfoUtility._info.platformVersion = "0.0";
	}
	if(navigator.userAgent.indexOf("Firefox") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.browserName = "Firefox";
		regex = new EReg("Firefox[/\\s](\\d+\\.\\d+)","");
		if(regex.match(navigator.userAgent)) ie_lib_utils_device_BrowserInfoUtility._info.browserVersion = regex.matched(1);
	} else if(navigator.userAgent.indexOf("MSIE") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.browserName = "MSIE";
		regex = new EReg("MSIE (\\d+\\.\\d+);","");
		if(regex.match(navigator.userAgent)) ie_lib_utils_device_BrowserInfoUtility._info.browserVersion = regex.matched(1);
	} else if(navigator.userAgent.indexOf("Opera") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.browserName = "Opera";
		regex = new EReg("Opera[/\\s](\\d+\\.\\d+)","");
		if(regex.match(navigator.userAgent)) ie_lib_utils_device_BrowserInfoUtility._info.browserVersion = regex.matched(1);
	} else if(navigator.userAgent.indexOf("Chrome") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.browserName = "Chrome";
		regex = new EReg("Chrome[/\\s](\\d+\\.\\d+)","");
		if(regex.match(navigator.userAgent)) ie_lib_utils_device_BrowserInfoUtility._info.browserVersion = regex.matched(1);
	} else if(navigator.userAgent.indexOf("Safari") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.browserName = "Safari";
		regex = new EReg("Version[/\\s](\\d+\\.\\d+)","");
		if(regex.match(navigator.userAgent)) ie_lib_utils_device_BrowserInfoUtility._info.browserVersion = regex.matched(1);
	} else if(navigator.userAgent.indexOf("Netscape") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.browserName = "Netscape";
		regex = new EReg("Netscape[/\\s](\\d+\\.\\d+)","");
		if(regex.match(navigator.userAgent)) ie_lib_utils_device_BrowserInfoUtility._info.browserVersion = regex.matched(1);
	} else if(navigator.userAgent.indexOf("Konqueror") != -1) {
		ie_lib_utils_device_BrowserInfoUtility._info.browserName = "Konqueror";
		regex = new EReg("KHTML[/\\s](\\d+\\.\\d+)","");
		if(regex.match(navigator.userAgent)) ie_lib_utils_device_BrowserInfoUtility._info.browserVersion = regex.matched(1);
	} else if(ie_lib_utils_device_BrowserInfoUtility._info.deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS) ie_lib_utils_device_BrowserInfoUtility._info.browserName = "Safari";
	if(navigator.userAgent.indexOf("WebKit") != -1) ie_lib_utils_device_BrowserInfoUtility._info.browserType = "WebKit"; else ie_lib_utils_device_BrowserInfoUtility._info.browserType = ie_lib_utils_device_BrowserInfoUtility._info.browserName;
	if(ie_lib_utils_device_BrowserInfoUtility._info.browserName == "MSIE" && parseFloat(ie_lib_utils_device_BrowserInfoUtility._info.browserVersion) < 9) ie_lib_utils_device_BrowserInfoUtility._info.legacyIEFilterDOMPipe = true; else ie_lib_utils_device_BrowserInfoUtility._info.legacyIEFilterDOMPipe = false;
	var cssMatrix = window.WebKitCSSMatrix || (window.MSCSSMatrix || (window.MozCSSMatrix || window.OCSSMatrix));
	if(cssMatrix != null && new cssMatrix("")['m11'] != undefined) ie_lib_utils_device_BrowserInfoUtility._info.supports3dTransform = true; else ie_lib_utils_device_BrowserInfoUtility._info.supports3dTransform = false;
	return ie_lib_utils_device_BrowserInfoUtility._info;
};
ie_lib_utils_device_BrowserInfoUtility.isCocoonJS = function() {
	var isCocoonJS = window.navigator.isCocoonJS;
	return isCocoonJS || window.navigator.appName.indexOf("CocoonJS") != -1;
};
var ie_lib_utils_display_DisplayOrientation = $hxClasses["ie.lib.utils.display.DisplayOrientation"] = { __ename__ : ["ie","lib","utils","display","DisplayOrientation"], __constructs__ : ["LANDSCAPE","PORTRAIT"] };
ie_lib_utils_display_DisplayOrientation.LANDSCAPE = ["LANDSCAPE",0];
ie_lib_utils_display_DisplayOrientation.LANDSCAPE.toString = $estr;
ie_lib_utils_display_DisplayOrientation.LANDSCAPE.__enum__ = ie_lib_utils_display_DisplayOrientation;
ie_lib_utils_display_DisplayOrientation.PORTRAIT = ["PORTRAIT",1];
ie_lib_utils_display_DisplayOrientation.PORTRAIT.toString = $estr;
ie_lib_utils_display_DisplayOrientation.PORTRAIT.__enum__ = ie_lib_utils_display_DisplayOrientation;
var ie_lib_utils_display_DisplayUtility = function() { };
$hxClasses["ie.lib.utils.display.DisplayUtility"] = ie_lib_utils_display_DisplayUtility;
ie_lib_utils_display_DisplayUtility.__name__ = ["ie","lib","utils","display","DisplayUtility"];
ie_lib_utils_display_DisplayUtility.__properties__ = {get_viewRect:"get_viewRect",get_nominalHeight:"get_nominalHeight",get_nominalWidth:"get_nominalWidth",get_maxWidth:"get_maxWidth"}
ie_lib_utils_display_DisplayUtility.get_maxWidth = function() {
	return ie_lib_utils_display_DisplayUtility._maxWidth;
};
ie_lib_utils_display_DisplayUtility.get_nominalWidth = function() {
	return ie_lib_utils_display_DisplayUtility._nominalWidth;
};
ie_lib_utils_display_DisplayUtility.get_nominalHeight = function() {
	return ie_lib_utils_display_DisplayUtility._nominalHeight;
};
ie_lib_utils_display_DisplayUtility.get_viewRect = function() {
	return ie_lib_utils_display_DisplayUtility._viewRect;
};
ie_lib_utils_display_DisplayUtility.initialize = function(p_gameWidth,p_gameHeight,p_orientation,p_maxWidth) {
	if(p_maxWidth == null) p_maxWidth = 0;
	ie_lib_utils_display_DisplayUtility._maxWidth = p_maxWidth;
	ie_lib_utils_display_DisplayUtility._nominalWidth = p_gameWidth;
	ie_lib_utils_display_DisplayUtility._nominalHeight = p_gameHeight;
	ie_lib_utils_display_DisplayUtility._orientation = p_orientation;
	var stageWidth = 0;
	var stageHeight = 0;
	if(ie_lib_utils_display_DisplayUtility._orientation == ie_lib_utils_display_DisplayOrientation.LANDSCAPE) {
		if(openfl_Lib.current.stage.stageWidth >= openfl_Lib.current.stage.stageHeight) {
			stageWidth = openfl_Lib.current.stage.stageWidth;
			stageHeight = openfl_Lib.current.stage.stageHeight;
		} else {
			stageWidth = openfl_Lib.current.stage.stageHeight;
			stageHeight = openfl_Lib.current.stage.stageWidth;
		}
	} else if(ie_lib_utils_display_DisplayUtility._orientation == ie_lib_utils_display_DisplayOrientation.PORTRAIT) {
		if(openfl_Lib.current.stage.stageWidth > openfl_Lib.current.stage.stageHeight) {
			stageWidth = openfl_Lib.current.stage.stageHeight;
			stageHeight = openfl_Lib.current.stage.stageWidth;
		} else {
			stageWidth = openfl_Lib.current.stage.stageWidth;
			stageHeight = openfl_Lib.current.stage.stageHeight;
		}
	}
	var screenRatio = stageWidth / stageHeight;
	var visibleWidth = ie_lib_utils_display_DisplayUtility._nominalHeight * screenRatio;
	if(ie_lib_utils_display_DisplayUtility._maxWidth != 0) visibleWidth = Math.min(ie_lib_utils_display_DisplayUtility._maxWidth,visibleWidth);
	var variableWidth = 0;
	var viewLeft = ie_lib_utils_display_DisplayUtility._nominalWidth * 0.5 - visibleWidth * 0.5;
	var viewRight = ie_lib_utils_display_DisplayUtility._nominalWidth * 0.5 + visibleWidth * 0.5;
	ie_lib_utils_display_DisplayUtility._viewRect = new openfl_geom_Rectangle();
	ie_lib_utils_display_DisplayUtility._viewRect.set_left(viewLeft);
	ie_lib_utils_display_DisplayUtility._viewRect.set_right(viewRight);
	ie_lib_utils_display_DisplayUtility._viewRect.set_top(0);
	ie_lib_utils_display_DisplayUtility._viewRect.set_bottom(ie_lib_utils_display_DisplayUtility._nominalHeight);
	var safeX = ie_lib_utils_display_DisplayUtility._viewRect.width * 0.5 - ie_lib_utils_display_DisplayUtility._nominalWidth * 0.5;
	var safeY = ie_lib_utils_display_DisplayUtility._viewRect.height * 0.5 - ie_lib_utils_display_DisplayUtility._nominalHeight * 0.5;
	ie_lib_utils_display_DisplayUtility._safeRect = new openfl_geom_Rectangle(safeX,safeY,ie_lib_utils_display_DisplayUtility._nominalWidth,ie_lib_utils_display_DisplayUtility._nominalHeight);
};
ie_lib_utils_display_DisplayUtility.onResize = function() {
	var stageScaleX = openfl_Lib.current.stage.stageWidth / ie_lib_utils_display_DisplayUtility._nominalWidth;
	var stageScaleY = openfl_Lib.current.stage.stageHeight / ie_lib_utils_display_DisplayUtility._nominalHeight;
	ie_lib_utils_display_DisplayUtility._stageScale = Math.min(stageScaleX,stageScaleY);
	openfl_Lib.current.set_x(0);
	openfl_Lib.current.set_y(0);
	openfl_Lib.current.set_scaleX(ie_lib_utils_display_DisplayUtility._stageScale);
	openfl_Lib.current.set_scaleY(ie_lib_utils_display_DisplayUtility._stageScale);
	if(stageScaleX > stageScaleY) openfl_Lib.current.set_x((openfl_Lib.current.stage.stageWidth - ie_lib_utils_display_DisplayUtility._nominalWidth * ie_lib_utils_display_DisplayUtility._stageScale) / 2); else openfl_Lib.current.set_y((openfl_Lib.current.stage.stageHeight - ie_lib_utils_display_DisplayUtility._nominalHeight * ie_lib_utils_display_DisplayUtility._stageScale) / 2);
	ie_lib_manager_ScreenManager.sendResizeEvent();
};
var ie_lib_utils_gc_DestroyUtility = function() { };
$hxClasses["ie.lib.utils.gc.DestroyUtility"] = ie_lib_utils_gc_DestroyUtility;
ie_lib_utils_gc_DestroyUtility.__name__ = ["ie","lib","utils","gc","DestroyUtility"];
ie_lib_utils_gc_DestroyUtility.destroyArray = function(p_arr,p_destroy) {
	if(p_destroy == null) p_destroy = true;
	var _g = 0;
	while(_g < p_arr.length) {
		var elem = p_arr[_g];
		++_g;
		if(js_Boot.__instanceof(elem,openfl_display_DisplayObject)) {
			if((js_Boot.__cast(elem , openfl_display_DisplayObject)).parent != null) (js_Boot.__cast(elem , openfl_display_DisplayObject)).parent.removeChild(js_Boot.__cast(elem , openfl_display_DisplayObject));
			motion_Actuate.stop(js_Boot.__cast(elem , openfl_display_DisplayObject),null,false,false);
		}
		if(js_Boot.__instanceof(elem,ie_lib_interfaces_IDestroyable) && p_destroy) (js_Boot.__cast(elem , ie_lib_interfaces_IDestroyable)).destroy();
	}
	p_arr.length = 0;
};
ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren = function(p_display,p_dispose) {
	if(p_dispose == null) p_dispose = true;
	var _g1 = 0;
	var _g = p_display.get_numChildren();
	while(_g1 < _g) {
		var i = _g1++;
		var child = p_display.getChildAt(i);
		if(child == null) continue;
		if(js_Boot.__instanceof(child,openfl_display_Bitmap)) {
			var bitmap;
			bitmap = js_Boot.__cast(child , openfl_display_Bitmap);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapData(bitmap.bitmapData,p_dispose);
		}
	}
};
ie_lib_utils_gc_DestroyUtility.destroyChildren = function(p_display) {
	var _g1 = 0;
	var _g = p_display.get_numChildren();
	while(_g1 < _g) {
		var i = _g1++;
		var child = p_display.getChildAt(i);
		if(child == null) continue;
		if(js_Boot.__instanceof(child,ie_lib_interfaces_IDestroyable)) {
			var obj;
			obj = js_Boot.__cast(child , ie_lib_interfaces_IDestroyable);
			obj.destroy();
		}
	}
};
ie_lib_utils_gc_DestroyUtility.destroyBitmapData = function(p_bitmapData,p_dispose,p_extraDispose) {
	if(p_extraDispose == null) p_extraDispose = false;
	if(p_dispose == null) p_dispose = true;
	if(p_extraDispose) {
		var img = p_bitmapData.image;
		if(img != null) {
			if(ie_lib_utils_device_BrowserInfoUtility.isCocoonJS() && ie_lib_utils_gc_DestroyUtility.enableCocoonDispose) {
				var buffer = img.buffer;
				if(buffer != null) {
					var srcImage = Reflect.field(buffer,"__srcImage");
					if(srcImage != null) {
						srcImage.cocoonLazyLoad = true;
						srcImage.idtkLoadDisposed = true;
						srcImage.dispose();
					}
				}
				if(img.get_src() != null) img.get_src().dispose();
			}
		}
	}
	if(p_bitmapData != null && p_dispose) p_bitmapData.dispose();
	p_bitmapData = null;
};
var ie_lib_utils_math_MathUtility = function() { };
$hxClasses["ie.lib.utils.math.MathUtility"] = ie_lib_utils_math_MathUtility;
ie_lib_utils_math_MathUtility.__name__ = ["ie","lib","utils","math","MathUtility"];
ie_lib_utils_math_MathUtility.randomize = function(p_min,p_max) {
	return Math.random() * (p_max - p_min) + p_min;
};
ie_lib_utils_math_MathUtility.randomizeInt = function(p_min,p_max) {
	return Std["int"](Math.round(ie_lib_utils_math_MathUtility.randomize(p_min,p_max)));
};
ie_lib_utils_math_MathUtility.getDistance = function(p_pointA,p_pointB,p_isRounded) {
	if(p_isRounded == null) p_isRounded = false;
	var lengthX = p_pointB.x - p_pointA.x;
	var lengthY = p_pointB.y - p_pointA.y;
	var distance = Math.sqrt(Math.pow(lengthX,2) + Math.pow(lengthY,2));
	if(p_isRounded) distance = Math.round(distance);
	return distance;
};
ie_lib_utils_math_MathUtility.getAngle = function(p_pointA,p_pointB) {
	var lengthX = p_pointB.x - p_pointA.x;
	var lengthY = p_pointB.y - p_pointA.y;
	var radians = Math.atan2(lengthY,lengthX);
	var degrees = radians / Math.PI * 180;
	return degrees;
};
ie_lib_utils_math_MathUtility.getDistX = function(p_distance,p_angle) {
	var degrees = p_angle;
	var radians = degrees / 180 * Math.PI;
	var dx = Math.cos(radians) * p_distance;
	return dx;
};
ie_lib_utils_math_MathUtility.isPointInCircle = function(p_pos,p_center,p_radius) {
	var distance = Math.abs(ie_lib_utils_math_MathUtility.getDistance(p_center,p_pos));
	return distance < p_radius;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Object.prototype.hasOwnProperty.call(val,"name")) this.name = Reflect.field(val,"name"); else this.name = "Error";
	if(Object.prototype.hasOwnProperty.call(val,"message")) this.message = Reflect.field(val,"message"); else this.message = Std.string(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") return new XMLHttpRequest();
	if(typeof ActiveXObject != "undefined") return new ActiveXObject("Microsoft.XMLHTTP");
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = Std["int"](Math.random() * 1000000);
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_app_Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
lime_app_Event_$Void_$Void.__name__ = ["lime","app","Event_Void_Void"];
lime_app_Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Void_$Void
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else null;
		} else null;
	} else null;
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else null;
		} else null;
	} else null;
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else null;
	} else null;
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else null;
		} else null;
	} else null;
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) {
		if(lime_Assets.libraries.get(name) == library) return; else lime_Assets.unloadLibrary(name);
	}
	if(library != null) library.onChange.add(lime_Assets.library_onChange);
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_Assets.library_onChange);
		library.unload();
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onChange = function() {
	lime_Assets.cache.clear();
	lime_Assets.onChange.dispatch();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.renderers[0] != null) {
				this.parent.renderers[0].onRender.dispatch();
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") this.parent.windows[0].onKeyDown.dispatch(keyCode,modifier); else this.parent.windows[0].onKeyUp.dispatch(keyCode,modifier);
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				this.parent.windows[0].onFocusIn.dispatch();
				this.parent.windows[0].onActivate.dispatch();
				break;
			case "blur":
				this.parent.windows[0].onFocusOut.dispatch();
				this.parent.windows[0].onDeactivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width,this.parent.windows[0].__height);
				break;
			case "beforeunload":
				this.parent.windows[0].onClose.dispatch();
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) return;
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) continue;
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") cache.isGamepad = true;
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) lime_ui_Gamepad.__connect(id);
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(4,value);
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(5,value);
						} else {
							if(value > 0) joystick.onButtonDown.dispatch(i3); else joystick.onButtonUp.dispatch(i3);
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) gamepad.onButtonDown.dispatch(button); else gamepad.onButtonUp.dispatch(button);
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.textInput = null;
lime__$backend_html5_HTML5Window.prototype = {
	close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else {
			this.canvas = window.document.createElement("canvas");
			this.canvas.screencanvas = true;
		}
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) haxe_Timer.delay(function() {
			lime__$backend_html5_HTML5Window.textInput.focus();
		},20);
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") lime_ui_Gamepad.__connect(event.gamepad.index);
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				break;
			case "mouseenter":
				this.parent.onEnter.dispatch();
				break;
			case "mouseleave":
				this.parent.onLeave.dispatch();
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				break;
			case "mousemove":
				this.parent.onMouseMove.dispatch(x,y);
				break;
			default:
			}
		} else this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) rect = this.canvas.getBoundingClientRect(); else if(this.div != null) rect = this.div.getBoundingClientRect(); else rect = this.element.getBoundingClientRect();
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			var _g2 = event.type;
			switch(_g2) {
			case "touchstart":
				var touch = this.unusedTouchesPool.pop();
				if(touch == null) touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id); else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				this.primaryTouch = touch;
				this.parent.onMouseDown.dispatch(x,y,0);
				break;
			case "touchend":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX = touch1.x;
					var cacheY = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX;
					touch1.dy = touch1.y - cacheY;
					touch1.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch1);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch1);
					this.parent.onMouseUp.dispatch(x,y,0);
					this.primaryTouch = null;
				}
				break;
			case "touchmove":
				var touch2 = this.currentTouches.h[data.identifier];
				if(touch2 != null) {
					var cacheX1 = touch2.x;
					var cacheY1 = touch2.y;
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.dx = touch2.x - cacheX1;
					touch2.dy = touch2.y - cacheY1;
					touch2.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch2);
					this.parent.onMouseMove.dispatch(x,y);
				}
				break;
			default:
			}
		}
	}
	,resize: function(width,height) {
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app_Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
		null;
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onExit.add($bind(this,this.onModuleExit));
	this.onUpdate.add($bind(this,this.update));
	lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
	lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
	lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
	lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
	lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		this.modules.push(module);
		if(this.windows.length > 0) {
			var _g = 0;
			var _g1 = this.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				module.onWindowCreate($window);
			}
			if(this.preloader == null || this.preloader.complete) module.onPreloadComplete();
		}
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
		this.renderers.push(renderer);
	}
	,createWindow: function(window) {
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onWindowClose),window));
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onEnter.add((function(f4,a14) {
			return function() {
				f4(a14);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f8,a18) {
			return function(a2,a3) {
				f8(a18,a2,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f9,a19) {
			return function(a21,a31) {
				f9(a19,a21,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f10,a110) {
			return function() {
				f10(a110);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f12,a112) {
			return function(x,y,a22) {
				f12(a112,x,y,a22);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f13,a113) {
			return function(x1,y1) {
				f13(a113,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f14,a114) {
			return function(x2,y2) {
				f14(a114,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f15,a115) {
			return function(x3,y3,a23) {
				f15(a115,x3,y3,a23);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f16,a116) {
			return function(a24,a32) {
				f16(a116,a24,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f17,a117) {
			return function(x4,y4) {
				f17(a117,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f18,a118) {
			return function(a25,a33) {
				f18(a118,a25,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f19,a119) {
			return function() {
				f19(a119);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f20,a120) {
			return function(a26,a34,a4) {
				f20(a120,a26,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f21,a121) {
			return function(a27) {
				f21(a121,a27);
			};
		})($bind(this,this.onTextInput),window));
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windows.push(window);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickAxisMove(joystick,axis,value);
		}
	}
	,onJoystickButtonDown: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonDown(joystick,button);
		}
	}
	,onJoystickButtonUp: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonUp(joystick,button);
		}
	}
	,onJoystickConnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickConnect(joystick);
		}
	}
	,onJoystickDisconnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickDisconnect(joystick);
		}
	}
	,onJoystickHatMove: function(joystick,hat,position) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickHatMove(joystick,hat,position);
		}
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickTrackballMove(joystick,trackball,value);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(window,keyCode,modifier);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(window,keyCode,modifier);
		}
	}
	,onModuleExit: function(code) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onModuleExit(code);
		}
		this.backend.exit();
	}
	,onMouseDown: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(window,x,y,button);
		}
	}
	,onMouseMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(window,x,y);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(window,x,y);
		}
	}
	,onMouseUp: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(window,x,y,button);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(window,deltaX,deltaY);
		}
	}
	,onPreloadComplete: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadComplete();
		}
	}
	,onPreloadProgress: function(loaded,total) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadProgress(loaded,total);
		}
	}
	,onRenderContextLost: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost(renderer);
		}
	}
	,onRenderContextRestored: function(renderer,context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(renderer,context);
		}
	}
	,onTextEdit: function(window,text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(window,text,start,length);
		}
	}
	,onTextInput: function(window,text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(window,text);
		}
	}
	,onTouchEnd: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(touch);
		}
	}
	,onTouchMove: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(touch);
		}
	}
	,onTouchStart: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(touch);
		}
	}
	,onWindowActivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate(window);
		}
	}
	,onWindowClose: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose(window);
		}
		this.removeWindow(window);
	}
	,onWindowCreate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowCreate(window);
		}
	}
	,onWindowDeactivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate(window);
		}
	}
	,onWindowEnter: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter(window);
		}
	}
	,onWindowFocusIn: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn(window);
		}
	}
	,onWindowFocusOut: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut(window);
		}
	}
	,onWindowFullscreen: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen(window);
		}
	}
	,onWindowLeave: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave(window);
		}
	}
	,onWindowMinimize: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize(window);
		}
	}
	,onWindowMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(window,x,y);
		}
	}
	,onWindowResize: function(window,width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(window,width,height);
		}
	}
	,onWindowRestore: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore(window);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(this.windows[0] == window) this.window = null;
		}
	}
	,render: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.preloader != null) {
			this.preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.preloader = preloader;
		if(preloader.complete) this.onPreloadComplete(); else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		joystick.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onJoystickAxisMove),joystick));
		joystick.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onJoystickButtonDown),joystick));
		joystick.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onJoystickButtonUp),joystick));
		joystick.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onJoystickDisconnect),joystick));
		joystick.onHatMove.add((function(f4,a14) {
			return function(a23,a31) {
				f4(a14,a23,a31);
			};
		})($bind(this,this.onJoystickHatMove),joystick));
		joystick.onTrackballMove.add((function(f5,a15) {
			return function(a24,a32) {
				f5(a15,a24,a32);
			};
		})($bind(this,this.onJoystickTrackballMove),joystick));
	}
	,__class__: lime_app_Application
});
var lime_app_Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
lime_app_Event_$Dynamic_$Void.__name__ = ["lime","app","Event_Dynamic_Void"];
lime_app_Event_$Dynamic_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Dynamic_$Void
};
var lime_app_Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
lime_app_Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","Event_Float_Float_Int_Void"];
lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Int_$Void
};
var lime_app_Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
lime_app_Event_$Float_$Float_$Void.__name__ = ["lime","app","Event_Float_Float_Void"];
lime_app_Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Void
};
var lime_app_Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
lime_app_Event_$Int_$Float_$Void.__name__ = ["lime","app","Event_Int_Float_Void"];
lime_app_Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Float_$Void
};
var lime_app_Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
lime_app_Event_$Int_$Int_$Void.__name__ = ["lime","app","Event_Int_Int_Void"];
lime_app_Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Int_$Void
};
var lime_app_Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
lime_app_Event_$Int_$Void.__name__ = ["lime","app","Event_Int_Void"];
lime_app_Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Void
};
var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app_Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
lime_app_Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","Event_String_Int_Int_Void"];
lime_app_Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app_Event_$String_$Int_$Int_$Void
};
var lime_app_Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
lime_app_Event_$String_$Void.__name__ = ["lime","app","Event_String_Void"];
lime_app_Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$String_$Void
};
var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","Event_lime_graphics_RenderContext_Void"];
lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadAxis_Float_Void"];
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadButton_Void"];
lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app_Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","Event_lime_ui_Gamepad_Void"];
lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
};
var lime_app_Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","Event_lime_ui_Joystick_Void"];
lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Joystick_$Void
};
var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app_Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","Event_lime_ui_Touch_Void"];
lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Touch_$Void
};
var lime_app_Future = function(work) {
	if(work != null) {
		if(lime_app_Future.__threadPool == null) {
			lime_app_Future.__threadPool = new lime_system_ThreadPool();
			lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
			lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
			lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
		}
		var promise = new lime_app_Promise();
		promise.future = this;
		lime_app_Future.__threadPool.queue({ promise : promise, work : work});
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.__threadPool = null;
lime_app_Future.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app_Future.__threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app_Future.__threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app_Future.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app_Future.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.__completed) listener(this.value); else if(!this.__errored) {
				if(this.__completeListeners == null) this.__completeListeners = [];
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,__class__: lime_app_Future
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
	this.onProgress = new lime_app_Event_$Int_$Int_$Void();
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var cacheVersion = lime_Assets.cache.version;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				if(!lime_app_Preloader.images.exists(url)) {
					var image = new Image();
					lime_app_Preloader.images.set(url,image);
					image.onload = $bind(this,this.image_onLoad);
					image.src = url + "?" + cacheVersion;
					this.total++;
				}
				break;
			case "BINARY":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader);
					this.total++;
				}
				break;
			case "TEXT":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader1 = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader1);
					this.total++;
				}
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			var future = loader2.load(url1 + "?" + cacheVersion);
			future.onComplete($bind(this,this.loader_onComplete));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.onProgress.dispatch(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(!found) {
					found = true;
					return false;
				}
				_g.loaded++;
				if(interval != null) window.clearInterval(interval);
				node.parentNode.removeChild(node);
				node = null;
				_g.onProgress.dispatch(_g.loaded,_g.total);
				if(_g.loaded == _g.total) _g.start();
				return true;
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.__errored) {
			this.future.__completed = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,error: function(msg) {
		if(!this.future.__completed) {
			this.future.__errored = true;
			this.future.__errorMessage = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress) {
		if(!this.future.__errored && !this.future.__completed) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress);
				}
			}
		}
		return this;
	}
	,__class__: lime_app_Promise
};
var lime_audio_ALAudioContext = function() { };
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
var lime_audio_ALCAudioContext = function() { };
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
var lime_audio_AudioBuffer = function() { };
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
var lime_audio_AudioSource = function() { };
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	__class__: lime_audio_AudioSource
};
var lime_audio_FlashAudioContext = function() { };
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
var lime_audio_HTML5AudioContext = function() {
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	__class__: lime_audio_HTML5AudioContext
};
var lime_graphics_ConsoleRenderContext = function() { };
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	__class__: lime_graphics_ConsoleRenderContext
};
var lime_graphics_FlashRenderContext = function() { };
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this,true);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) return;
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this,false);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		return this.buffer.get_src();
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {get_rect:"get_rect",set_transparent:"set_transparent",get_transparent:"get_transparent",get_src:"get_src",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event_$Void_$Void();
	this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app_Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function() { };
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.prototype = {
	arc: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,identityMatrix: function() {
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,rectangle: function(x,y,width,height) {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,set_matrix: function(value) {
		return value;
	}
	,set_source: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_source:"set_source",set_matrix:"set_matrix",get_hasCurrentPoint:"get_hasCurrentPoint",get_currentPoint:"get_currentPoint"}
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_filter:"set_filter"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.context = null;
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	} else if(buffer.data == null && buffer.__srcImageData != null) buffer.data = buffer.__srcImageData.data;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcImageData = null;
		image.buffer.data = null;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) fillColor = 0;
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	__class__: lime_math_Matrix3
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,__class__: lime_math_Rectangle
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.prototype = {
	__class__: lime_math_Vector2
};
var lime_math_Vector4 = function() { };
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
var lime_net_HTTPRequest = function() {
	this.promise = new lime_app_Promise();
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.prototype = {
	load: function(url) {
		var _g = this;
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		var request = new XMLHttpRequest();
		request.addEventListener("progress",$bind(this,this.request_onProgress),false);
		request.onreadystatechange = function() {
			if(request.readyState != 4) return;
			if(request.status != null && request.status >= 200 && request.status <= 400) {
				_g.bytes = lime_utils_Bytes.ofData(request.response);
				_g.promise.complete(_g.bytes);
			} else _g.promise.error(request.status);
		};
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.send("");
		return this.promise.future;
	}
	,request_onProgress: function(event) {
		this.promise.progress(event.loaded / event.total);
	}
	,__class__: lime_net_HTTPRequest
};
var lime_system_BackgroundWorker = function() {
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	run: function(message) {
		this.canceled = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return null;
};
lime_system_Clipboard.set_text = function(value) {
	return null;
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) gamepad.connected = false;
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) gamepad.onDisconnect.dispatch();
};
lime_ui_Gamepad.prototype = {
	get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$Int_$Void();
	this.onButtonDown = new lime_app_Event_$Int_$Void();
	this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) joystick.connected = false;
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) joystick.onDisconnect.dispatch();
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) return navigator.getGamepads(); else if(navigator.webkitGetGamepads) return navigator.webkitGetGamepads(); else return null;
};
lime_ui_Joystick.prototype = {
	__class__: lime_ui_Joystick
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {get_shiftKey:"get_shiftKey",get_metaKey:"get_metaKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_cursor:"set_cursor"}
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app_Event_$String_$Void();
	this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app_Event_$Void_$Void();
	this.onResize = new lime_app_Event_$Int_$Int_$Void();
	this.onMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app_Event_$Void_$Void();
	this.onLeave = new lime_app_Event_$Void_$Void();
	this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app_Event_$Void_$Void();
	this.onFocusOut = new lime_app_Event_$Void_$Void();
	this.onFocusIn = new lime_app_Event_$Void_$Void();
	this.onEnter = new lime_app_Event_$Void_$Void();
	this.onDeactivate = new lime_app_Event_$Void_$Void();
	this.onCreate = new lime_app_Event_$Void_$Void();
	this.onClose = new lime_app_Event_$Void_$Void();
	this.onActivate = new lime_app_Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"x")) this.__x = config.x;
		if(Object.prototype.hasOwnProperty.call(config,"y")) this.__y = config.y;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
		if(Object.prototype.hasOwnProperty.call(config,"title")) this.__title = config.title;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) this.renderer.create();
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_width:"set_width",set_height:"set_height",set_fullscreen:"set_fullscreen"}
};
var lime_utils_Bytes = function(length,bytesData) {
	haxe_io_Bytes.call(this,bytesData);
};
$hxClasses["lime.utils.Bytes"] = lime_utils_Bytes;
lime_utils_Bytes.__name__ = ["lime","utils","Bytes"];
lime_utils_Bytes.alloc = function(length) {
	var bytes = haxe_io_Bytes.alloc(length);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.__super__ = haxe_io_Bytes;
lime_utils_Bytes.prototype = $extend(haxe_io_Bytes.prototype,{
	__class__: lime_utils_Bytes
});
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return Reflect.callMethod(method,method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) this._onPauseParams = []; else this._onPauseParams = parameters;
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) this._onResumeParams = []; else this._onResumeParams = parameters;
		return this;
	}
	,pause: function() {
		if(this._onPause != null) this.callMethod(this._onPause,this._onPauseParams);
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) this.callMethod(this._onResume,this._onResumeParams);
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME,motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) actuator.update(currentTime);
			j++;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var value = this.getField(this.properties,i);
				if(start == null) start = 0;
				if(value == null) value = 0;
				details = new motion_actuators_PropertyDetails(this.target,i,start,value - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) details.target[details.propertyName] = value; else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) details.target[details.propertyName] = endValue; else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut"}
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
motion_easing_ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) return 1; else return 1 - Math.pow(2,-10 * k);
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) && allowCreation) motion_Actuate.targetLibraries.set(target,[]);
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) overwrite = true;
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pauseAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.resumeAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return motion_Actuate.apply(target,properties,customActuator);
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) motion_Actuate.targetLibraries.remove(target);
	}
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
motion__$Actuate_TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion__$Actuate_TweenTimer.prototype = {
	__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion_ComponentPath();
	this._y = new motion_ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion_MotionPath;
motion_MotionPath.__name__ = ["motion","MotionPath"];
motion_MotionPath.prototype = {
	line: function(x,y,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion_LinearPath(x,strength));
		this._y.addPath(new motion_LinearPath(y,strength));
		return this;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x"}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_ComponentPath = function() {
	this.paths = [];
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion_ComponentPath;
motion_ComponentPath.__name__ = ["motion","ComponentPath"];
motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion_ComponentPath.prototype = {
	addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) return this.paths[0].calculate(this.start,k); else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else return path.calculate(lastEnd,ratio / path.strength);
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else return this.start;
	}
	,__class__: motion_ComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion_BezierPath;
motion_BezierPath.__name__ = ["motion","BezierPath"];
motion_BezierPath.prototype = {
	calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion_BezierPath
};
var motion_LinearPath = function(end,strength) {
	motion_BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion_LinearPath;
motion_LinearPath.__name__ = ["motion","LinearPath"];
motion_LinearPath.__super__ = motion_BezierPath;
motion_LinearPath.prototype = $extend(motion_BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion_LinearPath
});
var motion_RotationPath = function() {
	this.step = 0.01;
};
$hxClasses["motion.RotationPath"] = motion_RotationPath;
motion_RotationPath.__name__ = ["motion","RotationPath"];
motion_RotationPath.__interfaces__ = [motion_IComponentPath];
motion_RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion_RotationPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) target.set_filters([Type.createInstance(this.filterClass,[])]);
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) this.filter = filter;
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") Reflect.setField(this.filter,propertyName,Reflect.field(this.properties,propertyName));
		}
		var filters = this.getField(this.target,"filters");
		Reflect.setField(filters,this.properties.filter,this.filter);
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) Reflect.setField(filters,this.properties.filter,this.filter); else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) filters[i] = this.filter;
			}
		}
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = [];
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		this.callMethod(this.target,this.currentParameters);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_MotionPathActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.endSoundTransform);
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject)) this.initializeColor();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) this.initializeSound();
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion_actuators_PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",new openfl_media_SoundTransform());
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.tweenSoundTransform);
	}
	,__class__: motion_actuators_TransformActuator
});
var motion_easing_Bounce = function() { };
$hxClasses["motion.easing.Bounce"] = motion_easing_Bounce;
motion_easing_Bounce.__name__ = ["motion","easing","Bounce"];
motion_easing_Bounce.__properties__ = {get_easeOut:"get_easeOut",get_easeIn:"get_easeIn"}
motion_easing_Bounce.get_easeIn = function() {
	return new motion_easing_BounceEaseIn();
};
motion_easing_Bounce.get_easeOut = function() {
	return new motion_easing_BounceEaseOut();
};
var motion_easing_BounceEaseIn = function() {
};
$hxClasses["motion.easing.BounceEaseIn"] = motion_easing_BounceEaseIn;
motion_easing_BounceEaseIn.__name__ = ["motion","easing","BounceEaseIn"];
motion_easing_BounceEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_BounceEaseIn.prototype = {
	calculate: function(k) {
		return 1 - motion_easing_BounceEaseOut._ease(1 - k,0,1,1);
	}
	,__class__: motion_easing_BounceEaseIn
};
var motion_easing_BounceEaseOut = function() {
};
$hxClasses["motion.easing.BounceEaseOut"] = motion_easing_BounceEaseOut;
motion_easing_BounceEaseOut.__name__ = ["motion","easing","BounceEaseOut"];
motion_easing_BounceEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_BounceEaseOut._ease = function(t,b,c,d) {
	if((t /= d) < 0.36363636363636365) return c * (7.5625 * t * t) + b; else if(t < 0.72727272727272729) return c * (7.5625 * (t -= 0.54545454545454541) * t + .75) + b; else if(t < 0.90909090909090906) return c * (7.5625 * (t -= 0.81818181818181823) * t + .9375) + b; else return c * (7.5625 * (t -= 0.95454545454545459) * t + .984375) + b;
};
motion_easing_BounceEaseOut.prototype = {
	calculate: function(k) {
		return motion_easing_BounceEaseOut._ease(k,0,1,1);
	}
	,__class__: motion_easing_BounceEaseOut
};
var motion_easing_Elastic = function() { };
$hxClasses["motion.easing.Elastic"] = motion_easing_Elastic;
motion_easing_Elastic.__name__ = ["motion","easing","Elastic"];
motion_easing_Elastic.__properties__ = {get_easeIn:"get_easeIn"}
motion_easing_Elastic.get_easeIn = function() {
	return new motion_easing_ElasticEaseIn(0.1,0.4);
};
var motion_easing_ElasticEaseIn = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseIn"] = motion_easing_ElasticEaseIn;
motion_easing_ElasticEaseIn.__name__ = ["motion","easing","ElasticEaseIn"];
motion_easing_ElasticEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ElasticEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		var s;
		if(this.a < 1) {
			this.a = 1;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(1 / this.a);
		return -(this.a * Math.pow(2,10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / this.p));
	}
	,__class__: motion_easing_ElasticEaseIn
};
var motion_easing_Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion_easing_Linear;
motion_easing_Linear.__name__ = ["motion","easing","Linear"];
motion_easing_Linear.__properties__ = {get_easeNone:"get_easeNone"}
motion_easing_Linear.get_easeNone = function() {
	return new motion_easing_LinearEaseNone();
};
var motion_easing_LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion_easing_LinearEaseNone;
motion_easing_LinearEaseNone.__name__ = ["motion","easing","LinearEaseNone"];
motion_easing_LinearEaseNone.__interfaces__ = [motion_easing_IEasing];
motion_easing_LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,__class__: motion_easing_LinearEaseNone
};
var motion_easing_Quad = function() { };
$hxClasses["motion.easing.Quad"] = motion_easing_Quad;
motion_easing_Quad.__name__ = ["motion","easing","Quad"];
motion_easing_Quad.__properties__ = {get_easeOut:"get_easeOut"}
motion_easing_Quad.get_easeOut = function() {
	return new motion_easing_QuadEaseOut();
};
var motion_easing_QuadEaseOut = function() {
};
$hxClasses["motion.easing.QuadEaseOut"] = motion_easing_QuadEaseOut;
motion_easing_QuadEaseOut.__name__ = ["motion","easing","QuadEaseOut"];
motion_easing_QuadEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseOut.prototype = {
	calculate: function(k) {
		return -k * (k - 2);
	}
	,__class__: motion_easing_QuadEaseOut
};
var nick_hol_nn_game_GameObject = function(p_params) {
	com_jpmata_views_BaseView.call(this,p_params);
};
$hxClasses["nick.hol.nn.game.GameObject"] = nick_hol_nn_game_GameObject;
nick_hol_nn_game_GameObject.__name__ = ["nick","hol","nn","game","GameObject"];
nick_hol_nn_game_GameObject.__interfaces__ = [ie_lib_interfaces_IUpdatable];
nick_hol_nn_game_GameObject.__super__ = com_jpmata_views_BaseView;
nick_hol_nn_game_GameObject.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	start: function() {
	}
	,update: function(p_delta) {
	}
	,_initProps: function(p_params) {
		com_jpmata_views_BaseView.prototype._initProps.call(this,p_params);
		this._gameManager = nick_hol_nn_manager_GameManager.get_instance();
		if(p_params != null) {
			if(p_params.length > 0 && Std["int"](p_params[0]) != -1) this._type = Std["int"](p_params[0]); else this._type = 0;
		} else this._type = 0;
		this._state = null;
	}
	,_initListeners: function() {
		com_jpmata_views_BaseView.prototype._initListeners.call(this);
		if(this._satellite != null) ie_lib_manager_UpdateManager.addListener($bind(this,this.update));
	}
	,_killGraphics: function() {
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) ie_lib_manager_UpdateManager.removeListener($bind(this,this.update));
		com_jpmata_views_BaseView.prototype._killListeners.call(this);
	}
	,_killProps: function() {
		this._gameManager = null;
		this._state = null;
		this._type = null;
		com_jpmata_views_BaseView.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_game_GameObject
});
var nick_hol_nn_game_BoardObject = function() {
	nick_hol_nn_game_GameObject.call(this);
};
$hxClasses["nick.hol.nn.game.BoardObject"] = nick_hol_nn_game_BoardObject;
nick_hol_nn_game_BoardObject.__name__ = ["nick","hol","nn","game","BoardObject"];
nick_hol_nn_game_BoardObject.__super__ = nick_hol_nn_game_GameObject;
nick_hol_nn_game_BoardObject.prototype = $extend(nick_hol_nn_game_GameObject.prototype,{
	get_tokens: function() {
		return this._objTokens;
	}
	,start: function() {
		var _g = this;
		nick_hol_nn_game_GameObject.prototype.start.call(this);
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._objTokens != null) {
			var _g1 = 0;
			var _g11 = this._objTokens;
			while(_g1 < _g11.length) {
				var objToken = _g11[_g1];
				++_g1;
				if(objToken != null) objToken.start();
			}
		}
		motion_Actuate.tween(this,2,{ y : this.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_g.set_scaleX(1);
			_g.set_scaleY(1);
			_g._centerToken(false);
			if(_g._bmTopLeft != null) {
				_g._bmTopLeft.set_x(0);
				_g._bmTopLeft.set_y(0);
			}
			if(_g._bmTopRight != null) {
				_g._bmTopRight.set_x(_g._bmTopLeft.get_x() + _g._bmTopLeft.get_width());
				_g._bmTopRight.set_y(0);
			}
			if(_g._bmBotLeft != null) {
				_g._bmBotLeft.set_x(0);
				_g._bmBotLeft.set_y(_g._bmTopLeft.get_y() + _g._bmTopLeft.get_height());
			}
			if(_g._bmBotRight != null) {
				_g._bmBotRight.set_x(_g._bmBotLeft.get_x() + _g._bmBotLeft.get_width());
				_g._bmBotRight.set_y(_g._bmTopRight.get_y() + _g._bmTopRight.get_height());
			}
			motion_Actuate.tween(_g,2,{ y : _g.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_g._nextToken(true);
			});
		});
	}
	,update: function(p_delta) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		this._centerToken(false);
		this._scaleToken();
		this._setBoundsView();
		this._rearrangeObjects();
	}
	,_handler_spinnerSelect: function(evt) {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(evt.get_data() == null) return;
		if(evt.get_data().objSlice == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		var objSlice = evt.get_data().objSlice;
		if(objSlice.get_data() == null) return;
		if(this._isSliceNormal(objSlice.get_data())) this._startMoveToken(objSlice.get_data()); else {
			var str = null;
			var txt = null;
			if(this._currentToken.get_data().mode == nick_hol_nn_manager_TokenMode.PLAYER) {
				if(objSlice.get_data().type == 7) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtAvalanche_player"); else if(objSlice.get_data().type == 8) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtDrone_player"); else if(objSlice.get_data().type == 9) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtFriend_player"); else if(objSlice.get_data().type == 10) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtIce_player"); else if(objSlice.get_data().type == 11) {
					if(this._currentToken.get_data().rank == 1) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSleigh_1_player"); else str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSleigh_2_player");
				} else if(objSlice.get_data().type == 12) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSlide_player");
			} else if(this._currentToken.get_data().mode == nick_hol_nn_manager_TokenMode.AI) {
				if(objSlice.get_data().type == 7) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtAvalanche_com"); else if(objSlice.get_data().type == 8) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtDrone_com"); else if(objSlice.get_data().type == 9) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtFriend_com"); else if(objSlice.get_data().type == 10) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtIce_com"); else if(objSlice.get_data().type == 11) {
					if(this._currentToken.get_data().rank == 1) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSleigh_1_com"); else str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSleigh_2_com");
				} else if(objSlice.get_data().type == 12) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSlide_com");
				txt = StringTools.replace(str.VALUE,"%i%",nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtName_" + Std.string(this._currentToken.get_data().type)).VALUE);
			}
			this.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_showNotif",{ type : objSlice.get_data().type, str : str, txt : txt, callback : function() {
				_g._startMoveToken(objSlice.get_data());
			}}));
		}
	}
	,_handler_tokenUpdState: function(evt) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		var objToken = evt.target;
		if(objToken != this._currentToken) return;
		if(objToken.get_state() == nick_hol_nn_game_TokenState.COMPLETE) this._end(); else if(objToken.get_state() == nick_hol_nn_game_TokenState.END) this._nextToken();
	}
	,_initGraphics: function() {
		nick_hol_nn_game_GameObject.prototype._initGraphics.call(this);
		if(this._layerBg == null) {
			this._layerBg = new openfl_display_Sprite();
			this.addChild(this._layerBg);
		}
		if(this._layerEffects_bot == null) {
			this._layerEffects_bot = new openfl_display_Sprite();
			this.addChild(this._layerEffects_bot);
		}
		if(this._layerTokens == null) {
			this._layerTokens = new openfl_display_Sprite();
			this.addChild(this._layerTokens);
		}
		if(this._layerEffects_top == null) {
			this._layerEffects_top = new openfl_display_Sprite();
			this.addChild(this._layerEffects_top);
		}
		if(this._bmTopLeft == null) {
			this._bmTopLeft = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/board/board_top_left.png"));
			this._bmTopLeft.smoothing = true;
			this._bmTopLeft.set_x(0);
			this._bmTopLeft.set_y(0);
			this._layerBg.addChild(this._bmTopLeft);
		}
		if(this._bmTopRight == null) {
			this._bmTopRight = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/board/board_top_right.png"));
			this._bmTopRight.smoothing = true;
			this._bmTopRight.set_x(this._bmTopLeft.get_x() + this._bmTopLeft.get_width() - 1);
			this._bmTopRight.set_y(0);
			this._layerBg.addChild(this._bmTopRight);
		}
		if(this._bmBotLeft == null) {
			this._bmBotLeft = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/board/board_bottom_left.png"));
			this._bmBotLeft.smoothing = true;
			this._bmBotLeft.set_x(0);
			this._bmBotLeft.set_y(this._bmTopLeft.get_y() + this._bmTopLeft.get_height() - 1);
			this._layerBg.addChild(this._bmBotLeft);
		}
		if(this._bmBotRight == null) {
			this._bmBotRight = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/board/board_bottom_right.png"));
			this._bmBotRight.smoothing = true;
			this._bmBotRight.set_x(this._bmBotLeft.get_x() + this._bmBotLeft.get_width() - 1);
			this._bmBotRight.set_y(this._bmTopRight.get_y() + this._bmTopRight.get_height() - 1);
			this._layerBg.addChild(this._bmBotRight);
		}
		if(this._startText == null) {
			this._startText = new com_jpmata_views_text_BasicTextField(172,131);
			this._startText.setString(nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtBigStart"));
			this._startText.setColor(16777215);
			this._startText.set_x(this._bmBotLeft.get_x() + 24);
			this._startText.set_y(this._bmBotLeft.get_y() + 250);
			this._layerBg.addChild(this._startText);
		}
		if(this._endText == null) {
			this._endText = new com_jpmata_views_text_BasicTextField(180,58);
			this._endText.setString(nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtBigEnd"));
			this._endText.setColor(16777215);
			this._endText.set_x(this._bmTopRight.get_x() + 556);
			this._endText.set_y(this._bmTopRight.get_y() + 167);
			this._layerBg.addChild(this._endText);
		}
		if(this._objTokens == null) {
			this._objTokens = [];
			var startTile = null;
			var _g1 = 0;
			var _g = this._gameManager.get_currentTokens().length;
			while(_g1 < _g) {
				var i = _g1++;
				var objToken = new nick_hol_nn_game_TokenObject(i + 1);
				startTile = this._gameManager.getBoardTile(objToken.get_data().currentTileID);
				objToken.set_x(startTile.x);
				objToken.set_y(startTile.y);
				this._layerTokens.addChild(objToken);
				this._objTokens.push(objToken);
			}
			if(startTile != null) this._adjustTokensInTile(startTile.id);
		}
		if(this._mcDrone == null) {
			this._mcDrone = new com_nicollee_hxanimation_HxModMovieClip();
			this._mcDrone.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_drone_flying.json");
			this._mcDrone.set_visible(false);
			this._mcDrone.setNotifyOnComplete(false);
			this._mcDrone.play(true);
			this._mcDrone.stop();
			this._mcDrone.reset();
			this._layerEffects_top.addChild(this._mcDrone);
		}
		if(this._mcFriend == null) {
			this._mcFriend = new com_nicollee_hxanimation_HxModMovieClip();
			this._mcFriend.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_patrick_runnormal.json");
			this._mcFriend.set_visible(false);
			this._mcFriend.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcFriend_complete));
			this._mcFriend.setNotifyOnComplete(false);
			this._mcFriend.play(true);
			this._mcFriend.stop();
			this._mcFriend.reset();
			this._layerTokens.addChildAt(this._mcFriend,0);
		}
		if(this._mcSleigh == null) {
			this._mcSleigh = new com_nicollee_hxanimation_HxModMovieClip();
			this._mcSleigh.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_sleigh_side_static.json");
			this._mcSleigh.set_visible(false);
			this._mcSleigh.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcSleigh_complete));
			this._mcSleigh.setNotifyOnComplete(false);
			this._mcSleigh.play(false);
			this._mcSleigh.stop();
			this._mcSleigh.reset();
			this._layerEffects_top.addChild(this._mcSleigh);
		}
		if(this._mcSlide == null) {
			this._mcSlide = new com_nicollee_hxanimation_HxModMovieClip();
			this._mcSlide.set_visible(false);
			this._mcSlide.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcSlide_complete));
			this._mcSlide.setNotifyOnComplete(false);
			this._mcSlide.play(false);
			this._mcSlide.stop();
			this._mcSlide.reset();
			this._layerEffects_bot.addChild(this._mcSlide);
		}
		if(this._mcFX == null) {
			this._mcFX = new com_nicollee_hxanimation_HxModMovieClip();
			this._mcFX.set_visible(false);
			this._mcFX.setNotifyOnComplete(false);
			this._mcFX.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcFX_complete));
			this._mcFX.play(false);
			this._mcFX.stop();
			this._mcFX.reset();
			this._layerEffects_top.addChild(this._mcFX);
		}
	}
	,_initListeners: function() {
		nick_hol_nn_game_GameObject.prototype._initListeners.call(this);
		if(this._satellite != null) {
			this.addEventListener("boardEvt_complete",($_=this._satellite,$bind($_,$_.handler)));
			this.addEventListener("boardEvt_nextPlayer",($_=this._satellite,$bind($_,$_.handler)));
			this.addEventListener("boardEvt_showNotif",($_=this._satellite,$bind($_,$_.handler)));
			this.addEventListener("boardEvt_showSpecial",($_=this._satellite,$bind($_,$_.handler)));
			this._satellite.subscribe(this,"spinnerEvt_select",$bind(this,this._handler_spinnerSelect));
			this._satellite.subscribe(this,"tokenEvt_updState",$bind(this,this._handler_tokenUpdState));
		}
	}
	,_initProps: function(p_params) {
		nick_hol_nn_game_GameObject.prototype._initProps.call(this,p_params);
		this._state = null;
		this._type = null;
		this._animFX = null;
		this._animFriend = null;
		this._animSleigh = null;
		this._animSlide = null;
		this._boundsCurrent = null;
		this._boundsView = new openfl_geom_Rectangle(0,0,ie_lib_utils_display_DisplayUtility.get_nominalWidth(),ie_lib_utils_display_DisplayUtility.get_nominalHeight());
		this._currentTiles = null;
		this._currentToken = null;
		this._isBoardAnim = false;
		this._isDone = false;
		this._isSleighActive = false;
		this._sfxDrone = null;
		this._sfxSleigh = null;
		this._voEnd = null;
		this._voFriend = null;
	}
	,_killGraphics: function() {
		if(this._bmBotLeft != null) {
			motion_Actuate.stop(this._bmBotLeft,null,false,false);
			if(this._bmBotLeft.parent != null) this._bmBotLeft.parent.removeChild(this._bmBotLeft);
			this._bmBotLeft.bitmapData = null;
		}
		this._bmBotLeft = null;
		if(this._bmBotRight != null) {
			motion_Actuate.stop(this._bmBotRight,null,false,false);
			if(this._bmBotRight.parent != null) this._bmBotRight.parent.removeChild(this._bmBotRight);
			this._bmBotRight.bitmapData = null;
		}
		this._bmBotRight = null;
		if(this._bmTopLeft != null) {
			motion_Actuate.stop(this._bmTopLeft,null,false,false);
			if(this._bmTopLeft.parent != null) this._bmTopLeft.parent.removeChild(this._bmTopLeft);
			this._bmTopLeft.bitmapData = null;
		}
		this._bmTopLeft = null;
		if(this._endText != null) {
			motion_Actuate.stop(this._endText,null,false,false);
			if(this._endText.parent != null) this._endText.parent.removeChild(this._endText);
			($_=this._endText,$bind($_,$_.destroy));
			this._endText = null;
		}
		if(this._startText != null) {
			motion_Actuate.stop(this._startText,null,false,false);
			if(this._startText.parent != null) this._startText.parent.removeChild(this._startText);
			($_=this._startText,$bind($_,$_.destroy));
			this._startText = null;
		}
		if(this._bmTopRight != null) {
			motion_Actuate.stop(this._bmTopRight,null,false,false);
			if(this._bmTopRight.parent != null) this._bmTopRight.parent.removeChild(this._bmTopRight);
			this._bmTopRight.bitmapData = null;
		}
		this._bmTopRight = null;
		if(this._mcDrone != null) {
			motion_Actuate.stop(this._mcDrone,null,false,false);
			this._mcDrone.stop();
			this._mcDrone.reset();
			if(this._mcDrone.parent != null) this._mcDrone.parent.removeChild(this._mcDrone);
		}
		this._mcDrone = null;
		if(this._mcFriend != null) {
			motion_Actuate.stop(this._mcFriend,null,false,false);
			this._mcFriend.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcFriend_complete));
			this._mcFriend.stop();
			this._mcFriend.reset();
			if(this._mcFriend.parent != null) this._mcFriend.parent.removeChild(this._mcFriend);
		}
		this._mcFriend = null;
		if(this._mcSleigh != null) {
			motion_Actuate.stop(this._mcSleigh,null,false,false);
			this._mcSleigh.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcSleigh_complete));
			this._mcSleigh.stop();
			this._mcSleigh.reset();
			if(this._mcSleigh.parent != null) this._mcSleigh.parent.removeChild(this._mcSleigh);
		}
		this._mcSleigh = null;
		if(this._mcSlide != null) {
			motion_Actuate.stop(this._mcSlide,null,false,false);
			this._mcSlide.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcSlide_complete));
			this._mcSlide.stop();
			this._mcSlide.reset();
			if(this._mcSlide.parent != null) this._mcSlide.parent.removeChild(this._mcSlide);
		}
		this._mcSlide = null;
		if(this._mcFX != null) {
			motion_Actuate.stop(this._mcFX,null,false,false);
			this._mcFX.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcFX_complete));
			this._mcFX.stop();
			this._mcFX.reset();
			if(this._mcFX.parent != null) this._mcFX.parent.removeChild(this._mcFX);
		}
		this._mcFX = null;
		if(this._objTokens != null) {
			var _g1 = 0;
			var _g = this._objTokens.length;
			while(_g1 < _g) {
				var i = _g1++;
				var objToken = this._objTokens[i];
				if(objToken == null) continue;
				motion_Actuate.stop(objToken,null,false,false);
				if(objToken.parent != null) objToken.parent.removeChild(objToken);
				objToken.destroy();
				this._objTokens[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._objTokens);
		}
		this._objTokens = null;
		if(this._layerBg != null) {
			motion_Actuate.stop(this._layerBg,null,false,false);
			if(this._layerBg.parent != null) this._layerBg.parent.removeChild(this._layerBg);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._layerBg);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._layerBg);
			this._layerBg.removeChildren();
		}
		this._layerBg = null;
		if(this._layerEffects_bot != null) {
			motion_Actuate.stop(this._layerEffects_bot,null,false,false);
			if(this._layerEffects_bot.parent != null) this._layerEffects_bot.parent.removeChild(this._layerEffects_bot);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._layerEffects_bot);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._layerEffects_bot);
			this._layerEffects_bot.removeChildren();
		}
		this._layerEffects_bot = null;
		if(this._layerEffects_top != null) {
			motion_Actuate.stop(this._layerEffects_top,null,false,false);
			if(this._layerEffects_top.parent != null) this._layerEffects_top.parent.removeChild(this._layerEffects_top);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._layerEffects_top);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._layerEffects_top);
			this._layerEffects_top.removeChildren();
		}
		this._layerEffects_top = null;
		if(this._layerTokens != null) {
			motion_Actuate.stop(this._layerTokens,null,false,false);
			if(this._layerTokens.parent != null) this._layerTokens.parent.removeChild(this._layerTokens);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._layerTokens);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._layerTokens);
			this._layerTokens.removeChildren();
		}
		this._layerTokens = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		nick_hol_nn_game_GameObject.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) {
			this.removeEventListener("boardEvt_complete",($_=this._satellite,$bind($_,$_.handler)));
			this.removeEventListener("boardEvt_nextPlayer",($_=this._satellite,$bind($_,$_.handler)));
			this.removeEventListener("boardEvt_showNotif",($_=this._satellite,$bind($_,$_.handler)));
			this.removeEventListener("boardEvt_showSpecial",($_=this._satellite,$bind($_,$_.handler)));
			this._satellite.unsubscribe(this,"spinnerEvt_select",$bind(this,this._handler_spinnerSelect));
			this._satellite.unsubscribe(this,"tokenEvt_updState",$bind(this,this._handler_tokenUpdState));
		}
		nick_hol_nn_game_GameObject.prototype._killListeners.call(this);
	}
	,_killProps: function() {
		this._animFX = null;
		this._animFriend = null;
		this._animSleigh = null;
		this._animSlide = null;
		if(this._boundsCurrent != null) this._boundsCurrent.setEmpty();
		this._boundsCurrent = null;
		if(this._boundsView != null) this._boundsView.setEmpty();
		this._boundsView = null;
		if(this._currentTiles != null) {
			var _g1 = 0;
			var _g = this._currentTiles.length;
			while(_g1 < _g) {
				var i = _g1++;
				this._currentTiles[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._currentTiles);
		}
		this._currentTiles = null;
		this._currentToken = null;
		this._isBoardAnim = null;
		this._isDone = null;
		this._isSleighActive = null;
		if(this._sfxDrone != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxDrone,true);
		this._sfxDrone = null;
		if(this._sfxSleigh != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxSleigh,true);
		this._sfxSleigh = null;
		if(this._voEnd != null) com_jpmata_managers_SoundManager.get_instance().stopVO(this._voEnd,true);
		this._voEnd = null;
		if(this._voFriend != null) com_jpmata_managers_SoundManager.get_instance().stopVO(this._voFriend,true);
		this._voFriend = null;
		nick_hol_nn_game_GameObject.prototype._killProps.call(this);
	}
	,_pause: function() {
		nick_hol_nn_game_GameObject.prototype._pause.call(this);
		if(this._mcDrone != null) {
			if(this._mcDrone.get_visible()) this._mcDrone.stop();
		}
		if(this._mcFriend != null) {
			if(this._mcFriend.get_visible()) this._mcFriend.stop();
		}
		if(this._mcSleigh != null) {
			if(this._mcSleigh.get_visible()) this._mcSleigh.stop();
		}
		if(this._mcSlide != null) {
			if(this._mcSlide.get_visible()) this._mcSlide.stop();
		}
		if(this._mcFX != null) {
			if(this._mcFX.get_visible()) this._mcFX.stop();
		}
		if(this._sfxDrone != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxDrone,true);
		if(this._sfxSleigh != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxSleigh,true);
		if(this._objTokens != null) {
			var _g = 0;
			var _g1 = this._objTokens;
			while(_g < _g1.length) {
				var objToken = _g1[_g];
				++_g;
				if(objToken != null) objToken.pause();
			}
		}
	}
	,_resume: function() {
		nick_hol_nn_game_GameObject.prototype._resume.call(this);
		if(this._mcDrone != null) {
			if(this._mcDrone.get_visible()) this._mcDrone.play();
		}
		if(this._mcFriend != null) {
			if(this._mcFriend.get_visible()) this._mcFriend.play();
		}
		if(this._mcSleigh != null) {
			if(this._mcSleigh.get_visible()) this._mcSleigh.play();
		}
		if(this._mcSlide != null) {
			if(this._mcSlide.get_visible()) this._mcSlide.play();
		}
		if(this._mcFX != null) {
			if(this._mcFX.get_visible()) this._mcFX.play();
		}
		if(this._sfxDrone != null) this._sfxDrone = com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/drone_loop.mp3",true,null,false);
		if(this._sfxSleigh != null) this._sfxSleigh = com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/sled_loop.mp3",true,null,false);
		if(this._objTokens != null) {
			var _g = 0;
			var _g1 = this._objTokens;
			while(_g < _g1.length) {
				var objToken = _g1[_g];
				++_g;
				if(objToken != null) objToken.resume();
			}
		}
	}
	,_getCountMove: function(p_data) {
		var result = null;
		if(p_data == null) return result;
		if(p_data.id == null) return result;
		if(p_data.type == null) return result;
		if(this._gameManager == null) return result;
		if(this._currentToken == null) return result;
		if(this._currentToken.get_data() == null) return result;
		if(this._currentToken.get_data().currentTileID == null) return result;
		var boardTiles = null;
		if(this._isSliceNormal(p_data)) {
			boardTiles = this._gameManager.getBoardTiles(p_data.type);
			var _g = 0;
			while(_g < boardTiles.length) {
				var boardTile = boardTiles[_g];
				++_g;
				if(boardTile.id > this._currentToken.get_data().currentTileID) {
					result = boardTile.id - this._currentToken.get_data().currentTileID;
					break;
				}
			}
			if(result == null) result = 0;
			if(result == 0) {
				boardTiles = this._gameManager.getBoardTiles(0);
				var _g1 = 0;
				while(_g1 < boardTiles.length) {
					var boardTile1 = boardTiles[_g1];
					++_g1;
					if(boardTile1.id > this._currentToken.get_data().currentTileID) {
						result = boardTile1.id - this._currentToken.get_data().currentTileID;
						break;
					}
				}
			}
		} else if(p_data.type == 7) result = -10; else if(p_data.type == 8) result = -6; else if(p_data.type == 9) result = 3; else if(p_data.type == 10) result = 0; else if(p_data.type == 11) {
			var nextToken = null;
			var count = 1;
			var rankToCheck = 0;
			do {
				rankToCheck = Std["int"](Math.max(1,this._currentToken.get_data().rank - count));
				nextToken = this._gameManager.getToken_byRank(rankToCheck);
				count += 1;
			} while(nextToken.currentTileID == this._currentToken.get_data().currentTileID && rankToCheck != 1);
			if(this._currentToken.get_data().rank == 1) result = 3; else result = nextToken.currentTileID + 1 - this._currentToken.get_data().currentTileID;
		} else if(p_data.type == 12) result = 6;
		return result;
	}
	,_isSliceNormal: function(p_data) {
		return p_data.type == 1 || p_data.type == 2 || p_data.type == 3 || p_data.type == 4 || p_data.type == 5 || p_data.type == 6;
	}
	,_setCurrentTiles: function(p_moveCount) {
		if(this._currentTiles == null) this._currentTiles = [];
		if(this._gameManager == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(p_moveCount == 0) return;
		var _g1 = 0;
		var _g = Std["int"](Math.abs(p_moveCount));
		while(_g1 < _g) {
			var i = _g1++;
			var index = i + 1;
			var tileID = null;
			if(p_moveCount > 0) tileID = this._currentToken.get_data().currentTileID + index; else if(p_moveCount < 0) tileID = this._currentToken.get_data().currentTileID - index;
			var tileData = this._gameManager.getBoardTile(tileID);
			if(tileData != null) this._currentTiles.push(tileData);
		}
		null;
	}
	,_setBoundsView: function() {
		if(this._boundsView == null) return;
		var localPos = this.globalToLocal(new openfl_geom_Point(0,0));
		if(this._boundsView.x != localPos.x) this._boundsView.x = localPos.x;
		if(this._boundsView.y != localPos.y) this._boundsView.y = localPos.y;
	}
	,_centerToken: function(p_anim,p_callback) {
		var _g = this;
		if(this._objTokens == null) return;
		if(this.parent == null) return;
		if(this._isBoardAnim) return;
		var objToken = null;
		if(this._currentToken == null) objToken = this._objTokens[0]; else objToken = this._currentToken;
		if(objToken == null) return;
		var posX = ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - objToken.get_x() * this.get_scaleX();
		var posY = ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.5 - objToken.get_y() * this.get_scaleY();
		if(this._boundsCurrent != null) this._boundsCurrent.setEmpty();
		this._boundsCurrent = this._layerBg.getBounds(this.parent);
		if(posX > 0) posX = 0; else if(posX < ie_lib_utils_display_DisplayUtility.get_nominalWidth() - this._boundsCurrent.width) posX = ie_lib_utils_display_DisplayUtility.get_nominalWidth() - this._boundsCurrent.width;
		if(posY > 0) posY = 0; else if(posY < ie_lib_utils_display_DisplayUtility.get_nominalHeight() - this._boundsCurrent.height) posY = ie_lib_utils_display_DisplayUtility.get_nominalHeight() - this._boundsCurrent.height;
		if(p_anim) {
			this._isBoardAnim = true;
			if(this.get_x() == posX && this.get_y() == posY) {
				this._isBoardAnim = false;
				if(p_callback != null) p_callback();
			} else {
				var dist = Math.abs(ie_lib_utils_math_MathUtility.getDistance(new openfl_geom_Point(this.get_x(),this.get_y()),new openfl_geom_Point(posX,posY)));
				var duration = dist / 200 * 0.5;
				duration = Math.max(duration,0.5);
				motion_Actuate.tween(this,duration,{ x : posX, y : posY}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					_g._isBoardAnim = false;
					if(p_callback != null) p_callback();
				});
			}
		} else {
			this.set_x(posX);
			this.set_y(posY);
			if(p_callback != null) p_callback();
		}
	}
	,_scaleToken: function() {
		if(this._currentToken == null) return;
		if(this._currentToken.get_sprToken() == null) return;
		if(this._currentToken.get_prevPosition() == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().prevTileID == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(this._currentToken.get_isAdjusting()) return;
		if(this._currentToken.get_x() > this._currentToken.get_prevPosition().x) this._currentToken.get_sprToken().set_scaleX(1); else if(this._currentToken.get_x() < this._currentToken.get_prevPosition().x) this._currentToken.get_sprToken().set_scaleX(-1);
	}
	,_startMoveToken: function(p_data) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(p_data == null) return;
		if(p_data.id == null) return;
		if(p_data.type == null) return;
		if(this._gameManager == null) return;
		if(this._gameManager.get_boardTiles() == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().id == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		var countMove = this._getCountMove(p_data);
		var newTileID = this._currentToken.get_data().currentTileID + countMove;
		if(newTileID < 1) newTileID = 1; else if(newTileID > this._gameManager.get_boardTiles().length) newTileID = this._gameManager.get_boardTiles().length;
		this._setCurrentTiles(countMove);
		this._gameManager.setTokenTile(this._currentToken.get_data().id,newTileID);
		this._processMoveToken(p_data);
	}
	,_processMoveToken: function(p_data) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(p_data == null) return;
		if(p_data.id == null) return;
		if(p_data.type == null) return;
		if(this._currentToken == null) return;
		this._currentToken.setState(nick_hol_nn_game_TokenState.BUSY);
		if(this._isSliceNormal(p_data)) this._processMoveToken_byTile(true); else {
			var callback = null;
			if(p_data.type == 7) callback = $bind(this,this._processMoveToken_byAvalanche); else if(p_data.type == 8) this._processMoveToken_byDrone(); else if(p_data.type == 9) {
				this._currentToken.set_spinsAgain(true);
				this._processMoveToken_byFriend();
			} else if(p_data.type == 10) this._currentToken.freeze($bind(this,this._endMoveToken)); else if(p_data.type == 11) {
				if(this._currentToken.get_data().rank == 1) this._currentToken.set_spinsAgain(true);
				this._processMoveToken_bySleigh();
			} else if(p_data.type == 12) this._processMoveToken_bySlide();
			if(callback != null) this.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_showSpecial",{ spinner : p_data, callback : callback}));
		}
	}
	,_processMoveToken_byAvalanche: function() {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._gameManager == null) return;
		if(this._gameManager.get_boardTiles() == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(this._currentTiles == null) return;
		var currentTile = null;
		if(this._currentTiles.length != 0) currentTile = this._currentTiles.pop(); else currentTile = this._gameManager.getBoardTile(this._currentToken.get_data().currentTileID);
		motion_Actuate.stop(this._currentToken,null,false,false);
		this._currentToken.set_x(currentTile.x);
		this._currentToken.set_y(currentTile.y);
		this._setAnimation_fx("media/images/embed/game/fx/fx_snow_idle.json");
		motion_Actuate.tween(this._currentToken,1.076,{ y : this._currentToken.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_g._setAnimation_fx("media/images/embed/game/fx/fx_snow_pile.json");
			motion_Actuate.tween(_g._currentToken,0.3,{ y : _g._currentToken.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.tween(_g._currentToken,0.4,{ y : _g._currentToken.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					if(currentTile.shortcut != null) _g._processMoveToken_shortcut(currentTile.shortcut); else _g._endMoveToken();
				});
			});
		});
	}
	,_processMoveToken_byDrone: function() {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._gameManager == null) return;
		if(this._gameManager.get_boardTiles() == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(this._currentTiles == null) return;
		if(this._mcDrone == null) return;
		if(this._boundsView == null) return;
		var currentTile = this._gameManager.getBoardTile(this._currentToken.get_data().currentTileID);
		var motionPath = new motion_MotionPath();
		if(this._currentTiles.length != 0) {
			var tileData = this._currentTiles.pop();
			if(tileData != null) motionPath.line(tileData.x,tileData.y);
		} else motionPath.line(currentTile.x,currentTile.y);
		motion_Actuate.stop(this._mcDrone,null,false,false);
		motion_Actuate.stop(this._currentToken,null,false,false);
		var randDir = ie_lib_utils_math_MathUtility.randomizeInt(1,2);
		if(randDir == 1) this._mcDrone.set_x(this._boundsView.x - 42.8); else if(randDir == 2) this._mcDrone.set_x(this._boundsView.x + this._boundsView.width + 42.8);
		this._mcDrone.set_y(this._currentToken.get_y() + this._currentToken.get_bmToken().get_y() + 10);
		this._mcDrone.set_visible(true);
		this._mcDrone.play(true);
		if(this._sfxDrone != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxDrone,true);
		this._sfxDrone = com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/drone_loop.mp3",true,null,false);
		motion_Actuate.tween(this._mcDrone,1,{ x : this._currentToken.get_x()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_g._mcDrone.set_x(0);
			_g._mcDrone.set_y(_g._currentToken.get_bmToken().get_y() + 10);
			_g._currentToken.addChild(_g._mcDrone);
			motion_Actuate.motionPath(_g._currentToken,1,{ x : motionPath.get_x(), y : motionPath.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_g._mcDrone.set_x(_g._currentToken.get_x());
				_g._mcDrone.set_y(_g._currentToken.get_y() + _g._currentToken.get_bmToken().get_y() + 10);
				_g._layerEffects_top.addChild(_g._mcDrone);
				var posX = null;
				if(randDir == 1) posX = _g._boundsView.x + _g._boundsView.width + 42.8; else if(randDir == 2) posX = _g._boundsView.x - 42.8;
				motion_Actuate.tween(_g._mcDrone,1,{ x : posX}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					_g._mcDrone.set_visible(false);
					if(_g._sfxDrone != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(_g._sfxDrone,true);
					_g._sfxDrone = null;
					if(currentTile.shortcut != null) _g._processMoveToken_shortcut(currentTile.shortcut); else _g._endMoveToken();
				});
			});
		});
	}
	,_processMoveToken_byFriend: function() {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._gameManager == null) return;
		if(this._gameManager.get_boardTiles() == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(this._currentTiles == null) return;
		if(this._mcFriend == null) return;
		if(this._boundsView == null) return;
		motion_Actuate.stop(this._mcFriend,null,false,false);
		var dir = null;
		if(this._currentTiles.length >= 2) {
			var firstTile = this._currentTiles[0];
			var lastTile = this._currentTiles[this._currentTiles.length - 1];
			var pointA = new openfl_geom_Point(firstTile.x,firstTile.y);
			var pointB = new openfl_geom_Point(lastTile.x,lastTile.y);
			var dist = ie_lib_utils_math_MathUtility.getDistance(pointA,pointB);
			var angle = ie_lib_utils_math_MathUtility.getAngle(pointA,pointB);
			var distX = ie_lib_utils_math_MathUtility.getDistX(dist,angle);
			if(distX >= 0) dir = 1; else dir = 2;
		} else dir = 1;
		if(dir == 1) {
			this._mcFriend.set_x(this._boundsView.x - 22.125);
			this._mcFriend.set_scaleX(1);
		} else if(dir == 2) {
			this._mcFriend.set_x(this._boundsView.x + this._boundsView.width + 22.125);
			this._mcFriend.set_scaleX(-1);
		}
		this._mcFriend.set_y(this._currentToken.get_y() - 5);
		this._mcFriend.stop();
		this._mcFriend.reset();
		this._mcFriend.setNotifyOnComplete(false);
		this._mcFriend.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_patrick_runnormal.json");
		this._animFriend = "media/images/embed/game/special/nicknack_patrick_runnormal.json";
		this._mcFriend.play(true);
		this._mcFriend.set_visible(true);
		if(this._voFriend != null) com_jpmata_managers_SoundManager.get_instance().stopVO(this._voFriend,true);
		this._voFriend = com_jpmata_managers_SoundManager.get_instance().playVO("media/audio/embed/vo/game/patrick_letsgo.mp3",function() {
			_g._voFriend = null;
		},false);
		motion_Actuate.tween(this._mcFriend,1.0,{ x : this._currentToken.get_x()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_g._mcFriend.set_x(0);
			_g._mcFriend.set_y(0);
			_g._currentToken.addChildAt(_g._mcFriend,0);
			_g._mcFriend.stop();
			_g._mcFriend.setNotifyOnComplete(true);
			_g._mcFriend.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_patrick_pickup.json");
			_g._mcFriend.stop();
			_g._mcFriend.reset();
			_g._animFriend = "media/images/embed/game/special/nicknack_patrick_pickup.json";
			_g._mcFriend.play(false);
			_g._currentToken.setPointerVisibility(false);
			_g._currentToken.pickup(null);
		});
	}
	,_handler_mcFriend_complete: function(evt) {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._gameManager == null) return;
		if(this._gameManager.get_boardTiles() == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(this._currentTiles == null) return;
		if(this._mcFriend == null) return;
		if(this._animFriend == "media/images/embed/game/special/nicknack_patrick_pickup.json") {
			this._mcFriend.stop();
			this._mcFriend.setNotifyOnComplete(false);
			this._mcFriend.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_patrick_runcarry.json");
			this._mcFriend.stop();
			this._mcFriend.reset();
			this._animFriend = "media/images/embed/game/special/nicknack_patrick_runcarry.json";
			this._mcFriend.play(true);
			var motionPath = new motion_MotionPath();
			var count = this._currentTiles.length;
			if(count == 0) count = 1;
			var currentTile = this._gameManager.getBoardTile(this._currentToken.get_data().currentTileID);
			if(this._currentTiles.length != 0) do {
				var tileData = this._currentTiles.shift();
				if(tileData != null) motionPath.line(tileData.x,tileData.y);
			} while(this._currentTiles.length > 0); else motionPath.line(currentTile.x,currentTile.y);
			motion_Actuate.stop(this._currentToken,null,false,false);
			motion_Actuate.motionPath(this._currentToken,count * 0.5,{ x : motionPath.get_x(), y : motionPath.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_g._mcFriend.stop();
				_g._mcFriend.setNotifyOnComplete(true);
				_g._mcFriend.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_patrick_drop.json");
				_g._mcFriend.stop();
				_g._mcFriend.reset();
				_g._animFriend = "media/images/embed/game/special/nicknack_patrick_drop.json";
				_g._mcFriend.play(false);
				_g._currentToken.drop(null);
				_g._currentToken.setPointerVisibility(true);
			});
		} else if(this._animFriend == "media/images/embed/game/special/nicknack_patrick_drop.json") {
			this._mcFriend.set_x(this._currentToken.get_x());
			this._mcFriend.set_y(this._currentToken.get_y() - 5);
			this._layerTokens.addChildAt(this._mcFriend,0);
			this._mcFriend.stop();
			this._mcFriend.setNotifyOnComplete(true);
			this._mcFriend.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_patrick_runnormal.json");
			this._mcFriend.stop();
			this._mcFriend.reset();
			this._animFriend = "media/images/embed/game/special/nicknack_patrick_runnormal.json";
			this._mcFriend.play(false);
			var posX = null;
			if(this._mcFriend.get_scaleX() == 1) posX = this._boundsView.x + this._boundsView.width + 22.125; else if(this._mcFriend.get_scaleX() == -1) posX = this._boundsView.x - 22.125;
			motion_Actuate.tween(this._mcFriend,1.0,{ x : posX}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				var currentTile1 = _g._gameManager.getBoardTile(_g._currentToken.get_data().currentTileID);
				_g._mcFriend.stop();
				_g._mcFriend.setNotifyOnComplete(false);
				_g._mcFriend.set_visible(false);
				if(currentTile1.shortcut != null) _g._processMoveToken_shortcut(currentTile1.shortcut); else _g._endMoveToken();
			});
		}
	}
	,_processMoveToken_bySleigh: function() {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._gameManager == null) return;
		if(this._gameManager.get_boardTiles() == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(this._currentTiles == null) return;
		if(this._mcSleigh == null) return;
		if(this._mcFX == null) return;
		this._setAnimation_fx("media/images/embed/game/fx/fx_sparkle_blue.json");
		this._mcSleigh.set_x(0);
		this._mcSleigh.set_y(this._currentToken.get_bmToken().get_y() + this._currentToken.get_bmToken().get_height());
		this._currentToken.get_sprToken().addChildAt(this._mcSleigh,0);
		var newAnim = null;
		if(this._currentToken.get_data().prevTileID >= 18 && this._currentToken.get_data().prevTileID <= 19 || this._currentToken.get_data().prevTileID >= 37 && this._currentToken.get_data().prevTileID <= 38 || this._currentToken.get_data().prevTileID >= 52 && this._currentToken.get_data().prevTileID <= 53) newAnim = "media/images/embed/game/special/nicknack_sleigh_back_appear.json"; else newAnim = "media/images/embed/game/special/nicknack_sleigh_side_appear.json";
		this._mcSleigh.stop();
		this._mcSleigh.reset();
		this._mcSleigh.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation(newAnim);
		this._mcSleigh.stop();
		this._mcSleigh.reset();
		this._animSleigh = newAnim;
		this._mcSleigh.set_visible(true);
		this._mcSleigh.setNotifyOnComplete(false);
		this._mcSleigh.play(false);
		motion_Actuate.tween(this._currentToken,0.7,{ y : this._currentToken.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_g._handler_mcSleigh_complete(null);
		});
	}
	,_handler_mcSleigh_complete: function(evt) {
		var _g2 = this;
		if(this._mcSleigh == null) return;
		if(this._mcFX == null) return;
		if(this._animSleigh == "media/images/embed/game/special/nicknack_sleigh_back_appear.json" || this._animSleigh == "media/images/embed/game/special/nicknack_sleigh_side_appear.json") {
			this._isSleighActive = true;
			if(this._sfxSleigh != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxSleigh,true);
			this._sfxSleigh = com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/sled_loop.mp3",true,null,false);
			var currentTile = this._gameManager.getBoardTile(this._currentToken.get_data().currentTileID);
			var motionPath = new motion_MotionPath();
			var count = this._currentTiles.length;
			var tileIDs = [];
			if(count == 0) count = 1;
			if(this._currentTiles.length != 0) do {
				var tileData = this._currentTiles.shift();
				if(tileData != null) {
					tileIDs.push(tileData.id);
					motionPath.line(tileData.x,tileData.y);
				}
			} while(this._currentTiles.length > 0); else {
				tileIDs.push(currentTile.id);
				motionPath.line(currentTile.x,currentTile.y);
			}
			motion_Actuate.stop(this._currentToken,null,false,false);
			var _g1 = 0;
			var _g = tileIDs.length;
			while(_g1 < _g) {
				var i = _g1++;
				var tileID = [tileIDs[i]];
				if(i == 0) this._checkSleighTile(tileID[0]); else motion_Actuate.tween(this._mcSleigh,0.25,{ y : this._mcSleigh.get_y()}).ease(motion_easing_Linear.get_easeNone()).delay(i * 0.25).onComplete((function(tileID) {
					return function() {
						_g2._checkSleighTile(tileID[0]);
					};
				})(tileID));
			}
			motion_Actuate.motionPath(this._currentToken,count * 0.25,{ x : motionPath.get_x(), y : motionPath.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_g2._isSleighActive = false;
				_g2._handler_mcFX_complete(null);
				if(_g2._sfxSleigh != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(_g2._sfxSleigh,true);
				_g2._sfxSleigh = null;
				_g2._setAnimation_fx("media/images/embed/game/fx/fx_smoke_poof.json");
				motion_Actuate.tween(_g2._mcSleigh,0.5,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					_g2._animSleigh = null;
					_g2._mcSleigh.set_visible(false);
					_g2._mcSleigh.set_alpha(1);
					_g2._layerEffects_top.addChild(_g2._mcSleigh);
					if(currentTile.shortcut != null) _g2._processMoveToken_shortcut(currentTile.shortcut); else _g2._endMoveToken();
				});
			});
		}
	}
	,_checkSleighTile: function(p_tileID) {
		if(this._mcSleigh == null) return;
		var newAnim = null;
		if(p_tileID >= 19 && p_tileID <= 20 || p_tileID >= 38 && p_tileID <= 39 || p_tileID >= 53 && p_tileID <= 54) newAnim = "media/images/embed/game/special/nicknack_sleigh_back_static.json"; else newAnim = "media/images/embed/game/special/nicknack_sleigh_side_static.json";
		if(this._animSleigh != newAnim) {
			this._mcSleigh.stop();
			this._mcSleigh.reset();
			this._mcSleigh.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation(newAnim);
			this._mcSleigh.stop();
			this._mcSleigh.reset();
			this._animSleigh = newAnim;
			this._mcSleigh.setNotifyOnComplete(false);
			this._mcSleigh.play(false);
			if(newAnim == "media/images/embed/game/special/nicknack_sleigh_back_static.json") this._setAnimation_fx("media/images/embed/game/fx/fx_snowsplash_back.json"); else if(newAnim == "media/images/embed/game/special/nicknack_sleigh_side_static.json") this._setAnimation_fx("media/images/embed/game/fx/fx_snowsplash_side.json");
		}
	}
	,_processMoveToken_bySlide: function() {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._gameManager == null) return;
		if(this._gameManager.get_boardTiles() == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().prevTileID == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(this._currentTiles == null) return;
		if(this._mcSlide == null) return;
		if(this._mcFX == null) return;
		var currentTile = this._gameManager.getBoardTile(this._currentToken.get_data().currentTileID);
		var newAnim = null;
		if(this._currentToken.get_data().currentTileID >= 18 && this._currentToken.get_data().currentTileID <= 22 || this._currentToken.get_data().currentTileID >= 37 && this._currentToken.get_data().currentTileID <= 41 || this._currentToken.get_data().currentTileID >= 52 && this._currentToken.get_data().currentTileID <= 55) {
			newAnim = "media/images/embed/game/special/nicknack_slide_back_appear.json";
			this._mcSlide.set_x(currentTile.x);
			this._mcSlide.set_y(currentTile.y + currentTile.height * 0.5 + 100);
		} else if(this._currentToken.get_data().currentTileID >= 1 && this._currentToken.get_data().currentTileID <= 17 || this._currentToken.get_data().currentTileID >= 42 && this._currentToken.get_data().currentTileID <= 51) {
			newAnim = "media/images/embed/game/special/nicknack_slide_side_appear_right.json";
			this._mcSlide.set_x(currentTile.x);
			this._mcSlide.set_y(currentTile.y);
		} else {
			newAnim = "media/images/embed/game/special/nicknack_slide_side_appear_left.json";
			this._mcSlide.set_x(currentTile.x);
			this._mcSlide.set_y(currentTile.y);
		}
		this._setAnimation_fx("media/images/embed/game/fx/fx_sparkle_blue.json");
		this._layerEffects_bot.addChildAt(this._mcSlide,0);
		motion_Actuate.tween(this._currentToken,0.5,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			if(newAnim == "media/images/embed/game/special/nicknack_slide_back_appear.json") {
				_g._currentToken.set_x(_g._mcSlide.get_x());
				_g._currentToken.set_y(_g._mcSlide.get_y());
			} else if(newAnim == "media/images/embed/game/special/nicknack_slide_side_appear_left.json") {
				_g._currentToken.set_x(_g._mcSlide.get_x() + 306);
				_g._currentToken.set_y(_g._mcSlide.get_y() + 28);
			} else if(newAnim == "media/images/embed/game/special/nicknack_slide_side_appear_right.json") {
				_g._currentToken.set_x(_g._mcSlide.get_x() - 306);
				_g._currentToken.set_y(_g._mcSlide.get_y() - 28);
			}
			_g._centerToken(true);
			_g._mcSlide.stop();
			_g._mcSlide.reset();
			_g._mcSlide.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation(newAnim);
			_g._mcSlide.stop();
			_g._mcSlide.reset();
			_g._animSlide = newAnim;
			_g._mcSlide.set_visible(true);
			_g._mcSlide.setNotifyOnComplete(true);
			_g._mcSlide.play(false);
		});
	}
	,_handler_mcSlide_complete: function(evt) {
		var _g = this;
		if(this._mcSlide == null) return;
		if(this._mcFX == null) return;
		if(this._animSlide == "media/images/embed/game/special/nicknack_slide_back_appear.json" || this._animSlide == "media/images/embed/game/special/nicknack_slide_side_appear_left.json" || this._animSlide == "media/images/embed/game/special/nicknack_slide_side_appear_right.json") {
			var tempAnim = this._animSlide;
			this._animSlide = null;
			motion_Actuate.tween(this._currentToken,0.5,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/slide_through_tiles.mp3",false,null,false);
				var posX = null;
				var posY = null;
				if(tempAnim == "media/images/embed/game/special/nicknack_slide_back_appear.json") {
					posX = _g._mcSlide.get_x();
					posY = _g._mcSlide.get_y() - 245;
				} else if(tempAnim == "media/images/embed/game/special/nicknack_slide_side_appear_left.json") {
					posX = _g._mcSlide.get_x() + 265;
					posY = _g._mcSlide.get_y() - 181;
				} else if(tempAnim == "media/images/embed/game/special/nicknack_slide_side_appear_right.json") {
					posX = _g._mcSlide.get_x() - 265;
					posY = _g._mcSlide.get_y() - 181;
				}
				motion_Actuate.tween(_g._currentToken,0.5,{ x : posX, y : posY}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
					var path = new motion_MotionPath();
					var currentTile = _g._gameManager.getBoardTile(_g._currentToken.get_data().currentTileID);
					if(tempAnim == "media/images/embed/game/special/nicknack_slide_back_appear.json") {
						_g._layerEffects_top.addChildAt(_g._mcSlide,0);
						path.line(currentTile.x,currentTile.y);
					} else if(tempAnim == "media/images/embed/game/special/nicknack_slide_side_appear_left.json") {
						path.line(_g._mcSlide.get_x() + 132,_g._mcSlide.get_y() - 78);
						path.line(_g._mcSlide.get_x(),_g._mcSlide.get_y());
					} else if(tempAnim == "media/images/embed/game/special/nicknack_slide_side_appear_right.json") {
						path.line(_g._mcSlide.get_x() - 132,_g._mcSlide.get_y() - 78);
						path.line(_g._mcSlide.get_x(),_g._mcSlide.get_y());
					}
					motion_Actuate.motionPath(_g._currentToken,1.0,{ x : path.get_x(), y : path.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
						_g._setAnimation_fx("media/images/embed/game/fx/fx_smoke_poof.json");
						motion_Actuate.tween(_g._mcSlide,0.5,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
							_g._animSlide = null;
							_g._mcSlide.set_visible(false);
							_g._mcSlide.set_alpha(1);
							_g._layerTokens.addChild(_g._mcSlide);
							if(currentTile.shortcut != null) _g._processMoveToken_shortcut(currentTile.shortcut); else _g._endMoveToken();
						});
					});
				});
			});
		}
	}
	,_processMoveToken_byTile: function(p_playMoveSFX) {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._gameManager == null) return;
		if(this._gameManager.get_boardTiles() == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().id == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(this._currentTiles == null) return;
		var currentTile = null;
		if(this._currentTiles.length != 0) currentTile = this._currentTiles.shift(); else currentTile = this._gameManager.getBoardTile(this._currentToken.get_data().currentTileID);
		if(p_playMoveSFX) com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/piece_move.mp3",false,null,false);
		motion_Actuate.stop(this._currentToken,null,false,false);
		motion_Actuate.tween(this._currentToken,0.5,{ x : currentTile.x, y : currentTile.y}).onComplete(function() {
			if(_g._currentTiles.length == 0) {
				if(currentTile.shortcut != null) _g._processMoveToken_shortcut(currentTile.shortcut); else _g._endMoveToken();
			} else _g._processMoveToken_byTile(p_playMoveSFX);
		});
	}
	,_processMoveToken_shortcut: function(p_shortcutID) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._gameManager == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().id == null) return;
		var shortcutTile = this._gameManager.getBoardTile(p_shortcutID);
		if(shortcutTile == null) return;
		this._gameManager.setTokenTile(this._currentToken.get_data().id,shortcutTile.id);
		com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/move_up.mp3",false,null,false);
		motion_Actuate.tween(this._currentToken,2.0,{ x : shortcutTile.x, y : shortcutTile.y}).onComplete($bind(this,this._endMoveToken));
	}
	,_endMoveToken: function() {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._gameManager == null) return;
		if(this._gameManager.get_boardTiles() == null) return;
		if(this._currentToken == null) return;
		if(this._currentToken.get_data() == null) return;
		if(this._currentToken.get_data().prevTileID == null) return;
		if(this._currentToken.get_data().currentTileID == null) return;
		if(this._currentToken.get_data().currentTileID != this._currentToken.get_data().prevTileID) this._adjustTokensInTile(this._currentToken.get_data().currentTileID,true);
		com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/end_turn.mp3",false,null,false);
		if(this._currentToken.get_data().currentTileID == this._gameManager.get_boardTiles().length) this._currentToken.setState(nick_hol_nn_game_TokenState.COMPLETE); else this._currentToken.setState(nick_hol_nn_game_TokenState.END);
		if(this._currentTiles != null) {
			var _g1 = 0;
			var _g = this._currentTiles.length;
			while(_g1 < _g) {
				var i = _g1++;
				this._currentTiles[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._currentTiles);
		}
		this._currentTiles = null;
	}
	,_nextToken: function(p_isInit) {
		if(p_isInit == null) p_isInit = false;
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._objTokens == null) return;
		var str = null;
		var txt = null;
		if(this._currentToken != null) {
			if(this._currentToken.get_spinsAgain()) {
				if(this._currentToken.get_data().mode == nick_hol_nn_manager_TokenMode.PLAYER) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSpinAgain_player"); else str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSpinAgain_com");
				txt = StringTools.replace(str.VALUE,"%i%",nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtName_" + Std.string(this._currentToken.get_data().type)).VALUE);
				this.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_showNotif",{ type : this._currentToken.get_data().type, str : str, txt : txt, isTurnNotif : true}));
				this._currentToken.setState(nick_hol_nn_game_TokenState.START);
				this._currentToken.set_spinsAgain(false);
				this.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_nextPlayer",{ currentToken : this._currentToken}));
				return;
			}
		}
		this._currentToken = null;
		var _g1 = 0;
		var _g11 = this._objTokens;
		while(_g1 < _g11.length) {
			var objToken = _g11[_g1];
			++_g1;
			if(objToken.get_state() == nick_hol_nn_game_TokenState.START) {
				this._currentToken = objToken;
				break;
			}
		}
		if(this._currentToken == null) {
			var isResetSuccess = false;
			var _g2 = 0;
			var _g12 = this._objTokens;
			while(_g2 < _g12.length) {
				var objToken1 = _g12[_g2];
				++_g2;
				if(objToken1.get_state() != nick_hol_nn_game_TokenState.COMPLETE) {
					isResetSuccess = true;
					objToken1.setState(nick_hol_nn_game_TokenState.START);
				}
			}
			if(isResetSuccess) this._nextToken();
		} else this._centerToken(p_isInit?false:true,function() {
			if(_g._currentToken.get_data().mode == nick_hol_nn_manager_TokenMode.PLAYER) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtTurn_player"); else if(_g._currentToken.get_data().mode == nick_hol_nn_manager_TokenMode.AI) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtTurn_com");
			txt = StringTools.replace(str.VALUE,"%i%",nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtName_" + Std.string(_g._currentToken.get_data().type)).VALUE);
			txt = StringTools.replace(txt,"%'s%","'s");
			if(_g._currentToken.get_isFrozen()) _g._currentToken.unfreeze(function() {
				_g.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_showNotif",{ type : _g._currentToken.get_data().type, str : str, txt : txt, isTurnNotif : true}));
				_g.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_nextPlayer",{ currentToken : _g._currentToken}));
			}); else {
				_g.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_showNotif",{ type : _g._currentToken.get_data().type, str : str, txt : txt, isTurnNotif : true}));
				_g.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_nextPlayer",{ currentToken : _g._currentToken}));
			}
		});
	}
	,_setAnimation_fx: function(p_anim) {
		if(this._mcFX == null) return;
		if(this._animFX == p_anim) return;
		this._animFX = p_anim;
		this._mcFX.set_visible(false);
		this._mcFX.stop();
		this._mcFX.reset();
		this._mcFX.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation(this._animFX);
		if(this._animFX == "media/images/embed/game/fx/fx_snow_idle.json") {
			this._mcFX.set_x(0);
			this._mcFX.set_y(25);
			this._mcFX.setNotifyOnComplete(false);
			this._currentToken.addChild(this._mcFX);
			this._mcFX.set_visible(true);
			this._mcFX.play(false);
		} else if(this._animFX == "media/images/embed/game/fx/fx_snow_pile.json") {
			this._mcFX.set_x(0);
			this._mcFX.set_y(25);
			this._mcFX.setNotifyOnComplete(true);
			this._currentToken.addChild(this._mcFX);
			this._mcFX.set_visible(true);
			this._mcFX.play(false);
		} else if(this._animFX == "media/images/embed/game/fx/fx_snowsplash_back.json") {
			if(this._mcSleigh != null) {
				this._mcFX.set_x(this._mcSleigh.get_x());
				this._mcFX.set_y(this._mcSleigh.get_y() - 58);
				this._mcSleigh.parent.addChildAt(this._mcFX,0);
			}
			this._mcFX.setNotifyOnComplete(false);
			this._mcFX.set_visible(true);
			this._mcFX.play(true);
		} else if(this._animFX == "media/images/embed/game/fx/fx_snowsplash_side.json") {
			if(this._mcSleigh != null) {
				this._mcFX.set_x(this._mcSleigh.get_x() + 51);
				this._mcFX.set_y(this._mcSleigh.get_y() + 10);
				this._mcSleigh.parent.addChild(this._mcFX);
			}
			this._mcFX.setNotifyOnComplete(false);
			this._mcFX.set_visible(true);
			this._mcFX.play(true);
		} else {
			this._mcFX.set_x(0);
			this._mcFX.set_y(this._currentToken.get_bmToken().get_y() + this._currentToken.get_bmToken().get_height() * 0.5);
			this._mcFX.setNotifyOnComplete(true);
			this._mcFX.set_visible(true);
			this._currentToken.addChild(this._mcFX);
			this._mcFX.play(false);
		}
		if(this._animFX == "media/images/embed/game/fx/fx_sparkle_blue.json") com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/item_spawn.mp3",false,null,false); else if(this._animFX == "media/images/embed/game/fx/fx_smoke_poof.json") com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/item_despawn.mp3",false,null,false); else if(this._animFX == "media/images/embed/game/fx/fx_snow_pile.json") com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/ice_break.mp3",false,null,false);
	}
	,_handler_mcFX_complete: function(evt) {
		if(this._mcFX == null) return;
		this._animFX = null;
		this._mcFX.set_visible(false);
		this._mcFX.set_x(0);
		this._mcFX.set_y(0);
		this._mcFX.stop();
		this._mcFX.reset();
		this._mcFX.setNotifyOnComplete(false);
		if(this._mcFX.parent != this._layerEffects_top) this._layerEffects_top.addChild(this._mcFX);
	}
	,_adjustTokensInTile: function(p_tileID,p_animate) {
		if(p_animate == null) p_animate = false;
		var tokensInTile = this._getTokensInTile(p_tileID);
		var currentTileData = this._gameManager.getBoardTile(p_tileID);
		if(tokensInTile == null) return;
		if(tokensInTile.length == 1) {
			var _g1 = 0;
			var _g = tokensInTile.length;
			while(_g1 < _g) {
				var i = _g1++;
				tokensInTile[i] = null;
			}
			tokensInTile = null;
			return;
		}
		var _g11 = 0;
		var _g2 = tokensInTile.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var objToken = [tokensInTile[i1]];
			objToken[0].set_isAdjusting(true);
			var posX = null;
			var posY = null;
			if(i1 == 0) {
				posX = currentTileData.x + currentTileData.width * 0.25;
				posY = currentTileData.y;
			} else if(i1 == 1) {
				posX = currentTileData.x;
				posY = currentTileData.y - currentTileData.height * 0.25;
			} else if(i1 == 2) {
				posX = currentTileData.x;
				posY = currentTileData.y + currentTileData.height * 0.25;
			} else if(i1 == 3) {
				posX = currentTileData.x - currentTileData.width * 0.25;
				posY = currentTileData.y;
			}
			if(p_animate) {
				motion_Actuate.stop(objToken[0],null,false,false);
				motion_Actuate.tween(objToken[0],0.25,{ x : posX, y : posY}).ease(motion_easing_Linear.get_easeNone()).onComplete((function(objToken) {
					return function() {
						objToken[0].set_x(objToken[0].get_x());
						objToken[0].set_y(objToken[0].get_y());
						objToken[0].set_isAdjusting(false);
					};
				})(objToken));
			} else {
				objToken[0].set_x(posX);
				objToken[0].set_y(posY);
				objToken[0].set_isAdjusting(false);
			}
		}
		var _g12 = 0;
		var _g3 = tokensInTile.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			tokensInTile[i2] = null;
		}
		tokensInTile = null;
	}
	,_getTokensInTile: function(p_tileID) {
		var result = null;
		if(this._objTokens != null) {
			var _g = 0;
			var _g1 = this._objTokens;
			while(_g < _g1.length) {
				var objToken = _g1[_g];
				++_g;
				if(objToken == null) continue;
				if(objToken.get_data() == null) continue;
				if(objToken.get_data().currentTileID == p_tileID) {
					if(result == null) result = [];
					result.push(objToken);
				}
			}
		}
		return result;
	}
	,_rearrangeObjects: function() {
		if(this._layerTokens == null) return;
		var _g1 = 0;
		var _g = this._layerTokens.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			var indexCurrent = this._layerTokens.get_numChildren() - 1 - i;
			var childCurrent = this._layerTokens.getChildAt(indexCurrent);
			var indexPrev = indexCurrent - 1;
			var childPrev = null;
			try {
				childPrev = this._layerTokens.getChildAt(indexPrev);
			} catch( err ) {
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				childPrev = null;
			}
			if(childPrev != null) {
				if(childCurrent.get_y() < childPrev.get_y() && indexCurrent > indexPrev) this._layerTokens.swapChildren(childCurrent,childPrev);
			}
		}
	}
	,_end: function() {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._isDone) return;
		if(this._objTokens == null) return;
		this._isDone = true;
		var objToken = null;
		var _g1 = 0;
		var _g11 = this._objTokens;
		while(_g1 < _g11.length) {
			var elem = _g11[_g1];
			++_g1;
			if(elem == null) continue;
			if(elem.get_data() == null) continue;
			if(elem.get_data().mode == nick_hol_nn_manager_TokenMode.PLAYER) {
				objToken = elem;
				break;
			}
		}
		if(objToken != null) {
			var urlVO = null;
			var index;
			index = js_Boot.__cast(objToken.get_data().type , Int) - 1;
			var duration = null;
			if(objToken.get_data().rank == 1) {
				urlVO = StringTools.replace("media/audio/embed/vo/game/char_win_%i%.mp3","%i%",Std.string(objToken.get_data().type));
				duration = [1.881,2.815,1.419,1.130,1.663,4.525][index];
			} else {
				urlVO = StringTools.replace("media/audio/embed/vo/game/char_lose_%i%.mp3","%i%",Std.string(objToken.get_data().type));
				duration = [1.573,1.968,1.811,1.602,1.358,1.292][index];
			}
			if(this._voEnd != null) com_jpmata_managers_SoundManager.get_instance().stopVO(this._voEnd,true);
			this._voEnd = com_jpmata_managers_SoundManager.get_instance().playVO(urlVO,function() {
				_g._voEnd = null;
			},false);
			motion_Actuate.tween(this,1 + duration,{ y : this.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete($bind(this,this._dispatchEnd));
		}
	}
	,_dispatchEnd: function() {
		var _g = this;
		var str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtWin");
		var txt = StringTools.replace(str.VALUE,"%i%",nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtName_" + Std.string(this._currentToken.get_data().type)).VALUE);
		this.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_showNotif",{ type : this._currentToken.get_data().type, str : str, txt : txt, isWinNotif : true, callback : function() {
			_g.dispatchEvent(new nick_hol_nn_game_BoardEvent("boardEvt_complete"));
		}}));
	}
	,__class__: nick_hol_nn_game_BoardObject
	,__properties__: $extend(nick_hol_nn_game_GameObject.prototype.__properties__,{get_tokens:"get_tokens"})
});
var nick_hol_nn_game_BoardEvent = function(p_type,p_data,p_bubbles,p_cancelable) {
	if(p_cancelable == null) p_cancelable = false;
	if(p_bubbles == null) p_bubbles = false;
	ie_lib_events_BaseEvent.call(this,p_type,p_data,p_bubbles,p_cancelable);
};
$hxClasses["nick.hol.nn.game.BoardEvent"] = nick_hol_nn_game_BoardEvent;
nick_hol_nn_game_BoardEvent.__name__ = ["nick","hol","nn","game","BoardEvent"];
nick_hol_nn_game_BoardEvent.__super__ = ie_lib_events_BaseEvent;
nick_hol_nn_game_BoardEvent.prototype = $extend(ie_lib_events_BaseEvent.prototype,{
	__class__: nick_hol_nn_game_BoardEvent
});
var nick_hol_nn_game_NotificationHUD = function() {
	com_jpmata_views_BaseView.call(this);
};
$hxClasses["nick.hol.nn.game.NotificationHUD"] = nick_hol_nn_game_NotificationHUD;
nick_hol_nn_game_NotificationHUD.__name__ = ["nick","hol","nn","game","NotificationHUD"];
nick_hol_nn_game_NotificationHUD.__super__ = com_jpmata_views_BaseView;
nick_hol_nn_game_NotificationHUD.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	setText: function(p_type,p_str,p_txt) {
		var url = null;
		var isSpecial = false;
		if(p_type == 1 || p_type == 2 || p_type == 3 || p_type == 4 || p_type == 5 || p_type == 6) {
			url = StringTools.replace("media/images/embed/game/board/ctn_turn_%i%.png","%i%",Std.string(p_type));
			isSpecial = false;
		} else if(p_type == 7 || p_type == 8 || p_type == 9 || p_type == 10 || p_type == 11 || p_type == 12) {
			url = StringTools.replace("media/images/embed/game/board/ctn_nicknack_%i%.png","%i%",Std.string(p_type));
			isSpecial = true;
		}
		if(this._bm == null) {
			this._bm = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(url));
			this._bm.smoothing = true;
			this.addChild(this._bm);
		} else {
			this._bm.bitmapData = null;
			this._bm.bitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData(url);
		}
		if(this._txtToken == null) {
			this._txtToken = new com_jpmata_views_text_BasicTextField(220,105);
			this.addChild(this._txtToken);
		}
		if(this._txtSpecial == null) {
			this._txtSpecial = new com_jpmata_views_text_BasicTextField(280,140);
			this.addChild(this._txtSpecial);
		}
		this._bm.set_x(-(this._bm.get_width() * 0.5));
		this._bm.set_y(-(this._bm.get_height() * 0.5));
		if(!isSpecial) {
			this._txtSpecial.set_visible(false);
			this._txtToken.set_visible(true);
			this._txtToken.set_x(this._bm.get_x() + 90 + p_str.OFFSET_X);
			this._txtToken.set_y(this._bm.get_y() + 38 + p_str.OFFSET_Y);
			this._txtToken.setString(p_str);
			this._txtToken.setColor(16777215);
			if(p_txt != null) this._txtToken.set_text(p_txt);
		} else if(isSpecial) {
			this._txtToken.set_visible(false);
			this._txtSpecial.set_visible(true);
			this._txtSpecial.set_x(this._bm.get_x() + 142 + p_str.OFFSET_X);
			this._txtSpecial.set_y(this._bm.get_y() + 77 + p_str.OFFSET_Y);
			this._txtSpecial.setString(p_str);
			this._txtSpecial.setColor(16777215);
			if(p_txt != null) this._txtSpecial.set_text(p_txt);
		}
	}
	,_initGraphics: function() {
		com_jpmata_views_BaseView.prototype._initGraphics.call(this);
	}
	,_killGraphics: function() {
		if(this._bm != null) {
			motion_Actuate.stop(this._bm,null,false,false);
			if(this._bm.parent != null) this._bm.parent.removeChild(this._bm);
			this._bm.bitmapData = null;
		}
		this._bm = null;
		if(this._txtToken != null) {
			motion_Actuate.stop(this._txtToken,null,false,false);
			if(this._txtToken.parent != null) this._txtToken.parent.removeChild(this._txtToken);
			this._txtToken.destroy();
		}
		this._txtToken = null;
		if(this._txtSpecial != null) {
			motion_Actuate.stop(this._txtSpecial,null,false,false);
			if(this._txtSpecial.parent != null) this._txtSpecial.parent.removeChild(this._txtSpecial);
			this._txtSpecial.destroy();
		}
		this._txtSpecial = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,__class__: nick_hol_nn_game_NotificationHUD
});
var nick_hol_nn_game_RankHUD = function() {
	com_jpmata_views_BaseView.call(this);
};
$hxClasses["nick.hol.nn.game.RankHUD"] = nick_hol_nn_game_RankHUD;
nick_hol_nn_game_RankHUD.__name__ = ["nick","hol","nn","game","RankHUD"];
nick_hol_nn_game_RankHUD.__super__ = com_jpmata_views_BaseView;
nick_hol_nn_game_RankHUD.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	animate: function() {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._gameManager == null) return;
		if(this._hudTokenRanks == null) return;
		if(this._bmBg == null) return;
		this._hudTokenRanks.sort(function(a,b) {
			var result = 0;
			if(a.get_data().rank > b.get_data().rank) result = 1; else if(a.get_data().rank < b.get_data().rank) result = -1;
			return result;
		});
		var _g1 = 0;
		var _g = this._hudTokenRanks.length;
		while(_g1 < _g) {
			var i = _g1++;
			var hudTokenRank = this._hudTokenRanks[i];
			if(hudTokenRank == null) continue;
			var posX = this._bmBg.get_width() / (this._hudTokenRanks.length + 1) * (i + 1);
			motion_Actuate.tween(hudTokenRank,0.5,{ x : posX - hudTokenRank.get_iconWidth() * 0.5}).ease(motion_easing_Linear.get_easeNone()).onComplete($bind(hudTokenRank,hudTokenRank.animateRank));
		}
	}
	,_handlerBoard_nextPlayer: function(evt) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(evt.get_data() == null) return;
		if(evt.get_data().currentToken == null) return;
		var objToken = evt.get_data().currentToken;
		if(this._hudTokenRanks == null) return;
		var _g = 0;
		var _g1 = this._hudTokenRanks;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem == null) continue;
			if(elem.get_data().id == objToken.get_data().id) elem.setActiveToken(true); else elem.setActiveToken(false);
		}
	}
	,_initGraphics: function() {
		com_jpmata_views_BaseView.prototype._initGraphics.call(this);
		this.mouseEnabled = false;
		this.mouseChildren = false;
		if(this._bmBg == null) {
			this._bmBg = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/rank/ctn_rank_base.png"));
			this._bmBg.smoothing = true;
			this._bmBg.set_x(0);
			this._bmBg.set_y(0);
			this.addChild(this._bmBg);
		}
		if(this._hudTokenRanks == null) {
			this._hudTokenRanks = [];
			var tokenCount = this._gameManager.get_currentTokens().length;
			var _g = 0;
			while(_g < tokenCount) {
				var i = _g++;
				var hudTokenRank = new nick_hol_nn_game_TokenRankHUD(i + 1);
				hudTokenRank.set_scaleX(hudTokenRank.set_scaleY(0.9));
				var posX = this._bmBg.get_width() / (tokenCount + 1) * (i + 1);
				hudTokenRank.set_x(posX - hudTokenRank.get_width() * 0.5);
				hudTokenRank.set_y(this._bmBg.get_height() * 0.5 - hudTokenRank.get_height() * 0.5);
				this.addChild(hudTokenRank);
				this._hudTokenRanks.push(hudTokenRank);
			}
		}
	}
	,_initListeners: function() {
		com_jpmata_views_BaseView.prototype._initListeners.call(this);
		if(this._satellite != null) this._satellite.subscribe(this,"boardEvt_nextPlayer",$bind(this,this._handlerBoard_nextPlayer));
	}
	,_initProps: function(p_params) {
		com_jpmata_views_BaseView.prototype._initProps.call(this,p_params);
		this._gameManager = nick_hol_nn_manager_GameManager.get_instance();
	}
	,_killGraphics: function() {
		if(this._bmBg != null) {
			motion_Actuate.stop(this._bmBg,null,false,false);
			if(this._bmBg.parent != null) this._bmBg.parent.removeChild(this._bmBg);
			this._bmBg.bitmapData = null;
		}
		this._bmBg = null;
		if(this._hudTokenRanks != null) {
			var _g1 = 0;
			var _g = this._hudTokenRanks.length;
			while(_g1 < _g) {
				var i = _g1++;
				var hudTokenRank = this._hudTokenRanks[i];
				if(hudTokenRank == null) continue;
				motion_Actuate.stop(hudTokenRank,null,false,false);
				if(hudTokenRank.parent != null) hudTokenRank.parent.removeChild(hudTokenRank);
				hudTokenRank.destroy();
				this._hudTokenRanks[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._hudTokenRanks);
		}
		this._hudTokenRanks = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) this._satellite.unsubscribe(this,"boardEvt_nextPlayer",$bind(this,this._handlerBoard_nextPlayer));
		com_jpmata_views_BaseView.prototype._killListeners.call(this);
	}
	,_killProps: function() {
		this._gameManager = null;
		com_jpmata_views_BaseView.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_game_RankHUD
});
var nick_hol_nn_game_TokenRankHUD = function(p_tokenID) {
	com_jpmata_views_BaseView.call(this,[p_tokenID]);
};
$hxClasses["nick.hol.nn.game.TokenRankHUD"] = nick_hol_nn_game_TokenRankHUD;
nick_hol_nn_game_TokenRankHUD.__name__ = ["nick","hol","nn","game","TokenRankHUD"];
nick_hol_nn_game_TokenRankHUD.__super__ = com_jpmata_views_BaseView;
nick_hol_nn_game_TokenRankHUD.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	get_data: function() {
		var result = null;
		if(this._gameManager != null) {
			if(this._tokenID != null) result = this._gameManager.getToken(this._tokenID);
		}
		return result;
	}
	,get_iconWidth: function() {
		return this._iconWidth;
	}
	,setActiveToken: function(p_value) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._gameManager == null) return;
		if(this.get_data() == null) return;
		if(this._bmIcon == null) return;
		if(this._isActiveToken == p_value) return;
		this._isActiveToken = p_value;
		motion_Actuate.stop(this._bmIcon,null,false,false);
		if(this._isActiveToken) {
			motion_Actuate.tween(this._bmIcon,0.5,{ x : -(this._iconWidth * 0.1), y : -(this._iconHeight * 0.1), scaleX : 1.2, scaleY : 1.2}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(this._bmCont,0.5,{ x : -(this._iconWidth * 0.1), y : -(this._iconHeight * 0.1), scaleX : 1.2, scaleY : 1.2}).ease(motion_easing_Linear.get_easeNone());
		} else {
			motion_Actuate.tween(this._bmIcon,0.5,{ x : 0, y : 0, scaleX : 1, scaleY : 1}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(this._bmCont,0.5,{ x : 0, y : 0, scaleX : 1, scaleY : 1}).ease(motion_easing_Linear.get_easeNone());
		}
	}
	,animateRank: function() {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._gameManager == null) return;
		if(this.get_data() == null) return;
		if(this._bmIcon == null) return;
		if(this._bmRank == null) return;
		if(this._prevRank == this.get_data().rank) return;
		this._prevRank = this.get_data().rank;
		motion_Actuate.stop(this._bmRank,null,false,false);
		var bd = ie_lib_utils_assets_AssetsUtility.getBitmapData(StringTools.replace("media/images/embed/localized/game/ingame_rank%i%.png","%i%",Std.string(this.get_data().rank)));
		ie_lib_utils_actuate_ActuateUtility.popOutObjects([this._bmRank],0.3,0,motion_easing_Bounce.get_easeIn(),function() {
			_g._bmRank.set_scaleX(_g._bmRank.set_scaleY(1));
			_g._bmRank.bitmapData = null;
			_g._bmRank.bitmapData = bd;
			_g._bmRank.set_x(_g._iconWidth * 0.5 - _g._bmRank.get_width() * 0.5);
			_g._bmRank.set_y(_g._iconHeight - _g._bmRank.get_height() + 10);
			_g._bmRank.set_visible(false);
			motion_Actuate.tween(_g._bmRank,0.1,{ x : _g._bmRank.get_x()}).onComplete(function() {
				_g._bmRank.set_visible(true);
				ie_lib_utils_actuate_ActuateUtility.popInObjects([_g._bmRank],0.3,0,motion_easing_Bounce.get_easeOut());
			});
		});
	}
	,_initGraphics: function() {
		com_jpmata_views_BaseView.prototype._initGraphics.call(this);
		this.mouseEnabled = false;
		this.mouseChildren = false;
		var url = null;
		if(this._bmCont == null) {
			url = "media/images/embed/game/rank/ctn_rank_generic.png";
			this._bmCont = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(url));
			this._bmCont.smoothing = true;
			this._iconWidth = this._bmCont.get_width();
			this._iconHeight = this._bmCont.get_height();
			this.addChild(this._bmCont);
		}
		if(this._bmIcon == null) {
			url = StringTools.replace("media/images/embed/game/rank/rank_char_%i%.png","%i%",Std.string(this.get_data().type));
			this._bmIcon = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(url));
			this._bmIcon.smoothing = true;
			this.addChild(this._bmIcon);
		}
		if(this._bmRank == null) {
			url = StringTools.replace("media/images/embed/localized/game/ingame_rank%i%.png","%i%",Std.string(this.get_data().rank));
			this._bmRank = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(url));
			this._bmRank.smoothing = true;
			this._bmRank.set_x(this._bmIcon.get_x() + this._bmIcon.get_width() * 0.5 - this._bmRank.get_width() * 0.5);
			this._bmRank.set_y(this._bmIcon.get_y() + this._bmIcon.get_height() - this._bmRank.get_height() + 10);
			this.addChild(this._bmRank);
		}
	}
	,_initProps: function(p_params) {
		com_jpmata_views_BaseView.prototype._initProps.call(this,p_params);
		this._gameManager = nick_hol_nn_manager_GameManager.get_instance();
		this._iconHeight = null;
		this._iconWidth = null;
		this._isActiveToken = false;
		this._prevRank = 0;
		this._tokenID = 0;
		if(p_params != null) {
			if(p_params.length > 0) {
				if(p_params[0] != null) {
					this._tokenID = p_params[0];
					this._prevRank = this.get_data().rank;
				}
			}
		}
	}
	,_killGraphics: function() {
		if(this._bmCont != null) {
			motion_Actuate.stop(this._bmCont,null,false,false);
			if(this._bmCont.parent != null) this._bmCont.parent.removeChild(this._bmCont);
			this._bmCont.bitmapData = null;
		}
		this._bmCont = null;
		if(this._bmIcon != null) {
			motion_Actuate.stop(this._bmIcon,null,false,false);
			if(this._bmIcon.parent != null) this._bmIcon.parent.removeChild(this._bmIcon);
			this._bmIcon.bitmapData = null;
		}
		this._bmIcon = null;
		if(this._bmRank != null) {
			motion_Actuate.stop(this._bmRank,null,false,false);
			if(this._bmRank.parent != null) this._bmRank.parent.removeChild(this._bmRank);
			this._bmRank.bitmapData = null;
		}
		this._bmRank = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,_killProps: function() {
		this._gameManager = null;
		this._iconHeight = null;
		this._iconWidth = null;
		this._isActiveToken = null;
		this._prevRank = null;
		this._tokenID = null;
		com_jpmata_views_BaseView.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_game_TokenRankHUD
	,__properties__: $extend(com_jpmata_views_BaseView.prototype.__properties__,{get_iconWidth:"get_iconWidth",get_data:"get_data"})
});
var nick_hol_nn_game_SpinnerState = $hxClasses["nick.hol.nn.game.SpinnerState"] = { __ename__ : ["nick","hol","nn","game","SpinnerState"], __constructs__ : ["START","SPIN","END"] };
nick_hol_nn_game_SpinnerState.START = ["START",0];
nick_hol_nn_game_SpinnerState.START.toString = $estr;
nick_hol_nn_game_SpinnerState.START.__enum__ = nick_hol_nn_game_SpinnerState;
nick_hol_nn_game_SpinnerState.SPIN = ["SPIN",1];
nick_hol_nn_game_SpinnerState.SPIN.toString = $estr;
nick_hol_nn_game_SpinnerState.SPIN.__enum__ = nick_hol_nn_game_SpinnerState;
nick_hol_nn_game_SpinnerState.END = ["END",2];
nick_hol_nn_game_SpinnerState.END.toString = $estr;
nick_hol_nn_game_SpinnerState.END.__enum__ = nick_hol_nn_game_SpinnerState;
var nick_hol_nn_game_SpinnerObject = function(p_tokenID) {
	nick_hol_nn_game_GameObject.call(this,[p_tokenID]);
};
$hxClasses["nick.hol.nn.game.SpinnerObject"] = nick_hol_nn_game_SpinnerObject;
nick_hol_nn_game_SpinnerObject.__name__ = ["nick","hol","nn","game","SpinnerObject"];
nick_hol_nn_game_SpinnerObject.__super__ = nick_hol_nn_game_GameObject;
nick_hol_nn_game_SpinnerObject.prototype = $extend(nick_hol_nn_game_GameObject.prototype,{
	get_state: function() {
		return this._state;
	}
	,get_tokenID: function() {
		return this._tokenID;
	}
	,get_data: function() {
		if(this._gameManager != null) return this._gameManager.getToken(this._tokenID); else return null;
	}
	,start: function() {
		nick_hol_nn_game_GameObject.prototype.start.call(this);
		if(!this._isActive) return;
		if(!this._isRunning) return;
		this._setState(nick_hol_nn_game_SpinnerState.START);
		if(this.get_data() == null) return;
		if(this.get_data().mode == nick_hol_nn_manager_TokenMode.AI) this._startSpin();
	}
	,_handler_touchBegin: function(evt) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._state != nick_hol_nn_game_SpinnerState.START) return;
		if(this._gameManager == null) return;
		if(this.get_data() == null) return;
		if(this.get_data().mode == nick_hol_nn_manager_TokenMode.AI) return;
		if(this._shpTouch == null) return;
		var globalPos = null;
		if(ie_lib_utils_device_BrowserInfoUtility.get_isDesktop()) globalPos = new openfl_geom_Point((js_Boot.__cast(evt , openfl_events_MouseEvent)).stageX,(js_Boot.__cast(evt , openfl_events_MouseEvent)).stageY);
		if(ie_lib_utils_device_BrowserInfoUtility.get_isMobile()) globalPos = new openfl_geom_Point((js_Boot.__cast(evt , openfl_events_TouchEvent)).stageX,(js_Boot.__cast(evt , openfl_events_TouchEvent)).stageY);
		if(globalPos == null) return;
		var localPos = this._shpTouch.globalToLocal(globalPos);
		if(localPos == null) return;
		var centerPos = new openfl_geom_Point(0,0);
		if(!ie_lib_utils_math_MathUtility.isPointInCircle(localPos,centerPos,244.5)) return;
		this._startSpin();
	}
	,_initGraphics: function() {
		nick_hol_nn_game_GameObject.prototype._initGraphics.call(this);
		this.mouseEnabled = true;
		this.mouseChildren = true;
		if(this._sprSpinner == null) {
			this._sprSpinner = new openfl_display_Sprite();
			this.addChild(this._sprSpinner);
		}
		if(this._objSlices == null) {
			this._objSlices = [];
			var otherTokenIDs = this._gameManager.getOtherTokenIds(this._tokenID);
			var _g1 = 0;
			var _g = this._gameManager.get_spinnerSlices().length;
			while(_g1 < _g) {
				var i = _g1++;
				var objSlice = new nick_hol_nn_game_SpinnerSliceObject(i + 1,this._tokenID);
				objSlice.set_rotation(30 * i);
				this._sprSpinner.addChild(objSlice);
				this._objSlices.push(objSlice);
			}
		}
		if(this._bmOutline == null) {
			this._bmOutline = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/spinner/spinner_slices.png"));
			this._bmOutline.smoothing = true;
			this._bmOutline.set_x(-(this._bmOutline.get_width() * 0.5));
			this._bmOutline.set_y(-(this._bmOutline.get_height() * 0.5));
			this._sprSpinner.addChild(this._bmOutline);
		}
		if(this._bmBorder == null) {
			this._bmBorder = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/spinner/spinner_back.png"));
			this._bmBorder.smoothing = true;
			this._bmBorder.set_x(-(this._bmBorder.get_width() * 0.5));
			this._bmBorder.set_y(-(this._bmBorder.get_height() * 0.5));
			this._sprSpinner.set_x(this._bmBorder.get_width() * 0.5);
			this._sprSpinner.set_y(this._bmBorder.get_height() * 0.5);
			this._sprSpinner.addChild(this._bmBorder);
		}
		if(this._bmTop == null) {
			this._bmTop = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/spinner/spinner_top.png"));
			this._bmTop.smoothing = true;
			this._bmTop.set_x(this._sprSpinner.get_x() - this._bmTop.get_width() * 0.5);
			this._bmTop.set_y(this._sprSpinner.get_y() - this._bmTop.get_height() * 0.5);
			this.addChild(this._bmTop);
		}
		if(this.get_data().mode == nick_hol_nn_manager_TokenMode.PLAYER) {
			if(this._bmGlow == null) {
				this._bmGlow = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/spinner/spinner_bulb_glow.png"));
				this._bmGlow.smoothing = true;
				this._bmGlow.set_x(this._bmTop.get_x());
				this._bmGlow.set_y(this._bmTop.get_y());
				this.addChild(this._bmGlow);
				if(this.get_data().mode == nick_hol_nn_manager_TokenMode.AI) this._bmGlow.set_visible(false); else if(this.get_data().mode == nick_hol_nn_manager_TokenMode.PLAYER) {
					this._bmGlow.set_visible(true);
					this._bmGlow.set_alpha(0);
					motion_Actuate.tween(this._bmGlow,0.25,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).repeat().reflect();
				}
			}
			if(this._txtSpin == null) {
				this._txtSpin = new com_jpmata_views_text_BasicTextField(168,168);
				var str = null;
				if(ie_lib_utils_device_BrowserInfoUtility.get_isDesktop()) str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSpinner_desktop"); else str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSpinner_mobile");
				this._txtSpin.setString(str);
				this._txtSpin.setColor(16777215);
				this._txtSpin.set_x(this._bmTop.get_x() + 165 + str.OFFSET_X);
				this._txtSpin.set_y(this._bmTop.get_y() + 165 + str.OFFSET_Y);
				this.addChild(this._txtSpin);
			}
			if(this._sprTouch == null) {
				this._sprTouch = new openfl_display_Sprite();
				this._sprTouch.buttonMode = true;
				this._sprTouch.useHandCursor = true;
				this._sprTouch.set_alpha(0);
				if(ie_lib_utils_device_BrowserInfoUtility.get_isDesktop()) this._sprTouch.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._handler_touchBegin)); else if(ie_lib_utils_device_BrowserInfoUtility.get_isMobile()) this._sprTouch.addEventListener("touchBegin",$bind(this,this._handler_touchBegin));
				this.addChild(this._sprTouch);
			}
			if(this._shpTouch == null) {
				this._shpTouch = new openfl_display_Shape();
				this._shpTouch.get_graphics().lineStyle(1,16711680,1);
				this._shpTouch.get_graphics().beginFill(16711680,1);
				this._shpTouch.get_graphics().drawCircle(0,0,244.5);
				this._shpTouch.get_graphics().endFill();
				this._shpTouch.set_x(this._bmTop.get_x() + this._bmTop.get_width() * 0.5);
				this._shpTouch.set_y(this._bmTop.get_y() + this._bmTop.get_height() * 0.5);
				this._sprTouch.addChild(this._shpTouch);
			}
		}
		if(this._bmPointer == null) {
			this._bmPointer = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/spinner/spinner_pointer.png"));
			this._bmPointer.smoothing = true;
			this._bmPointer.set_x(this._sprSpinner.get_x() - this._bmPointer.get_width() * 0.5);
			this._bmPointer.set_y(this._sprSpinner.get_y() - this._bmTop.get_height() * 0.5 - this._bmPointer.get_height() * 0.5 + 25);
			this.addChild(this._bmPointer);
		}
	}
	,_initListeners: function() {
		nick_hol_nn_game_GameObject.prototype._initListeners.call(this);
		if(this._satellite != null) {
			this.addEventListener("spinnerEvt_select",($_=this._satellite,$bind($_,$_.handler)));
			this.addEventListener("spinnerEvt_updState",($_=this._satellite,$bind($_,$_.handler)));
		}
	}
	,_initProps: function(p_params) {
		nick_hol_nn_game_GameObject.prototype._initProps.call(this,p_params);
		this._state = null;
		this._type = null;
		this._countSpin = 0;
		this._countSpinPos = 0;
		this._countSpinNeg = 0;
		this._currentSlice = null;
		this._isSpinnerLoop = false;
		this._tokenID = 0;
		this._rotation = 0;
		this._sfxSpin = null;
		this._voSpin = null;
		if(p_params != null) {
			if(p_params.length > 0) {
				if(p_params[0] != null) this._tokenID = p_params[0];
			}
		}
	}
	,_killGraphics: function() {
		if(this._bmBorder != null) {
			motion_Actuate.stop(this._bmBorder,null,false,false);
			if(this._bmBorder.parent != null) this._bmBorder.parent.removeChild(this._bmBorder);
			this._bmBorder.bitmapData = null;
		}
		this._bmBorder = null;
		if(this._bmOutline != null) {
			motion_Actuate.stop(this._bmOutline,null,false,false);
			if(this._bmOutline.parent != null) this._bmOutline.parent.removeChild(this._bmOutline);
			this._bmOutline.bitmapData = null;
		}
		this._bmOutline = null;
		if(this._bmTop != null) {
			motion_Actuate.stop(this._bmTop,null,false,false);
			if(this._bmTop.parent != null) this._bmTop.parent.removeChild(this._bmTop);
			this._bmTop.bitmapData = null;
		}
		this._bmTop = null;
		if(this._bmGlow != null) {
			motion_Actuate.stop(this._bmGlow,null,false,false);
			if(this._bmGlow.parent != null) this._bmGlow.parent.removeChild(this._bmGlow);
			this._bmGlow.bitmapData = null;
		}
		this._bmGlow = null;
		if(this._shpTouch != null) {
			motion_Actuate.stop(this._shpTouch,null,false,false);
			if(this._shpTouch.parent != null) this._shpTouch.parent.removeChild(this._shpTouch);
			this._shpTouch.get_graphics().clear();
		}
		this._shpTouch = null;
		if(this._bmPointer != null) {
			motion_Actuate.stop(this._bmPointer,null,false,false);
			if(this._bmPointer.parent != null) this._bmPointer.parent.removeChild(this._bmPointer);
			this._bmPointer.bitmapData = null;
		}
		this._bmPointer = null;
		if(this._txtSpin != null) {
			motion_Actuate.stop(this._txtSpin,null,false,false);
			if(this._txtSpin.parent != null) this._txtSpin.parent.removeChild(this._txtSpin);
			this._txtSpin.destroy();
		}
		this._txtSpin = null;
		if(this._objSlices != null) {
			var _g1 = 0;
			var _g = this._objSlices.length;
			while(_g1 < _g) {
				var i = _g1++;
				var objSlice = this._objSlices[i];
				if(objSlice == null) continue;
				motion_Actuate.stop(objSlice,null,false,false);
				if(objSlice.parent != null) objSlice.parent.removeChild(objSlice);
				objSlice.destroy();
				this._objSlices[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._objSlices);
		}
		this._objSlices = null;
		if(this._sprTouch != null) {
			if(ie_lib_utils_device_BrowserInfoUtility.get_isDesktop()) this._sprTouch.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._handler_touchBegin)); else if(ie_lib_utils_device_BrowserInfoUtility.get_isMobile()) this._sprTouch.removeEventListener("touchBegin",$bind(this,this._handler_touchBegin));
			motion_Actuate.stop(this._sprTouch,null,false,false);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._sprTouch);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._sprTouch);
			this._sprTouch.removeChildren();
		}
		this._sprTouch = null;
		if(this._sprSpinner == null) {
			motion_Actuate.stop(this._sprSpinner,null,false,false);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._sprSpinner);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._sprSpinner);
			this._sprSpinner.removeChildren();
		}
		this._sprSpinner = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		nick_hol_nn_game_GameObject.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) {
			this.removeEventListener("spinnerEvt_select",($_=this._satellite,$bind($_,$_.handler)));
			this.removeEventListener("spinnerEvt_updState",($_=this._satellite,$bind($_,$_.handler)));
		}
		nick_hol_nn_game_GameObject.prototype._killListeners.call(this);
	}
	,_killProps: function() {
		this._countSpin = null;
		this._countSpinPos = null;
		this._countSpinNeg = null;
		this._currentSlice = null;
		this._isSpinnerLoop = null;
		this._tokenID = null;
		this._rotation = null;
		if(this._sfxSpin != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxSpin,true);
		this._sfxSpin = null;
		if(this._voSpin != null) com_jpmata_managers_SoundManager.get_instance().stopVO(this._voSpin,true);
		this._voSpin = null;
		nick_hol_nn_game_GameObject.prototype._killProps.call(this);
	}
	,_pause: function() {
		nick_hol_nn_game_GameObject.prototype._pause.call(this);
		if(this._sfxSpin != null && this._isSpinnerLoop) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxSpin,true);
	}
	,_resume: function() {
		nick_hol_nn_game_GameObject.prototype._resume.call(this);
		if(this._sfxSpin != null && this._isSpinnerLoop) this._sfxSpin = com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/wheel_spin_loop.mp3",true,null,false);
	}
	,_setState: function(p_state) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._state == p_state) return;
		this._state = p_state;
		this.dispatchEvent(new nick_hol_nn_game_SpinnerEvent("spinnerEvt_updState"));
	}
	,_isConsecutiveSpin_negative: function(p_type) {
		var currentType = null;
		if(this._currentSlice != null) {
			if(this._currentSlice.get_data() != null) currentType = this._currentSlice.get_data().type;
		}
		return (currentType == 7 || currentType == 8 || currentType == 10) && (p_type == 7 || p_type == 8 || p_type == 10);
	}
	,_startSpin: function() {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._sprSpinner == null) return;
		if(this._rotation == null) return;
		if(this.get_data() == null) return;
		if(this._objSlices == null) return;
		this._countSpin += 1;
		this._setState(nick_hol_nn_game_SpinnerState.SPIN);
		var randRotation = null;
		var tempSlice = null;
		var isSpecialAllowed = this._countSpin >= 3 || this._gameManager.get_cheatMode();
		var isSpecialNegAllowed = this.get_data().currentTileID > 1 && this._countSpinNeg < 1 || this._gameManager.get_cheatMode();
		var currentType = null;
		if(this._currentSlice != null) {
			if(this._currentSlice.get_data() != null) currentType = this._currentSlice.get_data().type;
		}
		var sliceType = null;
		do {
			randRotation = (ie_lib_utils_math_MathUtility.randomizeInt(1,this._objSlices.length) - 1) * 30;
			tempSlice = this._getObjSlice_byRotation(randRotation);
			if(tempSlice.get_data() != null) sliceType = tempSlice.get_data().type; else sliceType = null;
			null;
		} while(currentType == sliceType || this._isConsecutiveSpin_negative(sliceType) || !isSpecialNegAllowed && sliceType == 7 || !isSpecialNegAllowed && sliceType == 8 || !isSpecialNegAllowed && sliceType == 10 || !isSpecialAllowed && sliceType == 7 || !isSpecialAllowed && sliceType == 8 || !isSpecialAllowed && sliceType == 10 || !isSpecialAllowed && sliceType == 9 || !isSpecialAllowed && sliceType == 11 || !isSpecialAllowed && sliceType == 12);
		this._currentSlice = tempSlice;
		if(this._currentSlice.get_data().type == 7 || this._currentSlice.get_data().type == 8 || this._currentSlice.get_data().type == 10) this._countSpinNeg += 1; else if(this._currentSlice.get_data().type == 9 || this._currentSlice.get_data().type == 11 || this._currentSlice.get_data().type == 12) this._countSpinPos += 1;
		var durationLoop = 1 + 2. / this._objSlices.length * (randRotation / 30 | 0) - 1.753;
		if(this._sfxSpin != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxSpin,true);
		this._isSpinnerLoop = false;
		this._sfxSpin = com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/wheel_spin_start.mp3",false,function() {
			_g._isSpinnerLoop = true;
			_g._sfxSpin = com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/wheel_spin_loop.mp3",true,null,false);
			motion_Actuate.tween(_g,durationLoop,{ x : _g.get_x()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				if(_g._sfxSpin != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(_g._sfxSpin,true);
				_g._isSpinnerLoop = false;
				_g._sfxSpin = com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/wheel_slow_down.mp3",false,null,false);
			});
		},false);
		motion_Actuate.stop(this._sprSpinner,null,false,false);
		motion_Actuate.tween(this._sprSpinner,1,{ rotation : this._sprSpinner.get_rotation() + (1080. - this._rotation)}).ease(motion_easing_Linear.get_easeNone()).smartRotation(false).onComplete(function() {
			_g._rotation = randRotation;
			if(_g._rotation > 0) {
				var duration = 2. / _g._objSlices.length * (_g._rotation / 30 | 0);
				motion_Actuate.tween(_g._sprSpinner,duration + 0.5,{ rotation : _g._sprSpinner.get_rotation() + _g._rotation}).ease(motion_easing_Quad.get_easeOut()).smartRotation(false).onComplete(function() {
					_g._endSpin();
				});
			} else _g._endSpin();
		});
	}
	,_endSpin: function() {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._currentSlice == null) return;
		if(this._state != nick_hol_nn_game_SpinnerState.SPIN) return;
		if(this._sfxSpin != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxSpin,true);
		this._sfxSpin = null;
		this._setState(nick_hol_nn_game_SpinnerState.END);
		if(this._currentSlice.get_data() != null) {
			var urlVO = null;
			if(this._currentSlice.get_data().type == 7 || this._currentSlice.get_data().type == 8 || this._currentSlice.get_data().type == 10) {
				if(this.get_data() != null) urlVO = StringTools.replace("media/audio/embed/vo/game/char_spin_neg_%i%.mp3","%i%",Std.string(this.get_data().type));
			} else if(this._currentSlice.get_data().type == 9 || this._currentSlice.get_data().type == 11 || this._currentSlice.get_data().type == 12) {
				if(this.get_data() != null) urlVO = StringTools.replace("media/audio/embed/vo/game/char_spin_pos_%i%.mp3","%i%",Std.string(this.get_data().type));
			}
			if(urlVO != null) {
				if(this._voSpin != null) com_jpmata_managers_SoundManager.get_instance().stopVO(this._voSpin,true);
				this._voSpin = com_jpmata_managers_SoundManager.get_instance().playVO(urlVO,function() {
					_g._voSpin = null;
				},false);
			}
		}
		motion_Actuate.stop(this._sprSpinner,null,false,false);
		motion_Actuate.tween(this._sprSpinner,1,{ y : this._sprSpinner.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_g.set_visible(false);
			_g.dispatchEvent(new nick_hol_nn_game_SpinnerEvent("spinnerEvt_select",{ objSlice : _g._currentSlice}));
		});
	}
	,_getObjSlice_byRotation: function(p_rotation) {
		var result = this._objSlices[(360 - p_rotation) % 360 / 30 | 0];
		return result;
	}
	,__class__: nick_hol_nn_game_SpinnerObject
	,__properties__: $extend(nick_hol_nn_game_GameObject.prototype.__properties__,{get_data:"get_data",get_tokenID:"get_tokenID"})
});
var nick_hol_nn_game_SpinnerSliceObject = function(p_id,p_tokenID) {
	nick_hol_nn_game_GameObject.call(this,[p_id,p_tokenID]);
};
$hxClasses["nick.hol.nn.game.SpinnerSliceObject"] = nick_hol_nn_game_SpinnerSliceObject;
nick_hol_nn_game_SpinnerSliceObject.__name__ = ["nick","hol","nn","game","SpinnerSliceObject"];
nick_hol_nn_game_SpinnerSliceObject.__super__ = nick_hol_nn_game_GameObject;
nick_hol_nn_game_SpinnerSliceObject.prototype = $extend(nick_hol_nn_game_GameObject.prototype,{
	get_data: function() {
		return this._data;
	}
	,_initGraphics: function() {
		nick_hol_nn_game_GameObject.prototype._initGraphics.call(this);
		if(this._bm == null) {
			var url = StringTools.replace("media/images/embed/game/spinner/spinner_%i%.png","%i%",Std.string(this._data.type));
			this._bm = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(url));
			this._bm.smoothing = true;
			this._bm.set_x(-(this._bm.get_width() * 0.5));
			this._bm.set_y(-this._bm.get_height());
			this.addChild(this._bm);
		}
	}
	,_initProps: function(p_params) {
		nick_hol_nn_game_GameObject.prototype._initProps.call(this,p_params);
		this._state = null;
		this._type = null;
		this._data = null;
		this._tokenID = null;
		if(p_params != null) {
			if(p_params.length > 0) {
				if(p_params[0] != null) this._data = this._gameManager.getSpinnerSlice(p_params[0],true);
				if(p_params[1] != null) this._tokenID = p_params[1];
			}
		}
	}
	,_killGraphics: function() {
		if(this._bm != null) {
			motion_Actuate.stop(this._bm,null,false,false);
			if(this._bm.parent != null) this._bm.parent.removeChild(this._bm);
			this._bm.bitmapData = null;
		}
		this._bm = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		nick_hol_nn_game_GameObject.prototype._killGraphics.call(this);
	}
	,_killProps: function() {
		if(this._data != null) {
			this.get_data().id = null;
			this.get_data().type = null;
		}
		this._data = null;
		this._enabled = null;
		this._tokenID = null;
		nick_hol_nn_game_GameObject.prototype._killProps.call(this);
	}
	,_pause: function() {
		nick_hol_nn_game_GameObject.prototype._pause.call(this);
	}
	,_resume: function() {
		nick_hol_nn_game_GameObject.prototype._resume.call(this);
	}
	,__class__: nick_hol_nn_game_SpinnerSliceObject
	,__properties__: $extend(nick_hol_nn_game_GameObject.prototype.__properties__,{get_data:"get_data"})
});
var nick_hol_nn_game_SpinnerEvent = function(p_type,p_data,p_bubbles,p_cancelable) {
	if(p_cancelable == null) p_cancelable = false;
	if(p_bubbles == null) p_bubbles = false;
	ie_lib_events_BaseEvent.call(this,p_type,p_data,p_bubbles,p_cancelable);
};
$hxClasses["nick.hol.nn.game.SpinnerEvent"] = nick_hol_nn_game_SpinnerEvent;
nick_hol_nn_game_SpinnerEvent.__name__ = ["nick","hol","nn","game","SpinnerEvent"];
nick_hol_nn_game_SpinnerEvent.__super__ = ie_lib_events_BaseEvent;
nick_hol_nn_game_SpinnerEvent.prototype = $extend(ie_lib_events_BaseEvent.prototype,{
	__class__: nick_hol_nn_game_SpinnerEvent
});
var nick_hol_nn_game_TokenState = $hxClasses["nick.hol.nn.game.TokenState"] = { __ename__ : ["nick","hol","nn","game","TokenState"], __constructs__ : ["START","BUSY","END","COMPLETE"] };
nick_hol_nn_game_TokenState.START = ["START",0];
nick_hol_nn_game_TokenState.START.toString = $estr;
nick_hol_nn_game_TokenState.START.__enum__ = nick_hol_nn_game_TokenState;
nick_hol_nn_game_TokenState.BUSY = ["BUSY",1];
nick_hol_nn_game_TokenState.BUSY.toString = $estr;
nick_hol_nn_game_TokenState.BUSY.__enum__ = nick_hol_nn_game_TokenState;
nick_hol_nn_game_TokenState.END = ["END",2];
nick_hol_nn_game_TokenState.END.toString = $estr;
nick_hol_nn_game_TokenState.END.__enum__ = nick_hol_nn_game_TokenState;
nick_hol_nn_game_TokenState.COMPLETE = ["COMPLETE",3];
nick_hol_nn_game_TokenState.COMPLETE.toString = $estr;
nick_hol_nn_game_TokenState.COMPLETE.__enum__ = nick_hol_nn_game_TokenState;
var nick_hol_nn_game_TokenObject = function(p_id) {
	nick_hol_nn_game_GameObject.call(this,[p_id]);
};
$hxClasses["nick.hol.nn.game.TokenObject"] = nick_hol_nn_game_TokenObject;
nick_hol_nn_game_TokenObject.__name__ = ["nick","hol","nn","game","TokenObject"];
nick_hol_nn_game_TokenObject.__super__ = nick_hol_nn_game_GameObject;
nick_hol_nn_game_TokenObject.prototype = $extend(nick_hol_nn_game_GameObject.prototype,{
	set_x: function(p_value) {
		if(this._prevPosition != null) this._prevPosition.x = this.get_x();
		var result = nick_hol_nn_game_GameObject.prototype.set_x.call(this,p_value);
		return result;
	}
	,set_y: function(p_value) {
		if(this._prevPosition != null) this._prevPosition.y = this.get_y();
		var result = nick_hol_nn_game_GameObject.prototype.set_y.call(this,p_value);
		return result;
	}
	,get_state: function() {
		return this._state;
	}
	,get_data: function() {
		if(this._gameManager != null) return this._gameManager.getToken(this._id); else return null;
	}
	,get_isFrozen: function() {
		return this._isFrozen;
	}
	,get_spinsAgain: function() {
		return this._spinsAgain;
	}
	,set_spinsAgain: function(p_value) {
		this._spinsAgain = p_value;
		return this._spinsAgain;
	}
	,get_isAdjusting: function() {
		return this._isAdjusting;
	}
	,set_isAdjusting: function(p_value) {
		this._isAdjusting = p_value;
		return this._isAdjusting;
	}
	,get_prevPosition: function() {
		return this._prevPosition;
	}
	,get_bmToken: function() {
		return this._bmToken;
	}
	,get_sprToken: function() {
		return this._sprToken;
	}
	,start: function() {
		nick_hol_nn_game_GameObject.prototype.start.call(this);
		if(!this._isActive) return;
		if(!this._isRunning) return;
		this.setState(nick_hol_nn_game_TokenState.START);
	}
	,update: function(p_delta) {
	}
	,setState: function(p_state) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._state == p_state) return;
		this._state = p_state;
		this.dispatchEvent(new nick_hol_nn_game_TokenEvent("tokenEvt_updState"));
	}
	,setPointerVisibility: function(p_value) {
		if(this._bmArrow != null) this._bmArrow.set_visible(p_value);
		if(this._bmText != null) this._bmText.set_visible(p_value);
	}
	,drop: function(p_callback) {
		if(this._bmToken == null) return;
		var posY = -this._bmToken.get_height() + 25;
		motion_Actuate.tween(this._bmToken,0.6,{ y : posY}).ease(motion_easing_Bounce.get_easeIn()).onComplete(function() {
			com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/patrick_drop_token.mp3",false,null,false);
			if(p_callback != null) p_callback();
		});
	}
	,freeze: function(p_callback) {
		if(this._mcIce == null) return;
		if(this._isFrozen) return;
		this._isFrozen = true;
		this._callbackFreeze = p_callback;
		if(!this._mcIce.get_visible()) {
			this._mcIce.stop();
			this._mcIce.reset();
			this._mcIce.set_visible(true);
		}
		this._mcIce.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_ice_freezing.json");
		this._mcIce.stop();
		this._mcIce.reset();
		com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/ice_freeze.mp3",false,null,false);
		this._mcIce.play(false);
	}
	,pickup: function(p_callback) {
		var _g = this;
		if(this._bmToken == null) return;
		var posY = -100 - this._bmToken.get_height() + 25;
		com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/patrick_pick_token.mp3",false,null,false);
		motion_Actuate.tween(this._bmToken,0.2,{ x : this._bmToken.get_x()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			motion_Actuate.tween(_g._bmToken,0.4,{ y : posY}).ease(motion_easing_Elastic.get_easeIn()).onComplete(function() {
				if(p_callback != null) p_callback();
			});
		});
	}
	,unfreeze: function(p_callback) {
		if(this._mcIce == null) return;
		if(!this._isFrozen) return;
		this._isFrozen = false;
		this._callbackUnfreeze = p_callback;
		if(!this._mcIce.get_visible()) {
			this._mcIce.stop();
			this._mcIce.reset();
			this._mcIce.set_visible(true);
		}
		this._mcIce.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_ice_break.json");
		this._mcIce.stop();
		this._mcIce.reset();
		com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/ice_break.mp3",false,null,false);
		this._mcIce.play(false);
	}
	,_handler_mcIceComplete: function(evt) {
		if(this._mcIce == null) return;
		var callback = null;
		if(this._isFrozen) {
			callback = this._callbackFreeze;
			this._callbackFreeze = null;
		} else if(!this._isFrozen) {
			callback = this._callbackUnfreeze;
			this._callbackUnfreeze = null;
			this._mcIce.set_visible(false);
		}
		if(callback != null) callback();
	}
	,_initGraphics: function() {
		nick_hol_nn_game_GameObject.prototype._initGraphics.call(this);
		if(this._sprToken == null) {
			this._sprToken = new openfl_display_Sprite();
			this.addChild(this._sprToken);
		}
		if(this._bmToken == null) {
			var url = "media/images/embed/game/token/token_%i%.png";
			url = StringTools.replace(url,"%i%",Std.string(this.get_data().type));
			this._bmToken = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(url));
			this._bmToken.smoothing = true;
			this._bmToken.set_x(-(this._bmToken.get_width() * 0.5));
			this._bmToken.set_y(-this._bmToken.get_height() + 25);
			this._sprToken.addChild(this._bmToken);
		}
		if(this.get_data().mode == nick_hol_nn_manager_TokenMode.PLAYER) {
			if(this._bmArrow == null) {
				this._bmArrow = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/token/char_pointer_arrow.png"));
				this._bmArrow.smoothing = true;
				this._bmArrow.set_x(this._bmToken.get_x() + this._bmToken.get_width() * 0.5 - this._bmArrow.get_width() * 0.5);
				this._bmArrow.set_y(this._bmToken.get_y() - this._bmArrow.get_height());
				this.addChild(this._bmArrow);
				motion_Actuate.tween(this._bmArrow,0.5,{ y : this._bmArrow.get_y() - 10}).ease(motion_easing_Linear.get_easeNone()).repeat().reflect();
			}
			if(this._bmText == null) {
				this._bmText = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/localized/game/char_pointer_you.png"));
				this._bmText.smoothing = true;
				this._bmText.set_x(this._bmArrow.get_x() + this._bmArrow.get_width() * 0.5 - this._bmText.get_width() * 0.5);
				this._bmText.set_y(this._bmArrow.get_y() - this._bmText.get_height());
				this.addChild(this._bmText);
			}
			if(this._text == null) {
				this._text = new com_jpmata_views_text_BasicTextField(150,50);
				this._text.setString(nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtYou"));
				this._text.setColor(16777215);
				this._text.set_x(this._bmArrow.get_x() + this._bmArrow.get_width() * 0.5 - this._text.get_width() * 0.5);
				this._text.set_y(this._bmArrow.get_y() - this._text.get_height() * 0.84);
				this.addChild(this._text);
			}
		}
		if(this._mcIce == null) {
			this._mcIce = new com_nicollee_hxanimation_HxModMovieClip();
			this._mcIce.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcIceComplete));
			this._mcIce.set_visible(false);
			this._mcIce.setNotifyOnComplete(true);
			this._mcIce.set_x(0);
			this._mcIce.set_y(this._bmToken.get_y() + this._bmToken.get_height());
			this.addChild(this._mcIce);
		}
	}
	,_initListeners: function() {
		nick_hol_nn_game_GameObject.prototype._initListeners.call(this);
		if(this._satellite != null) this.addEventListener("tokenEvt_updState",($_=this._satellite,$bind($_,$_.handler)));
	}
	,_initProps: function(p_params) {
		nick_hol_nn_game_GameObject.prototype._initProps.call(this,p_params);
		this._state = null;
		this._type = null;
		this._id = null;
		this._callbackFreeze = null;
		this._callbackUnfreeze = null;
		this._isFrozen = false;
		this._isAdjusting = false;
		this._spinsAgain = false;
		this._prevPosition = new openfl_geom_Point(0,0);
		if(p_params != null) {
			if(p_params.length > 0) {
				if(p_params[0] != null) this._id = p_params[0];
			}
		}
	}
	,_killGraphics: function() {
		if(this._bmArrow != null) {
			motion_Actuate.stop(this._bmArrow,null,false,false);
			if(this._bmArrow.parent != null) this._bmArrow.parent.removeChild(this._bmArrow);
			this._bmArrow.bitmapData = null;
		}
		this._bmArrow = null;
		if(this._bmText != null) {
			motion_Actuate.stop(this._bmText,null,false,false);
			if(this._bmText.parent != null) this._bmText.parent.removeChild(this._bmText);
			this._bmText.bitmapData = null;
		}
		this._bmText = null;
		if(this._text != null) {
			motion_Actuate.stop(this._text,null,false,false);
			if(this._text.parent != null) this._text.parent.removeChild(this._text);
			this._text.destroy();
			this._text = null;
		}
		if(this._bmToken != null) {
			motion_Actuate.stop(this._bmToken,null,false,false);
			if(this._bmToken.parent != null) this._bmToken.parent.removeChild(this._bmToken);
			this._bmToken.bitmapData = null;
		}
		this._bmToken = null;
		if(this._mcIce != null) {
			motion_Actuate.stop(this._mcIce,null,false,false);
			this._mcIce.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_mcIceComplete));
			this._mcIce.stop();
			this._mcIce.reset();
			if(this._mcIce.parent != null) this._mcIce.parent.removeChild(this._mcIce);
		}
		this._mcIce = null;
		if(this._sprToken != null) {
			motion_Actuate.stop(this._sprToken,null,false,false);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._sprToken);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._sprToken);
			this._sprToken.removeChildren();
		}
		this._sprToken = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		nick_hol_nn_game_GameObject.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) this.removeEventListener("tokenEvt_updState",($_=this._satellite,$bind($_,$_.handler)));
		nick_hol_nn_game_GameObject.prototype._killListeners.call(this);
	}
	,_killProps: function() {
		this._id = null;
		this._callbackFreeze = null;
		this._callbackUnfreeze = null;
		this._isFrozen = null;
		this._isAdjusting = null;
		this._spinsAgain = null;
		if(this._prevPosition != null) this._prevPosition.setTo(0,0);
		this._prevPosition = null;
		nick_hol_nn_game_GameObject.prototype._killProps.call(this);
	}
	,_pause: function() {
		nick_hol_nn_game_GameObject.prototype._pause.call(this);
		if(this._mcIce != null) {
			if(this._mcIce.get_visible()) this._mcIce.stop();
		}
	}
	,_resume: function() {
		nick_hol_nn_game_GameObject.prototype._resume.call(this);
		if(this._mcIce != null) {
			if(this._mcIce.get_visible()) this._mcIce.play();
		}
	}
	,__class__: nick_hol_nn_game_TokenObject
	,__properties__: $extend(nick_hol_nn_game_GameObject.prototype.__properties__,{get_sprToken:"get_sprToken",get_bmToken:"get_bmToken",get_prevPosition:"get_prevPosition",get_isFrozen:"get_isFrozen",get_data:"get_data",set_spinsAgain:"set_spinsAgain",get_spinsAgain:"get_spinsAgain",set_isAdjusting:"set_isAdjusting",get_isAdjusting:"get_isAdjusting"})
});
var nick_hol_nn_game_TokenEvent = function(p_type,p_data,p_bubbles,p_cancelable) {
	if(p_cancelable == null) p_cancelable = false;
	if(p_bubbles == null) p_bubbles = false;
	ie_lib_events_BaseEvent.call(this,p_type,p_data,p_bubbles,p_cancelable);
};
$hxClasses["nick.hol.nn.game.TokenEvent"] = nick_hol_nn_game_TokenEvent;
nick_hol_nn_game_TokenEvent.__name__ = ["nick","hol","nn","game","TokenEvent"];
nick_hol_nn_game_TokenEvent.__super__ = ie_lib_events_BaseEvent;
nick_hol_nn_game_TokenEvent.prototype = $extend(ie_lib_events_BaseEvent.prototype,{
	__class__: nick_hol_nn_game_TokenEvent
});
var nick_hol_nn_manager_Singleton_$GameManager = function() { };
$hxClasses["nick.hol.nn.manager.Singleton_GameManager"] = nick_hol_nn_manager_Singleton_$GameManager;
nick_hol_nn_manager_Singleton_$GameManager.__name__ = ["nick","hol","nn","manager","Singleton_GameManager"];
var nick_hol_nn_manager_TokenMode = $hxClasses["nick.hol.nn.manager.TokenMode"] = { __ename__ : ["nick","hol","nn","manager","TokenMode"], __constructs__ : ["PLAYER","AI"] };
nick_hol_nn_manager_TokenMode.PLAYER = ["PLAYER",0];
nick_hol_nn_manager_TokenMode.PLAYER.toString = $estr;
nick_hol_nn_manager_TokenMode.PLAYER.__enum__ = nick_hol_nn_manager_TokenMode;
nick_hol_nn_manager_TokenMode.AI = ["AI",1];
nick_hol_nn_manager_TokenMode.AI.toString = $estr;
nick_hol_nn_manager_TokenMode.AI.__enum__ = nick_hol_nn_manager_TokenMode;
var nick_hol_nn_manager_GameManager = function(p_class) {
	if(p_class != nick_hol_nn_manager_Singleton_$GameManager) throw new js__$Boot_HaxeError("Invalid instantiation.");
	com_jpmata_managers_BaseManager.call(this);
};
$hxClasses["nick.hol.nn.manager.GameManager"] = nick_hol_nn_manager_GameManager;
nick_hol_nn_manager_GameManager.__name__ = ["nick","hol","nn","manager","GameManager"];
nick_hol_nn_manager_GameManager.__properties__ = {get_instance:"get_instance"}
nick_hol_nn_manager_GameManager._instance = null;
nick_hol_nn_manager_GameManager.get_instance = function() {
	if(nick_hol_nn_manager_GameManager._instance == null) nick_hol_nn_manager_GameManager._instance = new nick_hol_nn_manager_GameManager(nick_hol_nn_manager_Singleton_$GameManager);
	return nick_hol_nn_manager_GameManager._instance;
};
nick_hol_nn_manager_GameManager.__super__ = com_jpmata_managers_BaseManager;
nick_hol_nn_manager_GameManager.prototype = $extend(com_jpmata_managers_BaseManager.prototype,{
	get_boardTiles: function() {
		return this._boardTiles;
	}
	,get_spinnerSlices: function() {
		return this._spinnerSlices;
	}
	,get_cheatMode: function() {
		return this._cheatMode;
	}
	,get_countTokens: function() {
		return this._countTokens;
	}
	,get_currentTokens: function() {
		return this._currentTokens;
	}
	,getBoardTile: function(p_id,p_cloneData) {
		if(p_cloneData == null) p_cloneData = false;
		var result = null;
		if(this._boardTiles != null) {
			var _g = 0;
			var _g1 = this._boardTiles;
			while(_g < _g1.length) {
				var elem = _g1[_g];
				++_g;
				if(elem == null) continue;
				if(elem.id == p_id) {
					if(p_cloneData) result = { id : elem.id, type : elem.type, x : elem.x, y : elem.y, width : elem.width, height : elem.height, shortcut : elem.shortcut}; else result = elem;
					break;
				}
			}
		}
		return result;
	}
	,getBoardTiles: function(p_type,p_cloneData) {
		if(p_cloneData == null) p_cloneData = false;
		var result = null;
		if(this._boardTiles != null) {
			var _g = 0;
			var _g1 = this._boardTiles;
			while(_g < _g1.length) {
				var elem = _g1[_g];
				++_g;
				if(elem == null) continue;
				if(elem.type == p_type) {
					if(result == null) result = [];
					if(p_cloneData) {
						var data = { id : elem.id, type : elem.type, x : elem.x, y : elem.y, width : elem.width, height : elem.height, shortcut : elem.shortcut};
						result.push(data);
					} else result.push(elem);
				}
			}
		}
		return result;
	}
	,getSpinnerSlice: function(p_id,p_cloneData) {
		if(p_cloneData == null) p_cloneData = false;
		var result = null;
		if(this._spinnerSlices != null) {
			var _g = 0;
			var _g1 = this._spinnerSlices;
			while(_g < _g1.length) {
				var elem = _g1[_g];
				++_g;
				if(elem == null) continue;
				if(elem.id == p_id) {
					if(p_cloneData) result = { id : elem.id, type : elem.type}; else result = elem;
					break;
				}
			}
		}
		return result;
	}
	,getToken: function(p_id,p_cloneData) {
		if(p_cloneData == null) p_cloneData = false;
		var result = null;
		if(this._currentTokens != null) {
			var _g = 0;
			var _g1 = this._currentTokens;
			while(_g < _g1.length) {
				var elem = _g1[_g];
				++_g;
				if(elem == null) continue;
				if(elem.id == p_id) {
					if(p_cloneData) result = { id : elem.id, type : elem.type, mode : elem.mode, rank : elem.rank, prevTileID : elem.prevTileID, currentTileID : elem.currentTileID}; else result = elem;
					break;
				}
			}
		}
		return result;
	}
	,getToken_byRank: function(p_rank,p_cloneData) {
		if(p_cloneData == null) p_cloneData = false;
		var result = null;
		if(this._currentTokens != null) {
			var _g = 0;
			var _g1 = this._currentTokens;
			while(_g < _g1.length) {
				var elem = _g1[_g];
				++_g;
				if(elem == null) continue;
				if(elem.rank == p_rank) {
					if(p_cloneData) result = { id : elem.id, type : elem.type, mode : elem.mode, rank : elem.rank, prevTileID : elem.prevTileID, currentTileID : elem.currentTileID}; else result = elem;
					break;
				}
			}
		}
		return result;
	}
	,getOtherTokenIds: function(p_id) {
		var result = null;
		if(this._currentTokens != null) {
			var _g = 0;
			var _g1 = this._currentTokens;
			while(_g < _g1.length) {
				var elem = _g1[_g];
				++_g;
				if(elem == null) continue;
				if(elem.id != p_id) {
					if(result == null) result = [];
					result.push(elem.id);
				}
			}
		}
		return result;
	}
	,setToken: function(p_id,p_type,p_mode) {
		if(this._currentTokens == null) return;
		if(this._currentTokens.length == 0) return;
		var _g = 0;
		var _g1 = this._currentTokens;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem == null) continue;
			if(elem.id == p_id) {
				elem.type = p_type;
				elem.mode = p_mode;
				elem.rank = elem.id;
				if(this._cheatMode) {
					elem.prevTileID = 52;
					elem.currentTileID = 52;
				} else {
					elem.prevTileID = 1;
					elem.currentTileID = 1;
				}
				break;
			}
		}
		this.dispatchEvent(new nick_hol_nn_manager_GameEvent("gameEvt_updCurrentTokens"));
	}
	,setTokenTile: function(p_id,p_tileID) {
		if(this._boardTiles == null) return;
		if(this._currentTokens == null) return;
		if(this._currentTokens.length == 0) return;
		var tileID = p_tileID;
		tileID = Std["int"](Math.max(1,tileID));
		tileID = Std["int"](Math.min(tileID,this._boardTiles.length));
		var _g = 0;
		var _g1 = this._currentTokens;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem == null) continue;
			if(elem.id == p_id) {
				elem.prevTileID = elem.currentTileID;
				elem.currentTileID = tileID;
				break;
			}
		}
		this._currentTokens.sort(function(a,b) {
			var result = 0;
			if(a.currentTileID < b.currentTileID) result = 1; else if(a.currentTileID > b.currentTileID) result = -1;
			return result;
		});
		var _g11 = 0;
		var _g2 = this._currentTokens.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var elem1 = this._currentTokens[i];
			if(elem1 != null) elem1.rank = i + 1;
		}
		this.dispatchEvent(new nick_hol_nn_manager_GameEvent("gameEvt_updCurrentTokens"));
	}
	,setCountTokens: function(p_value) {
		if(p_value == null) p_value = 2;
		if(p_value < 1 || p_value > 4) return;
		if(p_value == this._countTokens) return;
		this._countTokens = p_value;
		var data = null;
		if(this._currentTokens != null) {
			var _g1 = 0;
			var _g = this._currentTokens.length;
			while(_g1 < _g) {
				var i = _g1++;
				data = this._currentTokens[i];
				if(data == null) continue;
				data.id = null;
				data.type = null;
				data.mode = null;
				data.rank = null;
				data.prevTileID = null;
				data.currentTileID = null;
				this._currentTokens[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._currentTokens);
		}
		this._currentTokens = [];
		var _g11 = 0;
		var _g2 = this._countTokens;
		while(_g11 < _g2) {
			var i1 = _g11++;
			data = { id : i1 + 1, type : null, mode : null, rank : null, prevTileID : null, currentTileID : null};
			this._currentTokens.push(data);
		}
	}
	,initialize: function() {
		if(this._soManager != null) this._soManager.start("nk-holnicknacks");
		ie_lib_utils_assets_AssetsUtility.setUnembeddedAssets(ie_lib_manager_AssetsConfig.unembeddedAssets,ie_lib_manager_AssetsConfig.unembeddedAudio);
		ie_lib_utils_assets_AssetsUtility.setLocalizedAssets(ie_lib_manager_AssetsConfig.localizedAssets,ie_lib_manager_AssetsConfig.localizedAudio);
		com_jpmata_managers_SoundManager.supportedAudioFormat = com_jpmata_managers_SoundFormat.ALL;
		this._extractData();
	}
	,endGame: function() {
	}
	,resetGame: function() {
		if(this._currentTokens == null) return;
		if(this._currentTokens.length == 0) return;
		var _g = 0;
		var _g1 = this._currentTokens;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			elem.rank = elem.id;
			if(this._cheatMode) {
				elem.currentTileID = 52;
				elem.prevTileID = 52;
			} else {
				elem.currentTileID = 1;
				elem.prevTileID = 1;
			}
		}
		this._currentTokens.sort(function(a,b) {
			var result = 0;
			if(a.id < b.id) result = -1; else if(a.id > b.id) result = 1;
			return result;
		});
	}
	,_initListeners: function() {
		com_jpmata_managers_BaseManager.prototype._initListeners.call(this);
		if(this._satellite != null) this.addEventListener("gameEvt_updCurrentTokens",($_=this._satellite,$bind($_,$_.handler)));
	}
	,_initProps: function() {
		com_jpmata_managers_BaseManager.prototype._initProps.call(this);
		this._nkManager = nk_lib_manager_NickManager.get_instance();
		this._soManager = com_jpmata_managers_SharedObjectManager.get_instance();
		this._boardTiles = [];
		this._spinnerSlices = [];
		this._cheatMode = false;
		this._currentTokens = null;
		this._countTokens = null;
		this.setCountTokens();
	}
	,_extractData: function() {
		this._extractData_version();
		this._extractData_cheatMode();
		this._extractData_boardTiles();
		this._extractData_spinnerSlices();
	}
	,_extractData_version: function() {
		if(this._soManager == null) throw new js__$Boot_HaxeError("Cannot extract versions. Shared object manager not initialized.");
		var arrVersionApp = StringTools.trim(openfl_Lib.application.config.version).split(".");
		if(arrVersionApp == null) throw new js__$Boot_HaxeError("Cannot extract versions. Invalid app version format or version is empty.");
		if(arrVersionApp.length < 3) throw new js__$Boot_HaxeError("Cannot extract versions. Invalid app version format or version is empty.");
		if(arrVersionApp[0] == null) throw new js__$Boot_HaxeError("Cannot extract versions. Invalid app version format or version is empty.");
		if(arrVersionApp[1] == null) throw new js__$Boot_HaxeError("Cannot extract versions. Invalid app version format or version is empty.");
		if(arrVersionApp[2] == null) throw new js__$Boot_HaxeError("Cannot extract versions. Invalid app version format or version is empty.");
		var versionApp = { major : Std.parseInt(arrVersionApp[0]), minor : Std.parseInt(arrVersionApp[1]), patch : Std.parseInt(arrVersionApp[2])};
		var versionDataChanged_major = 0;
		var versionDataChanged_minor = 1;
		var versionDataChanged_patch = 1;
		if(this.get_debugMode()) null;
		if(this.get_debugMode()) null;
		var versionSave = this._soManager.getValue("version");
		var clearData = false;
		if(versionSave != null) {
			if(this.get_debugMode()) null;
			if(versionSave.major == versionDataChanged_major) {
				if(versionSave.minor == versionDataChanged_minor) {
					if(versionSave.patch < versionDataChanged_patch) clearData = true;
				} else if(versionSave.minor < versionDataChanged_minor) clearData = true;
			} else if(versionSave.major < versionDataChanged_major) clearData = true;
		} else clearData = true;
		if(clearData) {
			this._soManager.clearAll();
			if(this.get_debugMode()) null;
		}
		this._soManager.saveProperty("version",versionApp);
		if(this.get_debugMode()) null;
	}
	,_extractData_cheatMode: function() {
		if(this._nkManager == null) throw new js__$Boot_HaxeError("Client manager not initialized. Cannot extract data for cheat mode.");
		if(Std.string(this._nkManager.get_configGame().props.cheatMode) == "true") this._cheatMode = true; else this._cheatMode = false;
		if(this.get_debugMode()) null;
	}
	,_extractData_boardTiles: function() {
		if(this._nkManager == null) throw new js__$Boot_HaxeError("Client manager not initialized. Cannot extract data for board tiles.");
		if(this._boardTiles == null) throw new js__$Boot_HaxeError("List not initialized. Cannot extract data for board tiles.");
		if(this._boardTiles.length != 0) {
			if(this.get_debugMode()) null;
			return;
		}
		var dataList = new haxe_xml_Fast(this._nkManager.get_configGame().props.boardTiles);
		var _g = dataList.nodes.resolve("tile").iterator();
		while(_g.head != null) {
			var xmlElem;
			xmlElem = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			var elem = xmlElem;
			var data = { id : Std["int"](Std.parseFloat(elem.att.resolve("id"))), type : Std["int"](Std.parseFloat(elem.att.resolve("type"))), x : Std.parseFloat(elem.att.resolve("x")), y : Std.parseFloat(elem.att.resolve("y")), width : Std.parseFloat(elem.att.resolve("width")), height : Std.parseFloat(elem.att.resolve("height")), shortcut : elem.has.resolve("shortcut")?Std["int"](Std.parseFloat(elem.att.resolve("shortcut"))):null};
			this._boardTiles.push(data);
		}
		if(this.get_debugMode()) null;
	}
	,_extractData_spinnerSlices: function() {
		if(this._nkManager == null) throw new js__$Boot_HaxeError("Client manager not initialized. Cannot extract data for spinner slices.");
		if(this._spinnerSlices == null) throw new js__$Boot_HaxeError("List not initialized. Cannot extract data for spinner slices.");
		if(this._spinnerSlices.length != 0) {
			if(this.get_debugMode()) null;
			return;
		}
		var dataList = new haxe_xml_Fast(this._nkManager.get_configGame().props.spinnerSlices);
		var _g = dataList.nodes.resolve("slice").iterator();
		while(_g.head != null) {
			var xmlElem;
			xmlElem = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			var elem = xmlElem;
			var data = { id : Std["int"](Std.parseFloat(elem.att.resolve("id"))), type : Std["int"](Std.parseFloat(elem.att.resolve("type")))};
			this._spinnerSlices.push(data);
		}
		if(this.get_debugMode()) null;
	}
	,__class__: nick_hol_nn_manager_GameManager
	,__properties__: $extend(com_jpmata_managers_BaseManager.prototype.__properties__,{get_currentTokens:"get_currentTokens",get_countTokens:"get_countTokens",get_cheatMode:"get_cheatMode",get_spinnerSlices:"get_spinnerSlices",get_boardTiles:"get_boardTiles"})
});
var nick_hol_nn_manager_GameEvent = function(p_type,p_data,p_bubbles,p_cancelable) {
	if(p_cancelable == null) p_cancelable = false;
	if(p_bubbles == null) p_bubbles = false;
	ie_lib_events_BaseEvent.call(this,p_type,p_data,p_bubbles,p_cancelable);
};
$hxClasses["nick.hol.nn.manager.GameEvent"] = nick_hol_nn_manager_GameEvent;
nick_hol_nn_manager_GameEvent.__name__ = ["nick","hol","nn","manager","GameEvent"];
nick_hol_nn_manager_GameEvent.__super__ = ie_lib_events_BaseEvent;
nick_hol_nn_manager_GameEvent.prototype = $extend(ie_lib_events_BaseEvent.prototype,{
	__class__: nick_hol_nn_manager_GameEvent
});
var nick_hol_nn_popup_AlertPopup = function(p_msg,p_func) {
	com_jpmata_views_screens_openfl_ExtendedPopup.call(this,[p_msg,p_func]);
};
$hxClasses["nick.hol.nn.popup.AlertPopup"] = nick_hol_nn_popup_AlertPopup;
nick_hol_nn_popup_AlertPopup.__name__ = ["nick","hol","nn","popup","AlertPopup"];
nick_hol_nn_popup_AlertPopup.__super__ = com_jpmata_views_screens_openfl_ExtendedPopup;
nick_hol_nn_popup_AlertPopup.prototype = $extend(com_jpmata_views_screens_openfl_ExtendedPopup.prototype,{
	enableButtons: function(p_value) {
		if(p_value == null) p_value = true;
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype.enableButtons.call(this,p_value);
		if(this._btnAction != null) this._btnAction.enable(p_value);
		if(this._btnClose != null) this._btnClose.enable(p_value);
	}
	,_handler_btnClose: function(evt) {
		this.enableButtons(false);
		ie_lib_manager_ScreenManager.popPopup();
	}
	,_handler_btnAction: function(evt) {
		this.enableButtons(false);
		var tempFunc = this._funcAction;
		ie_lib_manager_ScreenManager.popPopup();
		if(tempFunc != null) tempFunc();
	}
	,_initGraphics: function() {
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._initGraphics.call(this);
		if(this._bmBg == null) {
			this._bmBg = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/pause/ctn_confirmation.png"));
			this._bmBg.smoothing = true;
			this._bmBg.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmBg.get_width() * 0.5);
			this._bmBg.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.5 - this._bmBg.get_height() * 0.5);
			this.addChild(this._bmBg);
		}
		var posX_content = 30;
		var posY_content = 35;
		var width_content = 320;
		var height_content = 120;
		if(this._txtMsg == null) {
			this._txtMsg = new com_jpmata_views_text_BasicTextField(width_content,height_content * 0.5);
			this._txtMsg.set_x(this._bmBg.get_x() + posX_content + this._strMsg.OFFSET_X);
			this._txtMsg.set_y(this._bmBg.get_y() + posY_content + this._strMsg.OFFSET_Y);
			if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS) {
				var _g = this._txtMsg;
				_g.set_y(_g.get_y() + 5);
			}
			this._txtMsg.setString(this._strMsg);
			this._txtMsg.setColor(16777215);
			this.addChild(this._txtMsg);
		}
		if(this._btnClose == null) {
			if(this._funcAction == null) this._btnClose = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_check.png")); else this._btnClose = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_cancel.png"));
			this._btnClose.set_scaleX(this._btnClose.set_scaleY(0.75));
			this._btnClose.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnClose));
			if(this._funcAction == null) this._btnClose.set_x(this._bmBg.get_x() + posX_content + width_content * 0.5 - this._btnClose.get_width() * 0.5); else this._btnClose.set_x(this._bmBg.get_x() + posX_content + width_content * 0.75 - this._btnClose.get_width() * 0.5);
			this._btnClose.set_y(this._bmBg.get_y() + posY_content + height_content * 0.8 - this._btnClose.get_height() * 0.5);
			this.addChild(this._btnClose);
		}
		if(this._btnAction == null && this._funcAction != null) {
			this._btnAction = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_check.png"));
			this._btnAction.set_scaleX(this._btnAction.set_scaleY(0.75));
			this._btnAction.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnAction));
			this._btnAction.set_x(this._bmBg.get_x() + posX_content + width_content * 0.25 - this._btnAction.get_width() * 0.5);
			this._btnAction.set_y(this._bmBg.get_y() + posY_content + height_content * 0.8 - this._btnAction.get_height() * 0.5);
			this.addChild(this._btnAction);
		}
	}
	,_initProps: function(p_params) {
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._initProps.call(this,p_params);
		this._funcAction = null;
		this._strMsg = null;
		if(p_params != null) {
			if(p_params.length > 0) {
				if(p_params[0] != null) this._strMsg = p_params[0];
				if(p_params[1] != null) this._funcAction = p_params[1];
			}
		}
	}
	,_killGraphics: function() {
		if(this._bmBg != null) {
			motion_Actuate.stop(this._bmBg,null,false,false);
			if(this._bmBg.parent != null) this._bmBg.parent.removeChild(this._bmBg);
			this._bmBg.bitmapData = null;
		}
		this._bmBg = null;
		if(this._btnAction != null) {
			motion_Actuate.stop(this._btnAction,null,false,false);
			this._btnAction.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnAction));
			if(this._btnAction.parent != null) this._btnAction.parent.removeChild(this._btnAction);
			this._btnAction.destroy();
		}
		this._btnAction = null;
		if(this._btnClose != null) {
			motion_Actuate.stop(this._btnClose,null,false,false);
			this._btnClose.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnClose));
			if(this._btnClose.parent != null) this._btnClose.parent.removeChild(this._btnClose);
			this._btnClose.destroy();
		}
		this._btnClose = null;
		if(this._txtMsg != null) {
			motion_Actuate.stop(this._txtMsg,null,false,false);
			if(this._txtMsg.parent != null) this._txtMsg.parent.removeChild(this._txtMsg);
			this._txtMsg.destroy();
		}
		this._txtMsg = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._killGraphics.call(this);
	}
	,_killProps: function() {
		this._funcAction = null;
		this._strMsg = null;
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_popup_AlertPopup
});
var nick_hol_nn_popup_EndScreen = function() {
	com_jpmata_views_screens_openfl_ExtendedScreen.call(this);
};
$hxClasses["nick.hol.nn.popup.EndScreen"] = nick_hol_nn_popup_EndScreen;
nick_hol_nn_popup_EndScreen.__name__ = ["nick","hol","nn","popup","EndScreen"];
nick_hol_nn_popup_EndScreen.__super__ = com_jpmata_views_screens_openfl_ExtendedScreen;
nick_hol_nn_popup_EndScreen.prototype = $extend(com_jpmata_views_screens_openfl_ExtendedScreen.prototype,{
	screenDidAppear: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.screenDidAppear.call(this);
		if(com_jpmata_managers_SoundManager.get_instance().get_isPlayingBGM()) com_jpmata_managers_SoundManager.get_instance().stopBGM();
		com_jpmata_managers_SoundManager.get_instance().playBGM("media/audio/embed/bgm/bgm_end.mp3",false);
		motion_Actuate.tween(this,3,{ x : this.get_x()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			if(com_jpmata_managers_SoundManager.get_instance().get_isPlayingBGM()) com_jpmata_managers_SoundManager.get_instance().stopBGM();
			com_jpmata_managers_SoundManager.get_instance().playBGM("media/audio/embed/bgm/bgm_title.mp3");
		});
	}
	,enableButtons: function(p_value) {
		if(p_value == null) p_value = true;
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.enableButtons.call(this,p_value);
		if(this._btnHome != null) this._btnHome.enable(p_value);
		if(this._btnRestart != null) this._btnRestart.enable(p_value);
	}
	,_handler_btnHome: function(evt) {
		ie_lib_manager_ScreenManager.replaceScreen(new nick_hol_nn_screen_SelectScreen());
	}
	,_handler_btnRestart: function(evt) {
		nick_hol_nn_manager_GameManager.get_instance().resetGame();
		ie_lib_manager_ScreenManager.replaceScreen(new nick_hol_nn_screen_GameScreen());
	}
	,_initGraphics: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initGraphics.call(this);
		if(this._bmBg == null) {
			this._bmBg = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/gen/bg_snow.png"));
			this._bmBg.smoothing = true;
			this._bmBg.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmBg.get_width() * 0.5);
			this._bmBg.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.5 - this._bmBg.get_height() * 0.5);
			this.addChild(this._bmBg);
		}
		if(this._bmTitle == null) {
			var data = this._gameManager.getToken_byRank(1);
			if(data.mode == nick_hol_nn_manager_TokenMode.PLAYER) this._bmTitle = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/localized/end/congratulations.png")); else this._bmTitle = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/localized/end/goodjob.png"));
			this._bmTitle.smoothing = true;
			this._bmTitle.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmTitle.get_width() * 0.5);
			this._bmTitle.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.2 - this._bmTitle.get_height() * 0.5);
			this.addChild(this._bmTitle);
		}
		if(this._text == null) {
			this._text = new com_jpmata_views_text_BasicTextField(876,166);
			var data1 = this._gameManager.getToken_byRank(1);
			if(data1.mode == nick_hol_nn_manager_TokenMode.PLAYER) this._text.setString(nk_lib_manager_NickManager.get_instance().getLocalizedText("scrEnd_txtCongratulations")); else this._text.setString(nk_lib_manager_NickManager.get_instance().getLocalizedText("scrEnd_txtGoodJob"));
			this._text.setColor(16777215);
			this._text.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._text.get_width() * 0.5);
			if(data1.mode == nick_hol_nn_manager_TokenMode.PLAYER) this._text.set_y(this._bmTitle.get_y() + this._bmTitle.get_height() * 0.5 - this._text.get_height() * 0.43); else this._text.set_y(this._bmTitle.get_y() + this._bmTitle.get_height() * 0.5 - this._text.get_height() * 0.48);
			this.addChild(this._text);
		}
		if(this._hudPillars == null) {
			this._hudPillars = [];
			var viewWidth = 800;
			var startX = ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - viewWidth * 0.5;
			var _g1 = 0;
			var _g = this._gameManager.get_currentTokens().length;
			while(_g1 < _g) {
				var i = _g1++;
				var hudPillar = new nick_hol_nn_popup_RankPillarHUD(i + 1);
				var posX = startX + viewWidth / (this._gameManager.get_currentTokens().length + 1) * (i + 1);
				hudPillar.set_x(posX);
				hudPillar.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height - 10);
				this.addChild(hudPillar);
				hudPillar.start();
				this._hudPillars.push(hudPillar);
			}
		}
		if(this._bmTint == null) {
			this._bmTint = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/gen/message_tint.png"));
			this._bmTint.smoothing = true;
			this._bmTint.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmTint.get_width() * 0.5);
			this._bmTint.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height - this._bmTint.get_height());
			this._bmTint.set_height(this._bmTint.get_height() + 2);
			this.addChild(this._bmTint);
		}
		if(this._sprMessage == null) {
			this._sprMessage = new openfl_display_Sprite();
			this.addChild(this._sprMessage);
		}
		if(this._txtMessage == null) {
			this._txtMessage = new com_jpmata_views_text_BasicTextField(380,50);
			var strMsg = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrEnd_txtMessage");
			strMsg.HALIGN = "right";
			this._txtMessage.setString(strMsg);
			this._txtMessage.setColor(16777215);
			this._txtMessage.set_x(strMsg.OFFSET_X);
			this._txtMessage.set_y(strMsg.OFFSET_Y);
			this._sprMessage.addChild(this._txtMessage);
		}
		if(this._bmLogo == null) {
			this._bmLogo = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/localized/img_logo_nick.png"));
			this._bmLogo.smoothing = true;
			this._bmLogo.set_scaleX(this._bmLogo.set_scaleY(0.875));
			this._bmLogo.set_x(this._txtMessage.get_x() + this._txtMessage.get_boundsWidth() + 5);
			this._bmLogo.set_y(this._txtMessage.get_y() + this._txtMessage.get_boundsHeight() * 0.5 - this._bmLogo.get_height() * 0.5);
			this._sprMessage.addChild(this._bmLogo);
			this._sprMessage.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._sprMessage.get_width() * 0.5);
			this._sprMessage.set_y(this._bmTint.get_y() + this._bmTint.get_height() - this._bmLogo.get_height() - 10);
		}
		if(this._btnHome == null) {
			this._btnHome = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_home.png"));
			this._btnHome.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnHome));
			this.addChild(this._btnHome);
		}
		if(this._btnRestart == null) {
			this._btnRestart = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_restart.png"));
			this._btnRestart.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnRestart));
			this.addChild(this._btnRestart);
		}
		this._btnRestart.set_x(this._bmBg.get_x() + this._bmBg.get_width() - this._btnRestart.get_width() - 10);
		this._btnRestart.set_y(this._bmBg.get_y() + this._bmBg.get_height() - this._btnRestart.get_height() - 10);
		this._btnHome.set_x(this._btnRestart.get_x() - this._btnRestart.get_width() - 10);
		this._btnHome.set_y(this._btnRestart.get_y());
	}
	,_initProps: function(p_params) {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initProps.call(this,p_params);
		this._gameManager = nick_hol_nn_manager_GameManager.get_instance();
	}
	,_killGraphics: function() {
		if(this._bmBg != null) {
			motion_Actuate.stop(this._bmBg,null,false,false);
			if(this._bmBg.parent != null) this._bmBg.parent.removeChild(this._bmBg);
			this._bmBg.bitmapData = null;
		}
		this._bmBg = null;
		if(this._text != null) {
			motion_Actuate.stop(this._text,null,false,false);
			if(this._text.parent != null) this._text.parent.removeChild(this._text);
			this._text.destroy();
		}
		this._text = null;
		if(this._bmLogo != null) {
			motion_Actuate.stop(this._bmLogo,null,false,false);
			if(this._bmLogo.parent != null) this._bmLogo.parent.removeChild(this._bmLogo);
			this._bmLogo.bitmapData = null;
		}
		this._bmLogo = null;
		if(this._bmTitle != null) {
			motion_Actuate.stop(this._bmTitle,null,false,false);
			if(this._bmTitle.parent != null) this._bmTitle.parent.removeChild(this._bmTitle);
			this._bmTitle.bitmapData = null;
		}
		this._bmTitle = null;
		if(this._bmTint != null) {
			motion_Actuate.stop(this._bmTint,null,false,false);
			if(this._bmTint.parent != null) this._bmTint.parent.removeChild(this._bmTint);
			this._bmTint.bitmapData = null;
		}
		this._bmTint = null;
		if(this._btnHome != null) {
			motion_Actuate.stop(this._btnHome,null,false,false);
			this._btnHome.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnHome));
			if(this._btnHome.parent != null) this._btnHome.parent.removeChild(this._btnHome);
			this._btnHome.destroy();
		}
		this._btnHome = null;
		if(this._btnRestart != null) {
			motion_Actuate.stop(this._btnRestart,null,false,false);
			this._btnRestart.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnRestart));
			if(this._btnRestart.parent != null) this._btnRestart.parent.removeChild(this._btnRestart);
			this._btnRestart.destroy();
		}
		this._btnRestart = null;
		if(this._hudPillars == null) {
			var _g1 = 0;
			var _g = this._hudPillars.length;
			while(_g1 < _g) {
				var i = _g1++;
				var hudPillar = this._hudPillars[i];
				if(hudPillar == null) continue;
				motion_Actuate.stop(hudPillar,null,false,false);
				if(hudPillar.parent != null) hudPillar.parent.removeChild(hudPillar);
				hudPillar.destroy();
				this._hudPillars[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._hudPillars);
		}
		this._hudPillars = null;
		if(this._txtMessage != null) {
			motion_Actuate.stop(this._txtMessage,null,false,false);
			if(this._txtMessage.parent != null) this._txtMessage.parent.removeChild(this._txtMessage);
			this._txtMessage.destroy();
		}
		this._txtMessage = null;
		if(this._sprMessage != null) {
			motion_Actuate.stop(this._sprMessage,null,false,false);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._sprMessage);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._sprMessage);
			this._sprMessage.removeChildren();
		}
		this._sprMessage = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killGraphics.call(this);
	}
	,_killProps: function() {
		this._gameManager = null;
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_popup_EndScreen
});
var nick_hol_nn_popup_RankPillarHUD = function(p_rankID) {
	com_jpmata_views_BaseView.call(this,[p_rankID]);
};
$hxClasses["nick.hol.nn.popup.RankPillarHUD"] = nick_hol_nn_popup_RankPillarHUD;
nick_hol_nn_popup_RankPillarHUD.__name__ = ["nick","hol","nn","popup","RankPillarHUD"];
nick_hol_nn_popup_RankPillarHUD.__super__ = com_jpmata_views_BaseView;
nick_hol_nn_popup_RankPillarHUD.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	start: function() {
		var _g = this;
		if(this._sprTop == null) return;
		if(this._bmTop == null) return;
		if(this._bmPlace == null) return;
		if(this._bmToken == null) return;
		if(this._mcFX == null) return;
		var data = this._gameManager.getToken_byRank(this._rankID);
		var rank = data.rank;
		this._sprTop.set_x(-(this._bmTop.get_width() * 0.5));
		this._sprTop.set_y(0);
		this._bmPlace.set_visible(false);
		var posY = -this._bmTop.get_height() + 42.5 * rank;
		motion_Actuate.tween(this._sprTop,2.0 / rank,{ y : posY}).ease(motion_easing_Linear.get_easeNone()).onUpdate(function() {
			_g._bmToken.set_x(-(_g._bmToken.get_width() * 0.5));
			_g._bmToken.set_y(_g._sprTop.get_y() - _g._bmToken.get_height() * 0.75);
			_g._sprTop.set_scrollRect(new openfl_geom_Rectangle(0,0,_g._bmTop.get_width(),Math.abs(_g._sprTop.get_y())));
		}).onComplete(function() {
			_g._bmPlace.set_visible(true);
			_g._bmPlace.set_x(-(_g._bmPlace.get_width() * 0.5));
			_g._bmPlace.set_y(_g._sprTop.get_y() + _g._bmPlace.get_height() * 0.25);
			com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/item_spawn.mp3");
			_g._mcFX.stop();
			_g._mcFX.reset();
			_g._mcFX.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/fx/fx_confetti.json");
			_g._mcFX.stop();
			_g._mcFX.reset();
			_g._mcFX.set_visible(true);
			_g._mcFX.play(false);
			ie_lib_utils_actuate_ActuateUtility.popInObjects([_g._bmPlace]);
			if(_g._bmArrow != null && _g._bmText != null) {
				_g._bmText.set_visible(true);
				_g._bmText.set_x(_g._bmToken.get_x() + _g._bmToken.get_width() * 0.5 - _g._bmText.get_width() * 0.5);
				_g._bmText.set_y(_g._bmToken.get_y() + _g._bmToken.get_height() - _g._bmText.get_height() * 0.5);
				_g._text.set_visible(true);
				_g._text.set_x(_g._bmToken.get_x() + _g._bmToken.get_width() * 0.5 - _g._text.get_width() * 0.5);
				_g._text.set_y(_g._bmToken.get_y() + _g._bmToken.get_height() - _g._text.get_height() * 0.46);
			}
		});
	}
	,_initGraphics: function() {
		com_jpmata_views_BaseView.prototype._initGraphics.call(this);
		var data = this._gameManager.getToken_byRank(this._rankID);
		if(this._sprTop == null) {
			this._sprTop = new openfl_display_Sprite();
			this.addChild(this._sprTop);
		}
		if(this._bmTop == null) {
			this._bmTop = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/end/pillar_snow_whole.png"));
			this._bmTop.smoothing = true;
			this._bmTop.set_x(0);
			this._bmTop.set_y(0);
			this._sprTop.set_x(-(this._bmTop.get_width() * 0.5));
			this._sprTop.set_y(-this._bmTop.get_height() + 42.5 * data.rank);
			this._sprTop.addChild(this._bmTop);
		}
		if(this._bmBot == null) {
			this._bmBot = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/end/pillar_snow_bottom.png"));
			this._bmBot.smoothing = true;
			this._bmBot.set_x(-(this._bmBot.get_width() * 0.5));
			this._bmBot.set_y(-(this._bmBot.get_height() * 0.9));
			this.addChild(this._bmBot);
		}
		var url = null;
		if(this._bmToken == null) {
			url = StringTools.replace("media/images/embed/game/token/token_%i%.png","%i%",Std.string(data.type));
			this._bmToken = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(url));
			this._bmToken.smoothing = true;
			this._bmToken.set_x(-(this._bmToken.get_width() * 0.5));
			this._bmToken.set_y(this._sprTop.get_y() - this._bmToken.get_height() * 0.75);
			this.addChild(this._bmToken);
		}
		if(this._bmPlace == null) {
			url = StringTools.replace("media/images/embed/localized/end/rank_ribbon%i%.png","%i%",data.rank == null?"null":"" + data.rank);
			this._bmPlace = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData(url));
			this._bmPlace.smoothing = true;
			this._bmPlace.set_x(-(this._bmPlace.get_width() * 0.5));
			this._bmPlace.set_y(this._sprTop.get_y() + this._bmPlace.get_height() * 0.25);
			this.addChild(this._bmPlace);
		}
		if(this._mcFX == null) {
			this._mcFX = new com_nicollee_hxanimation_HxModMovieClip();
			this._mcFX.set_visible(false);
			this._mcFX.setNotifyOnComplete(false);
			this._mcFX.play(false);
			this._mcFX.stop();
			this._mcFX.reset();
			this._mcFX.set_x(this._bmPlace.get_x() + this._bmPlace.get_width() * 0.5);
			this._mcFX.set_y(this._bmPlace.get_y() + this._bmPlace.get_height() * 0.5);
			this.addChild(this._mcFX);
		}
		if(data.mode == nick_hol_nn_manager_TokenMode.PLAYER) {
			if(this._bmArrow == null) {
				this._bmArrow = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/token/char_pointer_arrow.png"));
				this._bmArrow.smoothing = true;
				this._bmArrow.set_visible(false);
				this.addChild(this._bmArrow);
			}
			if(this._bmText == null) {
				this._bmText = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/localized/game/char_pointer_you.png"));
				this._bmText.smoothing = true;
				this._bmText.set_visible(false);
				this.addChild(this._bmText);
			}
			if(this._text == null) {
				this._text = new com_jpmata_views_text_BasicTextField(150,50);
				this._text.set_visible(false);
				this._text.setString(nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtYou"));
				this._text.setColor(16777215);
				this.addChild(this._text);
			}
		}
	}
	,_initProps: function(p_params) {
		com_jpmata_views_BaseView.prototype._initProps.call(this,p_params);
		this._gameManager = nick_hol_nn_manager_GameManager.get_instance();
		this._rankID = 0;
		if(p_params != null) {
			if(p_params.length > 0) {
				if(p_params[0] != null) this._rankID = p_params[0];
			}
		}
	}
	,_killGraphics: function() {
		if(this._bmArrow != null) {
			motion_Actuate.stop(this._bmArrow,null,false,false);
			if(this._bmArrow.parent != null) this._bmArrow.parent.removeChild(this._bmArrow);
			this._bmArrow.bitmapData = null;
		}
		this._bmArrow = null;
		if(this._bmText != null) {
			motion_Actuate.stop(this._bmText,null,false,false);
			if(this._bmText.parent != null) this._bmText.parent.removeChild(this._bmText);
			this._bmText.bitmapData = null;
		}
		this._bmText = null;
		if(this._text != null) {
			motion_Actuate.stop(this._text,null,false,false);
			if(this._text.parent != null) this._text.parent.removeChild(this._text);
			this._text.destroy();
			this._text = null;
		}
		if(this._bmBot != null) {
			motion_Actuate.stop(this._bmBot,null,false,false);
			if(this._bmBot.parent != null) this._bmBot.parent.removeChild(this._bmBot);
			this._bmBot.bitmapData = null;
		}
		this._bmBot = null;
		if(this._bmToken != null) {
			motion_Actuate.stop(this._bmToken,null,false,false);
			if(this._bmToken.parent != null) this._bmToken.parent.removeChild(this._bmToken);
			this._bmToken.bitmapData = null;
		}
		this._bmToken = null;
		if(this._bmPlace != null) {
			motion_Actuate.stop(this._bmPlace,null,false,false);
			if(this._bmPlace.parent != null) this._bmPlace.parent.removeChild(this._bmPlace);
			this._bmPlace.bitmapData = null;
		}
		this._bmPlace = null;
		if(this._bmTop != null) {
			motion_Actuate.stop(this._bmTop,null,false,false);
			if(this._bmTop.parent != null) this._bmTop.parent.removeChild(this._bmTop);
			this._bmTop.bitmapData = null;
		}
		this._bmTop = null;
		if(this._mcFX != null) {
			motion_Actuate.stop(this._mcFX,null,false,false);
			this._mcFX.stop();
			this._mcFX.reset();
			if(this._mcFX.parent != null) this._mcFX.parent.removeChild(this._mcFX);
		}
		this._mcFX = null;
		if(this._sprTop != null) {
			motion_Actuate.stop(this._sprTop,null,false,false);
			if(this._sprTop.get_scrollRect() != null) this._sprTop.get_scrollRect().setEmpty();
			this._sprTop.set_scrollRect(null);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._sprTop);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._sprTop);
			this._sprTop.removeChildren();
		}
		this._sprTop = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,_killProps: function() {
		this._gameManager = null;
		this._rankID = null;
		com_jpmata_views_BaseView.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_popup_RankPillarHUD
});
var nick_hol_nn_popup_HelpPopup = function() {
	com_jpmata_views_screens_openfl_ExtendedPopup.call(this);
};
$hxClasses["nick.hol.nn.popup.HelpPopup"] = nick_hol_nn_popup_HelpPopup;
nick_hol_nn_popup_HelpPopup.__name__ = ["nick","hol","nn","popup","HelpPopup"];
nick_hol_nn_popup_HelpPopup.__super__ = com_jpmata_views_screens_openfl_ExtendedPopup;
nick_hol_nn_popup_HelpPopup.prototype = $extend(com_jpmata_views_screens_openfl_ExtendedPopup.prototype,{
	enableButtons: function(p_value) {
		if(p_value == null) p_value = true;
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype.enableButtons.call(this,p_value);
		if(this._btnBack != null) this._btnBack.enable(p_value);
		if(this._btnNext != null) this._btnNext.enable(p_value);
		if(this._btnPrev != null) this._btnPrev.enable(p_value);
	}
	,_handler_btnBack: function(evt) {
		this.enableButtons(false);
		ie_lib_manager_ScreenManager.popPopup();
	}
	,_handler_btnNext: function(evt) {
		if(this._currentPage != null) this._updatePage(this._currentPage + 1);
	}
	,_handler_btnPrev: function(evt) {
		if(this._currentPage != null) this._updatePage(this._currentPage - 1);
	}
	,_initGraphics: function() {
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._initGraphics.call(this);
		if(this._bmBg == null) {
			this._bmBg = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/gen/bg_snow.png"));
			this._bmBg.smoothing = true;
			this._bmBg.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmBg.get_width() * 0.5);
			this._bmBg.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.5 - this._bmBg.get_height() * 0.5);
			this.addChild(this._bmBg);
		}
		if(this._bmTitle == null) {
			this._bmTitle = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/help/ctn_htp_header.png"));
			this._bmTitle.smoothing = true;
			this._bmTitle.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmTitle.get_width() * 0.5);
			this._bmTitle.set_y(10);
			this.addChild(this._bmTitle);
		}
		if(this._txtTitle == null) {
			this._txtTitle = new com_jpmata_views_text_BasicTextField(this._bmTitle.get_width(),this._bmTitle.get_height());
			var strTitle = nk_lib_manager_NickManager.get_instance().getLocalizedText("popHelp_txtTitle");
			this._txtTitle.setString(strTitle);
			this._txtTitle.setColor(16777215);
			this._txtTitle.set_x(this._bmTitle.get_x() + strTitle.OFFSET_X);
			this._txtTitle.set_y(this._bmTitle.get_y() + strTitle.OFFSET_Y);
			this.addChild(this._txtTitle);
		}
		if(this._bmContainer == null) {
			this._bmContainer = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/help/ctn_htp_instructions.png"));
			this._bmContainer.smoothing = true;
			this._bmContainer.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmContainer.get_width() * 0.5);
			this._bmContainer.set_y(this._bmBg.get_x() + this._bmBg.get_height() - this._bmContainer.get_height() + 20);
			this.addChild(this._bmContainer);
		}
		if(this._sprContent == null) {
			this._sprContent = new openfl_display_Sprite();
			this.addChild(this._sprContent);
		}
		if(this._btnBack == null) {
			this._btnBack = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_back.png"));
			this._btnBack.set_x(this._bmTitle.get_x() - this._btnBack.get_width() - 10);
			this._btnBack.set_y(this._bmTitle.get_y() + 10);
			this._btnBack.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnBack));
			this.addChild(this._btnBack);
		}
		if(this._btnNext == null) {
			this._btnNext = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_arrow.png"));
			this._btnNext.set_visible(false);
			this._btnNext.set_x(this._bmContainer.get_x() + this._bmContainer.get_width() + 5);
			this._btnNext.set_y(this._bmContainer.get_y() + this._bmContainer.get_height() * 0.5 - this._btnNext.get_height() * 0.5);
			this._btnNext.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnNext));
			this.addChild(this._btnNext);
		}
		if(this._btnPrev == null) {
			this._btnPrev = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_arrow.png"),null,null,null,null,true);
			this._btnPrev.set_visible(false);
			this._btnPrev.set_x(this._bmContainer.get_x() - this._btnPrev.get_width() - 5);
			this._btnPrev.set_y(this._bmContainer.get_y() + this._bmContainer.get_height() * 0.5 - this._btnPrev.get_height() * 0.5);
			this._btnPrev.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnPrev));
			this.addChild(this._btnPrev);
		}
		this._updatePage(1);
	}
	,_initProps: function(p_params) {
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._initProps.call(this,p_params);
		this._currentPage = null;
	}
	,_killGraphics: function() {
		if(this._bmBg != null) {
			motion_Actuate.stop(this._bmBg,null,false,false);
			if(this._bmBg.parent != null) this._bmBg.parent.removeChild(this._bmBg);
			this._bmBg.bitmapData = null;
		}
		this._bmBg = null;
		if(this._bmTitle != null) {
			motion_Actuate.stop(this._bmTitle,null,false,false);
			if(this._bmTitle.parent != null) this._bmTitle.parent.removeChild(this._bmTitle);
			this._bmTitle.bitmapData = null;
		}
		this._bmTitle = null;
		if(this._bmContainer != null) {
			motion_Actuate.stop(this._bmContainer,null,false,false);
			if(this._bmContainer.parent != null) this._bmContainer.parent.removeChild(this._bmContainer);
			this._bmContainer.bitmapData = null;
		}
		this._bmContainer = null;
		if(this._bmContent != null) {
			motion_Actuate.stop(this._bmContent,null,false,false);
			if(this._bmContent.parent != null) this._bmContent.parent.removeChild(this._bmContent);
			this._bmContent.bitmapData = null;
		}
		this._bmContent = null;
		if(this._btnBack != null) {
			motion_Actuate.stop(this._btnBack,null,false,false);
			this._btnBack.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnBack));
			if(this._btnBack.parent != null) this._btnBack.parent.removeChild(this._btnBack);
			this._btnBack.destroy();
		}
		this._btnBack = null;
		if(this._btnNext != null) {
			motion_Actuate.stop(this._btnNext,null,false,false);
			this._btnNext.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnNext));
			if(this._btnNext.parent != null) this._btnNext.parent.removeChild(this._btnNext);
			this._btnNext.destroy();
		}
		this._btnNext = null;
		if(this._btnPrev != null) {
			motion_Actuate.stop(this._btnPrev,null,false,false);
			this._btnPrev.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnPrev));
			if(this._btnPrev.parent != null) this._btnPrev.parent.removeChild(this._btnPrev);
			this._btnPrev.destroy();
		}
		this._btnPrev = null;
		if(this._txtTitle != null) {
			motion_Actuate.stop(this._txtTitle,null,false,false);
			if(this._txtTitle.parent != null) this._txtTitle.parent.removeChild(this._txtTitle);
			this._txtTitle.destroy();
		}
		this._txtTitle = null;
		if(this._txtHeader != null) {
			motion_Actuate.stop(this._txtHeader,null,false,false);
			if(this._txtHeader.parent != null) this._txtHeader.parent.removeChild(this._txtHeader);
			this._txtHeader.destroy();
		}
		this._txtHeader = null;
		if(this._txtMsg != null) {
			motion_Actuate.stop(this._txtMsg,null,false,false);
			if(this._txtMsg.parent != null) this._txtMsg.parent.removeChild(this._txtMsg);
			this._txtMsg.destroy();
		}
		this._txtMsg = null;
		if(this._txtPage != null) {
			motion_Actuate.stop(this._txtPage,null,false,false);
			if(this._txtPage.parent != null) this._txtPage.parent.removeChild(this._txtPage);
			this._txtPage.destroy();
		}
		this._txtPage = null;
		if(this._sprContent != null) {
			motion_Actuate.stop(this._sprContent,null,false,false);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._sprContent);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._sprContent);
			this._sprContent.removeChildren();
		}
		this._sprContent = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._killGraphics.call(this);
	}
	,_killProps: function() {
		this._currentPage = null;
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._killProps.call(this);
	}
	,_updatePage: function(p_page) {
		if(p_page <= 0) return;
		if(p_page > 7) return;
		if(this._currentPage == p_page) return;
		this._currentPage = p_page;
		var bd = ie_lib_utils_assets_AssetsUtility.getBitmapData(StringTools.replace("media/images/embed/game/help/htp_image%i%.png","%i%",Std.string(this._currentPage)));
		if(this._bmContent == null) {
			this._bmContent = new openfl_display_Bitmap(bd);
			this._bmContent.set_x(this._bmContainer.get_x() + 87);
			this._bmContent.set_y(this._bmContainer.get_y() + 60);
			this._sprContent.addChild(this._bmContent);
		} else {
			this._bmContent.bitmapData = null;
			this._bmContent.bitmapData = bd;
		}
		var strHeader = nk_lib_manager_NickManager.get_instance().getLocalizedText("popHelp_txtHeader_" + Std.string(this._currentPage));
		strHeader.VALIGN = "top";
		if(this._txtHeader == null) {
			this._txtHeader = new com_jpmata_views_text_BasicTextField(626,120);
			this._txtHeader.set_x(this._bmContainer.get_x() + 87 + strHeader.OFFSET_X);
			this._txtHeader.set_y(this._bmContainer.get_y() + 270 + strHeader.OFFSET_Y);
			this._sprContent.addChild(this._txtHeader);
		}
		this._txtHeader.setString(strHeader);
		this._txtHeader.setColor(16777215);
		var strMsg = nk_lib_manager_NickManager.get_instance().getLocalizedText("popHelp_txtMsg_" + Std.string(this._currentPage));
		strMsg.VALIGN = "top";
		if(this._txtMsg == null) {
			this._txtMsg = new com_jpmata_views_text_BasicTextField(626,120);
			this._txtMsg.set_x(this._bmContainer.get_x() + 87 + strMsg.OFFSET_X);
			this._txtMsg.set_y(this._bmContainer.get_y() + 270 + strMsg.OFFSET_Y);
			this._sprContent.addChild(this._txtMsg);
		}
		this._txtMsg.setString(strMsg);
		this._txtMsg.setColor(16777215);
		var strPage = nk_lib_manager_NickManager.get_instance().getLocalizedText("popHelp_txtPage");
		if(this._txtPage == null) {
			this._txtPage = new com_jpmata_views_text_BasicTextField(85,35);
			this._txtPage.set_x(this._bmContainer.get_x() + 357 + strPage.OFFSET_X);
			this._txtPage.set_y(this._bmContainer.get_y() + 403 + strPage.OFFSET_Y);
			this._sprContent.addChild(this._txtPage);
		}
		this._txtPage.setString(strPage);
		this._txtPage.setColor(16777215);
		var strNum = strPage.VALUE;
		strNum = StringTools.replace(strNum,"%i%",Std.string(this._currentPage));
		strNum = StringTools.replace(strNum,"%j%","7");
		this._txtPage.set_text(strNum);
		if(this._currentPage == 1) {
			this._btnPrev.set_visible(false);
			this._btnNext.set_visible(true);
		} else if(this._currentPage == 7) {
			this._btnPrev.set_visible(true);
			this._btnNext.set_visible(false);
		} else {
			this._btnPrev.set_visible(true);
			this._btnNext.set_visible(true);
		}
	}
	,__class__: nick_hol_nn_popup_HelpPopup
});
var nick_hol_nn_popup_PausePopup = function() {
	com_jpmata_views_screens_openfl_ExtendedPopup.call(this);
};
$hxClasses["nick.hol.nn.popup.PausePopup"] = nick_hol_nn_popup_PausePopup;
nick_hol_nn_popup_PausePopup.__name__ = ["nick","hol","nn","popup","PausePopup"];
nick_hol_nn_popup_PausePopup.__super__ = com_jpmata_views_screens_openfl_ExtendedPopup;
nick_hol_nn_popup_PausePopup.prototype = $extend(com_jpmata_views_screens_openfl_ExtendedPopup.prototype,{
	popUpDidAppear: function() {
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype.popUpDidAppear.call(this);
		com_jpmata_managers_SoundManager.get_instance().pauseSounds(false);
	}
	,enableButtons: function(p_value) {
		if(p_value == null) p_value = true;
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype.enableButtons.call(this,p_value);
		if(this._btnAudio != null) this._btnAudio.enable(p_value);
		if(this._btnExit != null) this._btnExit.enable(p_value);
		if(this._btnHelp != null) this._btnHelp.enable(p_value);
		if(this._btnResume != null) this._btnResume.enable(p_value);
	}
	,_handler_btnExit: function(evt) {
		var _g = this;
		ie_lib_manager_ScreenManager.pushPopUp(new nick_hol_nn_popup_AlertPopup(nk_lib_manager_NickManager.get_instance().getLocalizedText("popAlert_txtMessage_quit"),function() {
			_g.enableButtons(false);
			com_jpmata_managers_SoundManager.get_instance().resumeSounds(false);
			com_jpmata_managers_SoundManager.get_instance().stopSFXs(true);
			com_jpmata_managers_SoundManager.get_instance().stopVOs(true);
			ie_lib_manager_ScreenManager.replaceScreen(new nick_hol_nn_screen_SelectScreen());
			ie_lib_manager_ScreenManager.popPopup();
		}));
	}
	,_handler_btnHelp: function(evt) {
		ie_lib_manager_ScreenManager.pushPopUp(new nick_hol_nn_popup_HelpPopup());
	}
	,_handler_btnResume: function(evt) {
		this.enableButtons(false);
		com_jpmata_managers_SoundManager.get_instance().resumeSounds(false);
		ie_lib_manager_ScreenManager.popPopup();
	}
	,_initGraphics: function() {
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._initGraphics.call(this);
		if(this._bmBg == null) {
			this._bmBg = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/pause/ctn_pause.png"));
			this._bmBg.smoothing = true;
			this._bmBg.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmBg.get_width() * 0.5);
			this._bmBg.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height - this._bmBg.get_height());
			this.addChild(this._bmBg);
		}
		if(this._txtTitle == null) {
			this._txtTitle = new com_jpmata_views_text_BasicTextField(460,50);
			var strTitle = nk_lib_manager_NickManager.get_instance().getLocalizedText("popPause_txtTitle");
			this._txtTitle.setString(strTitle);
			this._txtTitle.setColor(16777215);
			this._txtTitle.set_x(this._bmBg.get_x() + 10 + strTitle.OFFSET_X);
			this._txtTitle.set_y(this._bmBg.get_y() + 150 + strTitle.OFFSET_Y);
			this.addChild(this._txtTitle);
		}
		if(this._btnResume == null) {
			this._btnResume = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_play.png"));
			this._btnResume.set_x(this._bmBg.get_x() + 10 + 92. - this._btnResume.get_width() * 0.5);
			this._btnResume.set_y(this._bmBg.get_y() + 190 + 58. - this._btnResume.get_height() * 0.5);
			this._btnResume.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnResume));
			this.addChild(this._btnResume);
		}
		if(this._btnHelp == null) {
			this._btnHelp = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_htp.png"));
			this._btnHelp.set_x(this._bmBg.get_x() + 10 + 184. - this._btnResume.get_width() * 0.5);
			this._btnHelp.set_y(this._bmBg.get_y() + 190 + 58. - this._btnResume.get_height() * 0.5);
			this._btnHelp.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnHelp));
			this.addChild(this._btnHelp);
		}
		if(this._btnAudio == null) {
			this._btnAudio = new ie_lib_display_AudioButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_volume_on.png"),null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_volume_off.png"));
			this._btnAudio.set_x(this._bmBg.get_x() + 10 + 276. - this._btnAudio.get_width() * 0.5);
			this._btnAudio.set_y(this._bmBg.get_y() + 190 + 58. - this._btnAudio.get_height() * 0.5);
			this.addChild(this._btnAudio);
		}
		if(this._btnExit == null) {
			this._btnExit = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_cancel.png"));
			this._btnExit.set_x(this._bmBg.get_x() + 10 + 368. - this._btnExit.get_width() * 0.5);
			this._btnExit.set_y(this._bmBg.get_y() + 190 + 58. - this._btnExit.get_height() * 0.5);
			this._btnExit.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnExit));
			this.addChild(this._btnExit);
		}
	}
	,_killGraphics: function() {
		if(this._bmBg != null) {
			motion_Actuate.stop(this._bmBg,null,false,false);
			if(this._bmBg.parent != null) this._bmBg.parent.removeChild(this._bmBg);
			this._bmBg.bitmapData = null;
		}
		this._bmBg = null;
		if(this._btnAudio != null) {
			motion_Actuate.stop(this._btnAudio,null,false,false);
			if(this._btnAudio.parent != null) this._btnAudio.parent.removeChild(this._btnAudio);
			this._btnAudio.destroy();
		}
		this._btnAudio = null;
		if(this._btnExit != null) {
			motion_Actuate.stop(this._btnExit,null,false,false);
			this._btnExit.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnExit));
			if(this._btnExit.parent != null) this._btnExit.parent.removeChild(this._btnExit);
			this._btnExit.destroy();
		}
		this._btnExit = null;
		if(this._btnHelp != null) {
			motion_Actuate.stop(this._btnHelp,null,false,false);
			this._btnHelp.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnHelp));
			if(this._btnHelp.parent != null) this._btnHelp.parent.removeChild(this._btnHelp);
			this._btnHelp.destroy();
		}
		this._btnHelp = null;
		if(this._btnResume != null) {
			motion_Actuate.stop(this._btnResume,null,false,false);
			this._btnResume.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnResume));
			if(this._btnResume.parent != null) this._btnResume.parent.removeChild(this._btnResume);
			this._btnResume.destroy();
		}
		this._btnResume = null;
		if(this._txtTitle != null) {
			motion_Actuate.stop(this._txtTitle,null,false,false);
			if(this._txtTitle.parent != null) this._txtTitle.parent.removeChild(this._txtTitle);
			this._txtTitle.destroy();
		}
		this._txtTitle = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_screens_openfl_ExtendedPopup.prototype._killGraphics.call(this);
	}
	,__class__: nick_hol_nn_popup_PausePopup
});
var nick_hol_nn_screen_GameScreen = function() {
	com_jpmata_views_screens_openfl_ExtendedScreen.call(this);
};
$hxClasses["nick.hol.nn.screen.GameScreen"] = nick_hol_nn_screen_GameScreen;
nick_hol_nn_screen_GameScreen.__name__ = ["nick","hol","nn","screen","GameScreen"];
nick_hol_nn_screen_GameScreen.__interfaces__ = [ie_lib_interfaces_IUpdatable];
nick_hol_nn_screen_GameScreen.__super__ = com_jpmata_views_screens_openfl_ExtendedScreen;
nick_hol_nn_screen_GameScreen.prototype = $extend(com_jpmata_views_screens_openfl_ExtendedScreen.prototype,{
	screenDidAppear: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.screenDidAppear.call(this);
		if(com_jpmata_managers_SoundManager.get_instance().get_isPlayingBGM()) com_jpmata_managers_SoundManager.get_instance().stopBGM();
		com_jpmata_managers_SoundManager.get_instance().playBGM("media/audio/embed/bgm/bgm_game.mp3");
		this._start();
	}
	,screenDidDisappear: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.screenDidDisappear.call(this);
	}
	,popUpWillAppear: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.popUpWillAppear.call(this);
		this.screenDeactivate();
	}
	,popUpDidDisappear: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.popUpDidDisappear.call(this);
		this.screenActivate();
	}
	,enableButtons: function(p_value) {
		if(p_value == null) p_value = true;
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.enableButtons.call(this,p_value);
		if(this._btnPause != null) this._btnPause.enable(p_value);
	}
	,update: function(p_delta) {
	}
	,_handler_btnPause: function(evt) {
		ie_lib_manager_ScreenManager.pushPopUp(new nick_hol_nn_popup_PausePopup());
	}
	,_handler_boardComplete: function(evt) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		nick_hol_nn_manager_GameManager.get_instance().endGame();
		ie_lib_manager_ScreenManager.replaceScreen(new nick_hol_nn_popup_EndScreen());
	}
	,_handler_boardNextPlayer: function(evt) {
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(evt.get_data() == null) return;
		if(evt.get_data().currentToken == null) return;
		if(this._objSpinners == null) return;
		if(this._hudRank == null) return;
		var currentToken = evt.get_data().currentToken;
		var _g = 0;
		var _g1 = this._objSpinners;
		while(_g < _g1.length) {
			var objSpinner = [_g1[_g]];
			++_g;
			if(objSpinner[0].get_tokenID() == currentToken.get_data().id) {
				objSpinner[0].set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height + 50);
				objSpinner[0].set_visible(true);
				var posY = [objSpinner[0].get_y() + -355];
				motion_Actuate.tween(objSpinner[0],0.5,{ y : objSpinner[0].get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete((function(posY,objSpinner) {
					return function() {
						if(currentToken.get_data().mode == nick_hol_nn_manager_TokenMode.PLAYER) com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/item_spawn.mp3",false,null,false);
						motion_Actuate.tween(objSpinner[0],0.4,{ y : posY[0]}).ease(motion_easing_Linear.get_easeNone()).onComplete((function(objSpinner) {
							return function() {
								objSpinner[0].start();
							};
						})(objSpinner));
					};
				})(posY,objSpinner));
			} else objSpinner[0].set_visible(false);
		}
		this._hudRank.set_y(-this._hudRank.get_height());
		motion_Actuate.tween(this._hudRank,0.5,{ y : 10}).ease(motion_easing_Linear.get_easeNone()).onComplete(($_=this._hudRank,$bind($_,$_.animate)));
	}
	,_handler_boardNotif: function(evt) {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(this._hudNotif == null) return;
		if(evt.get_data() == null) return;
		if(evt.get_data().type == null) return;
		if(evt.get_data().str == null) return;
		if(this._hudNotif.get_visible()) return;
		if(evt.get_data().isTurnNotif == true) {
			this._hudNotif.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5);
			this._hudNotif.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.3);
		} else if(evt.get_data().isWinNotif == true) {
			this._hudNotif.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5);
			this._hudNotif.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.75);
		} else {
			this._hudNotif.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5);
			this._hudNotif.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.5);
		}
		this._hudNotif.set_scaleX(this._hudNotif.set_scaleY(0.001));
		this._hudNotif.setText(evt.get_data().type,evt.get_data().str,evt.get_data().txt);
		this._hudNotif.set_visible(true);
		motion_Actuate.tween(this._hudNotif,0.25,{ scaleX : 1, scaleY : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			motion_Actuate.tween(_g._hudNotif,2,{ y : _g._hudNotif.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				if(evt.get_data().isTurnNotif != true) _g._hideNotif(evt.get_data().callback);
			});
		});
	}
	,_handler_boardSpecial: function(evt) {
		var _g = this;
		if(!this._isActive) return;
		if(!this._isRunning) return;
		if(evt.get_data() == null) return;
		if(evt.get_data().spinner == null) return;
		if(evt.get_data().callback == null) return;
		if(this._mcAvalanche == null) return;
		if(this._bmAvalanche == null) return;
		var dataSpinner = evt.get_data().spinner;
		if(dataSpinner.type != 7) return;
		var callback = evt.get_data().callback;
		this._mcAvalanche.set_x(this._bmBg.get_x() + this._bmBg.get_width());
		this._mcAvalanche.set_y(0);
		this._mcAvalanche.play(true);
		this._mcAvalanche.set_visible(true);
		this._sprAvalanche.set_x(this._bmBg.get_x() + this._bmBg.get_width());
		this._sprAvalanche.set_y(this._bmBg.get_y() + this._bmBg.get_height() - this._bmAvalanche.get_height());
		this._sprAvalanche.set_visible(true);
		if(this._sfxAvalanche != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxAvalanche,true);
		this._sfxAvalanche = com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/avalanche.mp3",null,function() {
			_g._sfxAvalanche = null;
		},false);
		motion_Actuate.tween(this._mcAvalanche,3.228,{ x : -400.}).ease(motion_easing_Linear.get_easeNone()).onUpdate(function() {
			_g._sprAvalanche.set_x(_g._mcAvalanche.get_x() + 400);
		}).onComplete(function() {
			if(callback != null) callback();
			motion_Actuate.tween(_g._sprAvalanche,1.076,{ y : ie_lib_utils_display_DisplayUtility.get_nominalHeight()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_g._mcAvalanche.set_visible(false);
				_g._sprAvalanche.set_visible(false);
			});
		});
	}
	,_handler_tokenUpdState: function(evt) {
		var objToken = evt.target;
		if(objToken == null) return;
		if(this._hudRank == null) return;
		if(objToken.get_state() == nick_hol_nn_game_TokenState.BUSY) {
			this._hudRank.set_y(10);
			motion_Actuate.tween(this._hudRank,0.5,{ y : -this._hudRank.get_height()}).ease(motion_easing_Linear.get_easeNone());
		}
	}
	,_handler_spinnerUpdState: function(evt) {
		var objSpinner = evt.target;
		if(objSpinner == null) return;
		if(objSpinner.get_state() != nick_hol_nn_game_SpinnerState.SPIN) return;
		this._hideNotif();
	}
	,_hideNotif: function(p_callback) {
		var _g = this;
		motion_Actuate.tween(this._hudNotif,0.25,{ scaleX : 0.001, scaleY : 0.001}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_g._hudNotif.set_visible(false);
			if(p_callback != null) p_callback();
		});
	}
	,_initGraphics: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initGraphics.call(this);
		if(this._bmBg == null) {
			this._bmBg = new openfl_display_Bitmap(new openfl_display_BitmapData(Std["int"](ie_lib_utils_display_DisplayUtility.get_nominalWidth()),Std["int"](ie_lib_utils_display_DisplayUtility.get_nominalHeight()),false,0));
			this._bmBg.smoothing = true;
			this._bmBg.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmBg.get_width() * 0.5);
			this._bmBg.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.5 - this._bmBg.get_height() * 0.5);
			this.addChild(this._bmBg);
		}
		if(this._layerBoard == null) {
			this._layerBoard = new openfl_display_Sprite();
			this.addChild(this._layerBoard);
		}
		if(this._layerSpinner == null) {
			this._layerSpinner = new openfl_display_Sprite();
			this.addChild(this._layerSpinner);
		}
		if(this._layerEffects == null) {
			this._layerEffects = new openfl_display_Sprite();
			this.addChild(this._layerEffects);
		}
		if(this._layerHUD == null) {
			this._layerHUD = new openfl_display_Sprite();
			this.addChild(this._layerHUD);
		}
		if(this._objBoard == null) {
			this._objBoard = new nick_hol_nn_game_BoardObject();
			var scale = this._objBoard.get_height() / ie_lib_utils_display_DisplayUtility.get_nominalHeight();
			this._objBoard.set_scaleX(this._objBoard.set_scaleY(ie_lib_utils_display_DisplayUtility.get_nominalHeight() / this._objBoard.get_height()));
			this._objBoard.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._objBoard.get_width() * 0.5);
			this._objBoard.set_y(0);
			this._layerBoard.addChild(this._objBoard);
		}
		if(this._bmBoard == null) {
			this._bmBoard = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/board/board_small.png"));
			this._bmBoard.smoothing = true;
			this._bmBoard.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmBoard.get_width() * 0.5);
			this._bmBoard.set_y(0);
			this._layerBoard.addChild(this._bmBoard);
		}
		if(this._startText == null) {
			this._startText = new com_jpmata_views_text_BasicTextField(60,40);
			this._startText.setString(nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSmallStart"));
			this._startText.setColor(16777215);
			this._startText.set_x(this._bmBoard.get_x() + 22);
			this._startText.set_y(this._bmBoard.get_y() + 411);
			this._layerBoard.addChild(this._startText);
		}
		if(this._endText == null) {
			this._endText = new com_jpmata_views_text_BasicTextField(92,32);
			this._endText.setString(nk_lib_manager_NickManager.get_instance().getLocalizedText("scrGame_txtSmallEnd"));
			this._endText.setColor(16777215);
			this._endText.set_x(this._bmBoard.get_x() + 743);
			this._endText.set_y(this._bmBoard.get_y() + 75);
			this._layerBoard.addChild(this._endText);
		}
		if(this._objSpinners == null) {
			this._objSpinners = [];
			var _g1 = 0;
			var _g = this._objBoard.get_tokens().length;
			while(_g1 < _g) {
				var i = _g1++;
				var objSpinner = new nick_hol_nn_game_SpinnerObject(i + 1);
				objSpinner.set_visible(false);
				objSpinner.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - objSpinner.get_width() * 0.5);
				objSpinner.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height + 50);
				this._layerSpinner.addChild(objSpinner);
				this._objSpinners.push(objSpinner);
			}
		}
		if(this._hudNotif == null) {
			this._hudNotif = new nick_hol_nn_game_NotificationHUD();
			this._hudNotif.set_visible(false);
			this._hudNotif.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5);
			this._hudNotif.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.5);
			this._layerHUD.addChild(this._hudNotif);
		}
		if(this._hudRank == null) {
			this._hudRank = new nick_hol_nn_game_RankHUD();
			this._hudRank.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._hudRank.get_width() * 0.5);
			this._hudRank.set_y(-this._hudRank.get_height());
			this._layerHUD.addChild(this._hudRank);
		}
		if(this._btnPause == null) {
			this._btnPause = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_pause.png"));
			this._btnPause.set_scaleX(this._btnPause.set_scaleY(0.75));
			this._btnPause.set_x(this._bmBg.get_x() + this._bmBg.get_width() - this._btnPause.get_width() - 10);
			this._btnPause.set_y(10 + this._hudRank.get_height() * 0.5 - this._btnPause.get_height() * 0.5);
			this._btnPause.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnPause));
			this._layerHUD.addChild(this._btnPause);
		}
		if(this._sprAvalanche == null) {
			this._sprAvalanche = new openfl_display_Sprite();
			this._sprAvalanche.set_visible(false);
			this._layerEffects.addChild(this._sprAvalanche);
		}
		if(this._bmAvalanche == null) {
			this._bmAvalanche = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/game/special/nn_avalanche_back.png"));
			this._bmAvalanche.smoothing = true;
			this._sprAvalanche.set_x(this._bmBg.get_x() + this._bmBg.get_width() * 0.5 - this._bmAvalanche.get_width() * 0.5);
			this._sprAvalanche.set_y(this._bmBg.get_y() + this._bmBg.get_height() - this._bmAvalanche.get_height());
			this._sprAvalanche.addChild(this._bmAvalanche);
		}
		if(this._mcAvalanche == null) {
			this._mcAvalanche = new com_nicollee_hxanimation_HxModMovieClip();
			this._mcAvalanche.animation = com_jpmata_utils_hxanimation_HxModAnimationUtility.getAnimation("media/images/embed/game/special/nicknack_avalanche_wave.json");
			this._mcAvalanche.set_visible(false);
			this._mcAvalanche.setNotifyOnComplete(false);
			this._mcAvalanche.play(true);
			this._mcAvalanche.stop();
			this._mcAvalanche.reset();
			this._layerEffects.addChild(this._mcAvalanche);
		}
	}
	,_initListeners: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initListeners.call(this);
		if(this._satellite != null) {
			ie_lib_manager_UpdateManager.addListener($bind(this,this.update));
			this._satellite.subscribe(this,"boardEvt_complete",$bind(this,this._handler_boardComplete));
			this._satellite.subscribe(this,"boardEvt_nextPlayer",$bind(this,this._handler_boardNextPlayer));
			this._satellite.subscribe(this,"boardEvt_showNotif",$bind(this,this._handler_boardNotif));
			this._satellite.subscribe(this,"boardEvt_showSpecial",$bind(this,this._handler_boardSpecial));
			this._satellite.subscribe(this,"spinnerEvt_updState",$bind(this,this._handler_spinnerUpdState));
			this._satellite.subscribe(this,"tokenEvt_updState",$bind(this,this._handler_tokenUpdState));
		}
	}
	,_initProps: function(p_params) {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initProps.call(this,p_params);
		this._sfxAvalanche = null;
	}
	,_killGraphics: function() {
		if(this._bmAvalanche != null) {
			motion_Actuate.stop(this._bmAvalanche,null,false,false);
			if(this._bmAvalanche.parent != null) this._bmAvalanche.parent.removeChild(this._bmAvalanche);
			this._bmAvalanche.bitmapData = null;
		}
		this._bmAvalanche = null;
		if(this._bmBg != null) {
			motion_Actuate.stop(this._bmBg,null,false,false);
			if(this._bmBg.parent != null) this._bmBg.parent.removeChild(this._bmBg);
			if(this._bmBg.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmBg.bitmapData);
			this._bmBg.bitmapData = null;
		}
		this._bmBg = null;
		if(this._startText != null) {
			motion_Actuate.stop(this._startText,null,false,false);
			if(this._startText.parent != null) this._startText.parent.removeChild(this._startText);
			this._startText.destroy();
			this._startText = null;
		}
		if(this._endText != null) {
			motion_Actuate.stop(this._endText,null,false,false);
			if(this._endText.parent != null) this._endText.parent.removeChild(this._endText);
			this._endText.destroy();
			this._endText = null;
		}
		if(this._bmBoard != null) {
			motion_Actuate.stop(this._bmBoard,null,false,false);
			if(this._bmBoard.parent != null) this._bmBoard.parent.removeChild(this._bmBoard);
			this._bmBoard.bitmapData = null;
		}
		this._bmBoard = null;
		if(this._btnPause != null) {
			motion_Actuate.stop(this._btnPause,null,false,false);
			this._btnPause.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnPause));
			if(this._btnPause.parent != null) this._btnPause.parent.removeChild(this._btnPause);
			this._btnPause.destroy();
		}
		this._btnPause = null;
		if(this._hudNotif != null) {
			motion_Actuate.stop(this._hudNotif,null,false,false);
			if(this._hudNotif.parent != null) this._hudNotif.parent.removeChild(this._hudNotif);
			this._hudNotif.destroy();
		}
		this._hudNotif = null;
		if(this._hudRank != null) {
			motion_Actuate.stop(this._hudRank,null,false,false);
			if(this._hudRank.parent != null) this._hudRank.parent.removeChild(this._hudRank);
			this._hudRank.destroy();
		}
		this._hudRank = null;
		if(this._objBoard != null) {
			motion_Actuate.stop(this._objBoard,null,false,false);
			if(this._objBoard.parent != null) this._objBoard.parent.removeChild(this._objBoard);
			this._objBoard.destroy();
		}
		this._objBoard = null;
		if(this._objSpinners != null) {
			var _g1 = 0;
			var _g = this._objSpinners.length;
			while(_g1 < _g) {
				var i = _g1++;
				var objSpinner = this._objSpinners[i];
				if(objSpinner == null) continue;
				motion_Actuate.stop(objSpinner,null,false,false);
				if(objSpinner.parent != null) objSpinner.parent.removeChild(objSpinner);
				objSpinner.destroy();
				this._objSpinners[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._objSpinners);
		}
		this._objSpinners = null;
		if(this._mcAvalanche != null) {
			motion_Actuate.stop(this._mcAvalanche,null,false,false);
			this._mcAvalanche.stop();
			this._mcAvalanche.reset();
			if(this._mcAvalanche.parent != null) this._mcAvalanche.parent.removeChild(this._mcAvalanche);
		}
		this._mcAvalanche = null;
		if(this._sprAvalanche != null) {
			motion_Actuate.stop(this._sprAvalanche,null,false,false);
			if(this._sprAvalanche.parent != null) this._sprAvalanche.parent.removeChild(this._sprAvalanche);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._sprAvalanche);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._sprAvalanche);
			this._sprAvalanche.removeChildren();
		}
		this._sprAvalanche = null;
		if(this._layerBoard != null) {
			motion_Actuate.stop(this._layerBoard,null,false,false);
			if(this._layerBoard.parent != null) this._layerBoard.parent.removeChild(this._layerBoard);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._layerBoard);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._layerBoard);
			this._layerBoard.removeChildren();
		}
		this._layerBoard = null;
		if(this._layerEffects != null) {
			motion_Actuate.stop(this._layerEffects,null,false,false);
			if(this._layerEffects.parent != null) this._layerEffects.parent.removeChild(this._layerEffects);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._layerEffects);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._layerEffects);
			this._layerEffects.removeChildren();
		}
		this._layerEffects = null;
		if(this._layerHUD != null) {
			motion_Actuate.stop(this._layerHUD,null,false,false);
			if(this._layerHUD.parent != null) this._layerHUD.parent.removeChild(this._layerHUD);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._layerHUD);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._layerHUD);
			this._layerHUD.removeChildren();
		}
		this._layerHUD = null;
		if(this._layerTokens != null) {
			motion_Actuate.stop(this._layerTokens,null,false,false);
			if(this._layerTokens.parent != null) this._layerTokens.parent.removeChild(this._layerTokens);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._layerTokens);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._layerTokens);
			this._layerTokens.removeChildren();
		}
		this._layerTokens = null;
		if(this._layerSpinner != null) {
			motion_Actuate.stop(this._layerSpinner,null,false,false);
			if(this._layerSpinner.parent != null) this._layerSpinner.parent.removeChild(this._layerSpinner);
			ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this._layerSpinner);
			ie_lib_utils_gc_DestroyUtility.destroyChildren(this._layerSpinner);
			this._layerSpinner.removeChildren();
		}
		this._layerSpinner = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) {
			ie_lib_manager_UpdateManager.removeListener($bind(this,this.update));
			this._satellite.unsubscribe(this,"boardEvt_complete",$bind(this,this._handler_boardComplete));
			this._satellite.unsubscribe(this,"boardEvt_nextPlayer",$bind(this,this._handler_boardNextPlayer));
			this._satellite.unsubscribe(this,"boardEvt_showNotif",$bind(this,this._handler_boardNotif));
			this._satellite.unsubscribe(this,"boardEvt_showSpecial",$bind(this,this._handler_boardSpecial));
			this._satellite.unsubscribe(this,"spinnerEvt_updState",$bind(this,this._handler_spinnerUpdState));
			this._satellite.unsubscribe(this,"tokenEvt_updState",$bind(this,this._handler_tokenUpdState));
		}
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killListeners.call(this);
	}
	,_killProps: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killProps.call(this);
		if(this._sfxAvalanche != null) com_jpmata_managers_SoundManager.get_instance().stopSFX(this._sfxAvalanche,true);
		this._sfxAvalanche = null;
	}
	,_pause: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._pause.call(this);
		if(ie_lib_manager_ScreenManager.popups.length == 0) ie_lib_manager_ScreenManager.pushPopUp(new nick_hol_nn_popup_PausePopup());
		if(this._mcAvalanche != null) {
			if(this._mcAvalanche.get_visible()) this._mcAvalanche.stop();
		}
		if(this._objBoard != null) this._objBoard.pause();
		if(this._objSpinners != null) {
			var _g = 0;
			var _g1 = this._objSpinners;
			while(_g < _g1.length) {
				var objSpinner = _g1[_g];
				++_g;
				if(objSpinner != null) objSpinner.pause();
			}
		}
	}
	,_resume: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._resume.call(this);
		if(this._mcAvalanche != null) {
			if(this._mcAvalanche.get_visible()) this._mcAvalanche.play();
		}
		if(this._objBoard != null) this._objBoard.resume();
		if(this._objSpinners != null) {
			var _g = 0;
			var _g1 = this._objSpinners;
			while(_g < _g1.length) {
				var objSpinner = _g1[_g];
				++_g;
				if(objSpinner != null) objSpinner.resume();
			}
		}
	}
	,_start: function() {
		var _g = this;
		if(this._objBoard != null) this._objBoard.start();
		if(this._bmBoard != null) motion_Actuate.tween(this._bmBoard,2,{ y : this._bmBoard.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			motion_Actuate.tween(_g._startText,2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(_g._endText,2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone());
			motion_Actuate.tween(_g._bmBoard,2,{ alpha : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				_g._bmBoard.set_visible(false);
				_g._startText.set_visible(false);
				_g._endText.set_visible(false);
			});
		});
	}
	,__class__: nick_hol_nn_screen_GameScreen
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.__usingPingPongTexture = false;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	if(canvas == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	if(image == null || image.buffer == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.__asRenderTexture = function(width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	var b = new openfl_display_BitmapData(0,0);
	b.__resize(width,height);
	return b;
};
openfl_display_BitmapData.prototype = {
	dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) {
					gl.deleteTexture(this.__texture);
					this.__texture = null;
				}
			}
		}
		if(this.__pingPongTexture != null) {
			this.__pingPongTexture.destroy();
			this.__pingPongTexture = null;
		}
	}
	,getSurface: function() {
		if(!this.__isValid) return null;
		if(this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__usingPingPongTexture && this.__pingPongTexture != null) return this.__pingPongTexture.get_texture();
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.image.dirty = true;
		}
		if(this.image != null && this.image.dirty) {
			var internalFormat;
			var format;
			if(this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(!textureImage.get_premultiplied() && textureImage.get_transparent() || textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
				textureImage.set_premultiplied(true);
			}
			gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.image.dirty = false;
		}
		return this.__texture;
	}
	,__createUVs: function(x0,y0,x1,y1,x2,y2,x3,y3) {
		if(y3 == null) y3 = 1;
		if(x3 == null) x3 = 0;
		if(y2 == null) y2 = 1;
		if(x2 == null) x2 = 1;
		if(y1 == null) y1 = 0;
		if(x1 == null) x1 = 1;
		if(y0 == null) y0 = 0;
		if(x0 == null) x0 = 0;
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		this.__uvData.x0 = x0;
		this.__uvData.y0 = y0;
		this.__uvData.x1 = x1;
		this.__uvData.y1 = y1;
		this.__uvData.x2 = x2;
		this.__uvData.y2 = y2;
		this.__uvData.x3 = x3;
		this.__uvData.y3 = y3;
	}
	,__drawGL: function(renderSession,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels,powerOfTwo) {
		if(powerOfTwo == null) powerOfTwo = true;
		if(readPixels == null) readPixels = false;
		if(clearBuffer == null) clearBuffer = false;
		if(drawSelf == null) drawSelf = false;
		if(smoothing == null) smoothing = false;
		this.__pingPongTexture = openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer(renderSession,this.__pingPongTexture,this.rect,smoothing,this.transparent,clearBuffer,powerOfTwo);
		openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable(renderSession,drawSelf?this:null,source,matrix,colorTransform,blendMode,clipRect);
		openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer(renderSession,readPixels?this.image:null);
		var uv = this.__pingPongTexture.get_renderTexture().__uvData;
		this.__createUVs(uv.x0,uv.y0,uv.x1,uv.y1,uv.x2,uv.y2,uv.x3,uv.y3);
		this.__isValid = true;
		this.__usingPingPongTexture = true;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__isValid = true;
		}
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.__blendMode,this.__shader);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) this.__worldTransform.identity(); else this.__worldTransform = overrideTransform;
	}
	,__class__: openfl_display_BitmapData
};
var nick_hol_nn_screen_PreloaderBG = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(nick_hol_nn_screen_PreloaderBG.preload != null) {
		this.image = nick_hol_nn_screen_PreloaderBG.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(nick_hol_nn_screen_PreloaderBG.resourceName),nick_hol_nn_screen_PreloaderBG.resourceType,function(b) {
		if(nick_hol_nn_screen_PreloaderBG.preload == null) nick_hol_nn_screen_PreloaderBG.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["nick.hol.nn.screen.PreloaderBG"] = nick_hol_nn_screen_PreloaderBG;
nick_hol_nn_screen_PreloaderBG.__name__ = ["nick","hol","nn","screen","PreloaderBG"];
nick_hol_nn_screen_PreloaderBG.preload = null;
nick_hol_nn_screen_PreloaderBG.__super__ = openfl_display_BitmapData;
nick_hol_nn_screen_PreloaderBG.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: nick_hol_nn_screen_PreloaderBG
});
var nick_hol_nn_screen_PreloaderBar = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(nick_hol_nn_screen_PreloaderBar.preload != null) {
		this.image = nick_hol_nn_screen_PreloaderBar.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(nick_hol_nn_screen_PreloaderBar.resourceName),nick_hol_nn_screen_PreloaderBar.resourceType,function(b) {
		if(nick_hol_nn_screen_PreloaderBar.preload == null) nick_hol_nn_screen_PreloaderBar.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["nick.hol.nn.screen.PreloaderBar"] = nick_hol_nn_screen_PreloaderBar;
nick_hol_nn_screen_PreloaderBar.__name__ = ["nick","hol","nn","screen","PreloaderBar"];
nick_hol_nn_screen_PreloaderBar.preload = null;
nick_hol_nn_screen_PreloaderBar.__super__ = openfl_display_BitmapData;
nick_hol_nn_screen_PreloaderBar.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: nick_hol_nn_screen_PreloaderBar
});
var nick_hol_nn_screen_PreloaderSpongebob = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(nick_hol_nn_screen_PreloaderSpongebob.preload != null) {
		this.image = nick_hol_nn_screen_PreloaderSpongebob.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(nick_hol_nn_screen_PreloaderSpongebob.resourceName),nick_hol_nn_screen_PreloaderSpongebob.resourceType,function(b) {
		if(nick_hol_nn_screen_PreloaderSpongebob.preload == null) nick_hol_nn_screen_PreloaderSpongebob.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["nick.hol.nn.screen.PreloaderSpongebob"] = nick_hol_nn_screen_PreloaderSpongebob;
nick_hol_nn_screen_PreloaderSpongebob.__name__ = ["nick","hol","nn","screen","PreloaderSpongebob"];
nick_hol_nn_screen_PreloaderSpongebob.preload = null;
nick_hol_nn_screen_PreloaderSpongebob.__super__ = openfl_display_BitmapData;
nick_hol_nn_screen_PreloaderSpongebob.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: nick_hol_nn_screen_PreloaderSpongebob
});
var nick_hol_nn_screen_PreloaderLogo = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(nick_hol_nn_screen_PreloaderLogo.preload != null) {
		this.image = nick_hol_nn_screen_PreloaderLogo.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(nick_hol_nn_screen_PreloaderLogo.resourceName),nick_hol_nn_screen_PreloaderLogo.resourceType,function(b) {
		if(nick_hol_nn_screen_PreloaderLogo.preload == null) nick_hol_nn_screen_PreloaderLogo.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["nick.hol.nn.screen.PreloaderLogo"] = nick_hol_nn_screen_PreloaderLogo;
nick_hol_nn_screen_PreloaderLogo.__name__ = ["nick","hol","nn","screen","PreloaderLogo"];
nick_hol_nn_screen_PreloaderLogo.preload = null;
nick_hol_nn_screen_PreloaderLogo.__super__ = openfl_display_BitmapData;
nick_hol_nn_screen_PreloaderLogo.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: nick_hol_nn_screen_PreloaderLogo
});
var nick_hol_nn_screen_Preloader = function() {
	NMEPreloader.call(this);
	this.removeChildren();
	ie_lib_utils_display_DisplayUtility.initialize(960,560,ie_lib_utils_display_DisplayOrientation.LANDSCAPE);
	nk_lib_manager_NickManager.get_instance().initialize(nick_hol_nn_screen_GameScreen,nick_hol_nn_popup_PausePopup);
	nk_lib_manager_NickManager.get_instance().addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handlerNick_complete));
	this._initGraphics();
	this._handlerBrowser_resize();
	this._initListeners();
	// openfl IE/Edge isPointInStroke shiv - not super exact for wide strokes
		if( typeof CanvasRenderingContext2D.prototype.isPointInStroke == "undefined"){
			console.log("Pathed CanvasRenderingContext2D with isPointInStroke approximation");
			
			CanvasRenderingContext2D.prototype.isPointInStroke = function(path, x, y) {
				return ( this.isPointInPath ) ? this.isPointInPath(x, y) : false;
			}
		}
	// openfl IE/Edge isPointInPath shiv - not super exact for wide strokes
		if( typeof CanvasRenderingContext2D.prototype.isPointInPath == "undefined"){
			CanvasRenderingContext2D.prototype.isPointInPath = function(path, x, y) {
				return false;
			}
		}
};
$hxClasses["nick.hol.nn.screen.Preloader"] = nick_hol_nn_screen_Preloader;
nick_hol_nn_screen_Preloader.__name__ = ["nick","hol","nn","screen","Preloader"];
nick_hol_nn_screen_Preloader.__super__ = NMEPreloader;
nick_hol_nn_screen_Preloader.prototype = $extend(NMEPreloader.prototype,{
	onLoaded: function() {
		ie_lib_display_PlainButton.setDefaultSFX(ie_lib_utils_assets_AssetsUtility.getSound("media/audio/embed/sfx/general/sfx_button.mp3"));
		if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType != ie_lib_utils_device_BrowserDeviceType.DESKTOP && false) {
			if(this._txtLoading != null) {
				var strContinue = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrPreloader_txtContinue");
				if(com_jpmata_managers_FontManager.instance().getFontByName(strContinue.TYPE) != null) {
					if(!this._txtLoading.get_visible()) this._txtLoading.set_visible(false);
					this._txtLoading.set_text(strContinue.VALUE);
				} else this._txtLoading.set_visible(false);
			}
			window.focus();
			window.addEventListener("touchend",$bind(this,this._handlerBrowser_touchEnd));
		} else this._doLoadComplete();
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		NMEPreloader.prototype.onUpdate.call(this,bytesLoaded,bytesTotal);
		if(this._bmSB != null) {
			var percentage = bytesLoaded / bytesTotal;
			this._index = Math.round(percentage / (1 / ([{ x : 95., y : 297.},{ x : 170., y : 272.},{ x : 250., y : 297.},{ x : 320., y : 272.},{ x : 400., y : 297.},{ x : 480., y : 272.},{ x : 560., y : 297.},{ x : 635., y : 272.},{ x : 710., y : 297.},{ x : 790., y : 272.},{ x : 865., y : 297.}].length - 1)));
			var pos = [{ x : 95., y : 297.},{ x : 170., y : 272.},{ x : 250., y : 297.},{ x : 320., y : 272.},{ x : 400., y : 297.},{ x : 480., y : 272.},{ x : 560., y : 297.},{ x : 635., y : 272.},{ x : 710., y : 297.},{ x : 790., y : 272.},{ x : 865., y : 297.}][this._index];
			this._bmSB.set_x(pos.x - 38.);
			this._bmSB.set_y(pos.y - 92.);
		}
		if(this._txtLoading != null) {
			var strLoading = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrPreloader_txtLoading");
			if(com_jpmata_managers_FontManager.instance().getFontByName(strLoading.TYPE) != null) {
				if(!this._txtLoading.get_visible()) this._txtLoading.set_visible(false);
				this._txtLoading.set_text(StringTools.replace(strLoading.VALUE,"%i%",Std.string(Math.round(bytesLoaded / bytesTotal * 100))));
			} else this._txtLoading.set_visible(false);
		}
	}
	,_doLoadComplete: function() {
		if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType != ie_lib_utils_device_BrowserDeviceType.DESKTOP && false) window.removeEventListener("touchend",$bind(this,this._handlerBrowser_touchEnd));
		if(nk_lib_manager_NickManager.get_instance().get_configNick().services.enableTracking == true && nk_lib_manager_NickManager.get_instance().get_isInitComplete()) nicksdk_event_GameEventEmitter.sendGameEvent("onLoadingEnd");
		this._killGraphics();
		this._killListeners();
		NMEPreloader.prototype.onLoaded.call(this);
	}
	,_handlerBrowser_resize: function(e) {
		if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.MOBILE_IOS) haxe_Timer.delay(function() {
			ie_lib_utils_display_DisplayUtility.onResize();
		},1000); else ie_lib_utils_display_DisplayUtility.onResize();
	}
	,_handlerBrowser_touchEnd: function(p_val) {
		if(!nick_hol_nn_screen_Preloader._isSoundPlayed) {
			com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/general/sfx_button.mp3");
			nick_hol_nn_screen_Preloader._isSoundPlayed = true;
			this._doLoadComplete();
		}
	}
	,_handler_enterFrame: function(e) {
		var _g = this;
		var node = window.document.getElementById("embedtarget");
		if(node != null) {
			var evt = node.ownerDocument.createEvent("UIEvents");
			if(evt.initUIEvent != null) {
				evt.initUIEvent("resize",true,false,node.ownerDocument.defaultView,0);
				node.ownerDocument.defaultView.dispatchEvent(evt);
				motion_Actuate.timer(0.1).onComplete(function() {
					var target = window.document.getElementById("embedtarget");
					while(target != window.document.body) {
						target.style.height = "100%";
						target = target.parentNode;
					}
					_g._handlerBrowser_resize(null);
					evt.initUIEvent("resize",true,false,node.ownerDocument.defaultView,0);
					node.ownerDocument.defaultView.dispatchEvent(evt);
				});
			}
		}
	}
	,_handlerNick_complete: function(evt) {
		if(this._txtLoading == null) {
			this._txtLoading = new openfl_text_TextField();
			this._txtLoading.set_width(960);
			var strLoading = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrPreloader_txtLoading");
			var format = null;
			if(nk_lib_manager_NickManager.get_instance().get_configNick().localization.language == "en") format = new openfl_text_TextFormat("Rockwell Condensed Bold",35,0); else format = new openfl_text_TextFormat(nk_lib_manager_NickManager.get_instance().get_configNick().localization.defaultFont,35,0);
			format.align = openfl_text_TextFormatAlign.CENTER;
			this._txtLoading.set_defaultTextFormat(format);
			this._txtLoading.set_selectable(false);
			this._txtLoading.set_x(0);
			this._txtLoading.set_y(343);
			this._txtLoading.set_text(StringTools.replace(strLoading.VALUE,"%i%","0"));
			this.addChild(this._txtLoading);
		}
	}
	,_initGraphics: function() {
		this._index = 0;
		if(this._bmBg == null) {
			this._bmBg = new openfl_display_Bitmap(new nick_hol_nn_screen_PreloaderBG(960,560));
			this._bmBg.set_x(0);
			this._bmBg.set_y(0);
			this.addChild(this._bmBg);
		}
		if(this._bmBar == null) {
			this._bmBar = new openfl_display_Bitmap(new nick_hol_nn_screen_PreloaderBar(900,126));
			this._bmBar.set_x(30);
			this._bmBar.set_y(217);
			this.addChild(this._bmBar);
		}
		if(this._bmSB == null) {
			this._bmSB = new openfl_display_Bitmap(new nick_hol_nn_screen_PreloaderSpongebob(76,92));
			var pos = [{ x : 95., y : 297.},{ x : 170., y : 272.},{ x : 250., y : 297.},{ x : 320., y : 272.},{ x : 400., y : 297.},{ x : 480., y : 272.},{ x : 560., y : 297.},{ x : 635., y : 272.},{ x : 710., y : 297.},{ x : 790., y : 272.},{ x : 865., y : 297.}][this._index];
			this._bmSB.set_x(pos.x - 38.);
			this._bmSB.set_y(pos.y - 92.);
			this.addChild(this._bmSB);
		}
		if(this._bmLogo == null) {
			this._bmLogo = new openfl_display_Bitmap(new nick_hol_nn_screen_PreloaderLogo(208,44));
			this._bmLogo.set_x(376);
			this._bmLogo.set_y(506);
			this.addChild(this._bmLogo);
		}
	}
	,_initListeners: function() {
		this.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this._handler_enterFrame));
		this._handler_enterFrame();
		window.addEventListener("resize",$bind(this,this._handlerBrowser_resize));
	}
	,_killGraphics: function() {
		if(this._bmBg != null) {
			motion_Actuate.stop(this._bmBg,null,false,false);
			if(this._bmBg.parent != null) this._bmBg.parent.removeChild(this._bmBg);
			this._bmBg.bitmapData = null;
		}
		this._bmBg = null;
		if(this._bmBar != null) {
			motion_Actuate.stop(this._bmBar,null,false,false);
			if(this._bmBar.parent != null) this._bmBar.parent.removeChild(this._bmBar);
			this._bmBar.bitmapData = null;
		}
		this._bmBar = null;
		if(this._bmSB != null) {
			motion_Actuate.stop(this._bmSB,null,false,false);
			if(this._bmSB.parent != null) this._bmSB.parent.removeChild(this._bmSB);
			this._bmSB.bitmapData = null;
		}
		this._bmSB = null;
		if(this._bmLogo != null) {
			motion_Actuate.stop(this._bmLogo,null,false,false);
			if(this._bmLogo.parent != null) this._bmLogo.parent.removeChild(this._bmLogo);
			this._bmLogo.bitmapData = null;
		}
		this._bmLogo = null;
		if(this._txtLoading != null) {
			motion_Actuate.stop(this._txtLoading,null,false,false);
			if(this._txtLoading.parent != null) this._txtLoading.parent.removeChild(this._txtLoading);
			this._txtLoading.bitmapData = null;
		}
		this._txtLoading = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
	}
	,_killListeners: function() {
		this.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this._handler_enterFrame));
		this._handler_enterFrame();
		window.addEventListener("resize",$bind(this,this._handlerBrowser_resize));
	}
	,__class__: nick_hol_nn_screen_Preloader
});
var nick_hol_nn_screen_SelectScreen = function() {
	com_jpmata_views_screens_openfl_ExtendedScreen.call(this);
};
$hxClasses["nick.hol.nn.screen.SelectScreen"] = nick_hol_nn_screen_SelectScreen;
nick_hol_nn_screen_SelectScreen.__name__ = ["nick","hol","nn","screen","SelectScreen"];
nick_hol_nn_screen_SelectScreen.__super__ = com_jpmata_views_screens_openfl_ExtendedScreen;
nick_hol_nn_screen_SelectScreen.prototype = $extend(com_jpmata_views_screens_openfl_ExtendedScreen.prototype,{
	screenDidAppear: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.screenDidAppear.call(this);
		if(com_jpmata_managers_SoundManager.get_instance().get_isPlayingBGM() && com_jpmata_managers_SoundManager.get_instance().get_currentBGM().name != "media/audio/embed/bgm/bgm_title.mp3") com_jpmata_managers_SoundManager.get_instance().stopBGM(true);
		if(!com_jpmata_managers_SoundManager.get_instance().get_isPlayingBGM()) com_jpmata_managers_SoundManager.get_instance().playBGM("media/audio/embed/bgm/bgm_title.mp3");
	}
	,enableButtons: function(p_value) {
		if(p_value == null) p_value = true;
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.enableButtons.call(this,p_value);
		if(this._btnBack != null) this._btnBack.enable(p_value);
		if(this._btnConfirm != null) this._btnConfirm.enable(p_value);
	}
	,_handler_btnBack: function(evt) {
		this.enableButtons(false);
		ie_lib_manager_ScreenManager.replaceScreen(new nick_hol_nn_screen_TitleScreen());
	}
	,_handler_btnConfirm: function(evt) {
		var _g4 = this;
		if(this._gameManager == null) return;
		if(this._hudToken == null) return;
		if(this._selectedTokens == null) return;
		if(this._currentItem == null) return;
		if(this._bmBg == null) return;
		if((function($this) {
			var $r;
			var x = $this._currentItem.get_type();
			$r = HxOverrides.indexOf($this._selectedTokens,x,0);
			return $r;
		}(this)) != -1) return;
		var _g = 0;
		var _g1 = this._hudToken.get_items();
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item == null) continue;
			if(item.get_type() == this._currentItem.get_type()) {
				item.confirm(this._selectedTokens.length + 1);
				this._selectedTokens.push(item.get_type());
				break;
			}
		}
		if(this._selectedTokens.length == this._countPlayer) {
			this.enableButtons(false);
			this._btnConfirm.set_visible(false);
			this._hudTitle.enable(false);
			this._hudToken.enable(false);
			var randTypes = [];
			var startingIndex = 1;
			if(!nk_lib_manager_NickManager.get_instance().get_configGame().enabledAlvin) startingIndex = 2;
			var _g11 = 0;
			var _g2 = this._gameManager.get_countTokens();
			while(_g11 < _g2) {
				var i = [_g11++];
				var mode = null;
				var randType = null;
				if(this._selectedTokens.length > 0) {
					randType = this._selectedTokens.shift();
					randTypes.push(randType);
					mode = nick_hol_nn_manager_TokenMode.PLAYER;
				} else {
					do randType = ie_lib_utils_math_MathUtility.randomizeInt(startingIndex,6); while(HxOverrides.indexOf(randTypes,randType,0) != -1);
					randTypes.push(randType);
					mode = nick_hol_nn_manager_TokenMode.AI;
					var _g21 = 0;
					var _g3 = this._hudToken.get_items();
					while(_g21 < _g3.length) {
						var item1 = _g3[_g21];
						++_g21;
						if(item1 == null) continue;
						if(item1.get_type() == randType) {
							item1.select(true,null);
							break;
						}
					}
					var _g22 = 0;
					var _g31 = this._hudHolders;
					while(_g22 < _g31.length) {
						var holder = _g31[_g22];
						++_g22;
						if(holder == null) continue;
						if(holder.get_id() == i[0] + 1) {
							holder.set_type(randType);
							holder.set_visible(true);
							motion_Actuate.stop(holder,null,false,false);
							motion_Actuate.tween(holder,0.25,{ x : this._bmBg.get_x()}).ease(motion_easing_Linear.get_easeNone()).delay((i[0] - 1) * 0.25).onComplete((function(i) {
								return function() {
									if(i[0] + 1 == _g4._gameManager.get_countTokens()) {
										if(com_jpmata_managers_SoundManager.get_instance().get_isPlayingBGM()) com_jpmata_managers_SoundManager.get_instance().stopBGM(true);
										com_jpmata_managers_SoundManager.get_instance().playBGM("media/audio/embed/bgm/bgm_title_end.mp3",false);
										motion_Actuate.tween(_g4,2.731,{ y : _g4.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete((function() {
											return function() {
												ie_lib_manager_ScreenManager.replaceScreen(new nick_hol_nn_screen_GameScreen());
											};
										})());
									}
								};
							})(i));
						}
					}
				}
				nick_hol_nn_manager_GameManager.get_instance().setToken(i[0] + 1,randType,mode);
			}
		}
	}
	,_handler_selChooseChar: function(evt) {
		var _g = this;
		if(this._hudToken == null) return;
		if(this._hudHolders == null) return;
		if(this._selectedTokens == null) return;
		if(this._bmBg == null) return;
		if(this._btnConfirm == null) return;
		var itemChosen = evt.target;
		this._btnConfirm.set_visible(true);
		if((function($this) {
			var $r;
			var x = itemChosen.get_type();
			$r = HxOverrides.indexOf($this._selectedTokens,x,0);
			return $r;
		}(this)) != -1) return;
		var _g1 = 0;
		var _g11 = this._hudToken.get_items();
		while(_g1 < _g11.length) {
			var item = _g11[_g1];
			++_g1;
			if(item == null) continue;
			if(item.get_type() == itemChosen.get_type()) {
				item.select(true,this._selectedTokens.length + 1);
				this._currentItem = item;
			} else item.select(false);
		}
		var _g2 = 0;
		var _g12 = this._hudHolders;
		while(_g2 < _g12.length) {
			var holder = _g12[_g2];
			++_g2;
			if(holder == null) continue;
			if(holder.get_id() == this._selectedTokens.length + 1) {
				holder.set_type(itemChosen.get_type());
				motion_Actuate.stop(holder,null,false,false);
				motion_Actuate.tween(holder,0.25,{ x : this._bmBg.get_x()}).ease(motion_easing_Linear.get_easeNone());
				break;
			}
		}
		if(this._currentItem != null) {
			if(this._voSelect != null) com_jpmata_managers_SoundManager.get_instance().stopVO(this._voSelect,true);
			var urlVO = StringTools.replace("media/audio/embed/vo/select/char_select_%i%.mp3","%i%",Std.string(this._currentItem.get_type()));
			this._voSelect = com_jpmata_managers_SoundManager.get_instance().playVO(urlVO,function() {
				_g._voSelect = null;
			});
		}
	}
	,_handler_selChoosePlayers: function(evt) {
		if(evt.get_data() == null) return;
		if(evt.get_data().players == null) return;
		if(this._hudToken == null) return;
		if(this._selectedTokens == null) return;
		if(this._btnConfirm == null) return;
		if(this._gameManager == null) return;
		this._btnConfirm.set_visible(false);
		this._gameManager.setCountTokens(evt.get_data().players);
		if(this._selectedTokens != null) ie_lib_utils_gc_DestroyUtility.destroyArray(this._selectedTokens);
		this._selectedTokens = null;
		this._selectedTokens = [];
		var _g = 0;
		var _g1 = this._hudToken.get_items();
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item == null) continue;
			item.confirm(null);
			item.select(false);
		}
		var _g11 = 0;
		var _g2 = this._hudHolders.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var index = i + 1;
			var holder = this._hudHolders[i];
			if(holder == null) continue;
			holder.set_type(null);
			var posX = null;
			if(index == 1) posX = -holder.get_width() + 130; else posX = -holder.get_width();
			motion_Actuate.stop(holder,null,false,false);
			motion_Actuate.tween(holder,0.25,{ x : posX}).ease(motion_easing_Linear.get_easeNone());
		}
	}
	,_initGraphics: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initGraphics.call(this);
		if(this._bmBg == null) {
			this._bmBg = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/gen/bg_snow.png"));
			this._bmBg.smoothing = true;
			this._bmBg.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmBg.get_width() * 0.5);
			this._bmBg.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.5 - this._bmBg.get_height() * 0.5);
			this.addChild(this._bmBg);
		}
		if(this._hudTitle == null) {
			this._hudTitle = new nick_hol_nn_screen_SelectTitleHUD();
			this._hudTitle.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._hudTitle.get_width() * 0.5);
			this._hudTitle.set_y(10);
			this.addChild(this._hudTitle);
		}
		if(this._hudToken == null) {
			this._hudToken = new nick_hol_nn_screen_SelectTokenHUD();
			this._hudToken.set_x(this._bmBg.get_x() + this._bmBg.get_width() * 0.5);
			this._hudToken.set_y(this._bmBg.get_y() + this._bmBg.get_height() * 0.5 - this._hudToken.get_height() * 0.5);
			this.addChild(this._hudToken);
		}
		if(this._btnConfirm == null) {
			this._btnConfirm = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_check.png"));
			this._btnConfirm.set_visible(false);
			this._btnConfirm.set_x(this._bmBg.get_x() + this._bmBg.get_width() * 0.75 - this._btnConfirm.get_width() * 0.5);
			this._btnConfirm.set_y(this._hudToken.get_y() + this._hudToken.get_height());
			this._btnConfirm.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnConfirm));
			this.addChild(this._btnConfirm);
		}
		if(this._hudHolders == null) {
			this._hudHolders = [];
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				var index = i + 1;
				var hudHolder = new nick_hol_nn_screen_SelectHolderHUD(index);
				if(index == 1) hudHolder.set_x(-hudHolder.get_width() + 130); else hudHolder.set_x(-hudHolder.get_width());
				hudHolder.set_y(this._hudToken.get_y() + this._hudToken.get_height() * 0.125 + hudHolder.get_height() * 0.95 * i);
				this.addChild(hudHolder);
				this._hudHolders.push(hudHolder);
			}
		}
		if(this._btnBack == null) {
			this._btnBack = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/buttons/btn_back.png"));
			this._btnBack.set_visible(false);
			this._btnBack.set_x(this._hudTitle.get_x() - this._btnBack.get_width() - 10);
			this._btnBack.set_y(this._hudTitle.get_y() + 10);
			this._btnBack.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnBack));
			this.addChild(this._btnBack);
		}
	}
	,_initListeners: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initListeners.call(this);
		if(this._satellite != null) {
			this._satellite.subscribe(this,"selEvt_chooseChar",$bind(this,this._handler_selChooseChar));
			this._satellite.subscribe(this,"selEvt_choosePlayers",$bind(this,this._handler_selChoosePlayers));
		}
	}
	,_initProps: function(p_params) {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initProps.call(this,p_params);
		this._gameManager = nick_hol_nn_manager_GameManager.get_instance();
		this._currentItem = null;
		this._countPlayer = 1;
		this._selectedTokens = [];
		this._voSelect = null;
		this._gameManager.setCountTokens();
	}
	,_killGraphics: function() {
		if(this._bmBg != null) {
			motion_Actuate.stop(this._bmBg,null,false,false);
			if(this._bmBg.parent != null) this._bmBg.parent.removeChild(this._bmBg);
			this._bmBg.bitmapData = null;
		}
		this._bmBg = null;
		if(this._bmTitle != null) {
			motion_Actuate.stop(this._bmTitle,null,false,false);
			if(this._bmTitle.parent != null) this._bmTitle.parent.removeChild(this._bmTitle);
			this._bmTitle.bitmapData = null;
		}
		this._bmTitle = null;
		if(this._btnBack != null) {
			motion_Actuate.stop(this._btnBack,null,false,false);
			this._btnBack.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnBack));
			if(this._btnBack.parent != null) this._btnBack.parent.removeChild(this._btnBack);
			this._btnBack.destroy();
		}
		this._btnBack = null;
		if(this._btnConfirm != null) {
			motion_Actuate.stop(this._btnConfirm,null,false,false);
			this._btnConfirm.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnConfirm));
			if(this._btnConfirm.parent != null) this._btnConfirm.parent.removeChild(this._btnConfirm);
			this._btnConfirm.destroy();
		}
		this._btnConfirm = null;
		if(this._txtTitle != null) {
			motion_Actuate.stop(this._txtTitle,null,false,false);
			if(this._txtTitle.parent != null) this._txtTitle.parent.removeChild(this._txtTitle);
			this._txtTitle.destroy();
		}
		this._txtTitle = null;
		if(this._hudTitle != null) {
			motion_Actuate.stop(this._hudTitle,null,false,false);
			if(this._hudTitle.parent != null) this._hudTitle.parent.removeChild(this._hudTitle);
			this._hudTitle.destroy();
		}
		this._hudTitle = null;
		if(this._hudToken != null) {
			motion_Actuate.stop(this._hudToken,null,false,false);
			if(this._hudToken.parent != null) this._hudToken.parent.removeChild(this._hudToken);
			this._hudToken.destroy();
		}
		this._hudToken = null;
		if(this._hudHolders != null) {
			var _g1 = 0;
			var _g = this._hudHolders.length;
			while(_g1 < _g) {
				var i = _g1++;
				var hudHolder = this._hudHolders[i];
				if(hudHolder == null) continue;
				motion_Actuate.stop(hudHolder,null,false,false);
				if(hudHolder.parent != null) hudHolder.parent.removeChild(hudHolder);
				hudHolder.destroy();
				this._hudHolders[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._hudHolders);
		}
		this._hudHolders = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) {
			this._satellite.unsubscribe(this,"selEvt_chooseChar",$bind(this,this._handler_selChooseChar));
			this._satellite.unsubscribe(this,"selEvt_choosePlayers",$bind(this,this._handler_selChoosePlayers));
		}
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killListeners.call(this);
	}
	,_killProps: function() {
		this._gameManager = null;
		this._currentItem = null;
		this._countPlayer = null;
		if(this._selectedTokens != null) ie_lib_utils_gc_DestroyUtility.destroyArray(this._selectedTokens);
		this._selectedTokens = null;
		if(this._voSelect != null) com_jpmata_managers_SoundManager.get_instance().stopVO(this._voSelect,true);
		this._voSelect = null;
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_screen_SelectScreen
});
var nick_hol_nn_screen_SelectTokenHUD = function() {
	com_jpmata_views_BaseView.call(this);
};
$hxClasses["nick.hol.nn.screen.SelectTokenHUD"] = nick_hol_nn_screen_SelectTokenHUD;
nick_hol_nn_screen_SelectTokenHUD.__name__ = ["nick","hol","nn","screen","SelectTokenHUD"];
nick_hol_nn_screen_SelectTokenHUD.__super__ = com_jpmata_views_BaseView;
nick_hol_nn_screen_SelectTokenHUD.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	get_items: function() {
		return this._items;
	}
	,enable: function(p_value) {
		this.mouseEnabled = p_value;
		this.mouseChildren = p_value;
	}
	,_initGraphics: function() {
		com_jpmata_views_BaseView.prototype._initGraphics.call(this);
		if(this._bm == null) {
			this._bm = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/gen/ctn_player_count.png"));
			this._bm.smoothing = true;
			this._bm.set_x(225. - this._bm.get_width() * 0.5);
			this._bm.set_y(0);
			this.addChild(this._bm);
		}
		if(this._txt == null) {
			this._txt = new com_jpmata_views_text_BasicTextField(this._bm.get_width(),this._bm.get_height());
			var str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrCharSel_txtCharacters");
			this._txt.setString(str);
			this._txt.setColor(16777215);
			this._txt.set_x(this._bm.get_x() + str.OFFSET_X);
			this._txt.set_y(this._bm.get_y() + str.OFFSET_Y);
			this.addChild(this._txt);
		}
		if(this._items == null) {
			this._items = [];
			var posX = 0;
			var posY = this._bm.get_y() + this._bm.get_height() + 5;
			var maxRow = 2;
			var maxCol = 6 / maxRow | 0;
			var segmentX = 450 / maxCol;
			var segmentY = 300 / maxRow;
			if(nk_lib_manager_NickManager.get_instance().get_configGame().enabledAlvin) {
				var _g = 0;
				while(_g < 6) {
					var i = _g++;
					var item = new nick_hol_nn_screen_SelectItem(i + 1);
					var row = Math.floor(i / maxCol);
					var col = Math.round(i % Math.ceil(maxCol));
					item.set_x(posX + (segmentX * 0.5 + segmentX * col));
					item.set_y(posY + (segmentY * 0.5 + segmentY * row));
					this.addChild(item);
					this._items.push(item);
				}
			} else {
				var _g1 = 1;
				while(_g1 < 6) {
					var i1 = _g1++;
					var item1 = new nick_hol_nn_screen_SelectItem(i1 + 1);
					var row1 = Math.floor((i1 - 1) / maxCol);
					var col1 = Math.round((i1 - 1) % Math.ceil(maxCol));
					if(i1 <= 3) item1.set_x(posX + (segmentX * 0.5 + segmentX * col1)); else item1.set_x(posX + (segmentX * 0.5 + segmentX * col1) + 80);
					item1.set_y(posY + (segmentY * 0.5 + segmentY * row1));
					this.addChild(item1);
					this._items.push(item1);
				}
			}
		}
	}
	,_killGraphics: function() {
		if(this._bm != null) {
			motion_Actuate.stop(this._bm,null,false,false);
			if(this._bm.parent != null) this._bm.parent.removeChild(this._bm);
			this._bm.bitmapData = null;
		}
		this._bm = null;
		if(this._txt != null) {
			motion_Actuate.stop(this._txt,null,false,false);
			if(this._txt.parent != null) this._txt.parent.removeChild(this._txt);
			this._txt.destroy();
		}
		this._txt = null;
		if(this._items != null) {
			var _g1 = 0;
			var _g = this._items.length;
			while(_g1 < _g) {
				var i = _g1++;
				var item = this._items[i];
				if(item == null) continue;
				motion_Actuate.stop(item,null,false,false);
				if(item.parent != null) item.parent.removeChild(item);
				item.destroy();
				this._items[i] = null;
			}
			ie_lib_utils_gc_DestroyUtility.destroyArray(this._items);
		}
		this._items = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,__class__: nick_hol_nn_screen_SelectTokenHUD
	,__properties__: $extend(com_jpmata_views_BaseView.prototype.__properties__,{get_items:"get_items"})
});
var nick_hol_nn_screen_SelectTitleHUD = function() {
	com_jpmata_views_BaseView.call(this);
};
$hxClasses["nick.hol.nn.screen.SelectTitleHUD"] = nick_hol_nn_screen_SelectTitleHUD;
nick_hol_nn_screen_SelectTitleHUD.__name__ = ["nick","hol","nn","screen","SelectTitleHUD"];
nick_hol_nn_screen_SelectTitleHUD.__super__ = com_jpmata_views_BaseView;
nick_hol_nn_screen_SelectTitleHUD.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	enable: function(p_value) {
		this.mouseEnabled = p_value;
		this.mouseChildren = p_value;
	}
	,_handler_btnPlayer: function(evt) {
		var btn = evt.target;
		var count = 0;
		if(btn == this._btnPlayer_2) {
			count = 2;
			this._btnPlayer_2.enable(false);
			this._btnPlayer_2.set_scaleX(this._btnPlayer_2.set_scaleY(0.8));
			this._btnPlayer_3.enable(true);
			this._btnPlayer_3.set_scaleX(this._btnPlayer_3.set_scaleY(1));
		} else if(btn == this._btnPlayer_3) {
			count = 3;
			this._btnPlayer_2.enable(true);
			this._btnPlayer_2.set_scaleX(this._btnPlayer_2.set_scaleY(1));
			this._btnPlayer_3.enable(false);
			this._btnPlayer_3.set_scaleX(this._btnPlayer_3.set_scaleY(0.8));
		}
		this._setButtonPositions();
		this.dispatchEvent(new nick_hol_nn_screen_SelectEvent("selEvt_choosePlayers",{ players : count}));
	}
	,_initGraphics: function() {
		com_jpmata_views_BaseView.prototype._initGraphics.call(this);
		if(this._bm == null) {
			this._bm = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/gen/ctn_player_count.png"));
			this._bm.smoothing = true;
			this._bm.set_x(0);
			this._bm.set_y(0);
			this.addChild(this._bm);
		}
		if(this._txt == null) {
			var str = null;
			this._txt = new com_jpmata_views_text_BasicTextField(this._bm.get_width() * 0.4,this._bm.get_height());
			var str1 = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrCharSel_txtPlayers");
			this._txt.setString(str1);
			this._txt.setColor(16777215);
			this._txt.set_x(this._bm.get_x() + this._bm.get_width() * 0.1 + 20 + str1.OFFSET_X);
			this._txt.set_y(this._bm.get_y() + str1.OFFSET_Y);
			this.addChild(this._txt);
		}
		if(this._btnPlayer_2 == null) {
			this._btnPlayer_2 = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/localized/select/btn_players2_on.png"),null,null,null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/localized/select/btn_players2_off.png"));
			this._btnPlayer_2.enable(false);
			this._btnPlayer_2.set_scaleX(this._btnPlayer_2.set_scaleY(0.8));
			this._btnPlayer_2.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnPlayer));
			this.addChild(this._btnPlayer_2);
		}
		if(this._btnPlayer_3 == null) {
			this._btnPlayer_3 = new ie_lib_display_PlainButton(null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/localized/select/btn_players3_on.png"),null,null,null,ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/localized/select/btn_players3_off.png"));
			this._btnPlayer_3.enable(true);
			this._btnPlayer_3.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnPlayer));
			this.addChild(this._btnPlayer_3);
		}
		this._setButtonPositions();
	}
	,_initListeners: function() {
		com_jpmata_views_BaseView.prototype._initListeners.call(this);
		if(this._satellite != null) this.addEventListener("selEvt_choosePlayers",($_=this._satellite,$bind($_,$_.handler)));
	}
	,_killGraphics: function() {
		if(this._bm != null) {
			motion_Actuate.stop(this._bm,null,false,false);
			if(this._bm.parent != null) this._bm.parent.removeChild(this._bm);
			this._bm.bitmapData = null;
		}
		this._bm = null;
		if(this._btnPlayer_2 != null) {
			motion_Actuate.stop(this._btnPlayer_2,null,false,false);
			this._btnPlayer_2.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnPlayer));
			if(this._btnPlayer_2.parent != null) this._btnPlayer_2.parent.removeChild(this._btnPlayer_2);
			this._btnPlayer_2.destroy();
		}
		this._btnPlayer_2 = null;
		if(this._btnPlayer_3 != null) {
			motion_Actuate.stop(this._btnPlayer_3,null,false,false);
			this._btnPlayer_3.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btnPlayer));
			if(this._btnPlayer_3.parent != null) this._btnPlayer_3.parent.removeChild(this._btnPlayer_3);
			this._btnPlayer_3.destroy();
		}
		this._btnPlayer_3 = null;
		if(this._txt != null) {
			motion_Actuate.stop(this._txt,null,false,false);
			if(this._txt.parent != null) this._txt.parent.removeChild(this._txt);
			this._txt.destroy();
		}
		this._txt = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) this.removeEventListener("selEvt_choosePlayers",($_=this._satellite,$bind($_,$_.handler)));
		com_jpmata_views_BaseView.prototype._killListeners.call(this);
	}
	,_setButtonPositions: function() {
		if(this._btnPlayer_2 != null) {
			this._btnPlayer_2.set_x(this._bm.get_x() + this._bm.get_width() * 0.65 - this._btnPlayer_2.get_width() * 0.5);
			this._btnPlayer_2.set_y(this._bm.get_y() + this._bm.get_height() * 0.5 - this._btnPlayer_2.get_height() * 0.5);
		}
		if(this._btnPlayer_3 != null) {
			this._btnPlayer_3.set_x(this._bm.get_x() + this._bm.get_width() * 0.85 - this._btnPlayer_3.get_width() * 0.5);
			this._btnPlayer_3.set_y(this._bm.get_y() + this._bm.get_height() * 0.5 - this._btnPlayer_3.get_height() * 0.5);
		}
	}
	,__class__: nick_hol_nn_screen_SelectTitleHUD
});
var nick_hol_nn_screen_SelectHolderHUD = function(p_id) {
	com_jpmata_views_BaseView.call(this,[p_id]);
};
$hxClasses["nick.hol.nn.screen.SelectHolderHUD"] = nick_hol_nn_screen_SelectHolderHUD;
nick_hol_nn_screen_SelectHolderHUD.__name__ = ["nick","hol","nn","screen","SelectHolderHUD"];
nick_hol_nn_screen_SelectHolderHUD.__super__ = com_jpmata_views_BaseView;
nick_hol_nn_screen_SelectHolderHUD.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	set_type: function(p_value) {
		if(p_value == this._type) return this._type;
		this._type = p_value;
		if(this._bm != null) {
			if(this._type != null) {
				var url = StringTools.replace("media/images/embed/select/ctn_charselect_%i%.png","%i%",Std.string(this._type));
				this._bm.bitmapData = null;
				this._bm.bitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData(url);
			} else this._bm.bitmapData = ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/select/ctn_charselect_gen.png");
		}
		if(this._txt != null) {
			if(this._type != null) {
				this._txt.set_visible(true);
				var str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrCharSel_txtName_" + Std.string(this._type));
				this._txt.setString(str);
				this._txt.setColor(16777215);
				this._txt.set_x(str.OFFSET_X);
				this._txt.set_y(27 + str.OFFSET_Y);
			} else this._txt.set_visible(false);
		}
		return this._type;
	}
	,get_id: function() {
		return this._id;
	}
	,_initGraphics: function() {
		com_jpmata_views_BaseView.prototype._initGraphics.call(this);
		if(this._bm == null) {
			this._bm = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/select/ctn_charselect_gen.png"));
			this._bm.smoothing = true;
			this._bm.set_x(0);
			this._bm.set_y(0);
			this.addChild(this._bm);
		}
		if(this._txt == null) {
			this._txt = new com_jpmata_views_text_BasicTextField(343,75);
			this.addChild(this._txt);
		}
	}
	,_initListeners: function() {
		com_jpmata_views_BaseView.prototype._initListeners.call(this);
		if(this._satellite != null) {
		}
	}
	,_initProps: function(p_params) {
		com_jpmata_views_BaseView.prototype._initProps.call(this,p_params);
		this._id = null;
		this._type = null;
		if(p_params != null) {
			if(p_params.length > 0) {
				if(p_params[0] != null) this._id = p_params[0];
			}
		}
	}
	,_killGraphics: function() {
		if(this._bm != null) {
			motion_Actuate.stop(this._bm,null,false,false);
			if(this._bm.parent != null) this._bm.parent.removeChild(this._bm);
			this._bm.bitmapData = null;
		}
		this._bm = null;
		if(this._txt != null) {
			motion_Actuate.stop(this._txt,null,false,false);
			if(this._txt.parent != null) this._txt.parent.removeChild(this._txt);
			this._txt.destroy();
		}
		this._txt = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) {
		}
		com_jpmata_views_BaseView.prototype._killListeners.call(this);
	}
	,_killProps: function() {
		this._id = null;
		this._type = null;
		com_jpmata_views_BaseView.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_screen_SelectHolderHUD
	,__properties__: $extend(com_jpmata_views_BaseView.prototype.__properties__,{get_id:"get_id",set_type:"set_type"})
});
var nick_hol_nn_screen_SelectItem = function(p_type) {
	com_jpmata_views_BaseView.call(this,[p_type]);
};
$hxClasses["nick.hol.nn.screen.SelectItem"] = nick_hol_nn_screen_SelectItem;
nick_hol_nn_screen_SelectItem.__name__ = ["nick","hol","nn","screen","SelectItem"];
nick_hol_nn_screen_SelectItem.__super__ = com_jpmata_views_BaseView;
nick_hol_nn_screen_SelectItem.prototype = $extend(com_jpmata_views_BaseView.prototype,{
	get_type: function() {
		return this._type;
	}
	,enable: function(p_value) {
		if(p_value == null) p_value = true;
		if(this._btn != null) this._btn.enable(p_value);
	}
	,confirm: function(p_id) {
		this._id = p_id;
	}
	,select: function(p_value,p_id) {
		if(this._bm == null) return;
		if(this._txt == null) return;
		if(this._id != null) return;
		if(p_value) {
			this.enable(false);
			this._bm.set_visible(true);
			this._txt.set_visible(true);
			var str = null;
			if(p_id != null) {
				str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrCharSel_txtPlayerCount");
				this._txt.setString(str);
				this._txt.set_text(StringTools.replace(this._txt.get_text(),"%i%",p_id == null?"null":"" + p_id));
				this._txt.setColor(16777215);
			} else {
				str = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrCharSel_txtCom");
				this._txt.setString(str);
				this._txt.setColor(16777215);
			}
			this._txt.set_x(this._bm.get_x() + str.OFFSET_X);
			this._txt.set_y(this._bm.get_y() + str.OFFSET_Y);
		} else {
			this.enable(true);
			this._bm.set_visible(false);
			this._txt.set_visible(false);
		}
	}
	,_handler_btn: function(evt) {
		this.dispatchEvent(new nick_hol_nn_screen_SelectEvent("selEvt_chooseChar"));
	}
	,_handler_mouseOver: function(evt) {
		if(this._isMouseOver) return;
		this._isMouseOver = true;
		motion_Actuate.tween(this,0.1,{ scaleX : 1.1, scaleY : 1.1}).ease(motion_easing_Linear.get_easeNone());
	}
	,_handler_mouseOut: function(evt) {
		if(!this._isMouseOver) return;
		this._isMouseOver = false;
		motion_Actuate.tween(this,0.1,{ scaleX : 1.0, scaleY : 1.0}).ease(motion_easing_Linear.get_easeNone());
	}
	,_initGraphics: function() {
		com_jpmata_views_BaseView.prototype._initGraphics.call(this);
		if(ie_lib_utils_device_BrowserInfoUtility.get_isDesktop()) {
			this.buttonMode = true;
			this.useHandCursor = true;
		}
		var url = null;
		if(this._btn == null) {
			url = StringTools.replace("media/images/embed/select/select_%i%.png","%i%",Std.string(this._type));
			this._btn = new ie_lib_display_PlainButton(url);
			this._btn.set_x(-(this._btn.get_width() * 0.5));
			this._btn.set_y(-(this._btn.get_height() * 0.5));
			this._btn.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btn));
			this.addChild(this._btn);
		}
		if(this._bm == null) {
			this._bm = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/select/select_tag.png"));
			this._bm.smoothing = true;
			this._bm.set_visible(false);
			if(this._type == 1) this._bm.set_x(this._btn.get_x() + 8); else if(this._type == 2) this._bm.set_x(this._btn.get_x() + 6); else if(this._type == 3) this._bm.set_x(this._btn.get_x() + 7); else if(this._type == 4) this._bm.set_x(this._btn.get_x() + 6); else if(this._type == 5) this._bm.set_x(this._btn.get_x() + 6); else if(this._type == 6) this._bm.set_x(this._btn.get_x() + 6);
			this._bm.set_y(this._btn.get_y() + 109);
			this.addChild(this._bm);
		}
		if(this._txt == null) {
			this._txt = new com_jpmata_views_text_BasicTextField(this._bm.get_width(),this._bm.get_height() * 0.9);
			this._txt.set_visible(false);
			this.addChild(this._txt);
		}
	}
	,_initListeners: function() {
		com_jpmata_views_BaseView.prototype._initListeners.call(this);
		if(this._satellite != null) {
			this.addEventListener("selEvt_chooseChar",($_=this._satellite,$bind($_,$_.handler)));
			if(ie_lib_utils_device_BrowserInfoUtility.get_isDesktop()) {
				this.addEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this._handler_mouseOver));
				this.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this._handler_mouseOut));
			}
		}
	}
	,_initProps: function(p_params) {
		com_jpmata_views_BaseView.prototype._initProps.call(this,p_params);
		this._id = null;
		this._type = null;
		this._isMouseOver = false;
		if(p_params != null) {
			if(p_params.length > 0) {
				if(p_params[0] != null) this._type = p_params[0];
			}
		}
	}
	,_killGraphics: function() {
		if(this._bm != null) {
			motion_Actuate.stop(this._bm,null,false,false);
			if(this._bm.parent != null) this._bm.parent.removeChild(this._bm);
			this._bm.bitmapData = null;
		}
		this._bm = null;
		if(this._btn != null) {
			motion_Actuate.stop(this._btn,null,false,false);
			this._btn.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handler_btn));
			if(this._btn.parent != null) this._btn.parent.removeChild(this._btn);
			this._btn.destroy();
		}
		this._btn = null;
		if(this._txt != null) {
			motion_Actuate.stop(this._txt,null,false,false);
			if(this._txt.parent != null) this._txt.parent.removeChild(this._txt);
			this._txt.destroy();
		}
		this._txt = null;
		motion_Actuate.stop(this,null,false,false);
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_BaseView.prototype._killGraphics.call(this);
	}
	,_killListeners: function() {
		if(this._satellite != null) {
			this.removeEventListener("selEvt_chooseChar",($_=this._satellite,$bind($_,$_.handler)));
			if(ie_lib_utils_device_BrowserInfoUtility.get_isDesktop()) {
				this.removeEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this._handler_mouseOver));
				this.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this._handler_mouseOut));
			}
		}
		com_jpmata_views_BaseView.prototype._killListeners.call(this);
	}
	,_killProps: function() {
		this._id = null;
		this._type = null;
		this._isMouseOver = null;
		com_jpmata_views_BaseView.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_screen_SelectItem
	,__properties__: $extend(com_jpmata_views_BaseView.prototype.__properties__,{get_type:"get_type"})
});
var nick_hol_nn_screen_SelectEvent = function(p_type,p_data,p_bubbles,p_cancelable) {
	if(p_cancelable == null) p_cancelable = false;
	if(p_bubbles == null) p_bubbles = false;
	ie_lib_events_BaseEvent.call(this,p_type,p_data,p_bubbles,p_cancelable);
};
$hxClasses["nick.hol.nn.screen.SelectEvent"] = nick_hol_nn_screen_SelectEvent;
nick_hol_nn_screen_SelectEvent.__name__ = ["nick","hol","nn","screen","SelectEvent"];
nick_hol_nn_screen_SelectEvent.__super__ = ie_lib_events_BaseEvent;
nick_hol_nn_screen_SelectEvent.prototype = $extend(ie_lib_events_BaseEvent.prototype,{
	__class__: nick_hol_nn_screen_SelectEvent
});
var nick_hol_nn_screen_TitleScreen = function() {
	com_jpmata_views_screens_openfl_ExtendedScreen.call(this);
};
$hxClasses["nick.hol.nn.screen.TitleScreen"] = nick_hol_nn_screen_TitleScreen;
nick_hol_nn_screen_TitleScreen.__name__ = ["nick","hol","nn","screen","TitleScreen"];
nick_hol_nn_screen_TitleScreen.__super__ = com_jpmata_views_screens_openfl_ExtendedScreen;
nick_hol_nn_screen_TitleScreen.prototype = $extend(com_jpmata_views_screens_openfl_ExtendedScreen.prototype,{
	enableButtons: function(p_value) {
		if(p_value == null) p_value = true;
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.enableButtons.call(this,p_value);
	}
	,screenDidAppear: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.screenDidAppear.call(this);
		if(com_jpmata_managers_SoundManager.get_instance().get_isPlayingBGM() && com_jpmata_managers_SoundManager.get_instance().get_currentBGM().name != "media/audio/embed/bgm/bgm_title.mp3") com_jpmata_managers_SoundManager.get_instance().stopBGM(true);
		if(!com_jpmata_managers_SoundManager.get_instance().get_isPlayingBGM()) com_jpmata_managers_SoundManager.get_instance().playBGM("media/audio/embed/bgm/bgm_title.mp3");
		if(nk_lib_manager_NickManager.get_instance().get_configNick().services.enableTracking == true) nicksdk_event_GameEventEmitter.sendGameEvent("onTitleScreenStart");
	}
	,screenDidDisappear: function() {
		if(nk_lib_manager_NickManager.get_instance().get_configNick().services.enableTracking == true) nicksdk_event_GameEventEmitter.sendGameEvent("onTitleScreenEnd");
		nk_lib_manager_NickManager.get_instance().trackCanada_play();
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.screenDidDisappear.call(this);
	}
	,popUpDidAppear: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.popUpDidAppear.call(this);
		this.enableButtons(false);
	}
	,popUpDidDisappear: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype.popUpDidDisappear.call(this);
		this.enableButtons(true);
	}
	,_handler_sprContainer: function(evt) {
		if(!this._isAnimDone) return;
		if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.DESKTOP) this.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._handler_sprContainer)); else this.removeEventListener("touchEnd",$bind(this,this._handler_sprContainer));
		this.enableButtons(false);
		if(nk_lib_manager_NickManager.get_instance().get_configNick().services.enableDeltaDNA == true) nk_lib_manager_NickManager.get_instance().sendDeltaUI("Title Screen","Click To Play");
		com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/general/sfx_button.mp3");
		motion_Actuate.stop(this._txtPlay,null,false,false);
		ie_lib_manager_ScreenManager.replaceScreen(new nick_hol_nn_screen_SelectScreen());
	}
	,_initAnimations: function() {
		var _g = this;
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initAnimations.call(this);
		this._txtPlay.set_visible(false);
		com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/title/snow_slide_up_01.mp3");
		motion_Actuate.tween(this._bmBg_2,0.5,{ y : this._bmBg_1.get_y() + this._bmBg_1.get_height() - this._bmBg_2.get_height()}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
			motion_Actuate.tween(_g._sprGlow,0.5,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
				motion_Actuate.tween(_g._sprGlow,5,{ rotation : 360}).smartRotation(false).ease(motion_easing_Linear.get_easeNone()).repeat();
			});
			com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/title/snow_slide_up_02.mp3");
			motion_Actuate.tween(_g._bmBg_3,0.5,{ y : _g._bmBg_1.get_y() + _g._bmBg_1.get_height() - _g._bmBg_3.get_height()}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
				com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/title/snow_slide_up_03.mp3");
				motion_Actuate.tween(_g._bmTiles,0.5,{ y : _g._bmBg_1.get_y() + _g._bmBg_1.get_height() - _g._bmTiles.get_height()}).ease(motion_easing_Quad.get_easeOut()).onComplete(function() {
					motion_Actuate.tween(_g._bmSparkles,0.5,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
						motion_Actuate.tween(_g._bmSparkles,0.5,{ alpha : 0.5}).ease(motion_easing_Linear.get_easeNone()).repeat().reflect();
					});
					_g._bmAlvin.set_visible(true);
					_g._bmHenry.set_visible(true);
					_g._bmLincoln.set_visible(true);
					_g._bmNRDD.set_visible(true);
					_g._bmPhoebe.set_visible(true);
					_g._bmSpongebob.set_visible(true);
					motion_Actuate.tween(_g._bmTiles,0.15,{ y : _g._bmTiles.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
						com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/game/item_spawn.mp3");
					});
					ie_lib_utils_actuate_ActuateUtility.popInObjects([_g._bmSpongebob,_g._bmLincoln,_g._bmHenry,_g._bmPhoebe,_g._bmAlvin,_g._bmNRDD],null,0.15,motion_easing_Bounce.get_easeOut(),"media/audio/embed/sfx/game/item_spawn.mp3",function() {
						com_jpmata_managers_SoundManager.get_instance().playSFX("media/audio/embed/sfx/title/title_drop.mp3");
						motion_Actuate.tween(_g._bmLogo,0.5,{ y : _g._bmBg_1.get_y()}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
							motion_Actuate.tween(_g._bmLogo,2,{ y : _g._bmBg_1.get_y() + -20}).ease(motion_easing_Linear.get_easeNone()).repeat().reflect();
							_g._txtPlay.set_visible(true);
							ie_lib_utils_actuate_ActuateUtility.popInObjects([_g._txtPlay],null,0.15,null,null,function() {
								_g.enableButtons(true);
								_g._isAnimDone = true;
								motion_Actuate.tween(_g._txtPlay,1,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).repeat().reflect();
							});
						});
					});
				});
			});
		});
	}
	,_initGraphics: function() {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initGraphics.call(this);
		this.enableButtons(false);
		if(this._bmBg_1 == null) {
			this._bmBg_1 = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_bg1.png"));
			this._bmBg_1.smoothing = true;
			this._bmBg_1.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmBg_1.get_width() * 0.5);
			this._bmBg_1.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height * 0.5 - this._bmBg_1.get_height() * 0.5);
			this.addChild(this._bmBg_1);
		}
		if(this._sprGlow == null) {
			this._sprGlow = new openfl_display_Sprite();
			this._sprGlow.set_alpha(0);
			this._sprGlow.set_x(this._bmBg_1.get_x() + this._bmBg_1.get_width() * 0.5);
			this._sprGlow.set_y(this._bmBg_1.get_y() + 100);
			this.addChild(this._sprGlow);
		}
		if(this._bmGlow == null) {
			this._bmGlow = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_glow.png"));
			this._bmGlow.smoothing = true;
			this._bmGlow.set_x(-(this._bmGlow.get_width() * 0.5));
			this._bmGlow.set_y(-(this._bmGlow.get_height() * 0.5));
			this._sprGlow.addChild(this._bmGlow);
		}
		if(this._bmBg_2 == null) {
			this._bmBg_2 = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_bg2.png"));
			this._bmBg_2.smoothing = true;
			this._bmBg_2.set_x(this._bmBg_1.get_x() + this._bmBg_1.get_width() * 0.5 - this._bmBg_2.get_width() * 0.5);
			this._bmBg_2.set_y(this._bmBg_1.get_y() + this._bmBg_1.get_height());
			this.addChild(this._bmBg_2);
		}
		if(this._bmBg_3 == null) {
			this._bmBg_3 = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_bg3.png"));
			this._bmBg_3.smoothing = true;
			this._bmBg_3.set_x(this._bmBg_1.get_x() + this._bmBg_1.get_width() * 0.5 - this._bmBg_3.get_width() * 0.5);
			this._bmBg_3.set_y(this._bmBg_1.get_y() + this._bmBg_1.get_height());
			this.addChild(this._bmBg_3);
		}
		if(this._bmLogo == null) {
			this._bmLogo = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/localized/title/ts_title.png"));
			this._bmLogo.smoothing = true;
			this._bmLogo.set_x(this._bmBg_1.get_x());
			this._bmLogo.set_y(this._bmBg_1.get_y() - this._bmLogo.get_height());
			this.addChild(this._bmLogo);
		}
		if(this._bmTiles == null) {
			this._bmTiles = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_tiles.png"));
			this._bmTiles.smoothing = true;
			this._bmTiles.set_x(this._bmBg_1.get_x() + this._bmBg_1.get_width() - this._bmTiles.get_width());
			this._bmTiles.set_y(this._bmBg_1.get_y() + this._bmBg_1.get_height());
			this.addChild(this._bmTiles);
		}
		if(this._bmSparkles == null) {
			this._bmSparkles = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_sparkles.png"));
			this._bmSparkles.smoothing = true;
			this._bmSparkles.set_alpha(0);
			this._bmSparkles.set_x(this._bmBg_1.get_x() + this._bmBg_1.get_width() - this._bmSparkles.get_width());
			this._bmSparkles.set_y(this._bmBg_1.get_y() + this._bmBg_1.get_height() - this._bmSparkles.get_height());
			this.addChild(this._bmSparkles);
		}
		if(this._bmNRDD == null) {
			this._bmNRDD = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_char_nrdd.png"));
			this._bmNRDD.smoothing = true;
			this._bmNRDD.set_visible(false);
			this._bmNRDD.set_x(this._bmBg_1.get_x() + 665);
			this._bmNRDD.set_y(this._bmBg_1.get_y() + 114);
			this.addChild(this._bmNRDD);
		}
		if(this._bmAlvin == null) {
			this._bmAlvin = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_char_alvin.png"));
			this._bmAlvin.smoothing = true;
			this._bmAlvin.set_visible(false);
			this._bmAlvin.set_x(this._bmBg_1.get_x() + 558);
			this._bmAlvin.set_y(this._bmBg_1.get_y() + 162);
			if(nk_lib_manager_NickManager.get_instance().get_configGame().enabledAlvin) this.addChild(this._bmAlvin);
		}
		if(this._bmPhoebe == null) {
			this._bmPhoebe = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_char_phoebe.png"));
			this._bmPhoebe.smoothing = true;
			this._bmPhoebe.set_visible(false);
			this._bmPhoebe.set_x(this._bmBg_1.get_x() + 395);
			this._bmPhoebe.set_y(this._bmBg_1.get_y() + 176);
			this.addChild(this._bmPhoebe);
		}
		if(this._bmHenry == null) {
			this._bmHenry = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_char_henry.png"));
			this._bmHenry.smoothing = true;
			this._bmHenry.set_visible(false);
			this._bmHenry.set_x(this._bmBg_1.get_x() + 185);
			this._bmHenry.set_y(this._bmBg_1.get_y() + 242);
			this.addChild(this._bmHenry);
		}
		if(this._bmLincoln == null) {
			this._bmLincoln = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_char_lincoln.png"));
			this._bmLincoln.smoothing = true;
			this._bmLincoln.set_visible(false);
			this._bmLincoln.set_x(this._bmBg_1.get_x() + 400);
			this._bmLincoln.set_y(this._bmBg_1.get_y() + 257);
			this.addChild(this._bmLincoln);
		}
		if(this._bmSpongebob == null) {
			this._bmSpongebob = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/title/ts_char_spongebob.png"));
			this._bmSpongebob.smoothing = true;
			this._bmSpongebob.set_visible(false);
			this._bmSpongebob.set_x(this._bmBg_1.get_x() + 630);
			this._bmSpongebob.set_y(this._bmBg_1.get_y() + 207);
			this.addChild(this._bmSpongebob);
		}
		if(this._bmTint == null) {
			this._bmTint = new openfl_display_Bitmap(ie_lib_utils_assets_AssetsUtility.getBitmapData("media/images/embed/gen/message_tint.png"));
			this._bmTint.smoothing = true;
			this._bmTint.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._bmTint.get_width() * 0.5);
			this._bmTint.set_y(ie_lib_utils_display_DisplayUtility.get_viewRect().y + ie_lib_utils_display_DisplayUtility.get_viewRect().height - this._bmTint.get_height());
			this._bmTint.set_height(this._bmTint.get_height() + 2);
			this.addChild(this._bmTint);
		}
		if(this._txtPlay == null) {
			this._txtPlay = new com_jpmata_views_text_BasicTextField(500,50);
			this._txtPlay.set_alpha(0.5);
			var strTitle = null;
			if(ie_lib_utils_device_BrowserInfoUtility.get_isDesktop()) strTitle = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrTitle_txtPlay_desktop"); else strTitle = nk_lib_manager_NickManager.get_instance().getLocalizedText("scrTitle_txtPlay_mobile");
			this._txtPlay.setString(strTitle);
			this._txtPlay.setColor(16777215);
			this._txtPlay.set_x(ie_lib_utils_display_DisplayUtility.get_viewRect().x + ie_lib_utils_display_DisplayUtility.get_viewRect().width * 0.5 - this._txtPlay.get_boundsWidth() * 0.5 + strTitle.OFFSET_X);
			this._txtPlay.set_y(this._bmTint.get_y() + this._bmTint.get_height() - this._txtPlay.get_boundsHeight() + strTitle.OFFSET_Y);
			this.addChild(this._txtPlay);
		}
		if(ie_lib_utils_device_BrowserInfoUtility.detectBrowser().deviceType == ie_lib_utils_device_BrowserDeviceType.DESKTOP) this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this._handler_sprContainer)); else this.addEventListener("touchEnd",$bind(this,this._handler_sprContainer));
	}
	,_initProps: function(p_params) {
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._initProps.call(this,p_params);
		this._isAnimDone = false;
	}
	,_killGraphics: function() {
		if(this._bmBg_1 != null) {
			motion_Actuate.stop(this._bmBg_1,null,false,false);
			if(this._bmBg_1.parent != null) this._bmBg_1.parent.removeChild(this._bmBg_1);
			if(this._bmBg_1.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmBg_1.bitmapData);
			this._bmBg_1.bitmapData = null;
		}
		this._bmBg_1 = null;
		if(this._bmBg_2 != null) {
			motion_Actuate.stop(this._bmBg_2,null,false,false);
			if(this._bmBg_2.parent != null) this._bmBg_2.parent.removeChild(this._bmBg_2);
			if(this._bmBg_2.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmBg_2.bitmapData);
			this._bmBg_2.bitmapData = null;
		}
		this._bmBg_2 = null;
		if(this._bmBg_3 != null) {
			motion_Actuate.stop(this._bmBg_3,null,false,false);
			if(this._bmBg_3.parent != null) this._bmBg_3.parent.removeChild(this._bmBg_3);
			if(this._bmBg_3.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmBg_3.bitmapData);
			this._bmBg_3.bitmapData = null;
		}
		this._bmBg_3 = null;
		if(this._bmGlow != null) {
			motion_Actuate.stop(this._bmGlow,null,false,false);
			if(this._bmGlow.parent != null) this._bmGlow.parent.removeChild(this._bmGlow);
			if(this._bmGlow.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmGlow.bitmapData);
			this._bmGlow.bitmapData = null;
		}
		this._bmGlow = null;
		if(this._bmSparkles != null) {
			motion_Actuate.stop(this._bmSparkles,null,false,false);
			if(this._bmSparkles.parent != null) this._bmSparkles.parent.removeChild(this._bmSparkles);
			if(this._bmSparkles.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmSparkles.bitmapData);
			this._bmSparkles.bitmapData = null;
		}
		this._bmSparkles = null;
		if(this._bmTiles != null) {
			motion_Actuate.stop(this._bmTiles,null,false,false);
			if(this._bmTiles.parent != null) this._bmTiles.parent.removeChild(this._bmTiles);
			if(this._bmTiles.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmTiles.bitmapData);
			this._bmTiles.bitmapData = null;
		}
		this._bmTiles = null;
		if(this._bmLogo != null) {
			motion_Actuate.stop(this._bmLogo,null,false,false);
			if(this._bmLogo.parent != null) this._bmLogo.parent.removeChild(this._bmLogo);
			if(this._bmLogo.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmLogo.bitmapData);
			this._bmLogo.bitmapData = null;
		}
		this._bmLogo = null;
		if(this._bmAlvin != null) {
			motion_Actuate.stop(this._bmAlvin,null,false,false);
			if(this._bmAlvin.parent != null) this._bmAlvin.parent.removeChild(this._bmAlvin);
			if(this._bmAlvin.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmAlvin.bitmapData);
			this._bmAlvin.bitmapData = null;
		}
		this._bmAlvin = null;
		if(this._bmHenry != null) {
			motion_Actuate.stop(this._bmHenry,null,false,false);
			if(this._bmHenry.parent != null) this._bmHenry.parent.removeChild(this._bmHenry);
			if(this._bmHenry.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmHenry.bitmapData);
			this._bmHenry.bitmapData = null;
		}
		this._bmHenry = null;
		if(this._bmLincoln != null) {
			motion_Actuate.stop(this._bmLincoln,null,false,false);
			if(this._bmLincoln.parent != null) this._bmLincoln.parent.removeChild(this._bmLincoln);
			if(this._bmLincoln.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmLincoln.bitmapData);
			this._bmLincoln.bitmapData = null;
		}
		this._bmLincoln = null;
		if(this._bmNRDD != null) {
			motion_Actuate.stop(this._bmNRDD,null,false,false);
			if(this._bmNRDD.parent != null) this._bmNRDD.parent.removeChild(this._bmNRDD);
			if(this._bmNRDD.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmNRDD.bitmapData);
			this._bmNRDD.bitmapData = null;
		}
		this._bmNRDD = null;
		if(this._bmPhoebe != null) {
			motion_Actuate.stop(this._bmPhoebe,null,false,false);
			if(this._bmPhoebe.parent != null) this._bmPhoebe.parent.removeChild(this._bmPhoebe);
			if(this._bmPhoebe.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmPhoebe.bitmapData);
			this._bmPhoebe.bitmapData = null;
		}
		this._bmPhoebe = null;
		if(this._bmSpongebob != null) {
			motion_Actuate.stop(this._bmSpongebob,null,false,false);
			if(this._bmSpongebob.parent != null) this._bmSpongebob.parent.removeChild(this._bmSpongebob);
			if(this._bmSpongebob.bitmapData != null) ie_lib_utils_gc_DestroyUtility.destroyBitmapData(this._bmSpongebob.bitmapData);
			this._bmSpongebob.bitmapData = null;
		}
		this._bmSpongebob = null;
		if(this._bmTint != null) {
			motion_Actuate.stop(this._bmTint,null,false,false);
			if(this._bmTint.parent != null) this._bmTint.parent.removeChild(this._bmTint);
			this._bmTint.bitmapData = null;
		}
		this._bmTint = null;
		if(this._txtPlay != null) {
			motion_Actuate.stop(this._txtPlay,null,false,false);
			if(this._txtPlay.parent != null) this._txtPlay.parent.removeChild(this._txtPlay);
			this._txtPlay.destroy();
		}
		this._txtPlay = null;
		ie_lib_utils_gc_DestroyUtility.destroyBitmapChildren(this);
		ie_lib_utils_gc_DestroyUtility.destroyChildren(this);
		this.removeChildren();
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killGraphics.call(this);
	}
	,_killProps: function() {
		this._isAnimDone = null;
		com_jpmata_views_screens_openfl_ExtendedScreen.prototype._killProps.call(this);
	}
	,__class__: nick_hol_nn_screen_TitleScreen
});
var nicksdk_AntiPiracy = function() { };
$hxClasses["nicksdk.AntiPiracy"] = nicksdk_AntiPiracy;
nicksdk_AntiPiracy.__name__ = ["nicksdk","AntiPiracy"];
nicksdk_AntiPiracy.checkPiracy = function(url) {
	if(url == null) url = "";
	nicksdk_SDK["eval"]("nick_sdk_client.AntiPiracy.checkPiracy",[url]);
};
var nicksdk_SDK = function() {
	nicksdk_SDK["eval"]("nick_sdk_client.SDK.initialize");
};
$hxClasses["nicksdk.SDK"] = nicksdk_SDK;
nicksdk_SDK.__name__ = ["nicksdk","SDK"];
nicksdk_SDK["eval"] = function(name,params) {
	if(params == null) params = [];
	var object = null;
	var method = null;
	var _g = 0;
	var _g1 = name.split(".");
	while(_g < _g1.length) {
		var fieldName = _g1[_g];
		++_g;
		object = method;
		if(object == null) method = Reflect.field(window,fieldName); else method = Reflect.field(object,fieldName);
	}
	var ret = null;
	if(method != null) ret = method.apply(object,params); else null;
	return ret;
};
nicksdk_SDK.bind = function(name,fn) {
	var object = null;
	var method = null;
	var methodName = "";
	var _g = 0;
	var _g1 = name.split(".");
	while(_g < _g1.length) {
		var fieldName = _g1[_g];
		++_g;
		object = method;
		methodName = fieldName;
		if(object == null) method = Reflect.field(window,fieldName); else method = Reflect.field(object,fieldName);
	}
	if(object == null) null; else object[methodName] = fn;
};
nicksdk_SDK.prototype = {
	__class__: nicksdk_SDK
};
var nicksdk_event_GameEventEmitter = function() { };
$hxClasses["nicksdk.event.GameEventEmitter"] = nicksdk_event_GameEventEmitter;
nicksdk_event_GameEventEmitter.__name__ = ["nicksdk","event","GameEventEmitter"];
nicksdk_event_GameEventEmitter.sendGameEvent = function(name,value) {
	nicksdk_event_GameEventEmitter.callExternal(name,value);
};
nicksdk_event_GameEventEmitter.callExternal = function(name,object,isDeltaDNA) {
	if(isDeltaDNA == null) isDeltaDNA = false;
	nicksdk_SDK["eval"]("nick_sdk_client.GameEventEmitter.sendGameEvent",[name,object]);
};
var nicksdk_event_GameEventListener = function() { };
$hxClasses["nicksdk.event.GameEventListener"] = nicksdk_event_GameEventListener;
nicksdk_event_GameEventListener.__name__ = ["nicksdk","event","GameEventListener"];
nicksdk_event_GameEventListener.__properties__ = {set_onDebugModeToggle:"set_onDebugModeToggle",set_onSuspendToggle:"set_onSuspendToggle",set_onPlaybackToggle:"set_onPlaybackToggle",set_onAudioToggle:"set_onAudioToggle"}
nicksdk_event_GameEventListener.onAudioToggle = null;
nicksdk_event_GameEventListener.onPlaybackToggle = null;
nicksdk_event_GameEventListener.onSuspendToggle = null;
nicksdk_event_GameEventListener.onDebugModeToggle = null;
nicksdk_event_GameEventListener.set_onAudioToggle = function(newFn) {
	nicksdk_event_GameEventListener.onAudioToggle = newFn;
	nicksdk_SDK.bind("nick_sdk_client.GameEventListener." + "onAudioToggle",newFn);
	return newFn;
};
nicksdk_event_GameEventListener.set_onPlaybackToggle = function(newFn) {
	nicksdk_event_GameEventListener.onPlaybackToggle = newFn;
	nicksdk_SDK.bind("nick_sdk_client.GameEventListener." + "onPlaybackToggle",newFn);
	return newFn;
};
nicksdk_event_GameEventListener.set_onSuspendToggle = function(newFn) {
	nicksdk_event_GameEventListener.onSuspendToggle = newFn;
	nicksdk_SDK.bind("nick_sdk_client.GameEventListener." + "onSuspendToggle",newFn);
	return newFn;
};
nicksdk_event_GameEventListener.set_onDebugModeToggle = function(newFn) {
	nicksdk_event_GameEventListener.onDebugModeToggle = newFn;
	nicksdk_SDK.bind("nick_sdk_client.GameEventListener." + "onDebugModeToggle",newFn);
	return newFn;
};
var nicksdk_jsembed_JSEmbedProxy = function() { };
$hxClasses["nicksdk.jsembed.JSEmbedProxy"] = nicksdk_jsembed_JSEmbedProxy;
nicksdk_jsembed_JSEmbedProxy.__name__ = ["nicksdk","jsembed","JSEmbedProxy"];
nicksdk_jsembed_JSEmbedProxy.__properties__ = {get_base:"get_base"}
nicksdk_jsembed_JSEmbedProxy.get_base = function() {
	return nicksdk_jsembed_JSEmbedProxy.callJSEmbedMethod("baseUrl()");
};
nicksdk_jsembed_JSEmbedProxy.callJSEmbedMethod = function(pRequest) {
	try {
		var result = nicksdk_jsembed_JSEmbedProxy["eval"]("eval",["jsembed." + pRequest]);
		if(result == null) return ""; else return result;
	} catch( err ) {
		if (err instanceof js__$Boot_HaxeError) err = err.val;
	}
	return "";
};
nicksdk_jsembed_JSEmbedProxy["eval"] = function(name,params) {
	if(params == null) params = [];
	var object = null;
	var method = null;
	var _g = 0;
	var _g1 = name.split(".");
	while(_g < _g1.length) {
		var fieldName = _g1[_g];
		++_g;
		if(object == null) method = Reflect.field(window,fieldName); else method = Reflect.field(object,fieldName);
	}
	return method.apply(object,params);
	return null;
};
var nk_lib_deltadna_AsyncRequest = function(task) {
	this.task = task;
};
$hxClasses["nk.lib.deltadna.AsyncRequest"] = nk_lib_deltadna_AsyncRequest;
nk_lib_deltadna_AsyncRequest.__name__ = ["nk","lib","deltadna","AsyncRequest"];
nk_lib_deltadna_AsyncRequest.createRequest = function(task) {
	var request = new nk_lib_deltadna_AsyncRequest(task);
	return { request : request, resolveSuccess : $bind(request,request.resolveSuccess), resolveError : $bind(request,request.resolveError)};
};
nk_lib_deltadna_AsyncRequest.prototype = {
	resolveSuccess: function(successObject) {
		if(this.successCallback != null) this.successCallback(successObject);
	}
	,resolveError: function(errorObject) {
		if(this.errorCallback != null) this.errorCallback(errorObject);
	}
	,onSuccess: function(successCallback) {
		this.successCallback = successCallback;
		return this;
	}
	,onError: function(errorCallback) {
		this.errorCallback = errorCallback;
		return this;
	}
	,begin: function() {
		this.task();
	}
	,__class__: nk_lib_deltadna_AsyncRequest
};
var nk_lib_deltadna_Bowser = function(ua) {
	this.ua = ua;
};
$hxClasses["nk.lib.deltadna.Bowser"] = nk_lib_deltadna_Bowser;
nk_lib_deltadna_Bowser.__name__ = ["nk","lib","deltadna","Bowser"];
nk_lib_deltadna_Bowser.prototype = {
	getFirstMatch: function(regex) {
		var match = regex.r.exec(this.ua);
		if(match != null) {
			if(match.length > 1) {
				if(match[1] != "") return match[1];
			}
		}
		return "";
	}
	,getSecondMatch: function(regex) {
		var match = regex.r.exec(this.ua);
		if(match != null) {
			if(match.length > 1) {
				if(match[2] != "") return match[2];
			}
		}
		return "";
	}
	,bowse: function() {
		var t = true;
		var iosdevice = this.getFirstMatch(new nk_lib_deltadna_Regex("(ipod|iphone|ipad)","i")).toLowerCase();
		var likeAndroid = new nk_lib_deltadna_Regex("like android","i").test(this.ua);
		var android = !likeAndroid && new nk_lib_deltadna_Regex("android","i").test(this.ua);
		var chromeos = new nk_lib_deltadna_Regex("CrOS","").test(this.ua);
		var silk = new nk_lib_deltadna_Regex("silk","i").test(this.ua);
		var sailfish = new nk_lib_deltadna_Regex("sailfish","i").test(this.ua);
		var tizen = new nk_lib_deltadna_Regex("tizen","i").test(this.ua);
		var webos = new nk_lib_deltadna_Regex("(web|hpw)os","i").test(this.ua);
		var windowsphone = new nk_lib_deltadna_Regex("windows phone","i").test(this.ua);
		var windows = !windowsphone && new nk_lib_deltadna_Regex("windows","i").test(this.ua);
		var mac = iosdevice == "" && !silk && new nk_lib_deltadna_Regex("macintosh","i").test(this.ua);
		var linux = !android && !sailfish && !tizen && !webos && new nk_lib_deltadna_Regex("linux","i").test(this.ua);
		var edgeVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("edge\\/(\\d+(\\.\\d+)?)","i"));
		var versionIdentifier = this.getFirstMatch(new nk_lib_deltadna_Regex("version\\/(\\d+(\\.\\d+)?)","i"));
		var tablet = new nk_lib_deltadna_Regex("tablet","i").test(this.ua);
		var mobile = !tablet && new nk_lib_deltadna_Regex("[^-]mobi","i").test(this.ua);
		var result = { name : "", android : false, silk : false, sailfish : false, chromeos : false, chromeBook : false, chrome : false, tizen : false, webos : false, windowsphone : false, windows : false, mac : false, linux : false, edgeVersion : "", tablet : false, mobile : false, version : "", opera : false, yandexbrowser : false, msedge : false, msie : false, seamonkey : false, firefox : false, phantom : false, firefoxos : false, blackberry : false, touchpad : false, bada : false, safari : false, webkit : false, gecko : false, ios : false, osversion : "", a : false, c : false, x : false};
		if(new nk_lib_deltadna_Regex("opera|opr","i").test(this.ua)) {
			result.name = "Opera";
			result.opera = t;
			if(versionIdentifier != "") result.version = versionIdentifier; else result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("(?:opera|opr)[\\s\\/](\\d+(\\.\\d+)?)","i"));
		} else if(new nk_lib_deltadna_Regex("yabrowser","i").test(this.ua)) {
			result.name = "Yandex Browser";
			result.yandexbrowser = t;
			if(versionIdentifier != "") result.version = versionIdentifier; else result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("(?:yabrowser)[\\s\\/](\\d+(\\.\\d+)?)","i"));
		} else if(windowsphone) {
			result.name = "Windows Phone";
			result.windowsphone = t;
			if(edgeVersion != "") {
				result.msedge = t;
				result.version = edgeVersion;
			} else {
				result.msie = t;
				result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("iemobile\\/(\\d+(\\.\\d+)?)","i"));
			}
		} else if(new nk_lib_deltadna_Regex("msie|trident","i").test(this.ua)) {
			result.name = "Internet Explorer";
			result.msie = t;
			result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("(?:msie |rv:)(\\d+(\\.\\d+)?)","i"));
		} else if(chromeos) {
			result.name = "Chrome";
			result.chromeos = t;
			result.chromeBook = t;
			result.chrome = t;
			result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)","i"));
		} else if(new nk_lib_deltadna_Regex("chrome.+? edge","i").test(this.ua)) {
			result.name = "Microsoft Edge";
			result.msedge = t;
			result.version = edgeVersion;
		} else if(new nk_lib_deltadna_Regex("chrome|crios|crmo","i").test(this.ua)) {
			result.name = "Chrome";
			result.chrome = t;
			result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)","i"));
		} else if(iosdevice != "") {
			if(iosdevice == "iphone") result.name = "iPhone"; else if(iosdevice == "ipad") result.name = "iPad"; else result.name = "iPod";
			if(versionIdentifier != "") result.version = versionIdentifier;
		} else if(sailfish) {
			result.name = "Sailfish";
			result.sailfish = t;
			result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("sailfish\\s?browser\\/(\\d+(\\.\\d+)?)","i"));
		} else if(new nk_lib_deltadna_Regex("seamonkey\\/","i").test(this.ua)) {
			result.name = "SeaMonkey";
			result.seamonkey = t;
			result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("seamonkey\\/(\\d+(\\.\\d+)?)","i"));
		} else if(new nk_lib_deltadna_Regex("firefox|iceweasel","i").test(this.ua)) {
			result.name = "Firefox";
			result.firefox = t;
			result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("(?:firefox|iceweasel)[ \\/](\\d+(\\.\\d+)?)","i"));
			if(new nk_lib_deltadna_Regex("\\((mobile|tablet);[^\\)]*rv:[\\d\\.]+\\)","i").test(this.ua)) result.firefoxos = t;
		} else if(silk) {
			result.name = "Amazon Silk";
			result.silk = t;
			result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("silk\\/(\\d+(\\.\\d+)?)","i"));
		} else if(android) {
			result.name = "Android";
			result.version = versionIdentifier;
		} else if(new nk_lib_deltadna_Regex("phantom","i").test(this.ua)) {
			result.name = "PhantomJS";
			result.phantom = t;
			result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("phantomjs\\/(\\d+(\\.\\d+)?)","i"));
		} else if(new nk_lib_deltadna_Regex("blackberry|\\bbb\\d+","i").test(this.ua) || new nk_lib_deltadna_Regex("rim\\stablet","i").test(this.ua)) {
			result.name = "BlackBerry";
			result.blackberry = t;
			if(versionIdentifier != "") result.version = versionIdentifier; else result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("blackberry[\\d]+\\/(\\d+(\\.\\d+)?)","i"));
		} else if(webos) {
			result.name = "WebOS";
			result.webos = t;
			if(versionIdentifier != "") result.version = versionIdentifier; else result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("w(?:eb)?osbrowser\\/(\\d+(\\.\\d+)?)","i"));
			if(new nk_lib_deltadna_Regex("touchpad\\/","i").test(this.ua)) result.touchpad = t;
		} else if(new nk_lib_deltadna_Regex("bada","i").test(this.ua)) {
			result.name = "Bada";
			result.bada = t;
			result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("dolfin\\/(\\d+(\\.\\d+)?)","i"));
		} else if(tizen) {
			var tizenMatch = this.getFirstMatch(new nk_lib_deltadna_Regex("(?:tizen\\s?)?browser\\/(\\d+(\\.\\d+)?)","i"));
			result.name = "Tizen";
			result.tizen = t;
			if(tizenMatch != "") result.version = tizenMatch; else result.version = versionIdentifier;
		} else if(new nk_lib_deltadna_Regex("safari","i").test(this.ua)) {
			result.name = "Safari";
			result.safari = t;
			result.version = versionIdentifier;
		} else {
			result.name = this.getFirstMatch(new nk_lib_deltadna_Regex("^(.*)\\/(.*) ",""));
			result.version = this.getSecondMatch(new nk_lib_deltadna_Regex("^(.*)\\/(.*) ",""));
		}
		if(!result.msedge && new nk_lib_deltadna_Regex("(apple)?webkit","i").test(this.ua)) {
			if(result.name != "") result.name = result.name; else result.name = "Webkit";
			result.webkit = t;
			if(result.version == "" && versionIdentifier != "") result.version = versionIdentifier;
		} else if(!result.opera && new nk_lib_deltadna_Regex("gecko\\/","i").test(this.ua)) {
			if(result.name != "") result.name = result.name; else result.name = "Gecko";
			result.gecko = t;
			if(result.version != "") result.version = result.version; else result.version = this.getFirstMatch(new nk_lib_deltadna_Regex("gecko\\/(\\d+(\\.\\d+)?)","i"));
		}
		if(!result.msedge && (android || result.silk)) result.android = t; else if(iosdevice != "") {
			result[iosdevice] = t;
			result.ios = t;
		} else if(windows) result.windows = t; else if(mac) result.mac = t; else if(linux) result.linux = t;
		var osVersion = "";
		if(result.windowsphone) osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)","i")); else if(iosdevice != "") {
			osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("os (\\d+([_\\s]\\d+)*) like mac os x","i"));
			osVersion = osVersion.replace(new nk_lib_deltadna_Regex("[_\\s]","g").r,".");
		} else if(android) osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("android[ \\/-](\\d+(\\.\\d+)*)","i")); else if(result.webos) osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("(?:web|hpw)os\\/(\\d+(\\.\\d+)*)","i")); else if(result.blackberry) osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)","i")); else if(result.bada) osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("bada\\/(\\d+(\\.\\d+)*)","i")); else if(result.tizen) osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("tizen[\\/\\s](\\d+(\\.\\d+)*)","i")); else if(result.windows) osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("windows nt[\\/\\s](\\d+(\\.\\d+)*)","i")); else if(result.linux) osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("linux[\\/\\s](\\w+)","i")); else if(result.mac) osVersion = this.getFirstMatch(new nk_lib_deltadna_Regex("intel mac os x[\\/\\s](\\d+(_\\d+)*)","i"));
		if(osVersion != "") result.osversion = osVersion;
		var osMajorVersion = osVersion.split(".")[0];
		if(tablet || iosdevice == "ipad" || android && (Std.parseInt(osMajorVersion) == 3 || Std.parseInt(osMajorVersion) == 4 && !mobile) || result.silk) result.tablet = t; else if(mobile || iosdevice == "iphone" || iosdevice == "ipod" || android || result.blackberry || result.webos || result.bada) result.mobile = t;
		if(result.msedge || result.msie && Std.parseInt(result.version) >= 10 || result.yandexbrowser && Std.parseInt(result.version) >= 15 || result.chrome && Std.parseInt(result.version) >= 20 || result.firefox && Std.parseInt(result.version) >= 20.0 || result.safari && Std.parseInt(result.version) >= 6 || result.opera && Std.parseInt(result.version) >= 10.0 || result.ios && result.osversion != "" && Std.parseInt(result.osversion.split(".")[0]) >= 6 || result.blackberry && Std.parseInt(result.version) >= 10.1) result.a = t; else if(result.msie && Std.parseInt(result.version) < 10 || result.chrome && Std.parseInt(result.version) < 20 || result.firefox && Std.parseInt(result.version) < 20.0 || result.safari && Std.parseInt(result.version) < 6 || result.opera && Std.parseInt(result.version) < 10.0 || result.ios && result.osversion != "" && Std.parseInt(result.osversion.split(".")[0]) < 6) result.c = t; else result.x = t;
		return result;
	}
	,__class__: nk_lib_deltadna_Bowser
};
var nk_lib_deltadna_DeltaDNAAPI = $hx_exports.nk.lib.deltadna.DeltaDNAAPI = function(collectAPIEndpoint,uuid,key,gameURL) {
	this.newPlayer = false;
	this.platform = null;
	this.collectAPIEndpoint = collectAPIEndpoint + key;
	var user = nk_lib_deltadna_DeltaDNAAPI.getUser();
	if(user != "") this.uuid = user; else {
		this.newPlayer = true;
		this.uuid = uuid;
		nk_lib_deltadna_DeltaDNAAPI.setUser(uuid);
	}
	this.sessid = uuid;
	var _g = 0;
	var _g1 = [".?*+^$[]\\(){}|-"];
	while(_g < _g1.length) {
		var $escape = _g1[_g];
		++_g;
		gameURL = StringTools.replace(gameURL,$escape,"\\" + $escape);
	}
	this.nickwebRegex = new nk_lib_deltadna_Regex("^" + gameURL + "\\.html$");
	this.androidMobileAppRegex = new nk_lib_deltadna_Regex("^" + gameURL + "\\?apiKey=en_US_Nick_([mt])$");
	this.iosMobileAppRegex = new nk_lib_deltadna_Regex("^" + gameURL + "\\?apiKey=([a-zA-Z0-9]+)$");
};
$hxClasses["nk.lib.deltadna.DeltaDNAAPI"] = nk_lib_deltadna_DeltaDNAAPI;
nk_lib_deltadna_DeltaDNAAPI.__name__ = ["nk","lib","deltadna","DeltaDNAAPI"];
nk_lib_deltadna_DeltaDNAAPI.requestNew = function(collectAPIEndpoint,key,gameURL) {
	var http = new haxe_Http(collectAPIEndpoint + "uuid");
	http.setHeader("Content-Type","application/json");
	var request = nk_lib_deltadna_AsyncRequest.createRequest((function(f,a1) {
		return function() {
			f(a1);
		};
	})($bind(http,http.request),false));
	http.onData = (function(f1,a11,a2,a3,a4) {
		return function(a5) {
			f1(a11,a2,a3,a4,a5);
		};
	})(nk_lib_deltadna_DeltaDNAAPI.onData,collectAPIEndpoint,key,gameURL,request.resolveSuccess);
	http.onError = (function(f2,a12) {
		return function(a21) {
			f2(a12,a21);
		};
	})(nk_lib_deltadna_DeltaDNAAPI.onError,request.resolveError);
	return request.request;
};
nk_lib_deltadna_DeltaDNAAPI.getUser = function() {
	var localStorage = window.localStorage.getItem("uuid");
	if(localStorage == null) return ""; else return localStorage;
};
nk_lib_deltadna_DeltaDNAAPI.setUser = function(uuid) {
	window.localStorage.setItem("uuid",uuid);
};
nk_lib_deltadna_DeltaDNAAPI.onData = function(url,key,gameURL,onSuccess,data) {
	var uuid = JSON.parse(data).userID;
	onSuccess(new nk_lib_deltadna_DeltaDNAAPI(url,uuid,key,gameURL));
};
nk_lib_deltadna_DeltaDNAAPI.onError = function(onError,error) {
	onError(error);
};
nk_lib_deltadna_DeltaDNAAPI.prototype = {
	sendEvent: function(data) {
		var http = new haxe_Http(this.collectAPIEndpoint);
		http.setHeader("Content-Type","application/json");
		http.setPostData(JSON.stringify(data));
		http.request(true);
	}
	,getUA: function() {
		return window.navigator.userAgent;
	}
	,getReferrer: function() {
		return window.document.referrer;
	}
	,getCurrentURL: function() {
		return window.document.URL;
	}
	,determinePlatform: function(referrerInput) {
		if(this.platform != null) return this.platform;
		var referrer = null;
		if(referrerInput != null) referrer = referrerInput; else referrer = this.getReferrer();
		if(referrer == "") referrer = this.getCurrentURL();
		if(this.nickwebRegex.r.test(referrer)) {
			if(this.getClientDeviceInfo().tablet) this.platform = "NICKWEB_TABLET"; else if(this.getClientDeviceInfo().mobile) this.platform = "NICKWEB_MOBILE"; else this.platform = "NICKWEB_DESKTOP";
		} else if(this.iosMobileAppRegex.r.test(referrer)) this.platform = "IOS_MOBILEAPP"; else if(this.determineAndroid()) this.platform = "ANDROID_MOBILEAPP"; else this.platform = "PIRACY_UNKNOWN";
		return this.platform;
	}
	,determineAndroid: function() {
		if(!this.getClientDeviceInfo().android) return false;
		var androidRegex = new nk_lib_deltadna_Regex("https?:\\/\\/(.+\\.)?nick\\.com\\/games\\/data(.+)?");
		var ludeiRegex = new nk_lib_deltadna_Regex("https?:\\/\\/(.+\\.)?ludei\\.com\\/?(.+)?");
		if(androidRegex.test(this.getReferrer())) return true;
		if(ludeiRegex.test(this.getReferrer())) return true;
		return false;
	}
	,newPlayerEvent: function(p_version) {
		if(!this.newPlayer) return;
		this.sendEvent({ eventName : "newPlayer", userID : this.uuid, sessionID : this.sessid, eventParams : { platform : this.determinePlatform(), sdkVersion : "REST API Version 3.0", clientVersion : p_version}});
	}
	,getClientDeviceInfo: function() {
		if(this.clientDeviceInfo == null) this.clientDeviceInfo = new nk_lib_deltadna_Bowser(this.getUA()).bowse();
		return this.clientDeviceInfo;
	}
	,clientDeviceEvent: function(p_version) {
		var clientDeviceInfo = this.getClientDeviceInfo();
		var deviceName = "UNKNOWN";
		if(clientDeviceInfo.ios) {
			if(clientDeviceInfo.tablet) deviceName = "IPAD"; else if(clientDeviceInfo.mobile) deviceName = "IPHONE";
		} else if(clientDeviceInfo.android) deviceName = "ANDROID"; else if(clientDeviceInfo.blackberry) deviceName = "BLACKBERRY"; else if(clientDeviceInfo.chromeBook) deviceName = "CHROMEBOOK"; else if(clientDeviceInfo.firefoxos) deviceName = "FIREFOXOS"; else if(clientDeviceInfo.windowsphone) deviceName = "WINDOWS_PHONE"; else if(clientDeviceInfo.bada) deviceName = "BADA_PHONE"; else if(clientDeviceInfo.tizen) deviceName = "TIZEN_PHONE"; else if(clientDeviceInfo.windows) deviceName = "PC"; else if(clientDeviceInfo.linux) deviceName = "PC"; else if(clientDeviceInfo.mac) deviceName = "PC";
		var deviceType = "UNKNOWN";
		if(clientDeviceInfo.mobile) deviceType = "MOBILE_PHONE"; else if(clientDeviceInfo.tablet) deviceType = "TABLET"; else if(clientDeviceInfo.mac || clientDeviceInfo.windows || clientDeviceInfo.linux) deviceType = "PC";
		var operatingSystem = "UNKNOWN";
		if(clientDeviceInfo.windows) operatingSystem = "WINDOWS"; else if(clientDeviceInfo.mac) operatingSystem = "OSX"; else if(clientDeviceInfo.linux) operatingSystem = "LINUX"; else if(clientDeviceInfo.ios) operatingSystem = "IOS"; else if(clientDeviceInfo.android) operatingSystem = "ANDROID"; else if(clientDeviceInfo.blackberry) operatingSystem = "BLACKBERRY"; else if(clientDeviceInfo.bada) operatingSystem = "BADA"; else if(clientDeviceInfo.firefoxos) operatingSystem = "FIREFOXOS";
		var operatingSystemVersion = "UNKNOWN";
		if(clientDeviceInfo.osversion != "") operatingSystemVersion = clientDeviceInfo.osversion;
		var browserName = "UNKNOWN";
		if(clientDeviceInfo.chrome) browserName = "CHROME"; else if(clientDeviceInfo.firefox) browserName = "FIREFOX"; else if(clientDeviceInfo.safari) browserName = "SAFARI"; else if(clientDeviceInfo.blackberry) browserName = "BLACKBERRY"; else if(clientDeviceInfo.silk) browserName = "SILK"; else if(clientDeviceInfo.msedge) browserName = "EDGE"; else if(clientDeviceInfo.msie) browserName = "IE"; else if(clientDeviceInfo.opera) browserName = "OPERA"; else if(clientDeviceInfo.yandexbrowser) browserName = "YANDEX";
		var browserVersion = "UNKNOWN";
		if(clientDeviceInfo.version != "") browserVersion = clientDeviceInfo.version;
		this.sendEvent({ eventName : "clientDevice", userID : this.uuid, sessionID : this.sessid, eventParams : { platform : this.determinePlatform(), sdkVersion : "REST API Version 3.0", deviceName : deviceName, deviceType : deviceType, operatingSystem : operatingSystem, operatingSystemVersion : operatingSystemVersion, browserName : browserName, browserVersion : browserVersion, clientVersion : p_version}});
	}
	,gameStartedEvent: function(version) {
		this.sendEvent({ eventName : "gameStarted", userID : this.uuid, sessionID : this.sessid, eventParams : { platform : this.determinePlatform(), sdkVersion : "REST API Version 3.0", clientVersion : version}});
	}
	,uiInteraction: function(uiLocation,uiName,uiAction,uiType,p_version) {
		this.sendEvent({ eventName : "uiInteraction", userID : this.uuid, sessionID : this.sessid, eventParams : { platform : this.determinePlatform(), sdkVersion : "REST API Version 3.0", UILocation : uiLocation, UIName : uiName, UIAction : uiAction, UIType : uiType, clientVersion : p_version}});
	}
	,__class__: nk_lib_deltadna_DeltaDNAAPI
};
var nk_lib_deltadna_Regex = function(r,opt) {
	if(opt == null) opt = "";
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["nk.lib.deltadna.Regex"] = nk_lib_deltadna_Regex;
nk_lib_deltadna_Regex.__name__ = ["nk","lib","deltadna","Regex"];
nk_lib_deltadna_Regex.prototype = {
	test: function(s) {
		return this.r.test(s);
	}
	,__class__: nk_lib_deltadna_Regex
};
var nk_lib_manager_Singleton_$NickManager = function() { };
$hxClasses["nk.lib.manager.Singleton_NickManager"] = nk_lib_manager_Singleton_$NickManager;
nk_lib_manager_Singleton_$NickManager.__name__ = ["nk","lib","manager","Singleton_NickManager"];
var nk_lib_manager_NickManager = function(p_class) {
	if(p_class != nk_lib_manager_Singleton_$NickManager) throw new js__$Boot_HaxeError("Invalid instantiation.");
	com_jpmata_managers_BaseManager.call(this);
};
$hxClasses["nk.lib.manager.NickManager"] = nk_lib_manager_NickManager;
nk_lib_manager_NickManager.__name__ = ["nk","lib","manager","NickManager"];
nk_lib_manager_NickManager.__properties__ = {get_instance:"get_instance"}
nk_lib_manager_NickManager._instance = null;
nk_lib_manager_NickManager.get_instance = function() {
	if(nk_lib_manager_NickManager._instance == null) nk_lib_manager_NickManager._instance = new nk_lib_manager_NickManager(nk_lib_manager_Singleton_$NickManager);
	return nk_lib_manager_NickManager._instance;
};
nk_lib_manager_NickManager.__super__ = com_jpmata_managers_BaseManager;
nk_lib_manager_NickManager.prototype = $extend(com_jpmata_managers_BaseManager.prototype,{
	get_configGame: function() {
		return this._configGame;
	}
	,get_configNick: function() {
		return this._configNick;
	}
	,get_isInitComplete: function() {
		return this._isInit;
	}
	,initialize: function(p_cls_scrGame,p_cls_scrPause) {
		if(this._configGame.debugMode) null;
		this._cls_scrGame = p_cls_scrGame;
		this._cls_scrPause = p_cls_scrPause;
		ie_lib_utils_assets_AssetsUtility.baseURL = nicksdk_jsembed_JSEmbedProxy.get_base();
		var loader = new openfl_net_URLLoader();
		loader.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handlerConfig_complete));
		loader.load(new openfl_net_URLRequest(nicksdk_jsembed_JSEmbedProxy.get_base() + "media/strings/config.xml"));
	}
	,getLocalizedText: function(p_id) {
		var result = null;
		if(this._texts != null) result = this._texts.get(p_id);
		return result;
	}
	,sendDeltaUI: function(p_location,p_name) {
		if(this._deltaDNA == null) {
			if(this._configGame.debugMode) null;
			return;
		}
		this._deltaDNA.uiInteraction(p_location,p_name,p_name,p_name,Std.string(openfl_Lib.application.config.version));
		if(this._configGame.debugMode) null;
	}
	,trackCanada_play: function() {
		if(this._configNick == null) return;
		if(this._configNick.services == null) return;
		if(this._configNick.services == null) return;
		if(this._configNick.services.canadaTrackingGameTitle == null) return;
		this._trackCanada("trackFlashEvent",[this._configNick.services.canadaTrackingGameTitle,"play","true"]);
	}
	,_handler_audioToggle: function(p_value) {
		if(this._configGame.debugMode) null;
		com_jpmata_managers_SoundManager.get_instance().enableSounds(p_value);
	}
	,_handler_debugToggle: function(p_value) {
		if(this._configGame.debugMode) null;
		if(this._configGame != null) this._configGame.debugMode = p_value;
	}
	,_handler_playbackToggle: function(p_value) {
		if(this._configGame.debugMode) null;
		if(this._cls_scrGame == null || this._cls_scrPause == null) {
			if(this._configGame.debugMode) null;
			return;
		}
		if(p_value) {
			var basePopup = ie_lib_manager_ScreenManager.popupLayer.getChildAt(0);
			if(ie_lib_manager_ScreenManager.popupLayer.get_numChildren() == 1 && basePopup != null) {
				if(js_Boot.__instanceof(basePopup,this._cls_scrPause)) ie_lib_manager_ScreenManager.popPopup();
			}
		} else if(!p_value) {
			if(ie_lib_manager_ScreenManager.popupLayer.get_numChildren() == 0 && ie_lib_manager_ScreenManager.activeScreen != null) {
				if(js_Boot.__instanceof(ie_lib_manager_ScreenManager.activeScreen,this._cls_scrGame) && ie_lib_manager_ScreenManager.activeScreen.parent != null) ie_lib_manager_ScreenManager.pushPopUp(Type.createInstance(this._cls_scrPause,[]));
			}
		}
	}
	,_handler_suspendToggle: function(p_value) {
		if(this._configGame.debugMode) null;
		if(p_value) com_jpmata_managers_WindowManager.get_instance().resume(); else com_jpmata_managers_WindowManager.get_instance().pause();
	}
	,_handlerDeltaDNA_success: function(p_instance) {
		if(this._configGame.debugMode) null;
		this._deltaDNA = p_instance;
		this._deltaDNA.newPlayerEvent(Std.string(openfl_Lib.application.config.version));
		this._deltaDNA.clientDeviceEvent(Std.string(openfl_Lib.application.config.version));
		this._deltaDNA.gameStartedEvent(Std.string(openfl_Lib.application.config.version));
	}
	,_handlerDeltaDNA_error: function(p_err) {
		if(this._configGame.debugMode) null;
	}
	,_handlerConfig_complete: function(evt) {
		this._dataConfig = Xml.parse(Std.string((js_Boot.__cast(evt.target , openfl_net_URLLoader)).data));
		if(this._dataConfig == null) throw new js__$Boot_HaxeError("The url for the config file is invalid/not found.");
		this._extractConfig();
		if(this._configNick.localization.language != "en") {
			com_jpmata_views_text_BasicTextField.globalFont = this._configNick.localization.defaultFont;
			com_jpmata_views_text_BasicTextField.useGlobalFont = true;
		}
		this._sdk = new nicksdk_SDK();
		nicksdk_event_GameEventListener.set_onAudioToggle($bind(this,this._handler_audioToggle));
		nicksdk_event_GameEventListener.set_onDebugModeToggle($bind(this,this._handler_debugToggle));
		nicksdk_event_GameEventListener.set_onPlaybackToggle($bind(this,this._handler_playbackToggle));
		nicksdk_event_GameEventListener.set_onSuspendToggle($bind(this,this._handler_suspendToggle));
		if(this._configNick.services.enablePiracyControl == true) nicksdk_AntiPiracy.checkPiracy(this._configNick.services.piracyControlRedirectURL);
		var deltaKey = null;
		var deltaGameURL = "";
		if(this._configNick.services.enableDeltaDNA == true) {
			if(this._configNick.services.deltaDNA.mode.toLowerCase() == "live") deltaKey = this._configNick.services.deltaDNA.keyLive; else if(this._configNick.services.deltaDNA.mode.toLowerCase() == "dev") deltaKey = this._configNick.services.deltaDNA.keyDev;
			nk_lib_deltadna_DeltaDNAAPI.requestNew(this._configNick.services.deltaDNA.url,deltaKey,this._configNick.services.deltaDNA.gameURL).onSuccess($bind(this,this._handlerDeltaDNA_success)).onError($bind(this,this._handlerDeltaDNA_error)).begin();
		}
		var loader = new openfl_net_URLLoader();
		loader.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this._handlerTexts_complete));
		loader.load(new openfl_net_URLRequest(nicksdk_jsembed_JSEmbedProxy.get_base() + "media/strings/localization_" + this._configNick.localization.language + ".xml"));
	}
	,_handlerTexts_complete: function(evt) {
		this._dataTexts = Xml.parse(Std.string((js_Boot.__cast(evt.target , openfl_net_URLLoader)).data));
		if(this._dataTexts == null) throw new js__$Boot_HaxeError("The url for the texts( strings ) file is invalid/not found.");
		this._extractTexts();
		com_jpmata_managers_FontManager.instance().initialize(this._fonts);
		this._isInit = true;
		if(this._configNick.services.enableTracking == true) nicksdk_event_GameEventEmitter.sendGameEvent("onLoadingStart");
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		if(this._configGame.debugMode) null;
	}
	,_initProps: function() {
		com_jpmata_managers_BaseManager.prototype._initProps.call(this);
		this._configGame = { debugMode : true, enabledUnlockCode : false, enabledVOs : false, enabledAlvin : true, unlockCode : null, props : null};
		this._configNick = { localization : { language : null, defaultFont : null}, services : { enableServices : false, enableTracking : false, enableCanadaTracking : false, canadaTrackingGameTitle : null, enablePiracyControl : false, piracyControlRedirectURL : null, enableDeltaDNA : false, deltaDNA : { url : null, mode : null, gameURL : null, keyDev : null, keyLive : null}}};
		this._dataConfig = null;
		this._dataTexts = null;
		this._fonts = null;
		this._texts = null;
		this._sdk = null;
		this._isInit = false;
		this._cls_scrGame = null;
		this._cls_scrPause = null;
	}
	,_initListeners: function() {
		com_jpmata_managers_BaseManager.prototype._initListeners.call(this);
		if(this._satellite != null) {
		}
	}
	,_extractConfig: function() {
		if(this._dataConfig == null) throw new js__$Boot_HaxeError("XML data for config is invalid. Value is empty/not initialized.");
		var xmlLocalization = new haxe_xml_Fast(this._dataConfig.firstElement()).node.resolve("localization");
		if(xmlLocalization.node.resolve("language") == null) throw new js__$Boot_HaxeError("Localization language is invalid. Value is empty/not initialized.");
		if(xmlLocalization.node.resolve("defaultFont") == null) throw new js__$Boot_HaxeError("Localization defaultFont is invalid. Value is empty/not initialized.");
		var configLocalization = { language : Std.string(xmlLocalization.node.resolve("language").get_innerData()) == "default"?"en":Std.string(xmlLocalization.node.resolve("language").get_innerData()), defaultFont : Std.string(xmlLocalization.node.resolve("defaultFont").get_innerData())};
		var xmlServices = new haxe_xml_Fast(this._dataConfig.firstElement()).node.resolve("services");
		if(xmlServices.node.resolve("enableServices") == null) throw new js__$Boot_HaxeError("Services enableServices invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("enableServices").get_innerData() != "true" && xmlServices.node.resolve("enableServices").get_innerData() != "false") throw new js__$Boot_HaxeError("Services enableServices invalid. Value should be Bool.");
		if(xmlServices.node.resolve("enableTracking") == null) throw new js__$Boot_HaxeError("Services enableTracking invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("enableTracking").get_innerData() != "true" && xmlServices.node.resolve("enableTracking").get_innerData() != "false") throw new js__$Boot_HaxeError("Services enableTracking invalid. Value should be Bool.");
		if(xmlServices.node.resolve("enableTracking") == null) throw new js__$Boot_HaxeError("Services enableCanadaTracking invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("enableTracking").get_innerData() != "true" && xmlServices.node.resolve("enableTracking").get_innerData() != "false") throw new js__$Boot_HaxeError("Services enableCanadaTracking invalid. Value should be Bool.");
		if(xmlServices.node.resolve("canadaTrackingGameTitle") == null) throw new js__$Boot_HaxeError("Services piracyControlRedirectURL invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("enablePiracyControl").get_innerData() == null) throw new js__$Boot_HaxeError("Services enablePiracyControl invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("enablePiracyControl").get_innerData() != "true" && xmlServices.node.resolve("enablePiracyControl").get_innerData() != "false") throw new js__$Boot_HaxeError("Services enablePiracyControl invalid. Value should be Bool.");
		if(xmlServices.node.resolve("piracyControlRedirectURL") == null) throw new js__$Boot_HaxeError("Services piracyControlRedirectURL invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("enableDeltaDNA").get_innerData() == null) throw new js__$Boot_HaxeError("Services enableDeltaDNA invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("enableDeltaDNA").get_innerData() != "true" && xmlServices.node.resolve("enableDeltaDNA").get_innerData() != "false") throw new js__$Boot_HaxeError("Services enableDeltaDNA invalid. Value should be Bool.");
		if(xmlServices.node.resolve("deltaDNA_url").get_innerData() == null) throw new js__$Boot_HaxeError("Services deltaDNA_url invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("deltaDNA_mode").get_innerData() == null) throw new js__$Boot_HaxeError("Services deltaDNA_mode invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("deltaDNA_mode").get_innerData() != "dev" && xmlServices.node.resolve("deltaDNA_mode").get_innerData() != "live") throw new js__$Boot_HaxeError("Services deltaDNA_mode invalid. Value should be 'dev' or 'live'.");
		if(xmlServices.node.resolve("deltaDNA_gameURL").get_innerData() == null) throw new js__$Boot_HaxeError("Services deltaDNA_gameURL invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("deltaDNA_keyDev").get_innerData() == null) throw new js__$Boot_HaxeError("Services deltaDNA_keyDev invalid. Value is empty/not initialized.");
		if(xmlServices.node.resolve("deltaDNA_keyLive").get_innerData() == null) throw new js__$Boot_HaxeError("Services deltaDNA_keyLive invalid. Value is empty/not initialized.");
		var configServices = { enableServices : js_Boot.__cast(Std.string(xmlServices.node.resolve("enableServices").get_innerData()).toLowerCase() == "true" , Bool), enableTracking : js_Boot.__cast(Std.string(xmlServices.node.resolve("enableTracking").get_innerData()).toLowerCase() == "true" , Bool), enableCanadaTracking : js_Boot.__cast(Std.string(xmlServices.node.resolve("enableCanadaTracking").get_innerData()).toLowerCase() == "true" , Bool), canadaTrackingGameTitle : Std.string(xmlServices.node.resolve("canadaTrackingGameTitle").get_innerData()), enablePiracyControl : js_Boot.__cast(Std.string(xmlServices.node.resolve("enablePiracyControl").get_innerData()).toLowerCase() == "true" , Bool), piracyControlRedirectURL : Std.string(xmlServices.node.resolve("piracyControlRedirectURL").get_innerData()), enableDeltaDNA : js_Boot.__cast(Std.string(xmlServices.node.resolve("enableDeltaDNA").get_innerData()).toLowerCase() == "true" , Bool), deltaDNA : { url : Std.string(xmlServices.node.resolve("deltaDNA_url").get_innerData()), mode : Std.string(xmlServices.node.resolve("deltaDNA_mode").get_innerData()).toLowerCase(), gameURL : Std.string(xmlServices.node.resolve("deltaDNA_gameURL").get_innerData()), keyDev : Std.string(xmlServices.node.resolve("deltaDNA_keyDev").get_innerData()), keyLive : Std.string(xmlServices.node.resolve("deltaDNA_keyLive").get_innerData())}};
		this._configNick = { localization : configLocalization, services : configServices};
		var xmlGame = new haxe_xml_Fast(this._dataConfig.firstElement()).node.resolve("gameSettings");
		if(xmlGame.node.resolve("debugMode") == null) throw new js__$Boot_HaxeError("Game settings debugMode invalid. Value is empty/not initialized.");
		if(xmlGame.node.resolve("debugMode").get_innerData() != "true" && xmlGame.node.resolve("debugMode").get_innerData() != "false") throw new js__$Boot_HaxeError("Game settings debugMode invalid. Value should be Bool.");
		if(xmlGame.node.resolve("enabledUnlockCode") == null) throw new js__$Boot_HaxeError("Game settings enabledUnlockCode invalid. Value is empty/not initialized.");
		if(xmlGame.node.resolve("enabledUnlockCode").get_innerData() != "true" && xmlGame.node.resolve("enabledUnlockCode").get_innerData() != "false") throw new js__$Boot_HaxeError("Game settings enabledUnlockCode invalid. Value should be Bool.");
		if(xmlGame.node.resolve("enabledVOs") == null) throw new js__$Boot_HaxeError("Game settings enabledVOs invalid. Value is empty/not initialized.");
		if(xmlGame.node.resolve("enabledVOs").get_innerData() != "true" && xmlGame.node.resolve("enabledVOs").get_innerData() != "false") throw new js__$Boot_HaxeError("Game settings enabledVOs invalid. Value should be Bool.");
		if(xmlGame.node.resolve("enabledAlvin") == null) throw new js__$Boot_HaxeError("Game settings enabledAlvin invalid. Value is empty/not initialized.");
		if(xmlGame.node.resolve("enabledAlvin").get_innerData() != "true" && xmlGame.node.resolve("enabledAlvin").get_innerData() != "false") throw new js__$Boot_HaxeError("Game settings enabledAlvin invalid. Value should be Bool.");
		if(xmlGame.node.resolve("unlockCode") == null) throw new js__$Boot_HaxeError("Game settings unlockCode invalid. Value is empty/not initialized.");
		if(StringTools.trim(Std.string(xmlGame.node.resolve("unlockCode").get_innerData())).length == 0) throw new js__$Boot_HaxeError("Game settings unlockCode invalid. Value is zero length.");
		if(xmlGame.node.resolve("properties") == null) throw new js__$Boot_HaxeError("Game settings properties invalid. Value is empty/not initialized.");
		var gameProps = { };
		var $it0 = xmlGame.node.resolve("properties").get_elements();
		while( $it0.hasNext() ) {
			var xmlElem = $it0.next();
			var elem = xmlElem;
			try {
				Reflect.setField(gameProps,elem.get_name(),elem.get_innerData());
			} catch( err ) {
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				Reflect.setField(gameProps,elem.get_name(),elem.x);
			}
		}
		this._configGame = { debugMode : js_Boot.__cast(Std.string(xmlGame.node.resolve("debugMode").get_innerData()).toLowerCase() == "true" , Bool), enabledUnlockCode : js_Boot.__cast(Std.string(xmlGame.node.resolve("enabledUnlockCode").get_innerData()).toLowerCase() == "true" , Bool), enabledVOs : js_Boot.__cast(Std.string(xmlGame.node.resolve("enabledVOs").get_innerData()).toLowerCase() == "true" , Bool), enabledAlvin : js_Boot.__cast(Std.string(xmlGame.node.resolve("enabledAlvin").get_innerData()).toLowerCase() == "true" , Bool), unlockCode : Std.string(xmlGame.node.resolve("unlockCode").get_innerData()).toLowerCase(), props : gameProps};
		if(this._configGame.debugMode) null;
	}
	,_extractTexts: function() {
		if(this._dataTexts == null) throw new js__$Boot_HaxeError("XML data for strings is invalid. Value is empty/not initialized.");
		if(this._fonts == null) this._fonts = new haxe_ds_StringMap();
		if(this._texts == null) this._texts = new haxe_ds_StringMap();
		var xmlTexts = new haxe_xml_Fast(this._dataTexts.firstElement());
		var $it0 = xmlTexts.get_elements();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			if(node.att.resolve("id") == null) throw new js__$Boot_HaxeError("The id attribute is invalid. Value is empty/not initialized.");
			if(node.att.resolve("fontName") == null) throw new js__$Boot_HaxeError("The fontName attribute is invalid. Value is empty/not initialized.");
			if(node.att.resolve("fontScale") == null) throw new js__$Boot_HaxeError("The fontScale attribute is invalid. Value is empty/not initialized.");
			if(!(Std.parseFloat(node.att.resolve("fontScale")) >= 0.2 && Std.parseFloat(node.att.resolve("fontScale")) <= 3.0)) throw new js__$Boot_HaxeError("The fontScale attribute is invalid. Value should be " + 0.2 + " - " + 3.0 + ".");
			if(node.att.resolve("offsetX") == null) throw new js__$Boot_HaxeError("The offsetX attribute is invalid. Value is empty/not initialized.");
			if(Std.parseFloat(node.att.resolve("offsetX")) < 0) throw new js__$Boot_HaxeError("The offsetX attribute is invalid. Value should be greter than zero.");
			if(node.att.resolve("offsetY") == null) throw new js__$Boot_HaxeError("The offsetY attribute is invalid. Value is empty/not initialized.");
			if(Std.parseFloat(node.att.resolve("offsetY")) < 0) throw new js__$Boot_HaxeError("The offsetY attribute is invalid. Value should be greter than zero.");
			if((function($this) {
				var $r;
				var key = Std.string(node.att.resolve("fontName")) + ".ttf";
				$r = $this._fonts.get(key);
				return $r;
			}(this)) == null) {
				var key1 = Std.string(node.att.resolve("fontName")) + ".ttf";
				var value = "media/fonts/" + Std.string(node.att.resolve("fontName")) + ".ttf";
				this._fonts.set(key1,value);
			}
			var dataText = { VALUE : Std.string(node.get_innerData()), TYPE : Std.string(node.att.resolve("fontName")) + ".ttf", SIZE : Std["int"](Math.round(Std.parseFloat(node.att.resolve("fontScale")) * 24)), HALIGN : "center", VALIGN : "middle", COLOR : 0, OFFSET_X : Std.parseFloat(node.att.resolve("offsetX")), OFFSET_Y : Std.parseFloat(node.att.resolve("offsetY"))};
			var key2 = Std.string(node.att.resolve("id"));
			this._texts.set(key2,dataText);
			if(this._configGame.debugMode) null;
		}
		if(this._configGame.debugMode) null;
	}
	,_trackCanada: function(evt,p_params) {
		if(!openfl_external_ExternalInterface.available) return;
		if(this._configNick == null) return;
		if(this._configNick.services == null) return;
		if(this._configNick.services.enableCanadaTracking != true) return;
		if(this._configGame.debugMode) null;
		try {
			openfl_external_ExternalInterface.call(evt,p_params);
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			if( js_Boot.__instanceof(err,openfl_errors_Error) ) {
				if(this._configGame.debugMode) null;
			} else throw(err);
		}
	}
	,__class__: nk_lib_manager_NickManager
	,__properties__: $extend(com_jpmata_managers_BaseManager.prototype.__properties__,{get_isInitComplete:"get_isInitComplete",get_configNick:"get_configNick",get_configGame:"get_configGame"})
});
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	__class__: openfl_IAssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,__class__: openfl_AssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) return sound;
	}
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: openfl_display_MovieClip
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(this.__array == null) this.__array = [0,0,0,0,0,0,0,0,0];
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.tx; else return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.ty; else return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.prototype = {
	clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,__class__: openfl_geom_Point
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__isDefault: function() {
		return this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0 && this.alphaOffset == 0;
	}
	,__class__: openfl_geom_ColorTransform
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.application = null;
openfl_Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = ["openfl","VectorData"];
openfl_VectorData.prototype = {
	__class__: openfl_VectorData
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	render: function(stage) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	this.types = [];
	this.b = [];
	this.i = [];
	this.f = [];
	this.o = [];
	this.ff = [];
	this.ii = [];
	this.ts = [];
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	append: function(other) {
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c2 = data;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.o[c2.oPos + 4]);
				break;
			case 3:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c3 = data;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c4 = data;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c5 = data;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c6 = data;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c7 = data;
				this.drawPath(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.o[c7.oPos + 2]);
				break;
			case 8:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c8 = data;
				this.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 9:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c9 = data;
				this.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.f[c9.fPos + 5]);
				break;
			case 10:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c10 = data;
				this.drawTiles(c10.buffer.ts[c10.tsPos],c10.buffer.ff[c10.ffPos],c10.buffer.b[c10.bPos],c10.buffer.i[c10.iPos],c10.buffer.o[c10.oPos],c10.buffer.i[c10.iPos + 1]);
				break;
			case 11:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c11 = data;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.o[c11.oPos + 4],c11.buffer.i[c11.iPos]);
				break;
			case 12:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c12 = data;
				this.endFill();
				break;
			case 13:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c13 = data;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 14:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c14 = data;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.o[c14.oPos + 4]);
				break;
			case 15:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c15 = data;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.o[c15.oPos + 4],c15.buffer.o[c15.oPos + 5],c15.buffer.o[c15.oPos + 6],c15.buffer.o[c15.oPos + 7]);
				break;
			case 16:
				var c16;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c16 = data;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 17:
				var c17;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c17 = data;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 18:
				var c18;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c18 = data;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.o.push(focalPointRatio);
	}
	,clear: function() {
		this.types.splice(0,this.types.length);
		this.b.splice(0,this.b.length);
		this.i.splice(0,this.i.length);
		this.f.splice(0,this.f.length);
		this.o.splice(0,this.o.length);
		this.ff.splice(0,this.ff.length);
		this.ii.splice(0,this.ii.length);
		this.ts.splice(0,this.ts.length);
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,drawCircle: function(x,y,radius) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawPath: function(commands,data,winding) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_PATH);
		this.o.push(commands);
		this.o.push(data);
		this.o.push(winding);
	}
	,drawRect: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(rx);
		this.f.push(ry);
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TILES);
		this.ts.push(sheet);
		this.ff.push(tileData);
		this.b.push(smooth);
		this.i.push(flags);
		this.o.push(shader);
		this.i.push(count);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
		this.o.push(colors);
		this.i.push(blendMode);
	}
	,endFill: function() {
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.o.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.o.push(color);
		this.o.push(alpha);
		this.o.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.o.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,overrideMatrix: function(matrix) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 5;
			this.iiPos += 2;
			this.ffPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.oPos += 3;
			break;
		case 8:
			this.fPos += 4;
			break;
		case 9:
			this.fPos += 6;
			break;
		case 10:
			this.tsPos += 1;
			this.ffPos += 1;
			this.bPos += 1;
			this.iPos += 2;
			this.oPos += 1;
			break;
		case 11:
			this.oPos += 5;
			this.iPos += 1;
			break;
		case 12:
			break;
		case 13:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 14:
			this.oPos += 5;
			this.iiPos += 2;
			this.ffPos += 1;
			break;
		case 15:
			this.oPos += 8;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.oPos += 1;
			break;
		default:
		}
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_PATH","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH = ["DRAW_PATH",7];
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",9];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",11];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",12];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",15];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",16];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",17];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",18];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",19];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_GraphicsPaths = function() { };
$hxClasses["openfl._internal.renderer.GraphicsPaths"] = openfl__$internal_renderer_GraphicsPaths;
openfl__$internal_renderer_GraphicsPaths.__name__ = ["openfl","_internal","renderer","GraphicsPaths"];
openfl__$internal_renderer_GraphicsPaths.ellipse = function(points,x,y,rx,ry,segmentCount) {
	var seg = Math.PI * 2 / segmentCount;
	var _g1 = 0;
	var _g = segmentCount + 1;
	while(_g1 < _g) {
		var i = _g1++;
		points.push(x + Math.sin(seg * i) * rx);
		points.push(y + Math.cos(seg * i) * ry);
	}
};
openfl__$internal_renderer_GraphicsPaths.cubicCurveTo = function(points,cx,cy,cx2,cy2,x,y) {
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.roundRectangle = function(points,x,y,width,height,rx,ry) {
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.TAN22;
	points.push(xe);
	points.push(ye - ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,ye,xe - rx,ye);
	points.push(x + rx);
	points.push(ye);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,ye + cy2,x,ye - ry);
	points.push(x);
	points.push(y + ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,y,x + rx,y);
	points.push(xe - rx);
	points.push(y);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,y - cy2,xe,y + ry);
	points.push(xe);
	points.push(ye - ry);
};
var openfl__$internal_renderer_PolyK = function() { };
$hxClasses["openfl._internal.renderer.PolyK"] = openfl__$internal_renderer_PolyK;
openfl__$internal_renderer_PolyK.__name__ = ["openfl","_internal","renderer","PolyK"];
openfl__$internal_renderer_PolyK.triangulate = function(tgs,p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i1 = _g1++;
		_g.push(i1);
	}
	avl = _g;
	var i = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i % al];
		var i11 = avl[(i + 1) % al];
		var i2 = avl[(i + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl__$internal_renderer_PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl__$internal_renderer_PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			al--;
			i = 0;
		} else if(i++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i = 0;
				al = n;
				sign = false;
			} else return [];
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl__$internal_renderer_PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl__$internal_renderer_PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,bitmap.smoothing?1:3);
			if(scrollRect != null) {
				cairo.pushGroup();
				cairo.set_source(pattern);
				cairo.newPath();
				cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				cairo.fill();
				cairo.popGroupToSource();
			} else cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 4];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				cairo.rectangle(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getWorldTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popRect: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(width,height,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.image.get_src(),0,0); else if(scrollRect.width > 0 && scrollRect.height > 0) context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	case 1:
		var matrix1;
		if(matrix != null) matrix1 = matrix; else matrix1 = new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) context.fill();
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) return false; else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				break;
			case 16:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				break;
			case 17:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c3 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				break;
			case 14:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c4.buffer.o[c4.oPos],c4.buffer.ii[c4.iiPos],c4.buffer.ff[c4.ffPos],c4.buffer.ii[c4.iiPos + 1],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.o[c4.oPos + 4]);
				break;
			case 13:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c5.buffer.o[c5.oPos],c5.buffer.o[c5.oPos + 1],c5.buffer.b[c5.bPos],c5.buffer.b[c5.bPos + 1]);
				break;
			case 15:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c6.buffer.o[c6.oPos],c6.buffer.o[c6.oPos + 1],1,c6.buffer.o[c6.oPos + 3],c6.buffer.o[c6.oPos + 4],c6.buffer.o[c6.oPos + 5],c6.buffer.o[c6.oPos + 6],c6.buffer.o[c6.oPos + 7]);
				break;
			case 12:
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c7;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					c7 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c8;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					c8 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
				} else {
					var c9;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					c9 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],1);
				}
				break;
			case 5:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				break;
			case 6:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				break;
			case 8:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c12 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				break;
			case 9:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c13 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) return true;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) return true;
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 3:
			var c;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
			c = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
			break;
		case 4:
			var c1;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
			c1 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
			break;
		case 5:
			var c2;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
			c2 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
			break;
		case 6:
			var c3;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
			c3 = data;
			var x = c3.buffer.f[c3.fPos];
			var y = c3.buffer.f[c3.fPos + 1];
			var width = c3.buffer.f[c3.fPos + 2];
			var height = c3.buffer.f[c3.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 9:
			var c4;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
			c4 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
			break;
		case 16:
			var c5;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
			c5 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY);
			positionX = c5.buffer.f[c5.fPos];
			positionY = c5.buffer.f[c5.fPos + 1];
			break;
		case 17:
			var c6;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
			c6 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
			positionX = c6.buffer.f[c6.fPos];
			positionY = c6.buffer.f[c6.fPos + 1];
			closeGap = true;
			startX = c6.buffer.f[c6.fPos];
			startY = c6.buffer.f[c6.fPos + 1];
			break;
		case 15:
			var c7;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
			c7 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c7.buffer.o[c7.oPos] == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
				if(c7.buffer.o[c7.oPos] > 0) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c7.buffer.o[c7.oPos]; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = 1;
				if(c7.buffer.o[c7.oPos + 6] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = Std.string(c7.buffer.o[c7.oPos + 6]).toLowerCase();
				if(c7.buffer.o[c7.oPos + 5] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else {
					var _g2 = c7.buffer.o[c7.oPos + 5];
					switch(_g2[1]) {
					case 0:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
						break;
					default:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = Std.string(c7.buffer.o[c7.oPos + 5]).toLowerCase();
					}
				}
				if(c7.buffer.o[c7.oPos + 7] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = 3; else openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c7.buffer.o[c7.oPos + 7];
				if(c7.buffer.o[c7.oPos + 2] == 1 || c7.buffer.o[c7.oPos + 2] == null) if(c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(c7.buffer.o[c7.oPos + 1] & 16777215,6); else {
					var r = (c7.buffer.o[c7.oPos + 1] & 16711680) >>> 16;
					var g = (c7.buffer.o[c7.oPos + 1] & 65280) >>> 8;
					var b = c7.buffer.o[c7.oPos + 1] & 255;
					if(c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c7.buffer.o[c7.oPos + 2] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 14:
			var c8;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
			c8 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var c9;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
			c9 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c9.buffer.o[c9.oPos],c9.buffer.b[c9.bPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var c10;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			c10 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(c10.buffer.o[c10.oPos + 1] != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c10.buffer.o[c10.oPos + 1];
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c10.buffer.o[c10.oPos + 1].clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c11;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
			c11 = data;
			if(c11.buffer.f[c11.fPos] < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
				if(c11.buffer.f[c11.fPos] == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(c11.buffer.i[c11.iPos],6); else {
					var r1 = (c11.buffer.i[c11.iPos] & 16711680) >>> 16;
					var g1 = (c11.buffer.i[c11.iPos] & 65280) >>> 8;
					var b1 = c11.buffer.i[c11.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + c11.buffer.f[c11.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c12;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
			c12 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.o[c12.oPos + 4]);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 8:
			var c13;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
			c13 = data;
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3]));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c13.buffer.f[c13.fPos + 1];
					sl = c13.buffer.f[c13.fPos];
					sb = c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3];
					sr = c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
				}
			}
			if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
			break;
		default:
			data.advance();
			data.prev = type;
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	var directRender = false;
	if(graphics.__dirty || directRender) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(directRender) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
				openfl__$internal_renderer_canvas_CanvasGraphics.bounds.setTo(0,0,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width);
			} else {
				if(graphics.__canvas == null) {
					graphics.__canvas = window.document.createElement("canvas");
					graphics.__context = graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
				graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
				graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 3:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
						break;
					case 4:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c1 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						break;
					case 16:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c2 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						break;
					case 17:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c3 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						break;
					case 12:
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
						data;
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 15:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
						c4 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c4.buffer.o[c4.oPos],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.o[c4.oPos + 4],c4.buffer.o[c4.oPos + 5],c4.buffer.o[c4.oPos + 6],c4.buffer.o[c4.oPos + 7]);
						break;
					case 14:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
						c5 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c5.buffer.o[c5.oPos],c5.buffer.ii[c5.iiPos],c5.buffer.ff[c5.ffPos],c5.buffer.ii[c5.iiPos + 1],c5.buffer.o[c5.oPos + 1],c5.buffer.o[c5.oPos + 2],c5.buffer.o[c5.oPos + 3],c5.buffer.o[c5.oPos + 4]);
						break;
					case 13:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
						c6 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c6.buffer.o[c6.oPos],c6.buffer.o[c6.oPos + 1],c6.buffer.b[c6.bPos],c6.buffer.b[c6.bPos + 1]);
						break;
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c7;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
							c7 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c8;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
							c8 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
						} else {
							var c9;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
							c9 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
						}
						break;
					case 5:
						var c10;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c10 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						break;
					case 6:
						var c11;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c11 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						break;
					case 8:
						var c12;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c12 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						break;
					case 9:
						var c13;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c13 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c14;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
						c14 = data;
						var v = c14.buffer.o[c14.oPos];
						var ind = c14.buffer.o[c14.oPos + 1];
						var uvt = c14.buffer.o[c14.oPos + 2];
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvt == null) {
								var this1;
								this1 = new openfl_VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvt = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i1 = _g3++;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data1;
											var this3;
											this3 = new Array(uvt.data.length + 10);
											data1 = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
											uvt.data = data1;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									}
									uvt.length;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data2;
											var this4;
											this4 = new Array(uvt.data.length + 10);
											data2 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
											uvt.data = data2;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									}
									uvt.length;
								}
							}
							var skipT = uvt.length != v.length;
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
						var i = 0;
						var l = ind.length;
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i < l) {
							a_ = i;
							b_ = i + 1;
							c_ = i + 2;
							iax = ind.data[a_] * 2;
							iay = ind.data[a_] * 2 + 1;
							ibx = ind.data[b_] * 2;
							iby = ind.data[b_] * 2 + 1;
							icx = ind.data[c_] * 2;
							icy = ind.data[c_] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							var _g21 = c14.buffer.o[c14.oPos + 3];
							switch(_g21[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i += 3;
						}
						break;
					case 10:
						var c15;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
						c15 = data;
						var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
						var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
						var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
						var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
						var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
						var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
						var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
						var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
						var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
						var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = c15.buffer.ff[c15.ffPos].length;
						if(c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						c15.buffer.ts[c15.tsPos].__bitmap.__sync();
						surface = c15.buffer.ts[c15.tsPos].__bitmap.image.get_src();
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = c15.buffer.ff[c15.ffPos][index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
								center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = c15.buffer.ts[c15.tsPos].__rectTile;
								rect.setTo(c15.buffer.ff[c15.ffPos][index + 2],c15.buffer.ff[c15.ffPos][index + 3],c15.buffer.ff[c15.ffPos][index + 4],c15.buffer.ff[c15.ffPos][index + 5]);
								center = c15.buffer.ts[c15.tsPos].__point;
								if(useOrigin) {
									center.x = c15.buffer.ff[c15.ffPos][index + 6];
									center.y = c15.buffer.ff[c15.ffPos][index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(c15.buffer.ff[c15.ffPos][index] - offsetX,c15.buffer.ff[c15.ffPos][index + 1] - offsetY);
								if(useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
								if(useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(c15.buffer.ff[c15.ffPos][index + transformIndex],c15.buffer.ff[c15.ffPos][index + transformIndex + 1],c15.buffer.ff[c15.ffPos][index + transformIndex + 2],c15.buffer.ff[c15.ffPos][index + transformIndex + 3],0,0);
								if(useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = c15.buffer.ff[c15.ffPos][index + alphaIndex];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = c15.buffer.b[c15.bPos];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						data.advance();
						data.prev = type;
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getWorldTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			if(graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
				context.globalAlpha = shape.__worldAlpha;
				var transform = shape.__renderTransform;
				if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
				if(shape.__mask != null) renderSession.maskManager.popMask();
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession) {
	if(textField.__dirty) {
		var textEngine = textField.__textEngine;
		textField.__updateLayout();
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			var bounds = textEngine.bounds;
			if(textField.__graphics == null || textField.__graphics.__canvas == null) {
				if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
				textField.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
			}
			var graphics = textField.__graphics;
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var isCocoonJS = window.navigator.isCocoonJS;
			if(isCocoonJS) {
				if(textField.__graphics.__context != null) textField.__graphics.__context.clearRect(0,0,textField.__graphics.__canvas.width,textField.__graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(textEngine.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || textEngine.gridFitType != openfl_text_GridFitType.PIXEL) {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				} else {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g2 = textField.get_scrollV() - 1;
				while(_g1 < _g2) {
					var i1 = _g1++;
					scrollY -= textEngine.lineHeights[i1];
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g3 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g3 < _g11.length) {
					var group = _g11[_g3];
					++_g3;
					if(group.lineIndex < textField.get_scrollV() - 1) continue;
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) break;
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
					if(applyHack) offsetY = group.format.size * 0.185;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g31 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g31 < _g21) {
									var i2 = _g31++;
									if(group.advances.length <= i2) break;
									advance += group.advances[i2];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Std["int"](Math.min(textField.__selectionIndex,textField.__caretIndex));
							var selectionEnd = Std["int"](Math.max(textField.__selectionIndex,textField.__caretIndex));
							if(group.startIndex > selectionStart) selectionStart = group.startIndex;
							if(group.endIndex < selectionEnd) selectionEnd = group.endIndex;
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else end = textField.getCharBoundaries(selectionEnd);
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(width,height,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(width,height,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__worldTransform);
			matrix.invert();
			displayObject.__worldClip.__transform(clip,matrix);
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = openfl_geom_Matrix.__temp;
				transform.identity();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform.concat(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == openfl_text_TextFieldType.INPUT) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							textField.__dirty = false;
						}
					},true);
				}
				if(textEngine.selectable) textField.__style.setProperty("cursor","text",null); else textField.__style.setProperty("cursor","inherit",null);
				textField.__div.contentEditable = textEngine.type == openfl_text_TextFieldType.INPUT;
				var style = textField.__style;
				textField.__div.innerHTML = textEngine.text;
				if(textEngine.background) style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textEngine.border) style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textEngine.width + "px",null);
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer = function(renderSession,texture,viewPort,smoothing,transparent,clearBuffer,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(clearBuffer == null) clearBuffer = false;
	if(transparent == null) transparent = true;
	var gl = renderSession.gl;
	if(gl == null) return null;
	var renderer = renderSession.renderer;
	var spritebatch = renderSession.spriteBatch;
	var x = viewPort.x | 0;
	var y = viewPort.y | 0;
	var width = viewPort.width | 0;
	var height = viewPort.height | 0;
	spritebatch.finish();
	if(openfl__$internal_renderer_opengl_GLBitmap.fbData.length <= 0) openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : null, viewPort : null, transparent : renderer.transparent});
	if(texture == null) texture = new openfl__$internal_renderer_opengl_utils_PingPongTexture(gl,width,height,smoothing,powerOfTwo);
	texture.resize(width,height);
	renderer.transparent = transparent;
	renderSession.maskManager.saveState();
	gl.bindFramebuffer(gl.FRAMEBUFFER,(texture.__swapped?texture.__texture1:texture.__texture0).frameBuffer);
	renderer.setViewport(x,y,width,height);
	gl.colorMask(true,true,true,true);
	renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
	if(clearBuffer) (texture.__swapped?texture.__texture1:texture.__texture0).clear(0,0,0,0,null);
	openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : texture, viewPort : viewPort, transparent : transparent});
	return texture;
};
openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable = function(renderSession,target,source,matrix,colorTransform,blendMode,clipRect) {
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) throw new js__$Boot_HaxeError("No data to draw to");
	var gl = renderSession.gl;
	if(gl == null) return;
	var viewPort = data.viewPort;
	var renderer = renderSession.renderer;
	var spritebatch = renderSession.spriteBatch;
	var drawTarget = target != null;
	var tmpRect;
	if(clipRect == null) tmpRect = new openfl_geom_Rectangle(viewPort.x,viewPort.y,viewPort.width,viewPort.height); else tmpRect = clipRect.clone();
	spritebatch.begin(renderSession,drawTarget?null:tmpRect);
	if(drawTarget) {
		target.__worldTransform.identity();
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(target.__worldTransform,viewPort.height);
		target.__renderGL(renderSession);
		spritebatch.stop();
		if(target.__texture != null) gl.deleteTexture(target.__texture);
		target.__texture = null;
		spritebatch.start(tmpRect);
	}
	var ctCache = source.__worldColorTransform;
	var blendModeCache = source.__blendMode;
	var cached = source.__cacheAsBitmap;
	var m;
	if(matrix != null) m = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else m = new openfl_geom_Matrix();
	openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m,viewPort.height);
	if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl_geom_ColorTransform();
	source.__blendMode = blendMode;
	openfl_display_DisplayObject.__cacheAsBitmapMode = true;
	source.__updateTransforms(m);
	source.__updateChildren(false);
	source.__cacheAsBitmap = false;
	source.__renderGL(renderSession);
	source.__cacheAsBitmap = cached;
	source.__worldColorTransform = ctCache;
	source.__blendMode = blendModeCache;
	openfl_display_DisplayObject.__cacheAsBitmapMode = false;
	source.__updateTransforms();
	source.__updateChildren(false);
};
openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer = function(renderSession,image) {
	var gl = renderSession.gl;
	if(gl == null) return;
	renderSession.spriteBatch.finish();
	openfl__$internal_renderer_opengl_GLBitmap.fbData.pop();
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) throw new js__$Boot_HaxeError("oh");
	var x;
	var y;
	var width;
	var height;
	if(data.viewPort == null) {
		x = y = 0;
		width = renderSession.renderer.width;
		height = renderSession.renderer.height;
	} else {
		x = Math.floor(data.viewPort.x);
		y = Math.floor(data.viewPort.y);
		width = Math.ceil(data.viewPort.width);
		height = Math.ceil(data.viewPort.height);
	}
	if(image != null) {
		if(image.width != width || image.height != height) image.resize(width,height);
		gl.readPixels(x,y,width,height,gl.RGBA,gl.UNSIGNED_BYTE,image.buffer.data);
		image.dirty = false;
		image.set_premultiplied(true);
	}
	gl.bindFramebuffer(gl.FRAMEBUFFER,data.texture == null?renderSession.defaultFramebuffer:data.texture.get_framebuffer());
	renderSession.renderer.setViewport(x,y,width,height);
	renderSession.renderer.transparent = data.transparent;
	renderSession.maskManager.restoreState();
};
openfl__$internal_renderer_opengl_GLBitmap.flipMatrix = function(m,height) {
	var tx = m.tx;
	var ty = m.ty;
	m.tx = 0;
	m.ty = 0;
	m.scale(1,-1);
	m.translate(0,height);
	m.tx += tx;
	m.ty -= ty;
};
var openfl__$internal_renderer_opengl_GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.viewport = new openfl_geom_Rectangle();
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
	this.projectionMatrix = new openfl_geom_Matrix();
	this.projection = new openfl_geom_Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl_geom_Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
	this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
	this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl,this.transparent);
	this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
	this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape,renderSession,smooth) {
	if(smooth == null) smooth = true;
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	if(shape.__graphics == null || shape.__graphics.__bitmap == null) return;
	var rect = openfl_geom_Rectangle.__temp;
	var matrix = openfl_geom_Matrix.__temp;
	rect.setEmpty();
	matrix.identity();
	shape.__getBounds(rect,matrix);
	var bitmap = shape.__graphics.__bitmap;
	matrix.translate(shape.__graphics.__bounds.x,shape.__graphics.__bounds.y);
	matrix.concat(shape.__renderTransform);
	renderSession.spriteBatch.renderBitmapData(bitmap,smooth,matrix,shape.__worldColorTransform,shape.__worldAlpha,shape.__blendMode,null,openfl_display_PixelSnapping.ALWAYS);
};
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
			this.viewport.setTo(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
	this.wrapT = 33071;
	this.wrapS = 33071;
	this.compiled = false;
	this.uniforms = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var cache = openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache;
	var key = haxe_crypto_Md5.encode(vertexSrc + fragmentSrc);
	if(__map_reserved[key] != null?cache.existsReserved(key):cache.h.hasOwnProperty(key)) return __map_reserved[key] != null?cache.getReserved(key):cache.h[key];
	var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		gl.deleteShader(vertexShader);
		gl.deleteShader(fragmentShader);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) return null;
	}
	if(__map_reserved[key] != null) cache.setReserved(key,program); else cache.h[key] = program;
	return program;
};
openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc;
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) return null;
	return shader;
};
openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
	init: function(force) {
		if(force == null) force = false;
		if(this.compiled && !force) return;
		if(this.vertexSrc != null) this.vertexString = this.vertexSrc.join("\n");
		if(this.fragmentSrc != null) this.fragmentString = this.fragmentSrc.join("\n");
		if(this.vertexString == null || this.fragmentString == null) throw new js__$Boot_HaxeError("No vertex or fragment source provided");
		this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl,this.vertexString,this.fragmentString);
		if(this.program != null) this.compiled = true;
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.compiled = false;
		this.attributes = null;
	}
	,applyData: function(shaderData,renderSession) {
		if(shaderData == null) return;
		var param;
		var u;
		var v;
		var bd;
		var $it0 = shaderData.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			u = this.getUniformLocation(key);
			param = __map_reserved[key] != null?shaderData.getReserved(key):shaderData.h[key];
			if(param == null) continue;
			v = param.value;
			bd = param.bitmap;
			if(v == null && bd == null) continue;
			var _g = param.internalType;
			switch(_g) {
			case 1:
				var _g1 = param.size;
				switch(_g1) {
				case 1:
					this.gl.uniform1i(u,v[0] | 0);
					break;
				case 2:
					this.gl.uniform2i(u,v[0] | 0,v[1] | 0);
					break;
				case 3:
					this.gl.uniform3i(u,v[0] | 0,v[1] | 0,v[2] | 0);
					break;
				case 4:
					this.gl.uniform4i(u,v[0] | 0,v[1] | 0,v[2] | 0,v[3] | 0);
					break;
				}
				break;
			case 2:
				var _g11 = param.size;
				switch(_g11) {
				case 1:
					this.gl.uniform1f(u,v[0]);
					break;
				case 2:
					this.gl.uniform2f(u,v[0],v[1]);
					break;
				case 3:
					this.gl.uniform3f(u,v[0],v[1],v[2]);
					break;
				case 4:
					this.gl.uniform4f(u,v[0],v[1],v[2],v[3]);
					break;
				}
				break;
			case 3:
				var _g12 = param.size;
				switch(_g12) {
				case 2:
					this.gl.uniformMatrix2fv(u,param.transpose,(function($this) {
						var $r;
						var array = param.value;
						var this1;
						if(array != null) this1 = new Float32Array(array); else this1 = null;
						$r = this1;
						return $r;
					}(this)));
					break;
				case 3:
					this.gl.uniformMatrix3fv(u,param.transpose,(function($this) {
						var $r;
						var array1 = param.value;
						var this2;
						if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
						$r = this2;
						return $r;
					}(this)));
					break;
				case 4:
					this.gl.uniformMatrix4fv(u,param.transpose,(function($this) {
						var $r;
						var array2 = param.value;
						var this3;
						if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
						$r = this3;
						return $r;
					}(this)));
					break;
				}
				break;
			case 4:
				if(bd == null || !bd.__isValid) continue;
				this.gl.activeTexture(this.gl.TEXTURE0 + renderSession.activeTextures);
				this.gl.bindTexture(this.gl.TEXTURE_2D,bd.getTexture(this.gl));
				this.gl.uniform1i(u,renderSession.activeTextures);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,param.repeatX);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,param.repeatY);
				renderSession.activeTextures++;
				break;
			default:
			}
		}
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_Shader
};
var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC;
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","\tif(!" + "openfl_uUseColorTransform" + ") {","\t\treturn color * tint;","\t}","\tvec4 unmultiply;","\tif (color.a == 0.0) {","\t\tunmultiply = vec4(0.0, 0.0, 0.0, 0.0);","\t} else {","   \tunmultiply = vec4(color.rgb / color.a, color.a);","\t}","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + "openfl_uSampler0" + ", " + "openfl_vTexCoord" + ");","   gl_FragColor = colorTransform(tc, " + "openfl_vColor" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
		this.getUniformLocation("openfl_uUseColorTransform");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
});
var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "openfl_aTexCoord0" + ";","   vColor = " + "openfl_aColor" + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec3 " + "openfl_uColor" + ";","uniform bool " + "openfl_uUseTexture" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + "openfl_uUseTexture" + ") {","       tmp = texture2D(" + "openfl_uSampler0" + ", vTexCoord);","   } else {","       tmp = vec4(" + "openfl_uColor" + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uUseTexture");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
});
var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColor" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_uColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_FillShader
});
var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform mat3 " + "openfl_uPatternMatrix" + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + "openfl_uPatternMatrix" + " * vec3(" + "openfl_aPosition" + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + "openfl_uAlpha" + ";","uniform vec2 " + "openfl_uPatternTL" + ";","uniform vec2 " + "openfl_uPatternBR" + ";","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + "openfl_uPatternTL" + ", " + "openfl_uPatternBR" + ", vPosition);","   vec4 tcol = texture2D(" + "openfl_uSampler0" + ", pos);","   gl_FragColor = colorTransform(tcol, " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uPatternMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uPatternTL");
		this.getUniformLocation("openfl_uPatternBR");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
});
var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform float " + "openfl_uAlpha" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_aColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
});
var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
	setBlendMode: function(blendMode,force) {
		if(force == null) force = false;
		if(blendMode == null) {
			blendMode = openfl_display_BlendMode.NORMAL;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		switch(blendMode[1]) {
		case 0:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,1);
			break;
		case 9:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(774,771);
			break;
		case 12:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,769);
			break;
		case 14:
			this.gl.blendEquation(32779);
			this.gl.blendFunc(1,1);
			break;
		default:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,771);
		}
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
};
var openfl__$internal_renderer_opengl_utils_DrawPath = function(makeArray) {
	if(makeArray == null) makeArray = true;
	this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	this.points = null;
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	if(makeArray) this.points = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics,gl) {
	return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics,gl);
};
openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
	update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl_display_LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl_display_CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl_display_JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_DrawPath
};
var openfl__$internal_renderer_opengl_utils_PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
	var l;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null) l = 0; else l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
		var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
		var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
		var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
		var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx,sy);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
};
openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x,y) {
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var push_point = true;
	if(points.length > 1) {
		var lastX = points[points.length - 2];
		var lastY = points[points.length - 1];
		if(lastX == x && lastY == y) push_point = false;
	}
	if(push_point == true) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c.buffer.o[c.oPos] != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c1.buffer.f[c1.fPos] > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(c1.buffer.i[c1.iPos] & 16777215,c1.buffer.f[c1.fPos]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 3:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c2 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1],c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 3],c2.buffer.f[c2.fPos + 4],c2.buffer.f[c2.fPos + 5]);
				break;
			case 4:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c3 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 5:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c4 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 6:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c5 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 8:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c6 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 9:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c7 = data;
				var x = c7.buffer.f[c7.fPos];
				var y = c7.buffer.f[c7.fPos + 1];
				var width = c7.buffer.f[c7.fPos + 2];
				var height = c7.buffer.f[c7.fPos + 3];
				var rx = c7.buffer.f[c7.fPos + 4];
				var ry = c7.buffer.f[c7.fPos + 5];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width / 2) rx = width / 2;
				if(ry > height / 2) ry = height / 2;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x,y,width,height,rx,ry];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 12:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c8 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				break;
			case 15:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c9 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
				if(c9.buffer.o[c9.oPos] == null || isNaN(c9.buffer.o[c9.oPos]) || c9.buffer.o[c9.oPos] < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0; else if(c9.buffer.o[c9.oPos] == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = c9.buffer.o[c9.oPos];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				if(c9.buffer.o[c9.oPos + 1] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = 0; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = c9.buffer.o[c9.oPos + 1];
				if(c9.buffer.o[c9.oPos + 2] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = c9.buffer.o[c9.oPos + 2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = c9.buffer.o[c9.oPos + 4];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = c9.buffer.o[c9.oPos + 5];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = c9.buffer.o[c9.oPos + 6];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = c9.buffer.o[c9.oPos + 7];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 16:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c10 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1]);
				break;
			case 17:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c11 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 11:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c12 = data;
				var uvtData = c12.buffer.o[c12.oPos + 2];
				var vertices = c12.buffer.o[c12.oPos];
				var indices = c12.buffer.o[c12.oPos + 1];
				var culling = c12.buffer.o[c12.oPos + 3];
				var colors = c12.buffer.o[c12.oPos + 4];
				var blendMode = c12.buffer.i[c12.iPos];
				var isColor;
				{
					var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl_VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data1 = this3;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data2;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data2 = this4;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data2,0,uvtData.data.length);
										uvtData.data = data2;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 10:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c13 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(c13.buffer.ts[c13.tsPos],c13.buffer.ff[c13.ffPos],c13.buffer.b[c13.bPos],c13.buffer.i[c13.iPos],c13.buffer.o[c13.oPos],c13.buffer.i[c13.iPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 7:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c14 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				switch(c14.buffer.o[c14.oPos + 2]) {
				case openfl_display_GraphicsPathWinding.EVEN_ODD:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
					break;
				case openfl_display_GraphicsPathWinding.NON_ZERO:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				}
				var command;
				var cx;
				var cy;
				var cx2;
				var cy2;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = c14.buffer.o[c14.oPos].length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command = c14.buffer.o[c14.oPos].data[i1];
					switch(command) {
					case 1:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 4:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 2:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 5:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 3:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,ax,ay);
						break;
					case 6:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						cx2 = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						cy2 = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 4];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 5];
						idx += 6;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,cx2,cy2,ax,ay);
						break;
					default:
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				break;
			case 18:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c15 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(c15.buffer.o[c15.oPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		data.destroy();
	}
	graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
	return glStack;
};
var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.caps = openfl_display_CapsStyle.ROUND;
	this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
	__class__: openfl__$internal_renderer_opengl_utils_LineStyle
};
var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","FillType"], __constructs__ : ["None","Color","Texture","Gradient"] };
openfl__$internal_renderer_opengl_utils_FillType.None = ["None",0];
openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
openfl__$internal_renderer_opengl_utils_FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient",3];
openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
	begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		var array = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		this.vertexArray = this1;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		var array1 = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this2;
		if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
		this.uvArray = this2;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		var array2 = [1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215];
		var this3;
		if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
		this.colorArray = this3;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,(function($this) {
			var $r;
			var array3 = [0,1,2,1,3,2];
			var this4;
			if(array3 != null) this4 = new Uint16Array(array3); else this4 = null;
			$r = this4;
			return $r;
		}(this)),gl.STATIC_DRAW);
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterManager
};
var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
	this.clips = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","GLMaskManager"];
openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushRect: function(rect,transform) {
		if(rect == null) return;
		var m = new openfl_geom_Matrix(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m,this.renderSession.renderer.viewport.height);
		var clip = rect.clone();
		clip.__transform(clip,m);
		if(this.currentClip != null) clip = this.currentClip.intersection(clip);
		var restartBatch = this.currentClip == null || clip.isEmpty() || this.currentClip.containsRect(clip);
		this.clips.push(clip);
		this.currentClip = clip;
		if(restartBatch) {
			this.renderSession.spriteBatch.stop();
			this.renderSession.spriteBatch.start(this.currentClip);
		}
	}
	,pushMask: function(mask) {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popMask: function() {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.popMask(null,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popRect: function() {
		this.renderSession.spriteBatch.stop();
		this.clips.pop();
		this.currentClip = this.clips[this.clips.length - 1];
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,saveState: function() {
		this.savedClip = this.currentClip;
		this.currentClip = null;
	}
	,restoreState: function() {
		this.currentClip = this.savedClip;
		this.savedClip = null;
	}
	,setContext: function(gl) {
		if(this.renderSession != null) this.renderSession.gl = gl;
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
});
var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) this.defaultValue = [components]; else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
	copy: function() {
		return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl_geom_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl_geom_Rectangle();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var rx = rectData[2];
	var ry;
	if(rectData.length == 3) ry = rx; else ry = rectData[3];
	if(path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
		rx /= 2;
		ry /= 2;
		x += rx;
		y += ry;
	}
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * rx);
			verts.push(y + Math.cos(seg * i) * ry);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		openfl__$internal_renderer_GraphicsPaths.ellipse(path.points,x,y,rx,ry,totalSegs);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl_geom_Point(points[0],points[1]);
	var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0];
	var g = color[1];
	var b = color[2];
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!isFinite(dist)) null;
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var recPoints = [];
	openfl__$internal_renderer_GraphicsPaths.roundRectangle(recPoints,x,y,width,height,rx,ry);
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	colorAttrib.defaultValue = this1;
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		var this2;
		if(vertsLength != null) this2 = new Float32Array(vertsLength); else this2 = null;
		verts = this2;
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors;
	var buffer = verts.buffer;
	var this3;
	if(buffer != null) this3 = new Uint32Array(buffer,0); else this3 = null;
	glColors = this3;
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		var idx1 = idx++;
		verts[idx1] = a * x0 + c * y0 + tx;
		var idx2 = idx++;
		verts[idx2] = b * x0 + d * y0 + ty;
		var idx3 = idx++;
		verts[idx3] = uvtData.data[v0];
		var idx4 = idx++;
		verts[idx4] = uvtData.data[v0 + 1];
		if(hasColors) {
			var idx5 = idx++;
			glColors[idx5] = colors.data[i0];
		}
		var idx6 = idx++;
		verts[idx6] = a * x1 + c * y1 + tx;
		var idx7 = idx++;
		verts[idx7] = b * x1 + d * y1 + ty;
		var idx8 = idx++;
		verts[idx8] = uvtData.data[v1];
		var idx9 = idx++;
		verts[idx9] = uvtData.data[v1 + 1];
		if(hasColors) {
			var idx10 = idx++;
			glColors[idx10] = colors.data[i1];
		}
		var idx11 = idx++;
		verts[idx11] = a * x2 + c * y2 + tx;
		var idx12 = idx++;
		verts[idx12] = b * x2 + d * y2 + ty;
		var idx13 = idx++;
		verts[idx13] = uvtData.data[v2];
		var idx14 = idx++;
		verts[idx14] = uvtData.data[v2 + 1];
		if(hasColors) {
			var idx15 = idx++;
			glColors[idx15] = colors.data[i2];
		}
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var bounds = graphics.__bounds;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
		graphics.__glStack.splice(0,graphics.__glStack.length);
		return;
	}
	if(dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.get_cacheAsBitmap());
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) return;
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl_geom_Matrix.__identity; else translationMatrix = object.__worldTransform;
	var clipRect = renderSession.spriteBatch.clipRect;
	var batchDrawing = renderSession.spriteBatch.drawing;
	batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
		renderSession.blendModeManager.setBlendMode(object.__blendMode);
		if(clipRect != null) {
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(Math.floor(clipRect.x),Math.floor(clipRect.y),Math.floor(clipRect.width),Math.floor(clipRect.height));
		}
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true));
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,null);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession,clipRect);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4],args[5]);
			renderSession.spriteBatch.finish();
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader2.getUniformLocation("openfl_uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		if(clipRect != null) gl.disable(gl.SCISSOR_TEST);
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession,clipRect);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle(); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var pMatrix;
			if(m == null) pMatrix = new openfl_geom_Matrix(); else pMatrix = new openfl_geom_Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix.invert();
			pMatrix.scale(1 / b.width,1 / b.height);
			var tx = pMatrix.tx;
			var ty = pMatrix.ty;
			pMatrix.tx = 0;
			pMatrix.ty = 0;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			bucket.textureMatrix = pMatrix;
			break;
		default:
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("openfl_uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("openfl_uColor"),(function($this) {
			var $r;
			var array = bucket.color;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("openfl_uColor"),(function($this) {
				var $r;
				var array1 = bucket.color;
				var this2;
				if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
				$r = this2;
				return $r;
			}(this)));
		}
		break;
	default:
	}
	return shader;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("openfl_aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
	reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLStack
};
var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
	this.textureMatrix = new openfl_geom_Matrix();
	this.textureTL = new openfl_geom_Point();
	this.textureBR = new openfl_geom_Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
	getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		var array = this.tile;
		var this1;
		if(array != null) this1 = new Int16Array(array); else this1 = null;
		this.glTile = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucket
};
var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
	reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		this.drawMode = this.gl.TRIANGLE_STRIP;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) {
				var array = this.verts;
				var this1;
				if(array != null) this1 = new Float32Array(array); else this1 = null;
				this.glVerts = this1;
			}
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) {
				var array1 = this.indices;
				var this2;
				if(array1 != null) this2 = new Uint16Array(array1); else this2 = null;
				this.glIndices = this2;
			}
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucketData
};
var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketMode"], __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None",0];
openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill",2];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line",3];
openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine",4];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles",6];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketDataType"], __constructs__ : ["Line","Fill"] };
openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line",0];
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","GraphicType"], __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon",0];
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle",2];
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse",3];
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,shader,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,shader,count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_opengl_utils_PingPongTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(smoothing == null) smoothing = true;
	this.__swapped = false;
	this.powerOfTwo = true;
	this.useOldTexture = false;
	this.gl = gl;
	this.width = width;
	this.height = height;
	this.smoothing = smoothing;
	this.powerOfTwo = powerOfTwo;
	this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(gl,width,height,smoothing,powerOfTwo));
};
$hxClasses["openfl._internal.renderer.opengl.utils.PingPongTexture"] = openfl__$internal_renderer_opengl_utils_PingPongTexture;
openfl__$internal_renderer_opengl_utils_PingPongTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","PingPongTexture"];
openfl__$internal_renderer_opengl_utils_PingPongTexture.prototype = {
	swap: function() {
		this.__swapped = !this.__swapped;
		if((this.__swapped?this.__texture1:this.__texture0) == null) this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(this.gl,this.width,this.height,this.smoothing,this.powerOfTwo));
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		(this.__swapped?this.__texture1:this.__texture0).resize(width,height);
	}
	,destroy: function() {
		if(this.__texture0 != null) {
			this.__texture0.destroy();
			this.__texture0 = null;
		}
		if(this.__texture1 != null) {
			this.__texture1.destroy();
			this.__texture1 = null;
		}
		this.__swapped = false;
	}
	,get_renderTexture: function() {
		if(this.__swapped) return this.__texture1; else return this.__texture0;
	}
	,set_renderTexture: function(v) {
		if(this.__swapped) return this.__texture1 = v; else return this.__texture0 = v;
	}
	,get_oldRenderTexture: function() {
		if(this.__swapped) return this.__texture0; else return this.__texture1;
	}
	,set_oldRenderTexture: function(v) {
		if(this.__swapped) return this.__texture0 = v; else return this.__texture1 = v;
	}
	,get_framebuffer: function() {
		return (this.__swapped?this.__texture1:this.__texture0).frameBuffer;
	}
	,get_texture: function() {
		if(this.useOldTexture) return (this.__swapped?this.__texture0:this.__texture1).texture; else return (this.__swapped?this.__texture1:this.__texture0).texture;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_PingPongTexture
	,__properties__: {get_texture:"get_texture",get_framebuffer:"get_framebuffer",set_oldRenderTexture:"set_oldRenderTexture",get_oldRenderTexture:"get_oldRenderTexture",set_renderTexture:"set_renderTexture",get_renderTexture:"get_renderTexture"}
};
var openfl__$internal_renderer_opengl_utils_RenderTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(smoothing == null) smoothing = true;
	this.powerOfTwo = true;
	this.gl = gl;
	this.powerOfTwo = powerOfTwo;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.RenderTexture"] = openfl__$internal_renderer_opengl_utils_RenderTexture;
openfl__$internal_renderer_opengl_utils_RenderTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","RenderTexture"];
openfl__$internal_renderer_opengl_utils_RenderTexture.prototype = {
	clear: function(r,g,b,a,mask) {
		if(a == null) a = 0;
		if(b == null) b = 0;
		if(g == null) g = 0;
		if(r == null) r = 0;
		this.gl.clearColor(r,g,b,a);
		this.gl.clear(mask == null?this.gl.COLOR_BUFFER_BIT:mask);
	}
	,destroy: function() {
		if(this.frameBuffer != null) this.gl.deleteFramebuffer(this.frameBuffer);
		if(this.texture != null) this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		var pow2W = width;
		var pow2H = height;
		if(this.powerOfTwo) {
			pow2W = this.powOfTwo(width);
			pow2H = this.powOfTwo(height);
		}
		var lastW = this.__width;
		var lastH = this.__height;
		this.__width = pow2W;
		this.__height = pow2H;
		this.createUVs();
		if(lastW == pow2W && lastH == pow2H) return;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.__width,this.__height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,this.__width,this.__height);
	}
	,createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		var w = this.width / this.__width;
		var h = this.height / this.__height;
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = w;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = w;
		this.__uvData.y2 = h;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = h;
	}
	,powOfTwo: function(value) {
		var n = 1;
		while(n < value) n <<= 1;
		return n;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_RenderTexture
};
var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
	setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
		this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
		this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
		this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
		this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_ShaderManager
};
var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor"));
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this.attributes[2].defaultValue = this1;
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes,this.vertexArraySize,false);
	var buffer = this.vertexArray.buffer;
	var this2;
	if(buffer != null) this2 = new Float32Array(buffer,0); else this2 = null;
	this.positions = this2;
	var buffer1 = this.vertexArray.buffer;
	var this3;
	if(buffer1 != null) this3 = new Uint32Array(buffer1,0); else this3 = null;
	this.colors = this3;
	var elements = this.indexArraySize;
	var this4;
	if(elements != null) this4 = new Uint16Array(elements); else this4 = null;
	this.indices = this4;
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
	begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.stop();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) this.stop();
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,flashShader,pixelSnapping,bgra) {
		if(bgra == null) bgra = false;
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		this.prepareShader(flashShader,bitmapData);
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,color,pixelSnapping);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,flashShader,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,flashShader,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl_display_BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl_display_BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl_display_BlendMode.SCREEN;
			break;
		case 524288:
			blendMode = openfl_display_BlendMode.SUBTRACT;
			break;
		default:
			var _g1 = flags & 15728640;
			switch(_g1) {
			case 1048576:
				blendMode = openfl_display_BlendMode.DARKEN;
				break;
			case 2097152:
				blendMode = openfl_display_BlendMode.LIGHTEN;
				break;
			case 4194304:
				blendMode = openfl_display_BlendMode.OVERLAY;
				break;
			case 8388608:
				blendMode = openfl_display_BlendMode.HARDLIGHT;
				break;
			default:
				var _g2 = flags & 251658240;
				switch(_g2) {
				case 16777216:
					blendMode = openfl_display_BlendMode.DIFFERENCE;
					break;
				case 33554432:
					blendMode = openfl_display_BlendMode.INVERT;
					break;
				default:
					blendMode = openfl_display_BlendMode.NORMAL;
				}
			}
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = Math.ceil(totalCount / numValues);
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var oMatrix = object.__worldTransform;
		var bIndex = 0;
		var tMa = 1.0;
		var tMb = 0.0;
		var tMc = 0.0;
		var tMd = 1.0;
		var tMtx = 0.0;
		var tMty = 0.0;
		var oMa = oMatrix.a;
		var oMb = oMatrix.b;
		var oMc = oMatrix.c;
		var oMd = oMatrix.d;
		var oMtx = oMatrix.tx;
		var oMty = oMatrix.ty;
		var rx = 0.0;
		var ry = 0.0;
		var rw = 0.0;
		var rh = 0.0;
		var tuvx = 0.0;
		var tuvy = 0.0;
		var tuvw = 0.0;
		var tuvh = 0.0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		this.prepareShader(flashShader,null);
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				rw = rect.width;
				rh = rect.height;
				tuvx = rect.get_left() / sheet.__bitmap.width;
				tuvy = rect.get_top() / sheet.__bitmap.height;
				tuvw = rect.get_right() / sheet.__bitmap.width;
				tuvh = rect.get_bottom() / sheet.__bitmap.height;
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
				if(rect != null) {
					rw = rect.width;
					rh = rect.height;
					tuvx = tileUV.x;
					tuvy = tileUV.y;
					tuvw = tileUV.width;
					tuvh = tileUV.height;
				}
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				tMa = (a * oMa + b * oMc) * rw;
				tMb = (a * oMb + b * oMd) * rw;
				tMc = (c * oMa + d * oMc) * rh;
				tMd = (c * oMb + d * oMd) * rh;
				tMtx = tx * oMa + ty * oMc + oMtx;
				tMty = tx * oMb + ty * oMd + oMty;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				this.positions[bIndex] = tMtx;
				this.positions[bIndex + 1] = tMty;
				this.positions[bIndex + 5] = tMa + tMtx;
				this.positions[bIndex + 6] = tMb + tMty;
				this.positions[bIndex + 10] = tMa + tMc + tMtx;
				this.positions[bIndex + 11] = tMd + tMb + tMty;
				this.positions[bIndex + 15] = tMc + tMtx;
				this.positions[bIndex + 16] = tMd + tMty;
				var val;
				var val1;
				var val2 = this.colors[bIndex + 19] = ((alpha * 255 | 0) & 255) << 24 | tint;
				val1 = this.colors[bIndex + 14] = val2;
				val = this.colors[bIndex + 9] = val1;
				this.colors[bIndex + 4] = val;
				this.positions[bIndex + 2] = tuvx;
				this.positions[bIndex + 3] = tuvy;
				this.positions[bIndex + 7] = tuvw;
				this.positions[bIndex + 8] = tuvy;
				this.positions[bIndex + 12] = tuvw;
				this.positions[bIndex + 13] = tuvh;
				this.positions[bIndex + 17] = tuvx;
				this.positions[bIndex + 18] = tuvh;
				this.writtenVertexBytes = bIndex + 20;
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,flashShader,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,fillVertices: function(index,width,height,matrix,uvs,color,pixelSnapping) {
		if(color == null) color = -1;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		if(pixelSnapping == null || pixelSnapping == openfl_display_PixelSnapping.NEVER) {
			this.positions[index] = tx;
			this.positions[index + 1] = ty;
			this.positions[index + 5] = a * width + tx;
			this.positions[index + 6] = b * width + ty;
			this.positions[index + 10] = a * width + c * height + tx;
			this.positions[index + 11] = d * height + b * width + ty;
			this.positions[index + 15] = c * height + tx;
			this.positions[index + 16] = d * height + ty;
		} else {
			var val = Math.round(tx);
			this.positions[index] = val;
			var val1 = Math.round(ty);
			this.positions[index + 1] = val1;
			var val2 = Math.round(a * width + tx);
			this.positions[index + 5] = val2;
			var val3 = Math.round(b * width + ty);
			this.positions[index + 6] = val3;
			var val4 = Math.round(a * width + c * height + tx);
			this.positions[index + 10] = val4;
			var val5 = Math.round(d * height + b * width + ty);
			this.positions[index + 11] = val5;
			var val6 = Math.round(c * height + tx);
			this.positions[index + 15] = val6;
			var val7 = Math.round(d * height + ty);
			this.positions[index + 16] = val7;
		}
		if(this.enableColor) {
			var val8;
			var val9;
			var val10 = this.colors[index + 19] = color;
			val9 = this.colors[index + 14] = val10;
			val8 = this.colors[index + 9] = val9;
			this.colors[index + 4] = val8;
		}
		this.positions[index + 2] = uvs.x0;
		this.positions[index + 3] = uvs.y0;
		this.positions[index + 7] = uvs.x1;
		this.positions[index + 8] = uvs.y1;
		this.positions[index + 12] = uvs.x2;
		this.positions[index + 13] = uvs.y2;
		this.positions[index + 17] = uvs.x3;
		this.positions[index + 18] = uvs.y3;
		this.writtenVertexBytes = index + 20;
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect != null) {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.ceil(this.clipRect.width),Math.ceil(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.renderSession.activeTextures = 1;
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = null;
		this.currentState.shaderData = null;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.shaderData = nextState.shaderData;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.renderSession.blendModeManager.setBlendMode(shader.blendMode != null?shader.blendMode:state.blendMode);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),1);
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),0);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),0,0,0,0);
		}
		this.gl.activeTexture(this.gl.TEXTURE0);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		this.gl.uniform1i(shader.getUniformLocation("openfl_uSampler0"),0);
		if(shader.smooth != null && shader.smooth || state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,shader.wrapS);
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,shader.wrapT);
		shader.applyData(state.shaderData,this.renderSession);
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,shader,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		if(colorTransform != null && colorTransform.__isDefault()) state.colorTransform = null; else state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
		if(shader == null) {
			state.shader = null;
			state.shaderData = null;
		} else {
			state.shader = shader.__shader;
			state.shaderData = shader.data;
		}
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,prepareShader: function(flashShader,bd) {
		if(flashShader != null) {
			flashShader.__init(this.gl);
			flashShader.__shader.wrapS = flashShader.repeatX;
			flashShader.__shader.wrapT = flashShader.repeatY;
			flashShader.__shader.smooth = flashShader.smooth;
			flashShader.__shader.blendMode = flashShader.blendMode;
			var objSize = flashShader.data.get(openfl_display_Shader.uObjectSize);
			var texSize = flashShader.data.get(openfl_display_Shader.uTextureSize);
			if(bd != null) {
				objSize.value[0] = bd.width;
				objSize.value[1] = bd.height;
				if(bd.__pingPongTexture != null) {
					texSize.value[0] = bd.__pingPongTexture.get_renderTexture().__width;
					texSize.value[1] = bd.__pingPongTexture.get_renderTexture().__height;
				} else {
					texSize.value[0] = bd.width;
					texSize.value[1] = bd.height;
				}
			} else {
				objSize.value[0] = 0;
				objSize.value[1] = 0;
				texSize.value[0] = 0;
				texSize.value[1] = 0;
			}
		}
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
};
var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
	equals: function(other) {
		return (this.shader == null && other.shader == null || this.shader != null && other.shader != null && this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform == null && other.colorTransform == null || this.colorTransform != null && other.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,__class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
};
var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
	prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.get_length() <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_StencilManager
};
var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
	bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexArray
	,__properties__: {get_stride:"get_stride"}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = openfl_text_TextFieldType.DYNAMIC;
	this.autoSize = openfl_text_TextFieldAutoSize.NONE;
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = openfl_text_GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = [];
	this.lineBreaks = [];
	this.lineDescents = [];
	this.lineLeadings = [];
	this.lineHeights = [];
	this.lineWidths = [];
	this.layoutGroups = [];
	this.textFormatRanges = [];
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.__canvas = null;
openfl__$internal_text_TextEngine.__context = null;
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font;
	if(format.italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(format.bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	font += "" + (function($this) {
		var $r;
		var _g = format.font;
		$r = (function($this) {
			var $r;
			switch(_g) {
			case "_sans":
				$r = "sans-serif";
				break;
			case "_serif":
				$r = "serif";
				break;
			case "_typewriter":
				$r = "monospace";
				break;
			default:
				$r = "'" + format.font + "'";
			}
			return $r;
		}($this));
		return $r;
	}(this));
	var isCocoonJS = window.navigator.isCocoonJS;
	if(isCocoonJS) {
		font = format.size + "px ";
		font += "" + (function($this) {
			var $r;
			var _g1 = format.font;
			$r = (function($this) {
				var $r;
				switch(_g1) {
				case "_sans":
					$r = "sans-serif";
					break;
				case "_serif":
					$r = "serif";
					break;
				case "_typewriter":
					$r = "monospace";
					break;
				default:
					$r = "'" + format.font + "'";
				}
				return $r;
			}($this));
			return $r;
		}(this));
	}
	return font;
};
openfl__$internal_text_TextEngine.prototype = {
	getBounds: function() {
		var padding;
		if(this.border) padding = 1; else padding = 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLineMeasurements: function() {
		this.lineAscents.splice(0,this.lineAscents.length);
		this.lineDescents.splice(0,this.lineDescents.length);
		this.lineLeadings.splice(0,this.lineLeadings.length);
		this.lineHeights.splice(0,this.lineHeights.length);
		this.lineWidths.splice(0,this.lineWidths.length);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) this.bottomScrollV++;
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) currentLineLeading = group.leading; else currentLineLeading = Std["int"](Math.max(currentLineLeading,group.leading));
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) this.textWidth = currentLineWidth;
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) this.textHeight += currentLineLeading;
		} else if(this.textHeight <= this.height - 2) this.bottomScrollV++;
		if(this.textWidth > this.width - 4) this.maxScrollH = this.textWidth - this.width + 4 | 0; else this.maxScrollH = 0;
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _g = this;
		this.layoutGroups.splice(0,this.layoutGroups.length);
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var advances;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.text.indexOf("\n");
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _g.textFormatRanges.length - 1) {
			rangeIndex++;
			formatRange = _g.textFormatRanges[rangeIndex];
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
		}
		lineFormat = formatRange.format;
		var wrap;
		while(textIndex < this.text.length) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances1 = [];
			var _g1 = textIndex;
			while(_g1 < breakIndex) {
				var i = _g1++;
				advances1.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width);
			}
			layoutGroup.advances = advances1;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances2 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances2.length) {
				var advance = advances2[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				offsetY += heightValue;
				lineIndex++;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.text.indexOf("\n",textIndex);
			lineIndex++;
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _g.textFormatRanges.length - 1) {
					rangeIndex++;
					formatRange = _g.textFormatRanges[rangeIndex];
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
				lineFormat = formatRange.format;
			}
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1) {
			layoutGroup = null;
			wrap = false;
			while(true) {
				if(spaceIndex == -1) spaceIndex = formatRange.end;
				var text1 = this.text;
				var advances3 = [];
				var _g3 = textIndex;
				while(_g3 < spaceIndex) {
					var i1 = _g3++;
					advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(i1)).width);
				}
				advances = advances3;
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances.length) {
					var advance1 = advances[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) wrap = true;
				}
				if(wrap) {
					offsetY += heightValue;
					var i2 = this.layoutGroups.length - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups[i2];
						if(i2 > 0 && layoutGroup.startIndex > previousSpaceIndex) offsetCount++; else break;
						i2--;
					}
					lineIndex++;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups[this.layoutGroups.length - offsetCount].offsetX;
						var _g11 = this.layoutGroups.length - offsetCount;
						var _g5 = this.layoutGroups.length;
						while(_g11 < _g5) {
							var i3 = _g11++;
							layoutGroup = this.layoutGroups[i3];
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != openfl_text_TextFormatAlign.JUSTIFY) layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == openfl_text_TextFormatAlign.JUSTIFY) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _g.textFormatRanges.length - 1) {
						rangeIndex++;
						formatRange = _g.textFormatRanges[rangeIndex];
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) break;
			}
		} else {
			if(textIndex >= formatRange.end) break;
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
			var text2 = this.text;
			var advances4 = [];
			var _g6 = textIndex;
			while(_g6 < formatRange.end) {
				var i4 = _g6++;
				advances4.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(i4)).width);
			}
			layoutGroup.advances = advances4;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances5 = layoutGroup.advances;
			var width2 = 0.0;
			var _g7 = 0;
			while(_g7 < advances5.length) {
				var advance2 = advances5[_g7];
				++_g7;
				width2 += advance2;
			}
			layoutGroup.width = width2;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetX += layoutGroup.width;
			textIndex = formatRange.end;
			if(rangeIndex < _g.textFormatRanges.length - 1) {
				rangeIndex++;
				formatRange = _g.textFormatRanges[rangeIndex];
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.length;
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups[i];
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2[1]) {
				case 3:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round((this.width - 4 - this.lineWidths[lineIndex]) / 2); else offsetX = 0;
					break;
				case 1:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round(this.width - 4 - this.lineWidths[lineIndex]); else offsetX = 0;
					break;
				case 2:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						lineLength = 1;
						var _g4 = i + 1;
						var _g3 = this.layoutGroups.length;
						while(_g4 < _g3) {
							var j = _g4++;
							if(this.layoutGroups[j].lineIndex == lineIndex) lineLength++; else break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups[i + lineLength - 1];
							if(group.endIndex < this.text.length && this.text.charAt(group.endIndex) != "\n") {
								offsetX = (this.width - 4 - this.lineWidths[lineIndex]) / (lineLength - 1);
								var _g31 = 1;
								while(_g31 < lineLength) {
									var j1 = _g31++;
									this.layoutGroups[i + j1].offsetX += offsetX * j1;
								}
							}
						}
					}
					offsetX = 0;
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) group.offsetX += offsetX;
		}
	}
	,update: function() {
		if(this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.length == 0) {
			this.lineAscents.splice(0,this.lineAscents.length);
			this.lineBreaks.splice(0,this.lineBreaks.length);
			this.lineDescents.splice(0,this.lineDescents.length);
			this.lineLeadings.splice(0,this.lineLeadings.length);
			this.lineHeights.splice(0,this.lineHeights.length);
			this.lineWidths.splice(0,this.lineWidths.length);
			this.layoutGroups.splice(0,this.layoutGroups.length);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) openfl_Lib.application = this;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObject.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl_display_PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__renderTransform,this.__worldColorTransform,this.__worldAlpha,this.__blendMode,this.__shader,this.pixelSnapping);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) this.set_scaleY(value / this.bitmapData.height);
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) this.set_scaleX(value / this.bitmapData.width);
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl_display_TextureUvs.prototype = {
	__class__: openfl_display_TextureUvs
};
var openfl_display_BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : ["openfl","display","BlendMode"], __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SHADER","SUBTRACT"] };
openfl_display_BlendMode.ADD = ["ADD",0];
openfl_display_BlendMode.ADD.toString = $estr;
openfl_display_BlendMode.ADD.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ALPHA = ["ALPHA",1];
openfl_display_BlendMode.ALPHA.toString = $estr;
openfl_display_BlendMode.ALPHA.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DARKEN = ["DARKEN",2];
openfl_display_BlendMode.DARKEN.toString = $estr;
openfl_display_BlendMode.DARKEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl_display_BlendMode.DIFFERENCE.toString = $estr;
openfl_display_BlendMode.DIFFERENCE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ERASE = ["ERASE",4];
openfl_display_BlendMode.ERASE.toString = $estr;
openfl_display_BlendMode.ERASE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl_display_BlendMode.HARDLIGHT.toString = $estr;
openfl_display_BlendMode.HARDLIGHT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.INVERT = ["INVERT",6];
openfl_display_BlendMode.INVERT.toString = $estr;
openfl_display_BlendMode.INVERT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LAYER = ["LAYER",7];
openfl_display_BlendMode.LAYER.toString = $estr;
openfl_display_BlendMode.LAYER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl_display_BlendMode.LIGHTEN.toString = $estr;
openfl_display_BlendMode.LIGHTEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl_display_BlendMode.MULTIPLY.toString = $estr;
openfl_display_BlendMode.MULTIPLY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.NORMAL = ["NORMAL",10];
openfl_display_BlendMode.NORMAL.toString = $estr;
openfl_display_BlendMode.NORMAL.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.OVERLAY = ["OVERLAY",11];
openfl_display_BlendMode.OVERLAY.toString = $estr;
openfl_display_BlendMode.OVERLAY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SCREEN = ["SCREEN",12];
openfl_display_BlendMode.SCREEN.toString = $estr;
openfl_display_BlendMode.SCREEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SHADER = ["SHADER",13];
openfl_display_BlendMode.SHADER.toString = $estr;
openfl_display_BlendMode.SHADER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SUBTRACT = ["SUBTRACT",14];
openfl_display_BlendMode.SUBTRACT.toString = $estr;
openfl_display_BlendMode.SUBTRACT.__enum__ = openfl_display_BlendMode;
var openfl_display_CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : ["openfl","display","CapsStyle"], __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl_display_CapsStyle.NONE = ["NONE",0];
openfl_display_CapsStyle.NONE.toString = $estr;
openfl_display_CapsStyle.NONE.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.ROUND = ["ROUND",1];
openfl_display_CapsStyle.ROUND.toString = $estr;
openfl_display_CapsStyle.ROUND.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.SQUARE = ["SQUARE",2];
openfl_display_CapsStyle.SQUARE.toString = $estr;
openfl_display_CapsStyle.SQUARE.__enum__ = openfl_display_CapsStyle;
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__graphics = new openfl_display_Graphics();
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__tabEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",openfl_text_TextFormatAlign.LEFT,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return null;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.advances[i];
				}
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents[lineIndex];
		var descender = this.__textEngine.lineDescents[lineIndex];
		var leading = this.__textEngine.lineLeadings[lineIndex];
		var lineHeight = this.__textEngine.lineHeights[lineIndex];
		var lineWidth = this.__textEngine.lineWidths[lineIndex];
		var margin;
		var _g = this.__textFormat.align;
		switch(_g[1]) {
		case 0:case 2:
			margin = 2;
			break;
		case 1:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 3:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) format = group.format.clone(); else {
					if(group.format.font != format.font) format.font = null;
					if(group.format.size != format.size) format.size = null;
					if(group.format.color != format.color) format.color = null;
					if(group.format.bold != format.bold) format.bold = null;
					if(group.format.italic != format.italic) format.italic = null;
					if(group.format.underline != format.underline) format.underline = null;
					if(group.format.url != format.url) format.url = null;
					if(group.format.target != format.target) format.target = null;
					if(group.format.align != format.align) format.align = null;
					if(group.format.leftMargin != format.leftMargin) format.leftMargin = null;
					if(group.format.rightMargin != format.rightMargin) format.rightMargin = null;
					if(group.format.indent != format.indent) format.indent = null;
					if(group.format.leading != format.leading) format.leading = null;
					if(group.format.blockIndent != format.blockIndent) format.blockIndent = null;
					if(group.format.bullet != format.bullet) format.bullet = null;
					if(group.format.kerning != format.kerning) format.kerning = null;
					if(group.format.letterSpacing != format.letterSpacing) format.letterSpacing = null;
					if(group.format.tabStops != format.tabStops) format.tabStops = null;
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) return;
		var startIndex;
		if(this.__caretIndex < this.__selectionIndex) startIndex = this.__caretIndex; else startIndex = this.__selectionIndex;
		var endIndex;
		if(this.__caretIndex > this.__selectionIndex) endIndex = this.__caretIndex; else endIndex = this.__selectionIndex;
		this.replaceText(startIndex,endIndex,value);
		this.__caretIndex = startIndex + value.length;
		this.__selectionIndex = this.__caretIndex;
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__textEngine.text.length || newText == null) return;
		this.__textEngine.text = this.__textEngine.text.substring(0,beginIndex) + newText + this.__textEngine.text.substring(endIndex);
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.length) {
			range = this.__textEngine.textFormatRanges[i];
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				i++;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				this.__textEngine.textFormatRanges.splice(i,1);
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				i++;
			} else i++;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		this.__textEngine.bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) return lime_ui_MouseCursor.TEXT; else return null;
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		if(y > this.__textEngine.textHeight) y = this.__textEngine.textHeight;
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups[i1];
			if(i1 < this.__textEngine.layoutGroups.length - 1) nextGroup = this.__textEngine.layoutGroups[i1 + 1]; else nextGroup = null;
			if(firstGroup) {
				if(y < group.offsetY) y = group.offsetY;
				if(x < group.offsetX) x = group.offsetX;
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i2 = _g3++;
						advance += group.advances[i2];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i2]) + group.advances[i2] / 2) return group.startIndex + i2; else if(group.startIndex + i2 < group.endIndex) return group.startIndex + i2 + 1; else return group.endIndex;
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__textEngine.text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		if(this.__textEngine.antiAliasType == openfl_text_AntiAliasType.ADVANCED && this.__textEngine.gridFitType == openfl_text_GridFitType.PIXEL) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession,this.__textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || this.__textEngine.gridFitType != openfl_text_GridFitType.PIXEL);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__textEngine.text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			this.__textEngine.update();
			if(this.__textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
				var cacheWidth = this.__textEngine.width;
				var cacheHeight = this.__textEngine.height;
				var _g = this.__textEngine.autoSize;
				switch(_g[1]) {
				case 1:case 3:case 0:
					if(!this.__textEngine.wordWrap) this.__textEngine.width = this.__textEngine.textWidth + 4;
					this.__textEngine.height = this.__textEngine.textHeight + 4;
					break;
				default:
				}
				if(this.__textEngine.width != cacheWidth) {
					var _g1 = this.__textEngine.autoSize;
					switch(_g1[1]) {
					case 3:
						var _g11 = this;
						_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					case 0:
						var _g12 = this;
						_g12.set_x(_g12.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) this.__dirty = true;
		return this.__textEngine.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) this.__dirty = true;
		return this.__textEngine.borderColor = value;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleY(1);
		return this.__textEngine.height = value;
	}
	,get_htmlText: function() {
		return this.__textEngine.text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
				var range = this.__textEngine.textFormatRanges[0];
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				return this.__textEngine.text = value;
			} else {
				this.__textEngine.textFormatRanges.splice(0,this.__textEngine.textFormatRanges.length);
				value = "";
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		return this.__textEngine.text = value;
	}
	,get_length: function() {
		if(this.__textEngine.text != null) return this.__textEngine.text.length;
		return 0;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == openfl_text_TextFieldType.INPUT) {
			if(this.stage != null && this.stage.get_focus() == this) this.__startTextInput(); else if(!value) this.__stopTextInput();
		}
		return this.__textEngine.selectable = value;
	}
	,get_text: function() {
		return this.__textEngine.text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else return value;
		if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
		var range = this.__textEngine.textFormatRanges[0];
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		return this.__textEngine.text = value;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__textEngine.width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleX(1);
		return this.__textEngine.width = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) return;
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) return;
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(this.get_x(),this.get_y());
			var py = this.__worldTransform.__transformInverseY(this.get_x(),this.get_y());
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionIndex,upPos));
			rightPos = Std["int"](Math.max(this.__selectionIndex,upPos));
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == openfl_text_TextFieldType.INPUT && this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) return;
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) this.__selectionIndex = this.__caretIndex - 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__textEngine.text.length) this.__selectionIndex = this.__caretIndex + 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) this.__caretIndex--;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) this.__caretIndex--;
				} else this.__caretIndex = Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
				} else this.__caretIndex = Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 99:
			if(modifier == 64 || modifier == 128) lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
			break;
		case 120:
			if(modifier == 64 || modifier == 128) {
				lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
				}
			}
			break;
		case 118:
			if(modifier == 64 || modifier == 128) {
				var text = lime_system_Clipboard.get_text();
				if(text != null) this.replaceSelectedText(text); else this.replaceSelectedText("");
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",get_numLines:"get_numLines",get_length:"get_length",get_type:"get_type",set_textColor:"set_textColor",set_text:"set_text",get_text:"get_text",set_selectable:"set_selectable",get_selectable:"get_selectable",get_scrollV:"get_scrollV",get_scrollH:"get_scrollH",set_multiline:"set_multiline",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",set_borderColor:"set_borderColor",set_border:"set_border",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize"})
});
var openfl_display_FPS = function(x,y,color) {
	if(color == null) color = 0;
	if(y == null) y = 10;
	if(x == null) x = 10;
	openfl_text_TextField.call(this);
	this.set_x(x);
	this.set_y(y);
	this.currentFPS = 0;
	this.set_selectable(false);
	this.mouseEnabled = false;
	this.set_defaultTextFormat(new openfl_text_TextFormat("_sans",12,color));
	this.set_text("FPS: ");
	this.cacheCount = 0;
	this.times = [];
	this.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.this_onEnterFrame));
};
$hxClasses["openfl.display.FPS"] = openfl_display_FPS;
openfl_display_FPS.__name__ = ["openfl","display","FPS"];
openfl_display_FPS.__super__ = openfl_text_TextField;
openfl_display_FPS.prototype = $extend(openfl_text_TextField.prototype,{
	this_onEnterFrame: function(event) {
		var currentTime = haxe_Timer.stamp();
		this.times.push(currentTime);
		while(this.times[0] < currentTime - 1) this.times.shift();
		var currentCount = this.times.length;
		this.currentFPS = Math.round((currentCount + this.cacheCount) / 2);
		if(currentCount != this.cacheCount) this.set_text("FPS: " + this.currentFPS);
		this.cacheCount = currentCount;
	}
	,__class__: openfl_display_FPS
});
var openfl_display_FrameLabel = function() { };
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_FrameLabel
});
var openfl_display_GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : ["openfl","display","GradientType"], __constructs__ : ["RADIAL","LINEAR"] };
openfl_display_GradientType.RADIAL = ["RADIAL",0];
openfl_display_GradientType.RADIAL.toString = $estr;
openfl_display_GradientType.RADIAL.__enum__ = openfl_display_GradientType;
openfl_display_GradientType.LINEAR = ["LINEAR",1];
openfl_display_GradientType.LINEAR.toString = $estr;
openfl_display_GradientType.LINEAR.__enum__ = openfl_display_GradientType;
var openfl_display_Graphics = function() {
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) this.__visible = true;
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useTransform = (flags & 16) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var rect = openfl_geom_Rectangle.__temp;
		var matrix = openfl_geom_Matrix.__temp;
		var numValues = 3;
		var totalCount = count;
		if(count < 0) totalCount = tileData.length;
		if(useTransform || useScale || useRotation || useRGB || useAlpha) {
			var scaleIndex = 0;
			var rotationIndex = 0;
			var transformIndex = 0;
			if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
			if(useScale) {
				scaleIndex = numValues;
				numValues++;
			}
			if(useRotation) {
				rotationIndex = numValues;
				numValues++;
			}
			if(useTransform) {
				transformIndex = numValues;
				numValues += 4;
			}
			if(useRGB) numValues += 3;
			if(useAlpha) numValues++;
			var itemCount = totalCount / numValues | 0;
			var index = 0;
			var cacheID = -1;
			var x;
			var y;
			var id;
			var scale;
			var rotation;
			var tileWidth;
			var tileHeight;
			var originX;
			var originY;
			var tile = null;
			var tilePoint = null;
			while(index < totalCount) {
				x = tileData[index];
				y = tileData[index + 1];
				if(!useRect) id = tileData[index + 2] | 0; else id = -1;
				scale = 1.0;
				rotation = 0.0;
				if(useScale) scale = tileData[index + scaleIndex];
				if(useRotation) rotation = tileData[index + rotationIndex];
				if(id < 0) tile = null; else if(!useRect && cacheID != id) {
					cacheID = id;
					tile = sheet.__tileRects[id];
					tilePoint = sheet.__centerPoints[id];
				} else if(useRect) {
					tile = sheet.__rectTile;
					tile.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
					tilePoint = sheet.__point;
					if(useOrigin) {
						tilePoint.x = tileData[index + 6] / tile.width;
						tilePoint.y = tileData[index + 7] / tile.height;
					} else {
						tilePoint.x = 0;
						tilePoint.y = 0;
					}
				}
				if(tile != null) {
					if(useTransform) {
						rect.setTo(0,0,tile.width,tile.height);
						matrix.setTo(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
						originX = tilePoint.x * scale;
						originY = tilePoint.y * scale;
						matrix.translate(x - (originX * matrix.a + originY * matrix.c + matrix.tx),y - (originX * matrix.b + originY * matrix.d + matrix.ty));
						rect.__transform(rect,matrix);
						this.__inflateBounds(rect.x,rect.y);
						this.__inflateBounds(rect.get_right(),rect.get_bottom());
					} else {
						tileWidth = tile.width * scale;
						tileHeight = tile.height * scale;
						x -= tilePoint.x * tileWidth;
						y -= tilePoint.y * tileHeight;
						if(rotation != 0) {
							rect.setTo(0,0,tileWidth,tileHeight);
							matrix.identity();
							matrix.rotate(rotation);
							matrix.translate(x,y);
							rect.__transform(rect,matrix);
							this.__inflateBounds(rect.x,rect.y);
							this.__inflateBounds(rect.get_right(),rect.get_bottom());
						} else {
							this.__inflateBounds(x,y);
							this.__inflateBounds(x + tileWidth,y + tileHeight);
						}
					}
				}
				index += numValues;
			}
		} else {
			var x1;
			var y1;
			var id1;
			var tile1;
			var centerPoint;
			var originX1;
			var originY1;
			var rect1 = openfl_geom_Rectangle.__temp;
			var index1 = 0;
			while(index1 < totalCount) {
				x1 = tileData[index1++];
				y1 = tileData[index1++];
				if(!useRect) id1 = Std["int"](tileData[index1++]); else id1 = -1;
				originX1 = 0.0;
				originY1 = 0.0;
				if(useRect) {
					rect1.setTo(tileData[index1++],tileData[index1++],tileData[index1++],tileData[index1++]);
					if(useOrigin) {
						originX1 = tileData[index1++];
						originY1 = tileData[index1++];
					}
					this.__inflateBounds(x1 - originX1,y1 - originY1);
					this.__inflateBounds(x1 - originX1 + rect1.width,y1 - originY1 + rect1.height);
				} else {
					tile1 = sheet.__tileRects[id1];
					if(tile1 != null) {
						centerPoint = sheet.__centerPoints[id1];
						originX1 = centerPoint.x * tile1.width;
						originY1 = centerPoint.y * tile1.height;
						this.__inflateBounds(x1 - originX1,y1 - originY1);
						this.__inflateBounds(x1 - originX1 + tile1.width,y1 - originY1 + tile1.height);
					}
				}
			}
		}
		this.__commands.drawTiles(sheet,tileData,smooth,flags,shader,count);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness != null) {
			if(joints == openfl_display_JointStyle.MITER) {
				if(thickness > this.__strokePadding) this.__strokePadding = thickness;
			} else if(thickness / 2 > this.__strokePadding) this.__strokePadding = thickness / 2;
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) this.__visible = true;
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var px = matrix.__transformInverseX(x,y);
		var py = matrix.__transformInverseY(x,y);
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : ["openfl","display","GraphicsPathWinding"], __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl_display_GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl_display_GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl_display_GraphicsPathWinding.EVEN_ODD.__enum__ = openfl_display_GraphicsPathWinding;
openfl_display_GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl_display_GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl_display_GraphicsPathWinding.NON_ZERO.__enum__ = openfl_display_GraphicsPathWinding;
var openfl_display_InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : ["openfl","display","InterpolationMethod"], __constructs__ : ["RGB","LINEAR_RGB"] };
openfl_display_InterpolationMethod.RGB = ["RGB",0];
openfl_display_InterpolationMethod.RGB.toString = $estr;
openfl_display_InterpolationMethod.RGB.__enum__ = openfl_display_InterpolationMethod;
openfl_display_InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl_display_InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl_display_InterpolationMethod.LINEAR_RGB.__enum__ = openfl_display_InterpolationMethod;
var openfl_display_JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : ["openfl","display","JointStyle"], __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl_display_JointStyle.MITER = ["MITER",0];
openfl_display_JointStyle.MITER.toString = $estr;
openfl_display_JointStyle.MITER.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.ROUND = ["ROUND",1];
openfl_display_JointStyle.ROUND.toString = $estr;
openfl_display_JointStyle.ROUND.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.BEVEL = ["BEVEL",2];
openfl_display_JointStyle.BEVEL.toString = $estr;
openfl_display_JointStyle.BEVEL.__enum__ = openfl_display_JointStyle;
var openfl_display_LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : ["openfl","display","LineScaleMode"], __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl_display_LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl_display_LineScaleMode.HORIZONTAL.toString = $estr;
openfl_display_LineScaleMode.HORIZONTAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NONE = ["NONE",1];
openfl_display_LineScaleMode.NONE.toString = $estr;
openfl_display_LineScaleMode.NONE.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NORMAL = ["NORMAL",2];
openfl_display_LineScaleMode.NORMAL.toString = $estr;
openfl_display_LineScaleMode.NORMAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl_display_LineScaleMode.VERTICAL.toString = $estr;
openfl_display_LineScaleMode.VERTICAL.__enum__ = openfl_display_LineScaleMode;
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			var path = request.url;
			openfl_display_BitmapData.fromFile(path,function(bitmapData) {
				worker.sendComplete(bitmapData);
			},function() {
				worker.sendError(openfl_events_IOErrorEvent.IO_ERROR);
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event(openfl_events_Event.UNLOAD);
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event(openfl_events_Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : ["openfl","display","PixelSnapping"], __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl_display_PixelSnapping.NEVER = ["NEVER",0];
openfl_display_PixelSnapping.NEVER.toString = $estr;
openfl_display_PixelSnapping.NEVER.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.AUTO = ["AUTO",1];
openfl_display_PixelSnapping.AUTO.toString = $estr;
openfl_display_PixelSnapping.AUTO.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl_display_PixelSnapping.ALWAYS.toString = $estr;
openfl_display_PixelSnapping.ALWAYS.__enum__ = openfl_display_PixelSnapping;
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) (js_Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) (js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shader = function() {
	this.__dirty = true;
	this.repeatY = 33071;
	this.repeatX = 33071;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	__init: function(gl) {
		var dirty = this.__dirty;
		if(dirty) {
			if(this.__shader != null) this.__shader.destroy();
			this.__shader = new openfl__$internal_renderer_opengl_shaders2_Shader(gl);
			if(this.__vertexCode != null) this.__shader.vertexString = this.__vertexCode; else this.__shader.vertexString = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC.join("\n");
			this.__shader.fragmentString = this.__fragmentCode;
			this.__dirty = false;
		}
		this.__shader.init(dirty);
	}
	,__class__: openfl_display_Shader
};
var openfl_display_GLShaderParameter = function() {
	this.internalType = 0;
	this.transpose = false;
	this.repeatY = 33071;
	this.repeatX = 33071;
	this.smooth = false;
	this.size = 0;
};
$hxClasses["openfl.display.GLShaderParameter"] = openfl_display_GLShaderParameter;
openfl_display_GLShaderParameter.__name__ = ["openfl","display","GLShaderParameter"];
openfl_display_GLShaderParameter.prototype = {
	__class__: openfl_display_GLShaderParameter
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : ["openfl","display","SpreadMethod"], __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl_display_SpreadMethod.REPEAT = ["REPEAT",0];
openfl_display_SpreadMethod.REPEAT.toString = $estr;
openfl_display_SpreadMethod.REPEAT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.REFLECT = ["REFLECT",1];
openfl_display_SpreadMethod.REFLECT.toString = $estr;
openfl_display_SpreadMethod.REFLECT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.PAD = ["PAD",2];
openfl_display_SpreadMethod.PAD.toString = $estr;
openfl_display_SpreadMethod.PAD.__enum__ = openfl_display_SpreadMethod;
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = openfl_display_StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = window.__width * window.__scale | 0;
	this.stageHeight = window.__height * window.__scale | 0;
	this.stage = this;
	this.align = openfl_display_StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = openfl_display_StageQuality.HIGH;
	this.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
	if(openfl_Lib.current.stage == null) this.stage.addChild(openfl_Lib.current);
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	globalToLocal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey(openfl_events_KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey(openfl_events_KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
			this.__broadcast(event,true);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) return;
		this.__onMouse(openfl_events_MouseEvent.MOUSE_MOVE,x * window.__scale | 0,y * window.__scale | 0,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) return;
		this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) return;
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		var event = new openfl_events_TextEvent(openfl_events_TextEvent.TEXT_INPUT,true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else this.__broadcast(event,true);
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event(openfl_events_Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function(window) {
		if(this.window == window) this.window = null;
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) return;
		if(window.renderer != null) {
			var _g = window.renderer.context;
			switch(_g[1]) {
			case 0:
				var gl = _g[2];
				this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth,this.stageHeight,gl);
				break;
			case 1:
				var context = _g[2];
				this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,context);
				break;
			case 2:
				var element = _g[2];
				this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this.stageWidth,this.stageHeight,element);
				break;
			case 4:
				var cairo = _g[2];
				this.__renderer = new openfl__$internal_renderer_cairo_CairoRenderer(this.stageWidth,this.stageHeight,cairo);
				break;
			case 5:
				var ctx = _g[2];
				this.__renderer = new openfl__$internal_renderer_console_ConsoleRenderer(this.stageWidth,this.stageHeight,ctx);
				break;
			default:
			}
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) return;
		this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.MOUSE_LEAVE));
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) return;
		this.stageWidth = width * window.__scale | 0;
		this.stageHeight = height * window.__scale | 0;
		if(this.__renderer != null) this.__renderer.resize(this.stageWidth,this.stageHeight);
		var event = new openfl_events_Event(openfl_events_Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) return;
		if(this.application != null && this.application.windows.length > 0) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event(openfl_events_Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event(openfl_events_Event.RENDER),true);
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null) {
			{
				var _g = renderer.context;
				switch(_g[1]) {
				case 4:
					var cairo = _g[2];
					(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
					this.__renderer.renderSession.cairo = cairo;
					break;
				default:
				}
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl_events_EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCanceled) return;
			}
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCanceled) return;
			if(event.bubbles) {
				event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCanceled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
			if(event.__isCanceled) {
				if(type == openfl_events_KeyboardEvent.KEY_DOWN) this.window.onKeyDown.cancel(); else this.window.onKeyUp.cancel();
			}
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,true,stack,true,this)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		if(type == openfl_events_MouseEvent.MOUSE_DOWN) {
			if(target.get_tabEnabled()) this.set_focus(target); else this.set_focus(null);
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case "mouseUp":
			clickType = openfl_events_MouseEvent.CLICK;
			break;
		case "middleMouseUp":
			clickType = openfl_events_MouseEvent.MIDDLE_CLICK;
			break;
		case "rightMouseUp":
			clickType = openfl_events_MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl_events_MouseEvent.MOUSE_UP && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				var localPoint = target2.globalToLocal(targetPoint);
				target2.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target2));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target3.globalToLocal(targetPoint);
					target3.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target3));
				}
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true,this)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(touch.x * this.stageWidth,touch.y * this.stageHeight);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		if(this.__hitTest(this.__mouseX,this.__mouseY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) target = this;
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,this.__focus,false,0);
				this.__stack = [];
				oldFocus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,oldFocus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
		}
		return this.__focus;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_focus:"set_focus",get_focus:"get_focus",set_color:"set_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_Stage3D
});
var openfl_display_StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : ["openfl","display","StageAlign"], __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl_display_StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl_display_StageAlign.TOP_RIGHT.toString = $estr;
openfl_display_StageAlign.TOP_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl_display_StageAlign.TOP_LEFT.toString = $estr;
openfl_display_StageAlign.TOP_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP = ["TOP",2];
openfl_display_StageAlign.TOP.toString = $estr;
openfl_display_StageAlign.TOP.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.RIGHT = ["RIGHT",3];
openfl_display_StageAlign.RIGHT.toString = $estr;
openfl_display_StageAlign.RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.LEFT = ["LEFT",4];
openfl_display_StageAlign.LEFT.toString = $estr;
openfl_display_StageAlign.LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl_display_StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl_display_StageAlign.BOTTOM_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl_display_StageAlign.BOTTOM_LEFT.toString = $estr;
openfl_display_StageAlign.BOTTOM_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM = ["BOTTOM",7];
openfl_display_StageAlign.BOTTOM.toString = $estr;
openfl_display_StageAlign.BOTTOM.__enum__ = openfl_display_StageAlign;
var openfl_display_StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : ["openfl","display","StageDisplayState"], __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl_display_StageDisplayState.NORMAL = ["NORMAL",0];
openfl_display_StageDisplayState.NORMAL.toString = $estr;
openfl_display_StageDisplayState.NORMAL.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl_display_StageDisplayState.FULL_SCREEN.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl_display_StageDisplayState;
var openfl_display_StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : ["openfl","display","StageQuality"], __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl_display_StageQuality.BEST = ["BEST",0];
openfl_display_StageQuality.BEST.toString = $estr;
openfl_display_StageQuality.BEST.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.HIGH = ["HIGH",1];
openfl_display_StageQuality.HIGH.toString = $estr;
openfl_display_StageQuality.HIGH.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.MEDIUM = ["MEDIUM",2];
openfl_display_StageQuality.MEDIUM.toString = $estr;
openfl_display_StageQuality.MEDIUM.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.LOW = ["LOW",3];
openfl_display_StageQuality.LOW.toString = $estr;
openfl_display_StageQuality.LOW.__enum__ = openfl_display_StageQuality;
var openfl_display_StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : ["openfl","display","StageScaleMode"], __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl_display_StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl_display_StageScaleMode.SHOW_ALL.toString = $estr;
openfl_display_StageScaleMode.SHOW_ALL.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl_display_StageScaleMode.NO_SCALE.toString = $estr;
openfl_display_StageScaleMode.NO_SCALE.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl_display_StageScaleMode.NO_BORDER.toString = $estr;
openfl_display_StageScaleMode.NO_BORDER.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl_display_StageScaleMode.EXACT_FIT.toString = $estr;
openfl_display_StageScaleMode.EXACT_FIT.__enum__ = openfl_display_StageScaleMode;
var openfl_display_Tilesheet = function() { };
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl_display_Tilesheet.prototype = {
	drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,null,count);
	}
	,__class__: openfl_display_Tilesheet
};
var openfl_display_TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : ["openfl","display","TriangleCulling"], __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl_display_TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl_display_TriangleCulling.NEGATIVE.toString = $estr;
openfl_display_TriangleCulling.NEGATIVE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.NONE = ["NONE",1];
openfl_display_TriangleCulling.NONE.toString = $estr;
openfl_display_TriangleCulling.NONE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl_display_TriangleCulling.POSITIVE.toString = $estr;
openfl_display_TriangleCulling.POSITIVE.__enum__ = openfl_display_TriangleCulling;
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_errors_Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_IOError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) activating = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : ["openfl","events","EventPhase"], __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl_events_EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl_events_EventPhase.CAPTURING_PHASE.toString = $estr;
openfl_events_EventPhase.CAPTURING_PHASE.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl_events_EventPhase.AT_TARGET.toString = $estr;
openfl_events_EventPhase.AT_TARGET.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl_events_EventPhase.BUBBLING_PHASE.toString = $estr;
openfl_events_EventPhase.BUBBLING_PHASE.__enum__ = openfl_events_EventPhase;
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) interactive = false;
	if(fullScreen == null) fullScreen = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) redirected = false;
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function() { };
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) isTouchPointCanceled = false;
	if(timestamp == null) timestamp = 0;
	if(controlKey == null) controlKey = false;
	if(commandKey == null) commandKey = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(pressure == null) pressure = 0;
	if(sizeY == null) sizeY = 0;
	if(sizeX == null) sizeX = 0;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(isPrimaryTouchPoint == null) isPrimaryTouchPoint = false;
	if(touchPointID == null) touchPointID = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_TouchEvent
});
var openfl_external_ExternalInterface = function() { };
$hxClasses["openfl.external.ExternalInterface"] = openfl_external_ExternalInterface;
openfl_external_ExternalInterface.__name__ = ["openfl","external","ExternalInterface"];
openfl_external_ExternalInterface.call = function(functionName,p1,p2,p3,p4,p5) {
	var callResponse = null;
	var thisArg = functionName.split(".").slice(0,-1).join(".");
	if(thisArg.length > 0) functionName += ".bind(" + thisArg + ")";
	if(p1 == null) callResponse = eval(functionName)(); else if(p2 == null) callResponse = eval(functionName)(p1); else if(p3 == null) callResponse = eval(functionName)(p1,p2); else if(p4 == null) callResponse = eval(functionName)(p1,p2,p3); else if(p5 == null) callResponse = eval(functionName)(p1,p2,p3,p4); else callResponse = eval(functionName)(p1,p2,p3,p4,p5);
	return callResponse;
};
var openfl_filters_BitmapFilter = function() {
	this.__saveLastFilter = false;
	this.__passes = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.__tmpRenderTexture = null;
openfl_filters_BitmapFilter.__applyFilters = function(filters,renderSession,source,target,sourceRect,destPoint) {
	var same = target == source && target.__usingPingPongTexture;
	if(same) target.__pingPongTexture.useOldTexture = true;
	if(sourceRect == null) sourceRect = source.rect;
	var lastFilterOutput = null;
	var useLastFilter = false;
	var srcShader = source.__shader;
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		useLastFilter = false;
		if(filter.__saveLastFilter) {
			target.__pingPongTexture.swap();
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,true);
			lastFilterOutput = target.__pingPongTexture.get_oldRenderTexture();
			target.__pingPongTexture.set_oldRenderTexture(openfl_filters_BitmapFilter.__tmpRenderTexture);
		}
		var _g2 = 0;
		var _g1 = filter.__passes;
		while(_g2 < _g1) {
			var pass = _g2++;
			useLastFilter = filter.__saveLastFilter && filter.__useLastFilter(pass);
			if(same && !useLastFilter) target.__pingPongTexture.swap();
			if(useLastFilter) {
				openfl_filters_BitmapFilter.__tmpRenderTexture = target.__pingPongTexture.get_oldRenderTexture();
				target.__pingPongTexture.set_oldRenderTexture(lastFilterOutput);
			}
			source.__shader = filter.__preparePass(pass);
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,!useLastFilter);
		}
	}
	source.__shader = srcShader;
	if(same) target.__pingPongTexture.useOldTexture = false;
};
openfl_filters_BitmapFilter.__expandBounds = function(filters,rect,matrix) {
	var r = openfl_geom_Rectangle.__temp;
	r.setEmpty();
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		filter.__growBounds(r);
	}
	r.__transform(r,matrix);
	rect.__expand(r.x,r.y,r.width,r.height);
};
openfl_filters_BitmapFilter.prototype = {
	__growBounds: function(rect) {
	}
	,__preparePass: function(pass) {
		return null;
	}
	,__useLastFilter: function(pass) {
		return false;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_geom_Matrix3D = function() { };
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.prototype = {
	__class__: openfl_geom_Matrix3D
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	get_colorTransform: function() {
		return this.__colorTransform;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function() { };
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
var openfl_media_ID3Info = function() { };
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
		if(openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
			openfl_media_Sound.__registeredSounds.remove(this.__soundID);
			createjs.Sound.removeSound(this.__soundID);
		}
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		if(!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
			openfl_media_Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(1,0);
		var pan = sndTransform.pan;
		if(pan == 0) pan = -0.0000001;
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,pan);
		return new openfl_media_SoundChannel(instance);
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			if(openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
				createjs.Sound.removeSound(this.__soundID);
				createjs.Sound.registerSound(this.url,this.__soundID);
			}
		}
	}
	,__class__: openfl_media_Sound
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance.removeEventListener("complete",$bind(this,this.source_onComplete));
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function() { };
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	__class__: openfl_media_SoundTransform
};
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.__sharedObjects = null;
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) secure = false;
	if(localPath == null) localPath = window.location.href;
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		openfl_Lib.application.onExit.add(openfl_net_SharedObject.application_onExit);
	}
	var id = localPath + "/" + name;
	if(!openfl_net_SharedObject.__sharedObjects.exists(id)) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) encodedData = storage.getItem(localPath + ":" + name);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
		if(encodedData != null && encodedData != "") try {
			var unserializer = new haxe_Unserializer(encodedData);
			unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
			sharedObject.data = unserializer.unserialize();
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		}
		openfl_net_SharedObject.__sharedObjects.set(id,sharedObject);
	}
	return openfl_net_SharedObject.__sharedObjects.get(id);
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) name = StringTools.replace(name,"neash.","openfl.");
		if(StringTools.startsWith(name,"native.")) name = StringTools.replace(name,"native.","openfl.");
		if(StringTools.startsWith(name,"flash.")) name = StringTools.replace(name,"flash.","openfl.");
		if(StringTools.startsWith(name,"openfl._v2.")) name = StringTools.replace(name,"openfl._v2.","openfl.");
		if(StringTools.startsWith(name,"openfl._legacy.")) name = StringTools.replace(name,"openfl._legacy.","openfl.");
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var $it0 = openfl_net_SharedObject.__sharedObjects.iterator();
	while( $it0.hasNext() ) {
		var sharedObject = $it0.next();
		sharedObject.flush();
	}
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) storage.removeItem(this.__localPath + ":" + this.__name);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) minDiskSpace = 0;
		if(Reflect.fields(this.data).length == 0) return openfl_net_SharedObjectFlushStatus.FLUSHED;
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return openfl_net_SharedObjectFlushStatus.PENDING;
		}
		return openfl_net_SharedObjectFlushStatus.FLUSHED;
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) this.data[propertyName] = value;
	}
	,__class__: openfl_net_SharedObject
});
var openfl_net_SharedObjectFlushStatus = $hxClasses["openfl.net.SharedObjectFlushStatus"] = { __ename__ : ["openfl","net","SharedObjectFlushStatus"], __constructs__ : ["FLUSHED","PENDING"] };
openfl_net_SharedObjectFlushStatus.FLUSHED = ["FLUSHED",0];
openfl_net_SharedObjectFlushStatus.FLUSHED.toString = $estr;
openfl_net_SharedObjectFlushStatus.FLUSHED.__enum__ = openfl_net_SharedObjectFlushStatus;
openfl_net_SharedObjectFlushStatus.PENDING = ["PENDING",1];
openfl_net_SharedObjectFlushStatus.PENDING.toString = $estr;
openfl_net_SharedObjectFlushStatus.PENDING.__enum__ = openfl_net_SharedObjectFlushStatus;
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this._currentRequest = request;
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onerror = function() {
			_g.requestUrl(_g._currentRequest.url,_g._currentRequest.method,_g._currentRequest.data,_g._currentRequest.formatRequestHeaders());
		};
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = js_Boot.__cast(data1 , ArrayBuffer);
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,openfl_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl_events_Event(openfl_events_Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl_events_Event(openfl_events_Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl_events_ProgressEvent(openfl_events_ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl_events_SecurityErrorEvent(openfl_events_SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl_events_HTTPStatusEvent(openfl_events_HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
var openfl_net_URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : ["openfl","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl_net_URLLoaderDataFormat.BINARY.toString = $estr;
openfl_net_URLLoaderDataFormat.BINARY.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl_net_URLLoaderDataFormat.TEXT.toString = $estr;
openfl_net_URLLoaderDataFormat.TEXT.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl_net_URLLoaderDataFormat.VARIABLES.__enum__ = openfl_net_URLLoaderDataFormat;
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,openfl_utils_ByteArrayData)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function() { };
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
var openfl_system_LoaderContext = function() { };
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
var openfl_text_AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : ["openfl","text","AntiAliasType"], __constructs__ : ["ADVANCED","NORMAL"] };
openfl_text_AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl_text_AntiAliasType.ADVANCED.toString = $estr;
openfl_text_AntiAliasType.ADVANCED.__enum__ = openfl_text_AntiAliasType;
openfl_text_AntiAliasType.NORMAL = ["NORMAL",1];
openfl_text_AntiAliasType.NORMAL.toString = $estr;
openfl_text_AntiAliasType.NORMAL.__enum__ = openfl_text_AntiAliasType;
var openfl_text_GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : ["openfl","text","GridFitType"], __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl_text_GridFitType.NONE = ["NONE",0];
openfl_text_GridFitType.NONE.toString = $estr;
openfl_text_GridFitType.NONE.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.PIXEL = ["PIXEL",1];
openfl_text_GridFitType.PIXEL.toString = $estr;
openfl_text_GridFitType.PIXEL.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl_text_GridFitType.SUBPIXEL.toString = $estr;
openfl_text_GridFitType.SUBPIXEL.__enum__ = openfl_text_GridFitType;
var openfl_text_TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : ["openfl","text","TextFieldAutoSize"], __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl_text_TextFieldAutoSize.CENTER = ["CENTER",0];
openfl_text_TextFieldAutoSize.CENTER.toString = $estr;
openfl_text_TextFieldAutoSize.CENTER.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.LEFT = ["LEFT",1];
openfl_text_TextFieldAutoSize.LEFT.toString = $estr;
openfl_text_TextFieldAutoSize.LEFT.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.NONE = ["NONE",2];
openfl_text_TextFieldAutoSize.NONE.toString = $estr;
openfl_text_TextFieldAutoSize.NONE.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl_text_TextFieldAutoSize.RIGHT.toString = $estr;
openfl_text_TextFieldAutoSize.RIGHT.__enum__ = openfl_text_TextFieldAutoSize;
var openfl_text_TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : ["openfl","text","TextFieldType"], __constructs__ : ["DYNAMIC","INPUT"] };
openfl_text_TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl_text_TextFieldType.DYNAMIC.toString = $estr;
openfl_text_TextFieldType.DYNAMIC.__enum__ = openfl_text_TextFieldType;
openfl_text_TextFieldType.INPUT = ["INPUT",1];
openfl_text_TextFieldType.INPUT.toString = $estr;
openfl_text_TextFieldType.INPUT.__enum__ = openfl_text_TextFieldType;
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : ["openfl","text","TextFormatAlign"], __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl_text_TextFormatAlign.LEFT = ["LEFT",0];
openfl_text_TextFormatAlign.LEFT.toString = $estr;
openfl_text_TextFormatAlign.LEFT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.RIGHT = ["RIGHT",1];
openfl_text_TextFormatAlign.RIGHT.toString = $estr;
openfl_text_TextFormatAlign.RIGHT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl_text_TextFormatAlign.JUSTIFY.toString = $estr;
openfl_text_TextFormatAlign.JUSTIFY.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.CENTER = ["CENTER",3];
openfl_text_TextFormatAlign.CENTER.toString = $estr;
openfl_text_TextFormatAlign.CENTER.__enum__ = openfl_text_TextFormatAlign;
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() { };
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) return null;
	if(!(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
		var device = new openfl_ui_GameInputDevice(gamepad.get_guid(),gamepad.get_name());
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_ADDED,null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			var x = openfl_ui_GameInput.__devices.h[gamepad.__id__];
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,x);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_REMOVED,null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	__class__: openfl_ui_GameInputDevice
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	__class__: openfl_utils_IDataOutput
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	__class__: openfl_utils_IDataInput
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) length = 0;
	var bytes = haxe_io_Bytes.alloc(length);
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	this.__endian = "bigEndian";
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	readUTFBytes: function(length) {
		if(this.position + length > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
		this.__length = bytes.length;
	}
	,__class__: openfl_utils_ByteArrayData
});
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	__class__: haxe_lang_Iterable
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "__ASSET__:bitmap_nick_hol_nn_screen_PreloaderSpongebob", data : ""},{ name : "__ASSET__:bitmap_nick_hol_nn_screen_PreloaderLogo", data : ""},{ name : "__ASSET__:bitmap_nick_hol_nn_screen_PreloaderBG", data : ""},{ name : "__ASSET__:bitmap_nick_hol_nn_screen_PreloaderBar", data : ""}];
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = $global.DataView || js_html_compat_DataView;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.00392156862745);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
openfl_display_DisplayObject.__cacheAsBitmapMode = false;
openfl_text_Font.__registeredFonts = [];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.UNLOAD = "unload";
com_jpmata_managers_SoundManager.supportedAudioFormat = com_jpmata_managers_SoundFormat.ALL;
com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAtlas = new haxe_ds_StringMap();
com_jpmata_utils_hxanimation_HxModAnimationUtility._cacheAnim = new haxe_ds_StringMap();
com_jpmata_views_text_BasicTextField.debugMode = false;
com_jpmata_views_text_BasicTextField.wordWrapAllTexts = true;
com_jpmata_views_text_BasicTextField.testDiacritics = false;
com_jpmata_views_text_BasicTextField.adjustByPlatform = true;
com_jpmata_views_text_BasicTextField.normalizeSpaces = true;
com_jpmata_views_text_BasicTextField.globalFont = "arial";
com_jpmata_views_text_BasicTextField.useGlobalFont = false;
com_philipmabanta_hxanimation_HxMovieClip.playList = new List();
com_philipmabanta_hxanimation_HxMovieClip.tickSourceInitialized = false;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = Type;
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) h.setReserved("lt","<"); else h.h["lt"] = "<";
	if(__map_reserved.gt != null) h.setReserved("gt",">"); else h.h["gt"] = ">";
	if(__map_reserved.amp != null) h.setReserved("amp","&"); else h.h["amp"] = "&";
	if(__map_reserved.quot != null) h.setReserved("quot","\""); else h.h["quot"] = "\"";
	if(__map_reserved.apos != null) h.setReserved("apos","'"); else h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
ie_lib_display_BaseButton.BUTTON_MULTI_TOUCH = false;
ie_lib_utils_AudioUnembedded._bgm = { };
ie_lib_utils_AudioUnembedded._sfx = { };
ie_lib_manager_AssetsConfig.unembeddedAssets = new ie_lib_utils_AssetsUnembedded();
ie_lib_manager_AssetsConfig.localizedAssets = new ie_lib_utils_AssetsLocalized();
ie_lib_manager_AssetsConfig.unembeddedAudio = new ie_lib_utils_AudioUnembedded();
ie_lib_manager_AssetsConfig.localizedAudio = new ie_lib_utils_AudioLocalized();
ie_lib_manager_ScreenManager.baseWidth = 750;
ie_lib_manager_ScreenManager.baseHeight = 500;
ie_lib_manager_UpdateManager.DELAY_THRESHOLD = 0.5;
ie_lib_utils_assets_AssetsUtility.baseURL = "";
ie_lib_utils_assets_EmbeddedJSON.rootURL = "";
ie_lib_utils_device_BrowserInfoUtility._info = null;
ie_lib_utils_display_DisplayUtility._maxWidth = 0;
ie_lib_utils_display_DisplayUtility._nominalWidth = 0;
ie_lib_utils_display_DisplayUtility._nominalHeight = 0;
ie_lib_utils_display_DisplayUtility._orientation = null;
ie_lib_utils_display_DisplayUtility._stageScale = 1;
ie_lib_utils_display_DisplayUtility._safeRect = null;
ie_lib_utils_display_DisplayUtility._viewRect = null;
ie_lib_utils_gc_DestroyUtility.enableCocoonDispose = false;
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.onChange = new lime_app_Event_$Void_$Void();
lime_Assets.initialized = false;
lime__$backend_html5_HTML5Window.windowID = 0;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
nick_hol_nn_game_BoardEvent.COMPLETE = "boardEvt_complete";
nick_hol_nn_screen_PreloaderBG.resourceType = "image/png";
nick_hol_nn_screen_PreloaderBG.resourceName = "__ASSET__:bitmap_nick_hol_nn_screen_PreloaderBG";
nick_hol_nn_screen_PreloaderBar.resourceType = "image/png";
nick_hol_nn_screen_PreloaderBar.resourceName = "__ASSET__:bitmap_nick_hol_nn_screen_PreloaderBar";
nick_hol_nn_screen_PreloaderSpongebob.resourceType = "image/png";
nick_hol_nn_screen_PreloaderSpongebob.resourceName = "__ASSET__:bitmap_nick_hol_nn_screen_PreloaderSpongebob";
nick_hol_nn_screen_PreloaderLogo.resourceType = "image/png";
nick_hol_nn_screen_PreloaderLogo.resourceName = "__ASSET__:bitmap_nick_hol_nn_screen_PreloaderLogo";
nick_hol_nn_screen_Preloader._isSoundPlayed = false;
openfl_Assets.cache = new openfl_AssetCache();
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
openfl_Lib.current = new openfl_display_MovieClip();
openfl__$internal_renderer_GraphicsPaths.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_GraphicsPaths.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_opengl_GLBitmap.fbData = [];
openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   " + "openfl_vTexCoord" + " = " + "openfl_aTexCoord0" + ";","   if(" + "openfl_uUseColorTransform" + ")","   \t" + "openfl_vColor" + " = " + "openfl_aColor" + ";","   else","   \t" + "openfl_vColor" + " = vec4(" + "openfl_aColor" + ".rgb * " + "openfl_aColor" + ".a, " + "openfl_aColor" + ".a);","}"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5126,false,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache = new haxe_ds_StringMap();
openfl_display_Shader.uObjectSize = "openfl_uObjectSize";
openfl_display_Shader.uTextureSize = "openfl_uTextureSize";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_external_ExternalInterface.available = true;
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
