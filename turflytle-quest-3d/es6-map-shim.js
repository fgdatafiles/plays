(function(a){function b(a){var b=[],c=[],d=[],f=Object.is||function(a,b){return a===b?0!==a||1/a==1/b:a!=a&&b!=b},g=function(a){if(a!=a||0===a)for(var b=this.length;b--&&!f(this[b],a););else b=[].indexOf.call(this,a);return b},h=function(a,b){var c=0;return Object.create({},{next:{value:function(){if(c<a.items().length)switch(b){case"keys":return a.keys()[c++];case"values":return a.values()[c++];case"keys+values":return[].slice.call(a.items()[c++]);default:throw new TypeError("Invalid iterator type")}throw new Error("Stop Iteration")}},iterator:{value:function(){return this}},toString:{value:function(){return"[object Map Iterator]"}}})},i=function(a,e){var f=g.call(c,a);f>-1?(b[f][1]=e,d[f]=e):(b.push([a,e]),c.push(a),d.push(e))},j=function(a){if(2!==a.length)throw new TypeError("Invalid iterable passed to Map constructor");i(a[0],a[1])};if(Array.isArray(a))a.forEach(j);else if(void 0!==a)throw new TypeError("Invalid Map");return Object.create(e,{items:{value:function(){return[].slice.call(b)}},keys:{value:function(){return[].slice.call(c)}},values:{value:function(){return[].slice.call(d)}},has:{value:function(a){var b=g.call(c,a);return b>-1}},get:{value:function(a){var b=g.call(c,a);return b>-1?d[b]:void 0}},set:{value:i},size:{get:function(){return b.length}},clear:{value:function(){c.length=d.length=b.length=0}},"delete":{value:function(a){var e=g.call(c,a);return e>-1?(c.splice(e,1),d.splice(e,1),b.splice(e,1),!0):!1}},forEach:{value:function(a){function b(){try{return c.next()}catch(a){return}}if("function"!=typeof a)throw new TypeError("Invalid callback function given to forEach");for(var c=this.iterator(),d=b(),e=b();void 0!==d;)a.apply(arguments[1],[d[1],d[0],this]),d=e,e=b()}},iterator:{value:function(){return new h(this,"keys+values")}},toString:{value:function(){return"[Object Map]"}}})}var c="undefined"==a,d=c?this:global,a=c?{}:exports,e=b.prototype;b.prototype=e=b(),d.MapShim=a.MapShim=d.MapShim||b}).call(this,typeof exports);